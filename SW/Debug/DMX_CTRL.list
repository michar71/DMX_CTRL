
DMX_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003048  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003154  08003154  00013154  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000017c  20000000  080031c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001230  2000017c  08003340  0002017c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200013ac  08003340  000213ac  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000155a2  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003869  00000000  00000000  00035747  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006e96  00000000  00000000  00038fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b50  00000000  00000000  0003fe48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001038  00000000  00000000  00040998  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000069fb  00000000  00000000  000419d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003d1d  00000000  00000000  000483cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004c0e8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ce4  00000000  00000000  0004c164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800313c 	.word	0x0800313c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800313c 	.word	0x0800313c

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f9b4 	bl	80004d0 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f968 	bl	800044c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000118 	.word	0x20000118
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f941 	bl	8000428 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f002 fc72 	bl	8002a94 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	200003bc 	.word	0x200003bc
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200003bc 	.word	0x200003bc

080001dc <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80001dc:	2300      	movs	r3, #0
{ 
 80001de:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80001e0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80001e2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d074      	beq.n	80002d4 <HAL_ADC_ConfigChannel+0xf8>
 80001ea:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80001ec:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80001ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80001f2:	2d06      	cmp	r5, #6
 80001f4:	6802      	ldr	r2, [r0, #0]
 80001f6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80001fa:	680c      	ldr	r4, [r1, #0]
 80001fc:	d825      	bhi.n	800024a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80001fe:	442b      	add	r3, r5
 8000200:	251f      	movs	r5, #31
 8000202:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000204:	3b05      	subs	r3, #5
 8000206:	409d      	lsls	r5, r3
 8000208:	ea26 0505 	bic.w	r5, r6, r5
 800020c:	fa04 f303 	lsl.w	r3, r4, r3
 8000210:	432b      	orrs	r3, r5
 8000212:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000214:	2c09      	cmp	r4, #9
 8000216:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800021a:	688d      	ldr	r5, [r1, #8]
 800021c:	d92f      	bls.n	800027e <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800021e:	2607      	movs	r6, #7
 8000220:	4423      	add	r3, r4
 8000222:	68d1      	ldr	r1, [r2, #12]
 8000224:	3b1e      	subs	r3, #30
 8000226:	409e      	lsls	r6, r3
 8000228:	ea21 0106 	bic.w	r1, r1, r6
 800022c:	fa05 f303 	lsl.w	r3, r5, r3
 8000230:	430b      	orrs	r3, r1
 8000232:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000234:	f1a4 0310 	sub.w	r3, r4, #16
 8000238:	2b01      	cmp	r3, #1
 800023a:	d92b      	bls.n	8000294 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800023c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800023e:	2200      	movs	r2, #0
 8000240:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000244:	4618      	mov	r0, r3
 8000246:	b002      	add	sp, #8
 8000248:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800024a:	2d0c      	cmp	r5, #12
 800024c:	d80b      	bhi.n	8000266 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800024e:	442b      	add	r3, r5
 8000250:	251f      	movs	r5, #31
 8000252:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000254:	3b23      	subs	r3, #35	; 0x23
 8000256:	409d      	lsls	r5, r3
 8000258:	ea26 0505 	bic.w	r5, r6, r5
 800025c:	fa04 f303 	lsl.w	r3, r4, r3
 8000260:	432b      	orrs	r3, r5
 8000262:	6313      	str	r3, [r2, #48]	; 0x30
 8000264:	e7d6      	b.n	8000214 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000266:	442b      	add	r3, r5
 8000268:	251f      	movs	r5, #31
 800026a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800026c:	3b41      	subs	r3, #65	; 0x41
 800026e:	409d      	lsls	r5, r3
 8000270:	ea26 0505 	bic.w	r5, r6, r5
 8000274:	fa04 f303 	lsl.w	r3, r4, r3
 8000278:	432b      	orrs	r3, r5
 800027a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800027c:	e7ca      	b.n	8000214 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800027e:	2607      	movs	r6, #7
 8000280:	6911      	ldr	r1, [r2, #16]
 8000282:	4423      	add	r3, r4
 8000284:	409e      	lsls	r6, r3
 8000286:	ea21 0106 	bic.w	r1, r1, r6
 800028a:	fa05 f303 	lsl.w	r3, r5, r3
 800028e:	430b      	orrs	r3, r1
 8000290:	6113      	str	r3, [r2, #16]
 8000292:	e7cf      	b.n	8000234 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <HAL_ADC_ConfigChannel+0xfc>)
 8000296:	429a      	cmp	r2, r3
 8000298:	d116      	bne.n	80002c8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800029a:	6893      	ldr	r3, [r2, #8]
 800029c:	021b      	lsls	r3, r3, #8
 800029e:	d4cd      	bmi.n	800023c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002a0:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002a2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002a8:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002aa:	d1c7      	bne.n	800023c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <HAL_ADC_ConfigChannel+0x100>)
 80002ae:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <HAL_ADC_ConfigChannel+0x104>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80002b6:	230a      	movs	r3, #10
 80002b8:	4353      	muls	r3, r2
            wait_loop_index--;
 80002ba:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002bc:	9b01      	ldr	r3, [sp, #4]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0bc      	beq.n	800023c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80002c2:	9b01      	ldr	r3, [sp, #4]
 80002c4:	3b01      	subs	r3, #1
 80002c6:	e7f8      	b.n	80002ba <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002d0:	2301      	movs	r3, #1
 80002d2:	e7b4      	b.n	800023e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80002d4:	2302      	movs	r3, #2
 80002d6:	e7b5      	b.n	8000244 <HAL_ADC_ConfigChannel+0x68>
 80002d8:	40012400 	.word	0x40012400
 80002dc:	20000118 	.word	0x20000118
 80002e0:	000f4240 	.word	0x000f4240

080002e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80002e4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002e6:	6803      	ldr	r3, [r0, #0]
{
 80002e8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002ea:	689a      	ldr	r2, [r3, #8]
 80002ec:	07d2      	lsls	r2, r2, #31
 80002ee:	d401      	bmi.n	80002f4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80002f0:	2000      	movs	r0, #0
 80002f2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80002f4:	689a      	ldr	r2, [r3, #8]
 80002f6:	f022 0201 	bic.w	r2, r2, #1
 80002fa:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80002fc:	f7ff ff68 	bl	80001d0 <HAL_GetTick>
 8000300:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000302:	6823      	ldr	r3, [r4, #0]
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	07db      	lsls	r3, r3, #31
 8000308:	d5f2      	bpl.n	80002f0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800030a:	f7ff ff61 	bl	80001d0 <HAL_GetTick>
 800030e:	1b40      	subs	r0, r0, r5
 8000310:	2802      	cmp	r0, #2
 8000312:	d9f6      	bls.n	8000302 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000314:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000316:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000318:	f043 0310 	orr.w	r3, r3, #16
 800031c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800031e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000326:	bd38      	pop	{r3, r4, r5, pc}

08000328 <HAL_ADC_Init>:
{
 8000328:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800032a:	4604      	mov	r4, r0
 800032c:	2800      	cmp	r0, #0
 800032e:	d071      	beq.n	8000414 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000330:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000332:	b923      	cbnz	r3, 800033e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000334:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000336:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800033a:	f002 fbcd 	bl	8002ad8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800033e:	4620      	mov	r0, r4
 8000340:	f7ff ffd0 	bl	80002e4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000344:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000346:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800034a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800034c:	d164      	bne.n	8000418 <HAL_ADC_Init+0xf0>
 800034e:	2800      	cmp	r0, #0
 8000350:	d162      	bne.n	8000418 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000352:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000354:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000358:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800035a:	f023 0302 	bic.w	r3, r3, #2
 800035e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000362:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000364:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000366:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000368:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800036a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800036e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000372:	d038      	beq.n	80003e6 <HAL_ADC_Init+0xbe>
 8000374:	2901      	cmp	r1, #1
 8000376:	bf14      	ite	ne
 8000378:	4606      	movne	r6, r0
 800037a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800037e:	7d25      	ldrb	r5, [r4, #20]
 8000380:	2d01      	cmp	r5, #1
 8000382:	d107      	bne.n	8000394 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000384:	2b00      	cmp	r3, #0
 8000386:	d130      	bne.n	80003ea <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000388:	69a3      	ldr	r3, [r4, #24]
 800038a:	3b01      	subs	r3, #1
 800038c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000390:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000394:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000396:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800039a:	685d      	ldr	r5, [r3, #4]
 800039c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80003a0:	ea45 0506 	orr.w	r5, r5, r6
 80003a4:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80003a6:	689e      	ldr	r6, [r3, #8]
 80003a8:	4d1d      	ldr	r5, [pc, #116]	; (8000420 <HAL_ADC_Init+0xf8>)
 80003aa:	ea05 0506 	and.w	r5, r5, r6
 80003ae:	ea45 0502 	orr.w	r5, r5, r2
 80003b2:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003b4:	d001      	beq.n	80003ba <HAL_ADC_Init+0x92>
 80003b6:	2901      	cmp	r1, #1
 80003b8:	d120      	bne.n	80003fc <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80003ba:	6921      	ldr	r1, [r4, #16]
 80003bc:	3901      	subs	r1, #1
 80003be:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80003c0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80003c2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80003c6:	4329      	orrs	r1, r5
 80003c8:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003ca:	6899      	ldr	r1, [r3, #8]
 80003cc:	4b15      	ldr	r3, [pc, #84]	; (8000424 <HAL_ADC_Init+0xfc>)
 80003ce:	400b      	ands	r3, r1
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d115      	bne.n	8000400 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80003d4:	2300      	movs	r3, #0
 80003d6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80003d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003da:	f023 0303 	bic.w	r3, r3, #3
 80003de:	f043 0301 	orr.w	r3, r3, #1
 80003e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80003e6:	460e      	mov	r6, r1
 80003e8:	e7c9      	b.n	800037e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003ec:	f043 0320 	orr.w	r3, r3, #32
 80003f0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80003fa:	e7cb      	b.n	8000394 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80003fc:	2100      	movs	r1, #0
 80003fe:	e7df      	b.n	80003c0 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000400:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000402:	f023 0312 	bic.w	r3, r3, #18
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800040c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000414:	2001      	movs	r0, #1
}
 8000416:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000418:	f043 0310 	orr.w	r3, r3, #16
 800041c:	62a3      	str	r3, [r4, #40]	; 0x28
 800041e:	e7f9      	b.n	8000414 <HAL_ADC_Init+0xec>
 8000420:	ffe1f7fd 	.word	0xffe1f7fd
 8000424:	ff1f0efe 	.word	0xff1f0efe

08000428 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000428:	4a07      	ldr	r2, [pc, #28]	; (8000448 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800042a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800042c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800042e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000432:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000436:	041b      	lsls	r3, r3, #16
 8000438:	0c1b      	lsrs	r3, r3, #16
 800043a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800043e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000442:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000444:	60d3      	str	r3, [r2, #12]
 8000446:	4770      	bx	lr
 8000448:	e000ed00 	.word	0xe000ed00

0800044c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800044c:	4b17      	ldr	r3, [pc, #92]	; (80004ac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800044e:	b530      	push	{r4, r5, lr}
 8000450:	68dc      	ldr	r4, [r3, #12]
 8000452:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000456:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800045a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800045c:	2b04      	cmp	r3, #4
 800045e:	bf28      	it	cs
 8000460:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000462:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000464:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000468:	bf98      	it	ls
 800046a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800046c:	fa05 f303 	lsl.w	r3, r5, r3
 8000470:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000474:	bf88      	it	hi
 8000476:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000478:	4019      	ands	r1, r3
 800047a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800047c:	fa05 f404 	lsl.w	r4, r5, r4
 8000480:	3c01      	subs	r4, #1
 8000482:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000484:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000486:	ea42 0201 	orr.w	r2, r2, r1
 800048a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800048e:	bfa9      	itett	ge
 8000490:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000494:	4b06      	ldrlt	r3, [pc, #24]	; (80004b0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000496:	b2d2      	uxtbge	r2, r2
 8000498:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800049c:	bfbb      	ittet	lt
 800049e:	f000 000f 	andlt.w	r0, r0, #15
 80004a2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a8:	541a      	strblt	r2, [r3, r0]
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	e000ed14 	.word	0xe000ed14

080004b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80004b4:	2800      	cmp	r0, #0
 80004b6:	db08      	blt.n	80004ca <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004b8:	2301      	movs	r3, #1
 80004ba:	0942      	lsrs	r2, r0, #5
 80004bc:	f000 001f 	and.w	r0, r0, #31
 80004c0:	fa03 f000 	lsl.w	r0, r3, r0
 80004c4:	4b01      	ldr	r3, [pc, #4]	; (80004cc <HAL_NVIC_EnableIRQ+0x18>)
 80004c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80004ca:	4770      	bx	lr
 80004cc:	e000e100 	.word	0xe000e100

080004d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004d0:	3801      	subs	r0, #1
 80004d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004d6:	d20a      	bcs.n	80004ee <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004de:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004e4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004e6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004e8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	e000e010 	.word	0xe000e010
 80004f8:	e000ed00 	.word	0xe000ed00

080004fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000500:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000502:	4626      	mov	r6, r4
 8000504:	4b66      	ldr	r3, [pc, #408]	; (80006a0 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000506:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80006b0 <HAL_GPIO_Init+0x1b4>
 800050a:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80006b4 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800050e:	680a      	ldr	r2, [r1, #0]
 8000510:	fa32 f506 	lsrs.w	r5, r2, r6
 8000514:	d102      	bne.n	800051c <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000516:	b003      	add	sp, #12
 8000518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800051c:	f04f 0801 	mov.w	r8, #1
 8000520:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000524:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000528:	4590      	cmp	r8, r2
 800052a:	d17f      	bne.n	800062c <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 800052c:	684d      	ldr	r5, [r1, #4]
 800052e:	2d12      	cmp	r5, #18
 8000530:	f000 80aa 	beq.w	8000688 <HAL_GPIO_Init+0x18c>
 8000534:	f200 8083 	bhi.w	800063e <HAL_GPIO_Init+0x142>
 8000538:	2d02      	cmp	r5, #2
 800053a:	f000 80a2 	beq.w	8000682 <HAL_GPIO_Init+0x186>
 800053e:	d877      	bhi.n	8000630 <HAL_GPIO_Init+0x134>
 8000540:	2d00      	cmp	r5, #0
 8000542:	f000 8089 	beq.w	8000658 <HAL_GPIO_Init+0x15c>
 8000546:	2d01      	cmp	r5, #1
 8000548:	f000 8099 	beq.w	800067e <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800054c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000550:	2aff      	cmp	r2, #255	; 0xff
 8000552:	bf93      	iteet	ls
 8000554:	4682      	movls	sl, r0
 8000556:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800055a:	3d08      	subhi	r5, #8
 800055c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000560:	bf92      	itee	ls
 8000562:	00b5      	lslls	r5, r6, #2
 8000564:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000568:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800056a:	fa09 f805 	lsl.w	r8, r9, r5
 800056e:	ea2b 0808 	bic.w	r8, fp, r8
 8000572:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000576:	bf88      	it	hi
 8000578:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800057c:	ea48 0505 	orr.w	r5, r8, r5
 8000580:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000584:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000588:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800058c:	d04e      	beq.n	800062c <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800058e:	4d45      	ldr	r5, [pc, #276]	; (80006a4 <HAL_GPIO_Init+0x1a8>)
 8000590:	4f44      	ldr	r7, [pc, #272]	; (80006a4 <HAL_GPIO_Init+0x1a8>)
 8000592:	69ad      	ldr	r5, [r5, #24]
 8000594:	f026 0803 	bic.w	r8, r6, #3
 8000598:	f045 0501 	orr.w	r5, r5, #1
 800059c:	61bd      	str	r5, [r7, #24]
 800059e:	69bd      	ldr	r5, [r7, #24]
 80005a0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80005a4:	f005 0501 	and.w	r5, r5, #1
 80005a8:	9501      	str	r5, [sp, #4]
 80005aa:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005ae:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005b2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005b4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80005b8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005bc:	fa09 f90b 	lsl.w	r9, r9, fp
 80005c0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005c4:	4d38      	ldr	r5, [pc, #224]	; (80006a8 <HAL_GPIO_Init+0x1ac>)
 80005c6:	42a8      	cmp	r0, r5
 80005c8:	d063      	beq.n	8000692 <HAL_GPIO_Init+0x196>
 80005ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005ce:	42a8      	cmp	r0, r5
 80005d0:	d061      	beq.n	8000696 <HAL_GPIO_Init+0x19a>
 80005d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005d6:	42a8      	cmp	r0, r5
 80005d8:	d05f      	beq.n	800069a <HAL_GPIO_Init+0x19e>
 80005da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005de:	42a8      	cmp	r0, r5
 80005e0:	bf0c      	ite	eq
 80005e2:	2503      	moveq	r5, #3
 80005e4:	2504      	movne	r5, #4
 80005e6:	fa05 f50b 	lsl.w	r5, r5, fp
 80005ea:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80005ee:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80005f2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005f4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80005f8:	bf14      	ite	ne
 80005fa:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005fc:	4395      	biceq	r5, r2
 80005fe:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000600:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000602:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000606:	bf14      	ite	ne
 8000608:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800060a:	4395      	biceq	r5, r2
 800060c:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800060e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000610:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000614:	bf14      	ite	ne
 8000616:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000618:	4395      	biceq	r5, r2
 800061a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800061c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800061e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000622:	bf14      	ite	ne
 8000624:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000626:	ea25 0202 	biceq.w	r2, r5, r2
 800062a:	60da      	str	r2, [r3, #12]
	position++;
 800062c:	3601      	adds	r6, #1
 800062e:	e76e      	b.n	800050e <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000630:	2d03      	cmp	r5, #3
 8000632:	d022      	beq.n	800067a <HAL_GPIO_Init+0x17e>
 8000634:	2d11      	cmp	r5, #17
 8000636:	d189      	bne.n	800054c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000638:	68cc      	ldr	r4, [r1, #12]
 800063a:	3404      	adds	r4, #4
          break;
 800063c:	e786      	b.n	800054c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800063e:	4f1b      	ldr	r7, [pc, #108]	; (80006ac <HAL_GPIO_Init+0x1b0>)
 8000640:	42bd      	cmp	r5, r7
 8000642:	d009      	beq.n	8000658 <HAL_GPIO_Init+0x15c>
 8000644:	d812      	bhi.n	800066c <HAL_GPIO_Init+0x170>
 8000646:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80006b8 <HAL_GPIO_Init+0x1bc>
 800064a:	454d      	cmp	r5, r9
 800064c:	d004      	beq.n	8000658 <HAL_GPIO_Init+0x15c>
 800064e:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000652:	454d      	cmp	r5, r9
 8000654:	f47f af7a 	bne.w	800054c <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000658:	688c      	ldr	r4, [r1, #8]
 800065a:	b1c4      	cbz	r4, 800068e <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800065c:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800065e:	bf0c      	ite	eq
 8000660:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000664:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000668:	2408      	movs	r4, #8
 800066a:	e76f      	b.n	800054c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800066c:	4575      	cmp	r5, lr
 800066e:	d0f3      	beq.n	8000658 <HAL_GPIO_Init+0x15c>
 8000670:	4565      	cmp	r5, ip
 8000672:	d0f1      	beq.n	8000658 <HAL_GPIO_Init+0x15c>
 8000674:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80006bc <HAL_GPIO_Init+0x1c0>
 8000678:	e7eb      	b.n	8000652 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800067a:	2400      	movs	r4, #0
 800067c:	e766      	b.n	800054c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800067e:	68cc      	ldr	r4, [r1, #12]
          break;
 8000680:	e764      	b.n	800054c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000682:	68cc      	ldr	r4, [r1, #12]
 8000684:	3408      	adds	r4, #8
          break;
 8000686:	e761      	b.n	800054c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000688:	68cc      	ldr	r4, [r1, #12]
 800068a:	340c      	adds	r4, #12
          break;
 800068c:	e75e      	b.n	800054c <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800068e:	2404      	movs	r4, #4
 8000690:	e75c      	b.n	800054c <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000692:	2500      	movs	r5, #0
 8000694:	e7a7      	b.n	80005e6 <HAL_GPIO_Init+0xea>
 8000696:	2501      	movs	r5, #1
 8000698:	e7a5      	b.n	80005e6 <HAL_GPIO_Init+0xea>
 800069a:	2502      	movs	r5, #2
 800069c:	e7a3      	b.n	80005e6 <HAL_GPIO_Init+0xea>
 800069e:	bf00      	nop
 80006a0:	40010400 	.word	0x40010400
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010800 	.word	0x40010800
 80006ac:	10210000 	.word	0x10210000
 80006b0:	10310000 	.word	0x10310000
 80006b4:	10320000 	.word	0x10320000
 80006b8:	10110000 	.word	0x10110000
 80006bc:	10220000 	.word	0x10220000

080006c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006c0:	b10a      	cbz	r2, 80006c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006c2:	6101      	str	r1, [r0, #16]
 80006c4:	4770      	bx	lr
 80006c6:	0409      	lsls	r1, r1, #16
 80006c8:	e7fb      	b.n	80006c2 <HAL_GPIO_WritePin+0x2>

080006ca <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80006ca:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80006cc:	4604      	mov	r4, r0
 80006ce:	b1d8      	cbz	r0, 8000708 <HAL_IWDG_Init+0x3e>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80006d0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80006d4:	6803      	ldr	r3, [r0, #0]
 80006d6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80006d8:	f245 5255 	movw	r2, #21845	; 0x5555
 80006dc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80006de:	6842      	ldr	r2, [r0, #4]
 80006e0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80006e2:	6882      	ldr	r2, [r0, #8]
 80006e4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80006e6:	f7ff fd73 	bl	80001d0 <HAL_GetTick>
 80006ea:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 80006ec:	6823      	ldr	r3, [r4, #0]
 80006ee:	68d8      	ldr	r0, [r3, #12]
 80006f0:	b918      	cbnz	r0, 80006fa <HAL_IWDG_Init+0x30>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80006f2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80006f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80006f8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80006fa:	f7ff fd69 	bl	80001d0 <HAL_GetTick>
 80006fe:	1b40      	subs	r0, r0, r5
 8000700:	2830      	cmp	r0, #48	; 0x30
 8000702:	d9f3      	bls.n	80006ec <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 8000704:	2003      	movs	r0, #3
}
 8000706:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000708:	2001      	movs	r0, #1
 800070a:	bd38      	pop	{r3, r4, r5, pc}

0800070c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800070e:	4604      	mov	r4, r0
{
 8000710:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000712:	b310      	cbz	r0, 800075a <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000714:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8000718:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800071c:	b91b      	cbnz	r3, 8000726 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800071e:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000722:	f002 fb17 	bl	8002d54 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000726:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000728:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800072a:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 800072c:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000730:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8000734:	f000 ff7a 	bl	800162c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800073c:	682b      	ldr	r3, [r5, #0]
 800073e:	4625      	mov	r5, r4
 8000740:	6033      	str	r3, [r6, #0]
 8000742:	1d27      	adds	r7, r4, #4
 8000744:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000748:	f855 0b10 	ldr.w	r0, [r5], #16
 800074c:	f000 ff5e 	bl	800160c <USB_CoreInit>
 8000750:	4606      	mov	r6, r0
 8000752:	b120      	cbz	r0, 800075e <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000754:	2302      	movs	r3, #2
 8000756:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 800075a:	2501      	movs	r5, #1
 800075c:	e048      	b.n	80007f0 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800075e:	4601      	mov	r1, r0
 8000760:	6820      	ldr	r0, [r4, #0]
 8000762:	f000 ff6d 	bl	8001640 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000766:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000768:	f04f 0e01 	mov.w	lr, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800076c:	6861      	ldr	r1, [r4, #4]
 800076e:	b2c3      	uxtb	r3, r0
 8000770:	4299      	cmp	r1, r3
 8000772:	f100 0001 	add.w	r0, r0, #1
 8000776:	d817      	bhi.n	80007a8 <HAL_PCD_Init+0x9c>
 8000778:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800077a:	4610      	mov	r0, r2
 800077c:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800077e:	4299      	cmp	r1, r3
 8000780:	f102 0201 	add.w	r2, r2, #1
 8000784:	d81d      	bhi.n	80007c2 <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000786:	466e      	mov	r6, sp
 8000788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800078c:	682b      	ldr	r3, [r5, #0]
 800078e:	6033      	str	r3, [r6, #0]
 8000790:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000794:	6820      	ldr	r0, [r4, #0]
 8000796:	f000 ff55 	bl	8001644 <USB_DevInit>
 800079a:	2301      	movs	r3, #1
 800079c:	4605      	mov	r5, r0
 800079e:	b300      	cbz	r0, 80007e2 <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80007a0:	2202      	movs	r2, #2
 80007a2:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 80007a6:	e7d8      	b.n	800075a <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 80007a8:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80007ac:	f882 e029 	strb.w	lr, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80007b0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80007b4:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80007b6:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 80007ba:	6396      	str	r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80007bc:	63d6      	str	r6, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80007be:	6416      	str	r6, [r2, #64]	; 0x40
 80007c0:	e7d5      	b.n	800076e <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 80007c2:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 80007c6:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 80007ca:	330a      	adds	r3, #10
 80007cc:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 80007ce:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80007d2:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80007d6:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80007da:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80007de:	50e0      	str	r0, [r4, r3]
 80007e0:	e7cc      	b.n	800077c <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80007e2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80007e6:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80007ea:	6820      	ldr	r0, [r4, #0]
 80007ec:	f001 fa10 	bl	8001c10 <USB_DevDisconnect>

  return HAL_OK;
}
 80007f0:	4628      	mov	r0, r5
 80007f2:	b007      	add	sp, #28
 80007f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007f6 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80007f6:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 80007fa:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80007fc:	2b01      	cmp	r3, #1
{
 80007fe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000800:	d00e      	beq.n	8000820 <HAL_PCD_Start+0x2a>
 8000802:	2101      	movs	r1, #1
 8000804:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000808:	f002 fbcd 	bl	8002fa6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800080c:	6820      	ldr	r0, [r4, #0]
 800080e:	f001 f9fd 	bl	8001c0c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000812:	6820      	ldr	r0, [r4, #0]
 8000814:	f000 ff01 	bl	800161a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000818:	2000      	movs	r0, #0
 800081a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 800081e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000820:	2002      	movs	r0, #2
}
 8000822:	bd10      	pop	{r4, pc}

08000824 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000824:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 8000828:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800082a:	2a01      	cmp	r2, #1
{
 800082c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800082e:	d00b      	beq.n	8000848 <HAL_PCD_SetAddress+0x24>
 8000830:	2201      	movs	r2, #1
 8000832:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8000836:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800083a:	6800      	ldr	r0, [r0, #0]
 800083c:	f001 f9e0 	bl	8001c00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000840:	2000      	movs	r0, #0
 8000842:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 8000846:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000848:	2002      	movs	r0, #2
  return HAL_OK;
}
 800084a:	bd10      	pop	{r4, pc}

0800084c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800084c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800084e:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8000852:	4604      	mov	r4, r0
 8000854:	f001 0007 	and.w	r0, r1, #7
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000858:	ea4f 1540 	mov.w	r5, r0, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 800085c:	d01f      	beq.n	800089e <HAL_PCD_EP_Open+0x52>
    ep->is_in = 1U;
 800085e:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000860:	f105 0128 	add.w	r1, r5, #40	; 0x28
    ep->is_in = 1U;
 8000864:	4425      	add	r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000866:	4421      	add	r1, r4
    ep->is_in = 1U;
 8000868:	f885 6029 	strb.w	r6, [r5, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 800086c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 800086e:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000870:	b2c0      	uxtb	r0, r0
 8000872:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8000874:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8000876:	b102      	cbz	r2, 800087a <HAL_PCD_EP_Open+0x2e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000878:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800087a:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 800087c:	bf04      	itt	eq
 800087e:	2300      	moveq	r3, #0
 8000880:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8000882:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000886:	2b01      	cmp	r3, #1
 8000888:	d011      	beq.n	80008ae <HAL_PCD_EP_Open+0x62>
 800088a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800088c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800088e:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000892:	f000 fef3 	bl	800167c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000896:	2000      	movs	r0, #0
 8000898:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 800089c:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 800089e:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80008a0:	f505 7194 	add.w	r1, r5, #296	; 0x128
    ep->is_in = 0U;
 80008a4:	4425      	add	r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80008a6:	4421      	add	r1, r4
    ep->is_in = 0U;
 80008a8:	f885 6129 	strb.w	r6, [r5, #297]	; 0x129
 80008ac:	e7de      	b.n	800086c <HAL_PCD_EP_Open+0x20>
  __HAL_LOCK(hpcd);
 80008ae:	2002      	movs	r0, #2
}
 80008b0:	bd70      	pop	{r4, r5, r6, pc}

080008b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80008b2:	f001 0307 	and.w	r3, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80008b6:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80008ba:	b510      	push	{r4, lr}
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80008bc:	ea4f 1243 	mov.w	r2, r3, lsl #5
{
 80008c0:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80008c2:	d015      	beq.n	80008f0 <HAL_PCD_EP_Close+0x3e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80008c4:	f102 0128 	add.w	r1, r2, #40	; 0x28
 80008c8:	4401      	add	r1, r0
    ep->is_in = 1U;
 80008ca:	4402      	add	r2, r0
 80008cc:	2001      	movs	r0, #1
 80008ce:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80008d2:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 80008d4:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d011      	beq.n	8000900 <HAL_PCD_EP_Close+0x4e>
 80008dc:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80008de:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80008e0:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80008e4:	f001 f842 	bl	800196c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 80008ee:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80008f0:	f502 7194 	add.w	r1, r2, #296	; 0x128
 80008f4:	4401      	add	r1, r0
    ep->is_in = 0U;
 80008f6:	4402      	add	r2, r0
 80008f8:	2000      	movs	r0, #0
 80008fa:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 80008fe:	e7e8      	b.n	80008d2 <HAL_PCD_EP_Close+0x20>
  __HAL_LOCK(hpcd);
 8000900:	2002      	movs	r0, #2
}
 8000902:	bd10      	pop	{r4, pc}

08000904 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000904:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000906:	2600      	movs	r6, #0
 8000908:	f001 0107 	and.w	r1, r1, #7
 800090c:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 800090e:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8000910:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000914:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000918:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800091a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 800091e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 8000922:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 8000926:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800092a:	6800      	ldr	r0, [r0, #0]
 800092c:	f001 f988 	bl	8001c40 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000930:	4630      	mov	r0, r6
 8000932:	bd70      	pop	{r4, r5, r6, pc}

08000934 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000934:	f001 0107 	and.w	r1, r1, #7
 8000938:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 800093c:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8000940:	4770      	bx	lr

08000942 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000942:	f001 0107 	and.w	r1, r1, #7
 8000946:	b570      	push	{r4, r5, r6, lr}
 8000948:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800094a:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 800094c:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 800094e:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000950:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8000952:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000956:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800095a:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800095c:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 800095e:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000960:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000964:	6800      	ldr	r0, [r0, #0]
 8000966:	f001 f96b 	bl	8001c40 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800096a:	4630      	mov	r0, r6
 800096c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000970 <HAL_PCD_IRQHandler>:
{
 8000970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000974:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000976:	6800      	ldr	r0, [r0, #0]
 8000978:	f001 f94c 	bl	8001c14 <USB_ReadInterrupts>
 800097c:	0402      	lsls	r2, r0, #16
 800097e:	f100 8210 	bmi.w	8000da2 <HAL_PCD_IRQHandler+0x432>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000982:	6820      	ldr	r0, [r4, #0]
 8000984:	f001 f946 	bl	8001c14 <USB_ReadInterrupts>
 8000988:	0543      	lsls	r3, r0, #21
 800098a:	d50f      	bpl.n	80009ac <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800098c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800098e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000990:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000994:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000998:	041b      	lsls	r3, r3, #16
 800099a:	0c1b      	lsrs	r3, r3, #16
 800099c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80009a0:	f002 fa0f 	bl	8002dc2 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80009a4:	2100      	movs	r1, #0
 80009a6:	4620      	mov	r0, r4
 80009a8:	f7ff ff3c 	bl	8000824 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80009ac:	6820      	ldr	r0, [r4, #0]
 80009ae:	f001 f931 	bl	8001c14 <USB_ReadInterrupts>
 80009b2:	0447      	lsls	r7, r0, #17
 80009b4:	d508      	bpl.n	80009c8 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80009b6:	6822      	ldr	r2, [r4, #0]
 80009b8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80009bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009c0:	041b      	lsls	r3, r3, #16
 80009c2:	0c1b      	lsrs	r3, r3, #16
 80009c4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80009c8:	6820      	ldr	r0, [r4, #0]
 80009ca:	f001 f923 	bl	8001c14 <USB_ReadInterrupts>
 80009ce:	0486      	lsls	r6, r0, #18
 80009d0:	d508      	bpl.n	80009e4 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80009d2:	6822      	ldr	r2, [r4, #0]
 80009d4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80009d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009dc:	041b      	lsls	r3, r3, #16
 80009de:	0c1b      	lsrs	r3, r3, #16
 80009e0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80009e4:	6820      	ldr	r0, [r4, #0]
 80009e6:	f001 f915 	bl	8001c14 <USB_ReadInterrupts>
 80009ea:	04c5      	lsls	r5, r0, #19
 80009ec:	d51c      	bpl.n	8000a28 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80009ee:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80009f0:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80009f2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80009f6:	f023 0304 	bic.w	r3, r3, #4
 80009fa:	041b      	lsls	r3, r3, #16
 80009fc:	0c1b      	lsrs	r3, r3, #16
 80009fe:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a02:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000a06:	f023 0308 	bic.w	r3, r3, #8
 8000a0a:	041b      	lsls	r3, r3, #16
 8000a0c:	0c1b      	lsrs	r3, r3, #16
 8000a0e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000a12:	f002 f9f9 	bl	8002e08 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a16:	6822      	ldr	r2, [r4, #0]
 8000a18:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a20:	041b      	lsls	r3, r3, #16
 8000a22:	0c1b      	lsrs	r3, r3, #16
 8000a24:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000a28:	6820      	ldr	r0, [r4, #0]
 8000a2a:	f001 f8f3 	bl	8001c14 <USB_ReadInterrupts>
 8000a2e:	0500      	lsls	r0, r0, #20
 8000a30:	d526      	bpl.n	8000a80 <HAL_PCD_IRQHandler+0x110>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000a32:	6820      	ldr	r0, [r4, #0]
 8000a34:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	f043 0308 	orr.w	r3, r3, #8
 8000a3e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000a42:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a4a:	041b      	lsls	r3, r3, #16
 8000a4c:	0c1b      	lsrs	r3, r3, #16
 8000a4e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000a52:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000a60:	f001 f8d8 	bl	8001c14 <USB_ReadInterrupts>
 8000a64:	04c1      	lsls	r1, r0, #19
 8000a66:	d508      	bpl.n	8000a7a <HAL_PCD_IRQHandler+0x10a>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a68:	6822      	ldr	r2, [r4, #0]
 8000a6a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a72:	041b      	lsls	r3, r3, #16
 8000a74:	0c1b      	lsrs	r3, r3, #16
 8000a76:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	f002 f9b4 	bl	8002de8 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000a80:	6820      	ldr	r0, [r4, #0]
 8000a82:	f001 f8c7 	bl	8001c14 <USB_ReadInterrupts>
 8000a86:	0582      	lsls	r2, r0, #22
 8000a88:	d50b      	bpl.n	8000aa2 <HAL_PCD_IRQHandler+0x132>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000a8a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000a8c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000a8e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000a92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a96:	041b      	lsls	r3, r3, #16
 8000a98:	0c1b      	lsrs	r3, r3, #16
 8000a9a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000a9e:	f002 f98c 	bl	8002dba <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000aa2:	6820      	ldr	r0, [r4, #0]
 8000aa4:	f001 f8b6 	bl	8001c14 <USB_ReadInterrupts>
 8000aa8:	05c3      	lsls	r3, r0, #23
 8000aaa:	d508      	bpl.n	8000abe <HAL_PCD_IRQHandler+0x14e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000aac:	6822      	ldr	r2, [r4, #0]
 8000aae:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ab2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ab6:	041b      	lsls	r3, r3, #16
 8000ab8:	0c1b      	lsrs	r3, r3, #16
 8000aba:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8000abe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 8000ac2:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8000ac6:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8000ac8:	f011 060f 	ands.w	r6, r1, #15
 8000acc:	f040 80b7 	bne.w	8000c3e <HAL_PCD_IRQHandler+0x2ce>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ad0:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ad2:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ad6:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ad8:	d12c      	bne.n	8000b34 <HAL_PCD_IRQHandler+0x1c4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ada:	ea03 0309 	and.w	r3, r3, r9
 8000ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ae2:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ae4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ae8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000af2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000af6:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000afa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b00:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000b02:	4413      	add	r3, r2
 8000b04:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000b06:	4620      	mov	r0, r4
 8000b08:	f002 f950 	bl	8002dac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000b0c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000b10:	b153      	cbz	r3, 8000b28 <HAL_PCD_IRQHandler+0x1b8>
 8000b12:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b14:	b942      	cbnz	r2, 8000b28 <HAL_PCD_IRQHandler+0x1b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000b16:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000b1a:	6821      	ldr	r1, [r4, #0]
 8000b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b20:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000b24:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000b28:	6820      	ldr	r0, [r4, #0]
 8000b2a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000b2e:	041b      	lsls	r3, r3, #16
 8000b30:	d4c7      	bmi.n	8000ac2 <HAL_PCD_IRQHandler+0x152>
 8000b32:	e726      	b.n	8000982 <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000b34:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8000b38:	d021      	beq.n	8000b7e <HAL_PCD_IRQHandler+0x20e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b3a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000b3e:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000b48:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b4c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000b50:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8000b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b58:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000b5c:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8000b60:	f001 f956 	bl	8001e10 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b64:	6822      	ldr	r2, [r4, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000b66:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b68:	8813      	ldrh	r3, [r2, #0]
 8000b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b6e:	051b      	lsls	r3, r3, #20
 8000b70:	0d1b      	lsrs	r3, r3, #20
 8000b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b76:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000b78:	f002 f90a 	bl	8002d90 <HAL_PCD_SetupStageCallback>
 8000b7c:	e7d4      	b.n	8000b28 <HAL_PCD_IRQHandler+0x1b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000b7e:	041f      	lsls	r7, r3, #16
 8000b80:	d5d2      	bpl.n	8000b28 <HAL_PCD_IRQHandler+0x1b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b82:	8803      	ldrh	r3, [r0, #0]
 8000b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b88:	051b      	lsls	r3, r3, #20
 8000b8a:	0d1b      	lsrs	r3, r3, #20
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b92:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000b96:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000ba0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ba4:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bac:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000bb0:	b18b      	cbz	r3, 8000bd6 <HAL_PCD_IRQHandler+0x266>
 8000bb2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8000bb6:	b171      	cbz	r1, 8000bd6 <HAL_PCD_IRQHandler+0x266>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000bb8:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8000bbc:	f001 f928 	bl	8001e10 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8000bc0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8000bc4:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000bc8:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8000bca:	4413      	add	r3, r2
 8000bcc:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f002 f8e3 	bl	8002d9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000bd6:	6821      	ldr	r1, [r4, #0]
 8000bd8:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 8000bdc:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8000be0:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	b9cd      	cbnz	r5, 8000c1c <HAL_PCD_IRQHandler+0x2ac>
 8000be8:	5ac2      	ldrh	r2, [r0, r3]
 8000bea:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000bee:	0412      	lsls	r2, r2, #16
 8000bf0:	0c12      	lsrs	r2, r2, #16
 8000bf2:	52c2      	strh	r2, [r0, r3]
 8000bf4:	5ac2      	ldrh	r2, [r0, r3]
 8000bf6:	b292      	uxth	r2, r2
 8000bf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bfc:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000bfe:	880b      	ldrh	r3, [r1, #0]
 8000c00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c08:	041b      	lsls	r3, r3, #16
 8000c0a:	0c1b      	lsrs	r3, r3, #16
 8000c0c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c18:	800b      	strh	r3, [r1, #0]
 8000c1a:	e785      	b.n	8000b28 <HAL_PCD_IRQHandler+0x1b8>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000c1c:	2d3e      	cmp	r5, #62	; 0x3e
 8000c1e:	d806      	bhi.n	8000c2e <HAL_PCD_IRQHandler+0x2be>
 8000c20:	086a      	lsrs	r2, r5, #1
 8000c22:	07ee      	lsls	r6, r5, #31
 8000c24:	bf48      	it	mi
 8000c26:	3201      	addmi	r2, #1
 8000c28:	0292      	lsls	r2, r2, #10
 8000c2a:	b292      	uxth	r2, r2
 8000c2c:	e7e6      	b.n	8000bfc <HAL_PCD_IRQHandler+0x28c>
 8000c2e:	096a      	lsrs	r2, r5, #5
 8000c30:	06ed      	lsls	r5, r5, #27
 8000c32:	bf08      	it	eq
 8000c34:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000c38:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 8000c3c:	e7f5      	b.n	8000c2a <HAL_PCD_IRQHandler+0x2ba>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000c3e:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 8000c42:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000c46:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8000c4a:	d03d      	beq.n	8000cc8 <HAL_PCD_IRQHandler+0x358>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000c4c:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8000c50:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c56:	051b      	lsls	r3, r3, #20
 8000c58:	0d1b      	lsrs	r3, r3, #20
 8000c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5e:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8000c62:	19e1      	adds	r1, r4, r7
 8000c64:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d158      	bne.n	8000d1e <HAL_PCD_IRQHandler+0x3ae>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000c6c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000c70:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	3306      	adds	r3, #6
 8000c78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000c7c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000c80:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000c84:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8000c88:	b135      	cbz	r5, 8000c98 <HAL_PCD_IRQHandler+0x328>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000c8a:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8000c8e:	462b      	mov	r3, r5
 8000c90:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8000c94:	f001 f8bc 	bl	8001e10 <USB_ReadPMA>
 8000c98:	19e1      	adds	r1, r4, r7
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8000c9a:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 8000c9e:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 8000ca2:	442b      	add	r3, r5
 8000ca4:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000ca8:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 8000cac:	442a      	add	r2, r5
 8000cae:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000cb2:	b11b      	cbz	r3, 8000cbc <HAL_PCD_IRQHandler+0x34c>
 8000cb4:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8000cb8:	4285      	cmp	r5, r0
 8000cba:	d269      	bcs.n	8000d90 <HAL_PCD_IRQHandler+0x420>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000cbc:	4427      	add	r7, r4
 8000cbe:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	f002 f86a 	bl	8002d9c <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000cc8:	f018 0f80 	tst.w	r8, #128	; 0x80
 8000ccc:	f43f af2c 	beq.w	8000b28 <HAL_PCD_IRQHandler+0x1b8>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000cd0:	6821      	ldr	r1, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000cd2:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000cd4:	f831 2026 	ldrh.w	r2, [r1, r6, lsl #2]
 8000cd8:	b292      	uxth	r2, r2
 8000cda:	ea02 0209 	and.w	r2, r2, r9
 8000cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ce2:	f821 2026 	strh.w	r2, [r1, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ce6:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8000cea:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8000cee:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000cfa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000cfe:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 8000d02:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d04:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000d08:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000d0a:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8000d0c:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8000d0e:	63f2      	str	r2, [r6, #60]	; 0x3c
 8000d10:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
        if (ep->xfer_len == 0U)
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d141      	bne.n	8000d9c <HAL_PCD_IRQHandler+0x42c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000d18:	f002 f848 	bl	8002dac <HAL_PCD_DataInStageCallback>
 8000d1c:	e704      	b.n	8000b28 <HAL_PCD_IRQHandler+0x1b8>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000d1e:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 8000d22:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d2c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000d30:	b292      	uxth	r2, r2
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000d32:	d01f      	beq.n	8000d74 <HAL_PCD_IRQHandler+0x404>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d34:	3202      	adds	r2, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d3c:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000d40:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8000d44:	b135      	cbz	r5, 8000d54 <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000d46:	462b      	mov	r3, r5
 8000d48:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000d4c:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8000d50:	f001 f85e 	bl	8001e10 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000d54:	19e3      	adds	r3, r4, r7
 8000d56:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8000d5a:	6822      	ldr	r2, [r4, #0]
 8000d5c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	ea03 030b 	and.w	r3, r3, fp
 8000d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d6e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000d72:	e791      	b.n	8000c98 <HAL_PCD_IRQHandler+0x328>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000d74:	3206      	adds	r2, #6
 8000d76:	4413      	add	r3, r2
 8000d78:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d7c:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000d80:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8000d84:	2d00      	cmp	r5, #0
 8000d86:	d0e5      	beq.n	8000d54 <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000d88:	462b      	mov	r3, r5
 8000d8a:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 8000d8e:	e7dd      	b.n	8000d4c <HAL_PCD_IRQHandler+0x3dc>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000d90:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8000d94:	4620      	mov	r0, r4
 8000d96:	f7ff fdb5 	bl	8000904 <HAL_PCD_EP_Receive>
 8000d9a:	e795      	b.n	8000cc8 <HAL_PCD_IRQHandler+0x358>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000d9c:	f7ff fdd1 	bl	8000942 <HAL_PCD_EP_Transmit>
 8000da0:	e6c2      	b.n	8000b28 <HAL_PCD_IRQHandler+0x1b8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000da2:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8000db0 <HAL_PCD_IRQHandler+0x440>
 8000da6:	f8df a00c 	ldr.w	sl, [pc, #12]	; 8000db4 <HAL_PCD_IRQHandler+0x444>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000daa:	f8df b00c 	ldr.w	fp, [pc, #12]	; 8000db8 <HAL_PCD_IRQHandler+0x448>
 8000dae:	e6bb      	b.n	8000b28 <HAL_PCD_IRQHandler+0x1b8>
 8000db0:	ffff8f0f 	.word	0xffff8f0f
 8000db4:	ffff8000 	.word	0xffff8000
 8000db8:	ffff8f8f 	.word	0xffff8f8f

08000dbc <HAL_PCD_EP_SetStall>:
{
 8000dbc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000dbe:	6843      	ldr	r3, [r0, #4]
 8000dc0:	f001 0507 	and.w	r5, r1, #7
 8000dc4:	429d      	cmp	r5, r3
{
 8000dc6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000dc8:	d828      	bhi.n	8000e1c <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8000dca:	060b      	lsls	r3, r1, #24
 8000dcc:	d51d      	bpl.n	8000e0a <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8000dce:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000dd0:	016b      	lsls	r3, r5, #5
 8000dd2:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8000dd6:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000dd8:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000dda:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8000dde:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8000de0:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8000de2:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8000de4:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d019      	beq.n	8000e20 <HAL_PCD_EP_SetStall+0x64>
 8000dec:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000df0:	6820      	ldr	r0, [r4, #0]
 8000df2:	f000 fe9a 	bl	8001b2a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000df6:	b925      	cbnz	r5, 8000e02 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000df8:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8000dfc:	6820      	ldr	r0, [r4, #0]
 8000dfe:	f000 ff0d 	bl	8001c1c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8000e08:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8000e0a:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8000e0c:	014b      	lsls	r3, r1, #5
 8000e0e:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 8000e12:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8000e14:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000e16:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8000e1a:	e7e0      	b.n	8000dde <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000e20:	2002      	movs	r0, #2
}
 8000e22:	bd38      	pop	{r3, r4, r5, pc}

08000e24 <HAL_PCD_EP_ClrStall>:
{
 8000e24:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000e26:	6843      	ldr	r3, [r0, #4]
 8000e28:	f001 020f 	and.w	r2, r1, #15
 8000e2c:	429a      	cmp	r2, r3
{
 8000e2e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000e30:	d826      	bhi.n	8000e80 <HAL_PCD_EP_ClrStall+0x5c>
 8000e32:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8000e36:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e3a:	ea4f 1243 	mov.w	r2, r3, lsl #5
  if ((0x80U & ep_addr) == 0x80U)
 8000e3e:	d017      	beq.n	8000e70 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e40:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8000e44:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000e46:	4402      	add	r2, r0
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  ep->is_stall = 0U;
 8000e4e:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e50:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8000e52:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8000e54:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d013      	beq.n	8000e84 <HAL_PCD_EP_ClrStall+0x60>
 8000e5c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000e5e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000e60:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000e64:	f000 fe81 	bl	8001b6a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000e68:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e70:	f502 7194 	add.w	r1, r2, #296	; 0x128
 8000e74:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000e76:	4402      	add	r2, r0
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 8000e7e:	e7e6      	b.n	8000e4e <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 8000e80:	2001      	movs	r0, #1
 8000e82:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000e84:	2002      	movs	r0, #2
}
 8000e86:	bd38      	pop	{r3, r4, r5, pc}

08000e88 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8000e88:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e8c:	bf1b      	ittet	ne
 8000e8e:	f001 0107 	andne.w	r1, r1, #7
 8000e92:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e96:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e9a:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000e9c:	bf08      	it	eq
 8000e9e:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000ea2:	b91a      	cbnz	r2, 8000eac <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8000ea4:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8000ea6:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000eac:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8000eae:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8000eb0:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000eb2:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8000eb4:	8143      	strh	r3, [r0, #10]
 8000eb6:	e7f7      	b.n	8000ea8 <HAL_PCDEx_PMAConfig+0x20>

08000eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ebc:	4605      	mov	r5, r0
 8000ebe:	b908      	cbnz	r0, 8000ec4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	e03c      	b.n	8000f3e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec4:	6803      	ldr	r3, [r0, #0]
 8000ec6:	07db      	lsls	r3, r3, #31
 8000ec8:	d410      	bmi.n	8000eec <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eca:	682b      	ldr	r3, [r5, #0]
 8000ecc:	079f      	lsls	r7, r3, #30
 8000ece:	d45d      	bmi.n	8000f8c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed0:	682b      	ldr	r3, [r5, #0]
 8000ed2:	0719      	lsls	r1, r3, #28
 8000ed4:	f100 8094 	bmi.w	8001000 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed8:	682b      	ldr	r3, [r5, #0]
 8000eda:	075a      	lsls	r2, r3, #29
 8000edc:	f100 80be 	bmi.w	800105c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ee0:	69e8      	ldr	r0, [r5, #28]
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	f040 812c 	bne.w	8001140 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000ee8:	2000      	movs	r0, #0
 8000eea:	e028      	b.n	8000f3e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eec:	4c8f      	ldr	r4, [pc, #572]	; (800112c <HAL_RCC_OscConfig+0x274>)
 8000eee:	6863      	ldr	r3, [r4, #4]
 8000ef0:	f003 030c 	and.w	r3, r3, #12
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d007      	beq.n	8000f08 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef8:	6863      	ldr	r3, [r4, #4]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b08      	cmp	r3, #8
 8000f00:	d109      	bne.n	8000f16 <HAL_RCC_OscConfig+0x5e>
 8000f02:	6863      	ldr	r3, [r4, #4]
 8000f04:	03de      	lsls	r6, r3, #15
 8000f06:	d506      	bpl.n	8000f16 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	039c      	lsls	r4, r3, #14
 8000f0c:	d5dd      	bpl.n	8000eca <HAL_RCC_OscConfig+0x12>
 8000f0e:	686b      	ldr	r3, [r5, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1da      	bne.n	8000eca <HAL_RCC_OscConfig+0x12>
 8000f14:	e7d4      	b.n	8000ec0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f16:	686b      	ldr	r3, [r5, #4]
 8000f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1c:	d112      	bne.n	8000f44 <HAL_RCC_OscConfig+0x8c>
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f24:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f26:	f7ff f953 	bl	80001d0 <HAL_GetTick>
 8000f2a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	0398      	lsls	r0, r3, #14
 8000f30:	d4cb      	bmi.n	8000eca <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f32:	f7ff f94d 	bl	80001d0 <HAL_GetTick>
 8000f36:	1b80      	subs	r0, r0, r6
 8000f38:	2864      	cmp	r0, #100	; 0x64
 8000f3a:	d9f7      	bls.n	8000f2c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000f3c:	2003      	movs	r0, #3
}
 8000f3e:	b002      	add	sp, #8
 8000f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f44:	b99b      	cbnz	r3, 8000f6e <HAL_RCC_OscConfig+0xb6>
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f4c:	6023      	str	r3, [r4, #0]
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f54:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f56:	f7ff f93b 	bl	80001d0 <HAL_GetTick>
 8000f5a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	0399      	lsls	r1, r3, #14
 8000f60:	d5b3      	bpl.n	8000eca <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f62:	f7ff f935 	bl	80001d0 <HAL_GetTick>
 8000f66:	1b80      	subs	r0, r0, r6
 8000f68:	2864      	cmp	r0, #100	; 0x64
 8000f6a:	d9f7      	bls.n	8000f5c <HAL_RCC_OscConfig+0xa4>
 8000f6c:	e7e6      	b.n	8000f3c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	d103      	bne.n	8000f7e <HAL_RCC_OscConfig+0xc6>
 8000f76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f7a:	6023      	str	r3, [r4, #0]
 8000f7c:	e7cf      	b.n	8000f1e <HAL_RCC_OscConfig+0x66>
 8000f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f82:	6023      	str	r3, [r4, #0]
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8a:	e7cb      	b.n	8000f24 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f8c:	4c67      	ldr	r4, [pc, #412]	; (800112c <HAL_RCC_OscConfig+0x274>)
 8000f8e:	6863      	ldr	r3, [r4, #4]
 8000f90:	f013 0f0c 	tst.w	r3, #12
 8000f94:	d007      	beq.n	8000fa6 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f96:	6863      	ldr	r3, [r4, #4]
 8000f98:	f003 030c 	and.w	r3, r3, #12
 8000f9c:	2b08      	cmp	r3, #8
 8000f9e:	d110      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x10a>
 8000fa0:	6863      	ldr	r3, [r4, #4]
 8000fa2:	03da      	lsls	r2, r3, #15
 8000fa4:	d40d      	bmi.n	8000fc2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	079b      	lsls	r3, r3, #30
 8000faa:	d502      	bpl.n	8000fb2 <HAL_RCC_OscConfig+0xfa>
 8000fac:	692b      	ldr	r3, [r5, #16]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d186      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	696a      	ldr	r2, [r5, #20]
 8000fb6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fbe:	6023      	str	r3, [r4, #0]
 8000fc0:	e786      	b.n	8000ed0 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc2:	692a      	ldr	r2, [r5, #16]
 8000fc4:	4b5a      	ldr	r3, [pc, #360]	; (8001130 <HAL_RCC_OscConfig+0x278>)
 8000fc6:	b16a      	cbz	r2, 8000fe4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fcc:	f7ff f900 	bl	80001d0 <HAL_GetTick>
 8000fd0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd2:	6823      	ldr	r3, [r4, #0]
 8000fd4:	079f      	lsls	r7, r3, #30
 8000fd6:	d4ec      	bmi.n	8000fb2 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd8:	f7ff f8fa 	bl	80001d0 <HAL_GetTick>
 8000fdc:	1b80      	subs	r0, r0, r6
 8000fde:	2802      	cmp	r0, #2
 8000fe0:	d9f7      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x11a>
 8000fe2:	e7ab      	b.n	8000f3c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000fe4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fe6:	f7ff f8f3 	bl	80001d0 <HAL_GetTick>
 8000fea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	0798      	lsls	r0, r3, #30
 8000ff0:	f57f af6e 	bpl.w	8000ed0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff4:	f7ff f8ec 	bl	80001d0 <HAL_GetTick>
 8000ff8:	1b80      	subs	r0, r0, r6
 8000ffa:	2802      	cmp	r0, #2
 8000ffc:	d9f6      	bls.n	8000fec <HAL_RCC_OscConfig+0x134>
 8000ffe:	e79d      	b.n	8000f3c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001000:	69aa      	ldr	r2, [r5, #24]
 8001002:	4c4a      	ldr	r4, [pc, #296]	; (800112c <HAL_RCC_OscConfig+0x274>)
 8001004:	4b4b      	ldr	r3, [pc, #300]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8001006:	b1da      	cbz	r2, 8001040 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001008:	2201      	movs	r2, #1
 800100a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800100c:	f7ff f8e0 	bl	80001d0 <HAL_GetTick>
 8001010:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001014:	079b      	lsls	r3, r3, #30
 8001016:	d50d      	bpl.n	8001034 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001018:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800101c:	4b46      	ldr	r3, [pc, #280]	; (8001138 <HAL_RCC_OscConfig+0x280>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	fbb3 f3f2 	udiv	r3, r3, r2
 8001024:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001026:	bf00      	nop
  }
  while (Delay --);
 8001028:	9b01      	ldr	r3, [sp, #4]
 800102a:	1e5a      	subs	r2, r3, #1
 800102c:	9201      	str	r2, [sp, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f9      	bne.n	8001026 <HAL_RCC_OscConfig+0x16e>
 8001032:	e751      	b.n	8000ed8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001034:	f7ff f8cc 	bl	80001d0 <HAL_GetTick>
 8001038:	1b80      	subs	r0, r0, r6
 800103a:	2802      	cmp	r0, #2
 800103c:	d9e9      	bls.n	8001012 <HAL_RCC_OscConfig+0x15a>
 800103e:	e77d      	b.n	8000f3c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001040:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001042:	f7ff f8c5 	bl	80001d0 <HAL_GetTick>
 8001046:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800104a:	079f      	lsls	r7, r3, #30
 800104c:	f57f af44 	bpl.w	8000ed8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001050:	f7ff f8be 	bl	80001d0 <HAL_GetTick>
 8001054:	1b80      	subs	r0, r0, r6
 8001056:	2802      	cmp	r0, #2
 8001058:	d9f6      	bls.n	8001048 <HAL_RCC_OscConfig+0x190>
 800105a:	e76f      	b.n	8000f3c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800105c:	4c33      	ldr	r4, [pc, #204]	; (800112c <HAL_RCC_OscConfig+0x274>)
 800105e:	69e3      	ldr	r3, [r4, #28]
 8001060:	00d8      	lsls	r0, r3, #3
 8001062:	d424      	bmi.n	80010ae <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001064:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	69e3      	ldr	r3, [r4, #28]
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106c:	61e3      	str	r3, [r4, #28]
 800106e:	69e3      	ldr	r3, [r4, #28]
 8001070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001078:	4e30      	ldr	r6, [pc, #192]	; (800113c <HAL_RCC_OscConfig+0x284>)
 800107a:	6833      	ldr	r3, [r6, #0]
 800107c:	05d9      	lsls	r1, r3, #23
 800107e:	d518      	bpl.n	80010b2 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001080:	68eb      	ldr	r3, [r5, #12]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d126      	bne.n	80010d4 <HAL_RCC_OscConfig+0x21c>
 8001086:	6a23      	ldr	r3, [r4, #32]
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800108e:	f7ff f89f 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001092:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001096:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001098:	6a23      	ldr	r3, [r4, #32]
 800109a:	079b      	lsls	r3, r3, #30
 800109c:	d53f      	bpl.n	800111e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800109e:	2f00      	cmp	r7, #0
 80010a0:	f43f af1e 	beq.w	8000ee0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a4:	69e3      	ldr	r3, [r4, #28]
 80010a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010aa:	61e3      	str	r3, [r4, #28]
 80010ac:	e718      	b.n	8000ee0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80010ae:	2700      	movs	r7, #0
 80010b0:	e7e2      	b.n	8001078 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010b2:	6833      	ldr	r3, [r6, #0]
 80010b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010ba:	f7ff f889 	bl	80001d0 <HAL_GetTick>
 80010be:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c0:	6833      	ldr	r3, [r6, #0]
 80010c2:	05da      	lsls	r2, r3, #23
 80010c4:	d4dc      	bmi.n	8001080 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c6:	f7ff f883 	bl	80001d0 <HAL_GetTick>
 80010ca:	eba0 0008 	sub.w	r0, r0, r8
 80010ce:	2864      	cmp	r0, #100	; 0x64
 80010d0:	d9f6      	bls.n	80010c0 <HAL_RCC_OscConfig+0x208>
 80010d2:	e733      	b.n	8000f3c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d4:	b9ab      	cbnz	r3, 8001102 <HAL_RCC_OscConfig+0x24a>
 80010d6:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	6223      	str	r3, [r4, #32]
 80010e2:	6a23      	ldr	r3, [r4, #32]
 80010e4:	f023 0304 	bic.w	r3, r3, #4
 80010e8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010ea:	f7ff f871 	bl	80001d0 <HAL_GetTick>
 80010ee:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f0:	6a23      	ldr	r3, [r4, #32]
 80010f2:	0798      	lsls	r0, r3, #30
 80010f4:	d5d3      	bpl.n	800109e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f6:	f7ff f86b 	bl	80001d0 <HAL_GetTick>
 80010fa:	1b80      	subs	r0, r0, r6
 80010fc:	4540      	cmp	r0, r8
 80010fe:	d9f7      	bls.n	80010f0 <HAL_RCC_OscConfig+0x238>
 8001100:	e71c      	b.n	8000f3c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001102:	2b05      	cmp	r3, #5
 8001104:	6a23      	ldr	r3, [r4, #32]
 8001106:	d103      	bne.n	8001110 <HAL_RCC_OscConfig+0x258>
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6223      	str	r3, [r4, #32]
 800110e:	e7ba      	b.n	8001086 <HAL_RCC_OscConfig+0x1ce>
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	6223      	str	r3, [r4, #32]
 8001116:	6a23      	ldr	r3, [r4, #32]
 8001118:	f023 0304 	bic.w	r3, r3, #4
 800111c:	e7b6      	b.n	800108c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800111e:	f7ff f857 	bl	80001d0 <HAL_GetTick>
 8001122:	eba0 0008 	sub.w	r0, r0, r8
 8001126:	42b0      	cmp	r0, r6
 8001128:	d9b6      	bls.n	8001098 <HAL_RCC_OscConfig+0x1e0>
 800112a:	e707      	b.n	8000f3c <HAL_RCC_OscConfig+0x84>
 800112c:	40021000 	.word	0x40021000
 8001130:	42420000 	.word	0x42420000
 8001134:	42420480 	.word	0x42420480
 8001138:	20000118 	.word	0x20000118
 800113c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001140:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <HAL_RCC_OscConfig+0x334>)
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	461c      	mov	r4, r3
 8001146:	f002 020c 	and.w	r2, r2, #12
 800114a:	2a08      	cmp	r2, #8
 800114c:	d03d      	beq.n	80011ca <HAL_RCC_OscConfig+0x312>
 800114e:	2300      	movs	r3, #0
 8001150:	4e27      	ldr	r6, [pc, #156]	; (80011f0 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001152:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001154:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001156:	d12b      	bne.n	80011b0 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001158:	f7ff f83a 	bl	80001d0 <HAL_GetTick>
 800115c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	0199      	lsls	r1, r3, #6
 8001162:	d41f      	bmi.n	80011a4 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001164:	6a2b      	ldr	r3, [r5, #32]
 8001166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116a:	d105      	bne.n	8001178 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800116c:	6862      	ldr	r2, [r4, #4]
 800116e:	68a9      	ldr	r1, [r5, #8]
 8001170:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001174:	430a      	orrs	r2, r1
 8001176:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001178:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800117a:	6862      	ldr	r2, [r4, #4]
 800117c:	430b      	orrs	r3, r1
 800117e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001182:	4313      	orrs	r3, r2
 8001184:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001186:	2301      	movs	r3, #1
 8001188:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800118a:	f7ff f821 	bl	80001d0 <HAL_GetTick>
 800118e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001190:	6823      	ldr	r3, [r4, #0]
 8001192:	019a      	lsls	r2, r3, #6
 8001194:	f53f aea8 	bmi.w	8000ee8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001198:	f7ff f81a 	bl	80001d0 <HAL_GetTick>
 800119c:	1b40      	subs	r0, r0, r5
 800119e:	2802      	cmp	r0, #2
 80011a0:	d9f6      	bls.n	8001190 <HAL_RCC_OscConfig+0x2d8>
 80011a2:	e6cb      	b.n	8000f3c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a4:	f7ff f814 	bl	80001d0 <HAL_GetTick>
 80011a8:	1bc0      	subs	r0, r0, r7
 80011aa:	2802      	cmp	r0, #2
 80011ac:	d9d7      	bls.n	800115e <HAL_RCC_OscConfig+0x2a6>
 80011ae:	e6c5      	b.n	8000f3c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80011b0:	f7ff f80e 	bl	80001d0 <HAL_GetTick>
 80011b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	019b      	lsls	r3, r3, #6
 80011ba:	f57f ae95 	bpl.w	8000ee8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011be:	f7ff f807 	bl	80001d0 <HAL_GetTick>
 80011c2:	1b40      	subs	r0, r0, r5
 80011c4:	2802      	cmp	r0, #2
 80011c6:	d9f6      	bls.n	80011b6 <HAL_RCC_OscConfig+0x2fe>
 80011c8:	e6b8      	b.n	8000f3c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011ca:	2801      	cmp	r0, #1
 80011cc:	f43f aeb7 	beq.w	8000f3e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80011d0:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d2:	6a2b      	ldr	r3, [r5, #32]
 80011d4:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80011d8:	429a      	cmp	r2, r3
 80011da:	f47f ae71 	bne.w	8000ec0 <HAL_RCC_OscConfig+0x8>
 80011de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011e0:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80011e4:	1ac0      	subs	r0, r0, r3
 80011e6:	bf18      	it	ne
 80011e8:	2001      	movne	r0, #1
 80011ea:	e6a8      	b.n	8000f3e <HAL_RCC_OscConfig+0x86>
 80011ec:	40021000 	.word	0x40021000
 80011f0:	42420060 	.word	0x42420060

080011f4 <HAL_RCC_GetSysClockFreq>:
{
 80011f4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80011f8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011fa:	ac02      	add	r4, sp, #8
 80011fc:	f103 0510 	add.w	r5, r3, #16
 8001200:	4622      	mov	r2, r4
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	6859      	ldr	r1, [r3, #4]
 8001206:	3308      	adds	r3, #8
 8001208:	c203      	stmia	r2!, {r0, r1}
 800120a:	42ab      	cmp	r3, r5
 800120c:	4614      	mov	r4, r2
 800120e:	d1f7      	bne.n	8001200 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001210:	2301      	movs	r3, #1
 8001212:	f88d 3004 	strb.w	r3, [sp, #4]
 8001216:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001218:	4911      	ldr	r1, [pc, #68]	; (8001260 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800121a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800121e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001220:	f003 020c 	and.w	r2, r3, #12
 8001224:	2a08      	cmp	r2, #8
 8001226:	d117      	bne.n	8001258 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001228:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800122c:	a806      	add	r0, sp, #24
 800122e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001230:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001232:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001236:	d50c      	bpl.n	8001252 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001238:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800123a:	480a      	ldr	r0, [pc, #40]	; (8001264 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800123c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001240:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001242:	aa06      	add	r2, sp, #24
 8001244:	4413      	add	r3, r2
 8001246:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800124a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800124e:	b007      	add	sp, #28
 8001250:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <HAL_RCC_GetSysClockFreq+0x74>)
 8001254:	4350      	muls	r0, r2
 8001256:	e7fa      	b.n	800124e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800125a:	e7f8      	b.n	800124e <HAL_RCC_GetSysClockFreq+0x5a>
 800125c:	08003154 	.word	0x08003154
 8001260:	40021000 	.word	0x40021000
 8001264:	007a1200 	.word	0x007a1200
 8001268:	003d0900 	.word	0x003d0900

0800126c <HAL_RCC_ClockConfig>:
{
 800126c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001270:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001272:	4604      	mov	r4, r0
 8001274:	b910      	cbnz	r0, 800127c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001276:	2001      	movs	r0, #1
 8001278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800127c:	4a45      	ldr	r2, [pc, #276]	; (8001394 <HAL_RCC_ClockConfig+0x128>)
 800127e:	6813      	ldr	r3, [r2, #0]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	428b      	cmp	r3, r1
 8001286:	d329      	bcc.n	80012dc <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001288:	6821      	ldr	r1, [r4, #0]
 800128a:	078e      	lsls	r6, r1, #30
 800128c:	d431      	bmi.n	80012f2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800128e:	07ca      	lsls	r2, r1, #31
 8001290:	d444      	bmi.n	800131c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001292:	4a40      	ldr	r2, [pc, #256]	; (8001394 <HAL_RCC_ClockConfig+0x128>)
 8001294:	6813      	ldr	r3, [r2, #0]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	429d      	cmp	r5, r3
 800129c:	d367      	bcc.n	800136e <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129e:	6822      	ldr	r2, [r4, #0]
 80012a0:	4d3d      	ldr	r5, [pc, #244]	; (8001398 <HAL_RCC_ClockConfig+0x12c>)
 80012a2:	f012 0f04 	tst.w	r2, #4
 80012a6:	d16e      	bne.n	8001386 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a8:	0713      	lsls	r3, r2, #28
 80012aa:	d506      	bpl.n	80012ba <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012ac:	686b      	ldr	r3, [r5, #4]
 80012ae:	6922      	ldr	r2, [r4, #16]
 80012b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80012b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012b8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012ba:	f7ff ff9b 	bl	80011f4 <HAL_RCC_GetSysClockFreq>
 80012be:	686b      	ldr	r3, [r5, #4]
 80012c0:	4a36      	ldr	r2, [pc, #216]	; (800139c <HAL_RCC_ClockConfig+0x130>)
 80012c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	40d8      	lsrs	r0, r3
 80012ca:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <HAL_RCC_ClockConfig+0x134>)
 80012cc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80012ce:	4b35      	ldr	r3, [pc, #212]	; (80013a4 <HAL_RCC_ClockConfig+0x138>)
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	f7fe ff3b 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80012d6:	2000      	movs	r0, #0
 80012d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012dc:	6813      	ldr	r3, [r2, #0]
 80012de:	f023 0307 	bic.w	r3, r3, #7
 80012e2:	430b      	orrs	r3, r1
 80012e4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e6:	6813      	ldr	r3, [r2, #0]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	4299      	cmp	r1, r3
 80012ee:	d1c2      	bne.n	8001276 <HAL_RCC_ClockConfig+0xa>
 80012f0:	e7ca      	b.n	8001288 <HAL_RCC_ClockConfig+0x1c>
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f8:	bf1e      	ittt	ne
 80012fa:	685a      	ldrne	r2, [r3, #4]
 80012fc:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001300:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001302:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001304:	bf42      	ittt	mi
 8001306:	685a      	ldrmi	r2, [r3, #4]
 8001308:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800130c:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	68a0      	ldr	r0, [r4, #8]
 8001312:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001316:	4302      	orrs	r2, r0
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	e7b8      	b.n	800128e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800131c:	6862      	ldr	r2, [r4, #4]
 800131e:	4e1e      	ldr	r6, [pc, #120]	; (8001398 <HAL_RCC_ClockConfig+0x12c>)
 8001320:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001324:	d11b      	bne.n	800135e <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132a:	d0a4      	beq.n	8001276 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132c:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800132e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001332:	f023 0303 	bic.w	r3, r3, #3
 8001336:	4313      	orrs	r3, r2
 8001338:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800133a:	f7fe ff49 	bl	80001d0 <HAL_GetTick>
 800133e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001340:	6873      	ldr	r3, [r6, #4]
 8001342:	6862      	ldr	r2, [r4, #4]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800134c:	d0a1      	beq.n	8001292 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134e:	f7fe ff3f 	bl	80001d0 <HAL_GetTick>
 8001352:	1bc0      	subs	r0, r0, r7
 8001354:	4540      	cmp	r0, r8
 8001356:	d9f3      	bls.n	8001340 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001358:	2003      	movs	r0, #3
}
 800135a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800135e:	2a02      	cmp	r2, #2
 8001360:	d102      	bne.n	8001368 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001362:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001366:	e7e0      	b.n	800132a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001368:	f013 0f02 	tst.w	r3, #2
 800136c:	e7dd      	b.n	800132a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136e:	6813      	ldr	r3, [r2, #0]
 8001370:	f023 0307 	bic.w	r3, r3, #7
 8001374:	432b      	orrs	r3, r5
 8001376:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001378:	6813      	ldr	r3, [r2, #0]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	429d      	cmp	r5, r3
 8001380:	f47f af79 	bne.w	8001276 <HAL_RCC_ClockConfig+0xa>
 8001384:	e78b      	b.n	800129e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001386:	686b      	ldr	r3, [r5, #4]
 8001388:	68e1      	ldr	r1, [r4, #12]
 800138a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800138e:	430b      	orrs	r3, r1
 8001390:	606b      	str	r3, [r5, #4]
 8001392:	e789      	b.n	80012a8 <HAL_RCC_ClockConfig+0x3c>
 8001394:	40022000 	.word	0x40022000
 8001398:	40021000 	.word	0x40021000
 800139c:	08003164 	.word	0x08003164
 80013a0:	20000118 	.word	0x20000118
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <HAL_RCC_GetPCLK1Freq+0x14>)
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80013b2:	5cd3      	ldrb	r3, [r2, r3]
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013b6:	6810      	ldr	r0, [r2, #0]
}
 80013b8:	40d8      	lsrs	r0, r3
 80013ba:	4770      	bx	lr
 80013bc:	40021000 	.word	0x40021000
 80013c0:	08003174 	.word	0x08003174
 80013c4:	20000118 	.word	0x20000118

080013c8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <HAL_RCC_GetPCLK2Freq+0x14>)
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80013d2:	5cd3      	ldrb	r3, [r2, r3]
 80013d4:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80013d6:	6810      	ldr	r0, [r2, #0]
}
 80013d8:	40d8      	lsrs	r0, r3
 80013da:	4770      	bx	lr
 80013dc:	40021000 	.word	0x40021000
 80013e0:	08003174 	.word	0x08003174
 80013e4:	20000118 	.word	0x20000118

080013e8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80013e8:	6803      	ldr	r3, [r0, #0]
{
 80013ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80013ee:	07d9      	lsls	r1, r3, #31
{
 80013f0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80013f2:	d520      	bpl.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f4:	4c35      	ldr	r4, [pc, #212]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80013f6:	69e3      	ldr	r3, [r4, #28]
 80013f8:	00da      	lsls	r2, r3, #3
 80013fa:	d432      	bmi.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80013fc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	69e3      	ldr	r3, [r4, #28]
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	61e3      	str	r3, [r4, #28]
 8001406:	69e3      	ldr	r3, [r4, #28]
 8001408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001410:	4e2f      	ldr	r6, [pc, #188]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001412:	6833      	ldr	r3, [r6, #0]
 8001414:	05db      	lsls	r3, r3, #23
 8001416:	d526      	bpl.n	8001466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001418:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800141a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800141e:	d136      	bne.n	800148e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001420:	6a23      	ldr	r3, [r4, #32]
 8001422:	686a      	ldr	r2, [r5, #4]
 8001424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001428:	4313      	orrs	r3, r2
 800142a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800142c:	b11f      	cbz	r7, 8001436 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142e:	69e3      	ldr	r3, [r4, #28]
 8001430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001434:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001436:	6828      	ldr	r0, [r5, #0]
 8001438:	0783      	lsls	r3, r0, #30
 800143a:	d506      	bpl.n	800144a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800143c:	4a23      	ldr	r2, [pc, #140]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800143e:	68a9      	ldr	r1, [r5, #8]
 8001440:	6853      	ldr	r3, [r2, #4]
 8001442:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001446:	430b      	orrs	r3, r1
 8001448:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800144a:	f010 0010 	ands.w	r0, r0, #16
 800144e:	d01b      	beq.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001450:	4a1e      	ldr	r2, [pc, #120]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001452:	68e9      	ldr	r1, [r5, #12]
 8001454:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001456:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001458:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800145c:	430b      	orrs	r3, r1
 800145e:	6053      	str	r3, [r2, #4]
 8001460:	e012      	b.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001462:	2700      	movs	r7, #0
 8001464:	e7d4      	b.n	8001410 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001466:	6833      	ldr	r3, [r6, #0]
 8001468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800146e:	f7fe feaf 	bl	80001d0 <HAL_GetTick>
 8001472:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001474:	6833      	ldr	r3, [r6, #0]
 8001476:	05d8      	lsls	r0, r3, #23
 8001478:	d4ce      	bmi.n	8001418 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800147a:	f7fe fea9 	bl	80001d0 <HAL_GetTick>
 800147e:	eba0 0008 	sub.w	r0, r0, r8
 8001482:	2864      	cmp	r0, #100	; 0x64
 8001484:	d9f6      	bls.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001486:	2003      	movs	r0, #3
}
 8001488:	b002      	add	sp, #8
 800148a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800148e:	686a      	ldr	r2, [r5, #4]
 8001490:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001494:	4293      	cmp	r3, r2
 8001496:	d0c3      	beq.n	8001420 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001498:	2001      	movs	r0, #1
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800149c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800149e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014a0:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014a6:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80014a8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80014aa:	07d9      	lsls	r1, r3, #31
 80014ac:	d5b8      	bpl.n	8001420 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80014ae:	f7fe fe8f 	bl	80001d0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80014b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b8:	6a23      	ldr	r3, [r4, #32]
 80014ba:	079a      	lsls	r2, r3, #30
 80014bc:	d4b0      	bmi.n	8001420 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014be:	f7fe fe87 	bl	80001d0 <HAL_GetTick>
 80014c2:	1b80      	subs	r0, r0, r6
 80014c4:	4540      	cmp	r0, r8
 80014c6:	d9f7      	bls.n	80014b8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80014c8:	e7dd      	b.n	8001486 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40007000 	.word	0x40007000
 80014d4:	42420440 	.word	0x42420440

080014d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014dc:	6803      	ldr	r3, [r0, #0]
 80014de:	68c1      	ldr	r1, [r0, #12]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	2419      	movs	r4, #25
 80014e4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80014e8:	430a      	orrs	r2, r1
 80014ea:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80014ec:	6882      	ldr	r2, [r0, #8]
 80014ee:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80014f0:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80014f2:	4302      	orrs	r2, r0
 80014f4:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80014f6:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80014fa:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80014fe:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001500:	430a      	orrs	r2, r1
 8001502:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	69a9      	ldr	r1, [r5, #24]
 8001508:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800150c:	430a      	orrs	r2, r1
 800150e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <UART_SetConfig+0x70>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d114      	bne.n	8001540 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001516:	f7ff ff57 	bl	80013c8 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800151a:	4360      	muls	r0, r4
 800151c:	686c      	ldr	r4, [r5, #4]
 800151e:	2264      	movs	r2, #100	; 0x64
 8001520:	00a4      	lsls	r4, r4, #2
 8001522:	fbb0 f0f4 	udiv	r0, r0, r4
 8001526:	fbb0 f4f2 	udiv	r4, r0, r2
 800152a:	fb02 0314 	mls	r3, r2, r4, r0
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	3332      	adds	r3, #50	; 0x32
 8001532:	fbb3 f3f2 	udiv	r3, r3, r2
 8001536:	6829      	ldr	r1, [r5, #0]
 8001538:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800153c:	608b      	str	r3, [r1, #8]
 800153e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001540:	f7ff ff32 	bl	80013a8 <HAL_RCC_GetPCLK1Freq>
 8001544:	e7e9      	b.n	800151a <UART_SetConfig+0x42>
 8001546:	bf00      	nop
 8001548:	40013800 	.word	0x40013800

0800154c <HAL_UART_Init>:
{
 800154c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800154e:	4604      	mov	r4, r0
 8001550:	b340      	cbz	r0, 80015a4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001552:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001556:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800155a:	b91b      	cbnz	r3, 8001564 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800155c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001560:	f001 fb0a 	bl	8002b78 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001564:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001566:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001568:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800156c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800156e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001574:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001576:	f7ff ffaf 	bl	80014d8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800157a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800157c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001586:	695a      	ldr	r2, [r3, #20]
 8001588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800158c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001594:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001596:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001598:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800159a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800159e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80015a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015a4:	2001      	movs	r0, #1
}
 80015a6:	bd10      	pop	{r4, pc}

080015a8 <HAL_HalfDuplex_Init>:
{
 80015a8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80015aa:	4604      	mov	r4, r0
 80015ac:	b360      	cbz	r0, 8001608 <HAL_HalfDuplex_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80015ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015b6:	b91b      	cbnz	r3, 80015c0 <HAL_HalfDuplex_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80015b8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80015bc:	f001 fadc 	bl	8002b78 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80015c0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80015c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80015c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80015c8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80015ca:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80015cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015d0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80015d2:	f7ff ff81 	bl	80014d8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015d6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015d8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80015e8:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80015ea:	695a      	ldr	r2, [r3, #20]
 80015ec:	f042 0208 	orr.w	r2, r2, #8
 80015f0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015f8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80015fa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015fc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80015fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001602:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001606:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001608:	2001      	movs	r0, #1
}
 800160a:	bd10      	pop	{r4, pc}

0800160c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800160c:	b084      	sub	sp, #16
 800160e:	a801      	add	r0, sp, #4
 8001610:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001614:	b004      	add	sp, #16
 8001616:	2000      	movs	r0, #0
 8001618:	4770      	bx	lr

0800161a <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800161a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800161e:	b29b      	uxth	r3, r3
 8001620:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001624:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001628:	2000      	movs	r0, #0
 800162a:	4770      	bx	lr

0800162c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800162c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001630:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001634:	045b      	lsls	r3, r3, #17
 8001636:	0c5b      	lsrs	r3, r3, #17
 8001638:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800163c:	2000      	movs	r0, #0
 800163e:	4770      	bx	lr

08001640 <USB_SetCurrentMode>:
 8001640:	2000      	movs	r0, #0
 8001642:	4770      	bx	lr

08001644 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001644:	b084      	sub	sp, #16
 8001646:	b510      	push	{r4, lr}
 8001648:	ac03      	add	r4, sp, #12
 800164a:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 800164e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8001652:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001654:	2301      	movs	r3, #1
 8001656:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 800165a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 800165e:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8001662:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001666:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 800166a:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 800166c:	b29b      	uxth	r3, r3
 800166e:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001672:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8001676:	4610      	mov	r0, r2
 8001678:	4770      	bx	lr
	...

0800167c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800167c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800167e:	780d      	ldrb	r5, [r1, #0]
{
 8001680:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001682:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8001686:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001688:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800168c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001690:	0412      	lsls	r2, r2, #16
 8001692:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8001694:	2803      	cmp	r0, #3
 8001696:	d84e      	bhi.n	8001736 <USB_ActivateEndpoint+0xba>
 8001698:	e8df f000 	tbb	[pc, r0]
 800169c:	47044a02 	.word	0x47044a02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80016a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80016a4:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80016a6:	f248 0480 	movw	r4, #32896	; 0x8080
 80016aa:	4322      	orrs	r2, r4
 80016ac:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80016b0:	780e      	ldrb	r6, [r1, #0]
 80016b2:	4dab      	ldr	r5, [pc, #684]	; (8001960 <USB_ActivateEndpoint+0x2e4>)
 80016b4:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80016b8:	4334      	orrs	r4, r6
 80016ba:	b292      	uxth	r2, r2
 80016bc:	402a      	ands	r2, r5
 80016be:	4322      	orrs	r2, r4
 80016c0:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 80016c4:	7b0c      	ldrb	r4, [r1, #12]
 80016c6:	780a      	ldrb	r2, [r1, #0]
 80016c8:	2c00      	cmp	r4, #0
 80016ca:	f040 8088 	bne.w	80017de <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 80016ce:	784e      	ldrb	r6, [r1, #1]
 80016d0:	88cc      	ldrh	r4, [r1, #6]
 80016d2:	b396      	cbz	r6, 800173a <USB_ActivateEndpoint+0xbe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80016d4:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80016d8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80016dc:	f024 0401 	bic.w	r4, r4, #1
 80016e0:	b2b6      	uxth	r6, r6
 80016e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016e6:	b2a4      	uxth	r4, r4
 80016e8:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80016ea:	780c      	ldrb	r4, [r1, #0]
 80016ec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80016f0:	0656      	lsls	r6, r2, #25
 80016f2:	d509      	bpl.n	8001708 <USB_ActivateEndpoint+0x8c>
 80016f4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80016f8:	b292      	uxth	r2, r2
 80016fa:	402a      	ands	r2, r5
 80016fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001700:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001704:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8001708:	78ca      	ldrb	r2, [r1, #3]
 800170a:	7809      	ldrb	r1, [r1, #0]
 800170c:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800170e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001712:	4c94      	ldr	r4, [pc, #592]	; (8001964 <USB_ActivateEndpoint+0x2e8>)
 8001714:	b292      	uxth	r2, r2
 8001716:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 800171a:	d001      	beq.n	8001720 <USB_ActivateEndpoint+0xa4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800171c:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001720:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001724:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001728:	e0cb      	b.n	80018c2 <USB_ActivateEndpoint+0x246>
      wEpRegVal |= USB_EP_INTERRUPT;
 800172a:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 800172e:	e7b9      	b.n	80016a4 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8001730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001734:	e7b6      	b.n	80016a4 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8001736:	2001      	movs	r0, #1
 8001738:	e7b5      	b.n	80016a6 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800173a:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800173e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001742:	f024 0401 	bic.w	r4, r4, #1
 8001746:	b2ad      	uxth	r5, r5
 8001748:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 800174c:	b2a4      	uxth	r4, r4
 800174e:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001750:	780a      	ldrb	r2, [r1, #0]
 8001752:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001756:	690d      	ldr	r5, [r1, #16]
 8001758:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800175c:	b2b6      	uxth	r6, r6
 800175e:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8001762:	bb5d      	cbnz	r5, 80017bc <USB_ActivateEndpoint+0x140>
 8001764:	5b94      	ldrh	r4, [r2, r6]
 8001766:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800176a:	0424      	lsls	r4, r4, #16
 800176c:	0c24      	lsrs	r4, r4, #16
 800176e:	5394      	strh	r4, [r2, r6]
 8001770:	5b94      	ldrh	r4, [r2, r6]
 8001772:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8001776:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800177a:	b2a4      	uxth	r4, r4
 800177c:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800177e:	780c      	ldrb	r4, [r1, #0]
 8001780:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001784:	0455      	lsls	r5, r2, #17
 8001786:	d50d      	bpl.n	80017a4 <USB_ActivateEndpoint+0x128>
 8001788:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800178c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001790:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001794:	0412      	lsls	r2, r2, #16
 8001796:	0c12      	lsrs	r2, r2, #16
 8001798:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800179c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017a0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80017a4:	7809      	ldrb	r1, [r1, #0]
 80017a6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80017aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017b2:	0412      	lsls	r2, r2, #16
 80017b4:	0c12      	lsrs	r2, r2, #16
 80017b6:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80017ba:	e7b1      	b.n	8001720 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80017bc:	2d3e      	cmp	r5, #62	; 0x3e
 80017be:	d805      	bhi.n	80017cc <USB_ActivateEndpoint+0x150>
 80017c0:	086c      	lsrs	r4, r5, #1
 80017c2:	07ed      	lsls	r5, r5, #31
 80017c4:	bf48      	it	mi
 80017c6:	3401      	addmi	r4, #1
 80017c8:	02a4      	lsls	r4, r4, #10
 80017ca:	e7d6      	b.n	800177a <USB_ActivateEndpoint+0xfe>
 80017cc:	096f      	lsrs	r7, r5, #5
 80017ce:	06ec      	lsls	r4, r5, #27
 80017d0:	4c65      	ldr	r4, [pc, #404]	; (8001968 <USB_ActivateEndpoint+0x2ec>)
 80017d2:	bf08      	it	eq
 80017d4:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80017d8:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 80017dc:	e7cd      	b.n	800177a <USB_ActivateEndpoint+0xfe>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80017de:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80017e2:	b2a4      	uxth	r4, r4
 80017e4:	402c      	ands	r4, r5
 80017e6:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80017ea:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80017ee:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80017f2:	780a      	ldrb	r2, [r1, #0]
 80017f4:	890c      	ldrh	r4, [r1, #8]
 80017f6:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80017fa:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80017fe:	f024 0401 	bic.w	r4, r4, #1
 8001802:	b2b6      	uxth	r6, r6
 8001804:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001808:	b2a4      	uxth	r4, r4
 800180a:	5394      	strh	r4, [r2, r6]
 800180c:	780a      	ldrb	r2, [r1, #0]
 800180e:	894c      	ldrh	r4, [r1, #10]
 8001810:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001814:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001818:	f024 0401 	bic.w	r4, r4, #1
 800181c:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8001820:	b2a4      	uxth	r4, r4
 8001822:	b2b6      	uxth	r6, r6
 8001824:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 8001826:	784a      	ldrb	r2, [r1, #1]
 8001828:	780c      	ldrb	r4, [r1, #0]
 800182a:	2a00      	cmp	r2, #0
 800182c:	d14c      	bne.n	80018c8 <USB_ActivateEndpoint+0x24c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800182e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001832:	0452      	lsls	r2, r2, #17
 8001834:	d509      	bpl.n	800184a <USB_ActivateEndpoint+0x1ce>
 8001836:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800183a:	b292      	uxth	r2, r2
 800183c:	402a      	ands	r2, r5
 800183e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001842:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001846:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800184a:	780c      	ldrb	r4, [r1, #0]
 800184c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001850:	0657      	lsls	r7, r2, #25
 8001852:	d50d      	bpl.n	8001870 <USB_ActivateEndpoint+0x1f4>
 8001854:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001858:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800185c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001860:	0412      	lsls	r2, r2, #16
 8001862:	0c12      	lsrs	r2, r2, #16
 8001864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001868:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800186c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001870:	780c      	ldrb	r4, [r1, #0]
 8001872:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001876:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800187a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800187e:	0412      	lsls	r2, r2, #16
 8001880:	0c12      	lsrs	r2, r2, #16
 8001882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001886:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800188a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800188e:	f248 0480 	movw	r4, #32896	; 0x8080
 8001892:	780d      	ldrb	r5, [r1, #0]
 8001894:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8001898:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800189c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018a0:	0412      	lsls	r2, r2, #16
 80018a2:	0c12      	lsrs	r2, r2, #16
 80018a4:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80018a8:	4322      	orrs	r2, r4
 80018aa:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80018ae:	7809      	ldrb	r1, [r1, #0]
 80018b0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80018b4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80018b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018bc:	0412      	lsls	r2, r2, #16
 80018be:	0c12      	lsrs	r2, r2, #16
 80018c0:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80018c2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 80018c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80018c8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80018cc:	0456      	lsls	r6, r2, #17
 80018ce:	d509      	bpl.n	80018e4 <USB_ActivateEndpoint+0x268>
 80018d0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80018d4:	b292      	uxth	r2, r2
 80018d6:	402a      	ands	r2, r5
 80018d8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80018dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018e0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80018e4:	780c      	ldrb	r4, [r1, #0]
 80018e6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80018ea:	0652      	lsls	r2, r2, #25
 80018ec:	d50d      	bpl.n	800190a <USB_ActivateEndpoint+0x28e>
 80018ee:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80018f2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80018f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018fa:	0412      	lsls	r2, r2, #16
 80018fc:	0c12      	lsrs	r2, r2, #16
 80018fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001902:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001906:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800190a:	780c      	ldrb	r4, [r1, #0]
 800190c:	4d15      	ldr	r5, [pc, #84]	; (8001964 <USB_ActivateEndpoint+0x2e8>)
 800190e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001912:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001916:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800191a:	0412      	lsls	r2, r2, #16
 800191c:	0c12      	lsrs	r2, r2, #16
 800191e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001922:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001926:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800192a:	78ca      	ldrb	r2, [r1, #3]
 800192c:	780c      	ldrb	r4, [r1, #0]
 800192e:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001930:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001934:	b292      	uxth	r2, r2
 8001936:	ea02 0205 	and.w	r2, r2, r5
 800193a:	bf18      	it	ne
 800193c:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001940:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001944:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001948:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800194c:	7809      	ldrb	r1, [r1, #0]
 800194e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001952:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001956:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800195a:	0412      	lsls	r2, r2, #16
 800195c:	0c12      	lsrs	r2, r2, #16
 800195e:	e6df      	b.n	8001720 <USB_ActivateEndpoint+0xa4>
 8001960:	ffff8f8f 	.word	0xffff8f8f
 8001964:	ffff8fbf 	.word	0xffff8fbf
 8001968:	ffff8000 	.word	0xffff8000

0800196c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800196c:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 800196e:	7b0c      	ldrb	r4, [r1, #12]
 8001970:	784b      	ldrb	r3, [r1, #1]
 8001972:	780a      	ldrb	r2, [r1, #0]
 8001974:	2c00      	cmp	r4, #0
 8001976:	d13d      	bne.n	80019f4 <USB_DeactivateEndpoint+0x88>
  {
    if (ep->is_in != 0U)
 8001978:	b313      	cbz	r3, 80019c0 <USB_DeactivateEndpoint+0x54>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800197a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800197e:	065c      	lsls	r4, r3, #25
 8001980:	d50d      	bpl.n	800199e <USB_DeactivateEndpoint+0x32>
 8001982:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800198a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	0c1b      	lsrs	r3, r3, #16
 8001992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001996:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800199a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800199e:	780a      	ldrb	r2, [r1, #0]
 80019a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80019ac:	041b      	lsls	r3, r3, #16
 80019ae:	0c1b      	lsrs	r3, r3, #16
 80019b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80019bc:	2000      	movs	r0, #0
 80019be:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80019c0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019c4:	045b      	lsls	r3, r3, #17
 80019c6:	d50d      	bpl.n	80019e4 <USB_DeactivateEndpoint+0x78>
 80019c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	0c1b      	lsrs	r3, r3, #16
 80019d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80019e4:	780a      	ldrb	r2, [r1, #0]
 80019e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019f2:	e7db      	b.n	80019ac <USB_DeactivateEndpoint+0x40>
    if (ep->is_in == 0U)
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d14e      	bne.n	8001a96 <USB_DeactivateEndpoint+0x12a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80019f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019fc:	045c      	lsls	r4, r3, #17
 80019fe:	d50d      	bpl.n	8001a1c <USB_DeactivateEndpoint+0xb0>
 8001a00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a0c:	041b      	lsls	r3, r3, #16
 8001a0e:	0c1b      	lsrs	r3, r3, #16
 8001a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a18:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001a1c:	780a      	ldrb	r2, [r1, #0]
 8001a1e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a22:	065b      	lsls	r3, r3, #25
 8001a24:	d50d      	bpl.n	8001a42 <USB_DeactivateEndpoint+0xd6>
 8001a26:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a3e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001a42:	780a      	ldrb	r2, [r1, #0]
 8001a44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a5c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001a60:	f248 0280 	movw	r2, #32896	; 0x8080
 8001a64:	780c      	ldrb	r4, [r1, #0]
 8001a66:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a72:	041b      	lsls	r3, r3, #16
 8001a74:	0c1b      	lsrs	r3, r3, #16
 8001a76:	4313      	orrs	r3, r2
 8001a78:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001a7c:	7809      	ldrb	r1, [r1, #0]
 8001a7e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001a8a:	041b      	lsls	r3, r3, #16
 8001a8c:	0c1b      	lsrs	r3, r3, #16
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001a94:	e792      	b.n	80019bc <USB_DeactivateEndpoint+0x50>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001a96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a9a:	045c      	lsls	r4, r3, #17
 8001a9c:	d50d      	bpl.n	8001aba <USB_DeactivateEndpoint+0x14e>
 8001a9e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aaa:	041b      	lsls	r3, r3, #16
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001aba:	780a      	ldrb	r2, [r1, #0]
 8001abc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ac0:	065b      	lsls	r3, r3, #25
 8001ac2:	d50d      	bpl.n	8001ae0 <USB_DeactivateEndpoint+0x174>
 8001ac4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001adc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001ae0:	780a      	ldrb	r2, [r1, #0]
 8001ae2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aee:	041b      	lsls	r3, r3, #16
 8001af0:	0c1b      	lsrs	r3, r3, #16
 8001af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001afa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001afe:	f248 0280 	movw	r2, #32896	; 0x8080
 8001b02:	780c      	ldrb	r4, [r1, #0]
 8001b04:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	0c1b      	lsrs	r3, r3, #16
 8001b14:	4313      	orrs	r3, r2
 8001b16:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001b1a:	7809      	ldrb	r1, [r1, #0]
 8001b1c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001b20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b28:	e7af      	b.n	8001a8a <USB_DeactivateEndpoint+0x11e>

08001b2a <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8001b2a:	784b      	ldrb	r3, [r1, #1]
 8001b2c:	780a      	ldrb	r2, [r1, #0]
 8001b2e:	b18b      	cbz	r3, 8001b54 <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8001b30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	0c1b      	lsrs	r3, r3, #16
 8001b40:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8001b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b4c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8001b50:	2000      	movs	r0, #0
 8001b52:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8001b54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b60:	041b      	lsls	r3, r3, #16
 8001b62:	0c1b      	lsrs	r3, r3, #16
 8001b64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b68:	e7ec      	b.n	8001b44 <USB_EPSetStall+0x1a>

08001b6a <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8001b6a:	7b0b      	ldrb	r3, [r1, #12]
 8001b6c:	bb43      	cbnz	r3, 8001bc0 <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 8001b6e:	784b      	ldrb	r3, [r1, #1]
 8001b70:	780a      	ldrb	r2, [r1, #0]
 8001b72:	b33b      	cbz	r3, 8001bc4 <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001b74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b78:	065b      	lsls	r3, r3, #25
 8001b7a:	d50d      	bpl.n	8001b98 <USB_EPClearStall+0x2e>
 8001b7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b88:	041b      	lsls	r3, r3, #16
 8001b8a:	0c1b      	lsrs	r3, r3, #16
 8001b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b94:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8001b98:	78cb      	ldrb	r3, [r1, #3]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d010      	beq.n	8001bc0 <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001b9e:	780a      	ldrb	r2, [r1, #0]
 8001ba0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bac:	041b      	lsls	r3, r3, #16
 8001bae:	0c1b      	lsrs	r3, r3, #16
 8001bb0:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001bc4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bc8:	045b      	lsls	r3, r3, #17
 8001bca:	d50d      	bpl.n	8001be8 <USB_EPClearStall+0x7e>
 8001bcc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bd8:	041b      	lsls	r3, r3, #16
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001be8:	780a      	ldrb	r2, [r1, #0]
 8001bea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bf6:	041b      	lsls	r3, r3, #16
 8001bf8:	0c1b      	lsrs	r3, r3, #16
 8001bfa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001bfe:	e7d9      	b.n	8001bb4 <USB_EPClearStall+0x4a>

08001c00 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8001c00:	b911      	cbnz	r1, 8001c08 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8001c08:	2000      	movs	r0, #0
 8001c0a:	4770      	bx	lr

08001c0c <USB_DevConnect>:
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	4770      	bx	lr

08001c10 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001c10:	2000      	movs	r0, #0
 8001c12:	4770      	bx	lr

08001c14 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8001c14:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001c18:	b280      	uxth	r0, r0
 8001c1a:	4770      	bx	lr

08001c1c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	4770      	bx	lr

08001c20 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001c20:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8001c24:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001c26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d100      	bne.n	8001c36 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8001c34:	4770      	bx	lr
 8001c36:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8001c3a:	f822 0b04 	strh.w	r0, [r2], #4
 8001c3e:	e7f7      	b.n	8001c30 <USB_WritePMA+0x10>

08001c40 <USB_EPStartXfer>:
{
 8001c40:	b570      	push	{r4, r5, r6, lr}
 8001c42:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8001c44:	7849      	ldrb	r1, [r1, #1]
{
 8001c46:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8001c48:	2901      	cmp	r1, #1
 8001c4a:	69aa      	ldr	r2, [r5, #24]
 8001c4c:	692b      	ldr	r3, [r5, #16]
 8001c4e:	7b28      	ldrb	r0, [r5, #12]
 8001c50:	d166      	bne.n	8001d20 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8001c52:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8001c54:	bf9d      	ittte	ls
 8001c56:	2300      	movls	r3, #0
 8001c58:	61ab      	strls	r3, [r5, #24]
 8001c5a:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8001c5c:	1ad2      	subhi	r2, r2, r3
 8001c5e:	bf88      	it	hi
 8001c60:	61aa      	strhi	r2, [r5, #24]
 8001c62:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8001c64:	bb08      	cbnz	r0, 8001caa <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8001c66:	4633      	mov	r3, r6
 8001c68:	88ea      	ldrh	r2, [r5, #6]
 8001c6a:	6969      	ldr	r1, [r5, #20]
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f7ff ffd7 	bl	8001c20 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001c72:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8001c76:	782a      	ldrb	r2, [r5, #0]
 8001c78:	b299      	uxth	r1, r3
 8001c7a:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8001c7e:	0112      	lsls	r2, r2, #4
 8001c80:	440b      	add	r3, r1
 8001c82:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001c84:	782a      	ldrb	r2, [r5, #0]
 8001c86:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c92:	041b      	lsls	r3, r3, #16
 8001c94:	0c1b      	lsrs	r3, r3, #16
 8001c96:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca2:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8001caa:	782b      	ldrb	r3, [r5, #0]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001cac:	4620      	mov	r0, r4
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8001cae:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001cb8:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8001cbc:	b291      	uxth	r1, r2
 8001cbe:	bf15      	itete	ne
 8001cc0:	f204 420c 	addwne	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001cc4:	f204 4204 	addweq	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001cc8:	1852      	addne	r2, r2, r1
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001cca:	1852      	addeq	r2, r2, r1
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001ccc:	bf15      	itete	ne
 8001cce:	52d6      	strhne	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001cd0:	52d6      	strheq	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 8001cd2:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8001cd4:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001cd6:	4633      	mov	r3, r6
 8001cd8:	6969      	ldr	r1, [r5, #20]
 8001cda:	f7ff ffa1 	bl	8001c20 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001cde:	786b      	ldrb	r3, [r5, #1]
 8001ce0:	782a      	ldrb	r2, [r5, #0]
 8001ce2:	b973      	cbnz	r3, 8001d02 <USB_EPStartXfer+0xc2>
 8001ce4:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	0c1b      	lsrs	r3, r3, #16
 8001cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cfc:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8001d00:	e7c0      	b.n	8001c84 <USB_EPStartXfer+0x44>
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d1be      	bne.n	8001c84 <USB_EPStartXfer+0x44>
 8001d06:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d12:	041b      	lsls	r3, r3, #16
 8001d14:	0c1b      	lsrs	r3, r3, #16
 8001d16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d1e:	e7ed      	b.n	8001cfc <USB_EPStartXfer+0xbc>
    if (ep->xfer_len > ep->maxpacket)
 8001d20:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8001d22:	bf93      	iteet	ls
 8001d24:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8001d26:	1ad2      	subhi	r2, r2, r3
 8001d28:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8001d2a:	61ab      	strls	r3, [r5, #24]
 8001d2c:	bf98      	it	ls
 8001d2e:	4613      	movls	r3, r2
 8001d30:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8001d32:	b9b0      	cbnz	r0, 8001d62 <USB_EPStartXfer+0x122>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001d34:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b281      	uxth	r1, r0
 8001d3c:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8001d40:	4408      	add	r0, r1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d144      	bne.n	8001dd0 <USB_EPStartXfer+0x190>
 8001d46:	5a83      	ldrh	r3, [r0, r2]
 8001d48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d4c:	041b      	lsls	r3, r3, #16
 8001d4e:	0c1b      	lsrs	r3, r3, #16
 8001d50:	5283      	strh	r3, [r0, r2]
 8001d52:	5a83      	ldrh	r3, [r0, r2]
 8001d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	5283      	strh	r3, [r0, r2]
 8001d60:	e03f      	b.n	8001de2 <USB_EPStartXfer+0x1a2>
 8001d62:	b9a1      	cbnz	r1, 8001d8e <USB_EPStartXfer+0x14e>
 8001d64:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8001d68:	0112      	lsls	r2, r2, #4
 8001d6a:	b281      	uxth	r1, r0
 8001d6c:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8001d70:	4408      	add	r0, r1
 8001d72:	b9e3      	cbnz	r3, 8001dae <USB_EPStartXfer+0x16e>
 8001d74:	5a81      	ldrh	r1, [r0, r2]
 8001d76:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8001d7a:	0409      	lsls	r1, r1, #16
 8001d7c:	0c09      	lsrs	r1, r1, #16
 8001d7e:	5281      	strh	r1, [r0, r2]
 8001d80:	5a81      	ldrh	r1, [r0, r2]
 8001d82:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8001d86:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001d8a:	b289      	uxth	r1, r1
 8001d8c:	5281      	strh	r1, [r0, r2]
 8001d8e:	7869      	ldrb	r1, [r5, #1]
 8001d90:	782a      	ldrb	r2, [r5, #0]
 8001d92:	2900      	cmp	r1, #0
 8001d94:	d0ce      	beq.n	8001d34 <USB_EPStartXfer+0xf4>
 8001d96:	2901      	cmp	r1, #1
 8001d98:	d123      	bne.n	8001de2 <USB_EPStartXfer+0x1a2>
 8001d9a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b288      	uxth	r0, r1
 8001da2:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8001da6:	4401      	add	r1, r0
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	528b      	strh	r3, [r1, r2]
 8001dac:	e019      	b.n	8001de2 <USB_EPStartXfer+0x1a2>
 8001dae:	2b3e      	cmp	r3, #62	; 0x3e
 8001db0:	d805      	bhi.n	8001dbe <USB_EPStartXfer+0x17e>
 8001db2:	0859      	lsrs	r1, r3, #1
 8001db4:	07de      	lsls	r6, r3, #31
 8001db6:	bf48      	it	mi
 8001db8:	3101      	addmi	r1, #1
 8001dba:	0289      	lsls	r1, r1, #10
 8001dbc:	e7e5      	b.n	8001d8a <USB_EPStartXfer+0x14a>
 8001dbe:	095e      	lsrs	r6, r3, #5
 8001dc0:	06d9      	lsls	r1, r3, #27
 8001dc2:	4912      	ldr	r1, [pc, #72]	; (8001e0c <USB_EPStartXfer+0x1cc>)
 8001dc4:	bf08      	it	eq
 8001dc6:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8001dca:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8001dce:	e7dc      	b.n	8001d8a <USB_EPStartXfer+0x14a>
 8001dd0:	2b3e      	cmp	r3, #62	; 0x3e
 8001dd2:	d812      	bhi.n	8001dfa <USB_EPStartXfer+0x1ba>
 8001dd4:	0859      	lsrs	r1, r3, #1
 8001dd6:	07de      	lsls	r6, r3, #31
 8001dd8:	bf48      	it	mi
 8001dda:	3101      	addmi	r1, #1
 8001ddc:	0289      	lsls	r1, r1, #10
 8001dde:	b289      	uxth	r1, r1
 8001de0:	5281      	strh	r1, [r0, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001de2:	782a      	ldrb	r2, [r5, #0]
 8001de4:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	0c1b      	lsrs	r3, r3, #16
 8001df4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001df8:	e74f      	b.n	8001c9a <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001dfa:	0959      	lsrs	r1, r3, #5
 8001dfc:	06db      	lsls	r3, r3, #27
 8001dfe:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <USB_EPStartXfer+0x1cc>)
 8001e00:	bf08      	it	eq
 8001e02:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001e06:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001e0a:	e7a7      	b.n	8001d5c <USB_EPStartXfer+0x11c>
 8001e0c:	ffff8000 	.word	0xffff8000

08001e10 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001e10:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8001e14:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001e16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8001e1a:	085d      	lsrs	r5, r3, #1
 8001e1c:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001e1e:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8001e20:	462e      	mov	r6, r5
 8001e22:	3002      	adds	r0, #2
 8001e24:	b936      	cbnz	r6, 8001e34 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8001e26:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8001e28:	bf44      	itt	mi
 8001e2a:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8001e2e:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 8001e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8001e34:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8001e38:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8001e3a:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8001e3c:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8001e40:	0a24      	lsrs	r4, r4, #8
 8001e42:	f800 4c01 	strb.w	r4, [r0, #-1]
 8001e46:	e7ec      	b.n	8001e22 <USB_ReadPMA+0x12>

08001e48 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8001e48:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8001e4c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001e4e:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8001e52:	b15b      	cbz	r3, 8001e6c <USBD_CDC_EP0_RxReady+0x24>
 8001e54:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8001e58:	28ff      	cmp	r0, #255	; 0xff
 8001e5a:	d007      	beq.n	8001e6c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8001e62:	4621      	mov	r1, r4
 8001e64:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8001e66:	23ff      	movs	r3, #255	; 0xff
 8001e68:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	bd10      	pop	{r4, pc}

08001e70 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8001e70:	2343      	movs	r3, #67	; 0x43
 8001e72:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8001e74:	4800      	ldr	r0, [pc, #0]	; (8001e78 <USBD_CDC_GetFSCfgDesc+0x8>)
 8001e76:	4770      	bx	lr
 8001e78:	20000040 	.word	0x20000040

08001e7c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8001e7c:	2343      	movs	r3, #67	; 0x43
 8001e7e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8001e80:	4800      	ldr	r0, [pc, #0]	; (8001e84 <USBD_CDC_GetHSCfgDesc+0x8>)
 8001e82:	4770      	bx	lr
 8001e84:	20000084 	.word	0x20000084

08001e88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8001e88:	2343      	movs	r3, #67	; 0x43
 8001e8a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8001e8c:	4800      	ldr	r0, [pc, #0]	; (8001e90 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8001e8e:	4770      	bx	lr
 8001e90:	200000d4 	.word	0x200000d4

08001e94 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8001e94:	230a      	movs	r3, #10
 8001e96:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8001e98:	4800      	ldr	r0, [pc, #0]	; (8001e9c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8001e9a:	4770      	bx	lr
 8001e9c:	200000c8 	.word	0x200000c8

08001ea0 <USBD_CDC_DataOut>:
{
 8001ea0:	b538      	push	{r3, r4, r5, lr}
 8001ea2:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001ea4:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8001ea8:	f001 f874 	bl	8002f94 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8001eac:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8001eb0:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8001eb4:	b14b      	cbz	r3, 8001eca <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001eb6:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8001eba:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8001ec4:	4798      	blx	r3
    return USBD_OK;
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8001eca:	2002      	movs	r0, #2
}
 8001ecc:	bd38      	pop	{r3, r4, r5, pc}

08001ece <USBD_CDC_DataIn>:
{
 8001ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8001ed0:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8001ed4:	b1ce      	cbz	r6, 8001f0a <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8001ed6:	2314      	movs	r3, #20
 8001ed8:	fb03 0301 	mla	r3, r3, r1, r0
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	b182      	cbz	r2, 8001f02 <USBD_CDC_DataIn+0x34>
 8001ee0:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8001ee4:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8001ee8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001eea:	fbb2 f4f5 	udiv	r4, r2, r5
 8001eee:	fb05 2414 	mls	r4, r5, r4, r2
 8001ef2:	b934      	cbnz	r4, 8001f02 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8001ef4:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8001ef6:	4622      	mov	r2, r4
 8001ef8:	4623      	mov	r3, r4
 8001efa:	f001 f82f 	bl	8002f5c <USBD_LL_Transmit>
    return USBD_OK;
 8001efe:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8001f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8001f02:	2000      	movs	r0, #0
 8001f04:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8001f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8001f0a:	2002      	movs	r0, #2
}
 8001f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f0e <USBD_CDC_Setup>:
{
 8001f0e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8001f12:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001f16:	780a      	ldrb	r2, [r1, #0]
{
 8001f18:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001f1a:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8001f1e:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001f20:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8001f24:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8001f28:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001f2c:	d028      	beq.n	8001f80 <USBD_CDC_Setup+0x72>
 8001f2e:	2c20      	cmp	r4, #32
 8001f30:	d147      	bne.n	8001fc2 <USBD_CDC_Setup+0xb4>
      if (req->wLength)
 8001f32:	88cc      	ldrh	r4, [r1, #6]
 8001f34:	784b      	ldrb	r3, [r1, #1]
 8001f36:	b1e4      	cbz	r4, 8001f72 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8001f38:	0612      	lsls	r2, r2, #24
 8001f3a:	d511      	bpl.n	8001f60 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001f3c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8001f40:	4639      	mov	r1, r7
 8001f42:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8001f46:	4618      	mov	r0, r3
 8001f48:	4622      	mov	r2, r4
 8001f4a:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8001f4c:	88f2      	ldrh	r2, [r6, #6]
 8001f4e:	4639      	mov	r1, r7
 8001f50:	4628      	mov	r0, r5
 8001f52:	f000 fc2e 	bl	80027b2 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8001f56:	4644      	mov	r4, r8
}
 8001f58:	4620      	mov	r0, r4
 8001f5a:	b003      	add	sp, #12
 8001f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8001f60:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8001f64:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8001f68:	4622      	mov	r2, r4
 8001f6a:	4639      	mov	r1, r7
 8001f6c:	f000 fc36 	bl	80027dc <USBD_CtlPrepareRx>
 8001f70:	e7f1      	b.n	8001f56 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001f72:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8001f76:	4618      	mov	r0, r3
 8001f78:	6895      	ldr	r5, [r2, #8]
 8001f7a:	4622      	mov	r2, r4
 8001f7c:	47a8      	blx	r5
 8001f7e:	e7eb      	b.n	8001f58 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8001f80:	784f      	ldrb	r7, [r1, #1]
 8001f82:	2f0a      	cmp	r7, #10
 8001f84:	d00d      	beq.n	8001fa2 <USBD_CDC_Setup+0x94>
 8001f86:	2f0b      	cmp	r7, #11
 8001f88:	d015      	beq.n	8001fb6 <USBD_CDC_Setup+0xa8>
 8001f8a:	b9d7      	cbnz	r7, 8001fc2 <USBD_CDC_Setup+0xb4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001f8c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d114      	bne.n	8001fbe <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8001f94:	2202      	movs	r2, #2
 8001f96:	f10d 0106 	add.w	r1, sp, #6
 8001f9a:	f000 fc0a 	bl	80027b2 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8001f9e:	463c      	mov	r4, r7
 8001fa0:	e7da      	b.n	8001f58 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001fa2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d109      	bne.n	8001fbe <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8001faa:	2201      	movs	r2, #1
 8001fac:	f10d 0105 	add.w	r1, sp, #5
 8001fb0:	f000 fbff 	bl	80027b2 <USBD_CtlSendData>
 8001fb4:	e7d0      	b.n	8001f58 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8001fb6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d0cc      	beq.n	8001f58 <USBD_CDC_Setup+0x4a>
            USBD_CtlError(pdev, req);
 8001fbe:	4631      	mov	r1, r6
 8001fc0:	4628      	mov	r0, r5
      USBD_CtlError(pdev, req);
 8001fc2:	f000 fbcf 	bl	8002764 <USBD_CtlError>
      ret = USBD_FAIL;
 8001fc6:	2402      	movs	r4, #2
      break;
 8001fc8:	e7c6      	b.n	8001f58 <USBD_CDC_Setup+0x4a>

08001fca <USBD_CDC_DeInit>:
{
 8001fca:	b538      	push	{r3, r4, r5, lr}
 8001fcc:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8001fce:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8001fd0:	2181      	movs	r1, #129	; 0x81
 8001fd2:	f000 ff7b 	bl	8002ecc <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8001fd6:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8001fd8:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8001fda:	4620      	mov	r0, r4
 8001fdc:	f000 ff76 	bl	8002ecc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8001fe0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8001fe4:	2182      	movs	r1, #130	; 0x82
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f000 ff70 	bl	8002ecc <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8001fec:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8001ff0:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8001ff2:	b14b      	cbz	r3, 8002008 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8001ff4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8001ffc:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8002000:	f000 ffd0 	bl	8002fa4 <USBD_static_free>
    pdev->pClassData = NULL;
 8002004:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8002008:	2000      	movs	r0, #0
 800200a:	bd38      	pop	{r3, r4, r5, pc}

0800200c <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800200c:	7c03      	ldrb	r3, [r0, #16]
{
 800200e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002012:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002014:	bbcb      	cbnz	r3, 800208a <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800201a:	2202      	movs	r2, #2
 800201c:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800201e:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002020:	f000 ff44 	bl	8002eac <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002024:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002028:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800202a:	4629      	mov	r1, r5
 800202c:	2202      	movs	r2, #2
 800202e:	4620      	mov	r0, r4
 8002030:	f000 ff3c 	bl	8002eac <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002034:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002038:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800203a:	2308      	movs	r3, #8
 800203c:	2203      	movs	r2, #3
 800203e:	2182      	movs	r1, #130	; 0x82
 8002040:	4620      	mov	r0, r4
 8002042:	f000 ff33 	bl	8002eac <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002046:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002048:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800204c:	f000 ffa6 	bl	8002f9c <USBD_static_malloc>
 8002050:	4606      	mov	r6, r0
 8002052:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8002056:	b358      	cbz	r0, 80020b0 <USBD_CDC_Init+0xa4>
    hcdc->TxState = 0U;
 8002058:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800205a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002062:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8002066:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 800206a:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800206e:	f1b8 0f00 	cmp.w	r8, #0
 8002072:	d113      	bne.n	800209c <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002078:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800207c:	4629      	mov	r1, r5
 800207e:	4620      	mov	r0, r4
 8002080:	f000 ff7a 	bl	8002f78 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002084:	4640      	mov	r0, r8
 8002086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800208a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800208c:	2340      	movs	r3, #64	; 0x40
 800208e:	2202      	movs	r2, #2
 8002090:	2181      	movs	r1, #129	; 0x81
 8002092:	f000 ff0b 	bl	8002eac <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002096:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002098:	2340      	movs	r3, #64	; 0x40
 800209a:	e7c6      	b.n	800202a <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800209c:	2340      	movs	r3, #64	; 0x40
 800209e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80020a2:	4629      	mov	r1, r5
 80020a4:	4620      	mov	r0, r4
 80020a6:	f000 ff67 	bl	8002f78 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80020aa:	4638      	mov	r0, r7
 80020ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 80020b0:	4628      	mov	r0, r5
}
 80020b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080020b6 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80020b6:	b119      	cbz	r1, 80020c0 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80020b8:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80020bc:	2000      	movs	r0, #0
 80020be:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80020c0:	2002      	movs	r0, #2
  }

  return ret;
}
 80020c2:	4770      	bx	lr

080020c4 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80020c4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80020c8:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80020ca:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80020ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80020d2:	4770      	bx	lr

080020d4 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80020d4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 80020d8:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80020da:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80020de:	4770      	bx	lr

080020e0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80020e0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80020e4:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80020e6:	b162      	cbz	r2, 8002102 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80020e8:	7c04      	ldrb	r4, [r0, #16]
 80020ea:	b944      	cbnz	r4, 80020fe <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80020ec:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80020f0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80020f4:	2101      	movs	r1, #1
 80020f6:	f000 ff3f 	bl	8002f78 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80020fa:	2000      	movs	r0, #0
 80020fc:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80020fe:	2340      	movs	r3, #64	; 0x40
 8002100:	e7f6      	b.n	80020f0 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002102:	2002      	movs	r0, #2
  }
}
 8002104:	bd10      	pop	{r4, pc}

08002106 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002106:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8002108:	b180      	cbz	r0, 800212c <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800210a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800210e:	b113      	cbz	r3, 8002116 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002116:	b109      	cbz	r1, 800211c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002118:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800211c:	2301      	movs	r3, #1
  pdev->id = id;
 800211e:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002120:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002124:	f000 fe74 	bl	8002e10 <USBD_LL_Init>

  return USBD_OK;
 8002128:	2000      	movs	r0, #0
 800212a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800212c:	2002      	movs	r0, #2
}
 800212e:	bd08      	pop	{r3, pc}

08002130 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8002130:	b119      	cbz	r1, 800213a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002132:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8002136:	2000      	movs	r0, #0
 8002138:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800213a:	2002      	movs	r0, #2
  }

  return status;
}
 800213c:	4770      	bx	lr

0800213e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800213e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002140:	f000 fea6 	bl	8002e90 <USBD_LL_Start>

  return USBD_OK;
}
 8002144:	2000      	movs	r0, #0
 8002146:	bd08      	pop	{r3, pc}

08002148 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002148:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800214a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800214e:	b90b      	cbnz	r3, 8002154 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002150:	2002      	movs	r0, #2
 8002152:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4798      	blx	r3
 8002158:	2800      	cmp	r0, #0
 800215a:	d1f9      	bne.n	8002150 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800215c:	bd08      	pop	{r3, pc}

0800215e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800215e:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002160:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4798      	blx	r3

  return USBD_OK;
}
 8002168:	2000      	movs	r0, #0
 800216a:	bd08      	pop	{r3, pc}

0800216c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800216c:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800216e:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8002172:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002174:	4628      	mov	r0, r5
 8002176:	f000 fae1 	bl	800273c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800217a:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800217c:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8002180:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8002184:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8002188:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800218c:	f001 031f 	and.w	r3, r1, #31
 8002190:	2b01      	cmp	r3, #1
 8002192:	d00e      	beq.n	80021b2 <USBD_LL_SetupStage+0x46>
 8002194:	d307      	bcc.n	80021a6 <USBD_LL_SetupStage+0x3a>
 8002196:	2b02      	cmp	r3, #2
 8002198:	d010      	beq.n	80021bc <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800219a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800219e:	4620      	mov	r0, r4
 80021a0:	f000 fea2 	bl	8002ee8 <USBD_LL_StallEP>
      break;
 80021a4:	e003      	b.n	80021ae <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80021a6:	4629      	mov	r1, r5
 80021a8:	4620      	mov	r0, r4
 80021aa:	f000 f8f5 	bl	8002398 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80021ae:	2000      	movs	r0, #0
 80021b0:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80021b2:	4629      	mov	r1, r5
 80021b4:	4620      	mov	r0, r4
 80021b6:	f000 fa13 	bl	80025e0 <USBD_StdItfReq>
      break;
 80021ba:	e7f8      	b.n	80021ae <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80021bc:	4629      	mov	r1, r5
 80021be:	4620      	mov	r0, r4
 80021c0:	f000 fa33 	bl	800262a <USBD_StdEPReq>
      break;
 80021c4:	e7f3      	b.n	80021ae <USBD_LL_SetupStage+0x42>

080021c6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80021c6:	b570      	push	{r4, r5, r6, lr}
 80021c8:	4605      	mov	r5, r0
 80021ca:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80021cc:	bb49      	cbnz	r1, 8002222 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80021ce:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d11e      	bne.n	8002214 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 80021d6:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 80021da:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 80021de:	4293      	cmp	r3, r2
 80021e0:	d90b      	bls.n	80021fa <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 80021e2:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 80021e4:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 80021e6:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80021ea:	bf8c      	ite	hi
 80021ec:	b29a      	uxthhi	r2, r3
 80021ee:	b292      	uxthls	r2, r2
 80021f0:	4631      	mov	r1, r6
 80021f2:	f000 fb02 	bl	80027fa <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80021f6:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80021fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	b123      	cbz	r3, 800220c <USBD_LL_DataOutStage+0x46>
 8002202:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002206:	2a03      	cmp	r2, #3
 8002208:	d100      	bne.n	800220c <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 800220a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800220c:	4628      	mov	r0, r5
 800220e:	f000 fafc 	bl	800280a <USBD_CtlSendStatus>
 8002212:	e7f0      	b.n	80021f6 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002214:	2b05      	cmp	r3, #5
 8002216:	d1ee      	bne.n	80021f6 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8002218:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800221c:	f000 fe64 	bl	8002ee8 <USBD_LL_StallEP>
 8002220:	e7e9      	b.n	80021f6 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8002222:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	b12b      	cbz	r3, 8002236 <USBD_LL_DataOutStage+0x70>
 800222a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800222e:	2a03      	cmp	r2, #3
 8002230:	d101      	bne.n	8002236 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8002232:	4798      	blx	r3
 8002234:	e7df      	b.n	80021f6 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8002236:	2002      	movs	r0, #2
}
 8002238:	bd70      	pop	{r4, r5, r6, pc}

0800223a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800223a:	b570      	push	{r4, r5, r6, lr}
 800223c:	4613      	mov	r3, r2
 800223e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002240:	460e      	mov	r6, r1
 8002242:	2900      	cmp	r1, #0
 8002244:	d147      	bne.n	80022d6 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002246:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800224a:	2a02      	cmp	r2, #2
 800224c:	d13c      	bne.n	80022c8 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 800224e:	6a05      	ldr	r5, [r0, #32]
 8002250:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002252:	4295      	cmp	r5, r2
 8002254:	d913      	bls.n	800227e <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8002256:	1aaa      	subs	r2, r5, r2
 8002258:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800225a:	4619      	mov	r1, r3
 800225c:	b292      	uxth	r2, r2
 800225e:	f000 fab5 	bl	80027cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002262:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002264:	461a      	mov	r2, r3
 8002266:	4619      	mov	r1, r3
 8002268:	4620      	mov	r0, r4
 800226a:	f000 fe85 	bl	8002f78 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800226e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8002272:	2000      	movs	r0, #0
 8002274:	2b01      	cmp	r3, #1
 8002276:	d13a      	bne.n	80022ee <USBD_LL_DataInStage+0xb4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002278:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 800227c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800227e:	69c3      	ldr	r3, [r0, #28]
 8002280:	fbb3 f5f2 	udiv	r5, r3, r2
 8002284:	fb02 3515 	mls	r5, r2, r5, r3
 8002288:	b965      	cbnz	r5, 80022a4 <USBD_LL_DataInStage+0x6a>
 800228a:	429a      	cmp	r2, r3
 800228c:	d80a      	bhi.n	80022a4 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 800228e:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8002292:	4293      	cmp	r3, r2
 8002294:	d206      	bcs.n	80022a4 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002296:	462a      	mov	r2, r5
 8002298:	f000 fa98 	bl	80027cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800229c:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80022a0:	462b      	mov	r3, r5
 80022a2:	e7df      	b.n	8002264 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80022a4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	b12b      	cbz	r3, 80022b8 <USBD_LL_DataInStage+0x7e>
 80022ac:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80022b0:	2a03      	cmp	r2, #3
 80022b2:	d101      	bne.n	80022b8 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80022b4:	4620      	mov	r0, r4
 80022b6:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80022b8:	2180      	movs	r1, #128	; 0x80
 80022ba:	4620      	mov	r0, r4
 80022bc:	f000 fe14 	bl	8002ee8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80022c0:	4620      	mov	r0, r4
 80022c2:	f000 faad 	bl	8002820 <USBD_CtlReceiveStatus>
 80022c6:	e7d2      	b.n	800226e <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80022c8:	f032 0304 	bics.w	r3, r2, #4
 80022cc:	d1cf      	bne.n	800226e <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80022ce:	2180      	movs	r1, #128	; 0x80
 80022d0:	f000 fe0a 	bl	8002ee8 <USBD_LL_StallEP>
 80022d4:	e7cb      	b.n	800226e <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80022d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	b133      	cbz	r3, 80022ec <USBD_LL_DataInStage+0xb2>
 80022de:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80022e2:	2a03      	cmp	r2, #3
 80022e4:	d102      	bne.n	80022ec <USBD_LL_DataInStage+0xb2>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80022e6:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80022e8:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80022ea:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80022ec:	2002      	movs	r0, #2
}
 80022ee:	bd70      	pop	{r4, r5, r6, pc}

080022f0 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80022f0:	2200      	movs	r2, #0
{
 80022f2:	b570      	push	{r4, r5, r6, lr}
 80022f4:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80022f6:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80022f8:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80022fa:	4611      	mov	r1, r2
 80022fc:	2340      	movs	r3, #64	; 0x40
 80022fe:	f000 fdd5 	bl	8002eac <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002302:	4633      	mov	r3, r6
 8002304:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002306:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800230a:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800230e:	2200      	movs	r2, #0
 8002310:	4620      	mov	r0, r4
 8002312:	f000 fdcb 	bl	8002eac <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8002316:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002318:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800231c:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800231e:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002320:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8002324:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8002328:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800232a:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800232e:	b123      	cbz	r3, 800233a <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002330:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002334:	4620      	mov	r0, r4
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4798      	blx	r3
  }

  return USBD_OK;
}
 800233a:	2000      	movs	r0, #0
 800233c:	bd70      	pop	{r4, r5, r6, pc}

0800233e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800233e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8002340:	2000      	movs	r0, #0
 8002342:	4770      	bx	lr

08002344 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002344:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002348:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800234c:	2304      	movs	r3, #4
 800234e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8002352:	2000      	movs	r0, #0
 8002354:	4770      	bx	lr

08002356 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8002356:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800235a:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800235c:	bf04      	itt	eq
 800235e:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8002362:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8002366:	2000      	movs	r0, #0
 8002368:	4770      	bx	lr

0800236a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800236a:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800236c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002370:	2a03      	cmp	r2, #3
 8002372:	d104      	bne.n	800237e <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8002374:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	b103      	cbz	r3, 800237e <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800237c:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800237e:	2000      	movs	r0, #0
 8002380:	bd08      	pop	{r3, pc}

08002382 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8002382:	b510      	push	{r4, lr}
 8002384:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8002386:	2180      	movs	r1, #128	; 0x80
 8002388:	f000 fdae 	bl	8002ee8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800238c:	4620      	mov	r0, r4
}
 800238e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8002392:	2100      	movs	r1, #0
 8002394:	f000 bda8 	b.w	8002ee8 <USBD_LL_StallEP>

08002398 <USBD_StdDevReq>:
{
 8002398:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800239a:	780b      	ldrb	r3, [r1, #0]
{
 800239c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800239e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80023a2:	2b20      	cmp	r3, #32
{
 80023a4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80023a6:	d012      	beq.n	80023ce <USBD_StdDevReq+0x36>
 80023a8:	2b40      	cmp	r3, #64	; 0x40
 80023aa:	d010      	beq.n	80023ce <USBD_StdDevReq+0x36>
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d15c      	bne.n	800246a <USBD_StdDevReq+0xd2>
      switch (req->bRequest)
 80023b0:	784b      	ldrb	r3, [r1, #1]
 80023b2:	2b09      	cmp	r3, #9
 80023b4:	d858      	bhi.n	8002468 <USBD_StdDevReq+0xd0>
 80023b6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023ba:	00e9      	.short	0x00e9
 80023bc:	00570105 	.word	0x00570105
 80023c0:	005700fe 	.word	0x005700fe
 80023c4:	00130084 	.word	0x00130084
 80023c8:	00d20057 	.word	0x00d20057
 80023cc:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 80023ce:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80023d2:	4629      	mov	r1, r5
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	4620      	mov	r0, r4
 80023d8:	4798      	blx	r3
}
 80023da:	2000      	movs	r0, #0
 80023dc:	b003      	add	sp, #12
 80023de:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80023e6:	884b      	ldrh	r3, [r1, #2]
 80023e8:	0a1a      	lsrs	r2, r3, #8
 80023ea:	3a01      	subs	r2, #1
 80023ec:	2a06      	cmp	r2, #6
 80023ee:	d83b      	bhi.n	8002468 <USBD_StdDevReq+0xd0>
 80023f0:	e8df f002 	tbb	[pc, r2]
 80023f4:	3a2d2004 	.word	0x3a2d2004
 80023f8:	523a      	.short	0x523a
 80023fa:	5c          	.byte	0x5c
 80023fb:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80023fc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002400:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002402:	f10d 0106 	add.w	r1, sp, #6
 8002406:	7c20      	ldrb	r0, [r4, #16]
 8002408:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800240a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800240e:	b152      	cbz	r2, 8002426 <USBD_StdDevReq+0x8e>
 8002410:	88eb      	ldrh	r3, [r5, #6]
 8002412:	b143      	cbz	r3, 8002426 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8002414:	429a      	cmp	r2, r3
 8002416:	bf28      	it	cs
 8002418:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800241a:	4601      	mov	r1, r0
 800241c:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800241e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002422:	f000 f9c6 	bl	80027b2 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8002426:	88eb      	ldrh	r3, [r5, #6]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1d6      	bne.n	80023da <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 800242c:	4620      	mov	r0, r4
 800242e:	f000 f9ec 	bl	800280a <USBD_CtlSendStatus>
 8002432:	e7d2      	b.n	80023da <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002434:	7c02      	ldrb	r2, [r0, #16]
 8002436:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800243a:	b932      	cbnz	r2, 800244a <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800243e:	f10d 0006 	add.w	r0, sp, #6
 8002442:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002444:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002446:	7043      	strb	r3, [r0, #1]
 8002448:	e7df      	b.n	800240a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	e7f7      	b.n	800243e <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b05      	cmp	r3, #5
 8002452:	d809      	bhi.n	8002468 <USBD_StdDevReq+0xd0>
 8002454:	e8df f003 	tbb	[pc, r3]
 8002458:	14100c03 	.word	0x14100c03
 800245c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800245e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002462:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1cc      	bne.n	8002402 <USBD_StdDevReq+0x6a>
          USBD_CtlError(pdev, req);
 8002468:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 800246a:	f7ff ff8a 	bl	8002382 <USBD_CtlError.constprop.1>
  return ret;
 800246e:	e7b4      	b.n	80023da <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8002470:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	e7f5      	b.n	8002464 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8002478:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	e7f1      	b.n	8002464 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8002480:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	e7ed      	b.n	8002464 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8002488:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	e7e9      	b.n	8002464 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002490:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	e7e5      	b.n	8002464 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002498:	7c03      	ldrb	r3, [r0, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1e4      	bne.n	8002468 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800249e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80024a2:	f10d 0006 	add.w	r0, sp, #6
 80024a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a8:	4798      	blx	r3
 80024aa:	e7ae      	b.n	800240a <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80024ac:	7c03      	ldrb	r3, [r0, #16]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1da      	bne.n	8002468 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80024b2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80024b6:	f10d 0006 	add.w	r0, sp, #6
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80024be:	2307      	movs	r3, #7
 80024c0:	e7c1      	b.n	8002446 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80024c2:	888b      	ldrh	r3, [r1, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1cf      	bne.n	8002468 <USBD_StdDevReq+0xd0>
 80024c8:	88cb      	ldrh	r3, [r1, #6]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1cc      	bne.n	8002468 <USBD_StdDevReq+0xd0>
 80024ce:	884d      	ldrh	r5, [r1, #2]
 80024d0:	2d7f      	cmp	r5, #127	; 0x7f
 80024d2:	d8c9      	bhi.n	8002468 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80024d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80024d8:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d0c4      	beq.n	8002468 <USBD_StdDevReq+0xd0>
      pdev->dev_address = dev_addr;
 80024de:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80024e2:	f000 fd2d 	bl	8002f40 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80024e6:	4620      	mov	r0, r4
 80024e8:	f000 f98f 	bl	800280a <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80024ec:	b11d      	cbz	r5, 80024f6 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80024ee:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80024f0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80024f4:	e771      	b.n	80023da <USBD_StdDevReq+0x42>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e7fa      	b.n	80024f0 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 80024fa:	7889      	ldrb	r1, [r1, #2]
 80024fc:	4d37      	ldr	r5, [pc, #220]	; (80025dc <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80024fe:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8002500:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002502:	d8b1      	bhi.n	8002468 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8002504:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002508:	2b02      	cmp	r3, #2
 800250a:	d008      	beq.n	800251e <USBD_StdDevReq+0x186>
 800250c:	2b03      	cmp	r3, #3
 800250e:	d014      	beq.n	800253a <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8002510:	f7ff ff37 	bl	8002382 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8002514:	7829      	ldrb	r1, [r5, #0]
 8002516:	4620      	mov	r0, r4
 8002518:	f7ff fe21 	bl	800215e <USBD_ClrClassConfig>
 800251c:	e75d      	b.n	80023da <USBD_StdDevReq+0x42>
        if (cfgidx)
 800251e:	2900      	cmp	r1, #0
 8002520:	d084      	beq.n	800242c <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8002522:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002524:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8002526:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002528:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800252c:	4620      	mov	r0, r4
 800252e:	f7ff fe0b 	bl	8002148 <USBD_SetClassConfig>
 8002532:	2802      	cmp	r0, #2
 8002534:	f47f af7a 	bne.w	800242c <USBD_StdDevReq+0x94>
 8002538:	e796      	b.n	8002468 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 800253a:	b931      	cbnz	r1, 800254a <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800253c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800253e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8002540:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8002544:	f7ff fe0b 	bl	800215e <USBD_ClrClassConfig>
 8002548:	e770      	b.n	800242c <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 800254a:	6841      	ldr	r1, [r0, #4]
 800254c:	2901      	cmp	r1, #1
 800254e:	f43f af6d 	beq.w	800242c <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002552:	b2c9      	uxtb	r1, r1
 8002554:	f7ff fe03 	bl	800215e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8002558:	7829      	ldrb	r1, [r5, #0]
 800255a:	6061      	str	r1, [r4, #4]
 800255c:	e7e6      	b.n	800252c <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 800255e:	88ca      	ldrh	r2, [r1, #6]
 8002560:	2a01      	cmp	r2, #1
 8002562:	d181      	bne.n	8002468 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8002564:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002568:	2b00      	cmp	r3, #0
 800256a:	f43f af7d 	beq.w	8002468 <USBD_StdDevReq+0xd0>
 800256e:	2b02      	cmp	r3, #2
 8002570:	d904      	bls.n	800257c <USBD_StdDevReq+0x1e4>
 8002572:	2b03      	cmp	r3, #3
 8002574:	f47f af78 	bne.w	8002468 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8002578:	1d01      	adds	r1, r0, #4
 800257a:	e003      	b.n	8002584 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 800257c:	4601      	mov	r1, r0
 800257e:	2300      	movs	r3, #0
 8002580:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002584:	4620      	mov	r0, r4
 8002586:	f000 f914 	bl	80027b2 <USBD_CtlSendData>
 800258a:	e726      	b.n	80023da <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 800258c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002590:	3b01      	subs	r3, #1
 8002592:	2b02      	cmp	r3, #2
 8002594:	f63f af68 	bhi.w	8002468 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8002598:	88cb      	ldrh	r3, [r1, #6]
 800259a:	2b02      	cmp	r3, #2
 800259c:	f47f af64 	bne.w	8002468 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80025a0:	2301      	movs	r3, #1
 80025a2:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80025a4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80025a8:	b10b      	cbz	r3, 80025ae <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80025aa:	2303      	movs	r3, #3
 80025ac:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80025ae:	2202      	movs	r2, #2
 80025b0:	f104 010c 	add.w	r1, r4, #12
 80025b4:	e7e6      	b.n	8002584 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80025b6:	884b      	ldrh	r3, [r1, #2]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	f47f af0e 	bne.w	80023da <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80025be:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80025c2:	e733      	b.n	800242c <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 80025c4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80025c8:	3b01      	subs	r3, #1
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	f63f af4c 	bhi.w	8002468 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80025d0:	884b      	ldrh	r3, [r1, #2]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	f47f af01 	bne.w	80023da <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	e7f0      	b.n	80025be <USBD_StdDevReq+0x226>
 80025dc:	20000198 	.word	0x20000198

080025e0 <USBD_StdItfReq>:
{
 80025e0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80025e2:	780b      	ldrb	r3, [r1, #0]
{
 80025e4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80025e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80025ea:	2b20      	cmp	r3, #32
{
 80025ec:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80025ee:	d002      	beq.n	80025f6 <USBD_StdItfReq+0x16>
 80025f0:	2b40      	cmp	r3, #64	; 0x40
 80025f2:	d000      	beq.n	80025f6 <USBD_StdItfReq+0x16>
 80025f4:	b9b3      	cbnz	r3, 8002624 <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 80025f6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80025fa:	3b01      	subs	r3, #1
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d810      	bhi.n	8002622 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8002600:	792b      	ldrb	r3, [r5, #4]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d80d      	bhi.n	8002622 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8002606:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800260a:	4629      	mov	r1, r5
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	4620      	mov	r0, r4
 8002610:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8002612:	88eb      	ldrh	r3, [r5, #6]
 8002614:	b91b      	cbnz	r3, 800261e <USBD_StdItfReq+0x3e>
 8002616:	b910      	cbnz	r0, 800261e <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8002618:	4620      	mov	r0, r4
 800261a:	f000 f8f6 	bl	800280a <USBD_CtlSendStatus>
}
 800261e:	2000      	movs	r0, #0
 8002620:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8002622:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 8002624:	f7ff fead 	bl	8002382 <USBD_CtlError.constprop.1>
      break;
 8002628:	e7f9      	b.n	800261e <USBD_StdItfReq+0x3e>

0800262a <USBD_StdEPReq>:
{
 800262a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800262c:	780a      	ldrb	r2, [r1, #0]
{
 800262e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002630:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002634:	2a20      	cmp	r2, #32
{
 8002636:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002638:	d013      	beq.n	8002662 <USBD_StdEPReq+0x38>
 800263a:	2a40      	cmp	r2, #64	; 0x40
 800263c:	d011      	beq.n	8002662 <USBD_StdEPReq+0x38>
 800263e:	b96a      	cbnz	r2, 800265c <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8002640:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8002642:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 8002644:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8002646:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8002648:	d01f      	beq.n	800268a <USBD_StdEPReq+0x60>
 800264a:	d335      	bcc.n	80026b8 <USBD_StdEPReq+0x8e>
 800264c:	2d03      	cmp	r5, #3
 800264e:	d105      	bne.n	800265c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8002650:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002654:	2a02      	cmp	r2, #2
 8002656:	d026      	beq.n	80026a6 <USBD_StdEPReq+0x7c>
 8002658:	2a03      	cmp	r2, #3
 800265a:	d00a      	beq.n	8002672 <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 800265c:	f7ff fe91 	bl	8002382 <USBD_CtlError.constprop.1>
      break;
 8002660:	e005      	b.n	800266e <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 8002662:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8002666:	4619      	mov	r1, r3
 8002668:	6892      	ldr	r2, [r2, #8]
 800266a:	4620      	mov	r0, r4
 800266c:	4790      	blx	r2
}
 800266e:	2000      	movs	r0, #0
 8002670:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002672:	885a      	ldrh	r2, [r3, #2]
 8002674:	b92a      	cbnz	r2, 8002682 <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 8002676:	064a      	lsls	r2, r1, #25
 8002678:	d003      	beq.n	8002682 <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800267a:	88db      	ldrh	r3, [r3, #6]
 800267c:	b90b      	cbnz	r3, 8002682 <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 800267e:	f000 fc33 	bl	8002ee8 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8002682:	4620      	mov	r0, r4
 8002684:	f000 f8c1 	bl	800280a <USBD_CtlSendStatus>
              break;
 8002688:	e7f1      	b.n	800266e <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 800268a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800268e:	2a02      	cmp	r2, #2
 8002690:	d009      	beq.n	80026a6 <USBD_StdEPReq+0x7c>
 8002692:	2a03      	cmp	r2, #3
 8002694:	d1e2      	bne.n	800265c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002696:	885b      	ldrh	r3, [r3, #2]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1e8      	bne.n	800266e <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 800269c:	064d      	lsls	r5, r1, #25
 800269e:	d0f0      	beq.n	8002682 <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80026a0:	f000 fc30 	bl	8002f04 <USBD_LL_ClearStallEP>
 80026a4:	e7ed      	b.n	8002682 <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80026a6:	064b      	lsls	r3, r1, #25
 80026a8:	d016      	beq.n	80026d8 <USBD_StdEPReq+0xae>
                USBD_LL_StallEP(pdev, ep_addr);
 80026aa:	f000 fc1d 	bl	8002ee8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80026ae:	2180      	movs	r1, #128	; 0x80
 80026b0:	4620      	mov	r0, r4
 80026b2:	f000 fc19 	bl	8002ee8 <USBD_LL_StallEP>
 80026b6:	e7da      	b.n	800266e <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 80026b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d00d      	beq.n	80026dc <USBD_StdEPReq+0xb2>
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d1cb      	bne.n	800265c <USBD_StdEPReq+0x32>
 80026c4:	2314      	movs	r3, #20
              if ((ep_addr & 0x80U) == 0x80U)
 80026c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80026ca:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80026ce:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80026d2:	d014      	beq.n	80026fe <USBD_StdEPReq+0xd4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80026d4:	6992      	ldr	r2, [r2, #24]
 80026d6:	b9ea      	cbnz	r2, 8002714 <USBD_StdEPReq+0xea>
                USBD_CtlError(pdev, req);
 80026d8:	4620      	mov	r0, r4
 80026da:	e7bf      	b.n	800265c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80026dc:	0649      	lsls	r1, r1, #25
 80026de:	d1fb      	bne.n	80026d8 <USBD_StdEPReq+0xae>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80026e0:	0613      	lsls	r3, r2, #24
              pep->status = 0x0000U;
 80026e2:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80026e6:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80026ea:	bf4c      	ite	mi
 80026ec:	f100 0114 	addmi.w	r1, r0, #20
 80026f0:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 80026f4:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80026f6:	4620      	mov	r0, r4
 80026f8:	f000 f85b 	bl	80027b2 <USBD_CtlSendData>
              break;
 80026fc:	e7b7      	b.n	800266e <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80026fe:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8002702:	2a00      	cmp	r2, #0
 8002704:	d0e8      	beq.n	80026d8 <USBD_StdEPReq+0xae>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8002706:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800270a:	fb03 0505 	mla	r5, r3, r5, r0
 800270e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8002712:	e004      	b.n	800271e <USBD_StdEPReq+0xf4>
 8002714:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8002718:	fb05 3503 	mla	r5, r5, r3, r3
 800271c:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800271e:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8002722:	d103      	bne.n	800272c <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 8002724:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002726:	2202      	movs	r2, #2
 8002728:	4629      	mov	r1, r5
 800272a:	e7e4      	b.n	80026f6 <USBD_StdEPReq+0xcc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800272c:	4620      	mov	r0, r4
 800272e:	f000 fbf7 	bl	8002f20 <USBD_LL_IsStallEP>
 8002732:	b108      	cbz	r0, 8002738 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8002734:	2301      	movs	r3, #1
 8002736:	e7f5      	b.n	8002724 <USBD_StdEPReq+0xfa>
                pep->status = 0x0000U;
 8002738:	6028      	str	r0, [r5, #0]
 800273a:	e7f4      	b.n	8002726 <USBD_StdEPReq+0xfc>

0800273c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800273c:	780b      	ldrb	r3, [r1, #0]
 800273e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8002740:	784b      	ldrb	r3, [r1, #1]
 8002742:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8002744:	78ca      	ldrb	r2, [r1, #3]
 8002746:	788b      	ldrb	r3, [r1, #2]
 8002748:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800274c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800274e:	794a      	ldrb	r2, [r1, #5]
 8002750:	790b      	ldrb	r3, [r1, #4]
 8002752:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002756:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8002758:	79ca      	ldrb	r2, [r1, #7]
 800275a:	798b      	ldrb	r3, [r1, #6]
 800275c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002760:	80c3      	strh	r3, [r0, #6]
 8002762:	4770      	bx	lr

08002764 <USBD_CtlError>:
{
 8002764:	b510      	push	{r4, lr}
 8002766:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8002768:	2180      	movs	r1, #128	; 0x80
 800276a:	f000 fbbd 	bl	8002ee8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800276e:	4620      	mov	r0, r4
}
 8002770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8002774:	2100      	movs	r1, #0
 8002776:	f000 bbb7 	b.w	8002ee8 <USBD_LL_StallEP>

0800277a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800277a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800277c:	b188      	cbz	r0, 80027a2 <USBD_GetString+0x28>
 800277e:	4605      	mov	r5, r0
 8002780:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8002782:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2c00      	cmp	r4, #0
 800278a:	d1f9      	bne.n	8002780 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800278c:	3301      	adds	r3, #1
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8002792:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8002794:	2303      	movs	r3, #3
 8002796:	704b      	strb	r3, [r1, #1]
 8002798:	2302      	movs	r3, #2
 800279a:	3801      	subs	r0, #1
    while (*desc != '\0')
 800279c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80027a0:	b905      	cbnz	r5, 80027a4 <USBD_GetString+0x2a>
 80027a2:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	54cd      	strb	r5, [r1, r3]
 80027a8:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80027aa:	3302      	adds	r3, #2
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	548c      	strb	r4, [r1, r2]
 80027b0:	e7f4      	b.n	800279c <USBD_GetString+0x22>

080027b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80027b2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80027b4:	2202      	movs	r2, #2
{
 80027b6:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80027b8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80027bc:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80027be:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80027c0:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80027c2:	2100      	movs	r1, #0
 80027c4:	f000 fbca 	bl	8002f5c <USBD_LL_Transmit>

  return USBD_OK;
}
 80027c8:	2000      	movs	r0, #0
 80027ca:	bd10      	pop	{r4, pc}

080027cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80027cc:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80027ce:	4613      	mov	r3, r2
 80027d0:	460a      	mov	r2, r1
 80027d2:	2100      	movs	r1, #0
 80027d4:	f000 fbc2 	bl	8002f5c <USBD_LL_Transmit>

  return USBD_OK;
}
 80027d8:	2000      	movs	r0, #0
 80027da:	bd08      	pop	{r3, pc}

080027dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80027dc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80027de:	2203      	movs	r2, #3
{
 80027e0:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80027e2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80027e6:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80027ea:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80027ec:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80027f0:	2100      	movs	r1, #0
 80027f2:	f000 fbc1 	bl	8002f78 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80027f6:	2000      	movs	r0, #0
 80027f8:	bd10      	pop	{r4, pc}

080027fa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80027fa:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80027fc:	4613      	mov	r3, r2
 80027fe:	460a      	mov	r2, r1
 8002800:	2100      	movs	r1, #0
 8002802:	f000 fbb9 	bl	8002f78 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002806:	2000      	movs	r0, #0
 8002808:	bd08      	pop	{r3, pc}

0800280a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800280a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800280c:	2304      	movs	r3, #4
 800280e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8002812:	2300      	movs	r3, #0
 8002814:	461a      	mov	r2, r3
 8002816:	4619      	mov	r1, r3
 8002818:	f000 fba0 	bl	8002f5c <USBD_LL_Transmit>

  return USBD_OK;
}
 800281c:	2000      	movs	r0, #0
 800281e:	bd08      	pop	{r3, pc}

08002820 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8002820:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8002822:	2305      	movs	r3, #5
 8002824:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002828:	2300      	movs	r3, #0
 800282a:	461a      	mov	r2, r3
 800282c:	4619      	mov	r1, r3
 800282e:	f000 fba3 	bl	8002f78 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002832:	2000      	movs	r0, #0
 8002834:	bd08      	pop	{r3, pc}

08002836 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002836:	2228      	movs	r2, #40	; 0x28
{
 8002838:	b530      	push	{r4, r5, lr}
 800283a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800283c:	eb0d 0002 	add.w	r0, sp, r2
 8002840:	2100      	movs	r1, #0
 8002842:	f000 fc73 	bl	800312c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002846:	2214      	movs	r2, #20
 8002848:	2100      	movs	r1, #0
 800284a:	eb0d 0002 	add.w	r0, sp, r2
 800284e:	f000 fc6d 	bl	800312c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002852:	2100      	movs	r1, #0
 8002854:	2210      	movs	r2, #16
 8002856:	a801      	add	r0, sp, #4
 8002858:	f000 fc68 	bl	800312c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800285c:	2309      	movs	r3, #9
 800285e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002864:	2201      	movs	r2, #1
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002866:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002868:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800286a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800286c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002870:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002872:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002874:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002876:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002878:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800287a:	f7fe fb1d 	bl	8000eb8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800287e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002880:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002882:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002884:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002888:	4629      	mov	r1, r5
 800288a:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800288c:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800288e:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002890:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002892:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002894:	f7fe fcea 	bl	800126c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002898:	2312      	movs	r3, #18
 800289a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800289c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028a0:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80028a2:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80028a4:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028a6:	f7fe fd9f 	bl	80013e8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80028aa:	b015      	add	sp, #84	; 0x54
 80028ac:	bd30      	pop	{r4, r5, pc}
	...

080028b0 <main>:
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
  HAL_Init();
 80028b4:	f7fd fc6e 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80028b8:	f7ff ffbd 	bl	8002836 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	2210      	movs	r2, #16
 80028be:	2100      	movs	r1, #0
 80028c0:	eb0d 0002 	add.w	r0, sp, r2
 80028c4:	f000 fc32 	bl	800312c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c8:	4b62      	ldr	r3, [pc, #392]	; (8002a54 <main+0x1a4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 80028ca:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028cc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 80028ce:	4862      	ldr	r0, [pc, #392]	; (8002a58 <main+0x1a8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d0:	f042 0210 	orr.w	r2, r2, #16
 80028d4:	619a      	str	r2, [r3, #24]
 80028d6:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : LED_Pin MODE_0_Pin MODE_1_Pin */
  GPIO_InitStruct.Pin = LED_Pin|MODE_0_Pin|MODE_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d8:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028da:	f002 0210 	and.w	r2, r2, #16
 80028de:	9200      	str	r2, [sp, #0]
 80028e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e2:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : CH1_R_Pin CH1_G_Pin CH1_B_Pin CH2_R_Pin 
                           CH2_G_Pin CH3_R_Pin CH3_G_Pin CH3_B_Pin */
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
                          |CH2_G_Pin|CH3_R_Pin|CH3_G_Pin|CH3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e6:	f042 0220 	orr.w	r2, r2, #32
 80028ea:	619a      	str	r2, [r3, #24]
 80028ec:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : BUTTON_Pin ADDR_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|ADDR_0_Pin;
 80028ee:	f248 0720 	movw	r7, #32800	; 0x8020
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f2:	f002 0220 	and.w	r2, r2, #32
 80028f6:	9201      	str	r2, [sp, #4]
 80028f8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : CH2_B_Pin CH2_W_Pin */
  GPIO_InitStruct.Pin = CH2_B_Pin|CH2_W_Pin;
 80028fc:	2603      	movs	r6, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	f042 0204 	orr.w	r2, r2, #4
 8002902:	619a      	str	r2, [r3, #24]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	f002 0204 	and.w	r2, r2, #4
 800290a:	9202      	str	r2, [sp, #8]
 800290c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	f042 0208 	orr.w	r2, r2, #8
 8002914:	619a      	str	r2, [r3, #24]
 8002916:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8002918:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	9303      	str	r3, [sp, #12]
 8002920:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8002922:	f7fd fecd 	bl	80006c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin|MODE_0_Pin|MODE_1_Pin;
 8002926:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800292a:	a904      	add	r1, sp, #16
 800292c:	484b      	ldr	r0, [pc, #300]	; (8002a5c <main+0x1ac>)
  GPIO_InitStruct.Pin = LED_Pin|MODE_0_Pin|MODE_1_Pin;
 800292e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002930:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002934:	f7fd fde2 	bl	80004fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
 8002938:	f240 73ce 	movw	r3, #1998	; 0x7ce
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293c:	a904      	add	r1, sp, #16
 800293e:	4848      	ldr	r0, [pc, #288]	; (8002a60 <main+0x1b0>)
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
 8002940:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002946:	f7fd fdd9 	bl	80004fc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294a:	a904      	add	r1, sp, #16
 800294c:	4844      	ldr	r0, [pc, #272]	; (8002a60 <main+0x1b0>)
  GPIO_InitStruct.Pin = BUTTON_Pin|ADDR_0_Pin;
 800294e:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002950:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002954:	f7fd fdd2 	bl	80004fc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002958:	a904      	add	r1, sp, #16
 800295a:	483f      	ldr	r0, [pc, #252]	; (8002a58 <main+0x1a8>)
  GPIO_InitStruct.Pin = CH2_B_Pin|CH2_W_Pin;
 800295c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002960:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002962:	f7fd fdcb 	bl	80004fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR_5_Pin ADDR_6_Pin ADDR_7_Pin ADDR_1_Pin 
                           ADDR_2_Pin ADDR_3_Pin ADDR_4_Pin */
  GPIO_InitStruct.Pin = ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_1_Pin 
 8002966:	f247 3318 	movw	r3, #29464	; 0x7318
                          |ADDR_2_Pin|ADDR_3_Pin|ADDR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296a:	a904      	add	r1, sp, #16
 800296c:	483a      	ldr	r0, [pc, #232]	; (8002a58 <main+0x1a8>)
  GPIO_InitStruct.Pin = ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_1_Pin 
 800296e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002970:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002974:	f7fd fdc2 	bl	80004fc <HAL_GPIO_Init>

  /*Configure GPIO pins : WS8212_CH2_Pin WS8212_CH1_Pin */
  GPIO_InitStruct.Pin = WS8212_CH2_Pin|WS8212_CH1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002978:	a904      	add	r1, sp, #16
 800297a:	4837      	ldr	r0, [pc, #220]	; (8002a58 <main+0x1a8>)
  GPIO_InitStruct.Pin = WS8212_CH2_Pin|WS8212_CH1_Pin;
 800297c:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002980:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002982:	f7fd fdbb 	bl	80004fc <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DIR_Pin */
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002986:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 8002988:	2380      	movs	r3, #128	; 0x80
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800298a:	f44f 2760 	mov.w	r7, #917504	; 0xe0000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 800298e:	a904      	add	r1, sp, #16
 8002990:	4831      	ldr	r0, [pc, #196]	; (8002a58 <main+0x1a8>)
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 8002992:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002994:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 800299a:	f7fd fdaf 	bl	80004fc <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 800299e:	4a31      	ldr	r2, [pc, #196]	; (8002a64 <main+0x1b4>)
  hadc1.Instance = ADC1;
 80029a0:	4d31      	ldr	r5, [pc, #196]	; (8002a68 <main+0x1b8>)
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 80029a2:	6853      	ldr	r3, [r2, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029a4:	4628      	mov	r0, r5
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 80029a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80029aa:	4333      	orrs	r3, r6
 80029ac:	6053      	str	r3, [r2, #4]
  hadc1.Instance = ADC1;
 80029ae:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <main+0x1bc>)
  hadc1.Init.NbrOfConversion = 1;
 80029b0:	612e      	str	r6, [r5, #16]
  hadc1.Instance = ADC1;
 80029b2:	602b      	str	r3, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80029b4:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029b6:	732c      	strb	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029b8:	752c      	strb	r4, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029ba:	61ef      	str	r7, [r5, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029bc:	606c      	str	r4, [r5, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80029be:	9404      	str	r4, [sp, #16]
 80029c0:	9405      	str	r4, [sp, #20]
 80029c2:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029c4:	f7fd fcb0 	bl	8000328 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029c8:	a904      	add	r1, sp, #16
 80029ca:	4628      	mov	r0, r5
  hadc2.Instance = ADC2;
 80029cc:	4d28      	ldr	r5, [pc, #160]	; (8002a70 <main+0x1c0>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029ce:	9605      	str	r6, [sp, #20]
  sConfig.Channel = ADC_CHANNEL_0;
 80029d0:	9404      	str	r4, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80029d2:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029d4:	f7fd fc02 	bl	80001dc <HAL_ADC_ConfigChannel>
  hadc2.Instance = ADC2;
 80029d8:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <main+0x1c4>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80029da:	4628      	mov	r0, r5
  hadc2.Instance = ADC2;
 80029dc:	602b      	str	r3, [r5, #0]
  hadc2.Init.NbrOfConversion = 1;
 80029de:	612e      	str	r6, [r5, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80029e0:	60ac      	str	r4, [r5, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80029e2:	732c      	strb	r4, [r5, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80029e4:	752c      	strb	r4, [r5, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029e6:	61ef      	str	r7, [r5, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029e8:	606c      	str	r4, [r5, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80029ea:	9404      	str	r4, [sp, #16]
 80029ec:	9405      	str	r4, [sp, #20]
 80029ee:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80029f0:	f7fd fc9a 	bl	8000328 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 80029f4:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80029f6:	a904      	add	r1, sp, #16
 80029f8:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_4;
 80029fa:	9304      	str	r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029fc:	9605      	str	r6, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80029fe:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a00:	f7fd fbec 	bl	80001dc <HAL_ADC_ConfigChannel>
  hiwdg.Instance = IWDG;
 8002a04:	481c      	ldr	r0, [pc, #112]	; (8002a78 <main+0x1c8>)
 8002a06:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <main+0x1cc>)
  huart1.Init.BaudRate = 115200;
 8002a08:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8002a0c:	e880 0018 	stmia.w	r0, {r3, r4}
  hiwdg.Init.Reload = 4095;
 8002a10:	f640 73ff 	movw	r3, #4095	; 0xfff
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a14:	250c      	movs	r5, #12
  hiwdg.Init.Reload = 4095;
 8002a16:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002a18:	f7fd fe57 	bl	80006ca <HAL_IWDG_Init>
  huart1.Instance = USART1;
 8002a1c:	4818      	ldr	r0, [pc, #96]	; (8002a80 <main+0x1d0>)
  huart1.Init.BaudRate = 115200;
 8002a1e:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <main+0x1d4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a20:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8002a22:	e880 0048 	stmia.w	r0, {r3, r6}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a26:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a28:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a2a:	6145      	str	r5, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a2c:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a2e:	61c4      	str	r4, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8002a30:	f7fe fdba 	bl	80015a8 <HAL_HalfDuplex_Init>
  huart3.Instance = USART3;
 8002a34:	4814      	ldr	r0, [pc, #80]	; (8002a88 <main+0x1d8>)
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <main+0x1dc>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a38:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8002a3a:	e880 0048 	stmia.w	r0, {r3, r6}
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a3e:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a40:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a42:	6145      	str	r5, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a44:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a46:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a48:	f7fe fd80 	bl	800154c <HAL_UART_Init>
  MX_USB_DEVICE_Init();
 8002a4c:	f000 f934 	bl	8002cb8 <MX_USB_DEVICE_Init>
 8002a50:	e7fe      	b.n	8002a50 <main+0x1a0>
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40010c00 	.word	0x40010c00
 8002a5c:	40011000 	.word	0x40011000
 8002a60:	40010800 	.word	0x40010800
 8002a64:	40010000 	.word	0x40010000
 8002a68:	2000043c 	.word	0x2000043c
 8002a6c:	40012400 	.word	0x40012400
 8002a70:	20000400 	.word	0x20000400
 8002a74:	40012800 	.word	0x40012800
 8002a78:	20000430 	.word	0x20000430
 8002a7c:	40003000 	.word	0x40003000
 8002a80:	2000046c 	.word	0x2000046c
 8002a84:	40013800 	.word	0x40013800
 8002a88:	200003c0 	.word	0x200003c0
 8002a8c:	40004800 	.word	0x40004800

08002a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_MspInit+0x3c>)
{
 8002a96:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	619a      	str	r2, [r3, #24]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	f002 0201 	and.w	r2, r2, #1
 8002aa6:	9200      	str	r2, [sp, #0]
 8002aa8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ab0:	61da      	str	r2, [r3, #28]
 8002ab2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ab4:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002abe:	6853      	ldr	r3, [r2, #4]
 8002ac0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ac4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ac8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aca:	b002      	add	sp, #8
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40010000 	.word	0x40010000

08002ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ad8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ada:	2410      	movs	r4, #16
{
 8002adc:	4605      	mov	r5, r0
 8002ade:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	4622      	mov	r2, r4
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	eb0d 0004 	add.w	r0, sp, r4
 8002ae8:	f000 fb20 	bl	800312c <memset>
  if(hadc->Instance==ADC1)
 8002aec:	682b      	ldr	r3, [r5, #0]
 8002aee:	4a1e      	ldr	r2, [pc, #120]	; (8002b68 <HAL_ADC_MspInit+0x90>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d11d      	bne.n	8002b30 <HAL_ADC_MspInit+0x58>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002af4:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_ADC_MspInit+0x94>)
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = ANALOG_0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(ANALOG_0_GPIO_Port, &GPIO_InitStruct);
 8002af6:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b00:	619a      	str	r2, [r3, #24]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002b08:	9200      	str	r2, [sp, #0]
 8002b0a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	f042 0204 	orr.w	r2, r2, #4
 8002b12:	619a      	str	r2, [r3, #24]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ANALOG_0_Pin;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b22:	2303      	movs	r3, #3
 8002b24:	9305      	str	r3, [sp, #20]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN4 
    */
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8002b26:	4812      	ldr	r0, [pc, #72]	; (8002b70 <HAL_ADC_MspInit+0x98>)
 8002b28:	f7fd fce8 	bl	80004fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002b2c:	b009      	add	sp, #36	; 0x24
 8002b2e:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 8002b30:	4a10      	ldr	r2, [pc, #64]	; (8002b74 <HAL_ADC_MspInit+0x9c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d1fa      	bne.n	8002b2c <HAL_ADC_MspInit+0x54>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <HAL_ADC_MspInit+0x94>)
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8002b38:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b40:	619a      	str	r2, [r3, #24]
 8002b42:	699a      	ldr	r2, [r3, #24]
 8002b44:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002b48:	9202      	str	r2, [sp, #8]
 8002b4a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	f042 0204 	orr.w	r2, r2, #4
 8002b52:	619a      	str	r2, [r3, #24]
 8002b54:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8002b56:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	9303      	str	r3, [sp, #12]
 8002b5e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b60:	2303      	movs	r3, #3
 8002b62:	9305      	str	r3, [sp, #20]
 8002b64:	e7df      	b.n	8002b26 <HAL_ADC_MspInit+0x4e>
 8002b66:	bf00      	nop
 8002b68:	40012400 	.word	0x40012400
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40010800 	.word	0x40010800
 8002b74:	40012800 	.word	0x40012800

08002b78 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	2210      	movs	r2, #16
{
 8002b7a:	b510      	push	{r4, lr}
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	eb0d 0002 	add.w	r0, sp, r2
 8002b84:	2100      	movs	r1, #0
 8002b86:	f000 fad1 	bl	800312c <memset>
  if(huart->Instance==USART1)
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	4a2a      	ldr	r2, [pc, #168]	; (8002c38 <HAL_UART_MspInit+0xc0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d125      	bne.n	8002bde <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b92:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <HAL_UART_MspInit+0xc4>)
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = RS485_RXTX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8002b94:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b96:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8002b98:	4829      	ldr	r0, [pc, #164]	; (8002c40 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b9e:	619a      	str	r2, [r3, #24]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002ba6:	9200      	str	r2, [sp, #0]
 8002ba8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002baa:	699a      	ldr	r2, [r3, #24]
 8002bac:	f042 0208 	orr.w	r2, r2, #8
 8002bb0:	619a      	str	r2, [r3, #24]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = RS485_RXTX_Pin;
 8002bbc:	2340      	movs	r3, #64	; 0x40
 8002bbe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bc0:	2312      	movs	r3, #18
 8002bc2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8002bc8:	f7fd fc98 	bl	80004fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <HAL_UART_MspInit+0xcc>)
 8002bce:	6853      	ldr	r3, [r2, #4]
 8002bd0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bda:	b008      	add	sp, #32
 8002bdc:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8002bde:	4a1a      	ldr	r2, [pc, #104]	; (8002c48 <HAL_UART_MspInit+0xd0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d1fa      	bne.n	8002bda <HAL_UART_MspInit+0x62>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002be4:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <HAL_UART_MspInit+0xc4>)
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 8002be6:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8002be8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 8002bea:	4815      	ldr	r0, [pc, #84]	; (8002c40 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002bf0:	61da      	str	r2, [r3, #28]
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002bf8:	9202      	str	r2, [sp, #8]
 8002bfa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	f042 0208 	orr.w	r2, r2, #8
 8002c02:	619a      	str	r2, [r3, #24]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	9303      	str	r3, [sp, #12]
 8002c0c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = RS232_TX_Pin;
 8002c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c12:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 8002c1c:	f7fd fc6e 	bl	80004fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS232_RX_Pin;
 8002c20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c24:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c26:	2300      	movs	r3, #0
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 8002c28:	a904      	add	r1, sp, #16
 8002c2a:	4805      	ldr	r0, [pc, #20]	; (8002c40 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c2c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 8002c30:	f7fd fc64 	bl	80004fc <HAL_GPIO_Init>
}
 8002c34:	e7d1      	b.n	8002bda <HAL_UART_MspInit+0x62>
 8002c36:	bf00      	nop
 8002c38:	40013800 	.word	0x40013800
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40010c00 	.word	0x40010c00
 8002c44:	40010000 	.word	0x40010000
 8002c48:	40004800 	.word	0x40004800

08002c4c <NMI_Handler>:
 8002c4c:	4770      	bx	lr

08002c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c4e:	e7fe      	b.n	8002c4e <HardFault_Handler>

08002c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c50:	e7fe      	b.n	8002c50 <MemManage_Handler>

08002c52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c52:	e7fe      	b.n	8002c52 <BusFault_Handler>

08002c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c54:	e7fe      	b.n	8002c54 <UsageFault_Handler>

08002c56 <SVC_Handler>:
 8002c56:	4770      	bx	lr

08002c58 <DebugMon_Handler>:
 8002c58:	4770      	bx	lr

08002c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c5a:	4770      	bx	lr

08002c5c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c5c:	f7fd baac 	b.w	80001b8 <HAL_IncTick>

08002c60 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c60:	4801      	ldr	r0, [pc, #4]	; (8002c68 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002c62:	f7fd be85 	b.w	8000970 <HAL_PCD_IRQHandler>
 8002c66:	bf00      	nop
 8002c68:	20000f40 	.word	0x20000f40

08002c6c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <SystemInit+0x40>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	f042 0201 	orr.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <SystemInit+0x44>)
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002c84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c88:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c90:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002c98:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002c9a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002c9e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002ca0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <SystemInit+0x48>)
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	f8ff0000 	.word	0xf8ff0000
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002cb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	490e      	ldr	r1, [pc, #56]	; (8002cf8 <MX_USB_DEVICE_Init+0x40>)
 8002cbe:	480f      	ldr	r0, [pc, #60]	; (8002cfc <MX_USB_DEVICE_Init+0x44>)
 8002cc0:	f7ff fa21 	bl	8002106 <USBD_Init>
 8002cc4:	b108      	cbz	r0, 8002cca <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8002cc6:	f7ff fee3 	bl	8002a90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8002cca:	490d      	ldr	r1, [pc, #52]	; (8002d00 <MX_USB_DEVICE_Init+0x48>)
 8002ccc:	480b      	ldr	r0, [pc, #44]	; (8002cfc <MX_USB_DEVICE_Init+0x44>)
 8002cce:	f7ff fa2f 	bl	8002130 <USBD_RegisterClass>
 8002cd2:	b108      	cbz	r0, 8002cd8 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8002cd4:	f7ff fedc 	bl	8002a90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8002cd8:	490a      	ldr	r1, [pc, #40]	; (8002d04 <MX_USB_DEVICE_Init+0x4c>)
 8002cda:	4808      	ldr	r0, [pc, #32]	; (8002cfc <MX_USB_DEVICE_Init+0x44>)
 8002cdc:	f7ff f9eb 	bl	80020b6 <USBD_CDC_RegisterInterface>
 8002ce0:	b108      	cbz	r0, 8002ce6 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8002ce2:	f7ff fed5 	bl	8002a90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8002ce6:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_USB_DEVICE_Init+0x44>)
 8002ce8:	f7ff fa29 	bl	800213e <USBD_Start>
 8002cec:	b118      	cbz	r0, 8002cf6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002cee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002cf2:	f7ff becd 	b.w	8002a90 <Error_Handler>
 8002cf6:	bd08      	pop	{r3, pc}
 8002cf8:	2000012c 	.word	0x2000012c
 8002cfc:	200004ac 	.word	0x200004ac
 8002d00:	20000008 	.word	0x20000008
 8002d04:	2000011c 	.word	0x2000011c

08002d08 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8002d08:	2000      	movs	r0, #0
 8002d0a:	4770      	bx	lr

08002d0c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	4770      	bx	lr

08002d10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8002d10:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002d12:	4c05      	ldr	r4, [pc, #20]	; (8002d28 <CDC_Receive_FS+0x18>)
 8002d14:	4601      	mov	r1, r0
 8002d16:	4620      	mov	r0, r4
 8002d18:	f7ff f9dc 	bl	80020d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f7ff f9df 	bl	80020e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8002d22:	2000      	movs	r0, #0
 8002d24:	bd10      	pop	{r4, pc}
 8002d26:	bf00      	nop
 8002d28:	200004ac 	.word	0x200004ac

08002d2c <CDC_Init_FS>:
{
 8002d2c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002d2e:	4c06      	ldr	r4, [pc, #24]	; (8002d48 <CDC_Init_FS+0x1c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	4906      	ldr	r1, [pc, #24]	; (8002d4c <CDC_Init_FS+0x20>)
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7ff f9c5 	bl	80020c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8002d3a:	4905      	ldr	r1, [pc, #20]	; (8002d50 <CDC_Init_FS+0x24>)
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f7ff f9c9 	bl	80020d4 <USBD_CDC_SetRxBuffer>
}
 8002d42:	2000      	movs	r0, #0
 8002d44:	bd10      	pop	{r4, pc}
 8002d46:	bf00      	nop
 8002d48:	200004ac 	.word	0x200004ac
 8002d4c:	20000b58 	.word	0x20000b58
 8002d50:	20000770 	.word	0x20000770

08002d54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002d54:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8002d56:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <HAL_PCD_MspInit+0x38>)
 8002d58:	6802      	ldr	r2, [r0, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d112      	bne.n	8002d84 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002d5e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002d62:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d64:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8002d66:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d6a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d6c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8002d6e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d70:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8002d72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d7a:	f7fd fb67 	bl	800044c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002d7e:	2014      	movs	r0, #20
 8002d80:	f7fd fb98 	bl	80004b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002d84:	b003      	add	sp, #12
 8002d86:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d8a:	bf00      	nop
 8002d8c:	40005c00 	.word	0x40005c00

08002d90 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002d90:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8002d94:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002d98:	f7ff b9e8 	b.w	800216c <USBD_LL_SetupStage>

08002d9c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002d9c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002da0:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002da4:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002da8:	f7ff ba0d 	b.w	80021c6 <USBD_LL_DataOutStage>

08002dac <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002dac:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002db0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002db2:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002db6:	f7ff ba40 	b.w	800223a <USBD_LL_DataInStage>

08002dba <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002dba:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002dbe:	f7ff bad4 	b.w	800236a <USBD_LL_SOF>

08002dc2 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002dc2:	6883      	ldr	r3, [r0, #8]
{ 
 8002dc4:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002dc6:	2b02      	cmp	r3, #2
{ 
 8002dc8:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002dca:	d001      	beq.n	8002dd0 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8002dcc:	f7ff fe60 	bl	8002a90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002dd0:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	f7ff fab2 	bl	800233e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002dda:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8002dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002de2:	f7ff ba85 	b.w	80022f0 <USBD_LL_Reset>
	...

08002de8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002de8:	b510      	push	{r4, lr}
 8002dea:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002dec:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002df0:	f7ff faa8 	bl	8002344 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002df4:	69a3      	ldr	r3, [r4, #24]
 8002df6:	b123      	cbz	r3, 8002e02 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002df8:	4a02      	ldr	r2, [pc, #8]	; (8002e04 <HAL_PCD_SuspendCallback+0x1c>)
 8002dfa:	6913      	ldr	r3, [r2, #16]
 8002dfc:	f043 0306 	orr.w	r3, r3, #6
 8002e00:	6113      	str	r3, [r2, #16]
 8002e02:	bd10      	pop	{r4, pc}
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002e08:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002e0c:	f7ff baa3 	b.w	8002356 <USBD_LL_Resume>

08002e10 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002e10:	2302      	movs	r3, #2
 8002e12:	2208      	movs	r2, #8
{
 8002e14:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002e16:	491c      	ldr	r1, [pc, #112]	; (8002e88 <USBD_LL_Init+0x78>)
{
 8002e18:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8002e1a:	481c      	ldr	r0, [pc, #112]	; (8002e8c <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002e1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002e20:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8002e22:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.pData = pdev;
 8002e26:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002e2a:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002e2c:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002e2e:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002e30:	f7fd fc6c 	bl	800070c <HAL_PCD_Init>
 8002e34:	b108      	cbz	r0, 8002e3a <USBD_LL_Init+0x2a>
  {
    Error_Handler( );
 8002e36:	f7ff fe2b 	bl	8002a90 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2318      	movs	r3, #24
 8002e3e:	4611      	mov	r1, r2
 8002e40:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8002e44:	f7fe f820 	bl	8000e88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002e48:	2358      	movs	r3, #88	; 0x58
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2180      	movs	r1, #128	; 0x80
 8002e4e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8002e52:	f7fe f819 	bl	8000e88 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8002e56:	23c0      	movs	r3, #192	; 0xc0
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2181      	movs	r1, #129	; 0x81
 8002e5c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8002e60:	f7fe f812 	bl	8000e88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8002e64:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8002e70:	f7fe f80a 	bl	8000e88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8002e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2182      	movs	r1, #130	; 0x82
 8002e7c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8002e80:	f7fe f802 	bl	8000e88 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8002e84:	2000      	movs	r0, #0
 8002e86:	bd10      	pop	{r4, pc}
 8002e88:	40005c00 	.word	0x40005c00
 8002e8c:	20000f40 	.word	0x20000f40

08002e90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002e90:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002e92:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002e96:	f7fd fcae 	bl	80007f6 <HAL_PCD_Start>
 8002e9a:	2803      	cmp	r0, #3
 8002e9c:	bf9a      	itte	ls
 8002e9e:	4b02      	ldrls	r3, [pc, #8]	; (8002ea8 <USBD_LL_Start+0x18>)
 8002ea0:	5c18      	ldrbls	r0, [r3, r0]
 8002ea2:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8002ea4:	bd08      	pop	{r3, pc}
 8002ea6:	bf00      	nop
 8002ea8:	0800317c 	.word	0x0800317c

08002eac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002eac:	b510      	push	{r4, lr}
 8002eae:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002eb0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	f7fd fcc8 	bl	800084c <HAL_PCD_EP_Open>
 8002ebc:	2803      	cmp	r0, #3
 8002ebe:	bf9a      	itte	ls
 8002ec0:	4b01      	ldrls	r3, [pc, #4]	; (8002ec8 <USBD_LL_OpenEP+0x1c>)
 8002ec2:	5c18      	ldrbls	r0, [r3, r0]
 8002ec4:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8002ec6:	bd10      	pop	{r4, pc}
 8002ec8:	0800317c 	.word	0x0800317c

08002ecc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002ecc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002ece:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002ed2:	f7fd fcee 	bl	80008b2 <HAL_PCD_EP_Close>
 8002ed6:	2803      	cmp	r0, #3
 8002ed8:	bf9a      	itte	ls
 8002eda:	4b02      	ldrls	r3, [pc, #8]	; (8002ee4 <USBD_LL_CloseEP+0x18>)
 8002edc:	5c18      	ldrbls	r0, [r3, r0]
 8002ede:	2002      	movhi	r0, #2
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8002ee0:	bd08      	pop	{r3, pc}
 8002ee2:	bf00      	nop
 8002ee4:	0800317c 	.word	0x0800317c

08002ee8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002ee8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002eea:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002eee:	f7fd ff65 	bl	8000dbc <HAL_PCD_EP_SetStall>
 8002ef2:	2803      	cmp	r0, #3
 8002ef4:	bf9a      	itte	ls
 8002ef6:	4b02      	ldrls	r3, [pc, #8]	; (8002f00 <USBD_LL_StallEP+0x18>)
 8002ef8:	5c18      	ldrbls	r0, [r3, r0]
 8002efa:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8002efc:	bd08      	pop	{r3, pc}
 8002efe:	bf00      	nop
 8002f00:	0800317c 	.word	0x0800317c

08002f04 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002f04:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002f06:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002f0a:	f7fd ff8b 	bl	8000e24 <HAL_PCD_EP_ClrStall>
 8002f0e:	2803      	cmp	r0, #3
 8002f10:	bf9a      	itte	ls
 8002f12:	4b02      	ldrls	r3, [pc, #8]	; (8002f1c <USBD_LL_ClearStallEP+0x18>)
 8002f14:	5c18      	ldrbls	r0, [r3, r0]
 8002f16:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8002f18:	bd08      	pop	{r3, pc}
 8002f1a:	bf00      	nop
 8002f1c:	0800317c 	.word	0x0800317c

08002f20 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002f20:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002f22:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002f26:	bf45      	ittet	mi
 8002f28:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8002f2c:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002f30:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002f34:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002f38:	bf58      	it	pl
 8002f3a:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 8002f3e:	4770      	bx	lr

08002f40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002f40:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002f42:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002f46:	f7fd fc6d 	bl	8000824 <HAL_PCD_SetAddress>
 8002f4a:	2803      	cmp	r0, #3
 8002f4c:	bf9a      	itte	ls
 8002f4e:	4b02      	ldrls	r3, [pc, #8]	; (8002f58 <USBD_LL_SetUSBAddress+0x18>)
 8002f50:	5c18      	ldrbls	r0, [r3, r0]
 8002f52:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8002f54:	bd08      	pop	{r3, pc}
 8002f56:	bf00      	nop
 8002f58:	0800317c 	.word	0x0800317c

08002f5c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002f5c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002f5e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002f62:	f7fd fcee 	bl	8000942 <HAL_PCD_EP_Transmit>
 8002f66:	2803      	cmp	r0, #3
 8002f68:	bf9a      	itte	ls
 8002f6a:	4b02      	ldrls	r3, [pc, #8]	; (8002f74 <USBD_LL_Transmit+0x18>)
 8002f6c:	5c18      	ldrbls	r0, [r3, r0]
 8002f6e:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8002f70:	bd08      	pop	{r3, pc}
 8002f72:	bf00      	nop
 8002f74:	0800317c 	.word	0x0800317c

08002f78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002f78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002f7a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002f7e:	f7fd fcc1 	bl	8000904 <HAL_PCD_EP_Receive>
 8002f82:	2803      	cmp	r0, #3
 8002f84:	bf9a      	itte	ls
 8002f86:	4b02      	ldrls	r3, [pc, #8]	; (8002f90 <USBD_LL_PrepareReceive+0x18>)
 8002f88:	5c18      	ldrbls	r0, [r3, r0]
 8002f8a:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8002f8c:	bd08      	pop	{r3, pc}
 8002f8e:	bf00      	nop
 8002f90:	0800317c 	.word	0x0800317c

08002f94 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002f94:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002f98:	f7fd bccc 	b.w	8000934 <HAL_PCD_EP_GetRxCount>

08002f9c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002f9c:	4800      	ldr	r0, [pc, #0]	; (8002fa0 <USBD_static_malloc+0x4>)
 8002f9e:	4770      	bx	lr
 8002fa0:	2000019c 	.word	0x2000019c

08002fa4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002fa6:	4770      	bx	lr

08002fa8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8002fa8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002faa:	4801      	ldr	r0, [pc, #4]	; (8002fb0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002fac:	800b      	strh	r3, [r1, #0]
}
 8002fae:	4770      	bx	lr
 8002fb0:	20000148 	.word	0x20000148

08002fb4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8002fb4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002fb6:	4801      	ldr	r0, [pc, #4]	; (8002fbc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002fb8:	800b      	strh	r3, [r1, #0]
}
 8002fba:	4770      	bx	lr
 8002fbc:	2000015c 	.word	0x2000015c

08002fc0 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8002fc0:	2300      	movs	r3, #0
{
 8002fc2:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8002fc4:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 8002fc6:	b2dc      	uxtb	r4, r3
 8002fc8:	42a2      	cmp	r2, r4
 8002fca:	d800      	bhi.n	8002fce <IntToUnicode+0xe>
  }
}
 8002fcc:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8002fce:	0f04      	lsrs	r4, r0, #28
 8002fd0:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8002fd2:	bf94      	ite	ls
 8002fd4:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002fd6:	3437      	addhi	r4, #55	; 0x37
 8002fd8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8002fdc:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8002fe0:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8002fe2:	7065      	strb	r5, [r4, #1]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	e7ee      	b.n	8002fc6 <IntToUnicode+0x6>

08002fe8 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8002fe8:	231a      	movs	r3, #26
{
 8002fea:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8002fec:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8002fee:	4b09      	ldr	r3, [pc, #36]	; (8003014 <USBD_FS_SerialStrDescriptor+0x2c>)
 8002ff0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8002ff2:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8002ff4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8002ff6:	18c0      	adds	r0, r0, r3
 8002ff8:	d00a      	beq.n	8003010 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002ffa:	4b07      	ldr	r3, [pc, #28]	; (8003018 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002ffc:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002ffe:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003000:	4906      	ldr	r1, [pc, #24]	; (800301c <USBD_FS_SerialStrDescriptor+0x34>)
 8003002:	f7ff ffdd 	bl	8002fc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003006:	2204      	movs	r2, #4
 8003008:	4905      	ldr	r1, [pc, #20]	; (8003020 <USBD_FS_SerialStrDescriptor+0x38>)
 800300a:	4620      	mov	r0, r4
 800300c:	f7ff ffd8 	bl	8002fc0 <IntToUnicode>
}
 8003010:	4804      	ldr	r0, [pc, #16]	; (8003024 <USBD_FS_SerialStrDescriptor+0x3c>)
 8003012:	bd10      	pop	{r4, pc}
 8003014:	1ffff7e8 	.word	0x1ffff7e8
 8003018:	1ffff7ec 	.word	0x1ffff7ec
 800301c:	20000162 	.word	0x20000162
 8003020:	20000172 	.word	0x20000172
 8003024:	20000160 	.word	0x20000160

08003028 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003028:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800302a:	4c04      	ldr	r4, [pc, #16]	; (800303c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800302c:	460a      	mov	r2, r1
 800302e:	4804      	ldr	r0, [pc, #16]	; (8003040 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003030:	4621      	mov	r1, r4
 8003032:	f7ff fba2 	bl	800277a <USBD_GetString>
}
 8003036:	4620      	mov	r0, r4
 8003038:	bd10      	pop	{r4, pc}
 800303a:	bf00      	nop
 800303c:	200011ac 	.word	0x200011ac
 8003040:	08003199 	.word	0x08003199

08003044 <USBD_FS_ProductStrDescriptor>:
{
 8003044:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003046:	4c04      	ldr	r4, [pc, #16]	; (8003058 <USBD_FS_ProductStrDescriptor+0x14>)
 8003048:	460a      	mov	r2, r1
 800304a:	4804      	ldr	r0, [pc, #16]	; (800305c <USBD_FS_ProductStrDescriptor+0x18>)
 800304c:	4621      	mov	r1, r4
 800304e:	f7ff fb94 	bl	800277a <USBD_GetString>
}
 8003052:	4620      	mov	r0, r4
 8003054:	bd10      	pop	{r4, pc}
 8003056:	bf00      	nop
 8003058:	200011ac 	.word	0x200011ac
 800305c:	080031ac 	.word	0x080031ac

08003060 <USBD_FS_ConfigStrDescriptor>:
{
 8003060:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003062:	4c04      	ldr	r4, [pc, #16]	; (8003074 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003064:	460a      	mov	r2, r1
 8003066:	4804      	ldr	r0, [pc, #16]	; (8003078 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003068:	4621      	mov	r1, r4
 800306a:	f7ff fb86 	bl	800277a <USBD_GetString>
}
 800306e:	4620      	mov	r0, r4
 8003070:	bd10      	pop	{r4, pc}
 8003072:	bf00      	nop
 8003074:	200011ac 	.word	0x200011ac
 8003078:	08003180 	.word	0x08003180

0800307c <USBD_FS_InterfaceStrDescriptor>:
{
 800307c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800307e:	4c04      	ldr	r4, [pc, #16]	; (8003090 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003080:	460a      	mov	r2, r1
 8003082:	4804      	ldr	r0, [pc, #16]	; (8003094 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003084:	4621      	mov	r1, r4
 8003086:	f7ff fb78 	bl	800277a <USBD_GetString>
}
 800308a:	4620      	mov	r0, r4
 800308c:	bd10      	pop	{r4, pc}
 800308e:	bf00      	nop
 8003090:	200011ac 	.word	0x200011ac
 8003094:	0800318b 	.word	0x0800318b

08003098 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003098:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800309a:	e003      	b.n	80030a4 <LoopCopyDataInit>

0800309c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800309e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80030a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80030a2:	3104      	adds	r1, #4

080030a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80030a4:	480a      	ldr	r0, [pc, #40]	; (80030d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80030a6:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80030a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80030aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80030ac:	d3f6      	bcc.n	800309c <CopyDataInit>
  ldr r2, =_sbss
 80030ae:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80030b0:	e002      	b.n	80030b8 <LoopFillZerobss>

080030b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80030b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80030b4:	f842 3b04 	str.w	r3, [r2], #4

080030b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80030b8:	4b08      	ldr	r3, [pc, #32]	; (80030dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80030ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80030bc:	d3f9      	bcc.n	80030b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030be:	f7ff fdd5 	bl	8002c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030c2:	f000 f80f 	bl	80030e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030c6:	f7ff fbf3 	bl	80028b0 <main>
  bx lr
 80030ca:	4770      	bx	lr
  ldr r3, =_sidata
 80030cc:	080031c4 	.word	0x080031c4
  ldr r0, =_sdata
 80030d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80030d4:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 80030d8:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 80030dc:	200013ac 	.word	0x200013ac

080030e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030e0:	e7fe      	b.n	80030e0 <ADC1_2_IRQHandler>
	...

080030e4 <__libc_init_array>:
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	2500      	movs	r5, #0
 80030e8:	4e0c      	ldr	r6, [pc, #48]	; (800311c <__libc_init_array+0x38>)
 80030ea:	4c0d      	ldr	r4, [pc, #52]	; (8003120 <__libc_init_array+0x3c>)
 80030ec:	1ba4      	subs	r4, r4, r6
 80030ee:	10a4      	asrs	r4, r4, #2
 80030f0:	42a5      	cmp	r5, r4
 80030f2:	d109      	bne.n	8003108 <__libc_init_array+0x24>
 80030f4:	f000 f822 	bl	800313c <_init>
 80030f8:	2500      	movs	r5, #0
 80030fa:	4e0a      	ldr	r6, [pc, #40]	; (8003124 <__libc_init_array+0x40>)
 80030fc:	4c0a      	ldr	r4, [pc, #40]	; (8003128 <__libc_init_array+0x44>)
 80030fe:	1ba4      	subs	r4, r4, r6
 8003100:	10a4      	asrs	r4, r4, #2
 8003102:	42a5      	cmp	r5, r4
 8003104:	d105      	bne.n	8003112 <__libc_init_array+0x2e>
 8003106:	bd70      	pop	{r4, r5, r6, pc}
 8003108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800310c:	4798      	blx	r3
 800310e:	3501      	adds	r5, #1
 8003110:	e7ee      	b.n	80030f0 <__libc_init_array+0xc>
 8003112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003116:	4798      	blx	r3
 8003118:	3501      	adds	r5, #1
 800311a:	e7f2      	b.n	8003102 <__libc_init_array+0x1e>
 800311c:	080031bc 	.word	0x080031bc
 8003120:	080031bc 	.word	0x080031bc
 8003124:	080031bc 	.word	0x080031bc
 8003128:	080031c0 	.word	0x080031c0

0800312c <memset>:
 800312c:	4603      	mov	r3, r0
 800312e:	4402      	add	r2, r0
 8003130:	4293      	cmp	r3, r2
 8003132:	d100      	bne.n	8003136 <memset+0xa>
 8003134:	4770      	bx	lr
 8003136:	f803 1b01 	strb.w	r1, [r3], #1
 800313a:	e7f9      	b.n	8003130 <memset+0x4>

0800313c <_init>:
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	bf00      	nop
 8003140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003142:	bc08      	pop	{r3}
 8003144:	469e      	mov	lr, r3
 8003146:	4770      	bx	lr

08003148 <_fini>:
 8003148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314a:	bf00      	nop
 800314c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314e:	bc08      	pop	{r3}
 8003150:	469e      	mov	lr, r3
 8003152:	4770      	bx	lr
