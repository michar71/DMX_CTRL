
DMX_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000485c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004fc4  08004fc4  00014fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000248  20000000  08004fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000984  20000248  08005210  00020248  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000bcc  08005210  00020bcc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d24c  00000000  00000000  00020271  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004961  00000000  00000000  0003d4bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a785  00000000  00000000  00041e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000fb0  00000000  00000000  0004c5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000016d0  00000000  00000000  0004d558  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008b3a  00000000  00000000  0004ec28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000053d9  00000000  00000000  00057762  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005cb3b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000030fc  00000000  00000000  0005cbb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000248 	.word	0x20000248
 8000128:	00000000 	.word	0x00000000
 800012c:	08004950 	.word	0x08004950

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000024c 	.word	0x2000024c
 8000148:	08004950 	.word	0x08004950

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f9b4 	bl	80004e0 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 f968 	bl	800045c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000074 	.word	0x20000074
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f941 	bl	8000438 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f003 fbac 	bl	8003918 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200007ac 	.word	0x200007ac
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200007ac 	.word	0x200007ac

080001ec <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80001ec:	2300      	movs	r3, #0
{ 
 80001ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80001f0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80001f2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d074      	beq.n	80002e4 <HAL_ADC_ConfigChannel+0xf8>
 80001fa:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80001fc:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80001fe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000202:	2d06      	cmp	r5, #6
 8000204:	6802      	ldr	r2, [r0, #0]
 8000206:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800020a:	680c      	ldr	r4, [r1, #0]
 800020c:	d825      	bhi.n	800025a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800020e:	442b      	add	r3, r5
 8000210:	251f      	movs	r5, #31
 8000212:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000214:	3b05      	subs	r3, #5
 8000216:	409d      	lsls	r5, r3
 8000218:	ea26 0505 	bic.w	r5, r6, r5
 800021c:	fa04 f303 	lsl.w	r3, r4, r3
 8000220:	432b      	orrs	r3, r5
 8000222:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000224:	2c09      	cmp	r4, #9
 8000226:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800022a:	688d      	ldr	r5, [r1, #8]
 800022c:	d92f      	bls.n	800028e <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800022e:	2607      	movs	r6, #7
 8000230:	4423      	add	r3, r4
 8000232:	68d1      	ldr	r1, [r2, #12]
 8000234:	3b1e      	subs	r3, #30
 8000236:	409e      	lsls	r6, r3
 8000238:	ea21 0106 	bic.w	r1, r1, r6
 800023c:	fa05 f303 	lsl.w	r3, r5, r3
 8000240:	430b      	orrs	r3, r1
 8000242:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000244:	f1a4 0310 	sub.w	r3, r4, #16
 8000248:	2b01      	cmp	r3, #1
 800024a:	d92b      	bls.n	80002a4 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800024c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800024e:	2200      	movs	r2, #0
 8000250:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000254:	4618      	mov	r0, r3
 8000256:	b002      	add	sp, #8
 8000258:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800025a:	2d0c      	cmp	r5, #12
 800025c:	d80b      	bhi.n	8000276 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800025e:	442b      	add	r3, r5
 8000260:	251f      	movs	r5, #31
 8000262:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000264:	3b23      	subs	r3, #35	; 0x23
 8000266:	409d      	lsls	r5, r3
 8000268:	ea26 0505 	bic.w	r5, r6, r5
 800026c:	fa04 f303 	lsl.w	r3, r4, r3
 8000270:	432b      	orrs	r3, r5
 8000272:	6313      	str	r3, [r2, #48]	; 0x30
 8000274:	e7d6      	b.n	8000224 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000276:	442b      	add	r3, r5
 8000278:	251f      	movs	r5, #31
 800027a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800027c:	3b41      	subs	r3, #65	; 0x41
 800027e:	409d      	lsls	r5, r3
 8000280:	ea26 0505 	bic.w	r5, r6, r5
 8000284:	fa04 f303 	lsl.w	r3, r4, r3
 8000288:	432b      	orrs	r3, r5
 800028a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800028c:	e7ca      	b.n	8000224 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800028e:	2607      	movs	r6, #7
 8000290:	6911      	ldr	r1, [r2, #16]
 8000292:	4423      	add	r3, r4
 8000294:	409e      	lsls	r6, r3
 8000296:	ea21 0106 	bic.w	r1, r1, r6
 800029a:	fa05 f303 	lsl.w	r3, r5, r3
 800029e:	430b      	orrs	r3, r1
 80002a0:	6113      	str	r3, [r2, #16]
 80002a2:	e7cf      	b.n	8000244 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80002a4:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <HAL_ADC_ConfigChannel+0xfc>)
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d116      	bne.n	80002d8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80002aa:	6893      	ldr	r3, [r2, #8]
 80002ac:	021b      	lsls	r3, r3, #8
 80002ae:	d4cd      	bmi.n	800024c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002b0:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002b2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002b8:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002ba:	d1c7      	bne.n	800024c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80002bc:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <HAL_ADC_ConfigChannel+0x100>)
 80002be:	4a0c      	ldr	r2, [pc, #48]	; (80002f0 <HAL_ADC_ConfigChannel+0x104>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80002c6:	230a      	movs	r3, #10
 80002c8:	4353      	muls	r3, r2
            wait_loop_index--;
 80002ca:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002cc:	9b01      	ldr	r3, [sp, #4]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d0bc      	beq.n	800024c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80002d2:	9b01      	ldr	r3, [sp, #4]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	e7f8      	b.n	80002ca <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002e0:	2301      	movs	r3, #1
 80002e2:	e7b4      	b.n	800024e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80002e4:	2302      	movs	r3, #2
 80002e6:	e7b5      	b.n	8000254 <HAL_ADC_ConfigChannel+0x68>
 80002e8:	40012400 	.word	0x40012400
 80002ec:	20000074 	.word	0x20000074
 80002f0:	000f4240 	.word	0x000f4240

080002f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80002f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002f6:	6803      	ldr	r3, [r0, #0]
{
 80002f8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002fa:	689a      	ldr	r2, [r3, #8]
 80002fc:	07d2      	lsls	r2, r2, #31
 80002fe:	d401      	bmi.n	8000304 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000300:	2000      	movs	r0, #0
 8000302:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000304:	689a      	ldr	r2, [r3, #8]
 8000306:	f022 0201 	bic.w	r2, r2, #1
 800030a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800030c:	f7ff ff68 	bl	80001e0 <HAL_GetTick>
 8000310:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000312:	6823      	ldr	r3, [r4, #0]
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	07db      	lsls	r3, r3, #31
 8000318:	d5f2      	bpl.n	8000300 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800031a:	f7ff ff61 	bl	80001e0 <HAL_GetTick>
 800031e:	1b40      	subs	r0, r0, r5
 8000320:	2802      	cmp	r0, #2
 8000322:	d9f6      	bls.n	8000312 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000324:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000326:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000328:	f043 0310 	orr.w	r3, r3, #16
 800032c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800032e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000336:	bd38      	pop	{r3, r4, r5, pc}

08000338 <HAL_ADC_Init>:
{
 8000338:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800033a:	4604      	mov	r4, r0
 800033c:	2800      	cmp	r0, #0
 800033e:	d071      	beq.n	8000424 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000340:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000342:	b923      	cbnz	r3, 800034e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000344:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000346:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800034a:	f003 fb07 	bl	800395c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800034e:	4620      	mov	r0, r4
 8000350:	f7ff ffd0 	bl	80002f4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000354:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000356:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800035a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800035c:	d164      	bne.n	8000428 <HAL_ADC_Init+0xf0>
 800035e:	2800      	cmp	r0, #0
 8000360:	d162      	bne.n	8000428 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000362:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000364:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000368:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800036a:	f023 0302 	bic.w	r3, r3, #2
 800036e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000372:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000374:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000376:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000378:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800037a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800037e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000382:	d038      	beq.n	80003f6 <HAL_ADC_Init+0xbe>
 8000384:	2901      	cmp	r1, #1
 8000386:	bf14      	ite	ne
 8000388:	4606      	movne	r6, r0
 800038a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800038e:	7d25      	ldrb	r5, [r4, #20]
 8000390:	2d01      	cmp	r5, #1
 8000392:	d107      	bne.n	80003a4 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000394:	2b00      	cmp	r3, #0
 8000396:	d130      	bne.n	80003fa <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000398:	69a3      	ldr	r3, [r4, #24]
 800039a:	3b01      	subs	r3, #1
 800039c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80003a0:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80003a4:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003a6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80003aa:	685d      	ldr	r5, [r3, #4]
 80003ac:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80003b0:	ea45 0506 	orr.w	r5, r5, r6
 80003b4:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80003b6:	689e      	ldr	r6, [r3, #8]
 80003b8:	4d1d      	ldr	r5, [pc, #116]	; (8000430 <HAL_ADC_Init+0xf8>)
 80003ba:	ea05 0506 	and.w	r5, r5, r6
 80003be:	ea45 0502 	orr.w	r5, r5, r2
 80003c2:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003c4:	d001      	beq.n	80003ca <HAL_ADC_Init+0x92>
 80003c6:	2901      	cmp	r1, #1
 80003c8:	d120      	bne.n	800040c <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80003ca:	6921      	ldr	r1, [r4, #16]
 80003cc:	3901      	subs	r1, #1
 80003ce:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80003d0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80003d2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80003d6:	4329      	orrs	r1, r5
 80003d8:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003da:	6899      	ldr	r1, [r3, #8]
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <HAL_ADC_Init+0xfc>)
 80003de:	400b      	ands	r3, r1
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d115      	bne.n	8000410 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80003e4:	2300      	movs	r3, #0
 80003e6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80003e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003ea:	f023 0303 	bic.w	r3, r3, #3
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80003f6:	460e      	mov	r6, r1
 80003f8:	e7c9      	b.n	800038e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003fc:	f043 0320 	orr.w	r3, r3, #32
 8000400:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000402:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	62e3      	str	r3, [r4, #44]	; 0x2c
 800040a:	e7cb      	b.n	80003a4 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 800040c:	2100      	movs	r1, #0
 800040e:	e7df      	b.n	80003d0 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000410:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000412:	f023 0312 	bic.w	r3, r3, #18
 8000416:	f043 0310 	orr.w	r3, r3, #16
 800041a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800041c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000424:	2001      	movs	r0, #1
}
 8000426:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000428:	f043 0310 	orr.w	r3, r3, #16
 800042c:	62a3      	str	r3, [r4, #40]	; 0x28
 800042e:	e7f9      	b.n	8000424 <HAL_ADC_Init+0xec>
 8000430:	ffe1f7fd 	.word	0xffe1f7fd
 8000434:	ff1f0efe 	.word	0xff1f0efe

08000438 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000438:	4a07      	ldr	r2, [pc, #28]	; (8000458 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800043a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800043c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800043e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000442:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000446:	041b      	lsls	r3, r3, #16
 8000448:	0c1b      	lsrs	r3, r3, #16
 800044a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800044e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000452:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000454:	60d3      	str	r3, [r2, #12]
 8000456:	4770      	bx	lr
 8000458:	e000ed00 	.word	0xe000ed00

0800045c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800045c:	4b17      	ldr	r3, [pc, #92]	; (80004bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	68dc      	ldr	r4, [r3, #12]
 8000462:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000466:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800046a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800046c:	2b04      	cmp	r3, #4
 800046e:	bf28      	it	cs
 8000470:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000472:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000474:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000478:	bf98      	it	ls
 800047a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800047c:	fa05 f303 	lsl.w	r3, r5, r3
 8000480:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000484:	bf88      	it	hi
 8000486:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000488:	4019      	ands	r1, r3
 800048a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800048c:	fa05 f404 	lsl.w	r4, r5, r4
 8000490:	3c01      	subs	r4, #1
 8000492:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000494:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000496:	ea42 0201 	orr.w	r2, r2, r1
 800049a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800049e:	bfa9      	itett	ge
 80004a0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a4:	4b06      	ldrlt	r3, [pc, #24]	; (80004c0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a6:	b2d2      	uxtbge	r2, r2
 80004a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ac:	bfbb      	ittet	lt
 80004ae:	f000 000f 	andlt.w	r0, r0, #15
 80004b2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b8:	541a      	strblt	r2, [r3, r0]
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	e000ed00 	.word	0xe000ed00
 80004c0:	e000ed14 	.word	0xe000ed14

080004c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80004c4:	2800      	cmp	r0, #0
 80004c6:	db08      	blt.n	80004da <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004c8:	2301      	movs	r3, #1
 80004ca:	0942      	lsrs	r2, r0, #5
 80004cc:	f000 001f 	and.w	r0, r0, #31
 80004d0:	fa03 f000 	lsl.w	r0, r3, r0
 80004d4:	4b01      	ldr	r3, [pc, #4]	; (80004dc <HAL_NVIC_EnableIRQ+0x18>)
 80004d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80004da:	4770      	bx	lr
 80004dc:	e000e100 	.word	0xe000e100

080004e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004e0:	3801      	subs	r0, #1
 80004e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004e6:	d20a      	bcs.n	80004fe <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ee:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004f4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004f6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004f8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	e000e010 	.word	0xe000e010
 8000508:	e000ed00 	.word	0xe000ed00

0800050c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800050c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000510:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000512:	2b02      	cmp	r3, #2
 8000514:	d003      	beq.n	800051e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000516:	2304      	movs	r3, #4
 8000518:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800051a:	2001      	movs	r0, #1
 800051c:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800051e:	6803      	ldr	r3, [r0, #0]
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	f022 020e 	bic.w	r2, r2, #14
 8000526:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	f022 0201 	bic.w	r2, r2, #1
 800052e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000530:	4a18      	ldr	r2, [pc, #96]	; (8000594 <HAL_DMA_Abort_IT+0x88>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d01f      	beq.n	8000576 <HAL_DMA_Abort_IT+0x6a>
 8000536:	3214      	adds	r2, #20
 8000538:	4293      	cmp	r3, r2
 800053a:	d01e      	beq.n	800057a <HAL_DMA_Abort_IT+0x6e>
 800053c:	3214      	adds	r2, #20
 800053e:	4293      	cmp	r3, r2
 8000540:	d01d      	beq.n	800057e <HAL_DMA_Abort_IT+0x72>
 8000542:	3214      	adds	r2, #20
 8000544:	4293      	cmp	r3, r2
 8000546:	d01d      	beq.n	8000584 <HAL_DMA_Abort_IT+0x78>
 8000548:	3214      	adds	r2, #20
 800054a:	4293      	cmp	r3, r2
 800054c:	d01d      	beq.n	800058a <HAL_DMA_Abort_IT+0x7e>
 800054e:	3214      	adds	r2, #20
 8000550:	4293      	cmp	r3, r2
 8000552:	bf0c      	ite	eq
 8000554:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000558:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800055c:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800055e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000560:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000562:	2301      	movs	r3, #1
 8000564:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000568:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800056a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800056e:	b17b      	cbz	r3, 8000590 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000570:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000572:	4620      	mov	r0, r4
 8000574:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000576:	2301      	movs	r3, #1
 8000578:	e7f0      	b.n	800055c <HAL_DMA_Abort_IT+0x50>
 800057a:	2310      	movs	r3, #16
 800057c:	e7ee      	b.n	800055c <HAL_DMA_Abort_IT+0x50>
 800057e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000582:	e7eb      	b.n	800055c <HAL_DMA_Abort_IT+0x50>
 8000584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000588:	e7e8      	b.n	800055c <HAL_DMA_Abort_IT+0x50>
 800058a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058e:	e7e5      	b.n	800055c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000590:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000592:	bd10      	pop	{r4, pc}
 8000594:	40020008 	.word	0x40020008
 8000598:	40020000 	.word	0x40020000

0800059c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800059c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80005a0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80005a2:	4626      	mov	r6, r4
 80005a4:	4b66      	ldr	r3, [pc, #408]	; (8000740 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80005a6:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000750 <HAL_GPIO_Init+0x1b4>
 80005aa:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000754 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005ae:	680a      	ldr	r2, [r1, #0]
 80005b0:	fa32 f506 	lsrs.w	r5, r2, r6
 80005b4:	d102      	bne.n	80005bc <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80005b6:	b003      	add	sp, #12
 80005b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80005bc:	f04f 0801 	mov.w	r8, #1
 80005c0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005c4:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80005c8:	4590      	cmp	r8, r2
 80005ca:	d17f      	bne.n	80006cc <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80005cc:	684d      	ldr	r5, [r1, #4]
 80005ce:	2d12      	cmp	r5, #18
 80005d0:	f000 80aa 	beq.w	8000728 <HAL_GPIO_Init+0x18c>
 80005d4:	f200 8083 	bhi.w	80006de <HAL_GPIO_Init+0x142>
 80005d8:	2d02      	cmp	r5, #2
 80005da:	f000 80a2 	beq.w	8000722 <HAL_GPIO_Init+0x186>
 80005de:	d877      	bhi.n	80006d0 <HAL_GPIO_Init+0x134>
 80005e0:	2d00      	cmp	r5, #0
 80005e2:	f000 8089 	beq.w	80006f8 <HAL_GPIO_Init+0x15c>
 80005e6:	2d01      	cmp	r5, #1
 80005e8:	f000 8099 	beq.w	800071e <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005ec:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005f0:	2aff      	cmp	r2, #255	; 0xff
 80005f2:	bf93      	iteet	ls
 80005f4:	4682      	movls	sl, r0
 80005f6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80005fa:	3d08      	subhi	r5, #8
 80005fc:	f8d0 b000 	ldrls.w	fp, [r0]
 8000600:	bf92      	itee	ls
 8000602:	00b5      	lslls	r5, r6, #2
 8000604:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000608:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800060a:	fa09 f805 	lsl.w	r8, r9, r5
 800060e:	ea2b 0808 	bic.w	r8, fp, r8
 8000612:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000616:	bf88      	it	hi
 8000618:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800061c:	ea48 0505 	orr.w	r5, r8, r5
 8000620:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000624:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000628:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800062c:	d04e      	beq.n	80006cc <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800062e:	4d45      	ldr	r5, [pc, #276]	; (8000744 <HAL_GPIO_Init+0x1a8>)
 8000630:	4f44      	ldr	r7, [pc, #272]	; (8000744 <HAL_GPIO_Init+0x1a8>)
 8000632:	69ad      	ldr	r5, [r5, #24]
 8000634:	f026 0803 	bic.w	r8, r6, #3
 8000638:	f045 0501 	orr.w	r5, r5, #1
 800063c:	61bd      	str	r5, [r7, #24]
 800063e:	69bd      	ldr	r5, [r7, #24]
 8000640:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000644:	f005 0501 	and.w	r5, r5, #1
 8000648:	9501      	str	r5, [sp, #4]
 800064a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800064e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000652:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000654:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000658:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800065c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000660:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000664:	4d38      	ldr	r5, [pc, #224]	; (8000748 <HAL_GPIO_Init+0x1ac>)
 8000666:	42a8      	cmp	r0, r5
 8000668:	d063      	beq.n	8000732 <HAL_GPIO_Init+0x196>
 800066a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800066e:	42a8      	cmp	r0, r5
 8000670:	d061      	beq.n	8000736 <HAL_GPIO_Init+0x19a>
 8000672:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000676:	42a8      	cmp	r0, r5
 8000678:	d05f      	beq.n	800073a <HAL_GPIO_Init+0x19e>
 800067a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800067e:	42a8      	cmp	r0, r5
 8000680:	bf0c      	ite	eq
 8000682:	2503      	moveq	r5, #3
 8000684:	2504      	movne	r5, #4
 8000686:	fa05 f50b 	lsl.w	r5, r5, fp
 800068a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800068e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000692:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000694:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000698:	bf14      	ite	ne
 800069a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800069c:	4395      	biceq	r5, r2
 800069e:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80006a0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006a2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80006a6:	bf14      	ite	ne
 80006a8:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80006aa:	4395      	biceq	r5, r2
 80006ac:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80006ae:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006b0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80006b4:	bf14      	ite	ne
 80006b6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80006b8:	4395      	biceq	r5, r2
 80006ba:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80006bc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006be:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80006c2:	bf14      	ite	ne
 80006c4:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006c6:	ea25 0202 	biceq.w	r2, r5, r2
 80006ca:	60da      	str	r2, [r3, #12]
	position++;
 80006cc:	3601      	adds	r6, #1
 80006ce:	e76e      	b.n	80005ae <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80006d0:	2d03      	cmp	r5, #3
 80006d2:	d022      	beq.n	800071a <HAL_GPIO_Init+0x17e>
 80006d4:	2d11      	cmp	r5, #17
 80006d6:	d189      	bne.n	80005ec <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80006d8:	68cc      	ldr	r4, [r1, #12]
 80006da:	3404      	adds	r4, #4
          break;
 80006dc:	e786      	b.n	80005ec <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80006de:	4f1b      	ldr	r7, [pc, #108]	; (800074c <HAL_GPIO_Init+0x1b0>)
 80006e0:	42bd      	cmp	r5, r7
 80006e2:	d009      	beq.n	80006f8 <HAL_GPIO_Init+0x15c>
 80006e4:	d812      	bhi.n	800070c <HAL_GPIO_Init+0x170>
 80006e6:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000758 <HAL_GPIO_Init+0x1bc>
 80006ea:	454d      	cmp	r5, r9
 80006ec:	d004      	beq.n	80006f8 <HAL_GPIO_Init+0x15c>
 80006ee:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80006f2:	454d      	cmp	r5, r9
 80006f4:	f47f af7a 	bne.w	80005ec <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80006f8:	688c      	ldr	r4, [r1, #8]
 80006fa:	b1c4      	cbz	r4, 800072e <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80006fc:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80006fe:	bf0c      	ite	eq
 8000700:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000704:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000708:	2408      	movs	r4, #8
 800070a:	e76f      	b.n	80005ec <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800070c:	4575      	cmp	r5, lr
 800070e:	d0f3      	beq.n	80006f8 <HAL_GPIO_Init+0x15c>
 8000710:	4565      	cmp	r5, ip
 8000712:	d0f1      	beq.n	80006f8 <HAL_GPIO_Init+0x15c>
 8000714:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800075c <HAL_GPIO_Init+0x1c0>
 8000718:	e7eb      	b.n	80006f2 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800071a:	2400      	movs	r4, #0
 800071c:	e766      	b.n	80005ec <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800071e:	68cc      	ldr	r4, [r1, #12]
          break;
 8000720:	e764      	b.n	80005ec <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000722:	68cc      	ldr	r4, [r1, #12]
 8000724:	3408      	adds	r4, #8
          break;
 8000726:	e761      	b.n	80005ec <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000728:	68cc      	ldr	r4, [r1, #12]
 800072a:	340c      	adds	r4, #12
          break;
 800072c:	e75e      	b.n	80005ec <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800072e:	2404      	movs	r4, #4
 8000730:	e75c      	b.n	80005ec <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000732:	2500      	movs	r5, #0
 8000734:	e7a7      	b.n	8000686 <HAL_GPIO_Init+0xea>
 8000736:	2501      	movs	r5, #1
 8000738:	e7a5      	b.n	8000686 <HAL_GPIO_Init+0xea>
 800073a:	2502      	movs	r5, #2
 800073c:	e7a3      	b.n	8000686 <HAL_GPIO_Init+0xea>
 800073e:	bf00      	nop
 8000740:	40010400 	.word	0x40010400
 8000744:	40021000 	.word	0x40021000
 8000748:	40010800 	.word	0x40010800
 800074c:	10210000 	.word	0x10210000
 8000750:	10310000 	.word	0x10310000
 8000754:	10320000 	.word	0x10320000
 8000758:	10110000 	.word	0x10110000
 800075c:	10220000 	.word	0x10220000

08000760 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000760:	6883      	ldr	r3, [r0, #8]
 8000762:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000764:	bf14      	ite	ne
 8000766:	2001      	movne	r0, #1
 8000768:	2000      	moveq	r0, #0
 800076a:	4770      	bx	lr

0800076c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800076c:	b10a      	cbz	r2, 8000772 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800076e:	6101      	str	r1, [r0, #16]
 8000770:	4770      	bx	lr
 8000772:	0409      	lsls	r1, r1, #16
 8000774:	e7fb      	b.n	800076e <HAL_GPIO_WritePin+0x2>

08000776 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000776:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 800077a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800077c:	2a01      	cmp	r2, #1
{
 800077e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000780:	d00b      	beq.n	800079a <HAL_PCD_SetAddress+0x24>
 8000782:	2201      	movs	r2, #1
 8000784:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8000788:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800078c:	6800      	ldr	r0, [r0, #0]
 800078e:	f001 fce2 	bl	8002156 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000792:	2000      	movs	r0, #0
 8000794:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 8000798:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800079a:	2002      	movs	r0, #2
  return HAL_OK;
}
 800079c:	bd10      	pop	{r4, pc}

0800079e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800079e:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80007a0:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80007a4:	4604      	mov	r4, r0
 80007a6:	f001 0007 	and.w	r0, r1, #7
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80007aa:	ea4f 1540 	mov.w	r5, r0, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 80007ae:	d01f      	beq.n	80007f0 <HAL_PCD_EP_Open+0x52>
    ep->is_in = 1U;
 80007b0:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80007b2:	f105 0128 	add.w	r1, r5, #40	; 0x28
    ep->is_in = 1U;
 80007b6:	4425      	add	r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80007b8:	4421      	add	r1, r4
    ep->is_in = 1U;
 80007ba:	f885 6029 	strb.w	r6, [r5, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 80007be:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80007c0:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80007c2:	b2c0      	uxtb	r0, r0
 80007c4:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 80007c6:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80007c8:	b102      	cbz	r2, 80007cc <HAL_PCD_EP_Open+0x2e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80007ca:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80007cc:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 80007ce:	bf04      	itt	eq
 80007d0:	2300      	moveq	r3, #0
 80007d2:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 80007d4:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d011      	beq.n	8000800 <HAL_PCD_EP_Open+0x62>
 80007dc:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80007de:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80007e0:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80007e4:	f001 fad4 	bl	8001d90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 80007f0:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80007f2:	f505 7194 	add.w	r1, r5, #296	; 0x128
    ep->is_in = 0U;
 80007f6:	4425      	add	r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80007f8:	4421      	add	r1, r4
    ep->is_in = 0U;
 80007fa:	f885 6129 	strb.w	r6, [r5, #297]	; 0x129
 80007fe:	e7de      	b.n	80007be <HAL_PCD_EP_Open+0x20>
  __HAL_LOCK(hpcd);
 8000800:	2002      	movs	r0, #2
}
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000804:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000806:	2600      	movs	r6, #0
 8000808:	f001 0107 	and.w	r1, r1, #7
 800080c:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 800080e:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8000810:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000814:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000818:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800081a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 800081e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 8000822:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 8000826:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800082a:	6800      	ldr	r0, [r0, #0]
 800082c:	f001 fcb0 	bl	8002190 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000830:	4630      	mov	r0, r6
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000834:	f001 0107 	and.w	r1, r1, #7
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800083c:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 800083e:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8000840:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000842:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8000844:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000848:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800084c:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800084e:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000850:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000852:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000856:	6800      	ldr	r0, [r0, #0]
 8000858:	f001 fc9a 	bl	8002190 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800085c:	4630      	mov	r0, r6
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <HAL_PCD_IRQHandler>:
{
 8000860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000864:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000866:	6800      	ldr	r0, [r0, #0]
 8000868:	f001 fc7b 	bl	8002162 <USB_ReadInterrupts>
 800086c:	0402      	lsls	r2, r0, #16
 800086e:	f100 8210 	bmi.w	8000c92 <HAL_PCD_IRQHandler+0x432>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000872:	6820      	ldr	r0, [r4, #0]
 8000874:	f001 fc75 	bl	8002162 <USB_ReadInterrupts>
 8000878:	0543      	lsls	r3, r0, #21
 800087a:	d50f      	bpl.n	800089c <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800087c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800087e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000880:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000888:	041b      	lsls	r3, r3, #16
 800088a:	0c1b      	lsrs	r3, r3, #16
 800088c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000890:	f003 f987 	bl	8003ba2 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000894:	2100      	movs	r1, #0
 8000896:	4620      	mov	r0, r4
 8000898:	f7ff ff6d 	bl	8000776 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800089c:	6820      	ldr	r0, [r4, #0]
 800089e:	f001 fc60 	bl	8002162 <USB_ReadInterrupts>
 80008a2:	0447      	lsls	r7, r0, #17
 80008a4:	d508      	bpl.n	80008b8 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80008a6:	6822      	ldr	r2, [r4, #0]
 80008a8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80008ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008b0:	041b      	lsls	r3, r3, #16
 80008b2:	0c1b      	lsrs	r3, r3, #16
 80008b4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80008b8:	6820      	ldr	r0, [r4, #0]
 80008ba:	f001 fc52 	bl	8002162 <USB_ReadInterrupts>
 80008be:	0486      	lsls	r6, r0, #18
 80008c0:	d508      	bpl.n	80008d4 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80008c2:	6822      	ldr	r2, [r4, #0]
 80008c4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80008c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008cc:	041b      	lsls	r3, r3, #16
 80008ce:	0c1b      	lsrs	r3, r3, #16
 80008d0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80008d4:	6820      	ldr	r0, [r4, #0]
 80008d6:	f001 fc44 	bl	8002162 <USB_ReadInterrupts>
 80008da:	04c5      	lsls	r5, r0, #19
 80008dc:	d51c      	bpl.n	8000918 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80008de:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80008e0:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80008e2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80008e6:	f023 0304 	bic.w	r3, r3, #4
 80008ea:	041b      	lsls	r3, r3, #16
 80008ec:	0c1b      	lsrs	r3, r3, #16
 80008ee:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80008f2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80008f6:	f023 0308 	bic.w	r3, r3, #8
 80008fa:	041b      	lsls	r3, r3, #16
 80008fc:	0c1b      	lsrs	r3, r3, #16
 80008fe:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000902:	f003 f971 	bl	8003be8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000906:	6822      	ldr	r2, [r4, #0]
 8000908:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800090c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000910:	041b      	lsls	r3, r3, #16
 8000912:	0c1b      	lsrs	r3, r3, #16
 8000914:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000918:	6820      	ldr	r0, [r4, #0]
 800091a:	f001 fc22 	bl	8002162 <USB_ReadInterrupts>
 800091e:	0500      	lsls	r0, r0, #20
 8000920:	d526      	bpl.n	8000970 <HAL_PCD_IRQHandler+0x110>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000922:	6820      	ldr	r0, [r4, #0]
 8000924:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000928:	b29b      	uxth	r3, r3
 800092a:	f043 0308 	orr.w	r3, r3, #8
 800092e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000932:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800093a:	041b      	lsls	r3, r3, #16
 800093c:	0c1b      	lsrs	r3, r3, #16
 800093e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000942:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000946:	b29b      	uxth	r3, r3
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000950:	f001 fc07 	bl	8002162 <USB_ReadInterrupts>
 8000954:	04c1      	lsls	r1, r0, #19
 8000956:	d508      	bpl.n	800096a <HAL_PCD_IRQHandler+0x10a>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000958:	6822      	ldr	r2, [r4, #0]
 800095a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800095e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000962:	041b      	lsls	r3, r3, #16
 8000964:	0c1b      	lsrs	r3, r3, #16
 8000966:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 800096a:	4620      	mov	r0, r4
 800096c:	f003 f92c 	bl	8003bc8 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000970:	6820      	ldr	r0, [r4, #0]
 8000972:	f001 fbf6 	bl	8002162 <USB_ReadInterrupts>
 8000976:	0582      	lsls	r2, r0, #22
 8000978:	d50b      	bpl.n	8000992 <HAL_PCD_IRQHandler+0x132>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800097a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800097c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800097e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000982:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000986:	041b      	lsls	r3, r3, #16
 8000988:	0c1b      	lsrs	r3, r3, #16
 800098a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800098e:	f003 f904 	bl	8003b9a <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000992:	6820      	ldr	r0, [r4, #0]
 8000994:	f001 fbe5 	bl	8002162 <USB_ReadInterrupts>
 8000998:	05c3      	lsls	r3, r0, #23
 800099a:	d508      	bpl.n	80009ae <HAL_PCD_IRQHandler+0x14e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800099c:	6822      	ldr	r2, [r4, #0]
 800099e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80009a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009a6:	041b      	lsls	r3, r3, #16
 80009a8:	0c1b      	lsrs	r3, r3, #16
 80009aa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 80009ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 80009b2:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 80009b6:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 80009b8:	f011 060f 	ands.w	r6, r1, #15
 80009bc:	f040 80b7 	bne.w	8000b2e <HAL_PCD_IRQHandler+0x2ce>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80009c0:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80009c2:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80009c6:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80009c8:	d12c      	bne.n	8000a24 <HAL_PCD_IRQHandler+0x1c4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80009ca:	ea03 0309 	and.w	r3, r3, r9
 80009ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009d2:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80009d4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80009d8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80009dc:	b29b      	uxth	r3, r3
 80009de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80009e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80009e6:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80009ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80009ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009f0:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80009f2:	4413      	add	r3, r2
 80009f4:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80009f6:	4620      	mov	r0, r4
 80009f8:	f003 f8c8 	bl	8003b8c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80009fc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000a00:	b153      	cbz	r3, 8000a18 <HAL_PCD_IRQHandler+0x1b8>
 8000a02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a04:	b942      	cbnz	r2, 8000a18 <HAL_PCD_IRQHandler+0x1b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000a06:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000a0a:	6821      	ldr	r1, [r4, #0]
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000a14:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000a18:	6820      	ldr	r0, [r4, #0]
 8000a1a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000a1e:	041b      	lsls	r3, r3, #16
 8000a20:	d4c7      	bmi.n	80009b2 <HAL_PCD_IRQHandler+0x152>
 8000a22:	e726      	b.n	8000872 <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000a24:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8000a28:	d021      	beq.n	8000a6e <HAL_PCD_IRQHandler+0x20e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a2a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a2e:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a38:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a3c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000a40:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8000a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a48:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000a4c:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8000a50:	f001 fc86 	bl	8002360 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a54:	6822      	ldr	r2, [r4, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000a56:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a58:	8813      	ldrh	r3, [r2, #0]
 8000a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a5e:	051b      	lsls	r3, r3, #20
 8000a60:	0d1b      	lsrs	r3, r3, #20
 8000a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a66:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000a68:	f003 f882 	bl	8003b70 <HAL_PCD_SetupStageCallback>
 8000a6c:	e7d4      	b.n	8000a18 <HAL_PCD_IRQHandler+0x1b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000a6e:	041f      	lsls	r7, r3, #16
 8000a70:	d5d2      	bpl.n	8000a18 <HAL_PCD_IRQHandler+0x1b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a72:	8803      	ldrh	r3, [r0, #0]
 8000a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a78:	051b      	lsls	r3, r3, #20
 8000a7a:	0d1b      	lsrs	r3, r3, #20
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a80:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a82:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a86:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a90:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a94:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a9c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000aa0:	b18b      	cbz	r3, 8000ac6 <HAL_PCD_IRQHandler+0x266>
 8000aa2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8000aa6:	b171      	cbz	r1, 8000ac6 <HAL_PCD_IRQHandler+0x266>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000aa8:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8000aac:	f001 fc58 	bl	8002360 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8000ab0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8000ab4:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000ab8:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8000aba:	4413      	add	r3, r2
 8000abc:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	f003 f85b 	bl	8003b7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000ac6:	6821      	ldr	r1, [r4, #0]
 8000ac8:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 8000acc:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8000ad0:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	b9cd      	cbnz	r5, 8000b0c <HAL_PCD_IRQHandler+0x2ac>
 8000ad8:	5ac2      	ldrh	r2, [r0, r3]
 8000ada:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000ade:	0412      	lsls	r2, r2, #16
 8000ae0:	0c12      	lsrs	r2, r2, #16
 8000ae2:	52c2      	strh	r2, [r0, r3]
 8000ae4:	5ac2      	ldrh	r2, [r0, r3]
 8000ae6:	b292      	uxth	r2, r2
 8000ae8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000aec:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000aee:	880b      	ldrh	r3, [r1, #0]
 8000af0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000af8:	041b      	lsls	r3, r3, #16
 8000afa:	0c1b      	lsrs	r3, r3, #16
 8000afc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b08:	800b      	strh	r3, [r1, #0]
 8000b0a:	e785      	b.n	8000a18 <HAL_PCD_IRQHandler+0x1b8>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000b0c:	2d3e      	cmp	r5, #62	; 0x3e
 8000b0e:	d806      	bhi.n	8000b1e <HAL_PCD_IRQHandler+0x2be>
 8000b10:	086a      	lsrs	r2, r5, #1
 8000b12:	07ee      	lsls	r6, r5, #31
 8000b14:	bf48      	it	mi
 8000b16:	3201      	addmi	r2, #1
 8000b18:	0292      	lsls	r2, r2, #10
 8000b1a:	b292      	uxth	r2, r2
 8000b1c:	e7e6      	b.n	8000aec <HAL_PCD_IRQHandler+0x28c>
 8000b1e:	096a      	lsrs	r2, r5, #5
 8000b20:	06ed      	lsls	r5, r5, #27
 8000b22:	bf08      	it	eq
 8000b24:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000b28:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 8000b2c:	e7f5      	b.n	8000b1a <HAL_PCD_IRQHandler+0x2ba>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000b2e:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 8000b32:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000b36:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8000b3a:	d03d      	beq.n	8000bb8 <HAL_PCD_IRQHandler+0x358>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000b3c:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8000b40:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b46:	051b      	lsls	r3, r3, #20
 8000b48:	0d1b      	lsrs	r3, r3, #20
 8000b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4e:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8000b52:	19e1      	adds	r1, r4, r7
 8000b54:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d158      	bne.n	8000c0e <HAL_PCD_IRQHandler+0x3ae>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b5c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000b60:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	3306      	adds	r3, #6
 8000b68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000b6c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b70:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000b74:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8000b78:	b135      	cbz	r5, 8000b88 <HAL_PCD_IRQHandler+0x328>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000b7a:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8000b7e:	462b      	mov	r3, r5
 8000b80:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8000b84:	f001 fbec 	bl	8002360 <USB_ReadPMA>
 8000b88:	19e1      	adds	r1, r4, r7
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8000b8a:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 8000b8e:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 8000b92:	442b      	add	r3, r5
 8000b94:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000b98:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 8000b9c:	442a      	add	r2, r5
 8000b9e:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000ba2:	b11b      	cbz	r3, 8000bac <HAL_PCD_IRQHandler+0x34c>
 8000ba4:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8000ba8:	4285      	cmp	r5, r0
 8000baa:	d269      	bcs.n	8000c80 <HAL_PCD_IRQHandler+0x420>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000bac:	4427      	add	r7, r4
 8000bae:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f002 ffe2 	bl	8003b7c <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000bb8:	f018 0f80 	tst.w	r8, #128	; 0x80
 8000bbc:	f43f af2c 	beq.w	8000a18 <HAL_PCD_IRQHandler+0x1b8>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000bc0:	6821      	ldr	r1, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000bc2:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000bc4:	f831 2026 	ldrh.w	r2, [r1, r6, lsl #2]
 8000bc8:	b292      	uxth	r2, r2
 8000bca:	ea02 0209 	and.w	r2, r2, r9
 8000bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bd2:	f821 2026 	strh.w	r2, [r1, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000bd6:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8000bda:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8000bde:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	3302      	adds	r3, #2
 8000be6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000bea:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000bee:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 8000bf2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000bf4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000bf8:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000bfa:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8000bfc:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8000bfe:	63f2      	str	r2, [r6, #60]	; 0x3c
 8000c00:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
        if (ep->xfer_len == 0U)
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d141      	bne.n	8000c8c <HAL_PCD_IRQHandler+0x42c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000c08:	f002 ffc0 	bl	8003b8c <HAL_PCD_DataInStageCallback>
 8000c0c:	e704      	b.n	8000a18 <HAL_PCD_IRQHandler+0x1b8>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000c0e:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 8000c12:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000c1c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000c20:	b292      	uxth	r2, r2
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000c22:	d01f      	beq.n	8000c64 <HAL_PCD_IRQHandler+0x404>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000c24:	3202      	adds	r2, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000c2c:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000c30:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8000c34:	b135      	cbz	r5, 8000c44 <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000c36:	462b      	mov	r3, r5
 8000c38:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000c3c:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8000c40:	f001 fb8e 	bl	8002360 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000c44:	19e3      	adds	r3, r4, r7
 8000c46:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8000c4a:	6822      	ldr	r2, [r4, #0]
 8000c4c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	ea03 030b 	and.w	r3, r3, fp
 8000c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c5e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000c62:	e791      	b.n	8000b88 <HAL_PCD_IRQHandler+0x328>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000c64:	3206      	adds	r2, #6
 8000c66:	4413      	add	r3, r2
 8000c68:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000c6c:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000c70:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d0e5      	beq.n	8000c44 <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000c78:	462b      	mov	r3, r5
 8000c7a:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 8000c7e:	e7dd      	b.n	8000c3c <HAL_PCD_IRQHandler+0x3dc>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000c80:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8000c84:	4620      	mov	r0, r4
 8000c86:	f7ff fdbd 	bl	8000804 <HAL_PCD_EP_Receive>
 8000c8a:	e795      	b.n	8000bb8 <HAL_PCD_IRQHandler+0x358>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000c8c:	f7ff fdd2 	bl	8000834 <HAL_PCD_EP_Transmit>
 8000c90:	e6c2      	b.n	8000a18 <HAL_PCD_IRQHandler+0x1b8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c92:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8000ca0 <HAL_PCD_IRQHandler+0x440>
 8000c96:	f8df a00c 	ldr.w	sl, [pc, #12]	; 8000ca4 <HAL_PCD_IRQHandler+0x444>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000c9a:	f8df b00c 	ldr.w	fp, [pc, #12]	; 8000ca8 <HAL_PCD_IRQHandler+0x448>
 8000c9e:	e6bb      	b.n	8000a18 <HAL_PCD_IRQHandler+0x1b8>
 8000ca0:	ffff8f0f 	.word	0xffff8f0f
 8000ca4:	ffff8000 	.word	0xffff8000
 8000ca8:	ffff8f8f 	.word	0xffff8f8f

08000cac <HAL_PCD_EP_SetStall>:
{
 8000cac:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000cae:	6843      	ldr	r3, [r0, #4]
 8000cb0:	f001 0507 	and.w	r5, r1, #7
 8000cb4:	429d      	cmp	r5, r3
{
 8000cb6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000cb8:	d828      	bhi.n	8000d0c <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8000cba:	060b      	lsls	r3, r1, #24
 8000cbc:	d51d      	bpl.n	8000cfa <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8000cbe:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cc0:	016b      	lsls	r3, r5, #5
 8000cc2:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8000cc6:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cc8:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000cca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8000cce:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8000cd0:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8000cd2:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8000cd4:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d019      	beq.n	8000d10 <HAL_PCD_EP_SetStall+0x64>
 8000cdc:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000ce0:	6820      	ldr	r0, [r4, #0]
 8000ce2:	f001 f9cd 	bl	8002080 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000ce6:	b925      	cbnz	r5, 8000cf2 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000ce8:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8000cec:	6820      	ldr	r0, [r4, #0]
 8000cee:	f001 fa3c 	bl	800216a <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8000cfa:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8000cfc:	014b      	lsls	r3, r1, #5
 8000cfe:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 8000d02:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8000d04:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000d06:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8000d0a:	e7e0      	b.n	8000cce <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000d10:	2002      	movs	r0, #2
}
 8000d12:	bd38      	pop	{r3, r4, r5, pc}

08000d14 <HAL_PCD_EP_ClrStall>:
{
 8000d14:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000d16:	6843      	ldr	r3, [r0, #4]
 8000d18:	f001 020f 	and.w	r2, r1, #15
 8000d1c:	429a      	cmp	r2, r3
{
 8000d1e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000d20:	d826      	bhi.n	8000d70 <HAL_PCD_EP_ClrStall+0x5c>
 8000d22:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8000d26:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d2a:	ea4f 1243 	mov.w	r2, r3, lsl #5
  if ((0x80U & ep_addr) == 0x80U)
 8000d2e:	d017      	beq.n	8000d60 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d30:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8000d34:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000d36:	4402      	add	r2, r0
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  ep->is_stall = 0U;
 8000d3e:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d40:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8000d42:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8000d44:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d013      	beq.n	8000d74 <HAL_PCD_EP_ClrStall+0x60>
 8000d4c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000d4e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000d50:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000d54:	f001 f9b4 	bl	80020c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000d58:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d60:	f502 7194 	add.w	r1, r2, #296	; 0x128
 8000d64:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000d66:	4402      	add	r2, r0
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 8000d6e:	e7e6      	b.n	8000d3e <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 8000d70:	2001      	movs	r0, #1
 8000d72:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000d74:	2002      	movs	r0, #2
}
 8000d76:	bd38      	pop	{r3, r4, r5, pc}

08000d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d7c:	4605      	mov	r5, r0
 8000d7e:	b908      	cbnz	r0, 8000d84 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000d80:	2001      	movs	r0, #1
 8000d82:	e03c      	b.n	8000dfe <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d84:	6803      	ldr	r3, [r0, #0]
 8000d86:	07db      	lsls	r3, r3, #31
 8000d88:	d410      	bmi.n	8000dac <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d8a:	682b      	ldr	r3, [r5, #0]
 8000d8c:	079f      	lsls	r7, r3, #30
 8000d8e:	d45d      	bmi.n	8000e4c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d90:	682b      	ldr	r3, [r5, #0]
 8000d92:	0719      	lsls	r1, r3, #28
 8000d94:	f100 8094 	bmi.w	8000ec0 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	075a      	lsls	r2, r3, #29
 8000d9c:	f100 80be 	bmi.w	8000f1c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000da0:	69e8      	ldr	r0, [r5, #28]
 8000da2:	2800      	cmp	r0, #0
 8000da4:	f040 812c 	bne.w	8001000 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000da8:	2000      	movs	r0, #0
 8000daa:	e028      	b.n	8000dfe <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dac:	4c8f      	ldr	r4, [pc, #572]	; (8000fec <HAL_RCC_OscConfig+0x274>)
 8000dae:	6863      	ldr	r3, [r4, #4]
 8000db0:	f003 030c 	and.w	r3, r3, #12
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d007      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000db8:	6863      	ldr	r3, [r4, #4]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	2b08      	cmp	r3, #8
 8000dc0:	d109      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x5e>
 8000dc2:	6863      	ldr	r3, [r4, #4]
 8000dc4:	03de      	lsls	r6, r3, #15
 8000dc6:	d506      	bpl.n	8000dd6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	039c      	lsls	r4, r3, #14
 8000dcc:	d5dd      	bpl.n	8000d8a <HAL_RCC_OscConfig+0x12>
 8000dce:	686b      	ldr	r3, [r5, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1da      	bne.n	8000d8a <HAL_RCC_OscConfig+0x12>
 8000dd4:	e7d4      	b.n	8000d80 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd6:	686b      	ldr	r3, [r5, #4]
 8000dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ddc:	d112      	bne.n	8000e04 <HAL_RCC_OscConfig+0x8c>
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000de6:	f7ff f9fb 	bl	80001e0 <HAL_GetTick>
 8000dea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	0398      	lsls	r0, r3, #14
 8000df0:	d4cb      	bmi.n	8000d8a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df2:	f7ff f9f5 	bl	80001e0 <HAL_GetTick>
 8000df6:	1b80      	subs	r0, r0, r6
 8000df8:	2864      	cmp	r0, #100	; 0x64
 8000dfa:	d9f7      	bls.n	8000dec <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000dfc:	2003      	movs	r0, #3
}
 8000dfe:	b002      	add	sp, #8
 8000e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e04:	b99b      	cbnz	r3, 8000e2e <HAL_RCC_OscConfig+0xb6>
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e0c:	6023      	str	r3, [r4, #0]
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e14:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e16:	f7ff f9e3 	bl	80001e0 <HAL_GetTick>
 8000e1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	0399      	lsls	r1, r3, #14
 8000e20:	d5b3      	bpl.n	8000d8a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e22:	f7ff f9dd 	bl	80001e0 <HAL_GetTick>
 8000e26:	1b80      	subs	r0, r0, r6
 8000e28:	2864      	cmp	r0, #100	; 0x64
 8000e2a:	d9f7      	bls.n	8000e1c <HAL_RCC_OscConfig+0xa4>
 8000e2c:	e7e6      	b.n	8000dfc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e32:	6823      	ldr	r3, [r4, #0]
 8000e34:	d103      	bne.n	8000e3e <HAL_RCC_OscConfig+0xc6>
 8000e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e3a:	6023      	str	r3, [r4, #0]
 8000e3c:	e7cf      	b.n	8000dde <HAL_RCC_OscConfig+0x66>
 8000e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e42:	6023      	str	r3, [r4, #0]
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e4a:	e7cb      	b.n	8000de4 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e4c:	4c67      	ldr	r4, [pc, #412]	; (8000fec <HAL_RCC_OscConfig+0x274>)
 8000e4e:	6863      	ldr	r3, [r4, #4]
 8000e50:	f013 0f0c 	tst.w	r3, #12
 8000e54:	d007      	beq.n	8000e66 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e56:	6863      	ldr	r3, [r4, #4]
 8000e58:	f003 030c 	and.w	r3, r3, #12
 8000e5c:	2b08      	cmp	r3, #8
 8000e5e:	d110      	bne.n	8000e82 <HAL_RCC_OscConfig+0x10a>
 8000e60:	6863      	ldr	r3, [r4, #4]
 8000e62:	03da      	lsls	r2, r3, #15
 8000e64:	d40d      	bmi.n	8000e82 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	079b      	lsls	r3, r3, #30
 8000e6a:	d502      	bpl.n	8000e72 <HAL_RCC_OscConfig+0xfa>
 8000e6c:	692b      	ldr	r3, [r5, #16]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d186      	bne.n	8000d80 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	696a      	ldr	r2, [r5, #20]
 8000e76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e7a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e7e:	6023      	str	r3, [r4, #0]
 8000e80:	e786      	b.n	8000d90 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e82:	692a      	ldr	r2, [r5, #16]
 8000e84:	4b5a      	ldr	r3, [pc, #360]	; (8000ff0 <HAL_RCC_OscConfig+0x278>)
 8000e86:	b16a      	cbz	r2, 8000ea4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000e88:	2201      	movs	r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e8c:	f7ff f9a8 	bl	80001e0 <HAL_GetTick>
 8000e90:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	079f      	lsls	r7, r3, #30
 8000e96:	d4ec      	bmi.n	8000e72 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e98:	f7ff f9a2 	bl	80001e0 <HAL_GetTick>
 8000e9c:	1b80      	subs	r0, r0, r6
 8000e9e:	2802      	cmp	r0, #2
 8000ea0:	d9f7      	bls.n	8000e92 <HAL_RCC_OscConfig+0x11a>
 8000ea2:	e7ab      	b.n	8000dfc <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000ea4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ea6:	f7ff f99b 	bl	80001e0 <HAL_GetTick>
 8000eaa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eac:	6823      	ldr	r3, [r4, #0]
 8000eae:	0798      	lsls	r0, r3, #30
 8000eb0:	f57f af6e 	bpl.w	8000d90 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb4:	f7ff f994 	bl	80001e0 <HAL_GetTick>
 8000eb8:	1b80      	subs	r0, r0, r6
 8000eba:	2802      	cmp	r0, #2
 8000ebc:	d9f6      	bls.n	8000eac <HAL_RCC_OscConfig+0x134>
 8000ebe:	e79d      	b.n	8000dfc <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ec0:	69aa      	ldr	r2, [r5, #24]
 8000ec2:	4c4a      	ldr	r4, [pc, #296]	; (8000fec <HAL_RCC_OscConfig+0x274>)
 8000ec4:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <HAL_RCC_OscConfig+0x27c>)
 8000ec6:	b1da      	cbz	r2, 8000f00 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ecc:	f7ff f988 	bl	80001e0 <HAL_GetTick>
 8000ed0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ed4:	079b      	lsls	r3, r3, #30
 8000ed6:	d50d      	bpl.n	8000ef4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ed8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000edc:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <HAL_RCC_OscConfig+0x280>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ee4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000ee6:	bf00      	nop
  }
  while (Delay --);
 8000ee8:	9b01      	ldr	r3, [sp, #4]
 8000eea:	1e5a      	subs	r2, r3, #1
 8000eec:	9201      	str	r2, [sp, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f9      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x16e>
 8000ef2:	e751      	b.n	8000d98 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef4:	f7ff f974 	bl	80001e0 <HAL_GetTick>
 8000ef8:	1b80      	subs	r0, r0, r6
 8000efa:	2802      	cmp	r0, #2
 8000efc:	d9e9      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x15a>
 8000efe:	e77d      	b.n	8000dfc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000f00:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f02:	f7ff f96d 	bl	80001e0 <HAL_GetTick>
 8000f06:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f0a:	079f      	lsls	r7, r3, #30
 8000f0c:	f57f af44 	bpl.w	8000d98 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f10:	f7ff f966 	bl	80001e0 <HAL_GetTick>
 8000f14:	1b80      	subs	r0, r0, r6
 8000f16:	2802      	cmp	r0, #2
 8000f18:	d9f6      	bls.n	8000f08 <HAL_RCC_OscConfig+0x190>
 8000f1a:	e76f      	b.n	8000dfc <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f1c:	4c33      	ldr	r4, [pc, #204]	; (8000fec <HAL_RCC_OscConfig+0x274>)
 8000f1e:	69e3      	ldr	r3, [r4, #28]
 8000f20:	00d8      	lsls	r0, r3, #3
 8000f22:	d424      	bmi.n	8000f6e <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000f24:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	69e3      	ldr	r3, [r4, #28]
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	61e3      	str	r3, [r4, #28]
 8000f2e:	69e3      	ldr	r3, [r4, #28]
 8000f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f38:	4e30      	ldr	r6, [pc, #192]	; (8000ffc <HAL_RCC_OscConfig+0x284>)
 8000f3a:	6833      	ldr	r3, [r6, #0]
 8000f3c:	05d9      	lsls	r1, r3, #23
 8000f3e:	d518      	bpl.n	8000f72 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f40:	68eb      	ldr	r3, [r5, #12]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d126      	bne.n	8000f94 <HAL_RCC_OscConfig+0x21c>
 8000f46:	6a23      	ldr	r3, [r4, #32]
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f4e:	f7ff f947 	bl	80001e0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f52:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f56:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f58:	6a23      	ldr	r3, [r4, #32]
 8000f5a:	079b      	lsls	r3, r3, #30
 8000f5c:	d53f      	bpl.n	8000fde <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000f5e:	2f00      	cmp	r7, #0
 8000f60:	f43f af1e 	beq.w	8000da0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f64:	69e3      	ldr	r3, [r4, #28]
 8000f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	61e3      	str	r3, [r4, #28]
 8000f6c:	e718      	b.n	8000da0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000f6e:	2700      	movs	r7, #0
 8000f70:	e7e2      	b.n	8000f38 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f72:	6833      	ldr	r3, [r6, #0]
 8000f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f78:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f7a:	f7ff f931 	bl	80001e0 <HAL_GetTick>
 8000f7e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f80:	6833      	ldr	r3, [r6, #0]
 8000f82:	05da      	lsls	r2, r3, #23
 8000f84:	d4dc      	bmi.n	8000f40 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f86:	f7ff f92b 	bl	80001e0 <HAL_GetTick>
 8000f8a:	eba0 0008 	sub.w	r0, r0, r8
 8000f8e:	2864      	cmp	r0, #100	; 0x64
 8000f90:	d9f6      	bls.n	8000f80 <HAL_RCC_OscConfig+0x208>
 8000f92:	e733      	b.n	8000dfc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f94:	b9ab      	cbnz	r3, 8000fc2 <HAL_RCC_OscConfig+0x24a>
 8000f96:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f98:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	6223      	str	r3, [r4, #32]
 8000fa2:	6a23      	ldr	r3, [r4, #32]
 8000fa4:	f023 0304 	bic.w	r3, r3, #4
 8000fa8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000faa:	f7ff f919 	bl	80001e0 <HAL_GetTick>
 8000fae:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb0:	6a23      	ldr	r3, [r4, #32]
 8000fb2:	0798      	lsls	r0, r3, #30
 8000fb4:	d5d3      	bpl.n	8000f5e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb6:	f7ff f913 	bl	80001e0 <HAL_GetTick>
 8000fba:	1b80      	subs	r0, r0, r6
 8000fbc:	4540      	cmp	r0, r8
 8000fbe:	d9f7      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x238>
 8000fc0:	e71c      	b.n	8000dfc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	6a23      	ldr	r3, [r4, #32]
 8000fc6:	d103      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x258>
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	6223      	str	r3, [r4, #32]
 8000fce:	e7ba      	b.n	8000f46 <HAL_RCC_OscConfig+0x1ce>
 8000fd0:	f023 0301 	bic.w	r3, r3, #1
 8000fd4:	6223      	str	r3, [r4, #32]
 8000fd6:	6a23      	ldr	r3, [r4, #32]
 8000fd8:	f023 0304 	bic.w	r3, r3, #4
 8000fdc:	e7b6      	b.n	8000f4c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fde:	f7ff f8ff 	bl	80001e0 <HAL_GetTick>
 8000fe2:	eba0 0008 	sub.w	r0, r0, r8
 8000fe6:	42b0      	cmp	r0, r6
 8000fe8:	d9b6      	bls.n	8000f58 <HAL_RCC_OscConfig+0x1e0>
 8000fea:	e707      	b.n	8000dfc <HAL_RCC_OscConfig+0x84>
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	42420000 	.word	0x42420000
 8000ff4:	42420480 	.word	0x42420480
 8000ff8:	20000074 	.word	0x20000074
 8000ffc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <HAL_RCC_OscConfig+0x334>)
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	461c      	mov	r4, r3
 8001006:	f002 020c 	and.w	r2, r2, #12
 800100a:	2a08      	cmp	r2, #8
 800100c:	d03d      	beq.n	800108a <HAL_RCC_OscConfig+0x312>
 800100e:	2300      	movs	r3, #0
 8001010:	4e27      	ldr	r6, [pc, #156]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001012:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001014:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001016:	d12b      	bne.n	8001070 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001018:	f7ff f8e2 	bl	80001e0 <HAL_GetTick>
 800101c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	0199      	lsls	r1, r3, #6
 8001022:	d41f      	bmi.n	8001064 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001024:	6a2b      	ldr	r3, [r5, #32]
 8001026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800102a:	d105      	bne.n	8001038 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800102c:	6862      	ldr	r2, [r4, #4]
 800102e:	68a9      	ldr	r1, [r5, #8]
 8001030:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001034:	430a      	orrs	r2, r1
 8001036:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001038:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800103a:	6862      	ldr	r2, [r4, #4]
 800103c:	430b      	orrs	r3, r1
 800103e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001042:	4313      	orrs	r3, r2
 8001044:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001046:	2301      	movs	r3, #1
 8001048:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800104a:	f7ff f8c9 	bl	80001e0 <HAL_GetTick>
 800104e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	019a      	lsls	r2, r3, #6
 8001054:	f53f aea8 	bmi.w	8000da8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001058:	f7ff f8c2 	bl	80001e0 <HAL_GetTick>
 800105c:	1b40      	subs	r0, r0, r5
 800105e:	2802      	cmp	r0, #2
 8001060:	d9f6      	bls.n	8001050 <HAL_RCC_OscConfig+0x2d8>
 8001062:	e6cb      	b.n	8000dfc <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001064:	f7ff f8bc 	bl	80001e0 <HAL_GetTick>
 8001068:	1bc0      	subs	r0, r0, r7
 800106a:	2802      	cmp	r0, #2
 800106c:	d9d7      	bls.n	800101e <HAL_RCC_OscConfig+0x2a6>
 800106e:	e6c5      	b.n	8000dfc <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001070:	f7ff f8b6 	bl	80001e0 <HAL_GetTick>
 8001074:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001076:	6823      	ldr	r3, [r4, #0]
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	f57f ae95 	bpl.w	8000da8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800107e:	f7ff f8af 	bl	80001e0 <HAL_GetTick>
 8001082:	1b40      	subs	r0, r0, r5
 8001084:	2802      	cmp	r0, #2
 8001086:	d9f6      	bls.n	8001076 <HAL_RCC_OscConfig+0x2fe>
 8001088:	e6b8      	b.n	8000dfc <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800108a:	2801      	cmp	r0, #1
 800108c:	f43f aeb7 	beq.w	8000dfe <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001090:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001092:	6a2b      	ldr	r3, [r5, #32]
 8001094:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001098:	429a      	cmp	r2, r3
 800109a:	f47f ae71 	bne.w	8000d80 <HAL_RCC_OscConfig+0x8>
 800109e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010a0:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80010a4:	1ac0      	subs	r0, r0, r3
 80010a6:	bf18      	it	ne
 80010a8:	2001      	movne	r0, #1
 80010aa:	e6a8      	b.n	8000dfe <HAL_RCC_OscConfig+0x86>
 80010ac:	40021000 	.word	0x40021000
 80010b0:	42420060 	.word	0x42420060

080010b4 <HAL_RCC_GetSysClockFreq>:
{
 80010b4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80010b8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010ba:	ac02      	add	r4, sp, #8
 80010bc:	f103 0510 	add.w	r5, r3, #16
 80010c0:	4622      	mov	r2, r4
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	6859      	ldr	r1, [r3, #4]
 80010c6:	3308      	adds	r3, #8
 80010c8:	c203      	stmia	r2!, {r0, r1}
 80010ca:	42ab      	cmp	r3, r5
 80010cc:	4614      	mov	r4, r2
 80010ce:	d1f7      	bne.n	80010c0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010d0:	2301      	movs	r3, #1
 80010d2:	f88d 3004 	strb.w	r3, [sp, #4]
 80010d6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80010d8:	4911      	ldr	r1, [pc, #68]	; (8001120 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010da:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80010de:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80010e0:	f003 020c 	and.w	r2, r3, #12
 80010e4:	2a08      	cmp	r2, #8
 80010e6:	d117      	bne.n	8001118 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010e8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80010ec:	a806      	add	r0, sp, #24
 80010ee:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010f0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010f2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010f6:	d50c      	bpl.n	8001112 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010f8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010fa:	480a      	ldr	r0, [pc, #40]	; (8001124 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010fc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001100:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001102:	aa06      	add	r2, sp, #24
 8001104:	4413      	add	r3, r2
 8001106:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800110a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800110e:	b007      	add	sp, #28
 8001110:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_RCC_GetSysClockFreq+0x74>)
 8001114:	4350      	muls	r0, r2
 8001116:	e7fa      	b.n	800110e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800111a:	e7f8      	b.n	800110e <HAL_RCC_GetSysClockFreq+0x5a>
 800111c:	08004968 	.word	0x08004968
 8001120:	40021000 	.word	0x40021000
 8001124:	007a1200 	.word	0x007a1200
 8001128:	003d0900 	.word	0x003d0900

0800112c <HAL_RCC_ClockConfig>:
{
 800112c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001130:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001132:	4604      	mov	r4, r0
 8001134:	b910      	cbnz	r0, 800113c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001136:	2001      	movs	r0, #1
 8001138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800113c:	4a45      	ldr	r2, [pc, #276]	; (8001254 <HAL_RCC_ClockConfig+0x128>)
 800113e:	6813      	ldr	r3, [r2, #0]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	428b      	cmp	r3, r1
 8001146:	d329      	bcc.n	800119c <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001148:	6821      	ldr	r1, [r4, #0]
 800114a:	078e      	lsls	r6, r1, #30
 800114c:	d431      	bmi.n	80011b2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114e:	07ca      	lsls	r2, r1, #31
 8001150:	d444      	bmi.n	80011dc <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001152:	4a40      	ldr	r2, [pc, #256]	; (8001254 <HAL_RCC_ClockConfig+0x128>)
 8001154:	6813      	ldr	r3, [r2, #0]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	429d      	cmp	r5, r3
 800115c:	d367      	bcc.n	800122e <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800115e:	6822      	ldr	r2, [r4, #0]
 8001160:	4d3d      	ldr	r5, [pc, #244]	; (8001258 <HAL_RCC_ClockConfig+0x12c>)
 8001162:	f012 0f04 	tst.w	r2, #4
 8001166:	d16e      	bne.n	8001246 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001168:	0713      	lsls	r3, r2, #28
 800116a:	d506      	bpl.n	800117a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800116c:	686b      	ldr	r3, [r5, #4]
 800116e:	6922      	ldr	r2, [r4, #16]
 8001170:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001174:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001178:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800117a:	f7ff ff9b 	bl	80010b4 <HAL_RCC_GetSysClockFreq>
 800117e:	686b      	ldr	r3, [r5, #4]
 8001180:	4a36      	ldr	r2, [pc, #216]	; (800125c <HAL_RCC_ClockConfig+0x130>)
 8001182:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001186:	5cd3      	ldrb	r3, [r2, r3]
 8001188:	40d8      	lsrs	r0, r3
 800118a:	4b35      	ldr	r3, [pc, #212]	; (8001260 <HAL_RCC_ClockConfig+0x134>)
 800118c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800118e:	4b35      	ldr	r3, [pc, #212]	; (8001264 <HAL_RCC_ClockConfig+0x138>)
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	f7fe ffe3 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8001196:	2000      	movs	r0, #0
 8001198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119c:	6813      	ldr	r3, [r2, #0]
 800119e:	f023 0307 	bic.w	r3, r3, #7
 80011a2:	430b      	orrs	r3, r1
 80011a4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a6:	6813      	ldr	r3, [r2, #0]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	4299      	cmp	r1, r3
 80011ae:	d1c2      	bne.n	8001136 <HAL_RCC_ClockConfig+0xa>
 80011b0:	e7ca      	b.n	8001148 <HAL_RCC_ClockConfig+0x1c>
 80011b2:	4b29      	ldr	r3, [pc, #164]	; (8001258 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b8:	bf1e      	ittt	ne
 80011ba:	685a      	ldrne	r2, [r3, #4]
 80011bc:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80011c0:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c2:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c4:	bf42      	ittt	mi
 80011c6:	685a      	ldrmi	r2, [r3, #4]
 80011c8:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80011cc:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	68a0      	ldr	r0, [r4, #8]
 80011d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80011d6:	4302      	orrs	r2, r0
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	e7b8      	b.n	800114e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011dc:	6862      	ldr	r2, [r4, #4]
 80011de:	4e1e      	ldr	r6, [pc, #120]	; (8001258 <HAL_RCC_ClockConfig+0x12c>)
 80011e0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e4:	d11b      	bne.n	800121e <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ea:	d0a4      	beq.n	8001136 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ec:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ee:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f2:	f023 0303 	bic.w	r3, r3, #3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80011fa:	f7fe fff1 	bl	80001e0 <HAL_GetTick>
 80011fe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001200:	6873      	ldr	r3, [r6, #4]
 8001202:	6862      	ldr	r2, [r4, #4]
 8001204:	f003 030c 	and.w	r3, r3, #12
 8001208:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800120c:	d0a1      	beq.n	8001152 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800120e:	f7fe ffe7 	bl	80001e0 <HAL_GetTick>
 8001212:	1bc0      	subs	r0, r0, r7
 8001214:	4540      	cmp	r0, r8
 8001216:	d9f3      	bls.n	8001200 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001218:	2003      	movs	r0, #3
}
 800121a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800121e:	2a02      	cmp	r2, #2
 8001220:	d102      	bne.n	8001228 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001222:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001226:	e7e0      	b.n	80011ea <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001228:	f013 0f02 	tst.w	r3, #2
 800122c:	e7dd      	b.n	80011ea <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122e:	6813      	ldr	r3, [r2, #0]
 8001230:	f023 0307 	bic.w	r3, r3, #7
 8001234:	432b      	orrs	r3, r5
 8001236:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001238:	6813      	ldr	r3, [r2, #0]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	429d      	cmp	r5, r3
 8001240:	f47f af79 	bne.w	8001136 <HAL_RCC_ClockConfig+0xa>
 8001244:	e78b      	b.n	800115e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001246:	686b      	ldr	r3, [r5, #4]
 8001248:	68e1      	ldr	r1, [r4, #12]
 800124a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800124e:	430b      	orrs	r3, r1
 8001250:	606b      	str	r3, [r5, #4]
 8001252:	e789      	b.n	8001168 <HAL_RCC_ClockConfig+0x3c>
 8001254:	40022000 	.word	0x40022000
 8001258:	40021000 	.word	0x40021000
 800125c:	08004d8d 	.word	0x08004d8d
 8001260:	20000074 	.word	0x20000074
 8001264:	20000004 	.word	0x20000004

08001268 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <HAL_RCC_GetPCLK1Freq+0x14>)
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <HAL_RCC_GetPCLK1Freq+0x18>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001272:	5cd3      	ldrb	r3, [r2, r3]
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001276:	6810      	ldr	r0, [r2, #0]
}
 8001278:	40d8      	lsrs	r0, r3
 800127a:	4770      	bx	lr
 800127c:	40021000 	.word	0x40021000
 8001280:	08004d9d 	.word	0x08004d9d
 8001284:	20000074 	.word	0x20000074

08001288 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <HAL_RCC_GetPCLK2Freq+0x14>)
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001292:	5cd3      	ldrb	r3, [r2, r3]
 8001294:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001296:	6810      	ldr	r0, [r2, #0]
}
 8001298:	40d8      	lsrs	r0, r3
 800129a:	4770      	bx	lr
 800129c:	40021000 	.word	0x40021000
 80012a0:	08004d9d 	.word	0x08004d9d
 80012a4:	20000074 	.word	0x20000074

080012a8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80012a8:	6803      	ldr	r3, [r0, #0]
{
 80012aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80012ae:	07d9      	lsls	r1, r3, #31
{
 80012b0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80012b2:	d520      	bpl.n	80012f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b4:	4c35      	ldr	r4, [pc, #212]	; (800138c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80012b6:	69e3      	ldr	r3, [r4, #28]
 80012b8:	00da      	lsls	r2, r3, #3
 80012ba:	d432      	bmi.n	8001322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80012bc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	69e3      	ldr	r3, [r4, #28]
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c4:	61e3      	str	r3, [r4, #28]
 80012c6:	69e3      	ldr	r3, [r4, #28]
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d0:	4e2f      	ldr	r6, [pc, #188]	; (8001390 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80012d2:	6833      	ldr	r3, [r6, #0]
 80012d4:	05db      	lsls	r3, r3, #23
 80012d6:	d526      	bpl.n	8001326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80012d8:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012da:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80012de:	d136      	bne.n	800134e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80012e0:	6a23      	ldr	r3, [r4, #32]
 80012e2:	686a      	ldr	r2, [r5, #4]
 80012e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012e8:	4313      	orrs	r3, r2
 80012ea:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012ec:	b11f      	cbz	r7, 80012f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ee:	69e3      	ldr	r3, [r4, #28]
 80012f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80012f6:	6828      	ldr	r0, [r5, #0]
 80012f8:	0783      	lsls	r3, r0, #30
 80012fa:	d506      	bpl.n	800130a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80012fc:	4a23      	ldr	r2, [pc, #140]	; (800138c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80012fe:	68a9      	ldr	r1, [r5, #8]
 8001300:	6853      	ldr	r3, [r2, #4]
 8001302:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001306:	430b      	orrs	r3, r1
 8001308:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800130a:	f010 0010 	ands.w	r0, r0, #16
 800130e:	d01b      	beq.n	8001348 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001310:	4a1e      	ldr	r2, [pc, #120]	; (800138c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001312:	68e9      	ldr	r1, [r5, #12]
 8001314:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001316:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001318:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800131c:	430b      	orrs	r3, r1
 800131e:	6053      	str	r3, [r2, #4]
 8001320:	e012      	b.n	8001348 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001322:	2700      	movs	r7, #0
 8001324:	e7d4      	b.n	80012d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001326:	6833      	ldr	r3, [r6, #0]
 8001328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800132e:	f7fe ff57 	bl	80001e0 <HAL_GetTick>
 8001332:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001334:	6833      	ldr	r3, [r6, #0]
 8001336:	05d8      	lsls	r0, r3, #23
 8001338:	d4ce      	bmi.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133a:	f7fe ff51 	bl	80001e0 <HAL_GetTick>
 800133e:	eba0 0008 	sub.w	r0, r0, r8
 8001342:	2864      	cmp	r0, #100	; 0x64
 8001344:	d9f6      	bls.n	8001334 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001346:	2003      	movs	r0, #3
}
 8001348:	b002      	add	sp, #8
 800134a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800134e:	686a      	ldr	r2, [r5, #4]
 8001350:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001354:	4293      	cmp	r3, r2
 8001356:	d0c3      	beq.n	80012e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001358:	2001      	movs	r0, #1
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800135c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800135e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001360:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001362:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001366:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001368:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800136a:	07d9      	lsls	r1, r3, #31
 800136c:	d5b8      	bpl.n	80012e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800136e:	f7fe ff37 	bl	80001e0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001372:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001376:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001378:	6a23      	ldr	r3, [r4, #32]
 800137a:	079a      	lsls	r2, r3, #30
 800137c:	d4b0      	bmi.n	80012e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137e:	f7fe ff2f 	bl	80001e0 <HAL_GetTick>
 8001382:	1b80      	subs	r0, r0, r6
 8001384:	4540      	cmp	r0, r8
 8001386:	d9f7      	bls.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001388:	e7dd      	b.n	8001346 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000
 8001390:	40007000 	.word	0x40007000
 8001394:	42420440 	.word	0x42420440

08001398 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001398:	6a03      	ldr	r3, [r0, #32]
{
 800139a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013a2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80013a6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80013a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80013aa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80013ae:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80013b0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80013b2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80013b6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80013b8:	4d0a      	ldr	r5, [pc, #40]	; (80013e4 <TIM_OC1_SetConfig+0x4c>)
 80013ba:	42a8      	cmp	r0, r5
 80013bc:	d10b      	bne.n	80013d6 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80013be:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80013c0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80013c4:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80013c6:	698e      	ldr	r6, [r1, #24]
 80013c8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80013ca:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80013ce:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80013d0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80013d4:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013d6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80013d8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80013da:	684a      	ldr	r2, [r1, #4]
 80013dc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013de:	6203      	str	r3, [r0, #32]
 80013e0:	bd70      	pop	{r4, r5, r6, pc}
 80013e2:	bf00      	nop
 80013e4:	40012c00 	.word	0x40012c00

080013e8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80013e8:	6a03      	ldr	r3, [r0, #32]
{
 80013ea:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80013ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013f2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013f6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80013f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80013fa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80013fe:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001400:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001402:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001406:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800140a:	4d0b      	ldr	r5, [pc, #44]	; (8001438 <TIM_OC3_SetConfig+0x50>)
 800140c:	42a8      	cmp	r0, r5
 800140e:	d10d      	bne.n	800142c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001410:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001412:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001416:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800141a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800141c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800141e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001422:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001428:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800142c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800142e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001430:	684a      	ldr	r2, [r1, #4]
 8001432:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001434:	6203      	str	r3, [r0, #32]
 8001436:	bd70      	pop	{r4, r5, r6, pc}
 8001438:	40012c00 	.word	0x40012c00

0800143c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800143c:	6a03      	ldr	r3, [r0, #32]
{
 800143e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001440:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001444:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001446:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001448:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800144a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800144c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800144e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001452:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001456:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001458:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800145c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001460:	4d06      	ldr	r5, [pc, #24]	; (800147c <TIM_OC4_SetConfig+0x40>)
 8001462:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001464:	bf02      	ittt	eq
 8001466:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001468:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800146c:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001470:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001472:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001474:	684a      	ldr	r2, [r1, #4]
 8001476:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001478:	6203      	str	r3, [r0, #32]
 800147a:	bd30      	pop	{r4, r5, pc}
 800147c:	40012c00 	.word	0x40012c00

08001480 <HAL_TIM_Base_MspInit>:
 8001480:	4770      	bx	lr

08001482 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001482:	2302      	movs	r3, #2
 8001484:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001488:	6803      	ldr	r3, [r0, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001490:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001492:	bf1e      	ittt	ne
 8001494:	681a      	ldrne	r2, [r3, #0]
 8001496:	f042 0201 	orrne.w	r2, r2, #1
 800149a:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800149c:	2301      	movs	r3, #1
 800149e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80014a2:	2000      	movs	r0, #0
 80014a4:	4770      	bx	lr

080014a6 <HAL_TIM_PWM_MspInit>:
 80014a6:	4770      	bx	lr

080014a8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014a8:	4a1a      	ldr	r2, [pc, #104]	; (8001514 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80014aa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014ac:	4290      	cmp	r0, r2
 80014ae:	d00a      	beq.n	80014c6 <TIM_Base_SetConfig+0x1e>
 80014b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80014b4:	d007      	beq.n	80014c6 <TIM_Base_SetConfig+0x1e>
 80014b6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80014ba:	4290      	cmp	r0, r2
 80014bc:	d003      	beq.n	80014c6 <TIM_Base_SetConfig+0x1e>
 80014be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014c2:	4290      	cmp	r0, r2
 80014c4:	d115      	bne.n	80014f2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80014c6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80014cc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014ce:	4a11      	ldr	r2, [pc, #68]	; (8001514 <TIM_Base_SetConfig+0x6c>)
 80014d0:	4290      	cmp	r0, r2
 80014d2:	d00a      	beq.n	80014ea <TIM_Base_SetConfig+0x42>
 80014d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80014d8:	d007      	beq.n	80014ea <TIM_Base_SetConfig+0x42>
 80014da:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80014de:	4290      	cmp	r0, r2
 80014e0:	d003      	beq.n	80014ea <TIM_Base_SetConfig+0x42>
 80014e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014e6:	4290      	cmp	r0, r2
 80014e8:	d103      	bne.n	80014f2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014ea:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80014ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014f2:	694a      	ldr	r2, [r1, #20]
 80014f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014f8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80014fa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014fc:	688b      	ldr	r3, [r1, #8]
 80014fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001500:	680b      	ldr	r3, [r1, #0]
 8001502:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <TIM_Base_SetConfig+0x6c>)
 8001506:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001508:	bf04      	itt	eq
 800150a:	690b      	ldreq	r3, [r1, #16]
 800150c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800150e:	2301      	movs	r3, #1
 8001510:	6143      	str	r3, [r0, #20]
 8001512:	4770      	bx	lr
 8001514:	40012c00 	.word	0x40012c00

08001518 <HAL_TIM_Base_Init>:
{
 8001518:	b510      	push	{r4, lr}
  if (htim == NULL)
 800151a:	4604      	mov	r4, r0
 800151c:	b1a0      	cbz	r0, 8001548 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800151e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001522:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001526:	b91b      	cbnz	r3, 8001530 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001528:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800152c:	f7ff ffa8 	bl	8001480 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001530:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001532:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001534:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001538:	1d21      	adds	r1, r4, #4
 800153a:	f7ff ffb5 	bl	80014a8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800153e:	2301      	movs	r3, #1
  return HAL_OK;
 8001540:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001542:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001546:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001548:	2001      	movs	r0, #1
}
 800154a:	bd10      	pop	{r4, pc}

0800154c <HAL_TIM_PWM_Init>:
{
 800154c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800154e:	4604      	mov	r4, r0
 8001550:	b1a0      	cbz	r0, 800157c <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001552:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001556:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800155a:	b91b      	cbnz	r3, 8001564 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800155c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001560:	f7ff ffa1 	bl	80014a6 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001564:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001566:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001568:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800156c:	1d21      	adds	r1, r4, #4
 800156e:	f7ff ff9b 	bl	80014a8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001572:	2301      	movs	r3, #1
  return HAL_OK;
 8001574:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001576:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800157a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800157c:	2001      	movs	r0, #1
}
 800157e:	bd10      	pop	{r4, pc}

08001580 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001580:	6a03      	ldr	r3, [r0, #32]
{
 8001582:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001584:	f023 0310 	bic.w	r3, r3, #16
 8001588:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800158a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800158c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800158e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001590:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001592:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001596:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800159a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800159c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80015a0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80015a4:	4d0b      	ldr	r5, [pc, #44]	; (80015d4 <TIM_OC2_SetConfig+0x54>)
 80015a6:	42a8      	cmp	r0, r5
 80015a8:	d10d      	bne.n	80015c6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80015aa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80015ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80015b0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80015b4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80015b6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80015b8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80015bc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80015be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80015c2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80015c6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80015c8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80015ca:	684a      	ldr	r2, [r1, #4]
 80015cc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80015ce:	6203      	str	r3, [r0, #32]
 80015d0:	bd70      	pop	{r4, r5, r6, pc}
 80015d2:	bf00      	nop
 80015d4:	40012c00 	.word	0x40012c00

080015d8 <HAL_TIM_PWM_ConfigChannel>:
{
 80015d8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80015da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80015de:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	f04f 0002 	mov.w	r0, #2
 80015e6:	d025      	beq.n	8001634 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80015e8:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80015ea:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80015ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80015f2:	2a0c      	cmp	r2, #12
 80015f4:	d818      	bhi.n	8001628 <HAL_TIM_PWM_ConfigChannel+0x50>
 80015f6:	e8df f002 	tbb	[pc, r2]
 80015fa:	1707      	.short	0x1707
 80015fc:	171e1717 	.word	0x171e1717
 8001600:	172f1717 	.word	0x172f1717
 8001604:	1717      	.short	0x1717
 8001606:	40          	.byte	0x40
 8001607:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001608:	6820      	ldr	r0, [r4, #0]
 800160a:	f7ff fec5 	bl	8001398 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800160e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001610:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001612:	699a      	ldr	r2, [r3, #24]
 8001614:	f042 0208 	orr.w	r2, r2, #8
 8001618:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800161a:	699a      	ldr	r2, [r3, #24]
 800161c:	f022 0204 	bic.w	r2, r2, #4
 8001620:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001622:	699a      	ldr	r2, [r3, #24]
 8001624:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001626:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001628:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800162a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800162c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001630:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001634:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001636:	6820      	ldr	r0, [r4, #0]
 8001638:	f7ff ffa2 	bl	8001580 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800163c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800163e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001640:	699a      	ldr	r2, [r3, #24]
 8001642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001648:	699a      	ldr	r2, [r3, #24]
 800164a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800164e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001650:	699a      	ldr	r2, [r3, #24]
 8001652:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001656:	e7e6      	b.n	8001626 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001658:	6820      	ldr	r0, [r4, #0]
 800165a:	f7ff fec5 	bl	80013e8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800165e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001660:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001662:	69da      	ldr	r2, [r3, #28]
 8001664:	f042 0208 	orr.w	r2, r2, #8
 8001668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800166a:	69da      	ldr	r2, [r3, #28]
 800166c:	f022 0204 	bic.w	r2, r2, #4
 8001670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001672:	69da      	ldr	r2, [r3, #28]
 8001674:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001676:	61da      	str	r2, [r3, #28]
      break;
 8001678:	e7d6      	b.n	8001628 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800167a:	6820      	ldr	r0, [r4, #0]
 800167c:	f7ff fede 	bl	800143c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001680:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001682:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001684:	69da      	ldr	r2, [r3, #28]
 8001686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800168a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001692:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001694:	69da      	ldr	r2, [r3, #28]
 8001696:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800169a:	e7ec      	b.n	8001676 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800169c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800169c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800169e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016a0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016a2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016a6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80016aa:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80016ac:	6083      	str	r3, [r0, #8]
 80016ae:	bd10      	pop	{r4, pc}

080016b0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80016b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80016b4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80016b6:	2b01      	cmp	r3, #1
{
 80016b8:	4604      	mov	r4, r0
 80016ba:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80016be:	d019      	beq.n	80016f4 <HAL_TIM_ConfigClockSource+0x44>
 80016c0:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80016c2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80016c6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80016c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80016cc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80016d6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80016d8:	680b      	ldr	r3, [r1, #0]
 80016da:	2b40      	cmp	r3, #64	; 0x40
 80016dc:	d065      	beq.n	80017aa <HAL_TIM_ConfigClockSource+0xfa>
 80016de:	d815      	bhi.n	800170c <HAL_TIM_ConfigClockSource+0x5c>
 80016e0:	2b10      	cmp	r3, #16
 80016e2:	d00c      	beq.n	80016fe <HAL_TIM_ConfigClockSource+0x4e>
 80016e4:	d807      	bhi.n	80016f6 <HAL_TIM_ConfigClockSource+0x46>
 80016e6:	b153      	cbz	r3, 80016fe <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80016e8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80016ea:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80016ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80016f0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80016f4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80016f6:	2b20      	cmp	r3, #32
 80016f8:	d001      	beq.n	80016fe <HAL_TIM_ConfigClockSource+0x4e>
 80016fa:	2b30      	cmp	r3, #48	; 0x30
 80016fc:	d1f4      	bne.n	80016e8 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80016fe:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001700:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001704:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001708:	4313      	orrs	r3, r2
 800170a:	e01a      	b.n	8001742 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800170c:	2b60      	cmp	r3, #96	; 0x60
 800170e:	d034      	beq.n	800177a <HAL_TIM_ConfigClockSource+0xca>
 8001710:	d819      	bhi.n	8001746 <HAL_TIM_ConfigClockSource+0x96>
 8001712:	2b50      	cmp	r3, #80	; 0x50
 8001714:	d1e8      	bne.n	80016e8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001716:	684a      	ldr	r2, [r1, #4]
 8001718:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800171a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800171c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800171e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001722:	f025 0501 	bic.w	r5, r5, #1
 8001726:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001728:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800172a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800172c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001730:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001734:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001736:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001738:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800173a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800173e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001742:	6083      	str	r3, [r0, #8]
 8001744:	e7d0      	b.n	80016e8 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001746:	2b70      	cmp	r3, #112	; 0x70
 8001748:	d00c      	beq.n	8001764 <HAL_TIM_ConfigClockSource+0xb4>
 800174a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800174e:	d1cb      	bne.n	80016e8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001750:	68cb      	ldr	r3, [r1, #12]
 8001752:	684a      	ldr	r2, [r1, #4]
 8001754:	6889      	ldr	r1, [r1, #8]
 8001756:	f7ff ffa1 	bl	800169c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800175a:	6822      	ldr	r2, [r4, #0]
 800175c:	6893      	ldr	r3, [r2, #8]
 800175e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001762:	e008      	b.n	8001776 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001764:	68cb      	ldr	r3, [r1, #12]
 8001766:	684a      	ldr	r2, [r1, #4]
 8001768:	6889      	ldr	r1, [r1, #8]
 800176a:	f7ff ff97 	bl	800169c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800176e:	6822      	ldr	r2, [r4, #0]
 8001770:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001772:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001776:	6093      	str	r3, [r2, #8]
      break;
 8001778:	e7b6      	b.n	80016e8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800177a:	684d      	ldr	r5, [r1, #4]
 800177c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800177e:	6a01      	ldr	r1, [r0, #32]
 8001780:	f021 0110 	bic.w	r1, r1, #16
 8001784:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001786:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001788:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800178a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800178e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001792:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001796:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800179a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800179c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800179e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80017a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017a4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80017a8:	e7cb      	b.n	8001742 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017aa:	684a      	ldr	r2, [r1, #4]
 80017ac:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80017ae:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017b0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80017b2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017b6:	f025 0501 	bic.w	r5, r5, #1
 80017ba:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017bc:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80017be:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017c4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80017c8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80017ca:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80017cc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80017ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017d2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80017d6:	e7b4      	b.n	8001742 <HAL_TIM_ConfigClockSource+0x92>

080017d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80017d8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80017da:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80017dc:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80017de:	f001 011f 	and.w	r1, r1, #31
 80017e2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80017e4:	ea23 0304 	bic.w	r3, r3, r4
 80017e8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80017ea:	6a03      	ldr	r3, [r0, #32]
 80017ec:	408a      	lsls	r2, r1
 80017ee:	431a      	orrs	r2, r3
 80017f0:	6202      	str	r2, [r0, #32]
 80017f2:	bd10      	pop	{r4, pc}

080017f4 <HAL_TIM_PWM_Start>:
{
 80017f4:	b510      	push	{r4, lr}
 80017f6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80017f8:	2201      	movs	r2, #1
 80017fa:	6800      	ldr	r0, [r0, #0]
 80017fc:	f7ff ffec 	bl	80017d8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_TIM_PWM_Start+0x34>)
}
 8001804:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001806:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001808:	bf02      	ittt	eq
 800180a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800180c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001810:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001818:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 800181a:	bf1e      	ittt	ne
 800181c:	681a      	ldrne	r2, [r3, #0]
 800181e:	f042 0201 	orrne.w	r2, r2, #1
 8001822:	601a      	strne	r2, [r3, #0]
}
 8001824:	bd10      	pop	{r4, pc}
 8001826:	bf00      	nop
 8001828:	40012c00 	.word	0x40012c00

0800182c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800182c:	6803      	ldr	r3, [r0, #0]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001834:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	f022 0201 	bic.w	r2, r2, #1
 800183c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800183e:	2320      	movs	r3, #32
 8001840:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001844:	4770      	bx	lr
	...

08001848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001848:	b538      	push	{r3, r4, r5, lr}
 800184a:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800184c:	6803      	ldr	r3, [r0, #0]
 800184e:	68c1      	ldr	r1, [r0, #12]
 8001850:	691a      	ldr	r2, [r3, #16]
 8001852:	2419      	movs	r4, #25
 8001854:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001858:	430a      	orrs	r2, r1
 800185a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800185c:	6882      	ldr	r2, [r0, #8]
 800185e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001860:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001862:	4302      	orrs	r2, r0
 8001864:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001866:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800186a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800186e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001870:	430a      	orrs	r2, r1
 8001872:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	69a9      	ldr	r1, [r5, #24]
 8001878:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800187c:	430a      	orrs	r2, r1
 800187e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <UART_SetConfig+0x70>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d114      	bne.n	80018b0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001886:	f7ff fcff 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800188a:	4360      	muls	r0, r4
 800188c:	686c      	ldr	r4, [r5, #4]
 800188e:	2264      	movs	r2, #100	; 0x64
 8001890:	00a4      	lsls	r4, r4, #2
 8001892:	fbb0 f0f4 	udiv	r0, r0, r4
 8001896:	fbb0 f4f2 	udiv	r4, r0, r2
 800189a:	fb02 0314 	mls	r3, r2, r4, r0
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	3332      	adds	r3, #50	; 0x32
 80018a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80018a6:	6829      	ldr	r1, [r5, #0]
 80018a8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80018ac:	608b      	str	r3, [r1, #8]
 80018ae:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80018b0:	f7ff fcda 	bl	8001268 <HAL_RCC_GetPCLK1Freq>
 80018b4:	e7e9      	b.n	800188a <UART_SetConfig+0x42>
 80018b6:	bf00      	nop
 80018b8:	40013800 	.word	0x40013800

080018bc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80018bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018be:	4604      	mov	r4, r0
 80018c0:	460e      	mov	r6, r1
 80018c2:	4617      	mov	r7, r2
 80018c4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018c6:	6821      	ldr	r1, [r4, #0]
 80018c8:	680b      	ldr	r3, [r1, #0]
 80018ca:	ea36 0303 	bics.w	r3, r6, r3
 80018ce:	d101      	bne.n	80018d4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80018d0:	2000      	movs	r0, #0
}
 80018d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80018d4:	1c6b      	adds	r3, r5, #1
 80018d6:	d0f7      	beq.n	80018c8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018d8:	b995      	cbnz	r5, 8001900 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018da:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80018dc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80018e4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80018ee:	2320      	movs	r3, #32
 80018f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80018f4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80018f8:	2300      	movs	r3, #0
 80018fa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80018fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001900:	f7fe fc6e 	bl	80001e0 <HAL_GetTick>
 8001904:	1bc0      	subs	r0, r0, r7
 8001906:	4285      	cmp	r5, r0
 8001908:	d2dd      	bcs.n	80018c6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800190a:	e7e6      	b.n	80018da <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800190c <HAL_UART_Init>:
{
 800190c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800190e:	4604      	mov	r4, r0
 8001910:	b340      	cbz	r0, 8001964 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001912:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001916:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800191a:	b91b      	cbnz	r3, 8001924 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800191c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001920:	f002 f86c 	bl	80039fc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001924:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001926:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001928:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800192c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800192e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001934:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001936:	f7ff ff87 	bl	8001848 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800193a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800193c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800193e:	691a      	ldr	r2, [r3, #16]
 8001940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800194c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001954:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001956:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001958:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800195a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800195e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001962:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001964:	2001      	movs	r0, #1
}
 8001966:	bd10      	pop	{r4, pc}

08001968 <HAL_HalfDuplex_Init>:
{
 8001968:	b510      	push	{r4, lr}
  if (huart == NULL)
 800196a:	4604      	mov	r4, r0
 800196c:	b360      	cbz	r0, 80019c8 <HAL_HalfDuplex_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800196e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001972:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001976:	b91b      	cbnz	r3, 8001980 <HAL_HalfDuplex_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001978:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800197c:	f002 f83e 	bl	80039fc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001980:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001982:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001984:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001988:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800198a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800198c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001990:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001992:	f7ff ff59 	bl	8001848 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001996:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001998:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80019a2:	695a      	ldr	r2, [r3, #20]
 80019a4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80019a8:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80019aa:	695a      	ldr	r2, [r3, #20]
 80019ac:	f042 0208 	orr.w	r2, r2, #8
 80019b0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019b8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80019ba:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019bc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80019be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80019c2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80019c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019c8:	2001      	movs	r0, #1
}
 80019ca:	bd10      	pop	{r4, pc}

080019cc <HAL_UART_Transmit>:
{
 80019cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019d0:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80019d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80019d6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80019d8:	2b20      	cmp	r3, #32
{
 80019da:	460d      	mov	r5, r1
 80019dc:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80019de:	d14e      	bne.n	8001a7e <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 80019e0:	2900      	cmp	r1, #0
 80019e2:	d049      	beq.n	8001a78 <HAL_UART_Transmit+0xac>
 80019e4:	2a00      	cmp	r2, #0
 80019e6:	d047      	beq.n	8001a78 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80019e8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d046      	beq.n	8001a7e <HAL_UART_Transmit+0xb2>
 80019f0:	2301      	movs	r3, #1
 80019f2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019fa:	2321      	movs	r3, #33	; 0x21
 80019fc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001a00:	f7fe fbee 	bl	80001e0 <HAL_GetTick>
 8001a04:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001a06:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a0a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a0e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b96b      	cbnz	r3, 8001a30 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a14:	463b      	mov	r3, r7
 8001a16:	4632      	mov	r2, r6
 8001a18:	2140      	movs	r1, #64	; 0x40
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f7ff ff4e 	bl	80018bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a20:	b9a8      	cbnz	r0, 8001a4e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001a22:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001a24:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001a28:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001a30:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a32:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a3a:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a3c:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a42:	4620      	mov	r0, r4
 8001a44:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a46:	d10e      	bne.n	8001a66 <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a48:	f7ff ff38 	bl	80018bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a4c:	b110      	cbz	r0, 8001a54 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001a4e:	2003      	movs	r0, #3
 8001a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001a54:	882b      	ldrh	r3, [r5, #0]
 8001a56:	6822      	ldr	r2, [r4, #0]
 8001a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a5c:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001a5e:	6923      	ldr	r3, [r4, #16]
 8001a60:	b943      	cbnz	r3, 8001a74 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8001a62:	3502      	adds	r5, #2
 8001a64:	e7d3      	b.n	8001a0e <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a66:	f7ff ff29 	bl	80018bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	d1ef      	bne.n	8001a4e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001a6e:	6823      	ldr	r3, [r4, #0]
 8001a70:	782a      	ldrb	r2, [r5, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	3501      	adds	r5, #1
 8001a76:	e7ca      	b.n	8001a0e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001a78:	2001      	movs	r0, #1
 8001a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001a7e:	2002      	movs	r0, #2
}
 8001a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a84 <HAL_UART_Receive>:
{
 8001a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a88:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a8a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001a8e:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a90:	2b20      	cmp	r3, #32
{
 8001a92:	460d      	mov	r5, r1
 8001a94:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a96:	d151      	bne.n	8001b3c <HAL_UART_Receive+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8001a98:	2900      	cmp	r1, #0
 8001a9a:	d04c      	beq.n	8001b36 <HAL_UART_Receive+0xb2>
 8001a9c:	2a00      	cmp	r2, #0
 8001a9e:	d04a      	beq.n	8001b36 <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 8001aa0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d049      	beq.n	8001b3c <HAL_UART_Receive+0xb8>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ab2:	2322      	movs	r3, #34	; 0x22
 8001ab4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8001ab8:	f7fe fb92 	bl	80001e0 <HAL_GetTick>
 8001abc:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 8001abe:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ac2:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001ac6:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8001ac8:	b280      	uxth	r0, r0
 8001aca:	b930      	cbnz	r0, 8001ada <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8001acc:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001ace:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 8001ad2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8001ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8001ada:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001adc:	4632      	mov	r2, r6
      huart->RxXferCount--;
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ae4:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ae6:	2120      	movs	r1, #32
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001aec:	4620      	mov	r0, r4
 8001aee:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001af0:	d112      	bne.n	8001b18 <HAL_UART_Receive+0x94>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001af2:	f7ff fee3 	bl	80018bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001af6:	b110      	cbz	r0, 8001afe <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8001af8:	2003      	movs	r0, #3
 8001afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001afe:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b00:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b02:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b04:	b922      	cbnz	r2, 8001b10 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b0a:	f825 3b02 	strh.w	r3, [r5], #2
 8001b0e:	e7da      	b.n	8001ac6 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f825 3b01 	strh.w	r3, [r5], #1
 8001b16:	e7d6      	b.n	8001ac6 <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b18:	f7ff fed0 	bl	80018bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	d1eb      	bne.n	8001af8 <HAL_UART_Receive+0x74>
 8001b20:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b22:	6921      	ldr	r1, [r4, #16]
 8001b24:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b26:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b28:	b911      	cbnz	r1, 8001b30 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b2a:	702b      	strb	r3, [r5, #0]
 8001b2c:	4615      	mov	r5, r2
 8001b2e:	e7ca      	b.n	8001ac6 <HAL_UART_Receive+0x42>
 8001b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b34:	e7f9      	b.n	8001b2a <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 8001b36:	2001      	movs	r0, #1
 8001b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001b3c:	2002      	movs	r0, #2
}
 8001b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001b42 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b42:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001b46:	2b20      	cmp	r3, #32
 8001b48:	d120      	bne.n	8001b8c <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8001b4a:	b1e9      	cbz	r1, 8001b88 <HAL_UART_Receive_IT+0x46>
 8001b4c:	b1e2      	cbz	r2, 8001b88 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8001b4e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d01a      	beq.n	8001b8c <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001b56:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001b58:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5a:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b5c:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b60:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001b64:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001b66:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001b68:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001b6a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001b6e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001b72:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001b74:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8001b76:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001b78:	f041 0101 	orr.w	r1, r1, #1
 8001b7c:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001b7e:	68d1      	ldr	r1, [r2, #12]
 8001b80:	f041 0120 	orr.w	r1, r1, #32
 8001b84:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001b86:	4770      	bx	lr
      return HAL_ERROR;
 8001b88:	2001      	movs	r0, #1
 8001b8a:	4770      	bx	lr
    return HAL_BUSY;
 8001b8c:	2002      	movs	r0, #2
}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_UART_TxCpltCallback>:
 8001b90:	4770      	bx	lr

08001b92 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b92:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001b96:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b98:	2b22      	cmp	r3, #34	; 0x22
 8001b9a:	d136      	bne.n	8001c0a <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b9c:	6883      	ldr	r3, [r0, #8]
 8001b9e:	6901      	ldr	r1, [r0, #16]
 8001ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba4:	6802      	ldr	r2, [r0, #0]
 8001ba6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ba8:	d123      	bne.n	8001bf2 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001baa:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001bac:	b9e9      	cbnz	r1, 8001bea <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001bae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bb2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001bb6:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001bb8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001bba:	3c01      	subs	r4, #1
 8001bbc:	b2a4      	uxth	r4, r4
 8001bbe:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001bc0:	b98c      	cbnz	r4, 8001be6 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001bc2:	6803      	ldr	r3, [r0, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	f022 0220 	bic.w	r2, r2, #32
 8001bca:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bd2:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001bdc:	2320      	movs	r3, #32
 8001bde:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001be2:	f000 ff9d 	bl	8002b20 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001be6:	2000      	movs	r0, #0
}
 8001be8:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f823 2b01 	strh.w	r2, [r3], #1
 8001bf0:	e7e1      	b.n	8001bb6 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001bf2:	b921      	cbnz	r1, 8001bfe <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001bf4:	1c59      	adds	r1, r3, #1
 8001bf6:	6852      	ldr	r2, [r2, #4]
 8001bf8:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001bfa:	701a      	strb	r2, [r3, #0]
 8001bfc:	e7dc      	b.n	8001bb8 <UART_Receive_IT+0x26>
 8001bfe:	6852      	ldr	r2, [r2, #4]
 8001c00:	1c59      	adds	r1, r3, #1
 8001c02:	6281      	str	r1, [r0, #40]	; 0x28
 8001c04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c08:	e7f7      	b.n	8001bfa <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	bd10      	pop	{r4, pc}

08001c0e <HAL_UART_ErrorCallback>:
 8001c0e:	4770      	bx	lr

08001c10 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c10:	6803      	ldr	r3, [r0, #0]
{
 8001c12:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c14:	681a      	ldr	r2, [r3, #0]
{
 8001c16:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001c18:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c1a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c1c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001c1e:	d107      	bne.n	8001c30 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c20:	0696      	lsls	r6, r2, #26
 8001c22:	d55a      	bpl.n	8001cda <HAL_UART_IRQHandler+0xca>
 8001c24:	068d      	lsls	r5, r1, #26
 8001c26:	d558      	bpl.n	8001cda <HAL_UART_IRQHandler+0xca>
}
 8001c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001c2c:	f7ff bfb1 	b.w	8001b92 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c30:	f015 0501 	ands.w	r5, r5, #1
 8001c34:	d102      	bne.n	8001c3c <HAL_UART_IRQHandler+0x2c>
 8001c36:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001c3a:	d04e      	beq.n	8001cda <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c3c:	07d3      	lsls	r3, r2, #31
 8001c3e:	d505      	bpl.n	8001c4c <HAL_UART_IRQHandler+0x3c>
 8001c40:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c42:	bf42      	ittt	mi
 8001c44:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001c46:	f043 0301 	orrmi.w	r3, r3, #1
 8001c4a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c4c:	0750      	lsls	r0, r2, #29
 8001c4e:	d504      	bpl.n	8001c5a <HAL_UART_IRQHandler+0x4a>
 8001c50:	b11d      	cbz	r5, 8001c5a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c5a:	0793      	lsls	r3, r2, #30
 8001c5c:	d504      	bpl.n	8001c68 <HAL_UART_IRQHandler+0x58>
 8001c5e:	b11d      	cbz	r5, 8001c68 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c68:	0716      	lsls	r6, r2, #28
 8001c6a:	d504      	bpl.n	8001c76 <HAL_UART_IRQHandler+0x66>
 8001c6c:	b11d      	cbz	r5, 8001c76 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d066      	beq.n	8001d4a <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c7c:	0695      	lsls	r5, r2, #26
 8001c7e:	d504      	bpl.n	8001c8a <HAL_UART_IRQHandler+0x7a>
 8001c80:	0688      	lsls	r0, r1, #26
 8001c82:	d502      	bpl.n	8001c8a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001c84:	4620      	mov	r0, r4
 8001c86:	f7ff ff84 	bl	8001b92 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c8a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001c8c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c8e:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c90:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c92:	0711      	lsls	r1, r2, #28
 8001c94:	d402      	bmi.n	8001c9c <HAL_UART_IRQHandler+0x8c>
 8001c96:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001c9a:	d01a      	beq.n	8001cd2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001c9c:	f7ff fdc6 	bl	800182c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	695a      	ldr	r2, [r3, #20]
 8001ca4:	0652      	lsls	r2, r2, #25
 8001ca6:	d510      	bpl.n	8001cca <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ca8:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001caa:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cb0:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001cb2:	b150      	cbz	r0, 8001cca <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <HAL_UART_IRQHandler+0x13c>)
 8001cb6:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001cb8:	f7fe fc28 	bl	800050c <HAL_DMA_Abort_IT>
 8001cbc:	2800      	cmp	r0, #0
 8001cbe:	d044      	beq.n	8001d4a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001cc0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001cc6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001cc8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f7ff ff9f 	bl	8001c0e <HAL_UART_ErrorCallback>
 8001cd0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001cd2:	f7ff ff9c 	bl	8001c0e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd6:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001cd8:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001cda:	0616      	lsls	r6, r2, #24
 8001cdc:	d527      	bpl.n	8001d2e <HAL_UART_IRQHandler+0x11e>
 8001cde:	060d      	lsls	r5, r1, #24
 8001ce0:	d525      	bpl.n	8001d2e <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ce2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001ce6:	2a21      	cmp	r2, #33	; 0x21
 8001ce8:	d12f      	bne.n	8001d4a <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001cea:	68a2      	ldr	r2, [r4, #8]
 8001cec:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001cf0:	6a22      	ldr	r2, [r4, #32]
 8001cf2:	d117      	bne.n	8001d24 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001cf4:	8811      	ldrh	r1, [r2, #0]
 8001cf6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001cfa:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001cfc:	6921      	ldr	r1, [r4, #16]
 8001cfe:	b979      	cbnz	r1, 8001d20 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001d00:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001d02:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001d04:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001d06:	3a01      	subs	r2, #1
 8001d08:	b292      	uxth	r2, r2
 8001d0a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001d0c:	b9ea      	cbnz	r2, 8001d4a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d14:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001d20:	3201      	adds	r2, #1
 8001d22:	e7ee      	b.n	8001d02 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d24:	1c51      	adds	r1, r2, #1
 8001d26:	6221      	str	r1, [r4, #32]
 8001d28:	7812      	ldrb	r2, [r2, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	e7ea      	b.n	8001d04 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d2e:	0650      	lsls	r0, r2, #25
 8001d30:	d50b      	bpl.n	8001d4a <HAL_UART_IRQHandler+0x13a>
 8001d32:	064a      	lsls	r2, r1, #25
 8001d34:	d509      	bpl.n	8001d4a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d36:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001d38:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d3e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001d40:	2320      	movs	r3, #32
 8001d42:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001d46:	f7ff ff23 	bl	8001b90 <HAL_UART_TxCpltCallback>
 8001d4a:	bd70      	pop	{r4, r5, r6, pc}
 8001d4c:	08001d51 	.word	0x08001d51

08001d50 <UART_DMAAbortOnError>:
{
 8001d50:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001d52:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d54:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001d56:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d58:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001d5a:	f7ff ff58 	bl	8001c0e <HAL_UART_ErrorCallback>
 8001d5e:	bd08      	pop	{r3, pc}

08001d60 <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 8001d60:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d011      	beq.n	8001d8c <HAL_HalfDuplex_EnableReceiver+0x2c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001d68:	2324      	movs	r3, #36	; 0x24
  tmpreg = huart->Instance->CR1;
 8001d6a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d6c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpreg = huart->Instance->CR1;
 8001d70:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8001d72:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_RE;
 8001d76:	f043 0304 	orr.w	r3, r3, #4
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001d7a:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8001d82:	2300      	movs	r3, #0
 8001d84:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8001d88:	4618      	mov	r0, r3
 8001d8a:	4770      	bx	lr
  __HAL_LOCK(huart);
 8001d8c:	2002      	movs	r0, #2
}
 8001d8e:	4770      	bx	lr

08001d90 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001d92:	780d      	ldrb	r5, [r1, #0]
{
 8001d94:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001d96:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8001d9a:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001d9c:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8001da0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001da4:	0412      	lsls	r2, r2, #16
 8001da6:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8001da8:	2803      	cmp	r0, #3
 8001daa:	d84e      	bhi.n	8001e4a <USB_ActivateEndpoint+0xba>
 8001dac:	e8df f000 	tbb	[pc, r0]
 8001db0:	47044a02 	.word	0x47044a02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8001db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8001db8:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8001dba:	f248 0480 	movw	r4, #32896	; 0x8080
 8001dbe:	4322      	orrs	r2, r4
 8001dc0:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001dc4:	780e      	ldrb	r6, [r1, #0]
 8001dc6:	4dab      	ldr	r5, [pc, #684]	; (8002074 <USB_ActivateEndpoint+0x2e4>)
 8001dc8:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8001dcc:	4334      	orrs	r4, r6
 8001dce:	b292      	uxth	r2, r2
 8001dd0:	402a      	ands	r2, r5
 8001dd2:	4322      	orrs	r2, r4
 8001dd4:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8001dd8:	7b0c      	ldrb	r4, [r1, #12]
 8001dda:	780a      	ldrb	r2, [r1, #0]
 8001ddc:	2c00      	cmp	r4, #0
 8001dde:	f040 8088 	bne.w	8001ef2 <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 8001de2:	784e      	ldrb	r6, [r1, #1]
 8001de4:	88cc      	ldrh	r4, [r1, #6]
 8001de6:	b396      	cbz	r6, 8001e4e <USB_ActivateEndpoint+0xbe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001de8:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001dec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001df0:	f024 0401 	bic.w	r4, r4, #1
 8001df4:	b2b6      	uxth	r6, r6
 8001df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dfa:	b2a4      	uxth	r4, r4
 8001dfc:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001dfe:	780c      	ldrb	r4, [r1, #0]
 8001e00:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001e04:	0656      	lsls	r6, r2, #25
 8001e06:	d509      	bpl.n	8001e1c <USB_ActivateEndpoint+0x8c>
 8001e08:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001e0c:	b292      	uxth	r2, r2
 8001e0e:	402a      	ands	r2, r5
 8001e10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e14:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001e18:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8001e1c:	78ca      	ldrb	r2, [r1, #3]
 8001e1e:	7809      	ldrb	r1, [r1, #0]
 8001e20:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001e22:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001e26:	4c94      	ldr	r4, [pc, #592]	; (8002078 <USB_ActivateEndpoint+0x2e8>)
 8001e28:	b292      	uxth	r2, r2
 8001e2a:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 8001e2e:	d001      	beq.n	8001e34 <USB_ActivateEndpoint+0xa4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001e30:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001e34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e3c:	e0cb      	b.n	8001fd6 <USB_ActivateEndpoint+0x246>
      wEpRegVal |= USB_EP_INTERRUPT;
 8001e3e:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8001e42:	e7b9      	b.n	8001db8 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8001e44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e48:	e7b6      	b.n	8001db8 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	e7b5      	b.n	8001dba <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001e4e:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8001e52:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001e56:	f024 0401 	bic.w	r4, r4, #1
 8001e5a:	b2ad      	uxth	r5, r5
 8001e5c:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8001e60:	b2a4      	uxth	r4, r4
 8001e62:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001e64:	780a      	ldrb	r2, [r1, #0]
 8001e66:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001e6a:	690d      	ldr	r5, [r1, #16]
 8001e6c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001e70:	b2b6      	uxth	r6, r6
 8001e72:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8001e76:	bb5d      	cbnz	r5, 8001ed0 <USB_ActivateEndpoint+0x140>
 8001e78:	5b94      	ldrh	r4, [r2, r6]
 8001e7a:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8001e7e:	0424      	lsls	r4, r4, #16
 8001e80:	0c24      	lsrs	r4, r4, #16
 8001e82:	5394      	strh	r4, [r2, r6]
 8001e84:	5b94      	ldrh	r4, [r2, r6]
 8001e86:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8001e8a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8001e8e:	b2a4      	uxth	r4, r4
 8001e90:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001e92:	780c      	ldrb	r4, [r1, #0]
 8001e94:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001e98:	0455      	lsls	r5, r2, #17
 8001e9a:	d50d      	bpl.n	8001eb8 <USB_ActivateEndpoint+0x128>
 8001e9c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001ea0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001ea4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ea8:	0412      	lsls	r2, r2, #16
 8001eaa:	0c12      	lsrs	r2, r2, #16
 8001eac:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001eb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eb4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001eb8:	7809      	ldrb	r1, [r1, #0]
 8001eba:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001ebe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ec2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ec6:	0412      	lsls	r2, r2, #16
 8001ec8:	0c12      	lsrs	r2, r2, #16
 8001eca:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8001ece:	e7b1      	b.n	8001e34 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001ed0:	2d3e      	cmp	r5, #62	; 0x3e
 8001ed2:	d805      	bhi.n	8001ee0 <USB_ActivateEndpoint+0x150>
 8001ed4:	086c      	lsrs	r4, r5, #1
 8001ed6:	07ed      	lsls	r5, r5, #31
 8001ed8:	bf48      	it	mi
 8001eda:	3401      	addmi	r4, #1
 8001edc:	02a4      	lsls	r4, r4, #10
 8001ede:	e7d6      	b.n	8001e8e <USB_ActivateEndpoint+0xfe>
 8001ee0:	096f      	lsrs	r7, r5, #5
 8001ee2:	06ec      	lsls	r4, r5, #27
 8001ee4:	4c65      	ldr	r4, [pc, #404]	; (800207c <USB_ActivateEndpoint+0x2ec>)
 8001ee6:	bf08      	it	eq
 8001ee8:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8001eec:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 8001ef0:	e7cd      	b.n	8001e8e <USB_ActivateEndpoint+0xfe>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001ef2:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001ef6:	b2a4      	uxth	r4, r4
 8001ef8:	402c      	ands	r4, r5
 8001efa:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8001efe:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001f02:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8001f06:	780a      	ldrb	r2, [r1, #0]
 8001f08:	890c      	ldrh	r4, [r1, #8]
 8001f0a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001f0e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001f12:	f024 0401 	bic.w	r4, r4, #1
 8001f16:	b2b6      	uxth	r6, r6
 8001f18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f1c:	b2a4      	uxth	r4, r4
 8001f1e:	5394      	strh	r4, [r2, r6]
 8001f20:	780a      	ldrb	r2, [r1, #0]
 8001f22:	894c      	ldrh	r4, [r1, #10]
 8001f24:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001f28:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001f2c:	f024 0401 	bic.w	r4, r4, #1
 8001f30:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8001f34:	b2a4      	uxth	r4, r4
 8001f36:	b2b6      	uxth	r6, r6
 8001f38:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 8001f3a:	784a      	ldrb	r2, [r1, #1]
 8001f3c:	780c      	ldrb	r4, [r1, #0]
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	d14c      	bne.n	8001fdc <USB_ActivateEndpoint+0x24c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001f42:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001f46:	0452      	lsls	r2, r2, #17
 8001f48:	d509      	bpl.n	8001f5e <USB_ActivateEndpoint+0x1ce>
 8001f4a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001f4e:	b292      	uxth	r2, r2
 8001f50:	402a      	ands	r2, r5
 8001f52:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001f56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f5a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001f5e:	780c      	ldrb	r4, [r1, #0]
 8001f60:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001f64:	0657      	lsls	r7, r2, #25
 8001f66:	d50d      	bpl.n	8001f84 <USB_ActivateEndpoint+0x1f4>
 8001f68:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001f6c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001f70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f74:	0412      	lsls	r2, r2, #16
 8001f76:	0c12      	lsrs	r2, r2, #16
 8001f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f7c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001f80:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001f84:	780c      	ldrb	r4, [r1, #0]
 8001f86:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001f8a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001f8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f92:	0412      	lsls	r2, r2, #16
 8001f94:	0c12      	lsrs	r2, r2, #16
 8001f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f9a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001f9e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001fa2:	f248 0480 	movw	r4, #32896	; 0x8080
 8001fa6:	780d      	ldrb	r5, [r1, #0]
 8001fa8:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8001fac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001fb4:	0412      	lsls	r2, r2, #16
 8001fb6:	0c12      	lsrs	r2, r2, #16
 8001fb8:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8001fbc:	4322      	orrs	r2, r4
 8001fbe:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001fc2:	7809      	ldrb	r1, [r1, #0]
 8001fc4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001fc8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fd0:	0412      	lsls	r2, r2, #16
 8001fd2:	0c12      	lsrs	r2, r2, #16
 8001fd4:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001fd6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 8001fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001fdc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001fe0:	0456      	lsls	r6, r2, #17
 8001fe2:	d509      	bpl.n	8001ff8 <USB_ActivateEndpoint+0x268>
 8001fe4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001fe8:	b292      	uxth	r2, r2
 8001fea:	402a      	ands	r2, r5
 8001fec:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001ff0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ff4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001ff8:	780c      	ldrb	r4, [r1, #0]
 8001ffa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001ffe:	0652      	lsls	r2, r2, #25
 8002000:	d50d      	bpl.n	800201e <USB_ActivateEndpoint+0x28e>
 8002002:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002006:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800200a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800200e:	0412      	lsls	r2, r2, #16
 8002010:	0c12      	lsrs	r2, r2, #16
 8002012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002016:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800201a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800201e:	780c      	ldrb	r4, [r1, #0]
 8002020:	4d15      	ldr	r5, [pc, #84]	; (8002078 <USB_ActivateEndpoint+0x2e8>)
 8002022:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002026:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800202a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800202e:	0412      	lsls	r2, r2, #16
 8002030:	0c12      	lsrs	r2, r2, #16
 8002032:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002036:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800203a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800203e:	78ca      	ldrb	r2, [r1, #3]
 8002040:	780c      	ldrb	r4, [r1, #0]
 8002042:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002044:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002048:	b292      	uxth	r2, r2
 800204a:	ea02 0205 	and.w	r2, r2, r5
 800204e:	bf18      	it	ne
 8002050:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002054:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002058:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800205c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002060:	7809      	ldrb	r1, [r1, #0]
 8002062:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002066:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800206a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800206e:	0412      	lsls	r2, r2, #16
 8002070:	0c12      	lsrs	r2, r2, #16
 8002072:	e6df      	b.n	8001e34 <USB_ActivateEndpoint+0xa4>
 8002074:	ffff8f8f 	.word	0xffff8f8f
 8002078:	ffff8fbf 	.word	0xffff8fbf
 800207c:	ffff8000 	.word	0xffff8000

08002080 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8002080:	784b      	ldrb	r3, [r1, #1]
 8002082:	780a      	ldrb	r2, [r1, #0]
 8002084:	b18b      	cbz	r3, 80020aa <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002086:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800208a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800208e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002092:	041b      	lsls	r3, r3, #16
 8002094:	0c1b      	lsrs	r3, r3, #16
 8002096:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800209a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80020a6:	2000      	movs	r0, #0
 80020a8:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80020aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b6:	041b      	lsls	r3, r3, #16
 80020b8:	0c1b      	lsrs	r3, r3, #16
 80020ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80020be:	e7ec      	b.n	800209a <USB_EPSetStall+0x1a>

080020c0 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80020c0:	7b0b      	ldrb	r3, [r1, #12]
 80020c2:	bb43      	cbnz	r3, 8002116 <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 80020c4:	784b      	ldrb	r3, [r1, #1]
 80020c6:	780a      	ldrb	r2, [r1, #0]
 80020c8:	b33b      	cbz	r3, 800211a <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80020ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020ce:	065b      	lsls	r3, r3, #25
 80020d0:	d50d      	bpl.n	80020ee <USB_EPClearStall+0x2e>
 80020d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020de:	041b      	lsls	r3, r3, #16
 80020e0:	0c1b      	lsrs	r3, r3, #16
 80020e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020ea:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80020ee:	78cb      	ldrb	r3, [r1, #3]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d010      	beq.n	8002116 <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80020f4:	780a      	ldrb	r2, [r1, #0]
 80020f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002102:	041b      	lsls	r3, r3, #16
 8002104:	0c1b      	lsrs	r3, r3, #16
 8002106:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800210a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800210e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002112:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8002116:	2000      	movs	r0, #0
 8002118:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800211a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800211e:	045b      	lsls	r3, r3, #17
 8002120:	d50d      	bpl.n	800213e <USB_EPClearStall+0x7e>
 8002122:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800212a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212e:	041b      	lsls	r3, r3, #16
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800213a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800213e:	780a      	ldrb	r2, [r1, #0]
 8002140:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002144:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214c:	041b      	lsls	r3, r3, #16
 800214e:	0c1b      	lsrs	r3, r3, #16
 8002150:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002154:	e7d9      	b.n	800210a <USB_EPClearStall+0x4a>

08002156 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002156:	b911      	cbnz	r1, 800215e <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800215e:	2000      	movs	r0, #0
 8002160:	4770      	bx	lr

08002162 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002162:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002166:	b280      	uxth	r0, r0
 8002168:	4770      	bx	lr

0800216a <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800216a:	2000      	movs	r0, #0
 800216c:	4770      	bx	lr

0800216e <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800216e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002172:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002174:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 800217e:	429a      	cmp	r2, r3
 8002180:	d100      	bne.n	8002184 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8002182:	4770      	bx	lr
 8002184:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8002188:	f822 0b04 	strh.w	r0, [r2], #4
 800218c:	e7f7      	b.n	800217e <USB_WritePMA+0x10>
	...

08002190 <USB_EPStartXfer>:
{
 8002190:	b570      	push	{r4, r5, r6, lr}
 8002192:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8002194:	7849      	ldrb	r1, [r1, #1]
{
 8002196:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8002198:	2901      	cmp	r1, #1
 800219a:	69aa      	ldr	r2, [r5, #24]
 800219c:	692b      	ldr	r3, [r5, #16]
 800219e:	7b28      	ldrb	r0, [r5, #12]
 80021a0:	d166      	bne.n	8002270 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 80021a2:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 80021a4:	bf9d      	ittte	ls
 80021a6:	2300      	movls	r3, #0
 80021a8:	61ab      	strls	r3, [r5, #24]
 80021aa:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 80021ac:	1ad2      	subhi	r2, r2, r3
 80021ae:	bf88      	it	hi
 80021b0:	61aa      	strhi	r2, [r5, #24]
 80021b2:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 80021b4:	bb08      	cbnz	r0, 80021fa <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80021b6:	4633      	mov	r3, r6
 80021b8:	88ea      	ldrh	r2, [r5, #6]
 80021ba:	6969      	ldr	r1, [r5, #20]
 80021bc:	4620      	mov	r0, r4
 80021be:	f7ff ffd6 	bl	800216e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80021c2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80021c6:	782a      	ldrb	r2, [r5, #0]
 80021c8:	b299      	uxth	r1, r3
 80021ca:	f204 4304 	addw	r3, r4, #1028	; 0x404
 80021ce:	0112      	lsls	r2, r2, #4
 80021d0:	440b      	add	r3, r1
 80021d2:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80021d4:	782a      	ldrb	r2, [r5, #0]
 80021d6:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80021da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021e2:	041b      	lsls	r3, r3, #16
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80021ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f2:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 80021f6:	2000      	movs	r0, #0
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80021fa:	782b      	ldrb	r3, [r5, #0]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80021fc:	4620      	mov	r0, r4
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80021fe:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002208:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800220c:	b291      	uxth	r1, r2
 800220e:	bf15      	itete	ne
 8002210:	f204 420c 	addwne	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002214:	f204 4204 	addweq	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002218:	1852      	addne	r2, r2, r1
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800221a:	1852      	addeq	r2, r2, r1
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800221c:	bf15      	itete	ne
 800221e:	52d6      	strhne	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002220:	52d6      	strheq	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 8002222:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8002224:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002226:	4633      	mov	r3, r6
 8002228:	6969      	ldr	r1, [r5, #20]
 800222a:	f7ff ffa0 	bl	800216e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800222e:	786b      	ldrb	r3, [r5, #1]
 8002230:	782a      	ldrb	r2, [r5, #0]
 8002232:	b973      	cbnz	r3, 8002252 <USB_EPStartXfer+0xc2>
 8002234:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800223c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002240:	041b      	lsls	r3, r3, #16
 8002242:	0c1b      	lsrs	r3, r3, #16
 8002244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002248:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800224c:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8002250:	e7c0      	b.n	80021d4 <USB_EPStartXfer+0x44>
 8002252:	2b01      	cmp	r3, #1
 8002254:	d1be      	bne.n	80021d4 <USB_EPStartXfer+0x44>
 8002256:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800225a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800225e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002262:	041b      	lsls	r3, r3, #16
 8002264:	0c1b      	lsrs	r3, r3, #16
 8002266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800226a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226e:	e7ed      	b.n	800224c <USB_EPStartXfer+0xbc>
    if (ep->xfer_len > ep->maxpacket)
 8002270:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8002272:	bf93      	iteet	ls
 8002274:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8002276:	1ad2      	subhi	r2, r2, r3
 8002278:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 800227a:	61ab      	strls	r3, [r5, #24]
 800227c:	bf98      	it	ls
 800227e:	4613      	movls	r3, r2
 8002280:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8002282:	b9b0      	cbnz	r0, 80022b2 <USB_EPStartXfer+0x122>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002284:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8002288:	0112      	lsls	r2, r2, #4
 800228a:	b281      	uxth	r1, r0
 800228c:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8002290:	4408      	add	r0, r1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d144      	bne.n	8002320 <USB_EPStartXfer+0x190>
 8002296:	5a83      	ldrh	r3, [r0, r2]
 8002298:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800229c:	041b      	lsls	r3, r3, #16
 800229e:	0c1b      	lsrs	r3, r3, #16
 80022a0:	5283      	strh	r3, [r0, r2]
 80022a2:	5a83      	ldrh	r3, [r0, r2]
 80022a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	5283      	strh	r3, [r0, r2]
 80022b0:	e03f      	b.n	8002332 <USB_EPStartXfer+0x1a2>
 80022b2:	b9a1      	cbnz	r1, 80022de <USB_EPStartXfer+0x14e>
 80022b4:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b281      	uxth	r1, r0
 80022bc:	f204 4004 	addw	r0, r4, #1028	; 0x404
 80022c0:	4408      	add	r0, r1
 80022c2:	b9e3      	cbnz	r3, 80022fe <USB_EPStartXfer+0x16e>
 80022c4:	5a81      	ldrh	r1, [r0, r2]
 80022c6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80022ca:	0409      	lsls	r1, r1, #16
 80022cc:	0c09      	lsrs	r1, r1, #16
 80022ce:	5281      	strh	r1, [r0, r2]
 80022d0:	5a81      	ldrh	r1, [r0, r2]
 80022d2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80022d6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80022da:	b289      	uxth	r1, r1
 80022dc:	5281      	strh	r1, [r0, r2]
 80022de:	7869      	ldrb	r1, [r5, #1]
 80022e0:	782a      	ldrb	r2, [r5, #0]
 80022e2:	2900      	cmp	r1, #0
 80022e4:	d0ce      	beq.n	8002284 <USB_EPStartXfer+0xf4>
 80022e6:	2901      	cmp	r1, #1
 80022e8:	d123      	bne.n	8002332 <USB_EPStartXfer+0x1a2>
 80022ea:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b288      	uxth	r0, r1
 80022f2:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 80022f6:	4401      	add	r1, r0
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	528b      	strh	r3, [r1, r2]
 80022fc:	e019      	b.n	8002332 <USB_EPStartXfer+0x1a2>
 80022fe:	2b3e      	cmp	r3, #62	; 0x3e
 8002300:	d805      	bhi.n	800230e <USB_EPStartXfer+0x17e>
 8002302:	0859      	lsrs	r1, r3, #1
 8002304:	07de      	lsls	r6, r3, #31
 8002306:	bf48      	it	mi
 8002308:	3101      	addmi	r1, #1
 800230a:	0289      	lsls	r1, r1, #10
 800230c:	e7e5      	b.n	80022da <USB_EPStartXfer+0x14a>
 800230e:	095e      	lsrs	r6, r3, #5
 8002310:	06d9      	lsls	r1, r3, #27
 8002312:	4912      	ldr	r1, [pc, #72]	; (800235c <USB_EPStartXfer+0x1cc>)
 8002314:	bf08      	it	eq
 8002316:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800231a:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800231e:	e7dc      	b.n	80022da <USB_EPStartXfer+0x14a>
 8002320:	2b3e      	cmp	r3, #62	; 0x3e
 8002322:	d812      	bhi.n	800234a <USB_EPStartXfer+0x1ba>
 8002324:	0859      	lsrs	r1, r3, #1
 8002326:	07de      	lsls	r6, r3, #31
 8002328:	bf48      	it	mi
 800232a:	3101      	addmi	r1, #1
 800232c:	0289      	lsls	r1, r1, #10
 800232e:	b289      	uxth	r1, r1
 8002330:	5281      	strh	r1, [r0, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002332:	782a      	ldrb	r2, [r5, #0]
 8002334:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800233c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002340:	041b      	lsls	r3, r3, #16
 8002342:	0c1b      	lsrs	r3, r3, #16
 8002344:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002348:	e74f      	b.n	80021ea <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800234a:	0959      	lsrs	r1, r3, #5
 800234c:	06db      	lsls	r3, r3, #27
 800234e:	4b03      	ldr	r3, [pc, #12]	; (800235c <USB_EPStartXfer+0x1cc>)
 8002350:	bf08      	it	eq
 8002352:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002356:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800235a:	e7a7      	b.n	80022ac <USB_EPStartXfer+0x11c>
 800235c:	ffff8000 	.word	0xffff8000

08002360 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002360:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002366:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 800236a:	085d      	lsrs	r5, r3, #1
 800236c:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800236e:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8002370:	462e      	mov	r6, r5
 8002372:	3002      	adds	r0, #2
 8002374:	b936      	cbnz	r6, 8002384 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8002376:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8002378:	bf44      	itt	mi
 800237a:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800237e:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 8002382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8002384:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8002388:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 800238a:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800238c:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002390:	0a24      	lsrs	r4, r4, #8
 8002392:	f800 4c01 	strb.w	r4, [r0, #-1]
 8002396:	e7ec      	b.n	8002372 <USB_ReadPMA+0x12>

08002398 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002398:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800239a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800239e:	b90b      	cbnz	r3, 80023a4 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 80023a0:	2002      	movs	r0, #2
 80023a2:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4798      	blx	r3
 80023a8:	2800      	cmp	r0, #0
 80023aa:	d1f9      	bne.n	80023a0 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80023ac:	bd08      	pop	{r3, pc}

080023ae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80023ae:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80023b0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4798      	blx	r3

  return USBD_OK;
}
 80023b8:	2000      	movs	r0, #0
 80023ba:	bd08      	pop	{r3, pc}

080023bc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80023bc:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80023be:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 80023c2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80023c4:	4628      	mov	r0, r5
 80023c6:	f000 fae1 	bl	800298c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80023ca:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80023cc:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80023d0:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80023d4:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80023d8:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80023dc:	f001 031f 	and.w	r3, r1, #31
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d00e      	beq.n	8002402 <USBD_LL_SetupStage+0x46>
 80023e4:	d307      	bcc.n	80023f6 <USBD_LL_SetupStage+0x3a>
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d010      	beq.n	800240c <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80023ea:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80023ee:	4620      	mov	r0, r4
 80023f0:	f001 fc0e 	bl	8003c10 <USBD_LL_StallEP>
      break;
 80023f4:	e003      	b.n	80023fe <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80023f6:	4629      	mov	r1, r5
 80023f8:	4620      	mov	r0, r4
 80023fa:	f000 f8f5 	bl	80025e8 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80023fe:	2000      	movs	r0, #0
 8002400:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8002402:	4629      	mov	r1, r5
 8002404:	4620      	mov	r0, r4
 8002406:	f000 fa13 	bl	8002830 <USBD_StdItfReq>
      break;
 800240a:	e7f8      	b.n	80023fe <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 800240c:	4629      	mov	r1, r5
 800240e:	4620      	mov	r0, r4
 8002410:	f000 fa33 	bl	800287a <USBD_StdEPReq>
      break;
 8002414:	e7f3      	b.n	80023fe <USBD_LL_SetupStage+0x42>

08002416 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002416:	b570      	push	{r4, r5, r6, lr}
 8002418:	4605      	mov	r5, r0
 800241a:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800241c:	bb49      	cbnz	r1, 8002472 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800241e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002422:	2b03      	cmp	r3, #3
 8002424:	d11e      	bne.n	8002464 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8002426:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 800242a:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 800242e:	4293      	cmp	r3, r2
 8002430:	d90b      	bls.n	800244a <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8002432:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8002434:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8002436:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800243a:	bf8c      	ite	hi
 800243c:	b29a      	uxthhi	r2, r3
 800243e:	b292      	uxthls	r2, r2
 8002440:	4631      	mov	r1, r6
 8002442:	f000 facc 	bl	80029de <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002446:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8002448:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800244a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	b123      	cbz	r3, 800245c <USBD_LL_DataOutStage+0x46>
 8002452:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002456:	2a03      	cmp	r2, #3
 8002458:	d100      	bne.n	800245c <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 800245a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800245c:	4628      	mov	r0, r5
 800245e:	f000 fac6 	bl	80029ee <USBD_CtlSendStatus>
 8002462:	e7f0      	b.n	8002446 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002464:	2b05      	cmp	r3, #5
 8002466:	d1ee      	bne.n	8002446 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8002468:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800246c:	f001 fbd0 	bl	8003c10 <USBD_LL_StallEP>
 8002470:	e7e9      	b.n	8002446 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8002472:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	b12b      	cbz	r3, 8002486 <USBD_LL_DataOutStage+0x70>
 800247a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800247e:	2a03      	cmp	r2, #3
 8002480:	d101      	bne.n	8002486 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8002482:	4798      	blx	r3
 8002484:	e7df      	b.n	8002446 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8002486:	2002      	movs	r0, #2
}
 8002488:	bd70      	pop	{r4, r5, r6, pc}

0800248a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800248a:	b570      	push	{r4, r5, r6, lr}
 800248c:	4613      	mov	r3, r2
 800248e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002490:	460e      	mov	r6, r1
 8002492:	2900      	cmp	r1, #0
 8002494:	d147      	bne.n	8002526 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002496:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800249a:	2a02      	cmp	r2, #2
 800249c:	d13c      	bne.n	8002518 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 800249e:	6a05      	ldr	r5, [r0, #32]
 80024a0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80024a2:	4295      	cmp	r5, r2
 80024a4:	d913      	bls.n	80024ce <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 80024a6:	1aaa      	subs	r2, r5, r2
 80024a8:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80024aa:	4619      	mov	r1, r3
 80024ac:	b292      	uxth	r2, r2
 80024ae:	f000 fa8e 	bl	80029ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80024b2:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80024b4:	461a      	mov	r2, r3
 80024b6:	4619      	mov	r1, r3
 80024b8:	4620      	mov	r0, r4
 80024ba:	f001 fbf1 	bl	8003ca0 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80024be:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80024c2:	2000      	movs	r0, #0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d13a      	bne.n	800253e <USBD_LL_DataInStage+0xb4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80024c8:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 80024cc:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80024ce:	69c3      	ldr	r3, [r0, #28]
 80024d0:	fbb3 f5f2 	udiv	r5, r3, r2
 80024d4:	fb02 3515 	mls	r5, r2, r5, r3
 80024d8:	b965      	cbnz	r5, 80024f4 <USBD_LL_DataInStage+0x6a>
 80024da:	429a      	cmp	r2, r3
 80024dc:	d80a      	bhi.n	80024f4 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 80024de:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d206      	bcs.n	80024f4 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80024e6:	462a      	mov	r2, r5
 80024e8:	f000 fa71 	bl	80029ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80024ec:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80024f0:	462b      	mov	r3, r5
 80024f2:	e7df      	b.n	80024b4 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80024f4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	b12b      	cbz	r3, 8002508 <USBD_LL_DataInStage+0x7e>
 80024fc:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8002500:	2a03      	cmp	r2, #3
 8002502:	d101      	bne.n	8002508 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8002504:	4620      	mov	r0, r4
 8002506:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	4620      	mov	r0, r4
 800250c:	f001 fb80 	bl	8003c10 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002510:	4620      	mov	r0, r4
 8002512:	f000 fa77 	bl	8002a04 <USBD_CtlReceiveStatus>
 8002516:	e7d2      	b.n	80024be <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002518:	f032 0304 	bics.w	r3, r2, #4
 800251c:	d1cf      	bne.n	80024be <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800251e:	2180      	movs	r1, #128	; 0x80
 8002520:	f001 fb76 	bl	8003c10 <USBD_LL_StallEP>
 8002524:	e7cb      	b.n	80024be <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8002526:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	b133      	cbz	r3, 800253c <USBD_LL_DataInStage+0xb2>
 800252e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002532:	2a03      	cmp	r2, #3
 8002534:	d102      	bne.n	800253c <USBD_LL_DataInStage+0xb2>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8002536:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002538:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800253a:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800253c:	2002      	movs	r0, #2
}
 800253e:	bd70      	pop	{r4, r5, r6, pc}

08002540 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002540:	2200      	movs	r2, #0
{
 8002542:	b570      	push	{r4, r5, r6, lr}
 8002544:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002546:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002548:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800254a:	4611      	mov	r1, r2
 800254c:	2340      	movs	r3, #64	; 0x40
 800254e:	f001 fb4f 	bl	8003bf0 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002552:	4633      	mov	r3, r6
 8002554:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002556:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800255a:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800255e:	2200      	movs	r2, #0
 8002560:	4620      	mov	r0, r4
 8002562:	f001 fb45 	bl	8003bf0 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8002566:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002568:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800256c:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800256e:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002570:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8002574:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8002578:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800257a:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800257e:	b123      	cbz	r3, 800258a <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002580:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002584:	4620      	mov	r0, r4
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4798      	blx	r3
  }

  return USBD_OK;
}
 800258a:	2000      	movs	r0, #0
 800258c:	bd70      	pop	{r4, r5, r6, pc}

0800258e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800258e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8002590:	2000      	movs	r0, #0
 8002592:	4770      	bx	lr

08002594 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002594:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002598:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800259c:	2304      	movs	r3, #4
 800259e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80025a2:	2000      	movs	r0, #0
 80025a4:	4770      	bx	lr

080025a6 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80025a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80025aa:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80025ac:	bf04      	itt	eq
 80025ae:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80025b2:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80025b6:	2000      	movs	r0, #0
 80025b8:	4770      	bx	lr

080025ba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80025ba:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80025bc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80025c0:	2a03      	cmp	r2, #3
 80025c2:	d104      	bne.n	80025ce <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80025c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	b103      	cbz	r3, 80025ce <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80025cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80025ce:	2000      	movs	r0, #0
 80025d0:	bd08      	pop	{r3, pc}

080025d2 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80025d2:	b510      	push	{r4, lr}
 80025d4:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	f001 fb1a 	bl	8003c10 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80025dc:	4620      	mov	r0, r4
}
 80025de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80025e2:	2100      	movs	r1, #0
 80025e4:	f001 bb14 	b.w	8003c10 <USBD_LL_StallEP>

080025e8 <USBD_StdDevReq>:
{
 80025e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80025ea:	780b      	ldrb	r3, [r1, #0]
{
 80025ec:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80025ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80025f2:	2b20      	cmp	r3, #32
{
 80025f4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80025f6:	d012      	beq.n	800261e <USBD_StdDevReq+0x36>
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d010      	beq.n	800261e <USBD_StdDevReq+0x36>
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d15c      	bne.n	80026ba <USBD_StdDevReq+0xd2>
      switch (req->bRequest)
 8002600:	784b      	ldrb	r3, [r1, #1]
 8002602:	2b09      	cmp	r3, #9
 8002604:	d858      	bhi.n	80026b8 <USBD_StdDevReq+0xd0>
 8002606:	e8df f013 	tbh	[pc, r3, lsl #1]
 800260a:	00e9      	.short	0x00e9
 800260c:	00570105 	.word	0x00570105
 8002610:	005700fe 	.word	0x005700fe
 8002614:	00130084 	.word	0x00130084
 8002618:	00d20057 	.word	0x00d20057
 800261c:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 800261e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002622:	4629      	mov	r1, r5
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	4620      	mov	r0, r4
 8002628:	4798      	blx	r3
}
 800262a:	2000      	movs	r0, #0
 800262c:	b003      	add	sp, #12
 800262e:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8002636:	884b      	ldrh	r3, [r1, #2]
 8002638:	0a1a      	lsrs	r2, r3, #8
 800263a:	3a01      	subs	r2, #1
 800263c:	2a06      	cmp	r2, #6
 800263e:	d83b      	bhi.n	80026b8 <USBD_StdDevReq+0xd0>
 8002640:	e8df f002 	tbb	[pc, r2]
 8002644:	3a2d2004 	.word	0x3a2d2004
 8002648:	523a      	.short	0x523a
 800264a:	5c          	.byte	0x5c
 800264b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800264c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002650:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002652:	f10d 0106 	add.w	r1, sp, #6
 8002656:	7c20      	ldrb	r0, [r4, #16]
 8002658:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800265a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800265e:	b152      	cbz	r2, 8002676 <USBD_StdDevReq+0x8e>
 8002660:	88eb      	ldrh	r3, [r5, #6]
 8002662:	b143      	cbz	r3, 8002676 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8002664:	429a      	cmp	r2, r3
 8002666:	bf28      	it	cs
 8002668:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800266a:	4601      	mov	r1, r0
 800266c:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800266e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002672:	f000 f99f 	bl	80029b4 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8002676:	88eb      	ldrh	r3, [r5, #6]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1d6      	bne.n	800262a <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 800267c:	4620      	mov	r0, r4
 800267e:	f000 f9b6 	bl	80029ee <USBD_CtlSendStatus>
 8002682:	e7d2      	b.n	800262a <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002684:	7c02      	ldrb	r2, [r0, #16]
 8002686:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800268a:	b932      	cbnz	r2, 800269a <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800268e:	f10d 0006 	add.w	r0, sp, #6
 8002692:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002694:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002696:	7043      	strb	r3, [r0, #1]
 8002698:	e7df      	b.n	800265a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	e7f7      	b.n	800268e <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d809      	bhi.n	80026b8 <USBD_StdDevReq+0xd0>
 80026a4:	e8df f003 	tbb	[pc, r3]
 80026a8:	14100c03 	.word	0x14100c03
 80026ac:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80026ae:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80026b2:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1cc      	bne.n	8002652 <USBD_StdDevReq+0x6a>
          USBD_CtlError(pdev, req);
 80026b8:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 80026ba:	f7ff ff8a 	bl	80025d2 <USBD_CtlError.constprop.1>
  return ret;
 80026be:	e7b4      	b.n	800262a <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80026c0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	e7f5      	b.n	80026b4 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80026c8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	e7f1      	b.n	80026b4 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80026d0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	e7ed      	b.n	80026b4 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80026d8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	e7e9      	b.n	80026b4 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80026e0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	e7e5      	b.n	80026b4 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80026e8:	7c03      	ldrb	r3, [r0, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1e4      	bne.n	80026b8 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80026ee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80026f2:	f10d 0006 	add.w	r0, sp, #6
 80026f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f8:	4798      	blx	r3
 80026fa:	e7ae      	b.n	800265a <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80026fc:	7c03      	ldrb	r3, [r0, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1da      	bne.n	80026b8 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002702:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002706:	f10d 0006 	add.w	r0, sp, #6
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800270e:	2307      	movs	r3, #7
 8002710:	e7c1      	b.n	8002696 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002712:	888b      	ldrh	r3, [r1, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1cf      	bne.n	80026b8 <USBD_StdDevReq+0xd0>
 8002718:	88cb      	ldrh	r3, [r1, #6]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1cc      	bne.n	80026b8 <USBD_StdDevReq+0xd0>
 800271e:	884d      	ldrh	r5, [r1, #2]
 8002720:	2d7f      	cmp	r5, #127	; 0x7f
 8002722:	d8c9      	bhi.n	80026b8 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002724:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002728:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800272a:	2b03      	cmp	r3, #3
 800272c:	d0c4      	beq.n	80026b8 <USBD_StdDevReq+0xd0>
      pdev->dev_address = dev_addr;
 800272e:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002732:	f001 fa99 	bl	8003c68 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8002736:	4620      	mov	r0, r4
 8002738:	f000 f959 	bl	80029ee <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800273c:	b11d      	cbz	r5, 8002746 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800273e:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002740:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8002744:	e771      	b.n	800262a <USBD_StdDevReq+0x42>
 8002746:	2301      	movs	r3, #1
 8002748:	e7fa      	b.n	8002740 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 800274a:	7889      	ldrb	r1, [r1, #2]
 800274c:	4d37      	ldr	r5, [pc, #220]	; (800282c <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800274e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8002750:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002752:	d8b1      	bhi.n	80026b8 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8002754:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002758:	2b02      	cmp	r3, #2
 800275a:	d008      	beq.n	800276e <USBD_StdDevReq+0x186>
 800275c:	2b03      	cmp	r3, #3
 800275e:	d014      	beq.n	800278a <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8002760:	f7ff ff37 	bl	80025d2 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8002764:	7829      	ldrb	r1, [r5, #0]
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff fe21 	bl	80023ae <USBD_ClrClassConfig>
 800276c:	e75d      	b.n	800262a <USBD_StdDevReq+0x42>
        if (cfgidx)
 800276e:	2900      	cmp	r1, #0
 8002770:	d084      	beq.n	800267c <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8002772:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002774:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8002776:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002778:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800277c:	4620      	mov	r0, r4
 800277e:	f7ff fe0b 	bl	8002398 <USBD_SetClassConfig>
 8002782:	2802      	cmp	r0, #2
 8002784:	f47f af7a 	bne.w	800267c <USBD_StdDevReq+0x94>
 8002788:	e796      	b.n	80026b8 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 800278a:	b931      	cbnz	r1, 800279a <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800278c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800278e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8002790:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8002794:	f7ff fe0b 	bl	80023ae <USBD_ClrClassConfig>
 8002798:	e770      	b.n	800267c <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 800279a:	6841      	ldr	r1, [r0, #4]
 800279c:	2901      	cmp	r1, #1
 800279e:	f43f af6d 	beq.w	800267c <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80027a2:	b2c9      	uxtb	r1, r1
 80027a4:	f7ff fe03 	bl	80023ae <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80027a8:	7829      	ldrb	r1, [r5, #0]
 80027aa:	6061      	str	r1, [r4, #4]
 80027ac:	e7e6      	b.n	800277c <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 80027ae:	88ca      	ldrh	r2, [r1, #6]
 80027b0:	2a01      	cmp	r2, #1
 80027b2:	d181      	bne.n	80026b8 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 80027b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f43f af7d 	beq.w	80026b8 <USBD_StdDevReq+0xd0>
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d904      	bls.n	80027cc <USBD_StdDevReq+0x1e4>
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	f47f af78 	bne.w	80026b8 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80027c8:	1d01      	adds	r1, r0, #4
 80027ca:	e003      	b.n	80027d4 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 80027cc:	4601      	mov	r1, r0
 80027ce:	2300      	movs	r3, #0
 80027d0:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80027d4:	4620      	mov	r0, r4
 80027d6:	f000 f8ed 	bl	80029b4 <USBD_CtlSendData>
 80027da:	e726      	b.n	800262a <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 80027dc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80027e0:	3b01      	subs	r3, #1
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	f63f af68 	bhi.w	80026b8 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 80027e8:	88cb      	ldrh	r3, [r1, #6]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	f47f af64 	bne.w	80026b8 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80027f0:	2301      	movs	r3, #1
 80027f2:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80027f4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80027f8:	b10b      	cbz	r3, 80027fe <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80027fa:	2303      	movs	r3, #3
 80027fc:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80027fe:	2202      	movs	r2, #2
 8002800:	f104 010c 	add.w	r1, r4, #12
 8002804:	e7e6      	b.n	80027d4 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002806:	884b      	ldrh	r3, [r1, #2]
 8002808:	2b01      	cmp	r3, #1
 800280a:	f47f af0e 	bne.w	800262a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800280e:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8002812:	e733      	b.n	800267c <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 8002814:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002818:	3b01      	subs	r3, #1
 800281a:	2b02      	cmp	r3, #2
 800281c:	f63f af4c 	bhi.w	80026b8 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002820:	884b      	ldrh	r3, [r1, #2]
 8002822:	2b01      	cmp	r3, #1
 8002824:	f47f af01 	bne.w	800262a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	e7f0      	b.n	800280e <USBD_StdDevReq+0x226>
 800282c:	20000264 	.word	0x20000264

08002830 <USBD_StdItfReq>:
{
 8002830:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002832:	780b      	ldrb	r3, [r1, #0]
{
 8002834:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002836:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800283a:	2b20      	cmp	r3, #32
{
 800283c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800283e:	d002      	beq.n	8002846 <USBD_StdItfReq+0x16>
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d000      	beq.n	8002846 <USBD_StdItfReq+0x16>
 8002844:	b9b3      	cbnz	r3, 8002874 <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 8002846:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800284a:	3b01      	subs	r3, #1
 800284c:	2b02      	cmp	r3, #2
 800284e:	d810      	bhi.n	8002872 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8002850:	792b      	ldrb	r3, [r5, #4]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d80d      	bhi.n	8002872 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8002856:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800285a:	4629      	mov	r1, r5
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	4620      	mov	r0, r4
 8002860:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8002862:	88eb      	ldrh	r3, [r5, #6]
 8002864:	b91b      	cbnz	r3, 800286e <USBD_StdItfReq+0x3e>
 8002866:	b910      	cbnz	r0, 800286e <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8002868:	4620      	mov	r0, r4
 800286a:	f000 f8c0 	bl	80029ee <USBD_CtlSendStatus>
}
 800286e:	2000      	movs	r0, #0
 8002870:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8002872:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 8002874:	f7ff fead 	bl	80025d2 <USBD_CtlError.constprop.1>
      break;
 8002878:	e7f9      	b.n	800286e <USBD_StdItfReq+0x3e>

0800287a <USBD_StdEPReq>:
{
 800287a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800287c:	780a      	ldrb	r2, [r1, #0]
{
 800287e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002880:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002884:	2a20      	cmp	r2, #32
{
 8002886:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002888:	d013      	beq.n	80028b2 <USBD_StdEPReq+0x38>
 800288a:	2a40      	cmp	r2, #64	; 0x40
 800288c:	d011      	beq.n	80028b2 <USBD_StdEPReq+0x38>
 800288e:	b96a      	cbnz	r2, 80028ac <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8002890:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8002892:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 8002894:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8002896:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8002898:	d01f      	beq.n	80028da <USBD_StdEPReq+0x60>
 800289a:	d335      	bcc.n	8002908 <USBD_StdEPReq+0x8e>
 800289c:	2d03      	cmp	r5, #3
 800289e:	d105      	bne.n	80028ac <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80028a0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80028a4:	2a02      	cmp	r2, #2
 80028a6:	d026      	beq.n	80028f6 <USBD_StdEPReq+0x7c>
 80028a8:	2a03      	cmp	r2, #3
 80028aa:	d00a      	beq.n	80028c2 <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 80028ac:	f7ff fe91 	bl	80025d2 <USBD_CtlError.constprop.1>
      break;
 80028b0:	e005      	b.n	80028be <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 80028b2:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 80028b6:	4619      	mov	r1, r3
 80028b8:	6892      	ldr	r2, [r2, #8]
 80028ba:	4620      	mov	r0, r4
 80028bc:	4790      	blx	r2
}
 80028be:	2000      	movs	r0, #0
 80028c0:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 80028c2:	885a      	ldrh	r2, [r3, #2]
 80028c4:	b92a      	cbnz	r2, 80028d2 <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 80028c6:	064a      	lsls	r2, r1, #25
 80028c8:	d003      	beq.n	80028d2 <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80028ca:	88db      	ldrh	r3, [r3, #6]
 80028cc:	b90b      	cbnz	r3, 80028d2 <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 80028ce:	f001 f99f 	bl	8003c10 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80028d2:	4620      	mov	r0, r4
 80028d4:	f000 f88b 	bl	80029ee <USBD_CtlSendStatus>
              break;
 80028d8:	e7f1      	b.n	80028be <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 80028da:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80028de:	2a02      	cmp	r2, #2
 80028e0:	d009      	beq.n	80028f6 <USBD_StdEPReq+0x7c>
 80028e2:	2a03      	cmp	r2, #3
 80028e4:	d1e2      	bne.n	80028ac <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80028e6:	885b      	ldrh	r3, [r3, #2]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e8      	bne.n	80028be <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 80028ec:	064d      	lsls	r5, r1, #25
 80028ee:	d0f0      	beq.n	80028d2 <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80028f0:	f001 f99c 	bl	8003c2c <USBD_LL_ClearStallEP>
 80028f4:	e7ed      	b.n	80028d2 <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80028f6:	064b      	lsls	r3, r1, #25
 80028f8:	d016      	beq.n	8002928 <USBD_StdEPReq+0xae>
                USBD_LL_StallEP(pdev, ep_addr);
 80028fa:	f001 f989 	bl	8003c10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80028fe:	2180      	movs	r1, #128	; 0x80
 8002900:	4620      	mov	r0, r4
 8002902:	f001 f985 	bl	8003c10 <USBD_LL_StallEP>
 8002906:	e7da      	b.n	80028be <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8002908:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800290c:	2b02      	cmp	r3, #2
 800290e:	d00d      	beq.n	800292c <USBD_StdEPReq+0xb2>
 8002910:	2b03      	cmp	r3, #3
 8002912:	d1cb      	bne.n	80028ac <USBD_StdEPReq+0x32>
 8002914:	2314      	movs	r3, #20
              if ((ep_addr & 0x80U) == 0x80U)
 8002916:	f012 0f80 	tst.w	r2, #128	; 0x80
 800291a:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800291e:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8002922:	d014      	beq.n	800294e <USBD_StdEPReq+0xd4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002924:	6992      	ldr	r2, [r2, #24]
 8002926:	b9ea      	cbnz	r2, 8002964 <USBD_StdEPReq+0xea>
                USBD_CtlError(pdev, req);
 8002928:	4620      	mov	r0, r4
 800292a:	e7bf      	b.n	80028ac <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800292c:	0649      	lsls	r1, r1, #25
 800292e:	d1fb      	bne.n	8002928 <USBD_StdEPReq+0xae>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002930:	0613      	lsls	r3, r2, #24
              pep->status = 0x0000U;
 8002932:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002936:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800293a:	bf4c      	ite	mi
 800293c:	f100 0114 	addmi.w	r1, r0, #20
 8002940:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8002944:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002946:	4620      	mov	r0, r4
 8002948:	f000 f834 	bl	80029b4 <USBD_CtlSendData>
              break;
 800294c:	e7b7      	b.n	80028be <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800294e:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8002952:	2a00      	cmp	r2, #0
 8002954:	d0e8      	beq.n	8002928 <USBD_StdEPReq+0xae>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8002956:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800295a:	fb03 0505 	mla	r5, r3, r5, r0
 800295e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8002962:	e004      	b.n	800296e <USBD_StdEPReq+0xf4>
 8002964:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8002968:	fb05 3503 	mla	r5, r5, r3, r3
 800296c:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800296e:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8002972:	d103      	bne.n	800297c <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 8002974:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002976:	2202      	movs	r2, #2
 8002978:	4629      	mov	r1, r5
 800297a:	e7e4      	b.n	8002946 <USBD_StdEPReq+0xcc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800297c:	4620      	mov	r0, r4
 800297e:	f001 f963 	bl	8003c48 <USBD_LL_IsStallEP>
 8002982:	b108      	cbz	r0, 8002988 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8002984:	2301      	movs	r3, #1
 8002986:	e7f5      	b.n	8002974 <USBD_StdEPReq+0xfa>
                pep->status = 0x0000U;
 8002988:	6028      	str	r0, [r5, #0]
 800298a:	e7f4      	b.n	8002976 <USBD_StdEPReq+0xfc>

0800298c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800298c:	780b      	ldrb	r3, [r1, #0]
 800298e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8002990:	784b      	ldrb	r3, [r1, #1]
 8002992:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8002994:	78ca      	ldrb	r2, [r1, #3]
 8002996:	788b      	ldrb	r3, [r1, #2]
 8002998:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800299c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800299e:	794a      	ldrb	r2, [r1, #5]
 80029a0:	790b      	ldrb	r3, [r1, #4]
 80029a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80029a6:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80029a8:	79ca      	ldrb	r2, [r1, #7]
 80029aa:	798b      	ldrb	r3, [r1, #6]
 80029ac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80029b0:	80c3      	strh	r3, [r0, #6]
 80029b2:	4770      	bx	lr

080029b4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80029b4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80029b6:	2202      	movs	r2, #2
{
 80029b8:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80029ba:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80029be:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80029c0:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80029c2:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80029c4:	2100      	movs	r1, #0
 80029c6:	f001 f95d 	bl	8003c84 <USBD_LL_Transmit>

  return USBD_OK;
}
 80029ca:	2000      	movs	r0, #0
 80029cc:	bd10      	pop	{r4, pc}

080029ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80029ce:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80029d0:	4613      	mov	r3, r2
 80029d2:	460a      	mov	r2, r1
 80029d4:	2100      	movs	r1, #0
 80029d6:	f001 f955 	bl	8003c84 <USBD_LL_Transmit>

  return USBD_OK;
}
 80029da:	2000      	movs	r0, #0
 80029dc:	bd08      	pop	{r3, pc}

080029de <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80029de:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80029e0:	4613      	mov	r3, r2
 80029e2:	460a      	mov	r2, r1
 80029e4:	2100      	movs	r1, #0
 80029e6:	f001 f95b 	bl	8003ca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80029ea:	2000      	movs	r0, #0
 80029ec:	bd08      	pop	{r3, pc}

080029ee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80029ee:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80029f0:	2304      	movs	r3, #4
 80029f2:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80029f6:	2300      	movs	r3, #0
 80029f8:	461a      	mov	r2, r3
 80029fa:	4619      	mov	r1, r3
 80029fc:	f001 f942 	bl	8003c84 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002a00:	2000      	movs	r0, #0
 8002a02:	bd08      	pop	{r3, pc}

08002a04 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8002a04:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8002a06:	2305      	movs	r3, #5
 8002a08:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4619      	mov	r1, r3
 8002a12:	f001 f945 	bl	8003ca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002a16:	2000      	movs	r0, #0
 8002a18:	bd08      	pop	{r3, pc}
	...

08002a1c <get_addr>:
}

uint32_t get_addr(void)
{
	return reg_addr;
}
 8002a1c:	4b01      	ldr	r3, [pc, #4]	; (8002a24 <get_addr+0x8>)
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000268 	.word	0x20000268

08002a28 <get_mode>:

dmxmode_t get_mode(void)
{
	return dmx_mode;
}
 8002a28:	4b01      	ldr	r3, [pc, #4]	; (8002a30 <get_mode+0x8>)
 8002a2a:	7818      	ldrb	r0, [r3, #0]
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000265 	.word	0x20000265

08002a34 <get_reg_length>:
}

uint32_t get_reg_length(void)
{
	return reg_len;
}
 8002a34:	4b01      	ldr	r3, [pc, #4]	; (8002a3c <get_reg_length+0x8>)
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000270 	.word	0x20000270

08002a40 <init_regs>:

void init_regs(void)
{
 8002a40:	b538      	push	{r3, r4, r5, lr}
	//allocate memory
	if (reg_data != NULL)
 8002a42:	4c08      	ldr	r4, [pc, #32]	; (8002a64 <init_regs+0x24>)
 8002a44:	6820      	ldr	r0, [r4, #0]
 8002a46:	b108      	cbz	r0, 8002a4c <init_regs+0xc>
		free(reg_data);
 8002a48:	f001 f9f0 	bl	8003e2c <free>

	reg_data = malloc(reg_len);
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <init_regs+0x28>)
 8002a4e:	681d      	ldr	r5, [r3, #0]
 8002a50:	4628      	mov	r0, r5
 8002a52:	f001 f9e3 	bl	8003e1c <malloc>
	memset(reg_data, 0, reg_len);
 8002a56:	462a      	mov	r2, r5
	reg_data = malloc(reg_len);
 8002a58:	6020      	str	r0, [r4, #0]
	memset(reg_data, 0, reg_len);
 8002a5a:	2100      	movs	r1, #0
}
 8002a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(reg_data, 0, reg_len);
 8002a60:	f001 b9ec 	b.w	8003e3c <memset>
 8002a64:	2000026c 	.word	0x2000026c
 8002a68:	20000270 	.word	0x20000270

08002a6c <dmx512_init>:
	dmx_mode = DMX_MODE1;
 8002a6c:	2201      	movs	r2, #1
	reg_addr = addr;
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <dmx512_init+0x1c>)
	switch (mode)
 8002a70:	2802      	cmp	r0, #2
	reg_addr = addr;
 8002a72:	6019      	str	r1, [r3, #0]
	dmx_mode = DMX_MODE1;
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <dmx512_init+0x20>)
 8002a76:	701a      	strb	r2, [r3, #0]
	reg_len = len;
 8002a78:	bf14      	ite	ne
 8002a7a:	220b      	movne	r2, #11
 8002a7c:	221a      	moveq	r2, #26
 8002a7e:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <dmx512_init+0x24>)
 8002a80:	601a      	str	r2, [r3, #0]
	init_regs();
 8002a82:	f7ff bfdd 	b.w	8002a40 <init_regs>
 8002a86:	bf00      	nop
 8002a88:	20000268 	.word	0x20000268
 8002a8c:	20000265 	.word	0x20000265
 8002a90:	20000270 	.word	0x20000270

08002a94 <set_reg>:

void set_reg(uint32_t reg, uint8_t val)
{
	if ((reg_data != NULL) && (reg<reg_len))
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <set_reg+0x14>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	b123      	cbz	r3, 8002aa4 <set_reg+0x10>
 8002a9a:	4a04      	ldr	r2, [pc, #16]	; (8002aac <set_reg+0x18>)
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	4282      	cmp	r2, r0
	{
		reg_data[reg] = val;
 8002aa0:	bf88      	it	hi
 8002aa2:	5419      	strbhi	r1, [r3, r0]
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	2000026c 	.word	0x2000026c
 8002aac:	20000270 	.word	0x20000270

08002ab0 <get_reg>:
	}
}

uint8_t get_reg(uint32_t reg)
{
	if ((reg_data != NULL) && (reg<reg_len))
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <get_reg+0x18>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	b12b      	cbz	r3, 8002ac2 <get_reg+0x12>
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <get_reg+0x1c>)
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	4282      	cmp	r2, r0
 8002abc:	d901      	bls.n	8002ac2 <get_reg+0x12>
	{
		return reg_data[reg];
 8002abe:	5c18      	ldrb	r0, [r3, r0]
 8002ac0:	4770      	bx	lr
	}
	else
	{
		return 0;
 8002ac2:	2000      	movs	r0, #0
	}
}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	2000026c 	.word	0x2000026c
 8002acc:	20000270 	.word	0x20000270

08002ad0 <get_reg_name>:
}


const char* get_reg_name(uint32_t reg)
{
	if (reg<reg_len)
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <get_reg_name+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4283      	cmp	r3, r0
		return regnames[reg];
 8002ad6:	bf86      	itte	hi
 8002ad8:	4b03      	ldrhi	r3, [pc, #12]	; (8002ae8 <get_reg_name+0x18>)
 8002ada:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
	else
		return 0;
 8002ade:	2000      	movls	r0, #0
}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000270 	.word	0x20000270
 8002ae8:	20000008 	.word	0x20000008

08002aec <USART1_IRQHandler>:
//END TODO
#endif

/* UART1 Interrupt Service Routine */
void USART1_IRQHandler(void)
{
 8002aec:	b507      	push	{r0, r1, r2, lr}
	//Get the received byte and clear Frame Error IRQ flag
	//On Framing Error restart Timer to search for a start condition
	if (__HAL_UART_GET_FLAG(&huart1,UART_FLAG_FE))
 8002aee:	480a      	ldr	r0, [pc, #40]	; (8002b18 <USART1_IRQHandler+0x2c>)
 8002af0:	6803      	ldr	r3, [r0, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	0792      	lsls	r2, r2, #30
 8002af6:	d509      	bpl.n	8002b0c <USART1_IRQHandler+0x20>
	{
		__HAL_UART_CLEAR_FEFLAG(&huart1);
 8002af8:	2200      	movs	r2, #0
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	9201      	str	r2, [sp, #4]
#ifdef USE_TIMER
		TIM_ITConfig(TIM1, TIM_IT_CC1, ENABLE);
#else
		start_flag = 1;
 8002b00:	2201      	movs	r2, #1
		__HAL_UART_CLEAR_FEFLAG(&huart1);
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	9b01      	ldr	r3, [sp, #4]
		start_flag = 1;
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <USART1_IRQHandler+0x30>)
 8002b0a:	701a      	strb	r2, [r3, #0]
#endif
		HAL_UART_IRQHandler(&huart1);
		return;
	}
	HAL_UART_IRQHandler(&huart1);
 8002b0c:	f7ff f880 	bl	8001c10 <HAL_UART_IRQHandler>
}
 8002b10:	b003      	add	sp, #12
 8002b12:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b16:	bf00      	nop
 8002b18:	2000085c 	.word	0x2000085c
 8002b1c:	20000280 	.word	0x20000280

08002b20 <HAL_UART_RxCpltCallback>:
//UART IRQ Triggered by incoming characters
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	volatile uint8_t rx_byte;

	if (huart->Instance == USART1)
 8002b20:	6802      	ldr	r2, [r0, #0]
 8002b22:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <HAL_UART_RxCpltCallback+0xbc>)
{
 8002b24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (huart->Instance == USART1)
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d130      	bne.n	8002b8c <HAL_UART_RxCpltCallback+0x6c>
    {
		rx_byte = buffer;
 8002b2a:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <HAL_UART_RxCpltCallback+0xc0>)

		//Timer has signaled a start flag.
		//We can start to capture data.
		if (start_flag)
 8002b2c:	4d2d      	ldr	r5, [pc, #180]	; (8002be4 <HAL_UART_RxCpltCallback+0xc4>)
		rx_byte = buffer;
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4c2d      	ldr	r4, [pc, #180]	; (8002be8 <HAL_UART_RxCpltCallback+0xc8>)
 8002b32:	f88d 3007 	strb.w	r3, [sp, #7]
		if (start_flag)
 8002b36:	782b      	ldrb	r3, [r5, #0]
 8002b38:	b363      	cbz	r3, 8002b94 <HAL_UART_RxCpltCallback+0x74>
		{
			//On every incoming start packet we invert the LED to signal incoming data
			msg_cnt++;
 8002b3a:	4a2c      	ldr	r2, [pc, #176]	; (8002bec <HAL_UART_RxCpltCallback+0xcc>)
 8002b3c:	7813      	ldrb	r3, [r2, #0]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	7013      	strb	r3, [r2, #0]
			if (msg_cnt == 44)
 8002b44:	7813      	ldrb	r3, [r2, #0]
 8002b46:	2b2c      	cmp	r3, #44	; 0x2c
 8002b48:	d10d      	bne.n	8002b66 <HAL_UART_RxCpltCallback+0x46>
			{
				msg_cnt = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	7013      	strb	r3, [r2, #0]
				led_status =!led_status;
 8002b4e:	4a28      	ldr	r2, [pc, #160]	; (8002bf0 <HAL_UART_RxCpltCallback+0xd0>)
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 8002b50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
				led_status =!led_status;
 8002b54:	7813      	ldrb	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 8002b56:	4827      	ldr	r0, [pc, #156]	; (8002bf4 <HAL_UART_RxCpltCallback+0xd4>)
				led_status =!led_status;
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	7013      	strb	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 8002b60:	7812      	ldrb	r2, [r2, #0]
 8002b62:	f7fd fe03 	bl	800076c <HAL_GPIO_WritePin>
			}

			//Reset Variables
			dmx_error = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	4923      	ldr	r1, [pc, #140]	; (8002bf8 <HAL_UART_RxCpltCallback+0xd8>)
 8002b6a:	700b      	strb	r3, [r1, #0]
			byte_count = 0;
 8002b6c:	8023      	strh	r3, [r4, #0]
			start_flag = 0;
 8002b6e:	702b      	strb	r3, [r5, #0]

			/* first byte determines packet type */
			switch (rx_byte)
 8002b70:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002b74:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8002b78:	b152      	cbz	r2, 8002b90 <HAL_UART_RxCpltCallback+0x70>
 8002b7a:	2b17      	cmp	r3, #23
 8002b7c:	f04f 0201 	mov.w	r2, #1
 8002b80:	d028      	beq.n	8002bd4 <HAL_UART_RxCpltCallback+0xb4>
			case 0x17:
				packet_type = TEST_PACKET;
				break;
			default:
				//Anything else we declare an error....
				dmx_error = 1;
 8002b82:	700a      	strb	r2, [r1, #0]
		}
		//Increase Counter
		byte_count++;

		//Get more data
		HAL_UART_Receive_IT(&huart1, &buffer, 1);
 8002b84:	4916      	ldr	r1, [pc, #88]	; (8002be0 <HAL_UART_RxCpltCallback+0xc0>)
 8002b86:	481d      	ldr	r0, [pc, #116]	; (8002bfc <HAL_UART_RxCpltCallback+0xdc>)
 8002b88:	f7fe ffdb 	bl	8001b42 <HAL_UART_Receive_IT>
    }
}
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
				packet_type = DATA_PACKET;
 8002b90:	4a1b      	ldr	r2, [pc, #108]	; (8002c00 <HAL_UART_RxCpltCallback+0xe0>)
 8002b92:	7013      	strb	r3, [r2, #0]
		if (packet_type == DATA_PACKET)
 8002b94:	4b1a      	ldr	r3, [pc, #104]	; (8002c00 <HAL_UART_RxCpltCallback+0xe0>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	b9b3      	cbnz	r3, 8002bc8 <HAL_UART_RxCpltCallback+0xa8>
			if (byte_count >= start_addr && byte_count < start_addr + get_reg_length())
 8002b9a:	4d1a      	ldr	r5, [pc, #104]	; (8002c04 <HAL_UART_RxCpltCallback+0xe4>)
 8002b9c:	8823      	ldrh	r3, [r4, #0]
 8002b9e:	682a      	ldr	r2, [r5, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d310      	bcc.n	8002bc8 <HAL_UART_RxCpltCallback+0xa8>
 8002ba6:	8826      	ldrh	r6, [r4, #0]
 8002ba8:	f7ff ff44 	bl	8002a34 <get_reg_length>
 8002bac:	682b      	ldr	r3, [r5, #0]
 8002bae:	b2b6      	uxth	r6, r6
 8002bb0:	4418      	add	r0, r3
 8002bb2:	4286      	cmp	r6, r0
 8002bb4:	d208      	bcs.n	8002bc8 <HAL_UART_RxCpltCallback+0xa8>
				set_reg(byte_count - start_addr-1, rx_byte);
 8002bb6:	8820      	ldrh	r0, [r4, #0]
 8002bb8:	682b      	ldr	r3, [r5, #0]
 8002bba:	b280      	uxth	r0, r0
 8002bbc:	1ac0      	subs	r0, r0, r3
 8002bbe:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002bc2:	3801      	subs	r0, #1
 8002bc4:	f7ff ff66 	bl	8002a94 <set_reg>
		byte_count++;
 8002bc8:	8823      	ldrh	r3, [r4, #0]
		HAL_UART_Receive_IT(&huart1, &buffer, 1);
 8002bca:	2201      	movs	r2, #1
		byte_count++;
 8002bcc:	3301      	adds	r3, #1
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	8023      	strh	r3, [r4, #0]
 8002bd2:	e7d7      	b.n	8002b84 <HAL_UART_RxCpltCallback+0x64>
				packet_type = TEST_PACKET;
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_UART_RxCpltCallback+0xe0>)
 8002bd6:	701a      	strb	r2, [r3, #0]
				break;
 8002bd8:	e7dc      	b.n	8002b94 <HAL_UART_RxCpltCallback+0x74>
 8002bda:	bf00      	nop
 8002bdc:	40013800 	.word	0x40013800
 8002be0:	20000274 	.word	0x20000274
 8002be4:	20000280 	.word	0x20000280
 8002be8:	20000276 	.word	0x20000276
 8002bec:	20000279 	.word	0x20000279
 8002bf0:	20000278 	.word	0x20000278
 8002bf4:	40011000 	.word	0x40011000
 8002bf8:	20000070 	.word	0x20000070
 8002bfc:	2000085c 	.word	0x2000085c
 8002c00:	2000027a 	.word	0x2000027a
 8002c04:	2000027c 	.word	0x2000027c

08002c08 <dmx512_setRx>:
}



void dmx512_setRx(void)
{
 8002c08:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8002c0a:	4805      	ldr	r0, [pc, #20]	; (8002c20 <dmx512_setRx+0x18>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2180      	movs	r1, #128	; 0x80
 8002c10:	f7fd fdac 	bl	800076c <HAL_GPIO_WritePin>
    HAL_HalfDuplex_EnableReceiver(&huart1);
}
 8002c14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_HalfDuplex_EnableReceiver(&huart1);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <dmx512_setRx+0x1c>)
 8002c1a:	f7ff b8a1 	b.w	8001d60 <HAL_HalfDuplex_EnableReceiver>
 8002c1e:	bf00      	nop
 8002c20:	40010c00 	.word	0x40010c00
 8002c24:	2000085c 	.word	0x2000085c

08002c28 <dmx512_rec_enable.part.0>:
{
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_SET);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
}

void dmx512_rec_enable(uint8_t on)
 8002c28:	b508      	push	{r3, lr}
{
	if (on)
	{
		//Determine Start Addr
		start_addr = get_addr();
 8002c2a:	f7ff fef7 	bl	8002a1c <get_addr>
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <dmx512_rec_enable.part.0+0x1c>)
 8002c30:	6018      	str	r0, [r3, #0]

		//Set Receiver to input
		dmx512_setRx();
 8002c32:	f7ff ffe9 	bl	8002c08 <dmx512_setRx>
		//Disable Timer
#ifdef USE_TIMER
		TIM_ITConfig(dmx512_config.tim, TIM_IT_CC1, DISABLE);
#endif
	}
}
 8002c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	HAL_UART_Receive_IT(&huart1, &buffer, 1);
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	4902      	ldr	r1, [pc, #8]	; (8002c48 <dmx512_rec_enable.part.0+0x20>)
 8002c3e:	4803      	ldr	r0, [pc, #12]	; (8002c4c <dmx512_rec_enable.part.0+0x24>)
 8002c40:	f7fe bf7f 	b.w	8001b42 <HAL_UART_Receive_IT>
 8002c44:	2000027c 	.word	0x2000027c
 8002c48:	20000274 	.word	0x20000274
 8002c4c:	2000085c 	.word	0x2000085c

08002c50 <dmx512_rec_init>:
{
 8002c50:	f7ff bfea 	b.w	8002c28 <dmx512_rec_enable.part.0>

08002c54 <get_mode_from_pins>:
#include <stm32f103xb.h>
#include <stm32f1xx.h>
#include <stm32f1xx_hal_gpio.h>

uint8_t get_mode_from_pins(void)
{
 8002c54:	b510      	push	{r4, lr}
	uint8_t mode = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_0_GPIO_Port, MODE_0_Pin))
 8002c56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c5a:	4808      	ldr	r0, [pc, #32]	; (8002c7c <get_mode_from_pins+0x28>)
 8002c5c:	f7fd fd80 	bl	8000760 <HAL_GPIO_ReadPin>
	uint8_t mode = 0;
 8002c60:	fab0 f480 	clz	r4, r0
		mode = mode | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_1_GPIO_Port, MODE_1_Pin))
 8002c64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c68:	4804      	ldr	r0, [pc, #16]	; (8002c7c <get_mode_from_pins+0x28>)
	uint8_t mode = 0;
 8002c6a:	0964      	lsrs	r4, r4, #5
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_1_GPIO_Port, MODE_1_Pin))
 8002c6c:	f7fd fd78 	bl	8000760 <HAL_GPIO_ReadPin>
 8002c70:	b908      	cbnz	r0, 8002c76 <get_mode_from_pins+0x22>
		mode = mode | 0x02;
 8002c72:	f044 0402 	orr.w	r4, r4, #2
	return mode;
}
 8002c76:	4620      	mov	r0, r4
 8002c78:	bd10      	pop	{r4, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40011000 	.word	0x40011000

08002c80 <get_addr_from_pins>:

uint8_t get_addr_from_pins(void)
{
 8002c80:	b510      	push	{r4, lr}
	uint8_t addr = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_0_GPIO_Port, ADDR_0_Pin))
 8002c82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c86:	481f      	ldr	r0, [pc, #124]	; (8002d04 <get_addr_from_pins+0x84>)
 8002c88:	f7fd fd6a 	bl	8000760 <HAL_GPIO_ReadPin>
	uint8_t addr = 0;
 8002c8c:	fab0 f480 	clz	r4, r0
		addr = addr | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_1_GPIO_Port, ADDR_1_Pin))
 8002c90:	2108      	movs	r1, #8
 8002c92:	481d      	ldr	r0, [pc, #116]	; (8002d08 <get_addr_from_pins+0x88>)
	uint8_t addr = 0;
 8002c94:	0964      	lsrs	r4, r4, #5
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_1_GPIO_Port, ADDR_1_Pin))
 8002c96:	f7fd fd63 	bl	8000760 <HAL_GPIO_ReadPin>
 8002c9a:	b908      	cbnz	r0, 8002ca0 <get_addr_from_pins+0x20>
		addr = addr | 0x02;
 8002c9c:	f044 0402 	orr.w	r4, r4, #2
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_2_GPIO_Port, ADDR_2_Pin))
 8002ca0:	2110      	movs	r1, #16
 8002ca2:	4819      	ldr	r0, [pc, #100]	; (8002d08 <get_addr_from_pins+0x88>)
 8002ca4:	f7fd fd5c 	bl	8000760 <HAL_GPIO_ReadPin>
 8002ca8:	b908      	cbnz	r0, 8002cae <get_addr_from_pins+0x2e>
		addr = addr | 0x04;
 8002caa:	f044 0404 	orr.w	r4, r4, #4
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_3_GPIO_Port, ADDR_3_Pin))
 8002cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cb2:	4815      	ldr	r0, [pc, #84]	; (8002d08 <get_addr_from_pins+0x88>)
 8002cb4:	f7fd fd54 	bl	8000760 <HAL_GPIO_ReadPin>
 8002cb8:	b908      	cbnz	r0, 8002cbe <get_addr_from_pins+0x3e>
		addr = addr | 0x08;
 8002cba:	f044 0408 	orr.w	r4, r4, #8
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_4_GPIO_Port, ADDR_4_Pin))
 8002cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cc2:	4811      	ldr	r0, [pc, #68]	; (8002d08 <get_addr_from_pins+0x88>)
 8002cc4:	f7fd fd4c 	bl	8000760 <HAL_GPIO_ReadPin>
 8002cc8:	b908      	cbnz	r0, 8002cce <get_addr_from_pins+0x4e>
		addr = addr | 0x10;
 8002cca:	f044 0410 	orr.w	r4, r4, #16
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_5_GPIO_Port, ADDR_5_Pin))
 8002cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cd2:	480d      	ldr	r0, [pc, #52]	; (8002d08 <get_addr_from_pins+0x88>)
 8002cd4:	f7fd fd44 	bl	8000760 <HAL_GPIO_ReadPin>
 8002cd8:	b908      	cbnz	r0, 8002cde <get_addr_from_pins+0x5e>
		addr = addr | 0x20;
 8002cda:	f044 0420 	orr.w	r4, r4, #32
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_6_GPIO_Port, ADDR_6_Pin))
 8002cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ce2:	4809      	ldr	r0, [pc, #36]	; (8002d08 <get_addr_from_pins+0x88>)
 8002ce4:	f7fd fd3c 	bl	8000760 <HAL_GPIO_ReadPin>
 8002ce8:	b908      	cbnz	r0, 8002cee <get_addr_from_pins+0x6e>
		addr = addr | 0x40;
 8002cea:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_7_GPIO_Port, ADDR_7_Pin))
 8002cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cf2:	4805      	ldr	r0, [pc, #20]	; (8002d08 <get_addr_from_pins+0x88>)
 8002cf4:	f7fd fd34 	bl	8000760 <HAL_GPIO_ReadPin>
 8002cf8:	b908      	cbnz	r0, 8002cfe <get_addr_from_pins+0x7e>
		addr = addr | 0x80;
 8002cfa:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	return addr;
}
 8002cfe:	4620      	mov	r0, r4
 8002d00:	bd10      	pop	{r4, pc}
 8002d02:	bf00      	nop
 8002d04:	40010800 	.word	0x40010800
 8002d08:	40010c00 	.word	0x40010c00

08002d0c <scale_value>:

uint16_t scale_value( uint8_t val)
{
	uint32_t res = 0;
	//1) Scale input between 0 and max
	res = ((uint32_t)val * (uint32_t) MAX_PWM)/(uint32_t)255;
 8002d0c:	f240 4234 	movw	r2, #1076	; 0x434
 8002d10:	23ff      	movs	r3, #255	; 0xff
 8002d12:	4350      	muls	r0, r2
 8002d14:	fbb0 f3f3 	udiv	r3, r0, r3
	res = (res * (uint32_t)brightness_scale) / (uint32_t) MAX_PWM;
 8002d18:	4903      	ldr	r1, [pc, #12]	; (8002d28 <scale_value+0x1c>)
 8002d1a:	8808      	ldrh	r0, [r1, #0]
 8002d1c:	4358      	muls	r0, r3
 8002d1e:	fbb0 f0f2 	udiv	r0, r0, r2
	return res;
}
 8002d22:	b280      	uxth	r0, r0
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	20000282 	.word	0x20000282

08002d2c <update_pwm_lights>:

//Check what has changed and update Lights
//We only update parameters that have changed otherwise we might have waveform-artifacts...
void update_pwm_lights(uint8_t force)
{
 8002d2c:	b570      	push	{r4, r5, r6, lr}
	//Check if global brightness has changed and scale value
	if ((reg_shadow[MAX_BRIGHTNESS])!= get_reg(MAX_BRIGHTNESS) || force)
 8002d2e:	4c82      	ldr	r4, [pc, #520]	; (8002f38 <update_pwm_lights+0x20c>)
{
 8002d30:	4605      	mov	r5, r0
	if ((reg_shadow[MAX_BRIGHTNESS])!= get_reg(MAX_BRIGHTNESS) || force)
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	2000      	movs	r0, #0
 8002d36:	781e      	ldrb	r6, [r3, #0]
 8002d38:	f7ff feba 	bl	8002ab0 <get_reg>
 8002d3c:	4286      	cmp	r6, r0
 8002d3e:	d100      	bne.n	8002d42 <update_pwm_lights+0x16>
 8002d40:	b185      	cbz	r5, 8002d64 <update_pwm_lights+0x38>
	{
		brightness_scale = ((uint32_t)get_reg(MAX_BRIGHTNESS) * (uint32_t) MAX_PWM)/(uint32_t)255;
 8002d42:	2000      	movs	r0, #0
 8002d44:	f7ff feb4 	bl	8002ab0 <get_reg>
 8002d48:	f240 4334 	movw	r3, #1076	; 0x434
 8002d4c:	4358      	muls	r0, r3
 8002d4e:	23ff      	movs	r3, #255	; 0xff
 8002d50:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d54:	4b79      	ldr	r3, [pc, #484]	; (8002f3c <update_pwm_lights+0x210>)
		//After a brightness update we need to update all the over PWM outputs
		force = 1;
		reg_shadow[MAX_BRIGHTNESS] = get_reg(MAX_BRIGHTNESS);
 8002d56:	6825      	ldr	r5, [r4, #0]
		brightness_scale = ((uint32_t)get_reg(MAX_BRIGHTNESS) * (uint32_t) MAX_PWM)/(uint32_t)255;
 8002d58:	8018      	strh	r0, [r3, #0]
		reg_shadow[MAX_BRIGHTNESS] = get_reg(MAX_BRIGHTNESS);
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f7ff fea8 	bl	8002ab0 <get_reg>
 8002d60:	7028      	strb	r0, [r5, #0]
		force = 1;
 8002d62:	2501      	movs	r5, #1
	}

	//Update PWM Values if needed
	if ((reg_shadow[CH1_RED])!= get_reg(CH1_RED) || force)
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	2001      	movs	r0, #1
 8002d68:	785e      	ldrb	r6, [r3, #1]
 8002d6a:	f7ff fea1 	bl	8002ab0 <get_reg>
 8002d6e:	4286      	cmp	r6, r0
 8002d70:	d100      	bne.n	8002d74 <update_pwm_lights+0x48>
 8002d72:	b175      	cbz	r5, 8002d92 <update_pwm_lights+0x66>
	{
		configPWM(PWM_CH1,CH_RED,scale_value(get_reg(CH1_RED)));
 8002d74:	2001      	movs	r0, #1
 8002d76:	f7ff fe9b 	bl	8002ab0 <get_reg>
 8002d7a:	f7ff ffc7 	bl	8002d0c <scale_value>
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4602      	mov	r2, r0
 8002d82:	4608      	mov	r0, r1
 8002d84:	f000 fb5c 	bl	8003440 <configPWM>
		reg_shadow[CH1_RED] = get_reg(CH1_RED);
 8002d88:	2001      	movs	r0, #1
 8002d8a:	6826      	ldr	r6, [r4, #0]
 8002d8c:	f7ff fe90 	bl	8002ab0 <get_reg>
 8002d90:	7070      	strb	r0, [r6, #1]
	}

	if ((reg_shadow[CH1_GREEN])!= get_reg(CH1_GREEN) || force)
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	2002      	movs	r0, #2
 8002d96:	789e      	ldrb	r6, [r3, #2]
 8002d98:	f7ff fe8a 	bl	8002ab0 <get_reg>
 8002d9c:	4286      	cmp	r6, r0
 8002d9e:	d100      	bne.n	8002da2 <update_pwm_lights+0x76>
 8002da0:	b175      	cbz	r5, 8002dc0 <update_pwm_lights+0x94>
	{
		configPWM(PWM_CH1,CH_GREEN,scale_value(get_reg(CH1_GREEN)));
 8002da2:	2002      	movs	r0, #2
 8002da4:	f7ff fe84 	bl	8002ab0 <get_reg>
 8002da8:	f7ff ffb0 	bl	8002d0c <scale_value>
 8002dac:	2101      	movs	r1, #1
 8002dae:	4602      	mov	r2, r0
 8002db0:	2000      	movs	r0, #0
 8002db2:	f000 fb45 	bl	8003440 <configPWM>
		reg_shadow[CH1_GREEN] = get_reg(CH1_GREEN);
 8002db6:	2002      	movs	r0, #2
 8002db8:	6826      	ldr	r6, [r4, #0]
 8002dba:	f7ff fe79 	bl	8002ab0 <get_reg>
 8002dbe:	70b0      	strb	r0, [r6, #2]
	}

	if ((reg_shadow[CH1_BLUE])!= get_reg(CH1_BLUE) || force)
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	2003      	movs	r0, #3
 8002dc4:	78de      	ldrb	r6, [r3, #3]
 8002dc6:	f7ff fe73 	bl	8002ab0 <get_reg>
 8002dca:	4286      	cmp	r6, r0
 8002dcc:	d100      	bne.n	8002dd0 <update_pwm_lights+0xa4>
 8002dce:	b175      	cbz	r5, 8002dee <update_pwm_lights+0xc2>
	{
		configPWM(PWM_CH1,CH_BLUE,scale_value(get_reg(CH1_BLUE)));
 8002dd0:	2003      	movs	r0, #3
 8002dd2:	f7ff fe6d 	bl	8002ab0 <get_reg>
 8002dd6:	f7ff ff99 	bl	8002d0c <scale_value>
 8002dda:	2102      	movs	r1, #2
 8002ddc:	4602      	mov	r2, r0
 8002dde:	2000      	movs	r0, #0
 8002de0:	f000 fb2e 	bl	8003440 <configPWM>
		reg_shadow[CH1_BLUE] = get_reg(CH1_BLUE);
 8002de4:	2003      	movs	r0, #3
 8002de6:	6826      	ldr	r6, [r4, #0]
 8002de8:	f7ff fe62 	bl	8002ab0 <get_reg>
 8002dec:	70f0      	strb	r0, [r6, #3]
	}

	if ((reg_shadow[CH2_RED])!= get_reg(CH2_RED) || force)
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	2004      	movs	r0, #4
 8002df2:	791e      	ldrb	r6, [r3, #4]
 8002df4:	f7ff fe5c 	bl	8002ab0 <get_reg>
 8002df8:	4286      	cmp	r6, r0
 8002dfa:	d100      	bne.n	8002dfe <update_pwm_lights+0xd2>
 8002dfc:	b175      	cbz	r5, 8002e1c <update_pwm_lights+0xf0>
	{
		configPWM(PWM_CH2,CH_RED,scale_value(get_reg(CH2_RED)));
 8002dfe:	2004      	movs	r0, #4
 8002e00:	f7ff fe56 	bl	8002ab0 <get_reg>
 8002e04:	f7ff ff82 	bl	8002d0c <scale_value>
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f000 fb17 	bl	8003440 <configPWM>
		reg_shadow[CH2_RED] = get_reg(CH2_RED);
 8002e12:	2004      	movs	r0, #4
 8002e14:	6826      	ldr	r6, [r4, #0]
 8002e16:	f7ff fe4b 	bl	8002ab0 <get_reg>
 8002e1a:	7130      	strb	r0, [r6, #4]
	}

	if ((reg_shadow[CH2_GREEN])!= get_reg(CH2_GREEN) || force)
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	2005      	movs	r0, #5
 8002e20:	795e      	ldrb	r6, [r3, #5]
 8002e22:	f7ff fe45 	bl	8002ab0 <get_reg>
 8002e26:	4286      	cmp	r6, r0
 8002e28:	d100      	bne.n	8002e2c <update_pwm_lights+0x100>
 8002e2a:	b175      	cbz	r5, 8002e4a <update_pwm_lights+0x11e>
	{
		configPWM(PWM_CH2,CH_GREEN,scale_value(get_reg(CH2_GREEN)));
 8002e2c:	2005      	movs	r0, #5
 8002e2e:	f7ff fe3f 	bl	8002ab0 <get_reg>
 8002e32:	f7ff ff6b 	bl	8002d0c <scale_value>
 8002e36:	2101      	movs	r1, #1
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4608      	mov	r0, r1
 8002e3c:	f000 fb00 	bl	8003440 <configPWM>
		reg_shadow[CH2_GREEN] = get_reg(CH2_GREEN);
 8002e40:	2005      	movs	r0, #5
 8002e42:	6826      	ldr	r6, [r4, #0]
 8002e44:	f7ff fe34 	bl	8002ab0 <get_reg>
 8002e48:	7170      	strb	r0, [r6, #5]
	}

	if ((reg_shadow[CH2_BLUE])!= get_reg(CH2_BLUE) || force)
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	2006      	movs	r0, #6
 8002e4e:	799e      	ldrb	r6, [r3, #6]
 8002e50:	f7ff fe2e 	bl	8002ab0 <get_reg>
 8002e54:	4286      	cmp	r6, r0
 8002e56:	d100      	bne.n	8002e5a <update_pwm_lights+0x12e>
 8002e58:	b175      	cbz	r5, 8002e78 <update_pwm_lights+0x14c>
	{
		configPWM(PWM_CH2,CH_BLUE,scale_value(get_reg(CH2_BLUE)));
 8002e5a:	2006      	movs	r0, #6
 8002e5c:	f7ff fe28 	bl	8002ab0 <get_reg>
 8002e60:	f7ff ff54 	bl	8002d0c <scale_value>
 8002e64:	2102      	movs	r1, #2
 8002e66:	4602      	mov	r2, r0
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f000 fae9 	bl	8003440 <configPWM>
		reg_shadow[CH2_BLUE] = get_reg(CH2_BLUE);
 8002e6e:	2006      	movs	r0, #6
 8002e70:	6826      	ldr	r6, [r4, #0]
 8002e72:	f7ff fe1d 	bl	8002ab0 <get_reg>
 8002e76:	71b0      	strb	r0, [r6, #6]
	}

	if ((reg_shadow[CH3_RED])!= get_reg(CH3_RED) || force)
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	2007      	movs	r0, #7
 8002e7c:	79de      	ldrb	r6, [r3, #7]
 8002e7e:	f7ff fe17 	bl	8002ab0 <get_reg>
 8002e82:	4286      	cmp	r6, r0
 8002e84:	d100      	bne.n	8002e88 <update_pwm_lights+0x15c>
 8002e86:	b175      	cbz	r5, 8002ea6 <update_pwm_lights+0x17a>
	{
		configPWM(PWM_CH3,CH_RED,scale_value(get_reg(CH3_RED)));
 8002e88:	2007      	movs	r0, #7
 8002e8a:	f7ff fe11 	bl	8002ab0 <get_reg>
 8002e8e:	f7ff ff3d 	bl	8002d0c <scale_value>
 8002e92:	2100      	movs	r1, #0
 8002e94:	4602      	mov	r2, r0
 8002e96:	2002      	movs	r0, #2
 8002e98:	f000 fad2 	bl	8003440 <configPWM>
		reg_shadow[CH3_RED] = get_reg(CH3_RED);
 8002e9c:	2007      	movs	r0, #7
 8002e9e:	6826      	ldr	r6, [r4, #0]
 8002ea0:	f7ff fe06 	bl	8002ab0 <get_reg>
 8002ea4:	71f0      	strb	r0, [r6, #7]
	}

	if ((reg_shadow[CH3_GREEN])!= get_reg(CH3_GREEN) || force)
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	2008      	movs	r0, #8
 8002eaa:	7a1e      	ldrb	r6, [r3, #8]
 8002eac:	f7ff fe00 	bl	8002ab0 <get_reg>
 8002eb0:	4286      	cmp	r6, r0
 8002eb2:	d100      	bne.n	8002eb6 <update_pwm_lights+0x18a>
 8002eb4:	b175      	cbz	r5, 8002ed4 <update_pwm_lights+0x1a8>
	{
		configPWM(PWM_CH3,CH_GREEN,scale_value(get_reg(CH3_GREEN)));
 8002eb6:	2008      	movs	r0, #8
 8002eb8:	f7ff fdfa 	bl	8002ab0 <get_reg>
 8002ebc:	f7ff ff26 	bl	8002d0c <scale_value>
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	2002      	movs	r0, #2
 8002ec6:	f000 fabb 	bl	8003440 <configPWM>
		reg_shadow[CH3_GREEN] = get_reg(CH3_GREEN);
 8002eca:	2008      	movs	r0, #8
 8002ecc:	6826      	ldr	r6, [r4, #0]
 8002ece:	f7ff fdef 	bl	8002ab0 <get_reg>
 8002ed2:	7230      	strb	r0, [r6, #8]
	}

	if ((reg_shadow[CH3_BLUE])!= get_reg(CH3_BLUE) || force)
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	2009      	movs	r0, #9
 8002ed8:	7a5e      	ldrb	r6, [r3, #9]
 8002eda:	f7ff fde9 	bl	8002ab0 <get_reg>
 8002ede:	4286      	cmp	r6, r0
 8002ee0:	d100      	bne.n	8002ee4 <update_pwm_lights+0x1b8>
 8002ee2:	b175      	cbz	r5, 8002f02 <update_pwm_lights+0x1d6>
	{
		configPWM(PWM_CH3,CH_BLUE,scale_value(get_reg(CH3_BLUE)));
 8002ee4:	2009      	movs	r0, #9
 8002ee6:	f7ff fde3 	bl	8002ab0 <get_reg>
 8002eea:	f7ff ff0f 	bl	8002d0c <scale_value>
 8002eee:	2102      	movs	r1, #2
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4608      	mov	r0, r1
 8002ef4:	f000 faa4 	bl	8003440 <configPWM>
		reg_shadow[CH3_BLUE] = get_reg(CH3_BLUE);
 8002ef8:	2009      	movs	r0, #9
 8002efa:	6826      	ldr	r6, [r4, #0]
 8002efc:	f7ff fdd8 	bl	8002ab0 <get_reg>
 8002f00:	7270      	strb	r0, [r6, #9]
	}

	if ((reg_shadow[CH3_WHITE])!= get_reg(CH3_WHITE) || force)
 8002f02:	6823      	ldr	r3, [r4, #0]
 8002f04:	200a      	movs	r0, #10
 8002f06:	7a9e      	ldrb	r6, [r3, #10]
 8002f08:	f7ff fdd2 	bl	8002ab0 <get_reg>
 8002f0c:	4286      	cmp	r6, r0
 8002f0e:	d100      	bne.n	8002f12 <update_pwm_lights+0x1e6>
 8002f10:	b175      	cbz	r5, 8002f30 <update_pwm_lights+0x204>
	{
		configPWM(PWM_CH3,CH_WHITE,scale_value(get_reg(CH3_WHITE)));
 8002f12:	200a      	movs	r0, #10
 8002f14:	f7ff fdcc 	bl	8002ab0 <get_reg>
 8002f18:	f7ff fef8 	bl	8002d0c <scale_value>
 8002f1c:	2103      	movs	r1, #3
 8002f1e:	4602      	mov	r2, r0
 8002f20:	2002      	movs	r0, #2
 8002f22:	f000 fa8d 	bl	8003440 <configPWM>
		reg_shadow[CH3_WHITE] = get_reg(CH3_WHITE);
 8002f26:	200a      	movs	r0, #10
 8002f28:	6824      	ldr	r4, [r4, #0]
 8002f2a:	f7ff fdc1 	bl	8002ab0 <get_reg>
 8002f2e:	72a0      	strb	r0, [r4, #10]
	//Deal with LED Strip Registers
	if (DMX_MODE2 == get_mode())
	{

	}
}
 8002f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (DMX_MODE2 == get_mode())
 8002f34:	f7ff bd78 	b.w	8002a28 <get_mode>
 8002f38:	20000284 	.word	0x20000284
 8002f3c:	20000282 	.word	0x20000282

08002f40 <init_update_lights>:
{
 8002f40:	b538      	push	{r3, r4, r5, lr}
	if (reg_shadow != NULL)
 8002f42:	4c0d      	ldr	r4, [pc, #52]	; (8002f78 <init_update_lights+0x38>)
 8002f44:	6820      	ldr	r0, [r4, #0]
 8002f46:	b108      	cbz	r0, 8002f4c <init_update_lights+0xc>
		free(reg_shadow);
 8002f48:	f000 ff70 	bl	8003e2c <free>
	reg_shadow = malloc(get_reg_length()+1);
 8002f4c:	f7ff fd72 	bl	8002a34 <get_reg_length>
 8002f50:	3001      	adds	r0, #1
 8002f52:	f000 ff63 	bl	8003e1c <malloc>
 8002f56:	4605      	mov	r5, r0
 8002f58:	6020      	str	r0, [r4, #0]
	memset(reg_shadow,0,get_reg_length());
 8002f5a:	f7ff fd6b 	bl	8002a34 <get_reg_length>
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4602      	mov	r2, r0
 8002f62:	4628      	mov	r0, r5
 8002f64:	f000 ff6a 	bl	8003e3c <memset>
	reg_shadow[MAX_BRIGHTNESS] = 255;
 8002f68:	22ff      	movs	r2, #255	; 0xff
 8002f6a:	6823      	ldr	r3, [r4, #0]
	update_pwm_lights(1);
 8002f6c:	2001      	movs	r0, #1
	reg_shadow[MAX_BRIGHTNESS] = 255;
 8002f6e:	701a      	strb	r2, [r3, #0]
}
 8002f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	update_pwm_lights(1);
 8002f74:	f7ff beda 	b.w	8002d2c <update_pwm_lights>
 8002f78:	20000284 	.word	0x20000284

08002f7c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f7c:	2228      	movs	r2, #40	; 0x28
{
 8002f7e:	b530      	push	{r4, r5, lr}
 8002f80:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f82:	eb0d 0002 	add.w	r0, sp, r2
 8002f86:	2100      	movs	r1, #0
 8002f88:	f000 ff58 	bl	8003e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f8c:	2214      	movs	r2, #20
 8002f8e:	2100      	movs	r1, #0
 8002f90:	eb0d 0002 	add.w	r0, sp, r2
 8002f94:	f000 ff52 	bl	8003e3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f98:	2100      	movs	r1, #0
 8002f9a:	2210      	movs	r2, #16
 8002f9c:	a801      	add	r0, sp, #4
 8002f9e:	f000 ff4d 	bl	8003e3c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002fa2:	2309      	movs	r3, #9
 8002fa4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002faa:	2201      	movs	r2, #1
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fac:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fae:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fb0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002fb2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fb6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fb8:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002fba:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002fbc:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fbe:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fc0:	f7fd feda 	bl	8000d78 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fc4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fc6:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fc8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002fce:	4629      	mov	r1, r5
 8002fd0:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fd2:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fd4:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fd6:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fd8:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002fda:	f7fe f8a7 	bl	800112c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002fde:	2312      	movs	r3, #18
 8002fe0:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fe6:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002fe8:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002fea:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fec:	f7fe f95c 	bl	80012a8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002ff0:	b015      	add	sp, #84	; 0x54
 8002ff2:	bd30      	pop	{r4, r5, pc}

08002ff4 <main>:
{
 8002ff4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002ff8:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8002ffa:	f7fd f8d3 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8002ffe:	f7ff ffbd 	bl	8002f7c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003002:	2210      	movs	r2, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003004:	4d94      	ldr	r5, [pc, #592]	; (8003258 <main+0x264>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003006:	eb0d 0002 	add.w	r0, sp, r2
 800300a:	2100      	movs	r1, #0
 800300c:	f000 ff16 	bl	8003e3c <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003010:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003012:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003014:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 8003016:	f04f 0980 	mov.w	r9, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800301a:	f043 0310 	orr.w	r3, r3, #16
 800301e:	61ab      	str	r3, [r5, #24]
 8003020:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8003022:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800302c:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 800302e:	488b      	ldr	r0, [pc, #556]	; (800325c <main+0x268>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003030:	f043 0320 	orr.w	r3, r3, #32
 8003034:	61ab      	str	r3, [r5, #24]
 8003036:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin MODE_0_Pin MODE_1_Pin */
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003038:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003042:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LED_Pin;
 8003044:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003048:	f043 0304 	orr.w	r3, r3, #4
 800304c:	61ab      	str	r3, [r5, #24]
 800304e:	69ab      	ldr	r3, [r5, #24]
  /*Configure GPIO pins : CH1_R_Pin CH1_G_Pin CH1_B_Pin CH2_R_Pin 
                           CH2_G_Pin CH3_R_Pin CH3_G_Pin CH3_B_Pin */
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
                          |CH2_G_Pin|CH3_R_Pin|CH3_G_Pin|CH3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003050:	f04f 0a03 	mov.w	sl, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	9302      	str	r3, [sp, #8]
 800305a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800305c:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : BUTTON_Pin ADDR_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|ADDR_0_Pin;
 800305e:	f248 0b20 	movw	fp, #32800	; 0x8020
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003062:	f043 0308 	orr.w	r3, r3, #8
 8003066:	61ab      	str	r3, [r5, #24]
 8003068:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306a:	9707      	str	r7, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	9303      	str	r3, [sp, #12]
 8003072:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 8003074:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003078:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 800307a:	f7fd fa8f 	bl	800059c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 800307e:	2200      	movs	r2, #0
 8003080:	4649      	mov	r1, r9
 8003082:	4876      	ldr	r0, [pc, #472]	; (800325c <main+0x268>)
 8003084:	f7fd fb72 	bl	800076c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
 8003088:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800308c:	a904      	add	r1, sp, #16
 800308e:	4874      	ldr	r0, [pc, #464]	; (8003260 <main+0x26c>)
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
 8003090:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003092:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003094:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003096:	f7fd fa81 	bl	800059c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800309a:	a904      	add	r1, sp, #16
 800309c:	4870      	ldr	r0, [pc, #448]	; (8003260 <main+0x26c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309e:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pin = LED_Pin;
 80030a0:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a4:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030a6:	f7fd fa79 	bl	800059c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
 80030aa:	f240 73ce 	movw	r3, #1998	; 0x7ce
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ae:	a904      	add	r1, sp, #16
 80030b0:	486c      	ldr	r0, [pc, #432]	; (8003264 <main+0x270>)
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
 80030b2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b4:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030b6:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ba:	f7fd fa6f 	bl	800059c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030be:	a904      	add	r1, sp, #16
 80030c0:	4866      	ldr	r0, [pc, #408]	; (800325c <main+0x268>)
  GPIO_InitStruct.Pin = CH2_B_Pin|CH2_W_Pin;
 80030c2:	f8cd a010 	str.w	sl, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c6:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030c8:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030cc:	f7fd fa66 	bl	800059c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d0:	a904      	add	r1, sp, #16
 80030d2:	4864      	ldr	r0, [pc, #400]	; (8003264 <main+0x270>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030d4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUTTON_Pin|ADDR_0_Pin;
 80030d6:	f8cd b010 	str.w	fp, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030da:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030dc:	f7fd fa5e 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR_5_Pin ADDR_6_Pin ADDR_7_Pin ADDR_1_Pin 
                           ADDR_2_Pin ADDR_3_Pin ADDR_4_Pin */
  GPIO_InitStruct.Pin = ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_1_Pin 
 80030e0:	f247 3318 	movw	r3, #29464	; 0x7318
                          |ADDR_2_Pin|ADDR_3_Pin|ADDR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e4:	a904      	add	r1, sp, #16
 80030e6:	485d      	ldr	r0, [pc, #372]	; (800325c <main+0x268>)
  GPIO_InitStruct.Pin = ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_1_Pin 
 80030e8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ea:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030ec:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ee:	f7fd fa55 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pins : WS8212_CH2_Pin WS8212_CH1_Pin */
  GPIO_InitStruct.Pin = WS8212_CH2_Pin|WS8212_CH1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f2:	a904      	add	r1, sp, #16
 80030f4:	4859      	ldr	r0, [pc, #356]	; (800325c <main+0x268>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f6:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030f8:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Pin = WS8212_CH2_Pin|WS8212_CH1_Pin;
 80030fc:	f8cd b010 	str.w	fp, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003100:	f7fd fa4c 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DIR_Pin */
  GPIO_InitStruct.Pin = RS232_TX_Pin;
 8003104:	f44f 6380 	mov.w	r3, #1024	; 0x400
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003108:	f44f 2a60 	mov.w	sl, #917504	; 0xe0000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 800310c:	a904      	add	r1, sp, #16
 800310e:	4853      	ldr	r0, [pc, #332]	; (800325c <main+0x268>)
  GPIO_InitStruct.Pin = RS232_TX_Pin;
 8003110:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003114:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003116:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8003118:	f7fd fa40 	bl	800059c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 800311c:	4a52      	ldr	r2, [pc, #328]	; (8003268 <main+0x274>)
  hadc1.Instance = ADC1;
 800311e:	4f53      	ldr	r7, [pc, #332]	; (800326c <main+0x278>)
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003120:	6853      	ldr	r3, [r2, #4]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003122:	4641      	mov	r1, r8
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003124:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003128:	4333      	orrs	r3, r6
 800312a:	6053      	str	r3, [r2, #4]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800312c:	484c      	ldr	r0, [pc, #304]	; (8003260 <main+0x26c>)
 800312e:	4622      	mov	r2, r4
 8003130:	f7fd fb1c 	bl	800076c <HAL_GPIO_WritePin>
  hadc1.Instance = ADC1;
 8003134:	4b4e      	ldr	r3, [pc, #312]	; (8003270 <main+0x27c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003136:	4638      	mov	r0, r7
  hadc1.Instance = ADC1;
 8003138:	603b      	str	r3, [r7, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800313a:	60bc      	str	r4, [r7, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800313c:	733c      	strb	r4, [r7, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800313e:	753c      	strb	r4, [r7, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003140:	607c      	str	r4, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003142:	9404      	str	r4, [sp, #16]
 8003144:	9405      	str	r4, [sp, #20]
 8003146:	9406      	str	r4, [sp, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003148:	f8c7 a01c 	str.w	sl, [r7, #28]
  hadc1.Init.NbrOfConversion = 1;
 800314c:	613e      	str	r6, [r7, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800314e:	f7fd f8f3 	bl	8000338 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003152:	a904      	add	r1, sp, #16
 8003154:	4638      	mov	r0, r7
  hadc2.Instance = ADC2;
 8003156:	4f47      	ldr	r7, [pc, #284]	; (8003274 <main+0x280>)
  sConfig.Channel = ADC_CHANNEL_0;
 8003158:	9404      	str	r4, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800315a:	9406      	str	r4, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800315c:	9605      	str	r6, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800315e:	f7fd f845 	bl	80001ec <HAL_ADC_ConfigChannel>
  hadc2.Instance = ADC2;
 8003162:	4b45      	ldr	r3, [pc, #276]	; (8003278 <main+0x284>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003164:	4638      	mov	r0, r7
  hadc2.Instance = ADC2;
 8003166:	603b      	str	r3, [r7, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003168:	60bc      	str	r4, [r7, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800316a:	733c      	strb	r4, [r7, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800316c:	753c      	strb	r4, [r7, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800316e:	607c      	str	r4, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003170:	9404      	str	r4, [sp, #16]
 8003172:	9405      	str	r4, [sp, #20]
 8003174:	9406      	str	r4, [sp, #24]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003176:	f8c7 a01c 	str.w	sl, [r7, #28]
  hadc2.Init.NbrOfConversion = 1;
 800317a:	613e      	str	r6, [r7, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800317c:	f7fd f8dc 	bl	8000338 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 8003180:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003182:	4638      	mov	r0, r7
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003184:	270c      	movs	r7, #12
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003186:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_4;
 8003188:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800318a:	9406      	str	r4, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800318c:	9605      	str	r6, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800318e:	f7fd f82d 	bl	80001ec <HAL_ADC_ConfigChannel>
  huart1.Instance = USART1;
 8003192:	483a      	ldr	r0, [pc, #232]	; (800327c <main+0x288>)
  huart1.Init.BaudRate = 250000;
 8003194:	4b3a      	ldr	r3, [pc, #232]	; (8003280 <main+0x28c>)
 8003196:	4a3b      	ldr	r2, [pc, #236]	; (8003284 <main+0x290>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003198:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 250000;
 800319a:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Parity = UART_PARITY_NONE;
 800319e:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031a0:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031a2:	61c4      	str	r4, [r0, #28]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80031a4:	f8c0 800c 	str.w	r8, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031a8:	6147      	str	r7, [r0, #20]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80031aa:	f7fe fbdd 	bl	8001968 <HAL_HalfDuplex_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031ae:	4622      	mov	r2, r4
 80031b0:	4621      	mov	r1, r4
 80031b2:	2025      	movs	r0, #37	; 0x25
 80031b4:	f7fd f952 	bl	800045c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031b8:	2025      	movs	r0, #37	; 0x25
 80031ba:	f7fd f983 	bl	80004c4 <HAL_NVIC_EnableIRQ>
  huart3.Init.BaudRate = 115200;
 80031be:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80031c2:	4931      	ldr	r1, [pc, #196]	; (8003288 <main+0x294>)
  huart3.Instance = USART3;
 80031c4:	4831      	ldr	r0, [pc, #196]	; (800328c <main+0x298>)
  huart3.Init.BaudRate = 115200;
 80031c6:	e880 000a 	stmia.w	r0, {r1, r3}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031ca:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031cc:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031ce:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031d0:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031d2:	61c4      	str	r4, [r0, #28]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031d4:	6147      	str	r7, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031d6:	f7fe fb99 	bl	800190c <HAL_UART_Init>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031da:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <main+0x29c>)
  print("");
 80031dc:	482d      	ldr	r0, [pc, #180]	; (8003294 <main+0x2a0>)
 80031de:	f8c3 9004 	str.w	r9, [r3, #4]
 80031e2:	f000 f9c3 	bl	800356c <print>
  print("-------------");
 80031e6:	482c      	ldr	r0, [pc, #176]	; (8003298 <main+0x2a4>)
 80031e8:	f000 f9c0 	bl	800356c <print>
  print("DMX CTRL V1.0");
 80031ec:	482b      	ldr	r0, [pc, #172]	; (800329c <main+0x2a8>)
 80031ee:	f000 f9bd 	bl	800356c <print>
  print("-------------");
 80031f2:	4829      	ldr	r0, [pc, #164]	; (8003298 <main+0x2a4>)
 80031f4:	f000 f9ba 	bl	800356c <print>
  print("");
 80031f8:	4826      	ldr	r0, [pc, #152]	; (8003294 <main+0x2a0>)
 80031fa:	f000 f9b7 	bl	800356c <print>
 if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == SET)
 80031fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  init_timers();
 8003200:	f000 f8f2 	bl	80033e8 <init_timers>
  print("Timer Init complete");
 8003204:	4826      	ldr	r0, [pc, #152]	; (80032a0 <main+0x2ac>)
 8003206:	f000 f9b1 	bl	800356c <print>
  dmx512_init((dmxmode_t)get_mode_from_pins(),get_addr_from_pins());
 800320a:	f7ff fd23 	bl	8002c54 <get_mode_from_pins>
 800320e:	4604      	mov	r4, r0
 8003210:	f7ff fd36 	bl	8002c80 <get_addr_from_pins>
 8003214:	4601      	mov	r1, r0
 8003216:	4620      	mov	r0, r4
 8003218:	f7ff fc28 	bl	8002a6c <dmx512_init>
  print("DMX512 Config complete");
 800321c:	4821      	ldr	r0, [pc, #132]	; (80032a4 <main+0x2b0>)
 800321e:	f000 f9a5 	bl	800356c <print>
  dmx512_rec_init();
 8003222:	f7ff fd15 	bl	8002c50 <dmx512_rec_init>
  print("DMX512 Init complete");
 8003226:	4820      	ldr	r0, [pc, #128]	; (80032a8 <main+0x2b4>)
 8003228:	f000 f9a0 	bl	800356c <print>
  init_update_lights();
 800322c:	f7ff fe88 	bl	8002f40 <init_update_lights>
  print("PWM Update Init complete");
 8003230:	481e      	ldr	r0, [pc, #120]	; (80032ac <main+0x2b8>)
 8003232:	f000 f99b 	bl	800356c <print>
  print("Shell Active");
 8003236:	481e      	ldr	r0, [pc, #120]	; (80032b0 <main+0x2bc>)
 8003238:	f000 f998 	bl	800356c <print>
  print_no_newline("DBG>");
 800323c:	481d      	ldr	r0, [pc, #116]	; (80032b4 <main+0x2c0>)
 800323e:	f000 f9b5 	bl	80035ac <print_no_newline>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003242:	4632      	mov	r2, r6
 8003244:	4641      	mov	r1, r8
 8003246:	4806      	ldr	r0, [pc, #24]	; (8003260 <main+0x26c>)
 8003248:	f7fd fa90 	bl	800076c <HAL_GPIO_WritePin>
	shell_process();
 800324c:	f000 f9c8 	bl	80035e0 <shell_process>
	    update_pwm_lights(0);
 8003250:	2000      	movs	r0, #0
 8003252:	f7ff fd6b 	bl	8002d2c <update_pwm_lights>
 8003256:	e7f9      	b.n	800324c <main+0x258>
 8003258:	40021000 	.word	0x40021000
 800325c:	40010c00 	.word	0x40010c00
 8003260:	40011000 	.word	0x40011000
 8003264:	40010800 	.word	0x40010800
 8003268:	40010000 	.word	0x40010000
 800326c:	2000082c 	.word	0x2000082c
 8003270:	40012400 	.word	0x40012400
 8003274:	200007f0 	.word	0x200007f0
 8003278:	40012800 	.word	0x40012800
 800327c:	2000085c 	.word	0x2000085c
 8003280:	0003d090 	.word	0x0003d090
 8003284:	40013800 	.word	0x40013800
 8003288:	40004800 	.word	0x40004800
 800328c:	200007b0 	.word	0x200007b0
 8003290:	e000e100 	.word	0xe000e100
 8003294:	08004b9e 	.word	0x08004b9e
 8003298:	08004be2 	.word	0x08004be2
 800329c:	08004a94 	.word	0x08004a94
 80032a0:	08004aa2 	.word	0x08004aa2
 80032a4:	08004ab6 	.word	0x08004ab6
 80032a8:	08004acd 	.word	0x08004acd
 80032ac:	08004ae2 	.word	0x08004ae2
 80032b0:	08004afb 	.word	0x08004afb
 80032b4:	08004b08 	.word	0x08004b08

080032b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032b8:	4770      	bx	lr
	...

080032bc <PWM_Timer_Init>:

	  TIM_MasterConfigTypeDef sMasterConfig;
	  TIM_OC_InitTypeDef sConfigOC;
	  TIM_ClockConfigTypeDef sClockSourceConfig;

	  memset(&sConfigOC, 0, sizeof(sConfigOC));
 80032bc:	221c      	movs	r2, #28
{
 80032be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032c2:	b08e      	sub	sp, #56	; 0x38
 80032c4:	4606      	mov	r6, r0
	  memset(&sConfigOC, 0, sizeof(sConfigOC));
 80032c6:	2100      	movs	r1, #0
 80032c8:	eb0d 0002 	add.w	r0, sp, r2
 80032cc:	f000 fdb6 	bl	8003e3c <memset>
	  memset(&sMasterConfig, 0, sizeof(sMasterConfig));
 80032d0:	2100      	movs	r1, #0
	  memset(&sClockSourceConfig, 0, sizeof(sClockSourceConfig));
 80032d2:	2210      	movs	r2, #16
 80032d4:	a803      	add	r0, sp, #12
	  memset(&sMasterConfig, 0, sizeof(sMasterConfig));
 80032d6:	9101      	str	r1, [sp, #4]
 80032d8:	9102      	str	r1, [sp, #8]
	  memset(&sClockSourceConfig, 0, sizeof(sClockSourceConfig));
 80032da:	f000 fdaf 	bl	8003e3c <memset>

	  switch(ID)
 80032de:	2e01      	cmp	r6, #1
 80032e0:	4c38      	ldr	r4, [pc, #224]	; (80033c4 <PWM_Timer_Init+0x108>)
 80032e2:	d067      	beq.n	80033b4 <PWM_Timer_Init+0xf8>
 80032e4:	d362      	bcc.n	80033ac <PWM_Timer_Init+0xf0>
 80032e6:	2e02      	cmp	r6, #2
 80032e8:	d067      	beq.n	80033ba <PWM_Timer_Init+0xfe>
	  	  case PWM_CH3:
	  		timerinfo[ID].Instance = TIM1;
		  break;
	  }

	  timerinfo[(uint8_t)ID].Init.Prescaler = 0;
 80032ea:	2300      	movs	r3, #0
	  timerinfo[(uint8_t)ID].Init.CounterMode = TIM_COUNTERMODE_UP;
	  timerinfo[(uint8_t)ID].Init.Period = 1066; //TBD....
 80032ec:	f240 422a 	movw	r2, #1066	; 0x42a
	  timerinfo[(uint8_t)ID].Init.Prescaler = 0;
 80032f0:	eb04 1486 	add.w	r4, r4, r6, lsl #6
 80032f4:	6063      	str	r3, [r4, #4]
	  timerinfo[(uint8_t)ID].Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f6:	60a3      	str	r3, [r4, #8]
	  timerinfo[(uint8_t)ID].Init.Period = 1066; //TBD....
 80032f8:	60e2      	str	r2, [r4, #12]
	  timerinfo[(uint8_t)ID].Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fa:	6123      	str	r3, [r4, #16]
	  timerinfo[(uint8_t)ID].Init.RepetitionCounter = 0;
 80032fc:	6163      	str	r3, [r4, #20]
	  if (HAL_TIM_Base_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)/* to use the Timer to generate a simple time base for TIM1 */
 80032fe:	4620      	mov	r0, r4
 8003300:	f7fe f90a 	bl	8001518 <HAL_TIM_Base_Init>
 8003304:	b110      	cbz	r0, 800330c <PWM_Timer_Init+0x50>
	  {
		  print("Timer Init Error 1");
 8003306:	4830      	ldr	r0, [pc, #192]	; (80033c8 <PWM_Timer_Init+0x10c>)
 8003308:	f000 f930 	bl	800356c <print>
	  }

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;//the default clock is the internal clock from the APBx, using this function
 800330c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&timerinfo[(uint8_t)ID], &sClockSourceConfig) != HAL_OK)//Initializes the TIM PWM Time Base according to the specified
 8003310:	a903      	add	r1, sp, #12
 8003312:	4620      	mov	r0, r4
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;//the default clock is the internal clock from the APBx, using this function
 8003314:	9303      	str	r3, [sp, #12]
	  if (HAL_TIM_ConfigClockSource(&timerinfo[(uint8_t)ID], &sClockSourceConfig) != HAL_OK)//Initializes the TIM PWM Time Base according to the specified
 8003316:	f7fe f9cb 	bl	80016b0 <HAL_TIM_ConfigClockSource>
 800331a:	b110      	cbz	r0, 8003322 <PWM_Timer_Init+0x66>
	 //parameters in the TIM_HandleTypeDef and create the associated handle.
	   {
		  print("Timer Init Error 2");
 800331c:	482b      	ldr	r0, [pc, #172]	; (80033cc <PWM_Timer_Init+0x110>)
 800331e:	f000 f925 	bl	800356c <print>
	   }


	  if (HAL_TIM_PWM_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)
 8003322:	4620      	mov	r0, r4
 8003324:	f7fe f912 	bl	800154c <HAL_TIM_PWM_Init>
 8003328:	b110      	cbz	r0, 8003330 <PWM_Timer_Init+0x74>
	  {
		  print("Timer Init Error 3");
 800332a:	4829      	ldr	r0, [pc, #164]	; (80033d0 <PWM_Timer_Init+0x114>)
 800332c:	f000 f91e 	bl	800356c <print>
	  }


	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003330:	2360      	movs	r3, #96	; 0x60
 8003332:	9307      	str	r3, [sp, #28]
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
	  sConfigOC.Pulse = MAX_PWM/2; /* 50% duty cycle is 538, set to 0 initially*///
 8003334:	f240 231a 	movw	r3, #538	; 0x21a
 8003338:	9308      	str	r3, [sp, #32]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800333a:	2304      	movs	r3, #4
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800333c:	2500      	movs	r5, #0
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800333e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003340:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <PWM_Timer_Init+0x118>)
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
		  {
			  if (HAL_OK != HAL_TIM_PWM_ConfigChannel(&timerinfo[(uint8_t)ID], &sConfigOC, channelinfo[(int8_t)ID][ii]))
			  {
				  print("Timer Init Error 4");
 8003342:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80033e0 <PWM_Timer_Init+0x124>
 8003346:	eb03 1706 	add.w	r7, r3, r6, lsl #4
 800334a:	b276      	sxtb	r6, r6
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800334c:	9509      	str	r5, [sp, #36]	; 0x24
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800334e:	950a      	str	r5, [sp, #40]	; 0x28
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003350:	950c      	str	r5, [sp, #48]	; 0x30
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003352:	950d      	str	r5, [sp, #52]	; 0x34
 8003354:	eb03 1606 	add.w	r6, r3, r6, lsl #4
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 8003358:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800335c:	2bff      	cmp	r3, #255	; 0xff
 800335e:	d009      	beq.n	8003374 <PWM_Timer_Init+0xb8>
			  if (HAL_OK != HAL_TIM_PWM_ConfigChannel(&timerinfo[(uint8_t)ID], &sConfigOC, channelinfo[(int8_t)ID][ii]))
 8003360:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 8003364:	a907      	add	r1, sp, #28
 8003366:	4620      	mov	r0, r4
 8003368:	f7fe f936 	bl	80015d8 <HAL_TIM_PWM_ConfigChannel>
 800336c:	b110      	cbz	r0, 8003374 <PWM_Timer_Init+0xb8>
				  print("Timer Init Error 4");
 800336e:	4640      	mov	r0, r8
 8003370:	f000 f8fc 	bl	800356c <print>
	  for (int ii=0;ii<4;ii++)
 8003374:	3501      	adds	r5, #1
 8003376:	2d04      	cmp	r5, #4
 8003378:	d1ee      	bne.n	8003358 <PWM_Timer_Init+0x9c>

		  }
	  }

	 // HAL_TIM_MspPostInit(&timerinfo[(uint8_t)ID]);//output pin assignment
	  HAL_TIM_Base_Start(&timerinfo[(uint8_t)ID]); //Starts the TIM Base generation
 800337a:	4620      	mov	r0, r4
 800337c:	f7fe f881 	bl	8001482 <HAL_TIM_Base_Start>

	  for (int ii=0;ii<4;ii++)
 8003380:	2500      	movs	r5, #0
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
		  {
			  if (HAL_OK != HAL_TIM_PWM_Start(&timerinfo[(uint8_t)ID], channelinfo[(int8_t)ID][ii]))
			  {
				  print("Timer Init Error 5");
 8003382:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80033e4 <PWM_Timer_Init+0x128>
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 8003386:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800338a:	2bff      	cmp	r3, #255	; 0xff
 800338c:	d008      	beq.n	80033a0 <PWM_Timer_Init+0xe4>
			  if (HAL_OK != HAL_TIM_PWM_Start(&timerinfo[(uint8_t)ID], channelinfo[(int8_t)ID][ii]))
 800338e:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8003392:	4620      	mov	r0, r4
 8003394:	f7fe fa2e 	bl	80017f4 <HAL_TIM_PWM_Start>
 8003398:	b110      	cbz	r0, 80033a0 <PWM_Timer_Init+0xe4>
				  print("Timer Init Error 5");
 800339a:	4640      	mov	r0, r8
 800339c:	f000 f8e6 	bl	800356c <print>
	  for (int ii=0;ii<4;ii++)
 80033a0:	3501      	adds	r5, #1
 80033a2:	2d04      	cmp	r5, #4
 80033a4:	d1ef      	bne.n	8003386 <PWM_Timer_Init+0xca>
			  }

		  }
	  }
}
 80033a6:	b00e      	add	sp, #56	; 0x38
 80033a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  		timerinfo[ID].Instance = TIM2;
 80033ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033b0:	6023      	str	r3, [r4, #0]
		  break;
 80033b2:	e79a      	b.n	80032ea <PWM_Timer_Init+0x2e>
	  		timerinfo[ID].Instance = TIM3;
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <PWM_Timer_Init+0x11c>)
 80033b6:	6423      	str	r3, [r4, #64]	; 0x40
		  break;
 80033b8:	e797      	b.n	80032ea <PWM_Timer_Init+0x2e>
	  		timerinfo[ID].Instance = TIM1;
 80033ba:	4b08      	ldr	r3, [pc, #32]	; (80033dc <PWM_Timer_Init+0x120>)
 80033bc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		  break;
 80033c0:	e793      	b.n	80032ea <PWM_Timer_Init+0x2e>
 80033c2:	bf00      	nop
 80033c4:	2000089c 	.word	0x2000089c
 80033c8:	08004b0d 	.word	0x08004b0d
 80033cc:	08004b20 	.word	0x08004b20
 80033d0:	08004b33 	.word	0x08004b33
 80033d4:	08004b6c 	.word	0x08004b6c
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40012c00 	.word	0x40012c00
 80033e0:	08004b46 	.word	0x08004b46
 80033e4:	08004b59 	.word	0x08004b59

080033e8 <init_timers>:
{
 80033e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__HAL_RCC_TIM1_CLK_ENABLE();
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <init_timers+0x54>)
	PWM_Timer_Init(PWM_CH1);
 80033ec:	2000      	movs	r0, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 80033ee:	699a      	ldr	r2, [r3, #24]
 80033f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033f4:	619a      	str	r2, [r3, #24]
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80033fc:	9201      	str	r2, [sp, #4]
 80033fe:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	61da      	str	r2, [r3, #28]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	f002 0201 	and.w	r2, r2, #1
 800340e:	9202      	str	r2, [sp, #8]
 8003410:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	61da      	str	r2, [r3, #28]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	9303      	str	r3, [sp, #12]
 8003422:	9b03      	ldr	r3, [sp, #12]
	PWM_Timer_Init(PWM_CH1);
 8003424:	f7ff ff4a 	bl	80032bc <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH2);
 8003428:	2001      	movs	r0, #1
 800342a:	f7ff ff47 	bl	80032bc <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH3);
 800342e:	2002      	movs	r0, #2
 8003430:	f7ff ff44 	bl	80032bc <PWM_Timer_Init>
}
 8003434:	b005      	add	sp, #20
 8003436:	f85d fb04 	ldr.w	pc, [sp], #4
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000

08003440 <configPWM>:


//Setup PWM
void configPWM(pwmtimerid_t ID,pwmchid_t channel, uint16_t duty)
{
	  if (channelinfo[(uint8_t) ID][channel] != 255)
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <configPWM+0x30>)
 8003442:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8003446:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800344a:	29ff      	cmp	r1, #255	; 0xff
 800344c:	d00e      	beq.n	800346c <configPWM+0x2c>
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <configPWM+0x34>)
 8003450:	0180      	lsls	r0, r0, #6
	  {
	  __HAL_TIM_SET_COMPARE(&timerinfo[ID],  channelinfo[(uint8_t)ID][(uint8_t)channel], duty);
 8003452:	581b      	ldr	r3, [r3, r0]
 8003454:	b909      	cbnz	r1, 800345a <configPWM+0x1a>
 8003456:	635a      	str	r2, [r3, #52]	; 0x34
 8003458:	4770      	bx	lr
 800345a:	2904      	cmp	r1, #4
 800345c:	d101      	bne.n	8003462 <configPWM+0x22>
 800345e:	639a      	str	r2, [r3, #56]	; 0x38
 8003460:	4770      	bx	lr
 8003462:	2908      	cmp	r1, #8
 8003464:	d101      	bne.n	800346a <configPWM+0x2a>
 8003466:	63da      	str	r2, [r3, #60]	; 0x3c
 8003468:	4770      	bx	lr
 800346a:	641a      	str	r2, [r3, #64]	; 0x40
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	08004b6c 	.word	0x08004b6c
 8003474:	2000089c 	.word	0x2000089c

08003478 <tracer_puts>:
	HAL_UART_Transmit(&huart3, &ch, 1, 5000);
}

void tracer_puts(uint8_t *str,const uint16_t size)
{
	HAL_UART_Transmit(&huart3,str,size, 5000);
 8003478:	460a      	mov	r2, r1
 800347a:	f241 3388 	movw	r3, #5000	; 0x1388
 800347e:	4601      	mov	r1, r0
 8003480:	4801      	ldr	r0, [pc, #4]	; (8003488 <tracer_puts+0x10>)
 8003482:	f7fe baa3 	b.w	80019cc <HAL_UART_Transmit>
 8003486:	bf00      	nop
 8003488:	200007b0 	.word	0x200007b0

0800348c <tracer_getchar>:
}


uint8_t tracer_getchar(void)
{
 800348c:	b507      	push	{r0, r1, r2, lr}
	uint8_t data;
	if (HAL_OK == HAL_UART_Receive(&huart3, &data, 1, 0))
 800348e:	2300      	movs	r3, #0
 8003490:	2201      	movs	r2, #1
 8003492:	f10d 0107 	add.w	r1, sp, #7
 8003496:	4805      	ldr	r0, [pc, #20]	; (80034ac <tracer_getchar+0x20>)
 8003498:	f7fe faf4 	bl	8001a84 <HAL_UART_Receive>
 800349c:	b920      	cbnz	r0, 80034a8 <tracer_getchar+0x1c>
		return data;
 800349e:	f89d 0007 	ldrb.w	r0, [sp, #7]
	else
		return 0;
}
 80034a2:	b003      	add	sp, #12
 80034a4:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
 80034a8:	2000      	movs	r0, #0
 80034aa:	e7fa      	b.n	80034a2 <tracer_getchar+0x16>
 80034ac:	200007b0 	.word	0x200007b0

080034b0 <cmd_buf_reset>:
    }
}

static void cmd_buf_reset(void)
{
    cmd_buf_idx = 0;
 80034b0:	2100      	movs	r1, #0
 80034b2:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <cmd_buf_reset+0x10>)
    memset(cmd_buf, 0, sizeof(cmd_buf));
 80034b4:	2280      	movs	r2, #128	; 0x80
 80034b6:	4803      	ldr	r0, [pc, #12]	; (80034c4 <cmd_buf_reset+0x14>)
    cmd_buf_idx = 0;
 80034b8:	6019      	str	r1, [r3, #0]
    memset(cmd_buf, 0, sizeof(cmd_buf));
 80034ba:	f000 bcbf 	b.w	8003e3c <memset>
 80034be:	bf00      	nop
 80034c0:	20000308 	.word	0x20000308
 80034c4:	20000288 	.word	0x20000288

080034c8 <load_command_from_command_history>:
    }
    cmd_hist_get_idx = cmd_hist_put_idx;
}

static void load_command_from_command_history(uint8_t dir)
{
 80034c8:	b510      	push	{r4, lr}
 80034ca:	4c19      	ldr	r4, [pc, #100]	; (8003530 <load_command_from_command_history+0x68>)
 80034cc:	4a19      	ldr	r2, [pc, #100]	; (8003534 <load_command_from_command_history+0x6c>)
    /* backwards */
    if (0 == dir)
    {
        if (0 == cmd_hist_get_idx)
 80034ce:	6823      	ldr	r3, [r4, #0]
    if (0 == dir)
 80034d0:	b9d0      	cbnz	r0, 8003508 <load_command_from_command_history+0x40>
        if (0 == cmd_hist_get_idx)
 80034d2:	b9a3      	cbnz	r3, 80034fe <load_command_from_command_history+0x36>
        {
            if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_put_idx)
 80034d4:	6813      	ldr	r3, [r2, #0]
 80034d6:	2b07      	cmp	r3, #7
 80034d8:	d015      	beq.n	8003506 <load_command_from_command_history+0x3e>
            {
                return;
            }
            cmd_hist_get_idx = SHELL_CMD_HISTORY_LEN - 1;
 80034da:	2307      	movs	r3, #7
        }
        
        cmd_hist_get_idx++;
        if (SHELL_CMD_HISTORY_LEN == cmd_hist_get_idx)
        {
            cmd_hist_get_idx = 0;
 80034dc:	6023      	str	r3, [r4, #0]
        }
    }
    
    cmd_buf_reset();
 80034de:	f7ff ffe7 	bl	80034b0 <cmd_buf_reset>
    strncpy(cmd_buf, cmd_hist[cmd_hist_get_idx], sizeof(cmd_buf));
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <load_command_from_command_history+0x70>)
 80034e4:	6821      	ldr	r1, [r4, #0]
 80034e6:	2280      	movs	r2, #128	; 0x80
 80034e8:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 80034ec:	4813      	ldr	r0, [pc, #76]	; (800353c <load_command_from_command_history+0x74>)
 80034ee:	f000 fd88 	bl	8004002 <strncpy>
    cmd_buf_idx = strlen(cmd_buf);
 80034f2:	4812      	ldr	r0, [pc, #72]	; (800353c <load_command_from_command_history+0x74>)
 80034f4:	f7fc fe2a 	bl	800014c <strlen>
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <load_command_from_command_history+0x78>)
 80034fa:	6018      	str	r0, [r3, #0]
 80034fc:	e003      	b.n	8003506 <load_command_from_command_history+0x3e>
            if (cmd_hist_get_idx - 1 == cmd_hist_put_idx)
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	3b01      	subs	r3, #1
 8003502:	4293      	cmp	r3, r2
 8003504:	d1ea      	bne.n	80034dc <load_command_from_command_history+0x14>
 8003506:	bd10      	pop	{r4, pc}
        if (cmd_hist_get_idx == cmd_hist_put_idx)
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	4293      	cmp	r3, r2
 800350c:	d0fb      	beq.n	8003506 <load_command_from_command_history+0x3e>
        if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_get_idx)
 800350e:	2b07      	cmp	r3, #7
 8003510:	d105      	bne.n	800351e <load_command_from_command_history+0x56>
            if (0 == cmd_hist_put_idx)
 8003512:	b93a      	cbnz	r2, 8003524 <load_command_from_command_history+0x5c>
                cmd_hist_get_idx++;
 8003514:	6022      	str	r2, [r4, #0]
}
 8003516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                cmd_buf_reset();
 800351a:	f7ff bfc9 	b.w	80034b0 <cmd_buf_reset>
            if (cmd_hist_get_idx + 1 == cmd_hist_put_idx)
 800351e:	1c59      	adds	r1, r3, #1
 8003520:	428a      	cmp	r2, r1
 8003522:	d0f7      	beq.n	8003514 <load_command_from_command_history+0x4c>
        cmd_hist_get_idx++;
 8003524:	3301      	adds	r3, #1
        if (SHELL_CMD_HISTORY_LEN == cmd_hist_get_idx)
 8003526:	2b08      	cmp	r3, #8
            cmd_hist_get_idx = 0;
 8003528:	bf08      	it	eq
 800352a:	2300      	moveq	r3, #0
 800352c:	e7d6      	b.n	80034dc <load_command_from_command_history+0x14>
 800352e:	bf00      	nop
 8003530:	2000070c 	.word	0x2000070c
 8003534:	20000710 	.word	0x20000710
 8003538:	2000030c 	.word	0x2000030c
 800353c:	20000288 	.word	0x20000288
 8003540:	20000308 	.word	0x20000308

08003544 <send_vt100_key>:

static void send_vt100_key(vt100_key_t key)
{
 8003544:	b508      	push	{r3, lr}
    vt100_keycode_t * keycode = vt100_get_keycode(key);
 8003546:	f000 fc01 	bl	8003d4c <vt100_get_keycode>
    if (NULL != keycode)
 800354a:	b128      	cbz	r0, 8003558 <send_vt100_key+0x14>
    {
        uart_send( keycode->code, keycode->code_len);
    }
}
 800354c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tracer_puts(bytes,size);
 8003550:	7a01      	ldrb	r1, [r0, #8]
 8003552:	6840      	ldr	r0, [r0, #4]
 8003554:	f7ff bf90 	b.w	8003478 <tracer_puts>
 8003558:	bd08      	pop	{r3, pc}

0800355a <uart_receive_byte>:
{
 800355a:	b510      	push	{r4, lr}
 800355c:	4604      	mov	r4, r0
	unsigned char data = tracer_getchar();
 800355e:	f7ff ff95 	bl	800348c <tracer_getchar>
		*byte = 0;
 8003562:	7020      	strb	r0, [r4, #0]
	if (data == 0)
 8003564:	b900      	cbnz	r0, 8003568 <uart_receive_byte+0xe>
		return 0;
 8003566:	bd10      	pop	{r4, pc}
		return 1;
 8003568:	2001      	movs	r0, #1
}
 800356a:	bd10      	pop	{r4, pc}

0800356c <print>:
{	
 800356c:	b40f      	push	{r0, r1, r2, r3}
 800356e:	b513      	push	{r0, r1, r4, lr}
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 8003570:	4c0c      	ldr	r4, [pc, #48]	; (80035a4 <print+0x38>)
{	
 8003572:	ab04      	add	r3, sp, #16
 8003574:	f853 2b04 	ldr.w	r2, [r3], #4
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 8003578:	217c      	movs	r1, #124	; 0x7c
 800357a:	4620      	mov	r0, r4
    va_start(args, fmt);
 800357c:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 800357e:	f000 fe6b 	bl	8004258 <vsniprintf>
    strcat(dbgMsg, "\r\n");
 8003582:	4909      	ldr	r1, [pc, #36]	; (80035a8 <print+0x3c>)
 8003584:	4620      	mov	r0, r4
 8003586:	f000 fd1b 	bl	8003fc0 <strcat>
    len = strlen(dbgMsg);
 800358a:	4620      	mov	r0, r4
 800358c:	f7fc fdde 	bl	800014c <strlen>
	tracer_puts(bytes,size);
 8003590:	b281      	uxth	r1, r0
 8003592:	4620      	mov	r0, r4
 8003594:	f7ff ff70 	bl	8003478 <tracer_puts>
}
 8003598:	b002      	add	sp, #8
 800359a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800359e:	b004      	add	sp, #16
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000714 	.word	0x20000714
 80035a8:	08004b9c 	.word	0x08004b9c

080035ac <print_no_newline>:
{	
 80035ac:	b40f      	push	{r0, r1, r2, r3}
 80035ae:	b513      	push	{r0, r1, r4, lr}
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80035b0:	4c0a      	ldr	r4, [pc, #40]	; (80035dc <print_no_newline+0x30>)
{	
 80035b2:	ab04      	add	r3, sp, #16
 80035b4:	f853 2b04 	ldr.w	r2, [r3], #4
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80035b8:	217c      	movs	r1, #124	; 0x7c
 80035ba:	4620      	mov	r0, r4
    va_start(args, fmt);
 80035bc:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80035be:	f000 fe4b 	bl	8004258 <vsniprintf>
    (void) uart_send((uint8_t *)dbgMsg, (uint16_t) strlen(dbgMsg));		
 80035c2:	4620      	mov	r0, r4
 80035c4:	f7fc fdc2 	bl	800014c <strlen>
	tracer_puts(bytes,size);
 80035c8:	b281      	uxth	r1, r0
 80035ca:	4620      	mov	r0, r4
 80035cc:	f7ff ff54 	bl	8003478 <tracer_puts>
}
 80035d0:	b002      	add	sp, #8
 80035d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035d6:	b004      	add	sp, #16
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000714 	.word	0x20000714

080035e0 <shell_process>:
    
    cmd_buf_reset();
}

void shell_process(void)
{
 80035e0:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
	char byte;
	const char prompt[] = "DBG>";
 80035e4:	4b70      	ldr	r3, [pc, #448]	; (80037a8 <shell_process+0x1c8>)
{
 80035e6:	b097      	sub	sp, #92	; 0x5c
	const char prompt[] = "DBG>";
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	791b      	ldrb	r3, [r3, #4]
            print_no_newline(cmd_buf);
        }
        else if (VT100_KEY_CURSOR_DOWN == key)
        {
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 80035ec:	4d6f      	ldr	r5, [pc, #444]	; (80037ac <shell_process+0x1cc>)
            print(shell_cmd_list[i].cmd);
 80035ee:	4e70      	ldr	r6, [pc, #448]	; (80037b0 <shell_process+0x1d0>)
	const char prompt[] = "DBG>";
 80035f0:	9003      	str	r0, [sp, #12]
 80035f2:	f88d 3010 	strb.w	r3, [sp, #16]
	while (1 == uart_receive_byte((uint8_t*)&byte))
 80035f6:	f10d 000b 	add.w	r0, sp, #11
 80035fa:	f7ff ffae 	bl	800355a <uart_receive_byte>
 80035fe:	2801      	cmp	r0, #1
 8003600:	d002      	beq.n	8003608 <shell_process+0x28>
            }
            load_command_from_command_history(1);
            print_no_newline(cmd_buf);
        }
	}
}
 8003602:	b017      	add	sp, #92	; 0x5c
 8003604:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
        vt100_key_t key = vt100_process_byte(byte);
 8003608:	f89d 000b 	ldrb.w	r0, [sp, #11]
 800360c:	f000 fb56 	bl	8003cbc <vt100_process_byte>
        if (VT100_KEY_PRINTABLE == key)
 8003610:	2801      	cmp	r0, #1
 8003612:	d10e      	bne.n	8003632 <shell_process+0x52>
    if ((unsigned int)cmd_buf_idx < sizeof(cmd_buf))
 8003614:	682b      	ldr	r3, [r5, #0]
 8003616:	2b7f      	cmp	r3, #127	; 0x7f
 8003618:	d805      	bhi.n	8003626 <shell_process+0x46>
        cmd_buf[cmd_buf_idx++] = c;
 800361a:	1c5a      	adds	r2, r3, #1
            cmd_buf_add_char(byte);
 800361c:	f89d 100b 	ldrb.w	r1, [sp, #11]
        cmd_buf[cmd_buf_idx++] = c;
 8003620:	602a      	str	r2, [r5, #0]
 8003622:	4a64      	ldr	r2, [pc, #400]	; (80037b4 <shell_process+0x1d4>)
 8003624:	54d1      	strb	r1, [r2, r3]
	tracer_puts(bytes,size);
 8003626:	2101      	movs	r1, #1
 8003628:	f10d 000b 	add.w	r0, sp, #11
 800362c:	f7ff ff24 	bl	8003478 <tracer_puts>
 8003630:	e7e1      	b.n	80035f6 <shell_process+0x16>
        else if (VT100_KEY_ENTER == key)
 8003632:	2808      	cmp	r0, #8
 8003634:	d17a      	bne.n	800372c <shell_process+0x14c>
			print("");
 8003636:	4860      	ldr	r0, [pc, #384]	; (80037b8 <shell_process+0x1d8>)
 8003638:	f7ff ff98 	bl	800356c <print>
	if (0 != strlen(cmd_buf))
 800363c:	495d      	ldr	r1, [pc, #372]	; (80037b4 <shell_process+0x1d4>)
 800363e:	780b      	ldrb	r3, [r1, #0]
 8003640:	b183      	cbz	r3, 8003664 <shell_process+0x84>
    strncpy(cmd_hist[cmd_hist_put_idx], cmd_buf, sizeof(cmd_buf));
 8003642:	4f5e      	ldr	r7, [pc, #376]	; (80037bc <shell_process+0x1dc>)
 8003644:	485e      	ldr	r0, [pc, #376]	; (80037c0 <shell_process+0x1e0>)
 8003646:	683c      	ldr	r4, [r7, #0]
 8003648:	2280      	movs	r2, #128	; 0x80
 800364a:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    cmd_hist_put_idx++;
 800364e:	3401      	adds	r4, #1
    strncpy(cmd_hist[cmd_hist_put_idx], cmd_buf, sizeof(cmd_buf));
 8003650:	f000 fcd7 	bl	8004002 <strncpy>
    if (cmd_hist_put_idx >= SHELL_CMD_HISTORY_LEN)
 8003654:	2c07      	cmp	r4, #7
        cmd_hist_put_idx = 0;
 8003656:	bfca      	itet	gt
 8003658:	2300      	movgt	r3, #0
    cmd_hist_put_idx++;
 800365a:	603c      	strle	r4, [r7, #0]
        cmd_hist_put_idx = 0;
 800365c:	603b      	strgt	r3, [r7, #0]
    cmd_hist_get_idx = cmd_hist_put_idx;
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	4b58      	ldr	r3, [pc, #352]	; (80037c4 <shell_process+0x1e4>)
 8003662:	601a      	str	r2, [r3, #0]
	tokens[arg_num] = strtok(buffer, " ");
 8003664:	4958      	ldr	r1, [pc, #352]	; (80037c8 <shell_process+0x1e8>)
 8003666:	4853      	ldr	r0, [pc, #332]	; (80037b4 <shell_process+0x1d4>)
 8003668:	f000 fce0 	bl	800402c <strtok>
	int arg_num = 0;
 800366c:	2400      	movs	r4, #0
	tokens[arg_num] = strtok(buffer, " ");
 800366e:	f10d 0958 	add.w	r9, sp, #88	; 0x58
		tokens[++arg_num] = strtok(NULL, " ");
 8003672:	4f55      	ldr	r7, [pc, #340]	; (80037c8 <shell_process+0x1e8>)
	tokens[arg_num] = strtok(buffer, " ");
 8003674:	f849 0d44 	str.w	r0, [r9, #-68]!
	while(NULL != tokens[arg_num] && arg_num < (MAX_ARGUMENT_NUM-1))
 8003678:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
 800367c:	b10b      	cbz	r3, 8003682 <shell_process+0xa2>
 800367e:	2c0f      	cmp	r4, #15
 8003680:	d11f      	bne.n	80036c2 <shell_process+0xe2>
    if (0 == strncmp(argv[0], "help", SHELL_CMD_BUF_LEN))
 8003682:	2280      	movs	r2, #128	; 0x80
 8003684:	4951      	ldr	r1, [pc, #324]	; (80037cc <shell_process+0x1ec>)
 8003686:	9805      	ldr	r0, [sp, #20]
 8003688:	f000 fca9 	bl	8003fde <strncmp>
	return arg_num - 1;
 800368c:	3c01      	subs	r4, #1
    if (0 == strncmp(argv[0], "help", SHELL_CMD_BUF_LEN))
 800368e:	4607      	mov	r7, r0
 8003690:	b1f8      	cbz	r0, 80036d2 <shell_process+0xf2>
    if (0 == strncmp(argv[0], "cls", SHELL_CMD_BUF_LEN))
 8003692:	2280      	movs	r2, #128	; 0x80
 8003694:	494e      	ldr	r1, [pc, #312]	; (80037d0 <shell_process+0x1f0>)
 8003696:	9805      	ldr	r0, [sp, #20]
 8003698:	f000 fca1 	bl	8003fde <strncmp>
 800369c:	bb58      	cbnz	r0, 80036f6 <shell_process+0x116>
        send_vt100_key(VT100_KEY_CLEAR_SCREEN);
 800369e:	200d      	movs	r0, #13
 80036a0:	f7ff ff50 	bl	8003544 <send_vt100_key>
        send_vt100_key(VT100_KEY_MOVE_CURSOR_HOME);
 80036a4:	200e      	movs	r0, #14
 80036a6:	f7ff ff4d 	bl	8003544 <send_vt100_key>
    cmd_buf_reset();
 80036aa:	f7ff ff01 	bl	80034b0 <cmd_buf_reset>
	tracer_puts(bytes,size);
 80036ae:	f10d 000b 	add.w	r0, sp, #11
 80036b2:	2101      	movs	r1, #1
 80036b4:	f7ff fee0 	bl	8003478 <tracer_puts>
			print_no_newline("\n%s", prompt);
 80036b8:	a903      	add	r1, sp, #12
 80036ba:	4846      	ldr	r0, [pc, #280]	; (80037d4 <shell_process+0x1f4>)
 80036bc:	f7ff ff76 	bl	80035ac <print_no_newline>
 80036c0:	e799      	b.n	80035f6 <shell_process+0x16>
		tokens[++arg_num] = strtok(NULL, " ");
 80036c2:	4639      	mov	r1, r7
 80036c4:	2000      	movs	r0, #0
 80036c6:	f000 fcb1 	bl	800402c <strtok>
 80036ca:	3401      	adds	r4, #1
 80036cc:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
 80036d0:	e7d2      	b.n	8003678 <shell_process+0x98>
            print(shell_cmd_list[i].cmd);
 80036d2:	f04f 0a0c 	mov.w	sl, #12
        print("");
 80036d6:	4838      	ldr	r0, [pc, #224]	; (80037b8 <shell_process+0x1d8>)
 80036d8:	f7ff ff48 	bl	800356c <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 80036dc:	4b3e      	ldr	r3, [pc, #248]	; (80037d8 <shell_process+0x1f8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	9b01      	ldr	r3, [sp, #4]
 80036e4:	429f      	cmp	r7, r3
 80036e6:	dad4      	bge.n	8003692 <shell_process+0xb2>
            print(shell_cmd_list[i].cmd);
 80036e8:	fb0a f307 	mul.w	r3, sl, r7
 80036ec:	5998      	ldr	r0, [r3, r6]
 80036ee:	f7ff ff3d 	bl	800356c <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 80036f2:	3701      	adds	r7, #1
 80036f4:	e7f5      	b.n	80036e2 <shell_process+0x102>
    if (0 == strncmp(argv[0], "cls", SHELL_CMD_BUF_LEN))
 80036f6:	f04f 0a00 	mov.w	sl, #0
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 80036fa:	4b37      	ldr	r3, [pc, #220]	; (80037d8 <shell_process+0x1f8>)
 80036fc:	4f2c      	ldr	r7, [pc, #176]	; (80037b0 <shell_process+0x1d0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	9b01      	ldr	r3, [sp, #4]
 8003704:	459a      	cmp	sl, r3
 8003706:	dad0      	bge.n	80036aa <shell_process+0xca>
            if(0 == strncmp(argv[0], shell_cmd_list[i].cmd, SHELL_CMD_BUF_LEN))
 8003708:	2280      	movs	r2, #128	; 0x80
 800370a:	6839      	ldr	r1, [r7, #0]
 800370c:	9805      	ldr	r0, [sp, #20]
 800370e:	f000 fc66 	bl	8003fde <strncmp>
 8003712:	b938      	cbnz	r0, 8003724 <shell_process+0x144>
                if(0 == shell_cmd_list[i].handler(argc, argv))
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4649      	mov	r1, r9
 8003718:	4620      	mov	r0, r4
 800371a:	4798      	blx	r3
 800371c:	b910      	cbnz	r0, 8003724 <shell_process+0x144>
                    print(shell_cmd_list[i].desc);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ff24 	bl	800356c <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 8003724:	f10a 0a01 	add.w	sl, sl, #1
 8003728:	370c      	adds	r7, #12
 800372a:	e7ea      	b.n	8003702 <shell_process+0x122>
        else if (VT100_KEY_INVALID == key)
 800372c:	2800      	cmp	r0, #0
 800372e:	f43f af62 	beq.w	80035f6 <shell_process+0x16>
        else if (VT100_KEY_BACKSPACE == key)
 8003732:	2807      	cmp	r0, #7
 8003734:	d10e      	bne.n	8003754 <shell_process+0x174>
    if (cmd_buf_idx > 0)
 8003736:	682b      	ldr	r3, [r5, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	dd04      	ble.n	8003746 <shell_process+0x166>
        cmd_buf[--cmd_buf_idx] = 0;
 800373c:	2100      	movs	r1, #0
 800373e:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <shell_process+0x1d4>)
 8003740:	3b01      	subs	r3, #1
 8003742:	602b      	str	r3, [r5, #0]
 8003744:	54d1      	strb	r1, [r2, r3]
            send_vt100_key(VT100_KEY_BACKSPACE);
 8003746:	2007      	movs	r0, #7
 8003748:	f7ff fefc 	bl	8003544 <send_vt100_key>
            send_vt100_key(VT100_KEY_CLEAR_EOL);
 800374c:	200a      	movs	r0, #10
 800374e:	f7ff fef9 	bl	8003544 <send_vt100_key>
 8003752:	e750      	b.n	80035f6 <shell_process+0x16>
        else if (VT100_KEY_CURSOR_UP == key)
 8003754:	2802      	cmp	r0, #2
 8003756:	d116      	bne.n	8003786 <shell_process+0x1a6>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 8003758:	200b      	movs	r0, #11
 800375a:	f7ff fef3 	bl	8003544 <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 800375e:	2400      	movs	r4, #0
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	3304      	adds	r3, #4
 8003764:	429c      	cmp	r4, r3
 8003766:	d309      	bcc.n	800377c <shell_process+0x19c>
			print_no_newline(prompt);
 8003768:	a803      	add	r0, sp, #12
 800376a:	f7ff ff1f 	bl	80035ac <print_no_newline>
            load_command_from_command_history(0);
 800376e:	2000      	movs	r0, #0
            load_command_from_command_history(1);
 8003770:	f7ff feaa 	bl	80034c8 <load_command_from_command_history>
            print_no_newline(cmd_buf);
 8003774:	480f      	ldr	r0, [pc, #60]	; (80037b4 <shell_process+0x1d4>)
 8003776:	f7ff ff19 	bl	80035ac <print_no_newline>
 800377a:	e73c      	b.n	80035f6 <shell_process+0x16>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 800377c:	200c      	movs	r0, #12
 800377e:	f7ff fee1 	bl	8003544 <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 8003782:	3401      	adds	r4, #1
 8003784:	e7ec      	b.n	8003760 <shell_process+0x180>
        else if (VT100_KEY_CURSOR_DOWN == key)
 8003786:	2803      	cmp	r0, #3
 8003788:	f47f af35 	bne.w	80035f6 <shell_process+0x16>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 800378c:	200b      	movs	r0, #11
 800378e:	f7ff fed9 	bl	8003544 <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 8003792:	2400      	movs	r4, #0
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	429c      	cmp	r4, r3
 8003798:	db01      	blt.n	800379e <shell_process+0x1be>
            load_command_from_command_history(1);
 800379a:	2001      	movs	r0, #1
 800379c:	e7e8      	b.n	8003770 <shell_process+0x190>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 800379e:	200c      	movs	r0, #12
 80037a0:	f7ff fed0 	bl	8003544 <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 80037a4:	3401      	adds	r4, #1
 80037a6:	e7f5      	b.n	8003794 <shell_process+0x1b4>
 80037a8:	08004b08 	.word	0x08004b08
 80037ac:	20000308 	.word	0x20000308
 80037b0:	08004c64 	.word	0x08004c64
 80037b4:	20000288 	.word	0x20000288
 80037b8:	08004b9e 	.word	0x08004b9e
 80037bc:	20000710 	.word	0x20000710
 80037c0:	2000030c 	.word	0x2000030c
 80037c4:	2000070c 	.word	0x2000070c
 80037c8:	08004e8e 	.word	0x08004e8e
 80037cc:	08004b9f 	.word	0x08004b9f
 80037d0:	08004ba4 	.word	0x08004ba4
 80037d4:	08004ba8 	.word	0x08004ba8
 80037d8:	08004bac 	.word	0x08004bac

080037dc <shell_cmd_dumpconfig>:
		return 1;
}

//dumpconfig
static int shell_cmd_dumpconfig(int argc, char ** argv)
{
 80037dc:	b508      	push	{r3, lr}
		print("TBD");
 80037de:	4802      	ldr	r0, [pc, #8]	; (80037e8 <shell_cmd_dumpconfig+0xc>)
 80037e0:	f7ff fec4 	bl	800356c <print>
		return 1;
}
 80037e4:	2001      	movs	r0, #1
 80037e6:	bd08      	pop	{r3, pc}
 80037e8:	08004bb0 	.word	0x08004bb0

080037ec <shell_cmd_getaddr>:
{
 80037ec:	b508      	push	{r3, lr}
		print("DMX512 Address: %d",get_addr());
 80037ee:	f7ff f915 	bl	8002a1c <get_addr>
 80037f2:	4601      	mov	r1, r0
 80037f4:	4802      	ldr	r0, [pc, #8]	; (8003800 <shell_cmd_getaddr+0x14>)
 80037f6:	f7ff feb9 	bl	800356c <print>
}
 80037fa:	2001      	movs	r0, #1
 80037fc:	bd08      	pop	{r3, pc}
 80037fe:	bf00      	nop
 8003800:	08004c12 	.word	0x08004c12

08003804 <shell_cmd_getmode>:
{
 8003804:	b508      	push	{r3, lr}
	switch (get_mode())
 8003806:	f7ff f90f 	bl	8002a28 <get_mode>
 800380a:	2801      	cmp	r0, #1
 800380c:	d008      	beq.n	8003820 <shell_cmd_getmode+0x1c>
 800380e:	d303      	bcc.n	8003818 <shell_cmd_getmode+0x14>
 8003810:	2802      	cmp	r0, #2
 8003812:	d007      	beq.n	8003824 <shell_cmd_getmode+0x20>
}
 8003814:	2001      	movs	r0, #1
 8003816:	bd08      	pop	{r3, pc}
		print("Mode None (Uninitialized)");
 8003818:	4803      	ldr	r0, [pc, #12]	; (8003828 <shell_cmd_getmode+0x24>)
		print("Mode 2 (PWM + Strip)");
 800381a:	f7ff fea7 	bl	800356c <print>
		break;
 800381e:	e7f9      	b.n	8003814 <shell_cmd_getmode+0x10>
		print("Mode 1 (PWM)");
 8003820:	4802      	ldr	r0, [pc, #8]	; (800382c <shell_cmd_getmode+0x28>)
 8003822:	e7fa      	b.n	800381a <shell_cmd_getmode+0x16>
		print("Mode 2 (PWM + Strip)");
 8003824:	4802      	ldr	r0, [pc, #8]	; (8003830 <shell_cmd_getmode+0x2c>)
 8003826:	e7f8      	b.n	800381a <shell_cmd_getmode+0x16>
 8003828:	08004c25 	.word	0x08004c25
 800382c:	08004c3f 	.word	0x08004c3f
 8003830:	08004c4c 	.word	0x08004c4c

08003834 <shell_cmd_dumpregs>:
{
 8003834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		print("DMX512 Address: %d",get_addr());
 8003836:	f7ff f8f1 	bl	8002a1c <get_addr>
 800383a:	4601      	mov	r1, r0
 800383c:	4816      	ldr	r0, [pc, #88]	; (8003898 <shell_cmd_dumpregs+0x64>)
 800383e:	f7ff fe95 	bl	800356c <print>
		print("DMX512 Blocklength: %d",get_reg_length());
 8003842:	f7ff f8f7 	bl	8002a34 <get_reg_length>
 8003846:	4601      	mov	r1, r0
 8003848:	4814      	ldr	r0, [pc, #80]	; (800389c <shell_cmd_dumpregs+0x68>)
 800384a:	f7ff fe8f 	bl	800356c <print>
		print("Mode: %d",(uint8_t)get_mode());
 800384e:	f7ff f8eb 	bl	8002a28 <get_mode>
 8003852:	4601      	mov	r1, r0
 8003854:	4812      	ldr	r0, [pc, #72]	; (80038a0 <shell_cmd_dumpregs+0x6c>)
 8003856:	f7ff fe89 	bl	800356c <print>
		print("---------------------------");
 800385a:	4812      	ldr	r0, [pc, #72]	; (80038a4 <shell_cmd_dumpregs+0x70>)
 800385c:	f7ff fe86 	bl	800356c <print>
		for(int ii=0;ii< get_reg_length();ii++)
 8003860:	2400      	movs	r4, #0
			print("Reg: %d\t Addr:%d  \t (%s)\t Val: %d",ii,get_addr()+ii,get_reg_name(ii),get_reg(ii));
 8003862:	4d11      	ldr	r5, [pc, #68]	; (80038a8 <shell_cmd_dumpregs+0x74>)
		for(int ii=0;ii< get_reg_length();ii++)
 8003864:	f7ff f8e6 	bl	8002a34 <get_reg_length>
 8003868:	42a0      	cmp	r0, r4
 800386a:	d802      	bhi.n	8003872 <shell_cmd_dumpregs+0x3e>
}
 800386c:	2001      	movs	r0, #1
 800386e:	b003      	add	sp, #12
 8003870:	bdf0      	pop	{r4, r5, r6, r7, pc}
			print("Reg: %d\t Addr:%d  \t (%s)\t Val: %d",ii,get_addr()+ii,get_reg_name(ii),get_reg(ii));
 8003872:	f7ff f8d3 	bl	8002a1c <get_addr>
 8003876:	1826      	adds	r6, r4, r0
 8003878:	4620      	mov	r0, r4
 800387a:	f7ff f929 	bl	8002ad0 <get_reg_name>
 800387e:	4607      	mov	r7, r0
 8003880:	4620      	mov	r0, r4
 8003882:	f7ff f915 	bl	8002ab0 <get_reg>
 8003886:	4621      	mov	r1, r4
 8003888:	9000      	str	r0, [sp, #0]
 800388a:	463b      	mov	r3, r7
 800388c:	4632      	mov	r2, r6
 800388e:	4628      	mov	r0, r5
 8003890:	f7ff fe6c 	bl	800356c <print>
		for(int ii=0;ii< get_reg_length();ii++)
 8003894:	3401      	adds	r4, #1
 8003896:	e7e5      	b.n	8003864 <shell_cmd_dumpregs+0x30>
 8003898:	08004c12 	.word	0x08004c12
 800389c:	08004bb4 	.word	0x08004bb4
 80038a0:	08004bcb 	.word	0x08004bcb
 80038a4:	08004bd4 	.word	0x08004bd4
 80038a8:	08004bf0 	.word	0x08004bf0

080038ac <shell_cmd_setbrightness>:
}

//setbrightness
static int shell_cmd_setbrightness(int argc, char ** argv)
{
	if (argc == 1)
 80038ac:	2801      	cmp	r0, #1
{
 80038ae:	b510      	push	{r4, lr}
 80038b0:	4604      	mov	r4, r0
	if (argc == 1)
 80038b2:	d108      	bne.n	80038c6 <shell_cmd_setbrightness+0x1a>
	{
		set_reg(MAX_BRIGHTNESS,(uint8_t) atoi(argv[1]));
 80038b4:	6848      	ldr	r0, [r1, #4]
 80038b6:	f000 fa82 	bl	8003dbe <atoi>
 80038ba:	b2c1      	uxtb	r1, r0
 80038bc:	2000      	movs	r0, #0
 80038be:	f7ff f8e9 	bl	8002a94 <set_reg>
	else
	{
		return 0;
	}
	return 1;
}
 80038c2:	4620      	mov	r0, r4
 80038c4:	bd10      	pop	{r4, pc}
		return 0;
 80038c6:	2400      	movs	r4, #0
 80038c8:	e7fb      	b.n	80038c2 <shell_cmd_setbrightness+0x16>

080038ca <shell_cmd_setpwm>:
	if (argc == 3)
 80038ca:	2803      	cmp	r0, #3
{
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	460c      	mov	r4, r1
	if (argc == 3)
 80038d0:	d111      	bne.n	80038f6 <shell_cmd_setpwm+0x2c>
		configPWM((pwmtimerid_t)atoi(argv[1]),(pwmchid_t)atoi(argv[2]), (uint16_t)atoi(argv[3]));
 80038d2:	6848      	ldr	r0, [r1, #4]
 80038d4:	f000 fa73 	bl	8003dbe <atoi>
 80038d8:	4605      	mov	r5, r0
 80038da:	68a0      	ldr	r0, [r4, #8]
 80038dc:	f000 fa6f 	bl	8003dbe <atoi>
 80038e0:	4606      	mov	r6, r0
 80038e2:	68e0      	ldr	r0, [r4, #12]
 80038e4:	f000 fa6b 	bl	8003dbe <atoi>
 80038e8:	b2f1      	uxtb	r1, r6
 80038ea:	b282      	uxth	r2, r0
 80038ec:	b2e8      	uxtb	r0, r5
 80038ee:	f7ff fda7 	bl	8003440 <configPWM>
 80038f2:	2001      	movs	r0, #1
 80038f4:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 80038f6:	2000      	movs	r0, #0
}
 80038f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080038fc <shell_cmd_test>:
	if (argc == 1)
 80038fc:	2801      	cmp	r0, #1
{
 80038fe:	b510      	push	{r4, lr}
 8003900:	4604      	mov	r4, r0
	if (argc == 1)
 8003902:	d105      	bne.n	8003910 <shell_cmd_test+0x14>
		print("Loopback Data: %s",argv[1]);
 8003904:	6849      	ldr	r1, [r1, #4]
 8003906:	4803      	ldr	r0, [pc, #12]	; (8003914 <shell_cmd_test+0x18>)
 8003908:	f7ff fe30 	bl	800356c <print>
}
 800390c:	4620      	mov	r0, r4
 800390e:	bd10      	pop	{r4, pc}
	return 0;
 8003910:	2400      	movs	r4, #0
 8003912:	e7fb      	b.n	800390c <shell_cmd_test+0x10>
 8003914:	08004cb8 	.word	0x08004cb8

08003918 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003918:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <HAL_MspInit+0x3c>)
{
 800391a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	619a      	str	r2, [r3, #24]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	f002 0201 	and.w	r2, r2, #1
 800392a:	9200      	str	r2, [sp, #0]
 800392c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003934:	61da      	str	r2, [r3, #28]
 8003936:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003938:	4a07      	ldr	r2, [pc, #28]	; (8003958 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003942:	6853      	ldr	r3, [r2, #4]
 8003944:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003948:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800394c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800394e:	b002      	add	sp, #8
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
 8003958:	40010000 	.word	0x40010000

0800395c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800395c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800395e:	2410      	movs	r4, #16
{
 8003960:	4605      	mov	r5, r0
 8003962:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003964:	4622      	mov	r2, r4
 8003966:	2100      	movs	r1, #0
 8003968:	eb0d 0004 	add.w	r0, sp, r4
 800396c:	f000 fa66 	bl	8003e3c <memset>
  if(hadc->Instance==ADC1)
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	4a1e      	ldr	r2, [pc, #120]	; (80039ec <HAL_ADC_MspInit+0x90>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d11d      	bne.n	80039b4 <HAL_ADC_MspInit+0x58>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003978:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <HAL_ADC_MspInit+0x94>)
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = ANALOG_0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(ANALOG_0_GPIO_Port, &GPIO_InitStruct);
 800397a:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_ADC1_CLK_ENABLE();
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003984:	619a      	str	r2, [r3, #24]
 8003986:	699a      	ldr	r2, [r3, #24]
 8003988:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800398c:	9200      	str	r2, [sp, #0]
 800398e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	f042 0204 	orr.w	r2, r2, #4
 8003996:	619a      	str	r2, [r3, #24]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ANALOG_0_Pin;
 80039a2:	2301      	movs	r3, #1
 80039a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039a6:	2303      	movs	r3, #3
 80039a8:	9305      	str	r3, [sp, #20]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN4 
    */
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 80039aa:	4812      	ldr	r0, [pc, #72]	; (80039f4 <HAL_ADC_MspInit+0x98>)
 80039ac:	f7fc fdf6 	bl	800059c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80039b0:	b009      	add	sp, #36	; 0x24
 80039b2:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 80039b4:	4a10      	ldr	r2, [pc, #64]	; (80039f8 <HAL_ADC_MspInit+0x9c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d1fa      	bne.n	80039b0 <HAL_ADC_MspInit+0x54>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <HAL_ADC_MspInit+0x94>)
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 80039bc:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 80039be:	699a      	ldr	r2, [r3, #24]
 80039c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039c4:	619a      	str	r2, [r3, #24]
 80039c6:	699a      	ldr	r2, [r3, #24]
 80039c8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80039cc:	9202      	str	r2, [sp, #8]
 80039ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	f042 0204 	orr.w	r2, r2, #4
 80039d6:	619a      	str	r2, [r3, #24]
 80039d8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 80039da:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	9303      	str	r3, [sp, #12]
 80039e2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039e4:	2303      	movs	r3, #3
 80039e6:	9305      	str	r3, [sp, #20]
 80039e8:	e7df      	b.n	80039aa <HAL_ADC_MspInit+0x4e>
 80039ea:	bf00      	nop
 80039ec:	40012400 	.word	0x40012400
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40010800 	.word	0x40010800
 80039f8:	40012800 	.word	0x40012800

080039fc <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fc:	2210      	movs	r2, #16
{
 80039fe:	b510      	push	{r4, lr}
 8003a00:	4604      	mov	r4, r0
 8003a02:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a04:	eb0d 0002 	add.w	r0, sp, r2
 8003a08:	2100      	movs	r1, #0
 8003a0a:	f000 fa17 	bl	8003e3c <memset>
  if(huart->Instance==USART1)
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	4a2a      	ldr	r2, [pc, #168]	; (8003abc <HAL_UART_MspInit+0xc0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d125      	bne.n	8003a62 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a16:	4b2a      	ldr	r3, [pc, #168]	; (8003ac0 <HAL_UART_MspInit+0xc4>)
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = RS485_RXTX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8003a18:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a1a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8003a1c:	4829      	ldr	r0, [pc, #164]	; (8003ac4 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a22:	619a      	str	r2, [r3, #24]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003a2a:	9200      	str	r2, [sp, #0]
 8003a2c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a2e:	699a      	ldr	r2, [r3, #24]
 8003a30:	f042 0208 	orr.w	r2, r2, #8
 8003a34:	619a      	str	r2, [r3, #24]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = RS485_RXTX_Pin;
 8003a40:	2340      	movs	r3, #64	; 0x40
 8003a42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a44:	2312      	movs	r3, #18
 8003a46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8003a4c:	f7fc fda6 	bl	800059c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003a50:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_UART_MspInit+0xcc>)
 8003a52:	6853      	ldr	r3, [r2, #4]
 8003a54:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003a58:	f043 0304 	orr.w	r3, r3, #4
 8003a5c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003a5e:	b008      	add	sp, #32
 8003a60:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8003a62:	4a1a      	ldr	r2, [pc, #104]	; (8003acc <HAL_UART_MspInit+0xd0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d1fa      	bne.n	8003a5e <HAL_UART_MspInit+0x62>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a68:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <HAL_UART_MspInit+0xc4>)
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 8003a6a:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a6c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 8003a6e:	4815      	ldr	r0, [pc, #84]	; (8003ac4 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a70:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a74:	61da      	str	r2, [r3, #28]
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003a7c:	9202      	str	r2, [sp, #8]
 8003a7e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	f042 0208 	orr.w	r2, r2, #8
 8003a86:	619a      	str	r2, [r3, #24]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	9303      	str	r3, [sp, #12]
 8003a90:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = RS232_TX_Pin;
 8003a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a96:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 8003aa0:	f7fc fd7c 	bl	800059c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS232_RX_Pin;
 8003aa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003aa8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003aaa:	2300      	movs	r3, #0
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 8003aac:	a904      	add	r1, sp, #16
 8003aae:	4805      	ldr	r0, [pc, #20]	; (8003ac4 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ab0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 8003ab4:	f7fc fd72 	bl	800059c <HAL_GPIO_Init>
}
 8003ab8:	e7d1      	b.n	8003a5e <HAL_UART_MspInit+0x62>
 8003aba:	bf00      	nop
 8003abc:	40013800 	.word	0x40013800
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40010c00 	.word	0x40010c00
 8003ac8:	40010000 	.word	0x40010000
 8003acc:	40004800 	.word	0x40004800

08003ad0 <NMI_Handler>:
 8003ad0:	4770      	bx	lr

08003ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ad2:	e7fe      	b.n	8003ad2 <HardFault_Handler>

08003ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ad4:	e7fe      	b.n	8003ad4 <MemManage_Handler>

08003ad6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ad6:	e7fe      	b.n	8003ad6 <BusFault_Handler>

08003ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ad8:	e7fe      	b.n	8003ad8 <UsageFault_Handler>

08003ada <SVC_Handler>:
 8003ada:	4770      	bx	lr

08003adc <DebugMon_Handler>:
 8003adc:	4770      	bx	lr

08003ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ade:	4770      	bx	lr

08003ae0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ae0:	f7fc bb72 	b.w	80001c8 <HAL_IncTick>

08003ae4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003ae4:	4801      	ldr	r0, [pc, #4]	; (8003aec <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8003ae6:	f7fc bebb 	b.w	8000860 <HAL_PCD_IRQHandler>
 8003aea:	bf00      	nop
 8003aec:	2000095c 	.word	0x2000095c

08003af0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003af0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <_sbrk+0x2c>)
{
 8003af4:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003af6:	6819      	ldr	r1, [r3, #0]
 8003af8:	b909      	cbnz	r1, 8003afe <_sbrk+0xe>
		heap_end = &end;
 8003afa:	4909      	ldr	r1, [pc, #36]	; (8003b20 <_sbrk+0x30>)
 8003afc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003afe:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003b00:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003b02:	4402      	add	r2, r0
 8003b04:	428a      	cmp	r2, r1
 8003b06:	d906      	bls.n	8003b16 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003b08:	f000 f95e 	bl	8003dc8 <__errno>
 8003b0c:	230c      	movs	r3, #12
 8003b0e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003b16:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003b18:	bd08      	pop	{r3, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000794 	.word	0x20000794
 8003b20:	20000bcc 	.word	0x20000bcc

08003b24 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003b24:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <SystemInit+0x40>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	4a0d      	ldr	r2, [pc, #52]	; (8003b68 <SystemInit+0x44>)
 8003b32:	400a      	ands	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003b3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b40:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b48:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003b50:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003b52:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003b56:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003b58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <SystemInit+0x48>)
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40021000 	.word	0x40021000
 8003b68:	f8ff0000 	.word	0xf8ff0000
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003b70:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8003b74:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003b78:	f7fe bc20 	b.w	80023bc <USBD_LL_SetupStage>

08003b7c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003b7c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003b80:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8003b84:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003b88:	f7fe bc45 	b.w	8002416 <USBD_LL_DataOutStage>

08003b8c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003b8c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b92:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003b96:	f7fe bc78 	b.w	800248a <USBD_LL_DataInStage>

08003b9a <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003b9a:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003b9e:	f7fe bd0c 	b.w	80025ba <USBD_LL_SOF>

08003ba2 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003ba2:	6883      	ldr	r3, [r0, #8]
{ 
 8003ba4:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003ba6:	2b02      	cmp	r3, #2
{ 
 8003ba8:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003baa:	d001      	beq.n	8003bb0 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8003bac:	f7ff fb84 	bl	80032b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003bb0:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	f7fe fcea 	bl	800258e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003bba:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8003bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003bc2:	f7fe bcbd 	b.w	8002540 <USBD_LL_Reset>
	...

08003bc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003bc8:	b510      	push	{r4, lr}
 8003bca:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003bcc:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003bd0:	f7fe fce0 	bl	8002594 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003bd4:	69a3      	ldr	r3, [r4, #24]
 8003bd6:	b123      	cbz	r3, 8003be2 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003bd8:	4a02      	ldr	r2, [pc, #8]	; (8003be4 <HAL_PCD_SuspendCallback+0x1c>)
 8003bda:	6913      	ldr	r3, [r2, #16]
 8003bdc:	f043 0306 	orr.w	r3, r3, #6
 8003be0:	6113      	str	r3, [r2, #16]
 8003be2:	bd10      	pop	{r4, pc}
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003be8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003bec:	f7fe bcdb 	b.w	80025a6 <USBD_LL_Resume>

08003bf0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003bf0:	b510      	push	{r4, lr}
 8003bf2:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003bf4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	4622      	mov	r2, r4
 8003bfc:	f7fc fdcf 	bl	800079e <HAL_PCD_EP_Open>
 8003c00:	2803      	cmp	r0, #3
 8003c02:	bf9a      	itte	ls
 8003c04:	4b01      	ldrls	r3, [pc, #4]	; (8003c0c <USBD_LL_OpenEP+0x1c>)
 8003c06:	5c18      	ldrbls	r0, [r3, r0]
 8003c08:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8003c0a:	bd10      	pop	{r4, pc}
 8003c0c:	08004da5 	.word	0x08004da5

08003c10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003c10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003c12:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003c16:	f7fd f849 	bl	8000cac <HAL_PCD_EP_SetStall>
 8003c1a:	2803      	cmp	r0, #3
 8003c1c:	bf9a      	itte	ls
 8003c1e:	4b02      	ldrls	r3, [pc, #8]	; (8003c28 <USBD_LL_StallEP+0x18>)
 8003c20:	5c18      	ldrbls	r0, [r3, r0]
 8003c22:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8003c24:	bd08      	pop	{r3, pc}
 8003c26:	bf00      	nop
 8003c28:	08004da5 	.word	0x08004da5

08003c2c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003c2c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003c2e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003c32:	f7fd f86f 	bl	8000d14 <HAL_PCD_EP_ClrStall>
 8003c36:	2803      	cmp	r0, #3
 8003c38:	bf9a      	itte	ls
 8003c3a:	4b02      	ldrls	r3, [pc, #8]	; (8003c44 <USBD_LL_ClearStallEP+0x18>)
 8003c3c:	5c18      	ldrbls	r0, [r3, r0]
 8003c3e:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8003c40:	bd08      	pop	{r3, pc}
 8003c42:	bf00      	nop
 8003c44:	08004da5 	.word	0x08004da5

08003c48 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003c48:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003c4a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003c4e:	bf45      	ittet	mi
 8003c50:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003c54:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003c58:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003c5c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003c60:	bf58      	it	pl
 8003c62:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 8003c66:	4770      	bx	lr

08003c68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003c68:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003c6a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003c6e:	f7fc fd82 	bl	8000776 <HAL_PCD_SetAddress>
 8003c72:	2803      	cmp	r0, #3
 8003c74:	bf9a      	itte	ls
 8003c76:	4b02      	ldrls	r3, [pc, #8]	; (8003c80 <USBD_LL_SetUSBAddress+0x18>)
 8003c78:	5c18      	ldrbls	r0, [r3, r0]
 8003c7a:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8003c7c:	bd08      	pop	{r3, pc}
 8003c7e:	bf00      	nop
 8003c80:	08004da5 	.word	0x08004da5

08003c84 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003c84:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003c86:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003c8a:	f7fc fdd3 	bl	8000834 <HAL_PCD_EP_Transmit>
 8003c8e:	2803      	cmp	r0, #3
 8003c90:	bf9a      	itte	ls
 8003c92:	4b02      	ldrls	r3, [pc, #8]	; (8003c9c <USBD_LL_Transmit+0x18>)
 8003c94:	5c18      	ldrbls	r0, [r3, r0]
 8003c96:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8003c98:	bd08      	pop	{r3, pc}
 8003c9a:	bf00      	nop
 8003c9c:	08004da5 	.word	0x08004da5

08003ca0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003ca0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003ca2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003ca6:	f7fc fdad 	bl	8000804 <HAL_PCD_EP_Receive>
 8003caa:	2803      	cmp	r0, #3
 8003cac:	bf9a      	itte	ls
 8003cae:	4b02      	ldrls	r3, [pc, #8]	; (8003cb8 <USBD_LL_PrepareReceive+0x18>)
 8003cb0:	5c18      	ldrbls	r0, [r3, r0]
 8003cb2:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8003cb4:	bd08      	pop	{r3, pc}
 8003cb6:	bf00      	nop
 8003cb8:	08004da5 	.word	0x08004da5

08003cbc <vt100_process_byte>:
    
    return VT100_KEY_INVALID;
}

vt100_key_t vt100_process_byte(uint8_t byte)
{
 8003cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    static uint8_t cbuf[8] = {0};
    static uint8_t cbuf_idx = 0;
    
    if (0 == cbuf_idx && true == is_printable(byte))
 8003cc0:	4d1f      	ldr	r5, [pc, #124]	; (8003d40 <vt100_process_byte+0x84>)
 8003cc2:	782b      	ldrb	r3, [r5, #0]
 8003cc4:	b91b      	cbnz	r3, 8003cce <vt100_process_byte+0x12>
 8003cc6:	f1a0 0220 	sub.w	r2, r0, #32
 8003cca:	2a5e      	cmp	r2, #94	; 0x5e
 8003ccc:	d931      	bls.n	8003d32 <vt100_process_byte+0x76>
    {
        return VT100_KEY_PRINTABLE;
    }
    else if (0x0D == byte) /* Enter */
 8003cce:	280d      	cmp	r0, #13
 8003cd0:	d032      	beq.n	8003d38 <vt100_process_byte+0x7c>
        return VT100_KEY_ENTER;
    }
    else
    {
        vt100_key_t key = VT100_KEY_INVALID;
        cbuf[cbuf_idx++] = byte;
 8003cd2:	4c1c      	ldr	r4, [pc, #112]	; (8003d44 <vt100_process_byte+0x88>)
 8003cd4:	4f1c      	ldr	r7, [pc, #112]	; (8003d48 <vt100_process_byte+0x8c>)
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8003cd6:	f04f 0800 	mov.w	r8, #0
 8003cda:	46b9      	mov	r9, r7
            (0 == strncmp((const char*)vt100_keycodes[ii].code, (const char*)buf, len)))
 8003cdc:	46a2      	mov	sl, r4
        cbuf[cbuf_idx++] = byte;
 8003cde:	1c5e      	adds	r6, r3, #1
 8003ce0:	b2f6      	uxtb	r6, r6
 8003ce2:	702e      	strb	r6, [r5, #0]
 8003ce4:	54e0      	strb	r0, [r4, r3]
        if ((len == vt100_keycodes[ii].code_len) &&
 8003ce6:	7a3b      	ldrb	r3, [r7, #8]
 8003ce8:	42b3      	cmp	r3, r6
 8003cea:	d115      	bne.n	8003d18 <vt100_process_byte+0x5c>
            (0 == strncmp((const char*)vt100_keycodes[ii].code, (const char*)buf, len)))
 8003cec:	4632      	mov	r2, r6
 8003cee:	4651      	mov	r1, sl
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f974 	bl	8003fde <strncmp>
        if ((len == vt100_keycodes[ii].code_len) &&
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	b970      	cbnz	r0, 8003d18 <vt100_process_byte+0x5c>
            return vt100_keycodes[ii].key;
 8003cfa:	220c      	movs	r2, #12
 8003cfc:	fb02 f808 	mul.w	r8, r2, r8
 8003d00:	f819 0008 	ldrb.w	r0, [r9, r8]
        key = find_key(cbuf, cbuf_idx);
        if (VT100_KEY_INVALID != key)
 8003d04:	b980      	cbnz	r0, 8003d28 <vt100_process_byte+0x6c>
            memset(cbuf, 0, sizeof(cbuf));
            return key;
        }
        else
        {
            if (cbuf_idx >= sizeof(cbuf))
 8003d06:	2e07      	cmp	r6, #7
 8003d08:	f04f 0000 	mov.w	r0, #0
 8003d0c:	d915      	bls.n	8003d3a <vt100_process_byte+0x7e>
            {
                cbuf_idx = 0;
 8003d0e:	7028      	strb	r0, [r5, #0]
                memset(cbuf, 0, sizeof(cbuf));
 8003d10:	6020      	str	r0, [r4, #0]
 8003d12:	6060      	str	r0, [r4, #4]
 8003d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8003d18:	f108 0801 	add.w	r8, r8, #1
 8003d1c:	f1b8 0f0f 	cmp.w	r8, #15
 8003d20:	f107 070c 	add.w	r7, r7, #12
 8003d24:	d1df      	bne.n	8003ce6 <vt100_process_byte+0x2a>
 8003d26:	e7ee      	b.n	8003d06 <vt100_process_byte+0x4a>
            cbuf_idx = 0;
 8003d28:	702b      	strb	r3, [r5, #0]
            memset(cbuf, 0, sizeof(cbuf));
 8003d2a:	6023      	str	r3, [r4, #0]
 8003d2c:	6063      	str	r3, [r4, #4]
            return key;
 8003d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return VT100_KEY_PRINTABLE;
 8003d32:	2001      	movs	r0, #1
 8003d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return VT100_KEY_ENTER;
 8003d38:	2008      	movs	r0, #8
            }
        }
    }

    return VT100_KEY_INVALID;
}
 8003d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d3e:	bf00      	nop
 8003d40:	200007a0 	.word	0x200007a0
 8003d44:	20000798 	.word	0x20000798
 8003d48:	08004dcc 	.word	0x08004dcc

08003d4c <vt100_get_keycode>:

vt100_keycode_t * vt100_get_keycode(vt100_key_t key)
{
    if (key >= VT100_KEY_MAX) return NULL;
 8003d4c:	280e      	cmp	r0, #14
{
 8003d4e:	b530      	push	{r4, r5, lr}
    if (key >= VT100_KEY_MAX) return NULL;
 8003d50:	d80c      	bhi.n	8003d6c <vt100_get_keycode+0x20>
 8003d52:	2200      	movs	r2, #0
 8003d54:	240c      	movs	r4, #12
    
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
    {
        if (vt100_keycodes[ii].key == key)
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <vt100_get_keycode+0x24>)
 8003d58:	fb04 f102 	mul.w	r1, r4, r2
 8003d5c:	5ccd      	ldrb	r5, [r1, r3]
 8003d5e:	4285      	cmp	r5, r0
 8003d60:	d101      	bne.n	8003d66 <vt100_get_keycode+0x1a>
        {
            return (vt100_keycode_t*)&vt100_keycodes[ii];
 8003d62:	1858      	adds	r0, r3, r1
 8003d64:	bd30      	pop	{r4, r5, pc}
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8003d66:	3201      	adds	r2, #1
 8003d68:	2a0f      	cmp	r2, #15
 8003d6a:	d1f5      	bne.n	8003d58 <vt100_get_keycode+0xc>
    if (key >= VT100_KEY_MAX) return NULL;
 8003d6c:	2000      	movs	r0, #0
        }
    }
    
    return NULL;
}
 8003d6e:	bd30      	pop	{r4, r5, pc}
 8003d70:	08004dcc 	.word	0x08004dcc

08003d74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003d74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003d76:	e003      	b.n	8003d80 <LoopCopyDataInit>

08003d78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003d7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003d7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003d7e:	3104      	adds	r1, #4

08003d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003d80:	480a      	ldr	r0, [pc, #40]	; (8003dac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003d84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003d86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003d88:	d3f6      	bcc.n	8003d78 <CopyDataInit>
  ldr r2, =_sbss
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003d8c:	e002      	b.n	8003d94 <LoopFillZerobss>

08003d8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003d8e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003d90:	f842 3b04 	str.w	r3, [r2], #4

08003d94 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003d96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003d98:	d3f9      	bcc.n	8003d8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003d9a:	f7ff fec3 	bl	8003b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d9e:	f000 f819 	bl	8003dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003da2:	f7ff f927 	bl	8002ff4 <main>
  bx lr
 8003da6:	4770      	bx	lr
  ldr r3, =_sidata
 8003da8:	08004fc8 	.word	0x08004fc8
  ldr r0, =_sdata
 8003dac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003db0:	20000248 	.word	0x20000248
  ldr r2, =_sbss
 8003db4:	20000248 	.word	0x20000248
  ldr r3, = _ebss
 8003db8:	20000bcc 	.word	0x20000bcc

08003dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003dbc:	e7fe      	b.n	8003dbc <ADC1_2_IRQHandler>

08003dbe <atoi>:
 8003dbe:	220a      	movs	r2, #10
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	f000 ba07 	b.w	80041d4 <strtol>
	...

08003dc8 <__errno>:
 8003dc8:	4b01      	ldr	r3, [pc, #4]	; (8003dd0 <__errno+0x8>)
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000078 	.word	0x20000078

08003dd4 <__libc_init_array>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	2500      	movs	r5, #0
 8003dd8:	4e0c      	ldr	r6, [pc, #48]	; (8003e0c <__libc_init_array+0x38>)
 8003dda:	4c0d      	ldr	r4, [pc, #52]	; (8003e10 <__libc_init_array+0x3c>)
 8003ddc:	1ba4      	subs	r4, r4, r6
 8003dde:	10a4      	asrs	r4, r4, #2
 8003de0:	42a5      	cmp	r5, r4
 8003de2:	d109      	bne.n	8003df8 <__libc_init_array+0x24>
 8003de4:	f000 fdb4 	bl	8004950 <_init>
 8003de8:	2500      	movs	r5, #0
 8003dea:	4e0a      	ldr	r6, [pc, #40]	; (8003e14 <__libc_init_array+0x40>)
 8003dec:	4c0a      	ldr	r4, [pc, #40]	; (8003e18 <__libc_init_array+0x44>)
 8003dee:	1ba4      	subs	r4, r4, r6
 8003df0:	10a4      	asrs	r4, r4, #2
 8003df2:	42a5      	cmp	r5, r4
 8003df4:	d105      	bne.n	8003e02 <__libc_init_array+0x2e>
 8003df6:	bd70      	pop	{r4, r5, r6, pc}
 8003df8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dfc:	4798      	blx	r3
 8003dfe:	3501      	adds	r5, #1
 8003e00:	e7ee      	b.n	8003de0 <__libc_init_array+0xc>
 8003e02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e06:	4798      	blx	r3
 8003e08:	3501      	adds	r5, #1
 8003e0a:	e7f2      	b.n	8003df2 <__libc_init_array+0x1e>
 8003e0c:	08004fc0 	.word	0x08004fc0
 8003e10:	08004fc0 	.word	0x08004fc0
 8003e14:	08004fc0 	.word	0x08004fc0
 8003e18:	08004fc4 	.word	0x08004fc4

08003e1c <malloc>:
 8003e1c:	4b02      	ldr	r3, [pc, #8]	; (8003e28 <malloc+0xc>)
 8003e1e:	4601      	mov	r1, r0
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	f000 b85f 	b.w	8003ee4 <_malloc_r>
 8003e26:	bf00      	nop
 8003e28:	20000078 	.word	0x20000078

08003e2c <free>:
 8003e2c:	4b02      	ldr	r3, [pc, #8]	; (8003e38 <free+0xc>)
 8003e2e:	4601      	mov	r1, r0
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	f000 b80b 	b.w	8003e4c <_free_r>
 8003e36:	bf00      	nop
 8003e38:	20000078 	.word	0x20000078

08003e3c <memset>:
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4402      	add	r2, r0
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d100      	bne.n	8003e46 <memset+0xa>
 8003e44:	4770      	bx	lr
 8003e46:	f803 1b01 	strb.w	r1, [r3], #1
 8003e4a:	e7f9      	b.n	8003e40 <memset+0x4>

08003e4c <_free_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	4605      	mov	r5, r0
 8003e50:	2900      	cmp	r1, #0
 8003e52:	d043      	beq.n	8003edc <_free_r+0x90>
 8003e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e58:	1f0c      	subs	r4, r1, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bfb8      	it	lt
 8003e5e:	18e4      	addlt	r4, r4, r3
 8003e60:	f000 fa1d 	bl	800429e <__malloc_lock>
 8003e64:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <_free_r+0x94>)
 8003e66:	6813      	ldr	r3, [r2, #0]
 8003e68:	4610      	mov	r0, r2
 8003e6a:	b933      	cbnz	r3, 8003e7a <_free_r+0x2e>
 8003e6c:	6063      	str	r3, [r4, #4]
 8003e6e:	6014      	str	r4, [r2, #0]
 8003e70:	4628      	mov	r0, r5
 8003e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e76:	f000 ba13 	b.w	80042a0 <__malloc_unlock>
 8003e7a:	42a3      	cmp	r3, r4
 8003e7c:	d90b      	bls.n	8003e96 <_free_r+0x4a>
 8003e7e:	6821      	ldr	r1, [r4, #0]
 8003e80:	1862      	adds	r2, r4, r1
 8003e82:	4293      	cmp	r3, r2
 8003e84:	bf01      	itttt	eq
 8003e86:	681a      	ldreq	r2, [r3, #0]
 8003e88:	685b      	ldreq	r3, [r3, #4]
 8003e8a:	1852      	addeq	r2, r2, r1
 8003e8c:	6022      	streq	r2, [r4, #0]
 8003e8e:	6063      	str	r3, [r4, #4]
 8003e90:	6004      	str	r4, [r0, #0]
 8003e92:	e7ed      	b.n	8003e70 <_free_r+0x24>
 8003e94:	4613      	mov	r3, r2
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	b10a      	cbz	r2, 8003e9e <_free_r+0x52>
 8003e9a:	42a2      	cmp	r2, r4
 8003e9c:	d9fa      	bls.n	8003e94 <_free_r+0x48>
 8003e9e:	6819      	ldr	r1, [r3, #0]
 8003ea0:	1858      	adds	r0, r3, r1
 8003ea2:	42a0      	cmp	r0, r4
 8003ea4:	d10b      	bne.n	8003ebe <_free_r+0x72>
 8003ea6:	6820      	ldr	r0, [r4, #0]
 8003ea8:	4401      	add	r1, r0
 8003eaa:	1858      	adds	r0, r3, r1
 8003eac:	4282      	cmp	r2, r0
 8003eae:	6019      	str	r1, [r3, #0]
 8003eb0:	d1de      	bne.n	8003e70 <_free_r+0x24>
 8003eb2:	6810      	ldr	r0, [r2, #0]
 8003eb4:	6852      	ldr	r2, [r2, #4]
 8003eb6:	4401      	add	r1, r0
 8003eb8:	6019      	str	r1, [r3, #0]
 8003eba:	605a      	str	r2, [r3, #4]
 8003ebc:	e7d8      	b.n	8003e70 <_free_r+0x24>
 8003ebe:	d902      	bls.n	8003ec6 <_free_r+0x7a>
 8003ec0:	230c      	movs	r3, #12
 8003ec2:	602b      	str	r3, [r5, #0]
 8003ec4:	e7d4      	b.n	8003e70 <_free_r+0x24>
 8003ec6:	6820      	ldr	r0, [r4, #0]
 8003ec8:	1821      	adds	r1, r4, r0
 8003eca:	428a      	cmp	r2, r1
 8003ecc:	bf01      	itttt	eq
 8003ece:	6811      	ldreq	r1, [r2, #0]
 8003ed0:	6852      	ldreq	r2, [r2, #4]
 8003ed2:	1809      	addeq	r1, r1, r0
 8003ed4:	6021      	streq	r1, [r4, #0]
 8003ed6:	6062      	str	r2, [r4, #4]
 8003ed8:	605c      	str	r4, [r3, #4]
 8003eda:	e7c9      	b.n	8003e70 <_free_r+0x24>
 8003edc:	bd38      	pop	{r3, r4, r5, pc}
 8003ede:	bf00      	nop
 8003ee0:	200007a4 	.word	0x200007a4

08003ee4 <_malloc_r>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	1ccd      	adds	r5, r1, #3
 8003ee8:	f025 0503 	bic.w	r5, r5, #3
 8003eec:	3508      	adds	r5, #8
 8003eee:	2d0c      	cmp	r5, #12
 8003ef0:	bf38      	it	cc
 8003ef2:	250c      	movcc	r5, #12
 8003ef4:	2d00      	cmp	r5, #0
 8003ef6:	4606      	mov	r6, r0
 8003ef8:	db01      	blt.n	8003efe <_malloc_r+0x1a>
 8003efa:	42a9      	cmp	r1, r5
 8003efc:	d903      	bls.n	8003f06 <_malloc_r+0x22>
 8003efe:	230c      	movs	r3, #12
 8003f00:	6033      	str	r3, [r6, #0]
 8003f02:	2000      	movs	r0, #0
 8003f04:	bd70      	pop	{r4, r5, r6, pc}
 8003f06:	f000 f9ca 	bl	800429e <__malloc_lock>
 8003f0a:	4a23      	ldr	r2, [pc, #140]	; (8003f98 <_malloc_r+0xb4>)
 8003f0c:	6814      	ldr	r4, [r2, #0]
 8003f0e:	4621      	mov	r1, r4
 8003f10:	b991      	cbnz	r1, 8003f38 <_malloc_r+0x54>
 8003f12:	4c22      	ldr	r4, [pc, #136]	; (8003f9c <_malloc_r+0xb8>)
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	b91b      	cbnz	r3, 8003f20 <_malloc_r+0x3c>
 8003f18:	4630      	mov	r0, r6
 8003f1a:	f000 f841 	bl	8003fa0 <_sbrk_r>
 8003f1e:	6020      	str	r0, [r4, #0]
 8003f20:	4629      	mov	r1, r5
 8003f22:	4630      	mov	r0, r6
 8003f24:	f000 f83c 	bl	8003fa0 <_sbrk_r>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d126      	bne.n	8003f7a <_malloc_r+0x96>
 8003f2c:	230c      	movs	r3, #12
 8003f2e:	4630      	mov	r0, r6
 8003f30:	6033      	str	r3, [r6, #0]
 8003f32:	f000 f9b5 	bl	80042a0 <__malloc_unlock>
 8003f36:	e7e4      	b.n	8003f02 <_malloc_r+0x1e>
 8003f38:	680b      	ldr	r3, [r1, #0]
 8003f3a:	1b5b      	subs	r3, r3, r5
 8003f3c:	d41a      	bmi.n	8003f74 <_malloc_r+0x90>
 8003f3e:	2b0b      	cmp	r3, #11
 8003f40:	d90f      	bls.n	8003f62 <_malloc_r+0x7e>
 8003f42:	600b      	str	r3, [r1, #0]
 8003f44:	18cc      	adds	r4, r1, r3
 8003f46:	50cd      	str	r5, [r1, r3]
 8003f48:	4630      	mov	r0, r6
 8003f4a:	f000 f9a9 	bl	80042a0 <__malloc_unlock>
 8003f4e:	f104 000b 	add.w	r0, r4, #11
 8003f52:	1d23      	adds	r3, r4, #4
 8003f54:	f020 0007 	bic.w	r0, r0, #7
 8003f58:	1ac3      	subs	r3, r0, r3
 8003f5a:	d01b      	beq.n	8003f94 <_malloc_r+0xb0>
 8003f5c:	425a      	negs	r2, r3
 8003f5e:	50e2      	str	r2, [r4, r3]
 8003f60:	bd70      	pop	{r4, r5, r6, pc}
 8003f62:	428c      	cmp	r4, r1
 8003f64:	bf0b      	itete	eq
 8003f66:	6863      	ldreq	r3, [r4, #4]
 8003f68:	684b      	ldrne	r3, [r1, #4]
 8003f6a:	6013      	streq	r3, [r2, #0]
 8003f6c:	6063      	strne	r3, [r4, #4]
 8003f6e:	bf18      	it	ne
 8003f70:	460c      	movne	r4, r1
 8003f72:	e7e9      	b.n	8003f48 <_malloc_r+0x64>
 8003f74:	460c      	mov	r4, r1
 8003f76:	6849      	ldr	r1, [r1, #4]
 8003f78:	e7ca      	b.n	8003f10 <_malloc_r+0x2c>
 8003f7a:	1cc4      	adds	r4, r0, #3
 8003f7c:	f024 0403 	bic.w	r4, r4, #3
 8003f80:	42a0      	cmp	r0, r4
 8003f82:	d005      	beq.n	8003f90 <_malloc_r+0xac>
 8003f84:	1a21      	subs	r1, r4, r0
 8003f86:	4630      	mov	r0, r6
 8003f88:	f000 f80a 	bl	8003fa0 <_sbrk_r>
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	d0cd      	beq.n	8003f2c <_malloc_r+0x48>
 8003f90:	6025      	str	r5, [r4, #0]
 8003f92:	e7d9      	b.n	8003f48 <_malloc_r+0x64>
 8003f94:	bd70      	pop	{r4, r5, r6, pc}
 8003f96:	bf00      	nop
 8003f98:	200007a4 	.word	0x200007a4
 8003f9c:	200007a8 	.word	0x200007a8

08003fa0 <_sbrk_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	4c05      	ldr	r4, [pc, #20]	; (8003fbc <_sbrk_r+0x1c>)
 8003fa6:	4605      	mov	r5, r0
 8003fa8:	4608      	mov	r0, r1
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	f7ff fda0 	bl	8003af0 <_sbrk>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d102      	bne.n	8003fba <_sbrk_r+0x1a>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	b103      	cbz	r3, 8003fba <_sbrk_r+0x1a>
 8003fb8:	602b      	str	r3, [r5, #0]
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	20000bc8 	.word	0x20000bc8

08003fc0 <strcat>:
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	b510      	push	{r4, lr}
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	781c      	ldrb	r4, [r3, #0]
 8003fc8:	3201      	adds	r2, #1
 8003fca:	2c00      	cmp	r4, #0
 8003fcc:	d1fa      	bne.n	8003fc4 <strcat+0x4>
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fd4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fd8:	2a00      	cmp	r2, #0
 8003fda:	d1f9      	bne.n	8003fd0 <strcat+0x10>
 8003fdc:	bd10      	pop	{r4, pc}

08003fde <strncmp>:
 8003fde:	b510      	push	{r4, lr}
 8003fe0:	b16a      	cbz	r2, 8003ffe <strncmp+0x20>
 8003fe2:	3901      	subs	r1, #1
 8003fe4:	1884      	adds	r4, r0, r2
 8003fe6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003fea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d103      	bne.n	8003ffa <strncmp+0x1c>
 8003ff2:	42a0      	cmp	r0, r4
 8003ff4:	d001      	beq.n	8003ffa <strncmp+0x1c>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f5      	bne.n	8003fe6 <strncmp+0x8>
 8003ffa:	1a98      	subs	r0, r3, r2
 8003ffc:	bd10      	pop	{r4, pc}
 8003ffe:	4610      	mov	r0, r2
 8004000:	bd10      	pop	{r4, pc}

08004002 <strncpy>:
 8004002:	b570      	push	{r4, r5, r6, lr}
 8004004:	4604      	mov	r4, r0
 8004006:	b902      	cbnz	r2, 800400a <strncpy+0x8>
 8004008:	bd70      	pop	{r4, r5, r6, pc}
 800400a:	4623      	mov	r3, r4
 800400c:	f811 5b01 	ldrb.w	r5, [r1], #1
 8004010:	1e56      	subs	r6, r2, #1
 8004012:	f803 5b01 	strb.w	r5, [r3], #1
 8004016:	b91d      	cbnz	r5, 8004020 <strncpy+0x1e>
 8004018:	4414      	add	r4, r2
 800401a:	42a3      	cmp	r3, r4
 800401c:	d103      	bne.n	8004026 <strncpy+0x24>
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	461c      	mov	r4, r3
 8004022:	4632      	mov	r2, r6
 8004024:	e7ef      	b.n	8004006 <strncpy+0x4>
 8004026:	f803 5b01 	strb.w	r5, [r3], #1
 800402a:	e7f6      	b.n	800401a <strncpy+0x18>

0800402c <strtok>:
 800402c:	4b13      	ldr	r3, [pc, #76]	; (800407c <strtok+0x50>)
 800402e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004032:	681d      	ldr	r5, [r3, #0]
 8004034:	4606      	mov	r6, r0
 8004036:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004038:	460f      	mov	r7, r1
 800403a:	b9b4      	cbnz	r4, 800406a <strtok+0x3e>
 800403c:	2050      	movs	r0, #80	; 0x50
 800403e:	f7ff feed 	bl	8003e1c <malloc>
 8004042:	65a8      	str	r0, [r5, #88]	; 0x58
 8004044:	6004      	str	r4, [r0, #0]
 8004046:	6044      	str	r4, [r0, #4]
 8004048:	6084      	str	r4, [r0, #8]
 800404a:	60c4      	str	r4, [r0, #12]
 800404c:	6104      	str	r4, [r0, #16]
 800404e:	6144      	str	r4, [r0, #20]
 8004050:	6184      	str	r4, [r0, #24]
 8004052:	6284      	str	r4, [r0, #40]	; 0x28
 8004054:	62c4      	str	r4, [r0, #44]	; 0x2c
 8004056:	6304      	str	r4, [r0, #48]	; 0x30
 8004058:	6344      	str	r4, [r0, #52]	; 0x34
 800405a:	6384      	str	r4, [r0, #56]	; 0x38
 800405c:	63c4      	str	r4, [r0, #60]	; 0x3c
 800405e:	6404      	str	r4, [r0, #64]	; 0x40
 8004060:	6444      	str	r4, [r0, #68]	; 0x44
 8004062:	6484      	str	r4, [r0, #72]	; 0x48
 8004064:	64c4      	str	r4, [r0, #76]	; 0x4c
 8004066:	7704      	strb	r4, [r0, #28]
 8004068:	6244      	str	r4, [r0, #36]	; 0x24
 800406a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800406c:	4639      	mov	r1, r7
 800406e:	4630      	mov	r0, r6
 8004070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004074:	2301      	movs	r3, #1
 8004076:	f000 b803 	b.w	8004080 <__strtok_r>
 800407a:	bf00      	nop
 800407c:	20000078 	.word	0x20000078

08004080 <__strtok_r>:
 8004080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004082:	b918      	cbnz	r0, 800408c <__strtok_r+0xc>
 8004084:	6810      	ldr	r0, [r2, #0]
 8004086:	b908      	cbnz	r0, 800408c <__strtok_r+0xc>
 8004088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800408a:	4620      	mov	r0, r4
 800408c:	4604      	mov	r4, r0
 800408e:	460f      	mov	r7, r1
 8004090:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004094:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004098:	b91e      	cbnz	r6, 80040a2 <__strtok_r+0x22>
 800409a:	b965      	cbnz	r5, 80040b6 <__strtok_r+0x36>
 800409c:	6015      	str	r5, [r2, #0]
 800409e:	4628      	mov	r0, r5
 80040a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a2:	42b5      	cmp	r5, r6
 80040a4:	d1f6      	bne.n	8004094 <__strtok_r+0x14>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1ef      	bne.n	800408a <__strtok_r+0xa>
 80040aa:	6014      	str	r4, [r2, #0]
 80040ac:	7003      	strb	r3, [r0, #0]
 80040ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040b0:	461c      	mov	r4, r3
 80040b2:	e00c      	b.n	80040ce <__strtok_r+0x4e>
 80040b4:	b915      	cbnz	r5, 80040bc <__strtok_r+0x3c>
 80040b6:	460e      	mov	r6, r1
 80040b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80040bc:	f816 5b01 	ldrb.w	r5, [r6], #1
 80040c0:	42ab      	cmp	r3, r5
 80040c2:	d1f7      	bne.n	80040b4 <__strtok_r+0x34>
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f3      	beq.n	80040b0 <__strtok_r+0x30>
 80040c8:	2300      	movs	r3, #0
 80040ca:	f804 3c01 	strb.w	r3, [r4, #-1]
 80040ce:	6014      	str	r4, [r2, #0]
 80040d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040d2 <_strtol_l.isra.0>:
 80040d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d6:	4680      	mov	r8, r0
 80040d8:	4689      	mov	r9, r1
 80040da:	4692      	mov	sl, r2
 80040dc:	461f      	mov	r7, r3
 80040de:	468b      	mov	fp, r1
 80040e0:	465d      	mov	r5, fp
 80040e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80040e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040e8:	f000 f8c4 	bl	8004274 <__locale_ctype_ptr_l>
 80040ec:	4420      	add	r0, r4
 80040ee:	7846      	ldrb	r6, [r0, #1]
 80040f0:	f016 0608 	ands.w	r6, r6, #8
 80040f4:	d10b      	bne.n	800410e <_strtol_l.isra.0+0x3c>
 80040f6:	2c2d      	cmp	r4, #45	; 0x2d
 80040f8:	d10b      	bne.n	8004112 <_strtol_l.isra.0+0x40>
 80040fa:	2601      	movs	r6, #1
 80040fc:	782c      	ldrb	r4, [r5, #0]
 80040fe:	f10b 0502 	add.w	r5, fp, #2
 8004102:	b167      	cbz	r7, 800411e <_strtol_l.isra.0+0x4c>
 8004104:	2f10      	cmp	r7, #16
 8004106:	d114      	bne.n	8004132 <_strtol_l.isra.0+0x60>
 8004108:	2c30      	cmp	r4, #48	; 0x30
 800410a:	d00a      	beq.n	8004122 <_strtol_l.isra.0+0x50>
 800410c:	e011      	b.n	8004132 <_strtol_l.isra.0+0x60>
 800410e:	46ab      	mov	fp, r5
 8004110:	e7e6      	b.n	80040e0 <_strtol_l.isra.0+0xe>
 8004112:	2c2b      	cmp	r4, #43	; 0x2b
 8004114:	bf04      	itt	eq
 8004116:	782c      	ldrbeq	r4, [r5, #0]
 8004118:	f10b 0502 	addeq.w	r5, fp, #2
 800411c:	e7f1      	b.n	8004102 <_strtol_l.isra.0+0x30>
 800411e:	2c30      	cmp	r4, #48	; 0x30
 8004120:	d127      	bne.n	8004172 <_strtol_l.isra.0+0xa0>
 8004122:	782b      	ldrb	r3, [r5, #0]
 8004124:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004128:	2b58      	cmp	r3, #88	; 0x58
 800412a:	d14b      	bne.n	80041c4 <_strtol_l.isra.0+0xf2>
 800412c:	2710      	movs	r7, #16
 800412e:	786c      	ldrb	r4, [r5, #1]
 8004130:	3502      	adds	r5, #2
 8004132:	2e00      	cmp	r6, #0
 8004134:	bf0c      	ite	eq
 8004136:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800413a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800413e:	2200      	movs	r2, #0
 8004140:	fbb1 fef7 	udiv	lr, r1, r7
 8004144:	4610      	mov	r0, r2
 8004146:	fb07 1c1e 	mls	ip, r7, lr, r1
 800414a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800414e:	2b09      	cmp	r3, #9
 8004150:	d811      	bhi.n	8004176 <_strtol_l.isra.0+0xa4>
 8004152:	461c      	mov	r4, r3
 8004154:	42a7      	cmp	r7, r4
 8004156:	dd1d      	ble.n	8004194 <_strtol_l.isra.0+0xc2>
 8004158:	1c53      	adds	r3, r2, #1
 800415a:	d007      	beq.n	800416c <_strtol_l.isra.0+0x9a>
 800415c:	4586      	cmp	lr, r0
 800415e:	d316      	bcc.n	800418e <_strtol_l.isra.0+0xbc>
 8004160:	d101      	bne.n	8004166 <_strtol_l.isra.0+0x94>
 8004162:	45a4      	cmp	ip, r4
 8004164:	db13      	blt.n	800418e <_strtol_l.isra.0+0xbc>
 8004166:	2201      	movs	r2, #1
 8004168:	fb00 4007 	mla	r0, r0, r7, r4
 800416c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004170:	e7eb      	b.n	800414a <_strtol_l.isra.0+0x78>
 8004172:	270a      	movs	r7, #10
 8004174:	e7dd      	b.n	8004132 <_strtol_l.isra.0+0x60>
 8004176:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800417a:	2b19      	cmp	r3, #25
 800417c:	d801      	bhi.n	8004182 <_strtol_l.isra.0+0xb0>
 800417e:	3c37      	subs	r4, #55	; 0x37
 8004180:	e7e8      	b.n	8004154 <_strtol_l.isra.0+0x82>
 8004182:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004186:	2b19      	cmp	r3, #25
 8004188:	d804      	bhi.n	8004194 <_strtol_l.isra.0+0xc2>
 800418a:	3c57      	subs	r4, #87	; 0x57
 800418c:	e7e2      	b.n	8004154 <_strtol_l.isra.0+0x82>
 800418e:	f04f 32ff 	mov.w	r2, #4294967295
 8004192:	e7eb      	b.n	800416c <_strtol_l.isra.0+0x9a>
 8004194:	1c53      	adds	r3, r2, #1
 8004196:	d108      	bne.n	80041aa <_strtol_l.isra.0+0xd8>
 8004198:	2322      	movs	r3, #34	; 0x22
 800419a:	4608      	mov	r0, r1
 800419c:	f8c8 3000 	str.w	r3, [r8]
 80041a0:	f1ba 0f00 	cmp.w	sl, #0
 80041a4:	d107      	bne.n	80041b6 <_strtol_l.isra.0+0xe4>
 80041a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041aa:	b106      	cbz	r6, 80041ae <_strtol_l.isra.0+0xdc>
 80041ac:	4240      	negs	r0, r0
 80041ae:	f1ba 0f00 	cmp.w	sl, #0
 80041b2:	d00c      	beq.n	80041ce <_strtol_l.isra.0+0xfc>
 80041b4:	b122      	cbz	r2, 80041c0 <_strtol_l.isra.0+0xee>
 80041b6:	3d01      	subs	r5, #1
 80041b8:	f8ca 5000 	str.w	r5, [sl]
 80041bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c0:	464d      	mov	r5, r9
 80041c2:	e7f9      	b.n	80041b8 <_strtol_l.isra.0+0xe6>
 80041c4:	2430      	movs	r4, #48	; 0x30
 80041c6:	2f00      	cmp	r7, #0
 80041c8:	d1b3      	bne.n	8004132 <_strtol_l.isra.0+0x60>
 80041ca:	2708      	movs	r7, #8
 80041cc:	e7b1      	b.n	8004132 <_strtol_l.isra.0+0x60>
 80041ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080041d4 <strtol>:
 80041d4:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <strtol+0x24>)
 80041d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041d8:	681c      	ldr	r4, [r3, #0]
 80041da:	4d08      	ldr	r5, [pc, #32]	; (80041fc <strtol+0x28>)
 80041dc:	6a23      	ldr	r3, [r4, #32]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bf08      	it	eq
 80041e2:	462b      	moveq	r3, r5
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	4613      	mov	r3, r2
 80041e8:	460a      	mov	r2, r1
 80041ea:	4601      	mov	r1, r0
 80041ec:	4620      	mov	r0, r4
 80041ee:	f7ff ff70 	bl	80040d2 <_strtol_l.isra.0>
 80041f2:	b003      	add	sp, #12
 80041f4:	bd30      	pop	{r4, r5, pc}
 80041f6:	bf00      	nop
 80041f8:	20000078 	.word	0x20000078
 80041fc:	200000dc 	.word	0x200000dc

08004200 <_vsniprintf_r>:
 8004200:	b530      	push	{r4, r5, lr}
 8004202:	1e14      	subs	r4, r2, #0
 8004204:	4605      	mov	r5, r0
 8004206:	b09b      	sub	sp, #108	; 0x6c
 8004208:	4618      	mov	r0, r3
 800420a:	da05      	bge.n	8004218 <_vsniprintf_r+0x18>
 800420c:	238b      	movs	r3, #139	; 0x8b
 800420e:	f04f 30ff 	mov.w	r0, #4294967295
 8004212:	602b      	str	r3, [r5, #0]
 8004214:	b01b      	add	sp, #108	; 0x6c
 8004216:	bd30      	pop	{r4, r5, pc}
 8004218:	f44f 7302 	mov.w	r3, #520	; 0x208
 800421c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004220:	bf0c      	ite	eq
 8004222:	4623      	moveq	r3, r4
 8004224:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004228:	9302      	str	r3, [sp, #8]
 800422a:	9305      	str	r3, [sp, #20]
 800422c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004230:	9100      	str	r1, [sp, #0]
 8004232:	9104      	str	r1, [sp, #16]
 8004234:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004238:	4602      	mov	r2, r0
 800423a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800423c:	4669      	mov	r1, sp
 800423e:	4628      	mov	r0, r5
 8004240:	f000 f88a 	bl	8004358 <_svfiprintf_r>
 8004244:	1c43      	adds	r3, r0, #1
 8004246:	bfbc      	itt	lt
 8004248:	238b      	movlt	r3, #139	; 0x8b
 800424a:	602b      	strlt	r3, [r5, #0]
 800424c:	2c00      	cmp	r4, #0
 800424e:	d0e1      	beq.n	8004214 <_vsniprintf_r+0x14>
 8004250:	2200      	movs	r2, #0
 8004252:	9b00      	ldr	r3, [sp, #0]
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	e7dd      	b.n	8004214 <_vsniprintf_r+0x14>

08004258 <vsniprintf>:
 8004258:	b507      	push	{r0, r1, r2, lr}
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	460a      	mov	r2, r1
 8004260:	4601      	mov	r1, r0
 8004262:	4803      	ldr	r0, [pc, #12]	; (8004270 <vsniprintf+0x18>)
 8004264:	6800      	ldr	r0, [r0, #0]
 8004266:	f7ff ffcb 	bl	8004200 <_vsniprintf_r>
 800426a:	b003      	add	sp, #12
 800426c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004270:	20000078 	.word	0x20000078

08004274 <__locale_ctype_ptr_l>:
 8004274:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004278:	4770      	bx	lr

0800427a <__ascii_mbtowc>:
 800427a:	b082      	sub	sp, #8
 800427c:	b901      	cbnz	r1, 8004280 <__ascii_mbtowc+0x6>
 800427e:	a901      	add	r1, sp, #4
 8004280:	b142      	cbz	r2, 8004294 <__ascii_mbtowc+0x1a>
 8004282:	b14b      	cbz	r3, 8004298 <__ascii_mbtowc+0x1e>
 8004284:	7813      	ldrb	r3, [r2, #0]
 8004286:	600b      	str	r3, [r1, #0]
 8004288:	7812      	ldrb	r2, [r2, #0]
 800428a:	1c10      	adds	r0, r2, #0
 800428c:	bf18      	it	ne
 800428e:	2001      	movne	r0, #1
 8004290:	b002      	add	sp, #8
 8004292:	4770      	bx	lr
 8004294:	4610      	mov	r0, r2
 8004296:	e7fb      	b.n	8004290 <__ascii_mbtowc+0x16>
 8004298:	f06f 0001 	mvn.w	r0, #1
 800429c:	e7f8      	b.n	8004290 <__ascii_mbtowc+0x16>

0800429e <__malloc_lock>:
 800429e:	4770      	bx	lr

080042a0 <__malloc_unlock>:
 80042a0:	4770      	bx	lr

080042a2 <__ssputs_r>:
 80042a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a6:	688e      	ldr	r6, [r1, #8]
 80042a8:	4682      	mov	sl, r0
 80042aa:	429e      	cmp	r6, r3
 80042ac:	460c      	mov	r4, r1
 80042ae:	4691      	mov	r9, r2
 80042b0:	4698      	mov	r8, r3
 80042b2:	d835      	bhi.n	8004320 <__ssputs_r+0x7e>
 80042b4:	898a      	ldrh	r2, [r1, #12]
 80042b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042ba:	d031      	beq.n	8004320 <__ssputs_r+0x7e>
 80042bc:	2302      	movs	r3, #2
 80042be:	6825      	ldr	r5, [r4, #0]
 80042c0:	6909      	ldr	r1, [r1, #16]
 80042c2:	1a6f      	subs	r7, r5, r1
 80042c4:	6965      	ldr	r5, [r4, #20]
 80042c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042ca:	fb95 f5f3 	sdiv	r5, r5, r3
 80042ce:	f108 0301 	add.w	r3, r8, #1
 80042d2:	443b      	add	r3, r7
 80042d4:	429d      	cmp	r5, r3
 80042d6:	bf38      	it	cc
 80042d8:	461d      	movcc	r5, r3
 80042da:	0553      	lsls	r3, r2, #21
 80042dc:	d531      	bpl.n	8004342 <__ssputs_r+0xa0>
 80042de:	4629      	mov	r1, r5
 80042e0:	f7ff fe00 	bl	8003ee4 <_malloc_r>
 80042e4:	4606      	mov	r6, r0
 80042e6:	b950      	cbnz	r0, 80042fe <__ssputs_r+0x5c>
 80042e8:	230c      	movs	r3, #12
 80042ea:	f8ca 3000 	str.w	r3, [sl]
 80042ee:	89a3      	ldrh	r3, [r4, #12]
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295
 80042f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042f8:	81a3      	strh	r3, [r4, #12]
 80042fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fe:	463a      	mov	r2, r7
 8004300:	6921      	ldr	r1, [r4, #16]
 8004302:	f000 fad0 	bl	80048a6 <memcpy>
 8004306:	89a3      	ldrh	r3, [r4, #12]
 8004308:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800430c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004310:	81a3      	strh	r3, [r4, #12]
 8004312:	6126      	str	r6, [r4, #16]
 8004314:	443e      	add	r6, r7
 8004316:	6026      	str	r6, [r4, #0]
 8004318:	4646      	mov	r6, r8
 800431a:	6165      	str	r5, [r4, #20]
 800431c:	1bed      	subs	r5, r5, r7
 800431e:	60a5      	str	r5, [r4, #8]
 8004320:	4546      	cmp	r6, r8
 8004322:	bf28      	it	cs
 8004324:	4646      	movcs	r6, r8
 8004326:	4649      	mov	r1, r9
 8004328:	4632      	mov	r2, r6
 800432a:	6820      	ldr	r0, [r4, #0]
 800432c:	f000 fac6 	bl	80048bc <memmove>
 8004330:	68a3      	ldr	r3, [r4, #8]
 8004332:	2000      	movs	r0, #0
 8004334:	1b9b      	subs	r3, r3, r6
 8004336:	60a3      	str	r3, [r4, #8]
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	441e      	add	r6, r3
 800433c:	6026      	str	r6, [r4, #0]
 800433e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004342:	462a      	mov	r2, r5
 8004344:	f000 fad4 	bl	80048f0 <_realloc_r>
 8004348:	4606      	mov	r6, r0
 800434a:	2800      	cmp	r0, #0
 800434c:	d1e1      	bne.n	8004312 <__ssputs_r+0x70>
 800434e:	6921      	ldr	r1, [r4, #16]
 8004350:	4650      	mov	r0, sl
 8004352:	f7ff fd7b 	bl	8003e4c <_free_r>
 8004356:	e7c7      	b.n	80042e8 <__ssputs_r+0x46>

08004358 <_svfiprintf_r>:
 8004358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435c:	b09d      	sub	sp, #116	; 0x74
 800435e:	9303      	str	r3, [sp, #12]
 8004360:	898b      	ldrh	r3, [r1, #12]
 8004362:	4680      	mov	r8, r0
 8004364:	061c      	lsls	r4, r3, #24
 8004366:	460d      	mov	r5, r1
 8004368:	4616      	mov	r6, r2
 800436a:	d50f      	bpl.n	800438c <_svfiprintf_r+0x34>
 800436c:	690b      	ldr	r3, [r1, #16]
 800436e:	b96b      	cbnz	r3, 800438c <_svfiprintf_r+0x34>
 8004370:	2140      	movs	r1, #64	; 0x40
 8004372:	f7ff fdb7 	bl	8003ee4 <_malloc_r>
 8004376:	6028      	str	r0, [r5, #0]
 8004378:	6128      	str	r0, [r5, #16]
 800437a:	b928      	cbnz	r0, 8004388 <_svfiprintf_r+0x30>
 800437c:	230c      	movs	r3, #12
 800437e:	f8c8 3000 	str.w	r3, [r8]
 8004382:	f04f 30ff 	mov.w	r0, #4294967295
 8004386:	e0c4      	b.n	8004512 <_svfiprintf_r+0x1ba>
 8004388:	2340      	movs	r3, #64	; 0x40
 800438a:	616b      	str	r3, [r5, #20]
 800438c:	2300      	movs	r3, #0
 800438e:	9309      	str	r3, [sp, #36]	; 0x24
 8004390:	2320      	movs	r3, #32
 8004392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004396:	2330      	movs	r3, #48	; 0x30
 8004398:	f04f 0b01 	mov.w	fp, #1
 800439c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043a0:	4637      	mov	r7, r6
 80043a2:	463c      	mov	r4, r7
 80043a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d13c      	bne.n	8004426 <_svfiprintf_r+0xce>
 80043ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80043b0:	d00b      	beq.n	80043ca <_svfiprintf_r+0x72>
 80043b2:	4653      	mov	r3, sl
 80043b4:	4632      	mov	r2, r6
 80043b6:	4629      	mov	r1, r5
 80043b8:	4640      	mov	r0, r8
 80043ba:	f7ff ff72 	bl	80042a2 <__ssputs_r>
 80043be:	3001      	adds	r0, #1
 80043c0:	f000 80a2 	beq.w	8004508 <_svfiprintf_r+0x1b0>
 80043c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043c6:	4453      	add	r3, sl
 80043c8:	9309      	str	r3, [sp, #36]	; 0x24
 80043ca:	783b      	ldrb	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 809b 	beq.w	8004508 <_svfiprintf_r+0x1b0>
 80043d2:	2300      	movs	r3, #0
 80043d4:	f04f 32ff 	mov.w	r2, #4294967295
 80043d8:	9304      	str	r3, [sp, #16]
 80043da:	9307      	str	r3, [sp, #28]
 80043dc:	9205      	str	r2, [sp, #20]
 80043de:	9306      	str	r3, [sp, #24]
 80043e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043e4:	931a      	str	r3, [sp, #104]	; 0x68
 80043e6:	2205      	movs	r2, #5
 80043e8:	7821      	ldrb	r1, [r4, #0]
 80043ea:	4850      	ldr	r0, [pc, #320]	; (800452c <_svfiprintf_r+0x1d4>)
 80043ec:	f000 fa4d 	bl	800488a <memchr>
 80043f0:	1c67      	adds	r7, r4, #1
 80043f2:	9b04      	ldr	r3, [sp, #16]
 80043f4:	b9d8      	cbnz	r0, 800442e <_svfiprintf_r+0xd6>
 80043f6:	06d9      	lsls	r1, r3, #27
 80043f8:	bf44      	itt	mi
 80043fa:	2220      	movmi	r2, #32
 80043fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004400:	071a      	lsls	r2, r3, #28
 8004402:	bf44      	itt	mi
 8004404:	222b      	movmi	r2, #43	; 0x2b
 8004406:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800440a:	7822      	ldrb	r2, [r4, #0]
 800440c:	2a2a      	cmp	r2, #42	; 0x2a
 800440e:	d016      	beq.n	800443e <_svfiprintf_r+0xe6>
 8004410:	2100      	movs	r1, #0
 8004412:	200a      	movs	r0, #10
 8004414:	9a07      	ldr	r2, [sp, #28]
 8004416:	4627      	mov	r7, r4
 8004418:	783b      	ldrb	r3, [r7, #0]
 800441a:	3401      	adds	r4, #1
 800441c:	3b30      	subs	r3, #48	; 0x30
 800441e:	2b09      	cmp	r3, #9
 8004420:	d950      	bls.n	80044c4 <_svfiprintf_r+0x16c>
 8004422:	b1c9      	cbz	r1, 8004458 <_svfiprintf_r+0x100>
 8004424:	e011      	b.n	800444a <_svfiprintf_r+0xf2>
 8004426:	2b25      	cmp	r3, #37	; 0x25
 8004428:	d0c0      	beq.n	80043ac <_svfiprintf_r+0x54>
 800442a:	4627      	mov	r7, r4
 800442c:	e7b9      	b.n	80043a2 <_svfiprintf_r+0x4a>
 800442e:	4a3f      	ldr	r2, [pc, #252]	; (800452c <_svfiprintf_r+0x1d4>)
 8004430:	463c      	mov	r4, r7
 8004432:	1a80      	subs	r0, r0, r2
 8004434:	fa0b f000 	lsl.w	r0, fp, r0
 8004438:	4318      	orrs	r0, r3
 800443a:	9004      	str	r0, [sp, #16]
 800443c:	e7d3      	b.n	80043e6 <_svfiprintf_r+0x8e>
 800443e:	9a03      	ldr	r2, [sp, #12]
 8004440:	1d11      	adds	r1, r2, #4
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	9103      	str	r1, [sp, #12]
 8004446:	2a00      	cmp	r2, #0
 8004448:	db01      	blt.n	800444e <_svfiprintf_r+0xf6>
 800444a:	9207      	str	r2, [sp, #28]
 800444c:	e004      	b.n	8004458 <_svfiprintf_r+0x100>
 800444e:	4252      	negs	r2, r2
 8004450:	f043 0302 	orr.w	r3, r3, #2
 8004454:	9207      	str	r2, [sp, #28]
 8004456:	9304      	str	r3, [sp, #16]
 8004458:	783b      	ldrb	r3, [r7, #0]
 800445a:	2b2e      	cmp	r3, #46	; 0x2e
 800445c:	d10d      	bne.n	800447a <_svfiprintf_r+0x122>
 800445e:	787b      	ldrb	r3, [r7, #1]
 8004460:	1c79      	adds	r1, r7, #1
 8004462:	2b2a      	cmp	r3, #42	; 0x2a
 8004464:	d132      	bne.n	80044cc <_svfiprintf_r+0x174>
 8004466:	9b03      	ldr	r3, [sp, #12]
 8004468:	3702      	adds	r7, #2
 800446a:	1d1a      	adds	r2, r3, #4
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	9203      	str	r2, [sp, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	bfb8      	it	lt
 8004474:	f04f 33ff 	movlt.w	r3, #4294967295
 8004478:	9305      	str	r3, [sp, #20]
 800447a:	4c2d      	ldr	r4, [pc, #180]	; (8004530 <_svfiprintf_r+0x1d8>)
 800447c:	2203      	movs	r2, #3
 800447e:	7839      	ldrb	r1, [r7, #0]
 8004480:	4620      	mov	r0, r4
 8004482:	f000 fa02 	bl	800488a <memchr>
 8004486:	b138      	cbz	r0, 8004498 <_svfiprintf_r+0x140>
 8004488:	2340      	movs	r3, #64	; 0x40
 800448a:	1b00      	subs	r0, r0, r4
 800448c:	fa03 f000 	lsl.w	r0, r3, r0
 8004490:	9b04      	ldr	r3, [sp, #16]
 8004492:	3701      	adds	r7, #1
 8004494:	4303      	orrs	r3, r0
 8004496:	9304      	str	r3, [sp, #16]
 8004498:	7839      	ldrb	r1, [r7, #0]
 800449a:	2206      	movs	r2, #6
 800449c:	4825      	ldr	r0, [pc, #148]	; (8004534 <_svfiprintf_r+0x1dc>)
 800449e:	1c7e      	adds	r6, r7, #1
 80044a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044a4:	f000 f9f1 	bl	800488a <memchr>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d035      	beq.n	8004518 <_svfiprintf_r+0x1c0>
 80044ac:	4b22      	ldr	r3, [pc, #136]	; (8004538 <_svfiprintf_r+0x1e0>)
 80044ae:	b9fb      	cbnz	r3, 80044f0 <_svfiprintf_r+0x198>
 80044b0:	9b03      	ldr	r3, [sp, #12]
 80044b2:	3307      	adds	r3, #7
 80044b4:	f023 0307 	bic.w	r3, r3, #7
 80044b8:	3308      	adds	r3, #8
 80044ba:	9303      	str	r3, [sp, #12]
 80044bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044be:	444b      	add	r3, r9
 80044c0:	9309      	str	r3, [sp, #36]	; 0x24
 80044c2:	e76d      	b.n	80043a0 <_svfiprintf_r+0x48>
 80044c4:	fb00 3202 	mla	r2, r0, r2, r3
 80044c8:	2101      	movs	r1, #1
 80044ca:	e7a4      	b.n	8004416 <_svfiprintf_r+0xbe>
 80044cc:	2300      	movs	r3, #0
 80044ce:	240a      	movs	r4, #10
 80044d0:	4618      	mov	r0, r3
 80044d2:	9305      	str	r3, [sp, #20]
 80044d4:	460f      	mov	r7, r1
 80044d6:	783a      	ldrb	r2, [r7, #0]
 80044d8:	3101      	adds	r1, #1
 80044da:	3a30      	subs	r2, #48	; 0x30
 80044dc:	2a09      	cmp	r2, #9
 80044de:	d903      	bls.n	80044e8 <_svfiprintf_r+0x190>
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0ca      	beq.n	800447a <_svfiprintf_r+0x122>
 80044e4:	9005      	str	r0, [sp, #20]
 80044e6:	e7c8      	b.n	800447a <_svfiprintf_r+0x122>
 80044e8:	fb04 2000 	mla	r0, r4, r0, r2
 80044ec:	2301      	movs	r3, #1
 80044ee:	e7f1      	b.n	80044d4 <_svfiprintf_r+0x17c>
 80044f0:	ab03      	add	r3, sp, #12
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	462a      	mov	r2, r5
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <_svfiprintf_r+0x1e4>)
 80044f8:	a904      	add	r1, sp, #16
 80044fa:	4640      	mov	r0, r8
 80044fc:	f3af 8000 	nop.w
 8004500:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004504:	4681      	mov	r9, r0
 8004506:	d1d9      	bne.n	80044bc <_svfiprintf_r+0x164>
 8004508:	89ab      	ldrh	r3, [r5, #12]
 800450a:	065b      	lsls	r3, r3, #25
 800450c:	f53f af39 	bmi.w	8004382 <_svfiprintf_r+0x2a>
 8004510:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004512:	b01d      	add	sp, #116	; 0x74
 8004514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004518:	ab03      	add	r3, sp, #12
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	462a      	mov	r2, r5
 800451e:	4b07      	ldr	r3, [pc, #28]	; (800453c <_svfiprintf_r+0x1e4>)
 8004520:	a904      	add	r1, sp, #16
 8004522:	4640      	mov	r0, r8
 8004524:	f000 f884 	bl	8004630 <_printf_i>
 8004528:	e7ea      	b.n	8004500 <_svfiprintf_r+0x1a8>
 800452a:	bf00      	nop
 800452c:	08004e8a 	.word	0x08004e8a
 8004530:	08004e90 	.word	0x08004e90
 8004534:	08004e94 	.word	0x08004e94
 8004538:	00000000 	.word	0x00000000
 800453c:	080042a3 	.word	0x080042a3

08004540 <_printf_common>:
 8004540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004544:	4691      	mov	r9, r2
 8004546:	461f      	mov	r7, r3
 8004548:	688a      	ldr	r2, [r1, #8]
 800454a:	690b      	ldr	r3, [r1, #16]
 800454c:	4606      	mov	r6, r0
 800454e:	4293      	cmp	r3, r2
 8004550:	bfb8      	it	lt
 8004552:	4613      	movlt	r3, r2
 8004554:	f8c9 3000 	str.w	r3, [r9]
 8004558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800455c:	460c      	mov	r4, r1
 800455e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004562:	b112      	cbz	r2, 800456a <_printf_common+0x2a>
 8004564:	3301      	adds	r3, #1
 8004566:	f8c9 3000 	str.w	r3, [r9]
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	0699      	lsls	r1, r3, #26
 800456e:	bf42      	ittt	mi
 8004570:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004574:	3302      	addmi	r3, #2
 8004576:	f8c9 3000 	strmi.w	r3, [r9]
 800457a:	6825      	ldr	r5, [r4, #0]
 800457c:	f015 0506 	ands.w	r5, r5, #6
 8004580:	d107      	bne.n	8004592 <_printf_common+0x52>
 8004582:	f104 0a19 	add.w	sl, r4, #25
 8004586:	68e3      	ldr	r3, [r4, #12]
 8004588:	f8d9 2000 	ldr.w	r2, [r9]
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	429d      	cmp	r5, r3
 8004590:	db2a      	blt.n	80045e8 <_printf_common+0xa8>
 8004592:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004596:	6822      	ldr	r2, [r4, #0]
 8004598:	3300      	adds	r3, #0
 800459a:	bf18      	it	ne
 800459c:	2301      	movne	r3, #1
 800459e:	0692      	lsls	r2, r2, #26
 80045a0:	d42f      	bmi.n	8004602 <_printf_common+0xc2>
 80045a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045a6:	4639      	mov	r1, r7
 80045a8:	4630      	mov	r0, r6
 80045aa:	47c0      	blx	r8
 80045ac:	3001      	adds	r0, #1
 80045ae:	d022      	beq.n	80045f6 <_printf_common+0xb6>
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	68e5      	ldr	r5, [r4, #12]
 80045b4:	f003 0306 	and.w	r3, r3, #6
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	bf18      	it	ne
 80045bc:	2500      	movne	r5, #0
 80045be:	f8d9 2000 	ldr.w	r2, [r9]
 80045c2:	f04f 0900 	mov.w	r9, #0
 80045c6:	bf08      	it	eq
 80045c8:	1aad      	subeq	r5, r5, r2
 80045ca:	68a3      	ldr	r3, [r4, #8]
 80045cc:	6922      	ldr	r2, [r4, #16]
 80045ce:	bf08      	it	eq
 80045d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045d4:	4293      	cmp	r3, r2
 80045d6:	bfc4      	itt	gt
 80045d8:	1a9b      	subgt	r3, r3, r2
 80045da:	18ed      	addgt	r5, r5, r3
 80045dc:	341a      	adds	r4, #26
 80045de:	454d      	cmp	r5, r9
 80045e0:	d11b      	bne.n	800461a <_printf_common+0xda>
 80045e2:	2000      	movs	r0, #0
 80045e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e8:	2301      	movs	r3, #1
 80045ea:	4652      	mov	r2, sl
 80045ec:	4639      	mov	r1, r7
 80045ee:	4630      	mov	r0, r6
 80045f0:	47c0      	blx	r8
 80045f2:	3001      	adds	r0, #1
 80045f4:	d103      	bne.n	80045fe <_printf_common+0xbe>
 80045f6:	f04f 30ff 	mov.w	r0, #4294967295
 80045fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045fe:	3501      	adds	r5, #1
 8004600:	e7c1      	b.n	8004586 <_printf_common+0x46>
 8004602:	2030      	movs	r0, #48	; 0x30
 8004604:	18e1      	adds	r1, r4, r3
 8004606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004610:	4422      	add	r2, r4
 8004612:	3302      	adds	r3, #2
 8004614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004618:	e7c3      	b.n	80045a2 <_printf_common+0x62>
 800461a:	2301      	movs	r3, #1
 800461c:	4622      	mov	r2, r4
 800461e:	4639      	mov	r1, r7
 8004620:	4630      	mov	r0, r6
 8004622:	47c0      	blx	r8
 8004624:	3001      	adds	r0, #1
 8004626:	d0e6      	beq.n	80045f6 <_printf_common+0xb6>
 8004628:	f109 0901 	add.w	r9, r9, #1
 800462c:	e7d7      	b.n	80045de <_printf_common+0x9e>
	...

08004630 <_printf_i>:
 8004630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004634:	4617      	mov	r7, r2
 8004636:	7e0a      	ldrb	r2, [r1, #24]
 8004638:	b085      	sub	sp, #20
 800463a:	2a6e      	cmp	r2, #110	; 0x6e
 800463c:	4698      	mov	r8, r3
 800463e:	4606      	mov	r6, r0
 8004640:	460c      	mov	r4, r1
 8004642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004644:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004648:	f000 80bc 	beq.w	80047c4 <_printf_i+0x194>
 800464c:	d81a      	bhi.n	8004684 <_printf_i+0x54>
 800464e:	2a63      	cmp	r2, #99	; 0x63
 8004650:	d02e      	beq.n	80046b0 <_printf_i+0x80>
 8004652:	d80a      	bhi.n	800466a <_printf_i+0x3a>
 8004654:	2a00      	cmp	r2, #0
 8004656:	f000 80c8 	beq.w	80047ea <_printf_i+0x1ba>
 800465a:	2a58      	cmp	r2, #88	; 0x58
 800465c:	f000 808a 	beq.w	8004774 <_printf_i+0x144>
 8004660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004664:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004668:	e02a      	b.n	80046c0 <_printf_i+0x90>
 800466a:	2a64      	cmp	r2, #100	; 0x64
 800466c:	d001      	beq.n	8004672 <_printf_i+0x42>
 800466e:	2a69      	cmp	r2, #105	; 0x69
 8004670:	d1f6      	bne.n	8004660 <_printf_i+0x30>
 8004672:	6821      	ldr	r1, [r4, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	f011 0f80 	tst.w	r1, #128	; 0x80
 800467a:	d023      	beq.n	80046c4 <_printf_i+0x94>
 800467c:	1d11      	adds	r1, r2, #4
 800467e:	6019      	str	r1, [r3, #0]
 8004680:	6813      	ldr	r3, [r2, #0]
 8004682:	e027      	b.n	80046d4 <_printf_i+0xa4>
 8004684:	2a73      	cmp	r2, #115	; 0x73
 8004686:	f000 80b4 	beq.w	80047f2 <_printf_i+0x1c2>
 800468a:	d808      	bhi.n	800469e <_printf_i+0x6e>
 800468c:	2a6f      	cmp	r2, #111	; 0x6f
 800468e:	d02a      	beq.n	80046e6 <_printf_i+0xb6>
 8004690:	2a70      	cmp	r2, #112	; 0x70
 8004692:	d1e5      	bne.n	8004660 <_printf_i+0x30>
 8004694:	680a      	ldr	r2, [r1, #0]
 8004696:	f042 0220 	orr.w	r2, r2, #32
 800469a:	600a      	str	r2, [r1, #0]
 800469c:	e003      	b.n	80046a6 <_printf_i+0x76>
 800469e:	2a75      	cmp	r2, #117	; 0x75
 80046a0:	d021      	beq.n	80046e6 <_printf_i+0xb6>
 80046a2:	2a78      	cmp	r2, #120	; 0x78
 80046a4:	d1dc      	bne.n	8004660 <_printf_i+0x30>
 80046a6:	2278      	movs	r2, #120	; 0x78
 80046a8:	496f      	ldr	r1, [pc, #444]	; (8004868 <_printf_i+0x238>)
 80046aa:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80046ae:	e064      	b.n	800477a <_printf_i+0x14a>
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80046b6:	1d11      	adds	r1, r2, #4
 80046b8:	6019      	str	r1, [r3, #0]
 80046ba:	6813      	ldr	r3, [r2, #0]
 80046bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0a3      	b.n	800480c <_printf_i+0x1dc>
 80046c4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80046c8:	f102 0104 	add.w	r1, r2, #4
 80046cc:	6019      	str	r1, [r3, #0]
 80046ce:	d0d7      	beq.n	8004680 <_printf_i+0x50>
 80046d0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	da03      	bge.n	80046e0 <_printf_i+0xb0>
 80046d8:	222d      	movs	r2, #45	; 0x2d
 80046da:	425b      	negs	r3, r3
 80046dc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80046e0:	4962      	ldr	r1, [pc, #392]	; (800486c <_printf_i+0x23c>)
 80046e2:	220a      	movs	r2, #10
 80046e4:	e017      	b.n	8004716 <_printf_i+0xe6>
 80046e6:	6820      	ldr	r0, [r4, #0]
 80046e8:	6819      	ldr	r1, [r3, #0]
 80046ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 80046ee:	d003      	beq.n	80046f8 <_printf_i+0xc8>
 80046f0:	1d08      	adds	r0, r1, #4
 80046f2:	6018      	str	r0, [r3, #0]
 80046f4:	680b      	ldr	r3, [r1, #0]
 80046f6:	e006      	b.n	8004706 <_printf_i+0xd6>
 80046f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046fc:	f101 0004 	add.w	r0, r1, #4
 8004700:	6018      	str	r0, [r3, #0]
 8004702:	d0f7      	beq.n	80046f4 <_printf_i+0xc4>
 8004704:	880b      	ldrh	r3, [r1, #0]
 8004706:	2a6f      	cmp	r2, #111	; 0x6f
 8004708:	bf14      	ite	ne
 800470a:	220a      	movne	r2, #10
 800470c:	2208      	moveq	r2, #8
 800470e:	4957      	ldr	r1, [pc, #348]	; (800486c <_printf_i+0x23c>)
 8004710:	2000      	movs	r0, #0
 8004712:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004716:	6865      	ldr	r5, [r4, #4]
 8004718:	2d00      	cmp	r5, #0
 800471a:	60a5      	str	r5, [r4, #8]
 800471c:	f2c0 809c 	blt.w	8004858 <_printf_i+0x228>
 8004720:	6820      	ldr	r0, [r4, #0]
 8004722:	f020 0004 	bic.w	r0, r0, #4
 8004726:	6020      	str	r0, [r4, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d13f      	bne.n	80047ac <_printf_i+0x17c>
 800472c:	2d00      	cmp	r5, #0
 800472e:	f040 8095 	bne.w	800485c <_printf_i+0x22c>
 8004732:	4675      	mov	r5, lr
 8004734:	2a08      	cmp	r2, #8
 8004736:	d10b      	bne.n	8004750 <_printf_i+0x120>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	07da      	lsls	r2, r3, #31
 800473c:	d508      	bpl.n	8004750 <_printf_i+0x120>
 800473e:	6923      	ldr	r3, [r4, #16]
 8004740:	6862      	ldr	r2, [r4, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	bfde      	ittt	le
 8004746:	2330      	movle	r3, #48	; 0x30
 8004748:	f805 3c01 	strble.w	r3, [r5, #-1]
 800474c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004750:	ebae 0305 	sub.w	r3, lr, r5
 8004754:	6123      	str	r3, [r4, #16]
 8004756:	f8cd 8000 	str.w	r8, [sp]
 800475a:	463b      	mov	r3, r7
 800475c:	aa03      	add	r2, sp, #12
 800475e:	4621      	mov	r1, r4
 8004760:	4630      	mov	r0, r6
 8004762:	f7ff feed 	bl	8004540 <_printf_common>
 8004766:	3001      	adds	r0, #1
 8004768:	d155      	bne.n	8004816 <_printf_i+0x1e6>
 800476a:	f04f 30ff 	mov.w	r0, #4294967295
 800476e:	b005      	add	sp, #20
 8004770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004774:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004778:	493c      	ldr	r1, [pc, #240]	; (800486c <_printf_i+0x23c>)
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004782:	f100 0504 	add.w	r5, r0, #4
 8004786:	601d      	str	r5, [r3, #0]
 8004788:	d001      	beq.n	800478e <_printf_i+0x15e>
 800478a:	6803      	ldr	r3, [r0, #0]
 800478c:	e002      	b.n	8004794 <_printf_i+0x164>
 800478e:	0655      	lsls	r5, r2, #25
 8004790:	d5fb      	bpl.n	800478a <_printf_i+0x15a>
 8004792:	8803      	ldrh	r3, [r0, #0]
 8004794:	07d0      	lsls	r0, r2, #31
 8004796:	bf44      	itt	mi
 8004798:	f042 0220 	orrmi.w	r2, r2, #32
 800479c:	6022      	strmi	r2, [r4, #0]
 800479e:	b91b      	cbnz	r3, 80047a8 <_printf_i+0x178>
 80047a0:	6822      	ldr	r2, [r4, #0]
 80047a2:	f022 0220 	bic.w	r2, r2, #32
 80047a6:	6022      	str	r2, [r4, #0]
 80047a8:	2210      	movs	r2, #16
 80047aa:	e7b1      	b.n	8004710 <_printf_i+0xe0>
 80047ac:	4675      	mov	r5, lr
 80047ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80047b2:	fb02 3310 	mls	r3, r2, r0, r3
 80047b6:	5ccb      	ldrb	r3, [r1, r3]
 80047b8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80047bc:	4603      	mov	r3, r0
 80047be:	2800      	cmp	r0, #0
 80047c0:	d1f5      	bne.n	80047ae <_printf_i+0x17e>
 80047c2:	e7b7      	b.n	8004734 <_printf_i+0x104>
 80047c4:	6808      	ldr	r0, [r1, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80047cc:	6949      	ldr	r1, [r1, #20]
 80047ce:	d004      	beq.n	80047da <_printf_i+0x1aa>
 80047d0:	1d10      	adds	r0, r2, #4
 80047d2:	6018      	str	r0, [r3, #0]
 80047d4:	6813      	ldr	r3, [r2, #0]
 80047d6:	6019      	str	r1, [r3, #0]
 80047d8:	e007      	b.n	80047ea <_printf_i+0x1ba>
 80047da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047de:	f102 0004 	add.w	r0, r2, #4
 80047e2:	6018      	str	r0, [r3, #0]
 80047e4:	6813      	ldr	r3, [r2, #0]
 80047e6:	d0f6      	beq.n	80047d6 <_printf_i+0x1a6>
 80047e8:	8019      	strh	r1, [r3, #0]
 80047ea:	2300      	movs	r3, #0
 80047ec:	4675      	mov	r5, lr
 80047ee:	6123      	str	r3, [r4, #16]
 80047f0:	e7b1      	b.n	8004756 <_printf_i+0x126>
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	1d11      	adds	r1, r2, #4
 80047f6:	6019      	str	r1, [r3, #0]
 80047f8:	6815      	ldr	r5, [r2, #0]
 80047fa:	2100      	movs	r1, #0
 80047fc:	6862      	ldr	r2, [r4, #4]
 80047fe:	4628      	mov	r0, r5
 8004800:	f000 f843 	bl	800488a <memchr>
 8004804:	b108      	cbz	r0, 800480a <_printf_i+0x1da>
 8004806:	1b40      	subs	r0, r0, r5
 8004808:	6060      	str	r0, [r4, #4]
 800480a:	6863      	ldr	r3, [r4, #4]
 800480c:	6123      	str	r3, [r4, #16]
 800480e:	2300      	movs	r3, #0
 8004810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004814:	e79f      	b.n	8004756 <_printf_i+0x126>
 8004816:	6923      	ldr	r3, [r4, #16]
 8004818:	462a      	mov	r2, r5
 800481a:	4639      	mov	r1, r7
 800481c:	4630      	mov	r0, r6
 800481e:	47c0      	blx	r8
 8004820:	3001      	adds	r0, #1
 8004822:	d0a2      	beq.n	800476a <_printf_i+0x13a>
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	079b      	lsls	r3, r3, #30
 8004828:	d507      	bpl.n	800483a <_printf_i+0x20a>
 800482a:	2500      	movs	r5, #0
 800482c:	f104 0919 	add.w	r9, r4, #25
 8004830:	68e3      	ldr	r3, [r4, #12]
 8004832:	9a03      	ldr	r2, [sp, #12]
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	429d      	cmp	r5, r3
 8004838:	db05      	blt.n	8004846 <_printf_i+0x216>
 800483a:	68e0      	ldr	r0, [r4, #12]
 800483c:	9b03      	ldr	r3, [sp, #12]
 800483e:	4298      	cmp	r0, r3
 8004840:	bfb8      	it	lt
 8004842:	4618      	movlt	r0, r3
 8004844:	e793      	b.n	800476e <_printf_i+0x13e>
 8004846:	2301      	movs	r3, #1
 8004848:	464a      	mov	r2, r9
 800484a:	4639      	mov	r1, r7
 800484c:	4630      	mov	r0, r6
 800484e:	47c0      	blx	r8
 8004850:	3001      	adds	r0, #1
 8004852:	d08a      	beq.n	800476a <_printf_i+0x13a>
 8004854:	3501      	adds	r5, #1
 8004856:	e7eb      	b.n	8004830 <_printf_i+0x200>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1a7      	bne.n	80047ac <_printf_i+0x17c>
 800485c:	780b      	ldrb	r3, [r1, #0]
 800485e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004862:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004866:	e765      	b.n	8004734 <_printf_i+0x104>
 8004868:	08004eac 	.word	0x08004eac
 800486c:	08004e9b 	.word	0x08004e9b

08004870 <__ascii_wctomb>:
 8004870:	b149      	cbz	r1, 8004886 <__ascii_wctomb+0x16>
 8004872:	2aff      	cmp	r2, #255	; 0xff
 8004874:	bf8b      	itete	hi
 8004876:	238a      	movhi	r3, #138	; 0x8a
 8004878:	700a      	strbls	r2, [r1, #0]
 800487a:	6003      	strhi	r3, [r0, #0]
 800487c:	2001      	movls	r0, #1
 800487e:	bf88      	it	hi
 8004880:	f04f 30ff 	movhi.w	r0, #4294967295
 8004884:	4770      	bx	lr
 8004886:	4608      	mov	r0, r1
 8004888:	4770      	bx	lr

0800488a <memchr>:
 800488a:	b510      	push	{r4, lr}
 800488c:	b2c9      	uxtb	r1, r1
 800488e:	4402      	add	r2, r0
 8004890:	4290      	cmp	r0, r2
 8004892:	4603      	mov	r3, r0
 8004894:	d101      	bne.n	800489a <memchr+0x10>
 8004896:	2000      	movs	r0, #0
 8004898:	bd10      	pop	{r4, pc}
 800489a:	781c      	ldrb	r4, [r3, #0]
 800489c:	3001      	adds	r0, #1
 800489e:	428c      	cmp	r4, r1
 80048a0:	d1f6      	bne.n	8004890 <memchr+0x6>
 80048a2:	4618      	mov	r0, r3
 80048a4:	bd10      	pop	{r4, pc}

080048a6 <memcpy>:
 80048a6:	b510      	push	{r4, lr}
 80048a8:	1e43      	subs	r3, r0, #1
 80048aa:	440a      	add	r2, r1
 80048ac:	4291      	cmp	r1, r2
 80048ae:	d100      	bne.n	80048b2 <memcpy+0xc>
 80048b0:	bd10      	pop	{r4, pc}
 80048b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ba:	e7f7      	b.n	80048ac <memcpy+0x6>

080048bc <memmove>:
 80048bc:	4288      	cmp	r0, r1
 80048be:	b510      	push	{r4, lr}
 80048c0:	eb01 0302 	add.w	r3, r1, r2
 80048c4:	d803      	bhi.n	80048ce <memmove+0x12>
 80048c6:	1e42      	subs	r2, r0, #1
 80048c8:	4299      	cmp	r1, r3
 80048ca:	d10c      	bne.n	80048e6 <memmove+0x2a>
 80048cc:	bd10      	pop	{r4, pc}
 80048ce:	4298      	cmp	r0, r3
 80048d0:	d2f9      	bcs.n	80048c6 <memmove+0xa>
 80048d2:	1881      	adds	r1, r0, r2
 80048d4:	1ad2      	subs	r2, r2, r3
 80048d6:	42d3      	cmn	r3, r2
 80048d8:	d100      	bne.n	80048dc <memmove+0x20>
 80048da:	bd10      	pop	{r4, pc}
 80048dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80048e4:	e7f7      	b.n	80048d6 <memmove+0x1a>
 80048e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 80048ee:	e7eb      	b.n	80048c8 <memmove+0xc>

080048f0 <_realloc_r>:
 80048f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f2:	4607      	mov	r7, r0
 80048f4:	4614      	mov	r4, r2
 80048f6:	460e      	mov	r6, r1
 80048f8:	b921      	cbnz	r1, 8004904 <_realloc_r+0x14>
 80048fa:	4611      	mov	r1, r2
 80048fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004900:	f7ff baf0 	b.w	8003ee4 <_malloc_r>
 8004904:	b922      	cbnz	r2, 8004910 <_realloc_r+0x20>
 8004906:	f7ff faa1 	bl	8003e4c <_free_r>
 800490a:	4625      	mov	r5, r4
 800490c:	4628      	mov	r0, r5
 800490e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004910:	f000 f814 	bl	800493c <_malloc_usable_size_r>
 8004914:	4284      	cmp	r4, r0
 8004916:	d90f      	bls.n	8004938 <_realloc_r+0x48>
 8004918:	4621      	mov	r1, r4
 800491a:	4638      	mov	r0, r7
 800491c:	f7ff fae2 	bl	8003ee4 <_malloc_r>
 8004920:	4605      	mov	r5, r0
 8004922:	2800      	cmp	r0, #0
 8004924:	d0f2      	beq.n	800490c <_realloc_r+0x1c>
 8004926:	4631      	mov	r1, r6
 8004928:	4622      	mov	r2, r4
 800492a:	f7ff ffbc 	bl	80048a6 <memcpy>
 800492e:	4631      	mov	r1, r6
 8004930:	4638      	mov	r0, r7
 8004932:	f7ff fa8b 	bl	8003e4c <_free_r>
 8004936:	e7e9      	b.n	800490c <_realloc_r+0x1c>
 8004938:	4635      	mov	r5, r6
 800493a:	e7e7      	b.n	800490c <_realloc_r+0x1c>

0800493c <_malloc_usable_size_r>:
 800493c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004940:	2800      	cmp	r0, #0
 8004942:	f1a0 0004 	sub.w	r0, r0, #4
 8004946:	bfbc      	itt	lt
 8004948:	580b      	ldrlt	r3, [r1, r0]
 800494a:	18c0      	addlt	r0, r0, r3
 800494c:	4770      	bx	lr
	...

08004950 <_init>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr

0800495c <_fini>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr
