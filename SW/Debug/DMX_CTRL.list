
DMX_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004678  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000248  20000000  08004db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000984  20000248  08004ff8  00020248  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000bcc  08004ff8  00020bcc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d006  00000000  00000000  00020271  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004908  00000000  00000000  0003d277  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a6dc  00000000  00000000  00041b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f98  00000000  00000000  0004c260  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000016c0  00000000  00000000  0004d1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008ad0  00000000  00000000  0004e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000053ce  00000000  00000000  00057388  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005c756  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000030b4  00000000  00000000  0005c7d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000248 	.word	0x20000248
 8000128:	00000000 	.word	0x00000000
 800012c:	0800476c 	.word	0x0800476c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000024c 	.word	0x2000024c
 8000148:	0800476c 	.word	0x0800476c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f9a6 	bl	80004c4 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 f968 	bl	800045c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000074 	.word	0x20000074
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f941 	bl	8000438 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f003 faba 	bl	8003734 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200007ac 	.word	0x200007ac
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200007ac 	.word	0x200007ac

080001ec <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80001ec:	2300      	movs	r3, #0
{ 
 80001ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80001f0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80001f2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d074      	beq.n	80002e4 <HAL_ADC_ConfigChannel+0xf8>
 80001fa:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80001fc:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80001fe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000202:	2d06      	cmp	r5, #6
 8000204:	6802      	ldr	r2, [r0, #0]
 8000206:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800020a:	680c      	ldr	r4, [r1, #0]
 800020c:	d825      	bhi.n	800025a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800020e:	442b      	add	r3, r5
 8000210:	251f      	movs	r5, #31
 8000212:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000214:	3b05      	subs	r3, #5
 8000216:	409d      	lsls	r5, r3
 8000218:	ea26 0505 	bic.w	r5, r6, r5
 800021c:	fa04 f303 	lsl.w	r3, r4, r3
 8000220:	432b      	orrs	r3, r5
 8000222:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000224:	2c09      	cmp	r4, #9
 8000226:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800022a:	688d      	ldr	r5, [r1, #8]
 800022c:	d92f      	bls.n	800028e <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800022e:	2607      	movs	r6, #7
 8000230:	4423      	add	r3, r4
 8000232:	68d1      	ldr	r1, [r2, #12]
 8000234:	3b1e      	subs	r3, #30
 8000236:	409e      	lsls	r6, r3
 8000238:	ea21 0106 	bic.w	r1, r1, r6
 800023c:	fa05 f303 	lsl.w	r3, r5, r3
 8000240:	430b      	orrs	r3, r1
 8000242:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000244:	f1a4 0310 	sub.w	r3, r4, #16
 8000248:	2b01      	cmp	r3, #1
 800024a:	d92b      	bls.n	80002a4 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800024c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800024e:	2200      	movs	r2, #0
 8000250:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000254:	4618      	mov	r0, r3
 8000256:	b002      	add	sp, #8
 8000258:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800025a:	2d0c      	cmp	r5, #12
 800025c:	d80b      	bhi.n	8000276 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800025e:	442b      	add	r3, r5
 8000260:	251f      	movs	r5, #31
 8000262:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000264:	3b23      	subs	r3, #35	; 0x23
 8000266:	409d      	lsls	r5, r3
 8000268:	ea26 0505 	bic.w	r5, r6, r5
 800026c:	fa04 f303 	lsl.w	r3, r4, r3
 8000270:	432b      	orrs	r3, r5
 8000272:	6313      	str	r3, [r2, #48]	; 0x30
 8000274:	e7d6      	b.n	8000224 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000276:	442b      	add	r3, r5
 8000278:	251f      	movs	r5, #31
 800027a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800027c:	3b41      	subs	r3, #65	; 0x41
 800027e:	409d      	lsls	r5, r3
 8000280:	ea26 0505 	bic.w	r5, r6, r5
 8000284:	fa04 f303 	lsl.w	r3, r4, r3
 8000288:	432b      	orrs	r3, r5
 800028a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800028c:	e7ca      	b.n	8000224 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800028e:	2607      	movs	r6, #7
 8000290:	6911      	ldr	r1, [r2, #16]
 8000292:	4423      	add	r3, r4
 8000294:	409e      	lsls	r6, r3
 8000296:	ea21 0106 	bic.w	r1, r1, r6
 800029a:	fa05 f303 	lsl.w	r3, r5, r3
 800029e:	430b      	orrs	r3, r1
 80002a0:	6113      	str	r3, [r2, #16]
 80002a2:	e7cf      	b.n	8000244 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80002a4:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <HAL_ADC_ConfigChannel+0xfc>)
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d116      	bne.n	80002d8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80002aa:	6893      	ldr	r3, [r2, #8]
 80002ac:	021b      	lsls	r3, r3, #8
 80002ae:	d4cd      	bmi.n	800024c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002b0:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002b2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002b8:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002ba:	d1c7      	bne.n	800024c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80002bc:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <HAL_ADC_ConfigChannel+0x100>)
 80002be:	4a0c      	ldr	r2, [pc, #48]	; (80002f0 <HAL_ADC_ConfigChannel+0x104>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80002c6:	230a      	movs	r3, #10
 80002c8:	4353      	muls	r3, r2
            wait_loop_index--;
 80002ca:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002cc:	9b01      	ldr	r3, [sp, #4]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d0bc      	beq.n	800024c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80002d2:	9b01      	ldr	r3, [sp, #4]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	e7f8      	b.n	80002ca <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002e0:	2301      	movs	r3, #1
 80002e2:	e7b4      	b.n	800024e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80002e4:	2302      	movs	r3, #2
 80002e6:	e7b5      	b.n	8000254 <HAL_ADC_ConfigChannel+0x68>
 80002e8:	40012400 	.word	0x40012400
 80002ec:	20000074 	.word	0x20000074
 80002f0:	000f4240 	.word	0x000f4240

080002f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80002f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002f6:	6803      	ldr	r3, [r0, #0]
{
 80002f8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002fa:	689a      	ldr	r2, [r3, #8]
 80002fc:	07d2      	lsls	r2, r2, #31
 80002fe:	d401      	bmi.n	8000304 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000300:	2000      	movs	r0, #0
 8000302:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000304:	689a      	ldr	r2, [r3, #8]
 8000306:	f022 0201 	bic.w	r2, r2, #1
 800030a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800030c:	f7ff ff68 	bl	80001e0 <HAL_GetTick>
 8000310:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000312:	6823      	ldr	r3, [r4, #0]
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	07db      	lsls	r3, r3, #31
 8000318:	d5f2      	bpl.n	8000300 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800031a:	f7ff ff61 	bl	80001e0 <HAL_GetTick>
 800031e:	1b40      	subs	r0, r0, r5
 8000320:	2802      	cmp	r0, #2
 8000322:	d9f6      	bls.n	8000312 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000324:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000326:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000328:	f043 0310 	orr.w	r3, r3, #16
 800032c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800032e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000336:	bd38      	pop	{r3, r4, r5, pc}

08000338 <HAL_ADC_Init>:
{
 8000338:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800033a:	4604      	mov	r4, r0
 800033c:	2800      	cmp	r0, #0
 800033e:	d071      	beq.n	8000424 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000340:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000342:	b923      	cbnz	r3, 800034e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000344:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000346:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800034a:	f003 fa15 	bl	8003778 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800034e:	4620      	mov	r0, r4
 8000350:	f7ff ffd0 	bl	80002f4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000354:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000356:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800035a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800035c:	d164      	bne.n	8000428 <HAL_ADC_Init+0xf0>
 800035e:	2800      	cmp	r0, #0
 8000360:	d162      	bne.n	8000428 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000362:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000364:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000368:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800036a:	f023 0302 	bic.w	r3, r3, #2
 800036e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000372:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000374:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000376:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000378:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800037a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800037e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000382:	d038      	beq.n	80003f6 <HAL_ADC_Init+0xbe>
 8000384:	2901      	cmp	r1, #1
 8000386:	bf14      	ite	ne
 8000388:	4606      	movne	r6, r0
 800038a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800038e:	7d25      	ldrb	r5, [r4, #20]
 8000390:	2d01      	cmp	r5, #1
 8000392:	d107      	bne.n	80003a4 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000394:	2b00      	cmp	r3, #0
 8000396:	d130      	bne.n	80003fa <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000398:	69a3      	ldr	r3, [r4, #24]
 800039a:	3b01      	subs	r3, #1
 800039c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80003a0:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80003a4:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003a6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80003aa:	685d      	ldr	r5, [r3, #4]
 80003ac:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80003b0:	ea45 0506 	orr.w	r5, r5, r6
 80003b4:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80003b6:	689e      	ldr	r6, [r3, #8]
 80003b8:	4d1d      	ldr	r5, [pc, #116]	; (8000430 <HAL_ADC_Init+0xf8>)
 80003ba:	ea05 0506 	and.w	r5, r5, r6
 80003be:	ea45 0502 	orr.w	r5, r5, r2
 80003c2:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003c4:	d001      	beq.n	80003ca <HAL_ADC_Init+0x92>
 80003c6:	2901      	cmp	r1, #1
 80003c8:	d120      	bne.n	800040c <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80003ca:	6921      	ldr	r1, [r4, #16]
 80003cc:	3901      	subs	r1, #1
 80003ce:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80003d0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80003d2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80003d6:	4329      	orrs	r1, r5
 80003d8:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003da:	6899      	ldr	r1, [r3, #8]
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <HAL_ADC_Init+0xfc>)
 80003de:	400b      	ands	r3, r1
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d115      	bne.n	8000410 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80003e4:	2300      	movs	r3, #0
 80003e6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80003e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003ea:	f023 0303 	bic.w	r3, r3, #3
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80003f6:	460e      	mov	r6, r1
 80003f8:	e7c9      	b.n	800038e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003fc:	f043 0320 	orr.w	r3, r3, #32
 8000400:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000402:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	62e3      	str	r3, [r4, #44]	; 0x2c
 800040a:	e7cb      	b.n	80003a4 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 800040c:	2100      	movs	r1, #0
 800040e:	e7df      	b.n	80003d0 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000410:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000412:	f023 0312 	bic.w	r3, r3, #18
 8000416:	f043 0310 	orr.w	r3, r3, #16
 800041a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800041c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000424:	2001      	movs	r0, #1
}
 8000426:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000428:	f043 0310 	orr.w	r3, r3, #16
 800042c:	62a3      	str	r3, [r4, #40]	; 0x28
 800042e:	e7f9      	b.n	8000424 <HAL_ADC_Init+0xec>
 8000430:	ffe1f7fd 	.word	0xffe1f7fd
 8000434:	ff1f0efe 	.word	0xff1f0efe

08000438 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000438:	4a07      	ldr	r2, [pc, #28]	; (8000458 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800043a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800043c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800043e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000442:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000446:	041b      	lsls	r3, r3, #16
 8000448:	0c1b      	lsrs	r3, r3, #16
 800044a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800044e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000452:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000454:	60d3      	str	r3, [r2, #12]
 8000456:	4770      	bx	lr
 8000458:	e000ed00 	.word	0xe000ed00

0800045c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800045c:	4b17      	ldr	r3, [pc, #92]	; (80004bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	68dc      	ldr	r4, [r3, #12]
 8000462:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000466:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800046a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800046c:	2b04      	cmp	r3, #4
 800046e:	bf28      	it	cs
 8000470:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000472:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000474:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000478:	bf98      	it	ls
 800047a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800047c:	fa05 f303 	lsl.w	r3, r5, r3
 8000480:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000484:	bf88      	it	hi
 8000486:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000488:	4019      	ands	r1, r3
 800048a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800048c:	fa05 f404 	lsl.w	r4, r5, r4
 8000490:	3c01      	subs	r4, #1
 8000492:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000494:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000496:	ea42 0201 	orr.w	r2, r2, r1
 800049a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800049e:	bfa9      	itett	ge
 80004a0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a4:	4b06      	ldrlt	r3, [pc, #24]	; (80004c0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a6:	b2d2      	uxtbge	r2, r2
 80004a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ac:	bfbb      	ittet	lt
 80004ae:	f000 000f 	andlt.w	r0, r0, #15
 80004b2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b8:	541a      	strblt	r2, [r3, r0]
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	e000ed00 	.word	0xe000ed00
 80004c0:	e000ed14 	.word	0xe000ed14

080004c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004c4:	3801      	subs	r0, #1
 80004c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004ca:	d20a      	bcs.n	80004e2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004cc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d0:	4a06      	ldr	r2, [pc, #24]	; (80004ec <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004d2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004da:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004dc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004e2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	e000e010 	.word	0xe000e010
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80004f0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80004f4:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d003      	beq.n	8000502 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80004fa:	2304      	movs	r3, #4
 80004fc:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000502:	6803      	ldr	r3, [r0, #0]
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f022 020e 	bic.w	r2, r2, #14
 800050a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f022 0201 	bic.w	r2, r2, #1
 8000512:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000514:	4a18      	ldr	r2, [pc, #96]	; (8000578 <HAL_DMA_Abort_IT+0x88>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d01f      	beq.n	800055a <HAL_DMA_Abort_IT+0x6a>
 800051a:	3214      	adds	r2, #20
 800051c:	4293      	cmp	r3, r2
 800051e:	d01e      	beq.n	800055e <HAL_DMA_Abort_IT+0x6e>
 8000520:	3214      	adds	r2, #20
 8000522:	4293      	cmp	r3, r2
 8000524:	d01d      	beq.n	8000562 <HAL_DMA_Abort_IT+0x72>
 8000526:	3214      	adds	r2, #20
 8000528:	4293      	cmp	r3, r2
 800052a:	d01d      	beq.n	8000568 <HAL_DMA_Abort_IT+0x78>
 800052c:	3214      	adds	r2, #20
 800052e:	4293      	cmp	r3, r2
 8000530:	d01d      	beq.n	800056e <HAL_DMA_Abort_IT+0x7e>
 8000532:	3214      	adds	r2, #20
 8000534:	4293      	cmp	r3, r2
 8000536:	bf0c      	ite	eq
 8000538:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800053c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000540:	4a0e      	ldr	r2, [pc, #56]	; (800057c <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000542:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000544:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000546:	2301      	movs	r3, #1
 8000548:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800054c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800054e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000552:	b17b      	cbz	r3, 8000574 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000554:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000556:	4620      	mov	r0, r4
 8000558:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800055a:	2301      	movs	r3, #1
 800055c:	e7f0      	b.n	8000540 <HAL_DMA_Abort_IT+0x50>
 800055e:	2310      	movs	r3, #16
 8000560:	e7ee      	b.n	8000540 <HAL_DMA_Abort_IT+0x50>
 8000562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000566:	e7eb      	b.n	8000540 <HAL_DMA_Abort_IT+0x50>
 8000568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800056c:	e7e8      	b.n	8000540 <HAL_DMA_Abort_IT+0x50>
 800056e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000572:	e7e5      	b.n	8000540 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000574:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000576:	bd10      	pop	{r4, pc}
 8000578:	40020008 	.word	0x40020008
 800057c:	40020000 	.word	0x40020000

08000580 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000584:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000586:	4626      	mov	r6, r4
 8000588:	4b66      	ldr	r3, [pc, #408]	; (8000724 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800058a:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000734 <HAL_GPIO_Init+0x1b4>
 800058e:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000738 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000592:	680a      	ldr	r2, [r1, #0]
 8000594:	fa32 f506 	lsrs.w	r5, r2, r6
 8000598:	d102      	bne.n	80005a0 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800059a:	b003      	add	sp, #12
 800059c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80005a0:	f04f 0801 	mov.w	r8, #1
 80005a4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005a8:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80005ac:	4590      	cmp	r8, r2
 80005ae:	d17f      	bne.n	80006b0 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80005b0:	684d      	ldr	r5, [r1, #4]
 80005b2:	2d12      	cmp	r5, #18
 80005b4:	f000 80aa 	beq.w	800070c <HAL_GPIO_Init+0x18c>
 80005b8:	f200 8083 	bhi.w	80006c2 <HAL_GPIO_Init+0x142>
 80005bc:	2d02      	cmp	r5, #2
 80005be:	f000 80a2 	beq.w	8000706 <HAL_GPIO_Init+0x186>
 80005c2:	d877      	bhi.n	80006b4 <HAL_GPIO_Init+0x134>
 80005c4:	2d00      	cmp	r5, #0
 80005c6:	f000 8089 	beq.w	80006dc <HAL_GPIO_Init+0x15c>
 80005ca:	2d01      	cmp	r5, #1
 80005cc:	f000 8099 	beq.w	8000702 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005d0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005d4:	2aff      	cmp	r2, #255	; 0xff
 80005d6:	bf93      	iteet	ls
 80005d8:	4682      	movls	sl, r0
 80005da:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80005de:	3d08      	subhi	r5, #8
 80005e0:	f8d0 b000 	ldrls.w	fp, [r0]
 80005e4:	bf92      	itee	ls
 80005e6:	00b5      	lslls	r5, r6, #2
 80005e8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80005ec:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005ee:	fa09 f805 	lsl.w	r8, r9, r5
 80005f2:	ea2b 0808 	bic.w	r8, fp, r8
 80005f6:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005fa:	bf88      	it	hi
 80005fc:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000600:	ea48 0505 	orr.w	r5, r8, r5
 8000604:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000608:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800060c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000610:	d04e      	beq.n	80006b0 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000612:	4d45      	ldr	r5, [pc, #276]	; (8000728 <HAL_GPIO_Init+0x1a8>)
 8000614:	4f44      	ldr	r7, [pc, #272]	; (8000728 <HAL_GPIO_Init+0x1a8>)
 8000616:	69ad      	ldr	r5, [r5, #24]
 8000618:	f026 0803 	bic.w	r8, r6, #3
 800061c:	f045 0501 	orr.w	r5, r5, #1
 8000620:	61bd      	str	r5, [r7, #24]
 8000622:	69bd      	ldr	r5, [r7, #24]
 8000624:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000628:	f005 0501 	and.w	r5, r5, #1
 800062c:	9501      	str	r5, [sp, #4]
 800062e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000632:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000636:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000638:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800063c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000640:	fa09 f90b 	lsl.w	r9, r9, fp
 8000644:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000648:	4d38      	ldr	r5, [pc, #224]	; (800072c <HAL_GPIO_Init+0x1ac>)
 800064a:	42a8      	cmp	r0, r5
 800064c:	d063      	beq.n	8000716 <HAL_GPIO_Init+0x196>
 800064e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000652:	42a8      	cmp	r0, r5
 8000654:	d061      	beq.n	800071a <HAL_GPIO_Init+0x19a>
 8000656:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800065a:	42a8      	cmp	r0, r5
 800065c:	d05f      	beq.n	800071e <HAL_GPIO_Init+0x19e>
 800065e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000662:	42a8      	cmp	r0, r5
 8000664:	bf0c      	ite	eq
 8000666:	2503      	moveq	r5, #3
 8000668:	2504      	movne	r5, #4
 800066a:	fa05 f50b 	lsl.w	r5, r5, fp
 800066e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000672:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000676:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000678:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800067c:	bf14      	ite	ne
 800067e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000680:	4395      	biceq	r5, r2
 8000682:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000684:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000686:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800068a:	bf14      	ite	ne
 800068c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800068e:	4395      	biceq	r5, r2
 8000690:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000692:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000694:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000698:	bf14      	ite	ne
 800069a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800069c:	4395      	biceq	r5, r2
 800069e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80006a0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006a2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80006a6:	bf14      	ite	ne
 80006a8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006aa:	ea25 0202 	biceq.w	r2, r5, r2
 80006ae:	60da      	str	r2, [r3, #12]
	position++;
 80006b0:	3601      	adds	r6, #1
 80006b2:	e76e      	b.n	8000592 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80006b4:	2d03      	cmp	r5, #3
 80006b6:	d022      	beq.n	80006fe <HAL_GPIO_Init+0x17e>
 80006b8:	2d11      	cmp	r5, #17
 80006ba:	d189      	bne.n	80005d0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80006bc:	68cc      	ldr	r4, [r1, #12]
 80006be:	3404      	adds	r4, #4
          break;
 80006c0:	e786      	b.n	80005d0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80006c2:	4f1b      	ldr	r7, [pc, #108]	; (8000730 <HAL_GPIO_Init+0x1b0>)
 80006c4:	42bd      	cmp	r5, r7
 80006c6:	d009      	beq.n	80006dc <HAL_GPIO_Init+0x15c>
 80006c8:	d812      	bhi.n	80006f0 <HAL_GPIO_Init+0x170>
 80006ca:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800073c <HAL_GPIO_Init+0x1bc>
 80006ce:	454d      	cmp	r5, r9
 80006d0:	d004      	beq.n	80006dc <HAL_GPIO_Init+0x15c>
 80006d2:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80006d6:	454d      	cmp	r5, r9
 80006d8:	f47f af7a 	bne.w	80005d0 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80006dc:	688c      	ldr	r4, [r1, #8]
 80006de:	b1c4      	cbz	r4, 8000712 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80006e0:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80006e2:	bf0c      	ite	eq
 80006e4:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80006e8:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006ec:	2408      	movs	r4, #8
 80006ee:	e76f      	b.n	80005d0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80006f0:	4575      	cmp	r5, lr
 80006f2:	d0f3      	beq.n	80006dc <HAL_GPIO_Init+0x15c>
 80006f4:	4565      	cmp	r5, ip
 80006f6:	d0f1      	beq.n	80006dc <HAL_GPIO_Init+0x15c>
 80006f8:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000740 <HAL_GPIO_Init+0x1c0>
 80006fc:	e7eb      	b.n	80006d6 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80006fe:	2400      	movs	r4, #0
 8000700:	e766      	b.n	80005d0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000702:	68cc      	ldr	r4, [r1, #12]
          break;
 8000704:	e764      	b.n	80005d0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000706:	68cc      	ldr	r4, [r1, #12]
 8000708:	3408      	adds	r4, #8
          break;
 800070a:	e761      	b.n	80005d0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800070c:	68cc      	ldr	r4, [r1, #12]
 800070e:	340c      	adds	r4, #12
          break;
 8000710:	e75e      	b.n	80005d0 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000712:	2404      	movs	r4, #4
 8000714:	e75c      	b.n	80005d0 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000716:	2500      	movs	r5, #0
 8000718:	e7a7      	b.n	800066a <HAL_GPIO_Init+0xea>
 800071a:	2501      	movs	r5, #1
 800071c:	e7a5      	b.n	800066a <HAL_GPIO_Init+0xea>
 800071e:	2502      	movs	r5, #2
 8000720:	e7a3      	b.n	800066a <HAL_GPIO_Init+0xea>
 8000722:	bf00      	nop
 8000724:	40010400 	.word	0x40010400
 8000728:	40021000 	.word	0x40021000
 800072c:	40010800 	.word	0x40010800
 8000730:	10210000 	.word	0x10210000
 8000734:	10310000 	.word	0x10310000
 8000738:	10320000 	.word	0x10320000
 800073c:	10110000 	.word	0x10110000
 8000740:	10220000 	.word	0x10220000

08000744 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000744:	6883      	ldr	r3, [r0, #8]
 8000746:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000748:	bf14      	ite	ne
 800074a:	2001      	movne	r0, #1
 800074c:	2000      	moveq	r0, #0
 800074e:	4770      	bx	lr

08000750 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000750:	b10a      	cbz	r2, 8000756 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000752:	6101      	str	r1, [r0, #16]
 8000754:	4770      	bx	lr
 8000756:	0409      	lsls	r1, r1, #16
 8000758:	e7fb      	b.n	8000752 <HAL_GPIO_WritePin+0x2>

0800075a <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800075a:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 800075e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000760:	2a01      	cmp	r2, #1
{
 8000762:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000764:	d00b      	beq.n	800077e <HAL_PCD_SetAddress+0x24>
 8000766:	2201      	movs	r2, #1
 8000768:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 800076c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000770:	6800      	ldr	r0, [r0, #0]
 8000772:	f001 fca4 	bl	80020be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000776:	2000      	movs	r0, #0
 8000778:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 800077c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800077e:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000780:	bd10      	pop	{r4, pc}

08000782 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000782:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000784:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8000788:	4604      	mov	r4, r0
 800078a:	f001 0007 	and.w	r0, r1, #7
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800078e:	ea4f 1540 	mov.w	r5, r0, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 8000792:	d01f      	beq.n	80007d4 <HAL_PCD_EP_Open+0x52>
    ep->is_in = 1U;
 8000794:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000796:	f105 0128 	add.w	r1, r5, #40	; 0x28
    ep->is_in = 1U;
 800079a:	4425      	add	r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800079c:	4421      	add	r1, r4
    ep->is_in = 1U;
 800079e:	f885 6029 	strb.w	r6, [r5, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 80007a2:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80007a4:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80007a6:	b2c0      	uxtb	r0, r0
 80007a8:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 80007aa:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80007ac:	b102      	cbz	r2, 80007b0 <HAL_PCD_EP_Open+0x2e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80007ae:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80007b0:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 80007b2:	bf04      	itt	eq
 80007b4:	2300      	moveq	r3, #0
 80007b6:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 80007b8:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d011      	beq.n	80007e4 <HAL_PCD_EP_Open+0x62>
 80007c0:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80007c2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80007c4:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80007c8:	f001 fa96 	bl	8001cf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 80007d4:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80007d6:	f505 7194 	add.w	r1, r5, #296	; 0x128
    ep->is_in = 0U;
 80007da:	4425      	add	r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80007dc:	4421      	add	r1, r4
    ep->is_in = 0U;
 80007de:	f885 6129 	strb.w	r6, [r5, #297]	; 0x129
 80007e2:	e7de      	b.n	80007a2 <HAL_PCD_EP_Open+0x20>
  __HAL_LOCK(hpcd);
 80007e4:	2002      	movs	r0, #2
}
 80007e6:	bd70      	pop	{r4, r5, r6, pc}

080007e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80007e8:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80007ea:	2600      	movs	r6, #0
 80007ec:	f001 0107 	and.w	r1, r1, #7
 80007f0:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 80007f2:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 80007f4:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80007f8:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80007fc:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80007fe:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 8000802:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 8000806:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 800080a:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800080e:	6800      	ldr	r0, [r0, #0]
 8000810:	f001 fc72 	bl	80020f8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000814:	4630      	mov	r0, r6
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000818:	f001 0107 	and.w	r1, r1, #7
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000820:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8000822:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8000824:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000826:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8000828:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800082c:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000830:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000832:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000834:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000836:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800083a:	6800      	ldr	r0, [r0, #0]
 800083c:	f001 fc5c 	bl	80020f8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000840:	4630      	mov	r0, r6
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <HAL_PCD_IRQHandler>:
{
 8000844:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000848:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800084a:	6800      	ldr	r0, [r0, #0]
 800084c:	f001 fc3d 	bl	80020ca <USB_ReadInterrupts>
 8000850:	0402      	lsls	r2, r0, #16
 8000852:	f100 8210 	bmi.w	8000c76 <HAL_PCD_IRQHandler+0x432>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000856:	6820      	ldr	r0, [r4, #0]
 8000858:	f001 fc37 	bl	80020ca <USB_ReadInterrupts>
 800085c:	0543      	lsls	r3, r0, #21
 800085e:	d50f      	bpl.n	8000880 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000860:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000862:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000864:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000868:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800086c:	041b      	lsls	r3, r3, #16
 800086e:	0c1b      	lsrs	r3, r3, #16
 8000870:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000874:	f003 f8a3 	bl	80039be <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000878:	2100      	movs	r1, #0
 800087a:	4620      	mov	r0, r4
 800087c:	f7ff ff6d 	bl	800075a <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000880:	6820      	ldr	r0, [r4, #0]
 8000882:	f001 fc22 	bl	80020ca <USB_ReadInterrupts>
 8000886:	0447      	lsls	r7, r0, #17
 8000888:	d508      	bpl.n	800089c <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800088a:	6822      	ldr	r2, [r4, #0]
 800088c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000894:	041b      	lsls	r3, r3, #16
 8000896:	0c1b      	lsrs	r3, r3, #16
 8000898:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800089c:	6820      	ldr	r0, [r4, #0]
 800089e:	f001 fc14 	bl	80020ca <USB_ReadInterrupts>
 80008a2:	0486      	lsls	r6, r0, #18
 80008a4:	d508      	bpl.n	80008b8 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80008a6:	6822      	ldr	r2, [r4, #0]
 80008a8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80008ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008b0:	041b      	lsls	r3, r3, #16
 80008b2:	0c1b      	lsrs	r3, r3, #16
 80008b4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80008b8:	6820      	ldr	r0, [r4, #0]
 80008ba:	f001 fc06 	bl	80020ca <USB_ReadInterrupts>
 80008be:	04c5      	lsls	r5, r0, #19
 80008c0:	d51c      	bpl.n	80008fc <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80008c2:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80008c4:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80008c6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80008ca:	f023 0304 	bic.w	r3, r3, #4
 80008ce:	041b      	lsls	r3, r3, #16
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80008d6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80008da:	f023 0308 	bic.w	r3, r3, #8
 80008de:	041b      	lsls	r3, r3, #16
 80008e0:	0c1b      	lsrs	r3, r3, #16
 80008e2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80008e6:	f003 f88d 	bl	8003a04 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80008ea:	6822      	ldr	r2, [r4, #0]
 80008ec:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80008f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008f4:	041b      	lsls	r3, r3, #16
 80008f6:	0c1b      	lsrs	r3, r3, #16
 80008f8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80008fc:	6820      	ldr	r0, [r4, #0]
 80008fe:	f001 fbe4 	bl	80020ca <USB_ReadInterrupts>
 8000902:	0500      	lsls	r0, r0, #20
 8000904:	d526      	bpl.n	8000954 <HAL_PCD_IRQHandler+0x110>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000906:	6820      	ldr	r0, [r4, #0]
 8000908:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800090c:	b29b      	uxth	r3, r3
 800090e:	f043 0308 	orr.w	r3, r3, #8
 8000912:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000916:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800091a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800091e:	041b      	lsls	r3, r3, #16
 8000920:	0c1b      	lsrs	r3, r3, #16
 8000922:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000926:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800092a:	b29b      	uxth	r3, r3
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000934:	f001 fbc9 	bl	80020ca <USB_ReadInterrupts>
 8000938:	04c1      	lsls	r1, r0, #19
 800093a:	d508      	bpl.n	800094e <HAL_PCD_IRQHandler+0x10a>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800093c:	6822      	ldr	r2, [r4, #0]
 800093e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000946:	041b      	lsls	r3, r3, #16
 8000948:	0c1b      	lsrs	r3, r3, #16
 800094a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 800094e:	4620      	mov	r0, r4
 8000950:	f003 f848 	bl	80039e4 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000954:	6820      	ldr	r0, [r4, #0]
 8000956:	f001 fbb8 	bl	80020ca <USB_ReadInterrupts>
 800095a:	0582      	lsls	r2, r0, #22
 800095c:	d50b      	bpl.n	8000976 <HAL_PCD_IRQHandler+0x132>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800095e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000960:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000962:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000966:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800096a:	041b      	lsls	r3, r3, #16
 800096c:	0c1b      	lsrs	r3, r3, #16
 800096e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000972:	f003 f820 	bl	80039b6 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000976:	6820      	ldr	r0, [r4, #0]
 8000978:	f001 fba7 	bl	80020ca <USB_ReadInterrupts>
 800097c:	05c3      	lsls	r3, r0, #23
 800097e:	d508      	bpl.n	8000992 <HAL_PCD_IRQHandler+0x14e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000980:	6822      	ldr	r2, [r4, #0]
 8000982:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800098a:	041b      	lsls	r3, r3, #16
 800098c:	0c1b      	lsrs	r3, r3, #16
 800098e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8000992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 8000996:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 800099a:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 800099c:	f011 060f 	ands.w	r6, r1, #15
 80009a0:	f040 80b7 	bne.w	8000b12 <HAL_PCD_IRQHandler+0x2ce>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80009a4:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80009a6:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80009aa:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80009ac:	d12c      	bne.n	8000a08 <HAL_PCD_IRQHandler+0x1c4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80009ae:	ea03 0309 	and.w	r3, r3, r9
 80009b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009b6:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80009b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80009bc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80009c6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80009ca:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80009ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80009d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009d4:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80009d6:	4413      	add	r3, r2
 80009d8:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80009da:	4620      	mov	r0, r4
 80009dc:	f002 ffe4 	bl	80039a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80009e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80009e4:	b153      	cbz	r3, 80009fc <HAL_PCD_IRQHandler+0x1b8>
 80009e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009e8:	b942      	cbnz	r2, 80009fc <HAL_PCD_IRQHandler+0x1b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80009ea:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80009ee:	6821      	ldr	r1, [r4, #0]
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80009f8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80009fc:	6820      	ldr	r0, [r4, #0]
 80009fe:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000a02:	041b      	lsls	r3, r3, #16
 8000a04:	d4c7      	bmi.n	8000996 <HAL_PCD_IRQHandler+0x152>
 8000a06:	e726      	b.n	8000856 <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000a08:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8000a0c:	d021      	beq.n	8000a52 <HAL_PCD_IRQHandler+0x20e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a0e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a12:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a1c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a20:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000a24:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8000a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a2c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000a30:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8000a34:	f001 fc48 	bl	80022c8 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a38:	6822      	ldr	r2, [r4, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000a3a:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a3c:	8813      	ldrh	r3, [r2, #0]
 8000a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a42:	051b      	lsls	r3, r3, #20
 8000a44:	0d1b      	lsrs	r3, r3, #20
 8000a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000a4c:	f002 ff9e 	bl	800398c <HAL_PCD_SetupStageCallback>
 8000a50:	e7d4      	b.n	80009fc <HAL_PCD_IRQHandler+0x1b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000a52:	041f      	lsls	r7, r3, #16
 8000a54:	d5d2      	bpl.n	80009fc <HAL_PCD_IRQHandler+0x1b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a56:	8803      	ldrh	r3, [r0, #0]
 8000a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a5c:	051b      	lsls	r3, r3, #20
 8000a5e:	0d1b      	lsrs	r3, r3, #20
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a66:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a6a:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a74:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a78:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a80:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000a84:	b18b      	cbz	r3, 8000aaa <HAL_PCD_IRQHandler+0x266>
 8000a86:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8000a8a:	b171      	cbz	r1, 8000aaa <HAL_PCD_IRQHandler+0x266>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000a8c:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8000a90:	f001 fc1a 	bl	80022c8 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8000a94:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8000a98:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000a9c:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8000a9e:	4413      	add	r3, r2
 8000aa0:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f002 ff77 	bl	8003998 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000aaa:	6821      	ldr	r1, [r4, #0]
 8000aac:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 8000ab0:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8000ab4:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	b9cd      	cbnz	r5, 8000af0 <HAL_PCD_IRQHandler+0x2ac>
 8000abc:	5ac2      	ldrh	r2, [r0, r3]
 8000abe:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000ac2:	0412      	lsls	r2, r2, #16
 8000ac4:	0c12      	lsrs	r2, r2, #16
 8000ac6:	52c2      	strh	r2, [r0, r3]
 8000ac8:	5ac2      	ldrh	r2, [r0, r3]
 8000aca:	b292      	uxth	r2, r2
 8000acc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ad0:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000ad2:	880b      	ldrh	r3, [r1, #0]
 8000ad4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000adc:	041b      	lsls	r3, r3, #16
 8000ade:	0c1b      	lsrs	r3, r3, #16
 8000ae0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aec:	800b      	strh	r3, [r1, #0]
 8000aee:	e785      	b.n	80009fc <HAL_PCD_IRQHandler+0x1b8>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000af0:	2d3e      	cmp	r5, #62	; 0x3e
 8000af2:	d806      	bhi.n	8000b02 <HAL_PCD_IRQHandler+0x2be>
 8000af4:	086a      	lsrs	r2, r5, #1
 8000af6:	07ee      	lsls	r6, r5, #31
 8000af8:	bf48      	it	mi
 8000afa:	3201      	addmi	r2, #1
 8000afc:	0292      	lsls	r2, r2, #10
 8000afe:	b292      	uxth	r2, r2
 8000b00:	e7e6      	b.n	8000ad0 <HAL_PCD_IRQHandler+0x28c>
 8000b02:	096a      	lsrs	r2, r5, #5
 8000b04:	06ed      	lsls	r5, r5, #27
 8000b06:	bf08      	it	eq
 8000b08:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000b0c:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 8000b10:	e7f5      	b.n	8000afe <HAL_PCD_IRQHandler+0x2ba>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000b12:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 8000b16:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000b1a:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8000b1e:	d03d      	beq.n	8000b9c <HAL_PCD_IRQHandler+0x358>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000b20:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8000b24:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b2a:	051b      	lsls	r3, r3, #20
 8000b2c:	0d1b      	lsrs	r3, r3, #20
 8000b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b32:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8000b36:	19e1      	adds	r1, r4, r7
 8000b38:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d158      	bne.n	8000bf2 <HAL_PCD_IRQHandler+0x3ae>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b40:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000b44:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	3306      	adds	r3, #6
 8000b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000b50:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b54:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000b58:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8000b5c:	b135      	cbz	r5, 8000b6c <HAL_PCD_IRQHandler+0x328>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000b5e:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8000b62:	462b      	mov	r3, r5
 8000b64:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8000b68:	f001 fbae 	bl	80022c8 <USB_ReadPMA>
 8000b6c:	19e1      	adds	r1, r4, r7
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8000b6e:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 8000b72:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 8000b76:	442b      	add	r3, r5
 8000b78:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000b7c:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 8000b80:	442a      	add	r2, r5
 8000b82:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000b86:	b11b      	cbz	r3, 8000b90 <HAL_PCD_IRQHandler+0x34c>
 8000b88:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8000b8c:	4285      	cmp	r5, r0
 8000b8e:	d269      	bcs.n	8000c64 <HAL_PCD_IRQHandler+0x420>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000b90:	4427      	add	r7, r4
 8000b92:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8000b96:	4620      	mov	r0, r4
 8000b98:	f002 fefe 	bl	8003998 <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000b9c:	f018 0f80 	tst.w	r8, #128	; 0x80
 8000ba0:	f43f af2c 	beq.w	80009fc <HAL_PCD_IRQHandler+0x1b8>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000ba4:	6821      	ldr	r1, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000ba6:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000ba8:	f831 2026 	ldrh.w	r2, [r1, r6, lsl #2]
 8000bac:	b292      	uxth	r2, r2
 8000bae:	ea02 0209 	and.w	r2, r2, r9
 8000bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bb6:	f821 2026 	strh.w	r2, [r1, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000bba:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8000bbe:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8000bc2:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	3302      	adds	r3, #2
 8000bca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000bce:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000bd2:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 8000bd6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000bd8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000bdc:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000bde:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8000be0:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8000be2:	63f2      	str	r2, [r6, #60]	; 0x3c
 8000be4:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
        if (ep->xfer_len == 0U)
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d141      	bne.n	8000c70 <HAL_PCD_IRQHandler+0x42c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000bec:	f002 fedc 	bl	80039a8 <HAL_PCD_DataInStageCallback>
 8000bf0:	e704      	b.n	80009fc <HAL_PCD_IRQHandler+0x1b8>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000bf2:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 8000bf6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000c00:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000c04:	b292      	uxth	r2, r2
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000c06:	d01f      	beq.n	8000c48 <HAL_PCD_IRQHandler+0x404>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000c08:	3202      	adds	r2, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000c10:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000c14:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8000c18:	b135      	cbz	r5, 8000c28 <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000c1a:	462b      	mov	r3, r5
 8000c1c:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000c20:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8000c24:	f001 fb50 	bl	80022c8 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000c28:	19e3      	adds	r3, r4, r7
 8000c2a:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8000c2e:	6822      	ldr	r2, [r4, #0]
 8000c30:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	ea03 030b 	and.w	r3, r3, fp
 8000c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c42:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000c46:	e791      	b.n	8000b6c <HAL_PCD_IRQHandler+0x328>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000c48:	3206      	adds	r2, #6
 8000c4a:	4413      	add	r3, r2
 8000c4c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000c50:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000c54:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8000c58:	2d00      	cmp	r5, #0
 8000c5a:	d0e5      	beq.n	8000c28 <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000c5c:	462b      	mov	r3, r5
 8000c5e:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 8000c62:	e7dd      	b.n	8000c20 <HAL_PCD_IRQHandler+0x3dc>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000c64:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f7ff fdbd 	bl	80007e8 <HAL_PCD_EP_Receive>
 8000c6e:	e795      	b.n	8000b9c <HAL_PCD_IRQHandler+0x358>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000c70:	f7ff fdd2 	bl	8000818 <HAL_PCD_EP_Transmit>
 8000c74:	e6c2      	b.n	80009fc <HAL_PCD_IRQHandler+0x1b8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c76:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8000c84 <HAL_PCD_IRQHandler+0x440>
 8000c7a:	f8df a00c 	ldr.w	sl, [pc, #12]	; 8000c88 <HAL_PCD_IRQHandler+0x444>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000c7e:	f8df b00c 	ldr.w	fp, [pc, #12]	; 8000c8c <HAL_PCD_IRQHandler+0x448>
 8000c82:	e6bb      	b.n	80009fc <HAL_PCD_IRQHandler+0x1b8>
 8000c84:	ffff8f0f 	.word	0xffff8f0f
 8000c88:	ffff8000 	.word	0xffff8000
 8000c8c:	ffff8f8f 	.word	0xffff8f8f

08000c90 <HAL_PCD_EP_SetStall>:
{
 8000c90:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000c92:	6843      	ldr	r3, [r0, #4]
 8000c94:	f001 0507 	and.w	r5, r1, #7
 8000c98:	429d      	cmp	r5, r3
{
 8000c9a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000c9c:	d828      	bhi.n	8000cf0 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8000c9e:	060b      	lsls	r3, r1, #24
 8000ca0:	d51d      	bpl.n	8000cde <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8000ca2:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ca4:	016b      	lsls	r3, r5, #5
 8000ca6:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8000caa:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cac:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000cae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8000cb2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8000cb4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8000cb6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8000cb8:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d019      	beq.n	8000cf4 <HAL_PCD_EP_SetStall+0x64>
 8000cc0:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000cc4:	6820      	ldr	r0, [r4, #0]
 8000cc6:	f001 f98f 	bl	8001fe8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000cca:	b925      	cbnz	r5, 8000cd6 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000ccc:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8000cd0:	6820      	ldr	r0, [r4, #0]
 8000cd2:	f001 f9fe 	bl	80020d2 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8000cdc:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8000cde:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8000ce0:	014b      	lsls	r3, r1, #5
 8000ce2:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 8000ce6:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8000ce8:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000cea:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8000cee:	e7e0      	b.n	8000cb2 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000cf4:	2002      	movs	r0, #2
}
 8000cf6:	bd38      	pop	{r3, r4, r5, pc}

08000cf8 <HAL_PCD_EP_ClrStall>:
{
 8000cf8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000cfa:	6843      	ldr	r3, [r0, #4]
 8000cfc:	f001 020f 	and.w	r2, r1, #15
 8000d00:	429a      	cmp	r2, r3
{
 8000d02:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000d04:	d826      	bhi.n	8000d54 <HAL_PCD_EP_ClrStall+0x5c>
 8000d06:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8000d0a:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d0e:	ea4f 1243 	mov.w	r2, r3, lsl #5
  if ((0x80U & ep_addr) == 0x80U)
 8000d12:	d017      	beq.n	8000d44 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d14:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8000d18:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000d1a:	4402      	add	r2, r0
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  ep->is_stall = 0U;
 8000d22:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d24:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8000d26:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8000d28:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d013      	beq.n	8000d58 <HAL_PCD_EP_ClrStall+0x60>
 8000d30:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000d32:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000d34:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000d38:	f001 f976 	bl	8002028 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000d3c:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 8000d40:	4628      	mov	r0, r5
 8000d42:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d44:	f502 7194 	add.w	r1, r2, #296	; 0x128
 8000d48:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000d4a:	4402      	add	r2, r0
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 8000d52:	e7e6      	b.n	8000d22 <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 8000d54:	2001      	movs	r0, #1
 8000d56:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000d58:	2002      	movs	r0, #2
}
 8000d5a:	bd38      	pop	{r3, r4, r5, pc}

08000d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d60:	4605      	mov	r5, r0
 8000d62:	b908      	cbnz	r0, 8000d68 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000d64:	2001      	movs	r0, #1
 8000d66:	e03c      	b.n	8000de2 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d68:	6803      	ldr	r3, [r0, #0]
 8000d6a:	07db      	lsls	r3, r3, #31
 8000d6c:	d410      	bmi.n	8000d90 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d6e:	682b      	ldr	r3, [r5, #0]
 8000d70:	079f      	lsls	r7, r3, #30
 8000d72:	d45d      	bmi.n	8000e30 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d74:	682b      	ldr	r3, [r5, #0]
 8000d76:	0719      	lsls	r1, r3, #28
 8000d78:	f100 8094 	bmi.w	8000ea4 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d7c:	682b      	ldr	r3, [r5, #0]
 8000d7e:	075a      	lsls	r2, r3, #29
 8000d80:	f100 80be 	bmi.w	8000f00 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d84:	69e8      	ldr	r0, [r5, #28]
 8000d86:	2800      	cmp	r0, #0
 8000d88:	f040 812c 	bne.w	8000fe4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	e028      	b.n	8000de2 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d90:	4c8f      	ldr	r4, [pc, #572]	; (8000fd0 <HAL_RCC_OscConfig+0x274>)
 8000d92:	6863      	ldr	r3, [r4, #4]
 8000d94:	f003 030c 	and.w	r3, r3, #12
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d007      	beq.n	8000dac <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d9c:	6863      	ldr	r3, [r4, #4]
 8000d9e:	f003 030c 	and.w	r3, r3, #12
 8000da2:	2b08      	cmp	r3, #8
 8000da4:	d109      	bne.n	8000dba <HAL_RCC_OscConfig+0x5e>
 8000da6:	6863      	ldr	r3, [r4, #4]
 8000da8:	03de      	lsls	r6, r3, #15
 8000daa:	d506      	bpl.n	8000dba <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	039c      	lsls	r4, r3, #14
 8000db0:	d5dd      	bpl.n	8000d6e <HAL_RCC_OscConfig+0x12>
 8000db2:	686b      	ldr	r3, [r5, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1da      	bne.n	8000d6e <HAL_RCC_OscConfig+0x12>
 8000db8:	e7d4      	b.n	8000d64 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dba:	686b      	ldr	r3, [r5, #4]
 8000dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc0:	d112      	bne.n	8000de8 <HAL_RCC_OscConfig+0x8c>
 8000dc2:	6823      	ldr	r3, [r4, #0]
 8000dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000dca:	f7ff fa09 	bl	80001e0 <HAL_GetTick>
 8000dce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd0:	6823      	ldr	r3, [r4, #0]
 8000dd2:	0398      	lsls	r0, r3, #14
 8000dd4:	d4cb      	bmi.n	8000d6e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd6:	f7ff fa03 	bl	80001e0 <HAL_GetTick>
 8000dda:	1b80      	subs	r0, r0, r6
 8000ddc:	2864      	cmp	r0, #100	; 0x64
 8000dde:	d9f7      	bls.n	8000dd0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000de0:	2003      	movs	r0, #3
}
 8000de2:	b002      	add	sp, #8
 8000de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de8:	b99b      	cbnz	r3, 8000e12 <HAL_RCC_OscConfig+0xb6>
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df0:	6023      	str	r3, [r4, #0]
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000dfa:	f7ff f9f1 	bl	80001e0 <HAL_GetTick>
 8000dfe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e00:	6823      	ldr	r3, [r4, #0]
 8000e02:	0399      	lsls	r1, r3, #14
 8000e04:	d5b3      	bpl.n	8000d6e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e06:	f7ff f9eb 	bl	80001e0 <HAL_GetTick>
 8000e0a:	1b80      	subs	r0, r0, r6
 8000e0c:	2864      	cmp	r0, #100	; 0x64
 8000e0e:	d9f7      	bls.n	8000e00 <HAL_RCC_OscConfig+0xa4>
 8000e10:	e7e6      	b.n	8000de0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	d103      	bne.n	8000e22 <HAL_RCC_OscConfig+0xc6>
 8000e1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e1e:	6023      	str	r3, [r4, #0]
 8000e20:	e7cf      	b.n	8000dc2 <HAL_RCC_OscConfig+0x66>
 8000e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e26:	6023      	str	r3, [r4, #0]
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2e:	e7cb      	b.n	8000dc8 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e30:	4c67      	ldr	r4, [pc, #412]	; (8000fd0 <HAL_RCC_OscConfig+0x274>)
 8000e32:	6863      	ldr	r3, [r4, #4]
 8000e34:	f013 0f0c 	tst.w	r3, #12
 8000e38:	d007      	beq.n	8000e4a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e3a:	6863      	ldr	r3, [r4, #4]
 8000e3c:	f003 030c 	and.w	r3, r3, #12
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d110      	bne.n	8000e66 <HAL_RCC_OscConfig+0x10a>
 8000e44:	6863      	ldr	r3, [r4, #4]
 8000e46:	03da      	lsls	r2, r3, #15
 8000e48:	d40d      	bmi.n	8000e66 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4a:	6823      	ldr	r3, [r4, #0]
 8000e4c:	079b      	lsls	r3, r3, #30
 8000e4e:	d502      	bpl.n	8000e56 <HAL_RCC_OscConfig+0xfa>
 8000e50:	692b      	ldr	r3, [r5, #16]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d186      	bne.n	8000d64 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	696a      	ldr	r2, [r5, #20]
 8000e5a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e5e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e62:	6023      	str	r3, [r4, #0]
 8000e64:	e786      	b.n	8000d74 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e66:	692a      	ldr	r2, [r5, #16]
 8000e68:	4b5a      	ldr	r3, [pc, #360]	; (8000fd4 <HAL_RCC_OscConfig+0x278>)
 8000e6a:	b16a      	cbz	r2, 8000e88 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e70:	f7ff f9b6 	bl	80001e0 <HAL_GetTick>
 8000e74:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e76:	6823      	ldr	r3, [r4, #0]
 8000e78:	079f      	lsls	r7, r3, #30
 8000e7a:	d4ec      	bmi.n	8000e56 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e7c:	f7ff f9b0 	bl	80001e0 <HAL_GetTick>
 8000e80:	1b80      	subs	r0, r0, r6
 8000e82:	2802      	cmp	r0, #2
 8000e84:	d9f7      	bls.n	8000e76 <HAL_RCC_OscConfig+0x11a>
 8000e86:	e7ab      	b.n	8000de0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000e88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e8a:	f7ff f9a9 	bl	80001e0 <HAL_GetTick>
 8000e8e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	0798      	lsls	r0, r3, #30
 8000e94:	f57f af6e 	bpl.w	8000d74 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e98:	f7ff f9a2 	bl	80001e0 <HAL_GetTick>
 8000e9c:	1b80      	subs	r0, r0, r6
 8000e9e:	2802      	cmp	r0, #2
 8000ea0:	d9f6      	bls.n	8000e90 <HAL_RCC_OscConfig+0x134>
 8000ea2:	e79d      	b.n	8000de0 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ea4:	69aa      	ldr	r2, [r5, #24]
 8000ea6:	4c4a      	ldr	r4, [pc, #296]	; (8000fd0 <HAL_RCC_OscConfig+0x274>)
 8000ea8:	4b4b      	ldr	r3, [pc, #300]	; (8000fd8 <HAL_RCC_OscConfig+0x27c>)
 8000eaa:	b1da      	cbz	r2, 8000ee4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000eb0:	f7ff f996 	bl	80001e0 <HAL_GetTick>
 8000eb4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eb8:	079b      	lsls	r3, r3, #30
 8000eba:	d50d      	bpl.n	8000ed8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ebc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ec0:	4b46      	ldr	r3, [pc, #280]	; (8000fdc <HAL_RCC_OscConfig+0x280>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ec8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000eca:	bf00      	nop
  }
  while (Delay --);
 8000ecc:	9b01      	ldr	r3, [sp, #4]
 8000ece:	1e5a      	subs	r2, r3, #1
 8000ed0:	9201      	str	r2, [sp, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f9      	bne.n	8000eca <HAL_RCC_OscConfig+0x16e>
 8000ed6:	e751      	b.n	8000d7c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed8:	f7ff f982 	bl	80001e0 <HAL_GetTick>
 8000edc:	1b80      	subs	r0, r0, r6
 8000ede:	2802      	cmp	r0, #2
 8000ee0:	d9e9      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x15a>
 8000ee2:	e77d      	b.n	8000de0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000ee4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ee6:	f7ff f97b 	bl	80001e0 <HAL_GetTick>
 8000eea:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eee:	079f      	lsls	r7, r3, #30
 8000ef0:	f57f af44 	bpl.w	8000d7c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef4:	f7ff f974 	bl	80001e0 <HAL_GetTick>
 8000ef8:	1b80      	subs	r0, r0, r6
 8000efa:	2802      	cmp	r0, #2
 8000efc:	d9f6      	bls.n	8000eec <HAL_RCC_OscConfig+0x190>
 8000efe:	e76f      	b.n	8000de0 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f00:	4c33      	ldr	r4, [pc, #204]	; (8000fd0 <HAL_RCC_OscConfig+0x274>)
 8000f02:	69e3      	ldr	r3, [r4, #28]
 8000f04:	00d8      	lsls	r0, r3, #3
 8000f06:	d424      	bmi.n	8000f52 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000f08:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	69e3      	ldr	r3, [r4, #28]
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	61e3      	str	r3, [r4, #28]
 8000f12:	69e3      	ldr	r3, [r4, #28]
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1c:	4e30      	ldr	r6, [pc, #192]	; (8000fe0 <HAL_RCC_OscConfig+0x284>)
 8000f1e:	6833      	ldr	r3, [r6, #0]
 8000f20:	05d9      	lsls	r1, r3, #23
 8000f22:	d518      	bpl.n	8000f56 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f24:	68eb      	ldr	r3, [r5, #12]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d126      	bne.n	8000f78 <HAL_RCC_OscConfig+0x21c>
 8000f2a:	6a23      	ldr	r3, [r4, #32]
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f32:	f7ff f955 	bl	80001e0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f36:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f3a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3c:	6a23      	ldr	r3, [r4, #32]
 8000f3e:	079b      	lsls	r3, r3, #30
 8000f40:	d53f      	bpl.n	8000fc2 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000f42:	2f00      	cmp	r7, #0
 8000f44:	f43f af1e 	beq.w	8000d84 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f48:	69e3      	ldr	r3, [r4, #28]
 8000f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	61e3      	str	r3, [r4, #28]
 8000f50:	e718      	b.n	8000d84 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000f52:	2700      	movs	r7, #0
 8000f54:	e7e2      	b.n	8000f1c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f56:	6833      	ldr	r3, [r6, #0]
 8000f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f5e:	f7ff f93f 	bl	80001e0 <HAL_GetTick>
 8000f62:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f64:	6833      	ldr	r3, [r6, #0]
 8000f66:	05da      	lsls	r2, r3, #23
 8000f68:	d4dc      	bmi.n	8000f24 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f6a:	f7ff f939 	bl	80001e0 <HAL_GetTick>
 8000f6e:	eba0 0008 	sub.w	r0, r0, r8
 8000f72:	2864      	cmp	r0, #100	; 0x64
 8000f74:	d9f6      	bls.n	8000f64 <HAL_RCC_OscConfig+0x208>
 8000f76:	e733      	b.n	8000de0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f78:	b9ab      	cbnz	r3, 8000fa6 <HAL_RCC_OscConfig+0x24a>
 8000f7a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f7c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f80:	f023 0301 	bic.w	r3, r3, #1
 8000f84:	6223      	str	r3, [r4, #32]
 8000f86:	6a23      	ldr	r3, [r4, #32]
 8000f88:	f023 0304 	bic.w	r3, r3, #4
 8000f8c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f8e:	f7ff f927 	bl	80001e0 <HAL_GetTick>
 8000f92:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f94:	6a23      	ldr	r3, [r4, #32]
 8000f96:	0798      	lsls	r0, r3, #30
 8000f98:	d5d3      	bpl.n	8000f42 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f9a:	f7ff f921 	bl	80001e0 <HAL_GetTick>
 8000f9e:	1b80      	subs	r0, r0, r6
 8000fa0:	4540      	cmp	r0, r8
 8000fa2:	d9f7      	bls.n	8000f94 <HAL_RCC_OscConfig+0x238>
 8000fa4:	e71c      	b.n	8000de0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa6:	2b05      	cmp	r3, #5
 8000fa8:	6a23      	ldr	r3, [r4, #32]
 8000faa:	d103      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x258>
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6223      	str	r3, [r4, #32]
 8000fb2:	e7ba      	b.n	8000f2a <HAL_RCC_OscConfig+0x1ce>
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	6223      	str	r3, [r4, #32]
 8000fba:	6a23      	ldr	r3, [r4, #32]
 8000fbc:	f023 0304 	bic.w	r3, r3, #4
 8000fc0:	e7b6      	b.n	8000f30 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fc2:	f7ff f90d 	bl	80001e0 <HAL_GetTick>
 8000fc6:	eba0 0008 	sub.w	r0, r0, r8
 8000fca:	42b0      	cmp	r0, r6
 8000fcc:	d9b6      	bls.n	8000f3c <HAL_RCC_OscConfig+0x1e0>
 8000fce:	e707      	b.n	8000de0 <HAL_RCC_OscConfig+0x84>
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	42420000 	.word	0x42420000
 8000fd8:	42420480 	.word	0x42420480
 8000fdc:	20000074 	.word	0x20000074
 8000fe0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <HAL_RCC_OscConfig+0x334>)
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	461c      	mov	r4, r3
 8000fea:	f002 020c 	and.w	r2, r2, #12
 8000fee:	2a08      	cmp	r2, #8
 8000ff0:	d03d      	beq.n	800106e <HAL_RCC_OscConfig+0x312>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	4e27      	ldr	r6, [pc, #156]	; (8001094 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ff6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000ff8:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ffa:	d12b      	bne.n	8001054 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000ffc:	f7ff f8f0 	bl	80001e0 <HAL_GetTick>
 8001000:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	0199      	lsls	r1, r3, #6
 8001006:	d41f      	bmi.n	8001048 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001008:	6a2b      	ldr	r3, [r5, #32]
 800100a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100e:	d105      	bne.n	800101c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001010:	6862      	ldr	r2, [r4, #4]
 8001012:	68a9      	ldr	r1, [r5, #8]
 8001014:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001018:	430a      	orrs	r2, r1
 800101a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800101c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800101e:	6862      	ldr	r2, [r4, #4]
 8001020:	430b      	orrs	r3, r1
 8001022:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001026:	4313      	orrs	r3, r2
 8001028:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800102a:	2301      	movs	r3, #1
 800102c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800102e:	f7ff f8d7 	bl	80001e0 <HAL_GetTick>
 8001032:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001034:	6823      	ldr	r3, [r4, #0]
 8001036:	019a      	lsls	r2, r3, #6
 8001038:	f53f aea8 	bmi.w	8000d8c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800103c:	f7ff f8d0 	bl	80001e0 <HAL_GetTick>
 8001040:	1b40      	subs	r0, r0, r5
 8001042:	2802      	cmp	r0, #2
 8001044:	d9f6      	bls.n	8001034 <HAL_RCC_OscConfig+0x2d8>
 8001046:	e6cb      	b.n	8000de0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001048:	f7ff f8ca 	bl	80001e0 <HAL_GetTick>
 800104c:	1bc0      	subs	r0, r0, r7
 800104e:	2802      	cmp	r0, #2
 8001050:	d9d7      	bls.n	8001002 <HAL_RCC_OscConfig+0x2a6>
 8001052:	e6c5      	b.n	8000de0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001054:	f7ff f8c4 	bl	80001e0 <HAL_GetTick>
 8001058:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	019b      	lsls	r3, r3, #6
 800105e:	f57f ae95 	bpl.w	8000d8c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001062:	f7ff f8bd 	bl	80001e0 <HAL_GetTick>
 8001066:	1b40      	subs	r0, r0, r5
 8001068:	2802      	cmp	r0, #2
 800106a:	d9f6      	bls.n	800105a <HAL_RCC_OscConfig+0x2fe>
 800106c:	e6b8      	b.n	8000de0 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800106e:	2801      	cmp	r0, #1
 8001070:	f43f aeb7 	beq.w	8000de2 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001074:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001076:	6a2b      	ldr	r3, [r5, #32]
 8001078:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 800107c:	429a      	cmp	r2, r3
 800107e:	f47f ae71 	bne.w	8000d64 <HAL_RCC_OscConfig+0x8>
 8001082:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001084:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001088:	1ac0      	subs	r0, r0, r3
 800108a:	bf18      	it	ne
 800108c:	2001      	movne	r0, #1
 800108e:	e6a8      	b.n	8000de2 <HAL_RCC_OscConfig+0x86>
 8001090:	40021000 	.word	0x40021000
 8001094:	42420060 	.word	0x42420060

08001098 <HAL_RCC_GetSysClockFreq>:
{
 8001098:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800109c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800109e:	ac02      	add	r4, sp, #8
 80010a0:	f103 0510 	add.w	r5, r3, #16
 80010a4:	4622      	mov	r2, r4
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	6859      	ldr	r1, [r3, #4]
 80010aa:	3308      	adds	r3, #8
 80010ac:	c203      	stmia	r2!, {r0, r1}
 80010ae:	42ab      	cmp	r3, r5
 80010b0:	4614      	mov	r4, r2
 80010b2:	d1f7      	bne.n	80010a4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010b4:	2301      	movs	r3, #1
 80010b6:	f88d 3004 	strb.w	r3, [sp, #4]
 80010ba:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80010bc:	4911      	ldr	r1, [pc, #68]	; (8001104 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010be:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80010c2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80010c4:	f003 020c 	and.w	r2, r3, #12
 80010c8:	2a08      	cmp	r2, #8
 80010ca:	d117      	bne.n	80010fc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010cc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80010d0:	a806      	add	r0, sp, #24
 80010d2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010d4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010d6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010da:	d50c      	bpl.n	80010f6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010dc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010de:	480a      	ldr	r0, [pc, #40]	; (8001108 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010e0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010e4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010e6:	aa06      	add	r2, sp, #24
 80010e8:	4413      	add	r3, r2
 80010ea:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010ee:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80010f2:	b007      	add	sp, #28
 80010f4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <HAL_RCC_GetSysClockFreq+0x74>)
 80010f8:	4350      	muls	r0, r2
 80010fa:	e7fa      	b.n	80010f2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80010fe:	e7f8      	b.n	80010f2 <HAL_RCC_GetSysClockFreq+0x5a>
 8001100:	08004784 	.word	0x08004784
 8001104:	40021000 	.word	0x40021000
 8001108:	007a1200 	.word	0x007a1200
 800110c:	003d0900 	.word	0x003d0900

08001110 <HAL_RCC_ClockConfig>:
{
 8001110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001114:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001116:	4604      	mov	r4, r0
 8001118:	b910      	cbnz	r0, 8001120 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800111a:	2001      	movs	r0, #1
 800111c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001120:	4a45      	ldr	r2, [pc, #276]	; (8001238 <HAL_RCC_ClockConfig+0x128>)
 8001122:	6813      	ldr	r3, [r2, #0]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	428b      	cmp	r3, r1
 800112a:	d329      	bcc.n	8001180 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800112c:	6821      	ldr	r1, [r4, #0]
 800112e:	078e      	lsls	r6, r1, #30
 8001130:	d431      	bmi.n	8001196 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001132:	07ca      	lsls	r2, r1, #31
 8001134:	d444      	bmi.n	80011c0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001136:	4a40      	ldr	r2, [pc, #256]	; (8001238 <HAL_RCC_ClockConfig+0x128>)
 8001138:	6813      	ldr	r3, [r2, #0]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	429d      	cmp	r5, r3
 8001140:	d367      	bcc.n	8001212 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001142:	6822      	ldr	r2, [r4, #0]
 8001144:	4d3d      	ldr	r5, [pc, #244]	; (800123c <HAL_RCC_ClockConfig+0x12c>)
 8001146:	f012 0f04 	tst.w	r2, #4
 800114a:	d16e      	bne.n	800122a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800114c:	0713      	lsls	r3, r2, #28
 800114e:	d506      	bpl.n	800115e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001150:	686b      	ldr	r3, [r5, #4]
 8001152:	6922      	ldr	r2, [r4, #16]
 8001154:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001158:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800115c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800115e:	f7ff ff9b 	bl	8001098 <HAL_RCC_GetSysClockFreq>
 8001162:	686b      	ldr	r3, [r5, #4]
 8001164:	4a36      	ldr	r2, [pc, #216]	; (8001240 <HAL_RCC_ClockConfig+0x130>)
 8001166:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800116a:	5cd3      	ldrb	r3, [r2, r3]
 800116c:	40d8      	lsrs	r0, r3
 800116e:	4b35      	ldr	r3, [pc, #212]	; (8001244 <HAL_RCC_ClockConfig+0x134>)
 8001170:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001172:	4b35      	ldr	r3, [pc, #212]	; (8001248 <HAL_RCC_ClockConfig+0x138>)
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	f7fe fff1 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 800117a:	2000      	movs	r0, #0
 800117c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001180:	6813      	ldr	r3, [r2, #0]
 8001182:	f023 0307 	bic.w	r3, r3, #7
 8001186:	430b      	orrs	r3, r1
 8001188:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800118a:	6813      	ldr	r3, [r2, #0]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	4299      	cmp	r1, r3
 8001192:	d1c2      	bne.n	800111a <HAL_RCC_ClockConfig+0xa>
 8001194:	e7ca      	b.n	800112c <HAL_RCC_ClockConfig+0x1c>
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001198:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800119c:	bf1e      	ittt	ne
 800119e:	685a      	ldrne	r2, [r3, #4]
 80011a0:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80011a4:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a6:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011a8:	bf42      	ittt	mi
 80011aa:	685a      	ldrmi	r2, [r3, #4]
 80011ac:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80011b0:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	68a0      	ldr	r0, [r4, #8]
 80011b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80011ba:	4302      	orrs	r2, r0
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	e7b8      	b.n	8001132 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011c0:	6862      	ldr	r2, [r4, #4]
 80011c2:	4e1e      	ldr	r6, [pc, #120]	; (800123c <HAL_RCC_ClockConfig+0x12c>)
 80011c4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011c8:	d11b      	bne.n	8001202 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ce:	d0a4      	beq.n	800111a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011d0:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011d6:	f023 0303 	bic.w	r3, r3, #3
 80011da:	4313      	orrs	r3, r2
 80011dc:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80011de:	f7fe ffff 	bl	80001e0 <HAL_GetTick>
 80011e2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e4:	6873      	ldr	r3, [r6, #4]
 80011e6:	6862      	ldr	r2, [r4, #4]
 80011e8:	f003 030c 	and.w	r3, r3, #12
 80011ec:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80011f0:	d0a1      	beq.n	8001136 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f2:	f7fe fff5 	bl	80001e0 <HAL_GetTick>
 80011f6:	1bc0      	subs	r0, r0, r7
 80011f8:	4540      	cmp	r0, r8
 80011fa:	d9f3      	bls.n	80011e4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80011fc:	2003      	movs	r0, #3
}
 80011fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001202:	2a02      	cmp	r2, #2
 8001204:	d102      	bne.n	800120c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001206:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800120a:	e7e0      	b.n	80011ce <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	f013 0f02 	tst.w	r3, #2
 8001210:	e7dd      	b.n	80011ce <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001212:	6813      	ldr	r3, [r2, #0]
 8001214:	f023 0307 	bic.w	r3, r3, #7
 8001218:	432b      	orrs	r3, r5
 800121a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121c:	6813      	ldr	r3, [r2, #0]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	429d      	cmp	r5, r3
 8001224:	f47f af79 	bne.w	800111a <HAL_RCC_ClockConfig+0xa>
 8001228:	e78b      	b.n	8001142 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800122a:	686b      	ldr	r3, [r5, #4]
 800122c:	68e1      	ldr	r1, [r4, #12]
 800122e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001232:	430b      	orrs	r3, r1
 8001234:	606b      	str	r3, [r5, #4]
 8001236:	e789      	b.n	800114c <HAL_RCC_ClockConfig+0x3c>
 8001238:	40022000 	.word	0x40022000
 800123c:	40021000 	.word	0x40021000
 8001240:	08004b76 	.word	0x08004b76
 8001244:	20000074 	.word	0x20000074
 8001248:	20000004 	.word	0x20000004

0800124c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <HAL_RCC_GetPCLK1Freq+0x14>)
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001256:	5cd3      	ldrb	r3, [r2, r3]
 8001258:	4a03      	ldr	r2, [pc, #12]	; (8001268 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800125a:	6810      	ldr	r0, [r2, #0]
}
 800125c:	40d8      	lsrs	r0, r3
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000
 8001264:	08004b86 	.word	0x08004b86
 8001268:	20000074 	.word	0x20000074

0800126c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <HAL_RCC_GetPCLK2Freq+0x14>)
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	4a03      	ldr	r2, [pc, #12]	; (8001288 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800127a:	6810      	ldr	r0, [r2, #0]
}
 800127c:	40d8      	lsrs	r0, r3
 800127e:	4770      	bx	lr
 8001280:	40021000 	.word	0x40021000
 8001284:	08004b86 	.word	0x08004b86
 8001288:	20000074 	.word	0x20000074

0800128c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800128c:	6803      	ldr	r3, [r0, #0]
{
 800128e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001292:	07d9      	lsls	r1, r3, #31
{
 8001294:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001296:	d520      	bpl.n	80012da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001298:	4c35      	ldr	r4, [pc, #212]	; (8001370 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800129a:	69e3      	ldr	r3, [r4, #28]
 800129c:	00da      	lsls	r2, r3, #3
 800129e:	d432      	bmi.n	8001306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80012a0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	69e3      	ldr	r3, [r4, #28]
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	61e3      	str	r3, [r4, #28]
 80012aa:	69e3      	ldr	r3, [r4, #28]
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b4:	4e2f      	ldr	r6, [pc, #188]	; (8001374 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80012b6:	6833      	ldr	r3, [r6, #0]
 80012b8:	05db      	lsls	r3, r3, #23
 80012ba:	d526      	bpl.n	800130a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80012bc:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012be:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80012c2:	d136      	bne.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80012c4:	6a23      	ldr	r3, [r4, #32]
 80012c6:	686a      	ldr	r2, [r5, #4]
 80012c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012cc:	4313      	orrs	r3, r2
 80012ce:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012d0:	b11f      	cbz	r7, 80012da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d2:	69e3      	ldr	r3, [r4, #28]
 80012d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80012da:	6828      	ldr	r0, [r5, #0]
 80012dc:	0783      	lsls	r3, r0, #30
 80012de:	d506      	bpl.n	80012ee <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80012e0:	4a23      	ldr	r2, [pc, #140]	; (8001370 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80012e2:	68a9      	ldr	r1, [r5, #8]
 80012e4:	6853      	ldr	r3, [r2, #4]
 80012e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012ea:	430b      	orrs	r3, r1
 80012ec:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80012ee:	f010 0010 	ands.w	r0, r0, #16
 80012f2:	d01b      	beq.n	800132c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80012f4:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80012f6:	68e9      	ldr	r1, [r5, #12]
 80012f8:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80012fa:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80012fc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001300:	430b      	orrs	r3, r1
 8001302:	6053      	str	r3, [r2, #4]
 8001304:	e012      	b.n	800132c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001306:	2700      	movs	r7, #0
 8001308:	e7d4      	b.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130a:	6833      	ldr	r3, [r6, #0]
 800130c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001310:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001312:	f7fe ff65 	bl	80001e0 <HAL_GetTick>
 8001316:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001318:	6833      	ldr	r3, [r6, #0]
 800131a:	05d8      	lsls	r0, r3, #23
 800131c:	d4ce      	bmi.n	80012bc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131e:	f7fe ff5f 	bl	80001e0 <HAL_GetTick>
 8001322:	eba0 0008 	sub.w	r0, r0, r8
 8001326:	2864      	cmp	r0, #100	; 0x64
 8001328:	d9f6      	bls.n	8001318 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800132a:	2003      	movs	r0, #3
}
 800132c:	b002      	add	sp, #8
 800132e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001332:	686a      	ldr	r2, [r5, #4]
 8001334:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001338:	4293      	cmp	r3, r2
 800133a:	d0c3      	beq.n	80012c4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800133c:	2001      	movs	r0, #1
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001340:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001342:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001344:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001346:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800134a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800134c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800134e:	07d9      	lsls	r1, r3, #31
 8001350:	d5b8      	bpl.n	80012c4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001352:	f7fe ff45 	bl	80001e0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001356:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800135a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135c:	6a23      	ldr	r3, [r4, #32]
 800135e:	079a      	lsls	r2, r3, #30
 8001360:	d4b0      	bmi.n	80012c4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001362:	f7fe ff3d 	bl	80001e0 <HAL_GetTick>
 8001366:	1b80      	subs	r0, r0, r6
 8001368:	4540      	cmp	r0, r8
 800136a:	d9f7      	bls.n	800135c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800136c:	e7dd      	b.n	800132a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000
 8001374:	40007000 	.word	0x40007000
 8001378:	42420440 	.word	0x42420440

0800137c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800137c:	6a03      	ldr	r3, [r0, #32]
{
 800137e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001386:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001388:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800138a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800138c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800138e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001392:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001394:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001396:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800139a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800139c:	4d0a      	ldr	r5, [pc, #40]	; (80013c8 <TIM_OC1_SetConfig+0x4c>)
 800139e:	42a8      	cmp	r0, r5
 80013a0:	d10b      	bne.n	80013ba <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80013a2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80013a4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80013a8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80013aa:	698e      	ldr	r6, [r1, #24]
 80013ac:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80013ae:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80013b2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80013b4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80013b8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013ba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80013bc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80013be:	684a      	ldr	r2, [r1, #4]
 80013c0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013c2:	6203      	str	r3, [r0, #32]
 80013c4:	bd70      	pop	{r4, r5, r6, pc}
 80013c6:	bf00      	nop
 80013c8:	40012c00 	.word	0x40012c00

080013cc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80013cc:	6a03      	ldr	r3, [r0, #32]
{
 80013ce:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80013d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013d4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013d6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013d8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013da:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80013dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80013de:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80013e2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013e4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80013e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80013ee:	4d0b      	ldr	r5, [pc, #44]	; (800141c <TIM_OC3_SetConfig+0x50>)
 80013f0:	42a8      	cmp	r0, r5
 80013f2:	d10d      	bne.n	8001410 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013f4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80013f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013fe:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001400:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001402:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001406:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001408:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800140c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001410:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001412:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001414:	684a      	ldr	r2, [r1, #4]
 8001416:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001418:	6203      	str	r3, [r0, #32]
 800141a:	bd70      	pop	{r4, r5, r6, pc}
 800141c:	40012c00 	.word	0x40012c00

08001420 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001420:	6a03      	ldr	r3, [r0, #32]
{
 8001422:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001424:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001428:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800142a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800142c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800142e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001430:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001432:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001436:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800143a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800143c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001440:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001444:	4d06      	ldr	r5, [pc, #24]	; (8001460 <TIM_OC4_SetConfig+0x40>)
 8001446:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001448:	bf02      	ittt	eq
 800144a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800144c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001450:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001454:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001456:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001458:	684a      	ldr	r2, [r1, #4]
 800145a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800145c:	6203      	str	r3, [r0, #32]
 800145e:	bd30      	pop	{r4, r5, pc}
 8001460:	40012c00 	.word	0x40012c00

08001464 <HAL_TIM_Base_MspInit>:
 8001464:	4770      	bx	lr

08001466 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001466:	2302      	movs	r3, #2
 8001468:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800146c:	6803      	ldr	r3, [r0, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001474:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001476:	bf1e      	ittt	ne
 8001478:	681a      	ldrne	r2, [r3, #0]
 800147a:	f042 0201 	orrne.w	r2, r2, #1
 800147e:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001480:	2301      	movs	r3, #1
 8001482:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8001486:	2000      	movs	r0, #0
 8001488:	4770      	bx	lr

0800148a <HAL_TIM_PWM_MspInit>:
 800148a:	4770      	bx	lr

0800148c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800148c:	4a1a      	ldr	r2, [pc, #104]	; (80014f8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800148e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001490:	4290      	cmp	r0, r2
 8001492:	d00a      	beq.n	80014aa <TIM_Base_SetConfig+0x1e>
 8001494:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001498:	d007      	beq.n	80014aa <TIM_Base_SetConfig+0x1e>
 800149a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800149e:	4290      	cmp	r0, r2
 80014a0:	d003      	beq.n	80014aa <TIM_Base_SetConfig+0x1e>
 80014a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014a6:	4290      	cmp	r0, r2
 80014a8:	d115      	bne.n	80014d6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80014aa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80014b0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014b2:	4a11      	ldr	r2, [pc, #68]	; (80014f8 <TIM_Base_SetConfig+0x6c>)
 80014b4:	4290      	cmp	r0, r2
 80014b6:	d00a      	beq.n	80014ce <TIM_Base_SetConfig+0x42>
 80014b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80014bc:	d007      	beq.n	80014ce <TIM_Base_SetConfig+0x42>
 80014be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80014c2:	4290      	cmp	r0, r2
 80014c4:	d003      	beq.n	80014ce <TIM_Base_SetConfig+0x42>
 80014c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014ca:	4290      	cmp	r0, r2
 80014cc:	d103      	bne.n	80014d6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014ce:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80014d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014d6:	694a      	ldr	r2, [r1, #20]
 80014d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014dc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80014de:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014e0:	688b      	ldr	r3, [r1, #8]
 80014e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80014e4:	680b      	ldr	r3, [r1, #0]
 80014e6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <TIM_Base_SetConfig+0x6c>)
 80014ea:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80014ec:	bf04      	itt	eq
 80014ee:	690b      	ldreq	r3, [r1, #16]
 80014f0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80014f2:	2301      	movs	r3, #1
 80014f4:	6143      	str	r3, [r0, #20]
 80014f6:	4770      	bx	lr
 80014f8:	40012c00 	.word	0x40012c00

080014fc <HAL_TIM_Base_Init>:
{
 80014fc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80014fe:	4604      	mov	r4, r0
 8001500:	b1a0      	cbz	r0, 800152c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001502:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001506:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800150a:	b91b      	cbnz	r3, 8001514 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800150c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001510:	f7ff ffa8 	bl	8001464 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001514:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001516:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001518:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800151c:	1d21      	adds	r1, r4, #4
 800151e:	f7ff ffb5 	bl	800148c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001522:	2301      	movs	r3, #1
  return HAL_OK;
 8001524:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001526:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800152a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800152c:	2001      	movs	r0, #1
}
 800152e:	bd10      	pop	{r4, pc}

08001530 <HAL_TIM_PWM_Init>:
{
 8001530:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001532:	4604      	mov	r4, r0
 8001534:	b1a0      	cbz	r0, 8001560 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001536:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800153a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800153e:	b91b      	cbnz	r3, 8001548 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001540:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001544:	f7ff ffa1 	bl	800148a <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001548:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800154a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800154c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001550:	1d21      	adds	r1, r4, #4
 8001552:	f7ff ff9b 	bl	800148c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001556:	2301      	movs	r3, #1
  return HAL_OK;
 8001558:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800155a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800155e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001560:	2001      	movs	r0, #1
}
 8001562:	bd10      	pop	{r4, pc}

08001564 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001564:	6a03      	ldr	r3, [r0, #32]
{
 8001566:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001568:	f023 0310 	bic.w	r3, r3, #16
 800156c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800156e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001570:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001572:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001574:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001576:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800157a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800157e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001580:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001584:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001588:	4d0b      	ldr	r5, [pc, #44]	; (80015b8 <TIM_OC2_SetConfig+0x54>)
 800158a:	42a8      	cmp	r0, r5
 800158c:	d10d      	bne.n	80015aa <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800158e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001594:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001598:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800159a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800159c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80015a0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80015a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80015a6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80015aa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80015ac:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80015ae:	684a      	ldr	r2, [r1, #4]
 80015b0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80015b2:	6203      	str	r3, [r0, #32]
 80015b4:	bd70      	pop	{r4, r5, r6, pc}
 80015b6:	bf00      	nop
 80015b8:	40012c00 	.word	0x40012c00

080015bc <HAL_TIM_PWM_ConfigChannel>:
{
 80015bc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80015be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80015c2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	f04f 0002 	mov.w	r0, #2
 80015ca:	d025      	beq.n	8001618 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80015cc:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80015ce:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80015d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80015d6:	2a0c      	cmp	r2, #12
 80015d8:	d818      	bhi.n	800160c <HAL_TIM_PWM_ConfigChannel+0x50>
 80015da:	e8df f002 	tbb	[pc, r2]
 80015de:	1707      	.short	0x1707
 80015e0:	171e1717 	.word	0x171e1717
 80015e4:	172f1717 	.word	0x172f1717
 80015e8:	1717      	.short	0x1717
 80015ea:	40          	.byte	0x40
 80015eb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80015ec:	6820      	ldr	r0, [r4, #0]
 80015ee:	f7ff fec5 	bl	800137c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80015f2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80015f4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80015f6:	699a      	ldr	r2, [r3, #24]
 80015f8:	f042 0208 	orr.w	r2, r2, #8
 80015fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80015fe:	699a      	ldr	r2, [r3, #24]
 8001600:	f022 0204 	bic.w	r2, r2, #4
 8001604:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001606:	699a      	ldr	r2, [r3, #24]
 8001608:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800160a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800160c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800160e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001610:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001614:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001618:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800161a:	6820      	ldr	r0, [r4, #0]
 800161c:	f7ff ffa2 	bl	8001564 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001620:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001622:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001624:	699a      	ldr	r2, [r3, #24]
 8001626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800162a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800162c:	699a      	ldr	r2, [r3, #24]
 800162e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001634:	699a      	ldr	r2, [r3, #24]
 8001636:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800163a:	e7e6      	b.n	800160a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800163c:	6820      	ldr	r0, [r4, #0]
 800163e:	f7ff fec5 	bl	80013cc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001642:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001644:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001646:	69da      	ldr	r2, [r3, #28]
 8001648:	f042 0208 	orr.w	r2, r2, #8
 800164c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800164e:	69da      	ldr	r2, [r3, #28]
 8001650:	f022 0204 	bic.w	r2, r2, #4
 8001654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001656:	69da      	ldr	r2, [r3, #28]
 8001658:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800165a:	61da      	str	r2, [r3, #28]
      break;
 800165c:	e7d6      	b.n	800160c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800165e:	6820      	ldr	r0, [r4, #0]
 8001660:	f7ff fede 	bl	8001420 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001664:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001666:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800166e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001670:	69da      	ldr	r2, [r3, #28]
 8001672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001676:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001678:	69da      	ldr	r2, [r3, #28]
 800167a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800167e:	e7ec      	b.n	800165a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001680:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001682:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001684:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001686:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800168a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800168e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001690:	6083      	str	r3, [r0, #8]
 8001692:	bd10      	pop	{r4, pc}

08001694 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001694:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001698:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800169a:	2b01      	cmp	r3, #1
{
 800169c:	4604      	mov	r4, r0
 800169e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80016a2:	d019      	beq.n	80016d8 <HAL_TIM_ConfigClockSource+0x44>
 80016a4:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80016a6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80016aa:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80016ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80016b0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80016ba:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80016bc:	680b      	ldr	r3, [r1, #0]
 80016be:	2b40      	cmp	r3, #64	; 0x40
 80016c0:	d065      	beq.n	800178e <HAL_TIM_ConfigClockSource+0xfa>
 80016c2:	d815      	bhi.n	80016f0 <HAL_TIM_ConfigClockSource+0x5c>
 80016c4:	2b10      	cmp	r3, #16
 80016c6:	d00c      	beq.n	80016e2 <HAL_TIM_ConfigClockSource+0x4e>
 80016c8:	d807      	bhi.n	80016da <HAL_TIM_ConfigClockSource+0x46>
 80016ca:	b153      	cbz	r3, 80016e2 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80016cc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80016ce:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80016d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80016d4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80016d8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80016da:	2b20      	cmp	r3, #32
 80016dc:	d001      	beq.n	80016e2 <HAL_TIM_ConfigClockSource+0x4e>
 80016de:	2b30      	cmp	r3, #48	; 0x30
 80016e0:	d1f4      	bne.n	80016cc <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80016e2:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80016e4:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80016e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80016ec:	4313      	orrs	r3, r2
 80016ee:	e01a      	b.n	8001726 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80016f0:	2b60      	cmp	r3, #96	; 0x60
 80016f2:	d034      	beq.n	800175e <HAL_TIM_ConfigClockSource+0xca>
 80016f4:	d819      	bhi.n	800172a <HAL_TIM_ConfigClockSource+0x96>
 80016f6:	2b50      	cmp	r3, #80	; 0x50
 80016f8:	d1e8      	bne.n	80016cc <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80016fa:	684a      	ldr	r2, [r1, #4]
 80016fc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80016fe:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001700:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001702:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001706:	f025 0501 	bic.w	r5, r5, #1
 800170a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800170c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800170e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001710:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001714:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001718:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800171a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800171c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800171e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001722:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001726:	6083      	str	r3, [r0, #8]
 8001728:	e7d0      	b.n	80016cc <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800172a:	2b70      	cmp	r3, #112	; 0x70
 800172c:	d00c      	beq.n	8001748 <HAL_TIM_ConfigClockSource+0xb4>
 800172e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001732:	d1cb      	bne.n	80016cc <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001734:	68cb      	ldr	r3, [r1, #12]
 8001736:	684a      	ldr	r2, [r1, #4]
 8001738:	6889      	ldr	r1, [r1, #8]
 800173a:	f7ff ffa1 	bl	8001680 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800173e:	6822      	ldr	r2, [r4, #0]
 8001740:	6893      	ldr	r3, [r2, #8]
 8001742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001746:	e008      	b.n	800175a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001748:	68cb      	ldr	r3, [r1, #12]
 800174a:	684a      	ldr	r2, [r1, #4]
 800174c:	6889      	ldr	r1, [r1, #8]
 800174e:	f7ff ff97 	bl	8001680 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001752:	6822      	ldr	r2, [r4, #0]
 8001754:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001756:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800175a:	6093      	str	r3, [r2, #8]
      break;
 800175c:	e7b6      	b.n	80016cc <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800175e:	684d      	ldr	r5, [r1, #4]
 8001760:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001762:	6a01      	ldr	r1, [r0, #32]
 8001764:	f021 0110 	bic.w	r1, r1, #16
 8001768:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800176a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800176c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800176e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001772:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001776:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800177a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800177e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001780:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001782:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001788:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800178c:	e7cb      	b.n	8001726 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800178e:	684a      	ldr	r2, [r1, #4]
 8001790:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001792:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001794:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001796:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800179a:	f025 0501 	bic.w	r5, r5, #1
 800179e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017a0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80017a2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017a8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80017ac:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80017ae:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80017b0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80017b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017b6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80017ba:	e7b4      	b.n	8001726 <HAL_TIM_ConfigClockSource+0x92>

080017bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80017bc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80017be:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80017c0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80017c2:	f001 011f 	and.w	r1, r1, #31
 80017c6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80017c8:	ea23 0304 	bic.w	r3, r3, r4
 80017cc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80017ce:	6a03      	ldr	r3, [r0, #32]
 80017d0:	408a      	lsls	r2, r1
 80017d2:	431a      	orrs	r2, r3
 80017d4:	6202      	str	r2, [r0, #32]
 80017d6:	bd10      	pop	{r4, pc}

080017d8 <HAL_TIM_PWM_Start>:
{
 80017d8:	b510      	push	{r4, lr}
 80017da:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80017dc:	2201      	movs	r2, #1
 80017de:	6800      	ldr	r0, [r0, #0]
 80017e0:	f7ff ffec 	bl	80017bc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	4a09      	ldr	r2, [pc, #36]	; (800180c <HAL_TIM_PWM_Start+0x34>)
}
 80017e8:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80017ea:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80017ec:	bf02      	ittt	eq
 80017ee:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80017f0:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80017f4:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017fc:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80017fe:	bf1e      	ittt	ne
 8001800:	681a      	ldrne	r2, [r3, #0]
 8001802:	f042 0201 	orrne.w	r2, r2, #1
 8001806:	601a      	strne	r2, [r3, #0]
}
 8001808:	bd10      	pop	{r4, pc}
 800180a:	bf00      	nop
 800180c:	40012c00 	.word	0x40012c00

08001810 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001810:	6803      	ldr	r3, [r0, #0]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001818:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	f022 0201 	bic.w	r2, r2, #1
 8001820:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001822:	2320      	movs	r3, #32
 8001824:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001828:	4770      	bx	lr
	...

0800182c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800182c:	b538      	push	{r3, r4, r5, lr}
 800182e:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001830:	6803      	ldr	r3, [r0, #0]
 8001832:	68c1      	ldr	r1, [r0, #12]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	2419      	movs	r4, #25
 8001838:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800183c:	430a      	orrs	r2, r1
 800183e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001840:	6882      	ldr	r2, [r0, #8]
 8001842:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001844:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001846:	4302      	orrs	r2, r0
 8001848:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 800184a:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800184e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001852:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001854:	430a      	orrs	r2, r1
 8001856:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	69a9      	ldr	r1, [r5, #24]
 800185c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001860:	430a      	orrs	r2, r1
 8001862:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <UART_SetConfig+0x70>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d114      	bne.n	8001894 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800186a:	f7ff fcff 	bl	800126c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800186e:	4360      	muls	r0, r4
 8001870:	686c      	ldr	r4, [r5, #4]
 8001872:	2264      	movs	r2, #100	; 0x64
 8001874:	00a4      	lsls	r4, r4, #2
 8001876:	fbb0 f0f4 	udiv	r0, r0, r4
 800187a:	fbb0 f4f2 	udiv	r4, r0, r2
 800187e:	fb02 0314 	mls	r3, r2, r4, r0
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	3332      	adds	r3, #50	; 0x32
 8001886:	fbb3 f3f2 	udiv	r3, r3, r2
 800188a:	6829      	ldr	r1, [r5, #0]
 800188c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8001890:	608b      	str	r3, [r1, #8]
 8001892:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001894:	f7ff fcda 	bl	800124c <HAL_RCC_GetPCLK1Freq>
 8001898:	e7e9      	b.n	800186e <UART_SetConfig+0x42>
 800189a:	bf00      	nop
 800189c:	40013800 	.word	0x40013800

080018a0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80018a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a2:	4604      	mov	r4, r0
 80018a4:	460e      	mov	r6, r1
 80018a6:	4617      	mov	r7, r2
 80018a8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018aa:	6821      	ldr	r1, [r4, #0]
 80018ac:	680b      	ldr	r3, [r1, #0]
 80018ae:	ea36 0303 	bics.w	r3, r6, r3
 80018b2:	d101      	bne.n	80018b8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80018b4:	2000      	movs	r0, #0
}
 80018b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80018b8:	1c6b      	adds	r3, r5, #1
 80018ba:	d0f7      	beq.n	80018ac <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018bc:	b995      	cbnz	r5, 80018e4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018be:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80018c0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80018c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	f022 0201 	bic.w	r2, r2, #1
 80018d0:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80018d2:	2320      	movs	r3, #32
 80018d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80018d8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80018dc:	2300      	movs	r3, #0
 80018de:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80018e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018e4:	f7fe fc7c 	bl	80001e0 <HAL_GetTick>
 80018e8:	1bc0      	subs	r0, r0, r7
 80018ea:	4285      	cmp	r5, r0
 80018ec:	d2dd      	bcs.n	80018aa <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80018ee:	e7e6      	b.n	80018be <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080018f0 <HAL_UART_Init>:
{
 80018f0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80018f2:	4604      	mov	r4, r0
 80018f4:	b340      	cbz	r0, 8001948 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80018f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80018fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018fe:	b91b      	cbnz	r3, 8001908 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001900:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001904:	f001 ff88 	bl	8003818 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001908:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800190a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800190c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001910:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001912:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001918:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800191a:	f7ff ff87 	bl	800182c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800191e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001920:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001930:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001938:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800193a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800193c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800193e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001942:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001946:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001948:	2001      	movs	r0, #1
}
 800194a:	bd10      	pop	{r4, pc}

0800194c <HAL_HalfDuplex_Init>:
{
 800194c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800194e:	4604      	mov	r4, r0
 8001950:	b360      	cbz	r0, 80019ac <HAL_HalfDuplex_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001952:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001956:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800195a:	b91b      	cbnz	r3, 8001964 <HAL_HalfDuplex_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800195c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001960:	f001 ff5a 	bl	8003818 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001964:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001966:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001968:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800196c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800196e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001970:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001974:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001976:	f7ff ff59 	bl	800182c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800197a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800197c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8001986:	695a      	ldr	r2, [r3, #20]
 8001988:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800198c:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	f042 0208 	orr.w	r2, r2, #8
 8001994:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800199c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800199e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019a0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80019a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80019a6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80019aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019ac:	2001      	movs	r0, #1
}
 80019ae:	bd10      	pop	{r4, pc}

080019b0 <HAL_UART_Transmit>:
{
 80019b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019b4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80019b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80019ba:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80019bc:	2b20      	cmp	r3, #32
{
 80019be:	460d      	mov	r5, r1
 80019c0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80019c2:	d14e      	bne.n	8001a62 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 80019c4:	2900      	cmp	r1, #0
 80019c6:	d049      	beq.n	8001a5c <HAL_UART_Transmit+0xac>
 80019c8:	2a00      	cmp	r2, #0
 80019ca:	d047      	beq.n	8001a5c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80019cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d046      	beq.n	8001a62 <HAL_UART_Transmit+0xb2>
 80019d4:	2301      	movs	r3, #1
 80019d6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019da:	2300      	movs	r3, #0
 80019dc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019de:	2321      	movs	r3, #33	; 0x21
 80019e0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80019e4:	f7fe fbfc 	bl	80001e0 <HAL_GetTick>
 80019e8:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80019ea:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80019ee:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80019f2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b96b      	cbnz	r3, 8001a14 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019f8:	463b      	mov	r3, r7
 80019fa:	4632      	mov	r2, r6
 80019fc:	2140      	movs	r1, #64	; 0x40
 80019fe:	4620      	mov	r0, r4
 8001a00:	f7ff ff4e 	bl	80018a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a04:	b9a8      	cbnz	r0, 8001a32 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001a06:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001a08:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001a0c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001a14:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a16:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a1e:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a20:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a26:	4620      	mov	r0, r4
 8001a28:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a2a:	d10e      	bne.n	8001a4a <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a2c:	f7ff ff38 	bl	80018a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a30:	b110      	cbz	r0, 8001a38 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001a32:	2003      	movs	r0, #3
 8001a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001a38:	882b      	ldrh	r3, [r5, #0]
 8001a3a:	6822      	ldr	r2, [r4, #0]
 8001a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a40:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001a42:	6923      	ldr	r3, [r4, #16]
 8001a44:	b943      	cbnz	r3, 8001a58 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8001a46:	3502      	adds	r5, #2
 8001a48:	e7d3      	b.n	80019f2 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a4a:	f7ff ff29 	bl	80018a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	d1ef      	bne.n	8001a32 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	782a      	ldrb	r2, [r5, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	3501      	adds	r5, #1
 8001a5a:	e7ca      	b.n	80019f2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001a62:	2002      	movs	r0, #2
}
 8001a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a68 <HAL_UART_Receive>:
{
 8001a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a6c:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a6e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001a72:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a74:	2b20      	cmp	r3, #32
{
 8001a76:	460d      	mov	r5, r1
 8001a78:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a7a:	d151      	bne.n	8001b20 <HAL_UART_Receive+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8001a7c:	2900      	cmp	r1, #0
 8001a7e:	d04c      	beq.n	8001b1a <HAL_UART_Receive+0xb2>
 8001a80:	2a00      	cmp	r2, #0
 8001a82:	d04a      	beq.n	8001b1a <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 8001a84:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d049      	beq.n	8001b20 <HAL_UART_Receive+0xb8>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a96:	2322      	movs	r3, #34	; 0x22
 8001a98:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8001a9c:	f7fe fba0 	bl	80001e0 <HAL_GetTick>
 8001aa0:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 8001aa2:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001aa6:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001aaa:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8001aac:	b280      	uxth	r0, r0
 8001aae:	b930      	cbnz	r0, 8001abe <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8001ab0:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001ab2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 8001ab6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8001aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8001abe:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ac0:	4632      	mov	r2, r6
      huart->RxXferCount--;
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ac8:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001aca:	2120      	movs	r1, #32
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ad4:	d112      	bne.n	8001afc <HAL_UART_Receive+0x94>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ad6:	f7ff fee3 	bl	80018a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ada:	b110      	cbz	r0, 8001ae2 <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8001adc:	2003      	movs	r0, #3
 8001ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ae2:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ae4:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ae6:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ae8:	b922      	cbnz	r2, 8001af4 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aee:	f825 3b02 	strh.w	r3, [r5], #2
 8001af2:	e7da      	b.n	8001aaa <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f825 3b01 	strh.w	r3, [r5], #1
 8001afa:	e7d6      	b.n	8001aaa <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001afc:	f7ff fed0 	bl	80018a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d1eb      	bne.n	8001adc <HAL_UART_Receive+0x74>
 8001b04:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b06:	6921      	ldr	r1, [r4, #16]
 8001b08:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b0a:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b0c:	b911      	cbnz	r1, 8001b14 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b0e:	702b      	strb	r3, [r5, #0]
 8001b10:	4615      	mov	r5, r2
 8001b12:	e7ca      	b.n	8001aaa <HAL_UART_Receive+0x42>
 8001b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b18:	e7f9      	b.n	8001b0e <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001b20:	2002      	movs	r0, #2
}
 8001b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001b26 <HAL_UART_TxCpltCallback>:
 8001b26:	4770      	bx	lr

08001b28 <HAL_UART_RxCpltCallback>:
 8001b28:	4770      	bx	lr

08001b2a <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b2a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001b2e:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b30:	2b22      	cmp	r3, #34	; 0x22
 8001b32:	d136      	bne.n	8001ba2 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b34:	6883      	ldr	r3, [r0, #8]
 8001b36:	6901      	ldr	r1, [r0, #16]
 8001b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b3c:	6802      	ldr	r2, [r0, #0]
 8001b3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b40:	d123      	bne.n	8001b8a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b42:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001b44:	b9e9      	cbnz	r1, 8001b82 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b4a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001b4e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001b50:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001b52:	3c01      	subs	r4, #1
 8001b54:	b2a4      	uxth	r4, r4
 8001b56:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001b58:	b98c      	cbnz	r4, 8001b7e <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001b5a:	6803      	ldr	r3, [r0, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	f022 0220 	bic.w	r2, r2, #32
 8001b62:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b6a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001b6c:	695a      	ldr	r2, [r3, #20]
 8001b6e:	f022 0201 	bic.w	r2, r2, #1
 8001b72:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001b74:	2320      	movs	r3, #32
 8001b76:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001b7a:	f7ff ffd5 	bl	8001b28 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001b7e:	2000      	movs	r0, #0
}
 8001b80:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	f823 2b01 	strh.w	r2, [r3], #1
 8001b88:	e7e1      	b.n	8001b4e <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001b8a:	b921      	cbnz	r1, 8001b96 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b8c:	1c59      	adds	r1, r3, #1
 8001b8e:	6852      	ldr	r2, [r2, #4]
 8001b90:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	e7dc      	b.n	8001b50 <UART_Receive_IT+0x26>
 8001b96:	6852      	ldr	r2, [r2, #4]
 8001b98:	1c59      	adds	r1, r3, #1
 8001b9a:	6281      	str	r1, [r0, #40]	; 0x28
 8001b9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ba0:	e7f7      	b.n	8001b92 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	bd10      	pop	{r4, pc}

08001ba6 <HAL_UART_ErrorCallback>:
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ba8:	6803      	ldr	r3, [r0, #0]
{
 8001baa:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bac:	681a      	ldr	r2, [r3, #0]
{
 8001bae:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001bb0:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bb2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001bb4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001bb6:	d107      	bne.n	8001bc8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bb8:	0696      	lsls	r6, r2, #26
 8001bba:	d55a      	bpl.n	8001c72 <HAL_UART_IRQHandler+0xca>
 8001bbc:	068d      	lsls	r5, r1, #26
 8001bbe:	d558      	bpl.n	8001c72 <HAL_UART_IRQHandler+0xca>
}
 8001bc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001bc4:	f7ff bfb1 	b.w	8001b2a <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001bc8:	f015 0501 	ands.w	r5, r5, #1
 8001bcc:	d102      	bne.n	8001bd4 <HAL_UART_IRQHandler+0x2c>
 8001bce:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001bd2:	d04e      	beq.n	8001c72 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001bd4:	07d3      	lsls	r3, r2, #31
 8001bd6:	d505      	bpl.n	8001be4 <HAL_UART_IRQHandler+0x3c>
 8001bd8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bda:	bf42      	ittt	mi
 8001bdc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001bde:	f043 0301 	orrmi.w	r3, r3, #1
 8001be2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001be4:	0750      	lsls	r0, r2, #29
 8001be6:	d504      	bpl.n	8001bf2 <HAL_UART_IRQHandler+0x4a>
 8001be8:	b11d      	cbz	r5, 8001bf2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001bea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bf2:	0793      	lsls	r3, r2, #30
 8001bf4:	d504      	bpl.n	8001c00 <HAL_UART_IRQHandler+0x58>
 8001bf6:	b11d      	cbz	r5, 8001c00 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001bf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c00:	0716      	lsls	r6, r2, #28
 8001c02:	d504      	bpl.n	8001c0e <HAL_UART_IRQHandler+0x66>
 8001c04:	b11d      	cbz	r5, 8001c0e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d066      	beq.n	8001ce2 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c14:	0695      	lsls	r5, r2, #26
 8001c16:	d504      	bpl.n	8001c22 <HAL_UART_IRQHandler+0x7a>
 8001c18:	0688      	lsls	r0, r1, #26
 8001c1a:	d502      	bpl.n	8001c22 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f7ff ff84 	bl	8001b2a <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c22:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001c24:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c26:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c28:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c2a:	0711      	lsls	r1, r2, #28
 8001c2c:	d402      	bmi.n	8001c34 <HAL_UART_IRQHandler+0x8c>
 8001c2e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001c32:	d01a      	beq.n	8001c6a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001c34:	f7ff fdec 	bl	8001810 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	0652      	lsls	r2, r2, #25
 8001c3e:	d510      	bpl.n	8001c62 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c40:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001c42:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c48:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001c4a:	b150      	cbz	r0, 8001c62 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c4c:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <HAL_UART_IRQHandler+0x13c>)
 8001c4e:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c50:	f7fe fc4e 	bl	80004f0 <HAL_DMA_Abort_IT>
 8001c54:	2800      	cmp	r0, #0
 8001c56:	d044      	beq.n	8001ce2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c58:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c60:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7ff ff9f 	bl	8001ba6 <HAL_UART_ErrorCallback>
 8001c68:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001c6a:	f7ff ff9c 	bl	8001ba6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001c70:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c72:	0616      	lsls	r6, r2, #24
 8001c74:	d527      	bpl.n	8001cc6 <HAL_UART_IRQHandler+0x11e>
 8001c76:	060d      	lsls	r5, r1, #24
 8001c78:	d525      	bpl.n	8001cc6 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c7a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001c7e:	2a21      	cmp	r2, #33	; 0x21
 8001c80:	d12f      	bne.n	8001ce2 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c82:	68a2      	ldr	r2, [r4, #8]
 8001c84:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001c88:	6a22      	ldr	r2, [r4, #32]
 8001c8a:	d117      	bne.n	8001cbc <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001c8c:	8811      	ldrh	r1, [r2, #0]
 8001c8e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001c92:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001c94:	6921      	ldr	r1, [r4, #16]
 8001c96:	b979      	cbnz	r1, 8001cb8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001c98:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001c9a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001c9c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001c9e:	3a01      	subs	r2, #1
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001ca4:	b9ea      	cbnz	r2, 8001ce2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cac:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001cb8:	3201      	adds	r2, #1
 8001cba:	e7ee      	b.n	8001c9a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001cbc:	1c51      	adds	r1, r2, #1
 8001cbe:	6221      	str	r1, [r4, #32]
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	e7ea      	b.n	8001c9c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001cc6:	0650      	lsls	r0, r2, #25
 8001cc8:	d50b      	bpl.n	8001ce2 <HAL_UART_IRQHandler+0x13a>
 8001cca:	064a      	lsls	r2, r1, #25
 8001ccc:	d509      	bpl.n	8001ce2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001cce:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001cd0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cd6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001cd8:	2320      	movs	r3, #32
 8001cda:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001cde:	f7ff ff22 	bl	8001b26 <HAL_UART_TxCpltCallback>
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}
 8001ce4:	08001ce9 	.word	0x08001ce9

08001ce8 <UART_DMAAbortOnError>:
{
 8001ce8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001cea:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cec:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001cee:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001cf0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001cf2:	f7ff ff58 	bl	8001ba6 <HAL_UART_ErrorCallback>
 8001cf6:	bd08      	pop	{r3, pc}

08001cf8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001cfa:	780d      	ldrb	r5, [r1, #0]
{
 8001cfc:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001cfe:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8001d02:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001d04:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8001d08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d0c:	0412      	lsls	r2, r2, #16
 8001d0e:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8001d10:	2803      	cmp	r0, #3
 8001d12:	d84e      	bhi.n	8001db2 <USB_ActivateEndpoint+0xba>
 8001d14:	e8df f000 	tbb	[pc, r0]
 8001d18:	47044a02 	.word	0x47044a02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8001d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8001d20:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8001d22:	f248 0480 	movw	r4, #32896	; 0x8080
 8001d26:	4322      	orrs	r2, r4
 8001d28:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001d2c:	780e      	ldrb	r6, [r1, #0]
 8001d2e:	4dab      	ldr	r5, [pc, #684]	; (8001fdc <USB_ActivateEndpoint+0x2e4>)
 8001d30:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8001d34:	4334      	orrs	r4, r6
 8001d36:	b292      	uxth	r2, r2
 8001d38:	402a      	ands	r2, r5
 8001d3a:	4322      	orrs	r2, r4
 8001d3c:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8001d40:	7b0c      	ldrb	r4, [r1, #12]
 8001d42:	780a      	ldrb	r2, [r1, #0]
 8001d44:	2c00      	cmp	r4, #0
 8001d46:	f040 8088 	bne.w	8001e5a <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 8001d4a:	784e      	ldrb	r6, [r1, #1]
 8001d4c:	88cc      	ldrh	r4, [r1, #6]
 8001d4e:	b396      	cbz	r6, 8001db6 <USB_ActivateEndpoint+0xbe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001d50:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001d54:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001d58:	f024 0401 	bic.w	r4, r4, #1
 8001d5c:	b2b6      	uxth	r6, r6
 8001d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d62:	b2a4      	uxth	r4, r4
 8001d64:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001d66:	780c      	ldrb	r4, [r1, #0]
 8001d68:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001d6c:	0656      	lsls	r6, r2, #25
 8001d6e:	d509      	bpl.n	8001d84 <USB_ActivateEndpoint+0x8c>
 8001d70:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001d74:	b292      	uxth	r2, r2
 8001d76:	402a      	ands	r2, r5
 8001d78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d7c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001d80:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8001d84:	78ca      	ldrb	r2, [r1, #3]
 8001d86:	7809      	ldrb	r1, [r1, #0]
 8001d88:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001d8a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001d8e:	4c94      	ldr	r4, [pc, #592]	; (8001fe0 <USB_ActivateEndpoint+0x2e8>)
 8001d90:	b292      	uxth	r2, r2
 8001d92:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 8001d96:	d001      	beq.n	8001d9c <USB_ActivateEndpoint+0xa4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001d98:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001d9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001da0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001da4:	e0cb      	b.n	8001f3e <USB_ActivateEndpoint+0x246>
      wEpRegVal |= USB_EP_INTERRUPT;
 8001da6:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8001daa:	e7b9      	b.n	8001d20 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8001dac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001db0:	e7b6      	b.n	8001d20 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8001db2:	2001      	movs	r0, #1
 8001db4:	e7b5      	b.n	8001d22 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001db6:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8001dba:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001dbe:	f024 0401 	bic.w	r4, r4, #1
 8001dc2:	b2ad      	uxth	r5, r5
 8001dc4:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8001dc8:	b2a4      	uxth	r4, r4
 8001dca:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001dcc:	780a      	ldrb	r2, [r1, #0]
 8001dce:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001dd2:	690d      	ldr	r5, [r1, #16]
 8001dd4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001dd8:	b2b6      	uxth	r6, r6
 8001dda:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8001dde:	bb5d      	cbnz	r5, 8001e38 <USB_ActivateEndpoint+0x140>
 8001de0:	5b94      	ldrh	r4, [r2, r6]
 8001de2:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8001de6:	0424      	lsls	r4, r4, #16
 8001de8:	0c24      	lsrs	r4, r4, #16
 8001dea:	5394      	strh	r4, [r2, r6]
 8001dec:	5b94      	ldrh	r4, [r2, r6]
 8001dee:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8001df2:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8001df6:	b2a4      	uxth	r4, r4
 8001df8:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001dfa:	780c      	ldrb	r4, [r1, #0]
 8001dfc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001e00:	0455      	lsls	r5, r2, #17
 8001e02:	d50d      	bpl.n	8001e20 <USB_ActivateEndpoint+0x128>
 8001e04:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001e08:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001e0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e10:	0412      	lsls	r2, r2, #16
 8001e12:	0c12      	lsrs	r2, r2, #16
 8001e14:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001e18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e1c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001e20:	7809      	ldrb	r1, [r1, #0]
 8001e22:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001e26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e2e:	0412      	lsls	r2, r2, #16
 8001e30:	0c12      	lsrs	r2, r2, #16
 8001e32:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8001e36:	e7b1      	b.n	8001d9c <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001e38:	2d3e      	cmp	r5, #62	; 0x3e
 8001e3a:	d805      	bhi.n	8001e48 <USB_ActivateEndpoint+0x150>
 8001e3c:	086c      	lsrs	r4, r5, #1
 8001e3e:	07ed      	lsls	r5, r5, #31
 8001e40:	bf48      	it	mi
 8001e42:	3401      	addmi	r4, #1
 8001e44:	02a4      	lsls	r4, r4, #10
 8001e46:	e7d6      	b.n	8001df6 <USB_ActivateEndpoint+0xfe>
 8001e48:	096f      	lsrs	r7, r5, #5
 8001e4a:	06ec      	lsls	r4, r5, #27
 8001e4c:	4c65      	ldr	r4, [pc, #404]	; (8001fe4 <USB_ActivateEndpoint+0x2ec>)
 8001e4e:	bf08      	it	eq
 8001e50:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8001e54:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 8001e58:	e7cd      	b.n	8001df6 <USB_ActivateEndpoint+0xfe>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001e5a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001e5e:	b2a4      	uxth	r4, r4
 8001e60:	402c      	ands	r4, r5
 8001e62:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8001e66:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001e6a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8001e6e:	780a      	ldrb	r2, [r1, #0]
 8001e70:	890c      	ldrh	r4, [r1, #8]
 8001e72:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001e76:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001e7a:	f024 0401 	bic.w	r4, r4, #1
 8001e7e:	b2b6      	uxth	r6, r6
 8001e80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e84:	b2a4      	uxth	r4, r4
 8001e86:	5394      	strh	r4, [r2, r6]
 8001e88:	780a      	ldrb	r2, [r1, #0]
 8001e8a:	894c      	ldrh	r4, [r1, #10]
 8001e8c:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001e90:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001e94:	f024 0401 	bic.w	r4, r4, #1
 8001e98:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8001e9c:	b2a4      	uxth	r4, r4
 8001e9e:	b2b6      	uxth	r6, r6
 8001ea0:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 8001ea2:	784a      	ldrb	r2, [r1, #1]
 8001ea4:	780c      	ldrb	r4, [r1, #0]
 8001ea6:	2a00      	cmp	r2, #0
 8001ea8:	d14c      	bne.n	8001f44 <USB_ActivateEndpoint+0x24c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001eaa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001eae:	0452      	lsls	r2, r2, #17
 8001eb0:	d509      	bpl.n	8001ec6 <USB_ActivateEndpoint+0x1ce>
 8001eb2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001eb6:	b292      	uxth	r2, r2
 8001eb8:	402a      	ands	r2, r5
 8001eba:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001ebe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ec2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001ec6:	780c      	ldrb	r4, [r1, #0]
 8001ec8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001ecc:	0657      	lsls	r7, r2, #25
 8001ece:	d50d      	bpl.n	8001eec <USB_ActivateEndpoint+0x1f4>
 8001ed0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001ed4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001ed8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001edc:	0412      	lsls	r2, r2, #16
 8001ede:	0c12      	lsrs	r2, r2, #16
 8001ee0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ee4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001ee8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001eec:	780c      	ldrb	r4, [r1, #0]
 8001eee:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001ef2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001ef6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001efa:	0412      	lsls	r2, r2, #16
 8001efc:	0c12      	lsrs	r2, r2, #16
 8001efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f02:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001f06:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001f0a:	f248 0480 	movw	r4, #32896	; 0x8080
 8001f0e:	780d      	ldrb	r5, [r1, #0]
 8001f10:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8001f14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f1c:	0412      	lsls	r2, r2, #16
 8001f1e:	0c12      	lsrs	r2, r2, #16
 8001f20:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8001f24:	4322      	orrs	r2, r4
 8001f26:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001f2a:	7809      	ldrb	r1, [r1, #0]
 8001f2c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001f30:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f38:	0412      	lsls	r2, r2, #16
 8001f3a:	0c12      	lsrs	r2, r2, #16
 8001f3c:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001f3e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 8001f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001f44:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001f48:	0456      	lsls	r6, r2, #17
 8001f4a:	d509      	bpl.n	8001f60 <USB_ActivateEndpoint+0x268>
 8001f4c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001f50:	b292      	uxth	r2, r2
 8001f52:	402a      	ands	r2, r5
 8001f54:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001f58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f5c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001f60:	780c      	ldrb	r4, [r1, #0]
 8001f62:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001f66:	0652      	lsls	r2, r2, #25
 8001f68:	d50d      	bpl.n	8001f86 <USB_ActivateEndpoint+0x28e>
 8001f6a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001f6e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001f72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f76:	0412      	lsls	r2, r2, #16
 8001f78:	0c12      	lsrs	r2, r2, #16
 8001f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f7e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001f82:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001f86:	780c      	ldrb	r4, [r1, #0]
 8001f88:	4d15      	ldr	r5, [pc, #84]	; (8001fe0 <USB_ActivateEndpoint+0x2e8>)
 8001f8a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001f8e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001f92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f96:	0412      	lsls	r2, r2, #16
 8001f98:	0c12      	lsrs	r2, r2, #16
 8001f9a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001f9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fa2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8001fa6:	78ca      	ldrb	r2, [r1, #3]
 8001fa8:	780c      	ldrb	r4, [r1, #0]
 8001faa:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001fac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	ea02 0205 	and.w	r2, r2, r5
 8001fb6:	bf18      	it	ne
 8001fb8:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001fbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fc4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001fc8:	7809      	ldrb	r1, [r1, #0]
 8001fca:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001fce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fd2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001fd6:	0412      	lsls	r2, r2, #16
 8001fd8:	0c12      	lsrs	r2, r2, #16
 8001fda:	e6df      	b.n	8001d9c <USB_ActivateEndpoint+0xa4>
 8001fdc:	ffff8f8f 	.word	0xffff8f8f
 8001fe0:	ffff8fbf 	.word	0xffff8fbf
 8001fe4:	ffff8000 	.word	0xffff8000

08001fe8 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8001fe8:	784b      	ldrb	r3, [r1, #1]
 8001fea:	780a      	ldrb	r2, [r1, #0]
 8001fec:	b18b      	cbz	r3, 8002012 <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8001fee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	0c1b      	lsrs	r3, r3, #16
 8001ffe:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800200a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800200e:	2000      	movs	r0, #0
 8002010:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002012:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800201a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201e:	041b      	lsls	r3, r3, #16
 8002020:	0c1b      	lsrs	r3, r3, #16
 8002022:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002026:	e7ec      	b.n	8002002 <USB_EPSetStall+0x1a>

08002028 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002028:	7b0b      	ldrb	r3, [r1, #12]
 800202a:	bb43      	cbnz	r3, 800207e <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 800202c:	784b      	ldrb	r3, [r1, #1]
 800202e:	780a      	ldrb	r2, [r1, #0]
 8002030:	b33b      	cbz	r3, 8002082 <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002032:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002036:	065b      	lsls	r3, r3, #25
 8002038:	d50d      	bpl.n	8002056 <USB_EPClearStall+0x2e>
 800203a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800203e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002046:	041b      	lsls	r3, r3, #16
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800204e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002052:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002056:	78cb      	ldrb	r3, [r1, #3]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d010      	beq.n	800207e <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800205c:	780a      	ldrb	r2, [r1, #0]
 800205e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800207a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800207e:	2000      	movs	r0, #0
 8002080:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002082:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002086:	045b      	lsls	r3, r3, #17
 8002088:	d50d      	bpl.n	80020a6 <USB_EPClearStall+0x7e>
 800208a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800208e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002096:	041b      	lsls	r3, r3, #16
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800209e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80020a6:	780a      	ldrb	r2, [r1, #0]
 80020a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b4:	041b      	lsls	r3, r3, #16
 80020b6:	0c1b      	lsrs	r3, r3, #16
 80020b8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80020bc:	e7d9      	b.n	8002072 <USB_EPClearStall+0x4a>

080020be <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80020be:	b911      	cbnz	r1, 80020c6 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80020c6:	2000      	movs	r0, #0
 80020c8:	4770      	bx	lr

080020ca <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80020ca:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80020ce:	b280      	uxth	r0, r0
 80020d0:	4770      	bx	lr

080020d2 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80020d2:	2000      	movs	r0, #0
 80020d4:	4770      	bx	lr

080020d6 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80020d6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80020da:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80020dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80020e0:	085b      	lsrs	r3, r3, #1
 80020e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d100      	bne.n	80020ec <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80020ea:	4770      	bx	lr
 80020ec:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 80020f0:	f822 0b04 	strh.w	r0, [r2], #4
 80020f4:	e7f7      	b.n	80020e6 <USB_WritePMA+0x10>
	...

080020f8 <USB_EPStartXfer>:
{
 80020f8:	b570      	push	{r4, r5, r6, lr}
 80020fa:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 80020fc:	7849      	ldrb	r1, [r1, #1]
{
 80020fe:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8002100:	2901      	cmp	r1, #1
 8002102:	69aa      	ldr	r2, [r5, #24]
 8002104:	692b      	ldr	r3, [r5, #16]
 8002106:	7b28      	ldrb	r0, [r5, #12]
 8002108:	d166      	bne.n	80021d8 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 800210a:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 800210c:	bf9d      	ittte	ls
 800210e:	2300      	movls	r3, #0
 8002110:	61ab      	strls	r3, [r5, #24]
 8002112:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8002114:	1ad2      	subhi	r2, r2, r3
 8002116:	bf88      	it	hi
 8002118:	61aa      	strhi	r2, [r5, #24]
 800211a:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 800211c:	bb08      	cbnz	r0, 8002162 <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800211e:	4633      	mov	r3, r6
 8002120:	88ea      	ldrh	r2, [r5, #6]
 8002122:	6969      	ldr	r1, [r5, #20]
 8002124:	4620      	mov	r0, r4
 8002126:	f7ff ffd6 	bl	80020d6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800212a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800212e:	782a      	ldrb	r2, [r5, #0]
 8002130:	b299      	uxth	r1, r3
 8002132:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	440b      	add	r3, r1
 800213a:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800213c:	782a      	ldrb	r2, [r5, #0]
 800213e:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800214a:	041b      	lsls	r3, r3, #16
 800214c:	0c1b      	lsrs	r3, r3, #16
 800214e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 800215e:	2000      	movs	r0, #0
 8002160:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002162:	782b      	ldrb	r3, [r5, #0]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002164:	4620      	mov	r0, r4
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002166:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002170:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002174:	b291      	uxth	r1, r2
 8002176:	bf15      	itete	ne
 8002178:	f204 420c 	addwne	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800217c:	f204 4204 	addweq	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002180:	1852      	addne	r2, r2, r1
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002182:	1852      	addeq	r2, r2, r1
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002184:	bf15      	itete	ne
 8002186:	52d6      	strhne	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002188:	52d6      	strheq	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 800218a:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 800218c:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800218e:	4633      	mov	r3, r6
 8002190:	6969      	ldr	r1, [r5, #20]
 8002192:	f7ff ffa0 	bl	80020d6 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002196:	786b      	ldrb	r3, [r5, #1]
 8002198:	782a      	ldrb	r2, [r5, #0]
 800219a:	b973      	cbnz	r3, 80021ba <USB_EPStartXfer+0xc2>
 800219c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80021a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a8:	041b      	lsls	r3, r3, #16
 80021aa:	0c1b      	lsrs	r3, r3, #16
 80021ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021b4:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 80021b8:	e7c0      	b.n	800213c <USB_EPStartXfer+0x44>
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d1be      	bne.n	800213c <USB_EPStartXfer+0x44>
 80021be:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80021c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ca:	041b      	lsls	r3, r3, #16
 80021cc:	0c1b      	lsrs	r3, r3, #16
 80021ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d6:	e7ed      	b.n	80021b4 <USB_EPStartXfer+0xbc>
    if (ep->xfer_len > ep->maxpacket)
 80021d8:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 80021da:	bf93      	iteet	ls
 80021dc:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 80021de:	1ad2      	subhi	r2, r2, r3
 80021e0:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 80021e2:	61ab      	strls	r3, [r5, #24]
 80021e4:	bf98      	it	ls
 80021e6:	4613      	movls	r3, r2
 80021e8:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 80021ea:	b9b0      	cbnz	r0, 800221a <USB_EPStartXfer+0x122>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80021ec:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b281      	uxth	r1, r0
 80021f4:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 80021f8:	4408      	add	r0, r1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d144      	bne.n	8002288 <USB_EPStartXfer+0x190>
 80021fe:	5a83      	ldrh	r3, [r0, r2]
 8002200:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	0c1b      	lsrs	r3, r3, #16
 8002208:	5283      	strh	r3, [r0, r2]
 800220a:	5a83      	ldrh	r3, [r0, r2]
 800220c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002214:	b29b      	uxth	r3, r3
 8002216:	5283      	strh	r3, [r0, r2]
 8002218:	e03f      	b.n	800229a <USB_EPStartXfer+0x1a2>
 800221a:	b9a1      	cbnz	r1, 8002246 <USB_EPStartXfer+0x14e>
 800221c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8002220:	0112      	lsls	r2, r2, #4
 8002222:	b281      	uxth	r1, r0
 8002224:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8002228:	4408      	add	r0, r1
 800222a:	b9e3      	cbnz	r3, 8002266 <USB_EPStartXfer+0x16e>
 800222c:	5a81      	ldrh	r1, [r0, r2]
 800222e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002232:	0409      	lsls	r1, r1, #16
 8002234:	0c09      	lsrs	r1, r1, #16
 8002236:	5281      	strh	r1, [r0, r2]
 8002238:	5a81      	ldrh	r1, [r0, r2]
 800223a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800223e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002242:	b289      	uxth	r1, r1
 8002244:	5281      	strh	r1, [r0, r2]
 8002246:	7869      	ldrb	r1, [r5, #1]
 8002248:	782a      	ldrb	r2, [r5, #0]
 800224a:	2900      	cmp	r1, #0
 800224c:	d0ce      	beq.n	80021ec <USB_EPStartXfer+0xf4>
 800224e:	2901      	cmp	r1, #1
 8002250:	d123      	bne.n	800229a <USB_EPStartXfer+0x1a2>
 8002252:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8002256:	0112      	lsls	r2, r2, #4
 8002258:	b288      	uxth	r0, r1
 800225a:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 800225e:	4401      	add	r1, r0
 8002260:	b29b      	uxth	r3, r3
 8002262:	528b      	strh	r3, [r1, r2]
 8002264:	e019      	b.n	800229a <USB_EPStartXfer+0x1a2>
 8002266:	2b3e      	cmp	r3, #62	; 0x3e
 8002268:	d805      	bhi.n	8002276 <USB_EPStartXfer+0x17e>
 800226a:	0859      	lsrs	r1, r3, #1
 800226c:	07de      	lsls	r6, r3, #31
 800226e:	bf48      	it	mi
 8002270:	3101      	addmi	r1, #1
 8002272:	0289      	lsls	r1, r1, #10
 8002274:	e7e5      	b.n	8002242 <USB_EPStartXfer+0x14a>
 8002276:	095e      	lsrs	r6, r3, #5
 8002278:	06d9      	lsls	r1, r3, #27
 800227a:	4912      	ldr	r1, [pc, #72]	; (80022c4 <USB_EPStartXfer+0x1cc>)
 800227c:	bf08      	it	eq
 800227e:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002282:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002286:	e7dc      	b.n	8002242 <USB_EPStartXfer+0x14a>
 8002288:	2b3e      	cmp	r3, #62	; 0x3e
 800228a:	d812      	bhi.n	80022b2 <USB_EPStartXfer+0x1ba>
 800228c:	0859      	lsrs	r1, r3, #1
 800228e:	07de      	lsls	r6, r3, #31
 8002290:	bf48      	it	mi
 8002292:	3101      	addmi	r1, #1
 8002294:	0289      	lsls	r1, r1, #10
 8002296:	b289      	uxth	r1, r1
 8002298:	5281      	strh	r1, [r0, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800229a:	782a      	ldrb	r2, [r5, #0]
 800229c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80022a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a8:	041b      	lsls	r3, r3, #16
 80022aa:	0c1b      	lsrs	r3, r3, #16
 80022ac:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80022b0:	e74f      	b.n	8002152 <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80022b2:	0959      	lsrs	r1, r3, #5
 80022b4:	06db      	lsls	r3, r3, #27
 80022b6:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <USB_EPStartXfer+0x1cc>)
 80022b8:	bf08      	it	eq
 80022ba:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80022be:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80022c2:	e7a7      	b.n	8002214 <USB_EPStartXfer+0x11c>
 80022c4:	ffff8000 	.word	0xffff8000

080022c8 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80022c8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 80022cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80022ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 80022d2:	085d      	lsrs	r5, r3, #1
 80022d4:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80022d6:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 80022d8:	462e      	mov	r6, r5
 80022da:	3002      	adds	r0, #2
 80022dc:	b936      	cbnz	r6, 80022ec <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80022de:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 80022e0:	bf44      	itt	mi
 80022e2:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80022e6:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 80022ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 80022ec:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 80022f0:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 80022f2:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80022f4:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80022f8:	0a24      	lsrs	r4, r4, #8
 80022fa:	f800 4c01 	strb.w	r4, [r0, #-1]
 80022fe:	e7ec      	b.n	80022da <USB_ReadPMA+0x12>

08002300 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002300:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002302:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002306:	b90b      	cbnz	r3, 800230c <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002308:	2002      	movs	r0, #2
 800230a:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4798      	blx	r3
 8002310:	2800      	cmp	r0, #0
 8002312:	d1f9      	bne.n	8002308 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002314:	bd08      	pop	{r3, pc}

08002316 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002316:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002318:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4798      	blx	r3

  return USBD_OK;
}
 8002320:	2000      	movs	r0, #0
 8002322:	bd08      	pop	{r3, pc}

08002324 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002324:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002326:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 800232a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800232c:	4628      	mov	r0, r5
 800232e:	f000 fae1 	bl	80028f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002332:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002334:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8002338:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800233c:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8002340:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8002344:	f001 031f 	and.w	r3, r1, #31
 8002348:	2b01      	cmp	r3, #1
 800234a:	d00e      	beq.n	800236a <USBD_LL_SetupStage+0x46>
 800234c:	d307      	bcc.n	800235e <USBD_LL_SetupStage+0x3a>
 800234e:	2b02      	cmp	r3, #2
 8002350:	d010      	beq.n	8002374 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002352:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002356:	4620      	mov	r0, r4
 8002358:	f001 fb68 	bl	8003a2c <USBD_LL_StallEP>
      break;
 800235c:	e003      	b.n	8002366 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 800235e:	4629      	mov	r1, r5
 8002360:	4620      	mov	r0, r4
 8002362:	f000 f8f5 	bl	8002550 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8002366:	2000      	movs	r0, #0
 8002368:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800236a:	4629      	mov	r1, r5
 800236c:	4620      	mov	r0, r4
 800236e:	f000 fa13 	bl	8002798 <USBD_StdItfReq>
      break;
 8002372:	e7f8      	b.n	8002366 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8002374:	4629      	mov	r1, r5
 8002376:	4620      	mov	r0, r4
 8002378:	f000 fa33 	bl	80027e2 <USBD_StdEPReq>
      break;
 800237c:	e7f3      	b.n	8002366 <USBD_LL_SetupStage+0x42>

0800237e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800237e:	b570      	push	{r4, r5, r6, lr}
 8002380:	4605      	mov	r5, r0
 8002382:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002384:	bb49      	cbnz	r1, 80023da <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002386:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800238a:	2b03      	cmp	r3, #3
 800238c:	d11e      	bne.n	80023cc <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 800238e:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8002392:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8002396:	4293      	cmp	r3, r2
 8002398:	d90b      	bls.n	80023b2 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 800239a:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 800239c:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800239e:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80023a2:	bf8c      	ite	hi
 80023a4:	b29a      	uxthhi	r2, r3
 80023a6:	b292      	uxthls	r2, r2
 80023a8:	4631      	mov	r1, r6
 80023aa:	f000 facc 	bl	8002946 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80023ae:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80023b0:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80023b2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	b123      	cbz	r3, 80023c4 <USBD_LL_DataOutStage+0x46>
 80023ba:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80023be:	2a03      	cmp	r2, #3
 80023c0:	d100      	bne.n	80023c4 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80023c2:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80023c4:	4628      	mov	r0, r5
 80023c6:	f000 fac6 	bl	8002956 <USBD_CtlSendStatus>
 80023ca:	e7f0      	b.n	80023ae <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d1ee      	bne.n	80023ae <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 80023d0:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80023d4:	f001 fb2a 	bl	8003a2c <USBD_LL_StallEP>
 80023d8:	e7e9      	b.n	80023ae <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 80023da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	b12b      	cbz	r3, 80023ee <USBD_LL_DataOutStage+0x70>
 80023e2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80023e6:	2a03      	cmp	r2, #3
 80023e8:	d101      	bne.n	80023ee <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80023ea:	4798      	blx	r3
 80023ec:	e7df      	b.n	80023ae <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80023ee:	2002      	movs	r0, #2
}
 80023f0:	bd70      	pop	{r4, r5, r6, pc}

080023f2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80023f2:	b570      	push	{r4, r5, r6, lr}
 80023f4:	4613      	mov	r3, r2
 80023f6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80023f8:	460e      	mov	r6, r1
 80023fa:	2900      	cmp	r1, #0
 80023fc:	d147      	bne.n	800248e <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80023fe:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8002402:	2a02      	cmp	r2, #2
 8002404:	d13c      	bne.n	8002480 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8002406:	6a05      	ldr	r5, [r0, #32]
 8002408:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800240a:	4295      	cmp	r5, r2
 800240c:	d913      	bls.n	8002436 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 800240e:	1aaa      	subs	r2, r5, r2
 8002410:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002412:	4619      	mov	r1, r3
 8002414:	b292      	uxth	r2, r2
 8002416:	f000 fa8e 	bl	8002936 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800241a:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800241c:	461a      	mov	r2, r3
 800241e:	4619      	mov	r1, r3
 8002420:	4620      	mov	r0, r4
 8002422:	f001 fb4b 	bl	8003abc <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002426:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800242a:	2000      	movs	r0, #0
 800242c:	2b01      	cmp	r3, #1
 800242e:	d13a      	bne.n	80024a6 <USBD_LL_DataInStage+0xb4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002430:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8002434:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8002436:	69c3      	ldr	r3, [r0, #28]
 8002438:	fbb3 f5f2 	udiv	r5, r3, r2
 800243c:	fb02 3515 	mls	r5, r2, r5, r3
 8002440:	b965      	cbnz	r5, 800245c <USBD_LL_DataInStage+0x6a>
 8002442:	429a      	cmp	r2, r3
 8002444:	d80a      	bhi.n	800245c <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8002446:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 800244a:	4293      	cmp	r3, r2
 800244c:	d206      	bcs.n	800245c <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800244e:	462a      	mov	r2, r5
 8002450:	f000 fa71 	bl	8002936 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002454:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002458:	462b      	mov	r3, r5
 800245a:	e7df      	b.n	800241c <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800245c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	b12b      	cbz	r3, 8002470 <USBD_LL_DataInStage+0x7e>
 8002464:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8002468:	2a03      	cmp	r2, #3
 800246a:	d101      	bne.n	8002470 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 800246c:	4620      	mov	r0, r4
 800246e:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002470:	2180      	movs	r1, #128	; 0x80
 8002472:	4620      	mov	r0, r4
 8002474:	f001 fada 	bl	8003a2c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002478:	4620      	mov	r0, r4
 800247a:	f000 fa77 	bl	800296c <USBD_CtlReceiveStatus>
 800247e:	e7d2      	b.n	8002426 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002480:	f032 0304 	bics.w	r3, r2, #4
 8002484:	d1cf      	bne.n	8002426 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	f001 fad0 	bl	8003a2c <USBD_LL_StallEP>
 800248c:	e7cb      	b.n	8002426 <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800248e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	b133      	cbz	r3, 80024a4 <USBD_LL_DataInStage+0xb2>
 8002496:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800249a:	2a03      	cmp	r2, #3
 800249c:	d102      	bne.n	80024a4 <USBD_LL_DataInStage+0xb2>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 800249e:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80024a0:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80024a4:	2002      	movs	r0, #2
}
 80024a6:	bd70      	pop	{r4, r5, r6, pc}

080024a8 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80024a8:	2200      	movs	r2, #0
{
 80024aa:	b570      	push	{r4, r5, r6, lr}
 80024ac:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80024ae:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80024b0:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80024b2:	4611      	mov	r1, r2
 80024b4:	2340      	movs	r3, #64	; 0x40
 80024b6:	f001 faa9 	bl	8003a0c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80024ba:	4633      	mov	r3, r6
 80024bc:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80024be:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80024c2:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80024c6:	2200      	movs	r2, #0
 80024c8:	4620      	mov	r0, r4
 80024ca:	f001 fa9f 	bl	8003a0c <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80024ce:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80024d0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80024d4:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80024d6:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80024d8:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80024dc:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80024e0:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80024e2:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 80024e6:	b123      	cbz	r3, 80024f2 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80024e8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80024ec:	4620      	mov	r0, r4
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4798      	blx	r3
  }

  return USBD_OK;
}
 80024f2:	2000      	movs	r0, #0
 80024f4:	bd70      	pop	{r4, r5, r6, pc}

080024f6 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80024f6:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80024f8:	2000      	movs	r0, #0
 80024fa:	4770      	bx	lr

080024fc <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80024fc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002500:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002504:	2304      	movs	r3, #4
 8002506:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800250a:	2000      	movs	r0, #0
 800250c:	4770      	bx	lr

0800250e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800250e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002512:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8002514:	bf04      	itt	eq
 8002516:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800251a:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800251e:	2000      	movs	r0, #0
 8002520:	4770      	bx	lr

08002522 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8002522:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002524:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002528:	2a03      	cmp	r2, #3
 800252a:	d104      	bne.n	8002536 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800252c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	b103      	cbz	r3, 8002536 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002534:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8002536:	2000      	movs	r0, #0
 8002538:	bd08      	pop	{r3, pc}

0800253a <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800253a:	b510      	push	{r4, lr}
 800253c:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800253e:	2180      	movs	r1, #128	; 0x80
 8002540:	f001 fa74 	bl	8003a2c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002544:	4620      	mov	r0, r4
}
 8002546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800254a:	2100      	movs	r1, #0
 800254c:	f001 ba6e 	b.w	8003a2c <USBD_LL_StallEP>

08002550 <USBD_StdDevReq>:
{
 8002550:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002552:	780b      	ldrb	r3, [r1, #0]
{
 8002554:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002556:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800255a:	2b20      	cmp	r3, #32
{
 800255c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800255e:	d012      	beq.n	8002586 <USBD_StdDevReq+0x36>
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	d010      	beq.n	8002586 <USBD_StdDevReq+0x36>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d15c      	bne.n	8002622 <USBD_StdDevReq+0xd2>
      switch (req->bRequest)
 8002568:	784b      	ldrb	r3, [r1, #1]
 800256a:	2b09      	cmp	r3, #9
 800256c:	d858      	bhi.n	8002620 <USBD_StdDevReq+0xd0>
 800256e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002572:	00e9      	.short	0x00e9
 8002574:	00570105 	.word	0x00570105
 8002578:	005700fe 	.word	0x005700fe
 800257c:	00130084 	.word	0x00130084
 8002580:	00d20057 	.word	0x00d20057
 8002584:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 8002586:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800258a:	4629      	mov	r1, r5
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	4620      	mov	r0, r4
 8002590:	4798      	blx	r3
}
 8002592:	2000      	movs	r0, #0
 8002594:	b003      	add	sp, #12
 8002596:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800259e:	884b      	ldrh	r3, [r1, #2]
 80025a0:	0a1a      	lsrs	r2, r3, #8
 80025a2:	3a01      	subs	r2, #1
 80025a4:	2a06      	cmp	r2, #6
 80025a6:	d83b      	bhi.n	8002620 <USBD_StdDevReq+0xd0>
 80025a8:	e8df f002 	tbb	[pc, r2]
 80025ac:	3a2d2004 	.word	0x3a2d2004
 80025b0:	523a      	.short	0x523a
 80025b2:	5c          	.byte	0x5c
 80025b3:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80025b4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80025b8:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80025ba:	f10d 0106 	add.w	r1, sp, #6
 80025be:	7c20      	ldrb	r0, [r4, #16]
 80025c0:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80025c2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80025c6:	b152      	cbz	r2, 80025de <USBD_StdDevReq+0x8e>
 80025c8:	88eb      	ldrh	r3, [r5, #6]
 80025ca:	b143      	cbz	r3, 80025de <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 80025cc:	429a      	cmp	r2, r3
 80025ce:	bf28      	it	cs
 80025d0:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80025d2:	4601      	mov	r1, r0
 80025d4:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80025d6:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80025da:	f000 f99f 	bl	800291c <USBD_CtlSendData>
    if (req->wLength == 0U)
 80025de:	88eb      	ldrh	r3, [r5, #6]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1d6      	bne.n	8002592 <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 80025e4:	4620      	mov	r0, r4
 80025e6:	f000 f9b6 	bl	8002956 <USBD_CtlSendStatus>
 80025ea:	e7d2      	b.n	8002592 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80025ec:	7c02      	ldrb	r2, [r0, #16]
 80025ee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80025f2:	b932      	cbnz	r2, 8002602 <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80025f6:	f10d 0006 	add.w	r0, sp, #6
 80025fa:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80025fc:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80025fe:	7043      	strb	r3, [r0, #1]
 8002600:	e7df      	b.n	80025c2 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	e7f7      	b.n	80025f6 <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b05      	cmp	r3, #5
 800260a:	d809      	bhi.n	8002620 <USBD_StdDevReq+0xd0>
 800260c:	e8df f003 	tbb	[pc, r3]
 8002610:	14100c03 	.word	0x14100c03
 8002614:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8002616:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800261a:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1cc      	bne.n	80025ba <USBD_StdDevReq+0x6a>
          USBD_CtlError(pdev, req);
 8002620:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 8002622:	f7ff ff8a 	bl	800253a <USBD_CtlError.constprop.1>
  return ret;
 8002626:	e7b4      	b.n	8002592 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8002628:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	e7f5      	b.n	800261c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8002630:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	e7f1      	b.n	800261c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8002638:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	e7ed      	b.n	800261c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8002640:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	e7e9      	b.n	800261c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002648:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	e7e5      	b.n	800261c <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002650:	7c03      	ldrb	r3, [r0, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1e4      	bne.n	8002620 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002656:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800265a:	f10d 0006 	add.w	r0, sp, #6
 800265e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002660:	4798      	blx	r3
 8002662:	e7ae      	b.n	80025c2 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002664:	7c03      	ldrb	r3, [r0, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1da      	bne.n	8002620 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800266a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800266e:	f10d 0006 	add.w	r0, sp, #6
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002676:	2307      	movs	r3, #7
 8002678:	e7c1      	b.n	80025fe <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800267a:	888b      	ldrh	r3, [r1, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1cf      	bne.n	8002620 <USBD_StdDevReq+0xd0>
 8002680:	88cb      	ldrh	r3, [r1, #6]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1cc      	bne.n	8002620 <USBD_StdDevReq+0xd0>
 8002686:	884d      	ldrh	r5, [r1, #2]
 8002688:	2d7f      	cmp	r5, #127	; 0x7f
 800268a:	d8c9      	bhi.n	8002620 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800268c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002690:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002692:	2b03      	cmp	r3, #3
 8002694:	d0c4      	beq.n	8002620 <USBD_StdDevReq+0xd0>
      pdev->dev_address = dev_addr;
 8002696:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800269a:	f001 f9f3 	bl	8003a84 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800269e:	4620      	mov	r0, r4
 80026a0:	f000 f959 	bl	8002956 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80026a4:	b11d      	cbz	r5, 80026ae <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80026a6:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80026a8:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80026ac:	e771      	b.n	8002592 <USBD_StdDevReq+0x42>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e7fa      	b.n	80026a8 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 80026b2:	7889      	ldrb	r1, [r1, #2]
 80026b4:	4d37      	ldr	r5, [pc, #220]	; (8002794 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80026b6:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80026b8:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80026ba:	d8b1      	bhi.n	8002620 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 80026bc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d008      	beq.n	80026d6 <USBD_StdDevReq+0x186>
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d014      	beq.n	80026f2 <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 80026c8:	f7ff ff37 	bl	800253a <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 80026cc:	7829      	ldrb	r1, [r5, #0]
 80026ce:	4620      	mov	r0, r4
 80026d0:	f7ff fe21 	bl	8002316 <USBD_ClrClassConfig>
 80026d4:	e75d      	b.n	8002592 <USBD_StdDevReq+0x42>
        if (cfgidx)
 80026d6:	2900      	cmp	r1, #0
 80026d8:	d084      	beq.n	80025e4 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 80026da:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80026dc:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80026de:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80026e0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80026e4:	4620      	mov	r0, r4
 80026e6:	f7ff fe0b 	bl	8002300 <USBD_SetClassConfig>
 80026ea:	2802      	cmp	r0, #2
 80026ec:	f47f af7a 	bne.w	80025e4 <USBD_StdDevReq+0x94>
 80026f0:	e796      	b.n	8002620 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 80026f2:	b931      	cbnz	r1, 8002702 <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80026f4:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80026f6:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80026f8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80026fc:	f7ff fe0b 	bl	8002316 <USBD_ClrClassConfig>
 8002700:	e770      	b.n	80025e4 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 8002702:	6841      	ldr	r1, [r0, #4]
 8002704:	2901      	cmp	r1, #1
 8002706:	f43f af6d 	beq.w	80025e4 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800270a:	b2c9      	uxtb	r1, r1
 800270c:	f7ff fe03 	bl	8002316 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8002710:	7829      	ldrb	r1, [r5, #0]
 8002712:	6061      	str	r1, [r4, #4]
 8002714:	e7e6      	b.n	80026e4 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 8002716:	88ca      	ldrh	r2, [r1, #6]
 8002718:	2a01      	cmp	r2, #1
 800271a:	d181      	bne.n	8002620 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 800271c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002720:	2b00      	cmp	r3, #0
 8002722:	f43f af7d 	beq.w	8002620 <USBD_StdDevReq+0xd0>
 8002726:	2b02      	cmp	r3, #2
 8002728:	d904      	bls.n	8002734 <USBD_StdDevReq+0x1e4>
 800272a:	2b03      	cmp	r3, #3
 800272c:	f47f af78 	bne.w	8002620 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8002730:	1d01      	adds	r1, r0, #4
 8002732:	e003      	b.n	800273c <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 8002734:	4601      	mov	r1, r0
 8002736:	2300      	movs	r3, #0
 8002738:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800273c:	4620      	mov	r0, r4
 800273e:	f000 f8ed 	bl	800291c <USBD_CtlSendData>
 8002742:	e726      	b.n	8002592 <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 8002744:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002748:	3b01      	subs	r3, #1
 800274a:	2b02      	cmp	r3, #2
 800274c:	f63f af68 	bhi.w	8002620 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8002750:	88cb      	ldrh	r3, [r1, #6]
 8002752:	2b02      	cmp	r3, #2
 8002754:	f47f af64 	bne.w	8002620 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8002758:	2301      	movs	r3, #1
 800275a:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800275c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8002760:	b10b      	cbz	r3, 8002766 <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002762:	2303      	movs	r3, #3
 8002764:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002766:	2202      	movs	r2, #2
 8002768:	f104 010c 	add.w	r1, r4, #12
 800276c:	e7e6      	b.n	800273c <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800276e:	884b      	ldrh	r3, [r1, #2]
 8002770:	2b01      	cmp	r3, #1
 8002772:	f47f af0e 	bne.w	8002592 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8002776:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800277a:	e733      	b.n	80025e4 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 800277c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002780:	3b01      	subs	r3, #1
 8002782:	2b02      	cmp	r3, #2
 8002784:	f63f af4c 	bhi.w	8002620 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002788:	884b      	ldrh	r3, [r1, #2]
 800278a:	2b01      	cmp	r3, #1
 800278c:	f47f af01 	bne.w	8002592 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	e7f0      	b.n	8002776 <USBD_StdDevReq+0x226>
 8002794:	20000264 	.word	0x20000264

08002798 <USBD_StdItfReq>:
{
 8002798:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800279a:	780b      	ldrb	r3, [r1, #0]
{
 800279c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800279e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80027a2:	2b20      	cmp	r3, #32
{
 80027a4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80027a6:	d002      	beq.n	80027ae <USBD_StdItfReq+0x16>
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d000      	beq.n	80027ae <USBD_StdItfReq+0x16>
 80027ac:	b9b3      	cbnz	r3, 80027dc <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 80027ae:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80027b2:	3b01      	subs	r3, #1
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d810      	bhi.n	80027da <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80027b8:	792b      	ldrb	r3, [r5, #4]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d80d      	bhi.n	80027da <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80027be:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80027c2:	4629      	mov	r1, r5
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	4620      	mov	r0, r4
 80027c8:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80027ca:	88eb      	ldrh	r3, [r5, #6]
 80027cc:	b91b      	cbnz	r3, 80027d6 <USBD_StdItfReq+0x3e>
 80027ce:	b910      	cbnz	r0, 80027d6 <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 80027d0:	4620      	mov	r0, r4
 80027d2:	f000 f8c0 	bl	8002956 <USBD_CtlSendStatus>
}
 80027d6:	2000      	movs	r0, #0
 80027d8:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80027da:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 80027dc:	f7ff fead 	bl	800253a <USBD_CtlError.constprop.1>
      break;
 80027e0:	e7f9      	b.n	80027d6 <USBD_StdItfReq+0x3e>

080027e2 <USBD_StdEPReq>:
{
 80027e2:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80027e4:	780a      	ldrb	r2, [r1, #0]
{
 80027e6:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80027e8:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80027ec:	2a20      	cmp	r2, #32
{
 80027ee:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80027f0:	d013      	beq.n	800281a <USBD_StdEPReq+0x38>
 80027f2:	2a40      	cmp	r2, #64	; 0x40
 80027f4:	d011      	beq.n	800281a <USBD_StdEPReq+0x38>
 80027f6:	b96a      	cbnz	r2, 8002814 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 80027f8:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80027fa:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 80027fc:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 80027fe:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8002800:	d01f      	beq.n	8002842 <USBD_StdEPReq+0x60>
 8002802:	d335      	bcc.n	8002870 <USBD_StdEPReq+0x8e>
 8002804:	2d03      	cmp	r5, #3
 8002806:	d105      	bne.n	8002814 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8002808:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800280c:	2a02      	cmp	r2, #2
 800280e:	d026      	beq.n	800285e <USBD_StdEPReq+0x7c>
 8002810:	2a03      	cmp	r2, #3
 8002812:	d00a      	beq.n	800282a <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 8002814:	f7ff fe91 	bl	800253a <USBD_CtlError.constprop.1>
      break;
 8002818:	e005      	b.n	8002826 <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 800281a:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 800281e:	4619      	mov	r1, r3
 8002820:	6892      	ldr	r2, [r2, #8]
 8002822:	4620      	mov	r0, r4
 8002824:	4790      	blx	r2
}
 8002826:	2000      	movs	r0, #0
 8002828:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 800282a:	885a      	ldrh	r2, [r3, #2]
 800282c:	b92a      	cbnz	r2, 800283a <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 800282e:	064a      	lsls	r2, r1, #25
 8002830:	d003      	beq.n	800283a <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8002832:	88db      	ldrh	r3, [r3, #6]
 8002834:	b90b      	cbnz	r3, 800283a <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 8002836:	f001 f8f9 	bl	8003a2c <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800283a:	4620      	mov	r0, r4
 800283c:	f000 f88b 	bl	8002956 <USBD_CtlSendStatus>
              break;
 8002840:	e7f1      	b.n	8002826 <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8002842:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002846:	2a02      	cmp	r2, #2
 8002848:	d009      	beq.n	800285e <USBD_StdEPReq+0x7c>
 800284a:	2a03      	cmp	r2, #3
 800284c:	d1e2      	bne.n	8002814 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800284e:	885b      	ldrh	r3, [r3, #2]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e8      	bne.n	8002826 <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 8002854:	064d      	lsls	r5, r1, #25
 8002856:	d0f0      	beq.n	800283a <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8002858:	f001 f8f6 	bl	8003a48 <USBD_LL_ClearStallEP>
 800285c:	e7ed      	b.n	800283a <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800285e:	064b      	lsls	r3, r1, #25
 8002860:	d016      	beq.n	8002890 <USBD_StdEPReq+0xae>
                USBD_LL_StallEP(pdev, ep_addr);
 8002862:	f001 f8e3 	bl	8003a2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	4620      	mov	r0, r4
 800286a:	f001 f8df 	bl	8003a2c <USBD_LL_StallEP>
 800286e:	e7da      	b.n	8002826 <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8002870:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002874:	2b02      	cmp	r3, #2
 8002876:	d00d      	beq.n	8002894 <USBD_StdEPReq+0xb2>
 8002878:	2b03      	cmp	r3, #3
 800287a:	d1cb      	bne.n	8002814 <USBD_StdEPReq+0x32>
 800287c:	2314      	movs	r3, #20
              if ((ep_addr & 0x80U) == 0x80U)
 800287e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002882:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002886:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800288a:	d014      	beq.n	80028b6 <USBD_StdEPReq+0xd4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800288c:	6992      	ldr	r2, [r2, #24]
 800288e:	b9ea      	cbnz	r2, 80028cc <USBD_StdEPReq+0xea>
                USBD_CtlError(pdev, req);
 8002890:	4620      	mov	r0, r4
 8002892:	e7bf      	b.n	8002814 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002894:	0649      	lsls	r1, r1, #25
 8002896:	d1fb      	bne.n	8002890 <USBD_StdEPReq+0xae>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002898:	0613      	lsls	r3, r2, #24
              pep->status = 0x0000U;
 800289a:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800289e:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80028a2:	bf4c      	ite	mi
 80028a4:	f100 0114 	addmi.w	r1, r0, #20
 80028a8:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 80028ac:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80028ae:	4620      	mov	r0, r4
 80028b0:	f000 f834 	bl	800291c <USBD_CtlSendData>
              break;
 80028b4:	e7b7      	b.n	8002826 <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80028b6:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 80028ba:	2a00      	cmp	r2, #0
 80028bc:	d0e8      	beq.n	8002890 <USBD_StdEPReq+0xae>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80028be:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80028c2:	fb03 0505 	mla	r5, r3, r5, r0
 80028c6:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 80028ca:	e004      	b.n	80028d6 <USBD_StdEPReq+0xf4>
 80028cc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80028d0:	fb05 3503 	mla	r5, r5, r3, r3
 80028d4:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80028d6:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80028da:	d103      	bne.n	80028e4 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 80028dc:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80028de:	2202      	movs	r2, #2
 80028e0:	4629      	mov	r1, r5
 80028e2:	e7e4      	b.n	80028ae <USBD_StdEPReq+0xcc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80028e4:	4620      	mov	r0, r4
 80028e6:	f001 f8bd 	bl	8003a64 <USBD_LL_IsStallEP>
 80028ea:	b108      	cbz	r0, 80028f0 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e7f5      	b.n	80028dc <USBD_StdEPReq+0xfa>
                pep->status = 0x0000U;
 80028f0:	6028      	str	r0, [r5, #0]
 80028f2:	e7f4      	b.n	80028de <USBD_StdEPReq+0xfc>

080028f4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80028f4:	780b      	ldrb	r3, [r1, #0]
 80028f6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80028f8:	784b      	ldrb	r3, [r1, #1]
 80028fa:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80028fc:	78ca      	ldrb	r2, [r1, #3]
 80028fe:	788b      	ldrb	r3, [r1, #2]
 8002900:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002904:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8002906:	794a      	ldrb	r2, [r1, #5]
 8002908:	790b      	ldrb	r3, [r1, #4]
 800290a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800290e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8002910:	79ca      	ldrb	r2, [r1, #7]
 8002912:	798b      	ldrb	r3, [r1, #6]
 8002914:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002918:	80c3      	strh	r3, [r0, #6]
 800291a:	4770      	bx	lr

0800291c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800291c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800291e:	2202      	movs	r2, #2
{
 8002920:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002922:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8002926:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8002928:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800292a:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800292c:	2100      	movs	r1, #0
 800292e:	f001 f8b7 	bl	8003aa0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002932:	2000      	movs	r0, #0
 8002934:	bd10      	pop	{r4, pc}

08002936 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8002936:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8002938:	4613      	mov	r3, r2
 800293a:	460a      	mov	r2, r1
 800293c:	2100      	movs	r1, #0
 800293e:	f001 f8af 	bl	8003aa0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002942:	2000      	movs	r0, #0
 8002944:	bd08      	pop	{r3, pc}

08002946 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8002946:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002948:	4613      	mov	r3, r2
 800294a:	460a      	mov	r2, r1
 800294c:	2100      	movs	r1, #0
 800294e:	f001 f8b5 	bl	8003abc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002952:	2000      	movs	r0, #0
 8002954:	bd08      	pop	{r3, pc}

08002956 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8002956:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002958:	2304      	movs	r3, #4
 800295a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800295e:	2300      	movs	r3, #0
 8002960:	461a      	mov	r2, r3
 8002962:	4619      	mov	r1, r3
 8002964:	f001 f89c 	bl	8003aa0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002968:	2000      	movs	r0, #0
 800296a:	bd08      	pop	{r3, pc}

0800296c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800296c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800296e:	2305      	movs	r3, #5
 8002970:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002974:	2300      	movs	r3, #0
 8002976:	461a      	mov	r2, r3
 8002978:	4619      	mov	r1, r3
 800297a:	f001 f89f 	bl	8003abc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800297e:	2000      	movs	r0, #0
 8002980:	bd08      	pop	{r3, pc}
	...

08002984 <get_addr>:
}

uint32_t get_addr(void)
{
	return reg_addr;
}
 8002984:	4b01      	ldr	r3, [pc, #4]	; (800298c <get_addr+0x8>)
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000268 	.word	0x20000268

08002990 <get_mode>:

dmxmode_t get_mode(void)
{
	return dmx_mode;
}
 8002990:	4b01      	ldr	r3, [pc, #4]	; (8002998 <get_mode+0x8>)
 8002992:	7818      	ldrb	r0, [r3, #0]
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000265 	.word	0x20000265

0800299c <get_reg_length>:
}

uint32_t get_reg_length(void)
{
	return reg_len;
}
 800299c:	4b01      	ldr	r3, [pc, #4]	; (80029a4 <get_reg_length+0x8>)
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000270 	.word	0x20000270

080029a8 <init_regs>:

void init_regs(void)
{
 80029a8:	b510      	push	{r4, lr}
	//allocate memory
	if (reg_data != NULL)
 80029aa:	4c06      	ldr	r4, [pc, #24]	; (80029c4 <init_regs+0x1c>)
 80029ac:	6820      	ldr	r0, [r4, #0]
 80029ae:	b108      	cbz	r0, 80029b4 <init_regs+0xc>
		free(reg_data);
 80029b0:	f001 f94a 	bl	8003c48 <free>

	reg_data = malloc(reg_len+1);
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <init_regs+0x20>)
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	3001      	adds	r0, #1
 80029ba:	f001 f93d 	bl	8003c38 <malloc>
 80029be:	6020      	str	r0, [r4, #0]
 80029c0:	bd10      	pop	{r4, pc}
 80029c2:	bf00      	nop
 80029c4:	2000026c 	.word	0x2000026c
 80029c8:	20000270 	.word	0x20000270

080029cc <dmx512_init>:
	dmx_mode = DMX_MODE1;
 80029cc:	2201      	movs	r2, #1
	reg_addr = addr;
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <dmx512_init+0x1c>)
	switch (mode)
 80029d0:	2802      	cmp	r0, #2
	reg_addr = addr;
 80029d2:	6019      	str	r1, [r3, #0]
	dmx_mode = DMX_MODE1;
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <dmx512_init+0x20>)
 80029d6:	701a      	strb	r2, [r3, #0]
	reg_len = len;
 80029d8:	bf14      	ite	ne
 80029da:	220b      	movne	r2, #11
 80029dc:	221a      	moveq	r2, #26
 80029de:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <dmx512_init+0x24>)
 80029e0:	601a      	str	r2, [r3, #0]
	init_regs();
 80029e2:	f7ff bfe1 	b.w	80029a8 <init_regs>
 80029e6:	bf00      	nop
 80029e8:	20000268 	.word	0x20000268
 80029ec:	20000265 	.word	0x20000265
 80029f0:	20000270 	.word	0x20000270

080029f4 <set_reg>:
}

void set_reg(uint32_t reg, uint8_t val)
{
	if ((reg_data != NULL) && (reg<reg_len))
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <set_reg+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	b123      	cbz	r3, 8002a04 <set_reg+0x10>
 80029fa:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <set_reg+0x18>)
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	4282      	cmp	r2, r0
	{
		reg_data[reg] = val;
 8002a00:	bf88      	it	hi
 8002a02:	5419      	strbhi	r1, [r3, r0]
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	2000026c 	.word	0x2000026c
 8002a0c:	20000270 	.word	0x20000270

08002a10 <get_reg>:
	}
}

uint8_t get_reg(uint32_t reg)
{
	if ((reg_data != NULL) && (reg<reg_len))
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <get_reg+0x18>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	b12b      	cbz	r3, 8002a22 <get_reg+0x12>
 8002a16:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <get_reg+0x1c>)
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	4282      	cmp	r2, r0
 8002a1c:	d901      	bls.n	8002a22 <get_reg+0x12>
	{
		return reg_data[reg];
 8002a1e:	5c18      	ldrb	r0, [r3, r0]
 8002a20:	4770      	bx	lr
	}
	else
	{
		return 0;
 8002a22:	2000      	movs	r0, #0
	}
}
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	2000026c 	.word	0x2000026c
 8002a2c:	20000270 	.word	0x20000270

08002a30 <get_reg_name>:
}


const char* get_reg_name(uint32_t reg)
{
	if (reg<reg_len)
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <get_reg_name+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4283      	cmp	r3, r0
		return regnames[reg];
 8002a36:	bf86      	itte	hi
 8002a38:	4b03      	ldrhi	r3, [pc, #12]	; (8002a48 <get_reg_name+0x18>)
 8002a3a:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
	else
		return 0;
 8002a3e:	2000      	movls	r0, #0
}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20000270 	.word	0x20000270
 8002a48:	20000008 	.word	0x20000008

08002a4c <USART1_IRQHandler>:
//END TODO
#endif

//UART IRQ Triggered by incoming characters
void USART1_IRQHandler(void)
{
 8002a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	uint8_t rx_byte;
	int16_t fe_flag;


	start_addr = get_addr();
 8002a4e:	f7ff ff99 	bl	8002984 <get_addr>

	//Handle Potential Errors
	HAL_UART_IRQHandler(&huart1);
 8002a52:	4c2a      	ldr	r4, [pc, #168]	; (8002afc <USART1_IRQHandler+0xb0>)
	start_addr = get_addr();
 8002a54:	4e2a      	ldr	r6, [pc, #168]	; (8002b00 <USART1_IRQHandler+0xb4>)
 8002a56:	6030      	str	r0, [r6, #0]
	HAL_UART_IRQHandler(&huart1);
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f7ff f8a5 	bl	8001ba8 <HAL_UART_IRQHandler>

	//Get the received byte and clear Frame Error IRQ flag
	fe_flag = __HAL_UART_GET_FLAG(&huart1,UART_FLAG_FE);
 8002a5e:	6822      	ldr	r2, [r4, #0]
	rx_byte = buffer;
 8002a60:	4928      	ldr	r1, [pc, #160]	; (8002b04 <USART1_IRQHandler+0xb8>)
	fe_flag = __HAL_UART_GET_FLAG(&huart1,UART_FLAG_FE);
 8002a62:	6813      	ldr	r3, [r2, #0]
	rx_byte = buffer;
 8002a64:	780d      	ldrb	r5, [r1, #0]
	__HAL_UART_CLEAR_FEFLAG(&huart1);
 8002a66:	2100      	movs	r1, #0
 8002a68:	9101      	str	r1, [sp, #4]
 8002a6a:	6810      	ldr	r0, [r2, #0]

	//On Framing Error restart Timer to search for a start condition
	if (fe_flag)
 8002a6c:	f013 0302 	ands.w	r3, r3, #2
	__HAL_UART_CLEAR_FEFLAG(&huart1);
 8002a70:	9001      	str	r0, [sp, #4]
 8002a72:	6852      	ldr	r2, [r2, #4]
	rx_byte = buffer;
 8002a74:	b2ed      	uxtb	r5, r5
	__HAL_UART_CLEAR_FEFLAG(&huart1);
 8002a76:	9201      	str	r2, [sp, #4]
 8002a78:	9a01      	ldr	r2, [sp, #4]
 8002a7a:	4a23      	ldr	r2, [pc, #140]	; (8002b08 <USART1_IRQHandler+0xbc>)
	if (fe_flag)
 8002a7c:	d002      	beq.n	8002a84 <USART1_IRQHandler+0x38>
	{
#ifdef USE_TIMER
		TIM_ITConfig(TIM1, TIM_IT_CC1, ENABLE);
#else
		start_flag = 0;
 8002a7e:	7011      	strb	r1, [r2, #0]
		if (byte_count >= start_addr && byte_count < start_addr + get_reg_length())
			set_reg(byte_count - start_addr, rx_byte);
	}
	//Increase Counter
	byte_count++;
}
 8002a80:	b003      	add	sp, #12
 8002a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (start_flag)
 8002a84:	7811      	ldrb	r1, [r2, #0]
 8002a86:	4c21      	ldr	r4, [pc, #132]	; (8002b0c <USART1_IRQHandler+0xc0>)
 8002a88:	b1c1      	cbz	r1, 8002abc <USART1_IRQHandler+0x70>
		dmx_error = 0;
 8002a8a:	4921      	ldr	r1, [pc, #132]	; (8002b10 <USART1_IRQHandler+0xc4>)
 8002a8c:	700b      	strb	r3, [r1, #0]
		byte_count = 0;
 8002a8e:	8023      	strh	r3, [r4, #0]
		start_flag = 0;
 8002a90:	7013      	strb	r3, [r2, #0]
		switch (rx_byte)
 8002a92:	b18d      	cbz	r5, 8002ab8 <USART1_IRQHandler+0x6c>
 8002a94:	2d17      	cmp	r5, #23
 8002a96:	f04f 0001 	mov.w	r0, #1
 8002a9a:	d02b      	beq.n	8002af4 <USART1_IRQHandler+0xa8>
			dmx_error = 1;
 8002a9c:	7008      	strb	r0, [r1, #0]
			start_flag = 0;
 8002a9e:	7013      	strb	r3, [r2, #0]
			led_status =!led_status;
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <USART1_IRQHandler+0xc8>)
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 8002aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
			led_status =!led_status;
 8002aa6:	781a      	ldrb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 8002aa8:	481b      	ldr	r0, [pc, #108]	; (8002b18 <USART1_IRQHandler+0xcc>)
			led_status =!led_status;
 8002aaa:	fab2 f282 	clz	r2, r2
 8002aae:	0952      	lsrs	r2, r2, #5
 8002ab0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 8002ab2:	f7fd fe4d 	bl	8000750 <HAL_GPIO_WritePin>
			return;
 8002ab6:	e7e3      	b.n	8002a80 <USART1_IRQHandler+0x34>
			packet_type = DATA_PACKET;
 8002ab8:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <USART1_IRQHandler+0xd0>)
 8002aba:	701d      	strb	r5, [r3, #0]
	if (packet_type == DATA_PACKET)
 8002abc:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <USART1_IRQHandler+0xd0>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	b99b      	cbnz	r3, 8002aea <USART1_IRQHandler+0x9e>
		if (byte_count >= start_addr && byte_count < start_addr + get_reg_length())
 8002ac2:	8823      	ldrh	r3, [r4, #0]
 8002ac4:	6832      	ldr	r2, [r6, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d30e      	bcc.n	8002aea <USART1_IRQHandler+0x9e>
 8002acc:	8827      	ldrh	r7, [r4, #0]
 8002ace:	f7ff ff65 	bl	800299c <get_reg_length>
 8002ad2:	6833      	ldr	r3, [r6, #0]
 8002ad4:	b2bf      	uxth	r7, r7
 8002ad6:	4418      	add	r0, r3
 8002ad8:	4287      	cmp	r7, r0
 8002ada:	d206      	bcs.n	8002aea <USART1_IRQHandler+0x9e>
			set_reg(byte_count - start_addr, rx_byte);
 8002adc:	8823      	ldrh	r3, [r4, #0]
 8002ade:	6830      	ldr	r0, [r6, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	1a18      	subs	r0, r3, r0
 8002ae6:	f7ff ff85 	bl	80029f4 <set_reg>
	byte_count++;
 8002aea:	8823      	ldrh	r3, [r4, #0]
 8002aec:	3301      	adds	r3, #1
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	8023      	strh	r3, [r4, #0]
 8002af2:	e7c5      	b.n	8002a80 <USART1_IRQHandler+0x34>
			packet_type = TEST_PACKET;
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <USART1_IRQHandler+0xd0>)
 8002af6:	7018      	strb	r0, [r3, #0]
			break;
 8002af8:	e7e0      	b.n	8002abc <USART1_IRQHandler+0x70>
 8002afa:	bf00      	nop
 8002afc:	2000085c 	.word	0x2000085c
 8002b00:	2000027c 	.word	0x2000027c
 8002b04:	20000274 	.word	0x20000274
 8002b08:	20000280 	.word	0x20000280
 8002b0c:	20000276 	.word	0x20000276
 8002b10:	20000070 	.word	0x20000070
 8002b14:	20000278 	.word	0x20000278
 8002b18:	40011000 	.word	0x40011000
 8002b1c:	20000279 	.word	0x20000279

08002b20 <dmx512_rec_init>:
/*
 * configures timer for detecting BREAK and MAB
 * UART for dmx512 data
 */
void dmx512_rec_init()
{
 8002b20:	4770      	bx	lr
	...

08002b24 <get_mode_from_pins>:
#include <stm32f103xb.h>
#include <stm32f1xx.h>
#include <stm32f1xx_hal_gpio.h>

uint8_t get_mode_from_pins(void)
{
 8002b24:	b510      	push	{r4, lr}
	uint8_t mode = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_0_GPIO_Port, MODE_0_Pin))
 8002b26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b2a:	4808      	ldr	r0, [pc, #32]	; (8002b4c <get_mode_from_pins+0x28>)
 8002b2c:	f7fd fe0a 	bl	8000744 <HAL_GPIO_ReadPin>
	uint8_t mode = 0;
 8002b30:	fab0 f480 	clz	r4, r0
		mode = mode | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_1_GPIO_Port, MODE_1_Pin))
 8002b34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b38:	4804      	ldr	r0, [pc, #16]	; (8002b4c <get_mode_from_pins+0x28>)
	uint8_t mode = 0;
 8002b3a:	0964      	lsrs	r4, r4, #5
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_1_GPIO_Port, MODE_1_Pin))
 8002b3c:	f7fd fe02 	bl	8000744 <HAL_GPIO_ReadPin>
 8002b40:	b908      	cbnz	r0, 8002b46 <get_mode_from_pins+0x22>
		mode = mode | 0x02;
 8002b42:	f044 0402 	orr.w	r4, r4, #2
	return mode;
}
 8002b46:	4620      	mov	r0, r4
 8002b48:	bd10      	pop	{r4, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40011000 	.word	0x40011000

08002b50 <get_addr_from_pins>:

uint8_t get_addr_from_pins(void)
{
 8002b50:	b510      	push	{r4, lr}
	uint8_t addr = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_0_GPIO_Port, ADDR_0_Pin))
 8002b52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b56:	481f      	ldr	r0, [pc, #124]	; (8002bd4 <get_addr_from_pins+0x84>)
 8002b58:	f7fd fdf4 	bl	8000744 <HAL_GPIO_ReadPin>
	uint8_t addr = 0;
 8002b5c:	fab0 f480 	clz	r4, r0
		addr = addr | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_1_GPIO_Port, ADDR_1_Pin))
 8002b60:	2108      	movs	r1, #8
 8002b62:	481d      	ldr	r0, [pc, #116]	; (8002bd8 <get_addr_from_pins+0x88>)
	uint8_t addr = 0;
 8002b64:	0964      	lsrs	r4, r4, #5
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_1_GPIO_Port, ADDR_1_Pin))
 8002b66:	f7fd fded 	bl	8000744 <HAL_GPIO_ReadPin>
 8002b6a:	b908      	cbnz	r0, 8002b70 <get_addr_from_pins+0x20>
		addr = addr | 0x02;
 8002b6c:	f044 0402 	orr.w	r4, r4, #2
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_2_GPIO_Port, ADDR_2_Pin))
 8002b70:	2110      	movs	r1, #16
 8002b72:	4819      	ldr	r0, [pc, #100]	; (8002bd8 <get_addr_from_pins+0x88>)
 8002b74:	f7fd fde6 	bl	8000744 <HAL_GPIO_ReadPin>
 8002b78:	b908      	cbnz	r0, 8002b7e <get_addr_from_pins+0x2e>
		addr = addr | 0x04;
 8002b7a:	f044 0404 	orr.w	r4, r4, #4
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_3_GPIO_Port, ADDR_3_Pin))
 8002b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b82:	4815      	ldr	r0, [pc, #84]	; (8002bd8 <get_addr_from_pins+0x88>)
 8002b84:	f7fd fdde 	bl	8000744 <HAL_GPIO_ReadPin>
 8002b88:	b908      	cbnz	r0, 8002b8e <get_addr_from_pins+0x3e>
		addr = addr | 0x08;
 8002b8a:	f044 0408 	orr.w	r4, r4, #8
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_4_GPIO_Port, ADDR_4_Pin))
 8002b8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b92:	4811      	ldr	r0, [pc, #68]	; (8002bd8 <get_addr_from_pins+0x88>)
 8002b94:	f7fd fdd6 	bl	8000744 <HAL_GPIO_ReadPin>
 8002b98:	b908      	cbnz	r0, 8002b9e <get_addr_from_pins+0x4e>
		addr = addr | 0x10;
 8002b9a:	f044 0410 	orr.w	r4, r4, #16
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_5_GPIO_Port, ADDR_5_Pin))
 8002b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ba2:	480d      	ldr	r0, [pc, #52]	; (8002bd8 <get_addr_from_pins+0x88>)
 8002ba4:	f7fd fdce 	bl	8000744 <HAL_GPIO_ReadPin>
 8002ba8:	b908      	cbnz	r0, 8002bae <get_addr_from_pins+0x5e>
		addr = addr | 0x20;
 8002baa:	f044 0420 	orr.w	r4, r4, #32
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_6_GPIO_Port, ADDR_6_Pin))
 8002bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bb2:	4809      	ldr	r0, [pc, #36]	; (8002bd8 <get_addr_from_pins+0x88>)
 8002bb4:	f7fd fdc6 	bl	8000744 <HAL_GPIO_ReadPin>
 8002bb8:	b908      	cbnz	r0, 8002bbe <get_addr_from_pins+0x6e>
		addr = addr | 0x40;
 8002bba:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_7_GPIO_Port, ADDR_7_Pin))
 8002bbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bc2:	4805      	ldr	r0, [pc, #20]	; (8002bd8 <get_addr_from_pins+0x88>)
 8002bc4:	f7fd fdbe 	bl	8000744 <HAL_GPIO_ReadPin>
 8002bc8:	b908      	cbnz	r0, 8002bce <get_addr_from_pins+0x7e>
		addr = addr | 0x80;
 8002bca:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	return addr;
}
 8002bce:	4620      	mov	r0, r4
 8002bd0:	bd10      	pop	{r4, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40010800 	.word	0x40010800
 8002bd8:	40010c00 	.word	0x40010c00

08002bdc <scale_value>:

uint16_t scale_value( uint8_t val)
{
	uint32_t res = 0;
	//1) Scale input between 0 and max
	res = ((uint32_t)val * (uint32_t) MAX_PWM)/(uint32_t)255;
 8002bdc:	f240 4234 	movw	r2, #1076	; 0x434
 8002be0:	23ff      	movs	r3, #255	; 0xff
 8002be2:	4350      	muls	r0, r2
 8002be4:	fbb0 f3f3 	udiv	r3, r0, r3
	res = (res * (uint32_t)brightness_scale) / (uint32_t) MAX_PWM;
 8002be8:	4903      	ldr	r1, [pc, #12]	; (8002bf8 <scale_value+0x1c>)
 8002bea:	8808      	ldrh	r0, [r1, #0]
 8002bec:	4358      	muls	r0, r3
 8002bee:	fbb0 f0f2 	udiv	r0, r0, r2
	return res;
}
 8002bf2:	b280      	uxth	r0, r0
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000282 	.word	0x20000282

08002bfc <update_pwm_lights>:

//Check what has changed and update Lights
//We only update parameters that have changed otherwise we might have waveform-artifacts...
void update_pwm_lights(uint8_t force)
{
 8002bfc:	b570      	push	{r4, r5, r6, lr}
	//Check if global brightness has changed and scale value
	if ((reg_shadow[MAX_BRIGHTNESS])!= get_reg(MAX_BRIGHTNESS) || force)
 8002bfe:	4c67      	ldr	r4, [pc, #412]	; (8002d9c <update_pwm_lights+0x1a0>)
{
 8002c00:	4605      	mov	r5, r0
	if ((reg_shadow[MAX_BRIGHTNESS])!= get_reg(MAX_BRIGHTNESS) || force)
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	2000      	movs	r0, #0
 8002c06:	781e      	ldrb	r6, [r3, #0]
 8002c08:	f7ff ff02 	bl	8002a10 <get_reg>
 8002c0c:	4286      	cmp	r6, r0
 8002c0e:	d100      	bne.n	8002c12 <update_pwm_lights+0x16>
 8002c10:	b15d      	cbz	r5, 8002c2a <update_pwm_lights+0x2e>
	{
		brightness_scale = ((uint32_t)get_reg(MAX_BRIGHTNESS) * (uint32_t) MAX_PWM)/(uint32_t)255;
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7ff fefc 	bl	8002a10 <get_reg>
 8002c18:	f240 4334 	movw	r3, #1076	; 0x434
 8002c1c:	4358      	muls	r0, r3
 8002c1e:	23ff      	movs	r3, #255	; 0xff
 8002c20:	fbb0 f0f3 	udiv	r0, r0, r3
		//After a brightness update we need to update all the over PWM outputs
		force = 1;
 8002c24:	2501      	movs	r5, #1
		brightness_scale = ((uint32_t)get_reg(MAX_BRIGHTNESS) * (uint32_t) MAX_PWM)/(uint32_t)255;
 8002c26:	4b5e      	ldr	r3, [pc, #376]	; (8002da0 <update_pwm_lights+0x1a4>)
 8002c28:	8018      	strh	r0, [r3, #0]
	}

	//Update PWM Values if needed
	if ((reg_shadow[CH1_RED])!= get_reg(CH1_RED) || force)
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	785e      	ldrb	r6, [r3, #1]
 8002c30:	f7ff feee 	bl	8002a10 <get_reg>
 8002c34:	4286      	cmp	r6, r0
 8002c36:	d100      	bne.n	8002c3a <update_pwm_lights+0x3e>
 8002c38:	b14d      	cbz	r5, 8002c4e <update_pwm_lights+0x52>
	{
		configPWM(PWM_CH1,CH_RED,scale_value(get_reg(CH1_RED)));
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f7ff fee8 	bl	8002a10 <get_reg>
 8002c40:	f7ff ffcc 	bl	8002bdc <scale_value>
 8002c44:	2100      	movs	r1, #0
 8002c46:	4602      	mov	r2, r0
 8002c48:	4608      	mov	r0, r1
 8002c4a:	f000 fb17 	bl	800327c <configPWM>
	}

	if ((reg_shadow[CH1_GREEN])!= get_reg(CH1_GREEN) || force)
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	2002      	movs	r0, #2
 8002c52:	789e      	ldrb	r6, [r3, #2]
 8002c54:	f7ff fedc 	bl	8002a10 <get_reg>
 8002c58:	4286      	cmp	r6, r0
 8002c5a:	d100      	bne.n	8002c5e <update_pwm_lights+0x62>
 8002c5c:	b14d      	cbz	r5, 8002c72 <update_pwm_lights+0x76>
	{
		configPWM(PWM_CH1,CH_GREEN,scale_value(get_reg(CH1_GREEN)));
 8002c5e:	2002      	movs	r0, #2
 8002c60:	f7ff fed6 	bl	8002a10 <get_reg>
 8002c64:	f7ff ffba 	bl	8002bdc <scale_value>
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f000 fb05 	bl	800327c <configPWM>
	}

	if ((reg_shadow[CH1_BLUE])!= get_reg(CH1_BLUE) || force)
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	2003      	movs	r0, #3
 8002c76:	78de      	ldrb	r6, [r3, #3]
 8002c78:	f7ff feca 	bl	8002a10 <get_reg>
 8002c7c:	4286      	cmp	r6, r0
 8002c7e:	d100      	bne.n	8002c82 <update_pwm_lights+0x86>
 8002c80:	b14d      	cbz	r5, 8002c96 <update_pwm_lights+0x9a>
	{
		configPWM(PWM_CH1,CH_BLUE,scale_value(get_reg(CH1_BLUE)));
 8002c82:	2003      	movs	r0, #3
 8002c84:	f7ff fec4 	bl	8002a10 <get_reg>
 8002c88:	f7ff ffa8 	bl	8002bdc <scale_value>
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	4602      	mov	r2, r0
 8002c90:	2000      	movs	r0, #0
 8002c92:	f000 faf3 	bl	800327c <configPWM>
	}

	if ((reg_shadow[CH2_RED])!= get_reg(CH2_RED) || force)
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	2004      	movs	r0, #4
 8002c9a:	791e      	ldrb	r6, [r3, #4]
 8002c9c:	f7ff feb8 	bl	8002a10 <get_reg>
 8002ca0:	4286      	cmp	r6, r0
 8002ca2:	d100      	bne.n	8002ca6 <update_pwm_lights+0xaa>
 8002ca4:	b14d      	cbz	r5, 8002cba <update_pwm_lights+0xbe>
	{
		configPWM(PWM_CH2,CH_RED,scale_value(get_reg(CH2_RED)));
 8002ca6:	2004      	movs	r0, #4
 8002ca8:	f7ff feb2 	bl	8002a10 <get_reg>
 8002cac:	f7ff ff96 	bl	8002bdc <scale_value>
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f000 fae1 	bl	800327c <configPWM>
	}

	if ((reg_shadow[CH2_GREEN])!= get_reg(CH2_GREEN) || force)
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	2005      	movs	r0, #5
 8002cbe:	795e      	ldrb	r6, [r3, #5]
 8002cc0:	f7ff fea6 	bl	8002a10 <get_reg>
 8002cc4:	4286      	cmp	r6, r0
 8002cc6:	d100      	bne.n	8002cca <update_pwm_lights+0xce>
 8002cc8:	b14d      	cbz	r5, 8002cde <update_pwm_lights+0xe2>
	{
		configPWM(PWM_CH2,CH_GREEN,scale_value(get_reg(CH2_GREEN)));
 8002cca:	2005      	movs	r0, #5
 8002ccc:	f7ff fea0 	bl	8002a10 <get_reg>
 8002cd0:	f7ff ff84 	bl	8002bdc <scale_value>
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	4608      	mov	r0, r1
 8002cda:	f000 facf 	bl	800327c <configPWM>
	}

	if ((reg_shadow[CH2_BLUE])!= get_reg(CH2_BLUE) || force)
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	2006      	movs	r0, #6
 8002ce2:	799e      	ldrb	r6, [r3, #6]
 8002ce4:	f7ff fe94 	bl	8002a10 <get_reg>
 8002ce8:	4286      	cmp	r6, r0
 8002cea:	d100      	bne.n	8002cee <update_pwm_lights+0xf2>
 8002cec:	b14d      	cbz	r5, 8002d02 <update_pwm_lights+0x106>
	{
		configPWM(PWM_CH2,CH_BLUE,scale_value(get_reg(CH2_BLUE)));
 8002cee:	2006      	movs	r0, #6
 8002cf0:	f7ff fe8e 	bl	8002a10 <get_reg>
 8002cf4:	f7ff ff72 	bl	8002bdc <scale_value>
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f000 fabd 	bl	800327c <configPWM>
	}

	if ((reg_shadow[CH3_RED])!= get_reg(CH3_RED) || force)
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	2007      	movs	r0, #7
 8002d06:	79de      	ldrb	r6, [r3, #7]
 8002d08:	f7ff fe82 	bl	8002a10 <get_reg>
 8002d0c:	4286      	cmp	r6, r0
 8002d0e:	d100      	bne.n	8002d12 <update_pwm_lights+0x116>
 8002d10:	b14d      	cbz	r5, 8002d26 <update_pwm_lights+0x12a>
	{
		configPWM(PWM_CH3,CH_RED,scale_value(get_reg(CH3_RED)));
 8002d12:	2007      	movs	r0, #7
 8002d14:	f7ff fe7c 	bl	8002a10 <get_reg>
 8002d18:	f7ff ff60 	bl	8002bdc <scale_value>
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4602      	mov	r2, r0
 8002d20:	2002      	movs	r0, #2
 8002d22:	f000 faab 	bl	800327c <configPWM>
	}

	if ((reg_shadow[CH3_GREEN])!= get_reg(CH3_GREEN) || force)
 8002d26:	6823      	ldr	r3, [r4, #0]
 8002d28:	2008      	movs	r0, #8
 8002d2a:	7a1e      	ldrb	r6, [r3, #8]
 8002d2c:	f7ff fe70 	bl	8002a10 <get_reg>
 8002d30:	4286      	cmp	r6, r0
 8002d32:	d100      	bne.n	8002d36 <update_pwm_lights+0x13a>
 8002d34:	b14d      	cbz	r5, 8002d4a <update_pwm_lights+0x14e>
	{
		configPWM(PWM_CH3,CH_GREEN,scale_value(get_reg(CH3_GREEN)));
 8002d36:	2008      	movs	r0, #8
 8002d38:	f7ff fe6a 	bl	8002a10 <get_reg>
 8002d3c:	f7ff ff4e 	bl	8002bdc <scale_value>
 8002d40:	2101      	movs	r1, #1
 8002d42:	4602      	mov	r2, r0
 8002d44:	2002      	movs	r0, #2
 8002d46:	f000 fa99 	bl	800327c <configPWM>
	}

	if ((reg_shadow[CH3_BLUE])!= get_reg(CH3_BLUE) || force)
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	2009      	movs	r0, #9
 8002d4e:	7a5e      	ldrb	r6, [r3, #9]
 8002d50:	f7ff fe5e 	bl	8002a10 <get_reg>
 8002d54:	4286      	cmp	r6, r0
 8002d56:	d100      	bne.n	8002d5a <update_pwm_lights+0x15e>
 8002d58:	b14d      	cbz	r5, 8002d6e <update_pwm_lights+0x172>
	{
		configPWM(PWM_CH3,CH_BLUE,scale_value(get_reg(CH3_BLUE)));
 8002d5a:	2009      	movs	r0, #9
 8002d5c:	f7ff fe58 	bl	8002a10 <get_reg>
 8002d60:	f7ff ff3c 	bl	8002bdc <scale_value>
 8002d64:	2102      	movs	r1, #2
 8002d66:	4602      	mov	r2, r0
 8002d68:	4608      	mov	r0, r1
 8002d6a:	f000 fa87 	bl	800327c <configPWM>
	}

	if ((reg_shadow[CH3_WHITE])!= get_reg(CH3_WHITE) || force)
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	200a      	movs	r0, #10
 8002d72:	7a9c      	ldrb	r4, [r3, #10]
 8002d74:	f7ff fe4c 	bl	8002a10 <get_reg>
 8002d78:	4284      	cmp	r4, r0
 8002d7a:	d100      	bne.n	8002d7e <update_pwm_lights+0x182>
 8002d7c:	b14d      	cbz	r5, 8002d92 <update_pwm_lights+0x196>
	{
		configPWM(PWM_CH3,CH_WHITE,scale_value(get_reg(CH3_WHITE)));
 8002d7e:	200a      	movs	r0, #10
 8002d80:	f7ff fe46 	bl	8002a10 <get_reg>
 8002d84:	f7ff ff2a 	bl	8002bdc <scale_value>
 8002d88:	2103      	movs	r1, #3
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	2002      	movs	r0, #2
 8002d8e:	f000 fa75 	bl	800327c <configPWM>
	//Deal with LED Strip Registers
	if (DMX_MODE2 == get_mode())
	{

	}
}
 8002d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (DMX_MODE2 == get_mode())
 8002d96:	f7ff bdfb 	b.w	8002990 <get_mode>
 8002d9a:	bf00      	nop
 8002d9c:	20000284 	.word	0x20000284
 8002da0:	20000282 	.word	0x20000282

08002da4 <init_update_lights>:
{
 8002da4:	b538      	push	{r3, r4, r5, lr}
	if (reg_shadow != NULL)
 8002da6:	4c0c      	ldr	r4, [pc, #48]	; (8002dd8 <init_update_lights+0x34>)
 8002da8:	6820      	ldr	r0, [r4, #0]
 8002daa:	b108      	cbz	r0, 8002db0 <init_update_lights+0xc>
		free(reg_shadow);
 8002dac:	f000 ff4c 	bl	8003c48 <free>
	reg_shadow = malloc(get_reg_length()+1);
 8002db0:	f7ff fdf4 	bl	800299c <get_reg_length>
 8002db4:	3001      	adds	r0, #1
 8002db6:	f000 ff3f 	bl	8003c38 <malloc>
 8002dba:	4605      	mov	r5, r0
 8002dbc:	6020      	str	r0, [r4, #0]
	memset(reg_shadow,0,get_reg_length()+1);
 8002dbe:	f7ff fded 	bl	800299c <get_reg_length>
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	1c42      	adds	r2, r0, #1
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f000 ff46 	bl	8003c58 <memset>
}
 8002dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	update_pwm_lights(1);
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	f7ff bf13 	b.w	8002bfc <update_pwm_lights>
 8002dd6:	bf00      	nop
 8002dd8:	20000284 	.word	0x20000284

08002ddc <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ddc:	2228      	movs	r2, #40	; 0x28
{
 8002dde:	b530      	push	{r4, r5, lr}
 8002de0:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002de2:	eb0d 0002 	add.w	r0, sp, r2
 8002de6:	2100      	movs	r1, #0
 8002de8:	f000 ff36 	bl	8003c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dec:	2214      	movs	r2, #20
 8002dee:	2100      	movs	r1, #0
 8002df0:	eb0d 0002 	add.w	r0, sp, r2
 8002df4:	f000 ff30 	bl	8003c58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002df8:	2100      	movs	r1, #0
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	a801      	add	r0, sp, #4
 8002dfe:	f000 ff2b 	bl	8003c58 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002e02:	2309      	movs	r3, #9
 8002e04:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e0a:	2201      	movs	r2, #1
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e0c:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e0e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e10:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e12:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e16:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e18:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002e1a:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e1c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e1e:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e20:	f7fd ff9c 	bl	8000d5c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e24:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e26:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e28:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e2e:	4629      	mov	r1, r5
 8002e30:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e32:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e34:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e36:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e38:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e3a:	f7fe f969 	bl	8001110 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002e3e:	2312      	movs	r3, #18
 8002e40:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e46:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002e48:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002e4a:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e4c:	f7fe fa1e 	bl	800128c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002e50:	b015      	add	sp, #84	; 0x54
 8002e52:	bd30      	pop	{r4, r5, pc}

08002e54 <main>:
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
  HAL_Init();
 8002e58:	f7fd f9a4 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8002e5c:	f7ff ffbe 	bl	8002ddc <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	2210      	movs	r2, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e62:	4d8c      	ldr	r5, [pc, #560]	; (8003094 <main+0x240>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	2100      	movs	r1, #0
 8002e66:	eb0d 0002 	add.w	r0, sp, r2
 8002e6a:	f000 fef5 	bl	8003c58 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e6e:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8002e70:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e72:	f043 0310 	orr.w	r3, r3, #16
 8002e76:	61ab      	str	r3, [r5, #24]
 8002e78:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8002e7a:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e84:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8002e86:	4884      	ldr	r0, [pc, #528]	; (8003098 <main+0x244>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e88:	f043 0320 	orr.w	r3, r3, #32
 8002e8c:	61ab      	str	r3, [r5, #24]
 8002e8e:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pins : LED_Pin MODE_0_Pin MODE_1_Pin */
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e90:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9a:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e9c:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	61ab      	str	r3, [r5, #24]
 8002ea4:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea6:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	9302      	str	r3, [sp, #8]
 8002eae:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb0:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = LED_Pin;
 8002eb2:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb6:	f043 0308 	orr.w	r3, r3, #8
 8002eba:	61ab      	str	r3, [r5, #24]
 8002ebc:	69ab      	ldr	r3, [r5, #24]
  /*Configure GPIO pins : CH1_R_Pin CH1_G_Pin CH1_B_Pin CH2_R_Pin 
                           CH2_G_Pin CH3_R_Pin CH3_G_Pin CH3_B_Pin */
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
                          |CH2_G_Pin|CH3_R_Pin|CH3_G_Pin|CH3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ebe:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	9303      	str	r3, [sp, #12]
 8002ec8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8002eca:	f7fd fc41 	bl	8000750 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
 8002ece:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed2:	a904      	add	r1, sp, #16
 8002ed4:	4871      	ldr	r0, [pc, #452]	; (800309c <main+0x248>)
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
 8002ed6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ed8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002edc:	f7fd fb50 	bl	8000580 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee0:	a904      	add	r1, sp, #16
 8002ee2:	486e      	ldr	r0, [pc, #440]	; (800309c <main+0x248>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee4:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pin = LED_Pin;
 8002ee6:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eea:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eec:	f7fd fb48 	bl	8000580 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
 8002ef0:	f240 73ce 	movw	r3, #1998	; 0x7ce
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : BUTTON_Pin ADDR_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|ADDR_0_Pin;
 8002ef4:	f248 0a20 	movw	sl, #32800	; 0x8020
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef8:	a904      	add	r1, sp, #16
 8002efa:	4869      	ldr	r0, [pc, #420]	; (80030a0 <main+0x24c>)
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
 8002efc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efe:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f00:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f04:	f7fd fb3c 	bl	8000580 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f08:	a904      	add	r1, sp, #16
 8002f0a:	4863      	ldr	r0, [pc, #396]	; (8003098 <main+0x244>)
  GPIO_InitStruct.Pin = CH2_B_Pin|CH2_W_Pin;
 8002f0c:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f12:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f16:	f7fd fb33 	bl	8000580 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1a:	a904      	add	r1, sp, #16
 8002f1c:	4860      	ldr	r0, [pc, #384]	; (80030a0 <main+0x24c>)
  GPIO_InitStruct.Pin = BUTTON_Pin|ADDR_0_Pin;
 8002f1e:	f8cd a010 	str.w	sl, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f22:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f24:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f26:	f7fd fb2b 	bl	8000580 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR_5_Pin ADDR_6_Pin ADDR_7_Pin ADDR_1_Pin 
                           ADDR_2_Pin ADDR_3_Pin ADDR_4_Pin */
  GPIO_InitStruct.Pin = ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_1_Pin 
 8002f2a:	f247 3318 	movw	r3, #29464	; 0x7318
                          |ADDR_2_Pin|ADDR_3_Pin|ADDR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2e:	a904      	add	r1, sp, #16
 8002f30:	4859      	ldr	r0, [pc, #356]	; (8003098 <main+0x244>)
  GPIO_InitStruct.Pin = ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_1_Pin 
 8002f32:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f34:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f36:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f38:	f7fd fb22 	bl	8000580 <HAL_GPIO_Init>

  /*Configure GPIO pins : WS8212_CH2_Pin WS8212_CH1_Pin */
  GPIO_InitStruct.Pin = WS8212_CH2_Pin|WS8212_CH1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3c:	a904      	add	r1, sp, #16
 8002f3e:	4856      	ldr	r0, [pc, #344]	; (8003098 <main+0x244>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f42:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Pin = WS8212_CH2_Pin|WS8212_CH1_Pin;
 8002f46:	f8cd a010 	str.w	sl, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4a:	f7fd fb19 	bl	8000580 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DIR_Pin */
  GPIO_InitStruct.Pin = RS232_TX_Pin;
 8002f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f52:	f44f 2960 	mov.w	r9, #917504	; 0xe0000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8002f56:	a904      	add	r1, sp, #16
 8002f58:	484f      	ldr	r0, [pc, #316]	; (8003098 <main+0x244>)
  GPIO_InitStruct.Pin = RS232_TX_Pin;
 8002f5a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5c:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f5e:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8002f62:	f7fd fb0d 	bl	8000580 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002f66:	4a4f      	ldr	r2, [pc, #316]	; (80030a4 <main+0x250>)
  hadc1.Instance = ADC1;
 8002f68:	4e4f      	ldr	r6, [pc, #316]	; (80030a8 <main+0x254>)
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002f6a:	6853      	ldr	r3, [r2, #4]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002f6c:	4641      	mov	r1, r8
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002f6e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002f72:	433b      	orrs	r3, r7
 8002f74:	6053      	str	r3, [r2, #4]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002f76:	4849      	ldr	r0, [pc, #292]	; (800309c <main+0x248>)
 8002f78:	463a      	mov	r2, r7
 8002f7a:	f7fd fbe9 	bl	8000750 <HAL_GPIO_WritePin>
  hadc1.Instance = ADC1;
 8002f7e:	4b4b      	ldr	r3, [pc, #300]	; (80030ac <main+0x258>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f80:	4630      	mov	r0, r6
  hadc1.Instance = ADC1;
 8002f82:	6033      	str	r3, [r6, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f84:	60b4      	str	r4, [r6, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f86:	7334      	strb	r4, [r6, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f88:	7534      	strb	r4, [r6, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f8a:	f8c6 901c 	str.w	r9, [r6, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f8e:	6074      	str	r4, [r6, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002f90:	6137      	str	r7, [r6, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002f92:	9404      	str	r4, [sp, #16]
 8002f94:	9405      	str	r4, [sp, #20]
 8002f96:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f98:	f7fd f9ce 	bl	8000338 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f9c:	a904      	add	r1, sp, #16
 8002f9e:	4630      	mov	r0, r6
  hadc2.Instance = ADC2;
 8002fa0:	4e43      	ldr	r6, [pc, #268]	; (80030b0 <main+0x25c>)
  sConfig.Channel = ADC_CHANNEL_0;
 8002fa2:	9404      	str	r4, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fa4:	9705      	str	r7, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002fa6:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fa8:	f7fd f920 	bl	80001ec <HAL_ADC_ConfigChannel>
  hadc2.Instance = ADC2;
 8002fac:	4b41      	ldr	r3, [pc, #260]	; (80030b4 <main+0x260>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002fae:	4630      	mov	r0, r6
  hadc2.Instance = ADC2;
 8002fb0:	6033      	str	r3, [r6, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002fb2:	60b4      	str	r4, [r6, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002fb4:	7334      	strb	r4, [r6, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002fb6:	7534      	strb	r4, [r6, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fb8:	f8c6 901c 	str.w	r9, [r6, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fbc:	6074      	str	r4, [r6, #4]
  hadc2.Init.NbrOfConversion = 1;
 8002fbe:	6137      	str	r7, [r6, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002fc0:	9404      	str	r4, [sp, #16]
 8002fc2:	9405      	str	r4, [sp, #20]
 8002fc4:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002fc6:	f7fd f9b7 	bl	8000338 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 8002fca:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fcc:	4630      	mov	r0, r6
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fce:	260c      	movs	r6, #12
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fd0:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_4;
 8002fd2:	9304      	str	r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fd4:	9705      	str	r7, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002fd6:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fd8:	f7fd f908 	bl	80001ec <HAL_ADC_ConfigChannel>
  huart1.Instance = USART1;
 8002fdc:	4836      	ldr	r0, [pc, #216]	; (80030b8 <main+0x264>)
  huart1.Init.BaudRate = 250000;
 8002fde:	4a37      	ldr	r2, [pc, #220]	; (80030bc <main+0x268>)
 8002fe0:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <main+0x26c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe2:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 250000;
 8002fe4:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.StopBits = UART_STOPBITS_2;
 8002fe8:	f8c0 800c 	str.w	r8, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fec:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fee:	6146      	str	r6, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff0:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff2:	61c4      	str	r4, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8002ff4:	f7fe fcaa 	bl	800194c <HAL_HalfDuplex_Init>
  huart3.Init.BaudRate = 115200;
 8002ff8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002ffc:	4931      	ldr	r1, [pc, #196]	; (80030c4 <main+0x270>)
  huart3.Instance = USART3;
 8002ffe:	4832      	ldr	r0, [pc, #200]	; (80030c8 <main+0x274>)
  huart3.Init.BaudRate = 115200;
 8003000:	e880 000a 	stmia.w	r0, {r1, r3}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003004:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003006:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003008:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800300a:	6146      	str	r6, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800300c:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800300e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003010:	f7fe fc6e 	bl	80018f0 <HAL_UART_Init>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003014:	2280      	movs	r2, #128	; 0x80
 8003016:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <main+0x278>)
  print("");
 8003018:	482d      	ldr	r0, [pc, #180]	; (80030d0 <main+0x27c>)
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	f000 f9c4 	bl	80033a8 <print>
  print("-------------");
 8003020:	482c      	ldr	r0, [pc, #176]	; (80030d4 <main+0x280>)
 8003022:	f000 f9c1 	bl	80033a8 <print>
  print("DMX CTRL V1.0");
 8003026:	482c      	ldr	r0, [pc, #176]	; (80030d8 <main+0x284>)
 8003028:	f000 f9be 	bl	80033a8 <print>
  print("-------------");
 800302c:	4829      	ldr	r0, [pc, #164]	; (80030d4 <main+0x280>)
 800302e:	f000 f9bb 	bl	80033a8 <print>
  print("");
 8003032:	4827      	ldr	r0, [pc, #156]	; (80030d0 <main+0x27c>)
 8003034:	f000 f9b8 	bl	80033a8 <print>
 if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == SET)
 8003038:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  init_timers();
 800303a:	f000 f8f3 	bl	8003224 <init_timers>
  print("Timer Init complete");
 800303e:	4827      	ldr	r0, [pc, #156]	; (80030dc <main+0x288>)
 8003040:	f000 f9b2 	bl	80033a8 <print>
  dmx512_init((dmxmode_t)get_mode_from_pins(),get_addr_from_pins());
 8003044:	f7ff fd6e 	bl	8002b24 <get_mode_from_pins>
 8003048:	4605      	mov	r5, r0
 800304a:	f7ff fd81 	bl	8002b50 <get_addr_from_pins>
 800304e:	4601      	mov	r1, r0
 8003050:	4628      	mov	r0, r5
 8003052:	f7ff fcbb 	bl	80029cc <dmx512_init>
  print("DMX512 Config complete");
 8003056:	4822      	ldr	r0, [pc, #136]	; (80030e0 <main+0x28c>)
 8003058:	f000 f9a6 	bl	80033a8 <print>
  dmx512_rec_init();
 800305c:	f7ff fd60 	bl	8002b20 <dmx512_rec_init>
  print("DMX512 Init complete");
 8003060:	4820      	ldr	r0, [pc, #128]	; (80030e4 <main+0x290>)
 8003062:	f000 f9a1 	bl	80033a8 <print>
  init_update_lights();
 8003066:	f7ff fe9d 	bl	8002da4 <init_update_lights>
  print("PWM Update Init complete");
 800306a:	481f      	ldr	r0, [pc, #124]	; (80030e8 <main+0x294>)
 800306c:	f000 f99c 	bl	80033a8 <print>
  print("Shell Active");
 8003070:	481e      	ldr	r0, [pc, #120]	; (80030ec <main+0x298>)
 8003072:	f000 f999 	bl	80033a8 <print>
  print_no_newline("DBG>");
 8003076:	481e      	ldr	r0, [pc, #120]	; (80030f0 <main+0x29c>)
 8003078:	f000 f9b6 	bl	80033e8 <print_no_newline>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800307c:	4622      	mov	r2, r4
 800307e:	4641      	mov	r1, r8
 8003080:	4806      	ldr	r0, [pc, #24]	; (800309c <main+0x248>)
 8003082:	f7fd fb65 	bl	8000750 <HAL_GPIO_WritePin>
	shell_process();
 8003086:	f000 f9c9 	bl	800341c <shell_process>
	    update_pwm_lights(0);
 800308a:	2000      	movs	r0, #0
 800308c:	f7ff fdb6 	bl	8002bfc <update_pwm_lights>
 8003090:	e7f9      	b.n	8003086 <main+0x232>
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	40010c00 	.word	0x40010c00
 800309c:	40011000 	.word	0x40011000
 80030a0:	40010800 	.word	0x40010800
 80030a4:	40010000 	.word	0x40010000
 80030a8:	2000082c 	.word	0x2000082c
 80030ac:	40012400 	.word	0x40012400
 80030b0:	200007f0 	.word	0x200007f0
 80030b4:	40012800 	.word	0x40012800
 80030b8:	2000085c 	.word	0x2000085c
 80030bc:	40013800 	.word	0x40013800
 80030c0:	0003d090 	.word	0x0003d090
 80030c4:	40004800 	.word	0x40004800
 80030c8:	200007b0 	.word	0x200007b0
 80030cc:	e000e100 	.word	0xe000e100
 80030d0:	080049ba 	.word	0x080049ba
 80030d4:	080049fe 	.word	0x080049fe
 80030d8:	080048b0 	.word	0x080048b0
 80030dc:	080048be 	.word	0x080048be
 80030e0:	080048d2 	.word	0x080048d2
 80030e4:	080048e9 	.word	0x080048e9
 80030e8:	080048fe 	.word	0x080048fe
 80030ec:	08004917 	.word	0x08004917
 80030f0:	08004924 	.word	0x08004924

080030f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030f4:	4770      	bx	lr
	...

080030f8 <PWM_Timer_Init>:

	  TIM_MasterConfigTypeDef sMasterConfig;
	  TIM_OC_InitTypeDef sConfigOC;
	  TIM_ClockConfigTypeDef sClockSourceConfig;

	  memset(&sConfigOC, 0, sizeof(sConfigOC));
 80030f8:	221c      	movs	r2, #28
{
 80030fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030fe:	b08e      	sub	sp, #56	; 0x38
 8003100:	4606      	mov	r6, r0
	  memset(&sConfigOC, 0, sizeof(sConfigOC));
 8003102:	2100      	movs	r1, #0
 8003104:	eb0d 0002 	add.w	r0, sp, r2
 8003108:	f000 fda6 	bl	8003c58 <memset>
	  memset(&sMasterConfig, 0, sizeof(sMasterConfig));
 800310c:	2100      	movs	r1, #0
	  memset(&sClockSourceConfig, 0, sizeof(sClockSourceConfig));
 800310e:	2210      	movs	r2, #16
 8003110:	a803      	add	r0, sp, #12
	  memset(&sMasterConfig, 0, sizeof(sMasterConfig));
 8003112:	9101      	str	r1, [sp, #4]
 8003114:	9102      	str	r1, [sp, #8]
	  memset(&sClockSourceConfig, 0, sizeof(sClockSourceConfig));
 8003116:	f000 fd9f 	bl	8003c58 <memset>

	  switch(ID)
 800311a:	2e01      	cmp	r6, #1
 800311c:	4c38      	ldr	r4, [pc, #224]	; (8003200 <PWM_Timer_Init+0x108>)
 800311e:	d067      	beq.n	80031f0 <PWM_Timer_Init+0xf8>
 8003120:	d362      	bcc.n	80031e8 <PWM_Timer_Init+0xf0>
 8003122:	2e02      	cmp	r6, #2
 8003124:	d067      	beq.n	80031f6 <PWM_Timer_Init+0xfe>
	  	  case PWM_CH3:
	  		timerinfo[ID].Instance = TIM1;
		  break;
	  }

	  timerinfo[(uint8_t)ID].Init.Prescaler = 0;
 8003126:	2300      	movs	r3, #0
	  timerinfo[(uint8_t)ID].Init.CounterMode = TIM_COUNTERMODE_UP;
	  timerinfo[(uint8_t)ID].Init.Period = 1066; //TBD....
 8003128:	f240 422a 	movw	r2, #1066	; 0x42a
	  timerinfo[(uint8_t)ID].Init.Prescaler = 0;
 800312c:	eb04 1486 	add.w	r4, r4, r6, lsl #6
 8003130:	6063      	str	r3, [r4, #4]
	  timerinfo[(uint8_t)ID].Init.CounterMode = TIM_COUNTERMODE_UP;
 8003132:	60a3      	str	r3, [r4, #8]
	  timerinfo[(uint8_t)ID].Init.Period = 1066; //TBD....
 8003134:	60e2      	str	r2, [r4, #12]
	  timerinfo[(uint8_t)ID].Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003136:	6123      	str	r3, [r4, #16]
	  timerinfo[(uint8_t)ID].Init.RepetitionCounter = 0;
 8003138:	6163      	str	r3, [r4, #20]
	  if (HAL_TIM_Base_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)/* to use the Timer to generate a simple time base for TIM1 */
 800313a:	4620      	mov	r0, r4
 800313c:	f7fe f9de 	bl	80014fc <HAL_TIM_Base_Init>
 8003140:	b110      	cbz	r0, 8003148 <PWM_Timer_Init+0x50>
	  {
		  print("Timer Init Error 1");
 8003142:	4830      	ldr	r0, [pc, #192]	; (8003204 <PWM_Timer_Init+0x10c>)
 8003144:	f000 f930 	bl	80033a8 <print>
	  }

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;//the default clock is the internal clock from the APBx, using this function
 8003148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&timerinfo[(uint8_t)ID], &sClockSourceConfig) != HAL_OK)//Initializes the TIM PWM Time Base according to the specified
 800314c:	a903      	add	r1, sp, #12
 800314e:	4620      	mov	r0, r4
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;//the default clock is the internal clock from the APBx, using this function
 8003150:	9303      	str	r3, [sp, #12]
	  if (HAL_TIM_ConfigClockSource(&timerinfo[(uint8_t)ID], &sClockSourceConfig) != HAL_OK)//Initializes the TIM PWM Time Base according to the specified
 8003152:	f7fe fa9f 	bl	8001694 <HAL_TIM_ConfigClockSource>
 8003156:	b110      	cbz	r0, 800315e <PWM_Timer_Init+0x66>
	 //parameters in the TIM_HandleTypeDef and create the associated handle.
	   {
		  print("Timer Init Error 2");
 8003158:	482b      	ldr	r0, [pc, #172]	; (8003208 <PWM_Timer_Init+0x110>)
 800315a:	f000 f925 	bl	80033a8 <print>
	   }


	  if (HAL_TIM_PWM_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)
 800315e:	4620      	mov	r0, r4
 8003160:	f7fe f9e6 	bl	8001530 <HAL_TIM_PWM_Init>
 8003164:	b110      	cbz	r0, 800316c <PWM_Timer_Init+0x74>
	  {
		  print("Timer Init Error 3");
 8003166:	4829      	ldr	r0, [pc, #164]	; (800320c <PWM_Timer_Init+0x114>)
 8003168:	f000 f91e 	bl	80033a8 <print>
	  }


	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800316c:	2360      	movs	r3, #96	; 0x60
 800316e:	9307      	str	r3, [sp, #28]
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
	  sConfigOC.Pulse = MAX_PWM/2; /* 50% duty cycle is 538, set to 0 initially*///
 8003170:	f240 231a 	movw	r3, #538	; 0x21a
 8003174:	9308      	str	r3, [sp, #32]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003176:	2304      	movs	r3, #4
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003178:	2500      	movs	r5, #0
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800317a:	930b      	str	r3, [sp, #44]	; 0x2c
 800317c:	4b24      	ldr	r3, [pc, #144]	; (8003210 <PWM_Timer_Init+0x118>)
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
		  {
			  if (HAL_OK != HAL_TIM_PWM_ConfigChannel(&timerinfo[(uint8_t)ID], &sConfigOC, channelinfo[(int8_t)ID][ii]))
			  {
				  print("Timer Init Error 4");
 800317e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800321c <PWM_Timer_Init+0x124>
 8003182:	eb03 1706 	add.w	r7, r3, r6, lsl #4
 8003186:	b276      	sxtb	r6, r6
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003188:	9509      	str	r5, [sp, #36]	; 0x24
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800318a:	950a      	str	r5, [sp, #40]	; 0x28
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800318c:	950c      	str	r5, [sp, #48]	; 0x30
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800318e:	950d      	str	r5, [sp, #52]	; 0x34
 8003190:	eb03 1606 	add.w	r6, r3, r6, lsl #4
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 8003194:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8003198:	2bff      	cmp	r3, #255	; 0xff
 800319a:	d009      	beq.n	80031b0 <PWM_Timer_Init+0xb8>
			  if (HAL_OK != HAL_TIM_PWM_ConfigChannel(&timerinfo[(uint8_t)ID], &sConfigOC, channelinfo[(int8_t)ID][ii]))
 800319c:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 80031a0:	a907      	add	r1, sp, #28
 80031a2:	4620      	mov	r0, r4
 80031a4:	f7fe fa0a 	bl	80015bc <HAL_TIM_PWM_ConfigChannel>
 80031a8:	b110      	cbz	r0, 80031b0 <PWM_Timer_Init+0xb8>
				  print("Timer Init Error 4");
 80031aa:	4640      	mov	r0, r8
 80031ac:	f000 f8fc 	bl	80033a8 <print>
	  for (int ii=0;ii<4;ii++)
 80031b0:	3501      	adds	r5, #1
 80031b2:	2d04      	cmp	r5, #4
 80031b4:	d1ee      	bne.n	8003194 <PWM_Timer_Init+0x9c>

		  }
	  }

	 // HAL_TIM_MspPostInit(&timerinfo[(uint8_t)ID]);//output pin assignment
	  HAL_TIM_Base_Start(&timerinfo[(uint8_t)ID]); //Starts the TIM Base generation
 80031b6:	4620      	mov	r0, r4
 80031b8:	f7fe f955 	bl	8001466 <HAL_TIM_Base_Start>

	  for (int ii=0;ii<4;ii++)
 80031bc:	2500      	movs	r5, #0
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
		  {
			  if (HAL_OK != HAL_TIM_PWM_Start(&timerinfo[(uint8_t)ID], channelinfo[(int8_t)ID][ii]))
			  {
				  print("Timer Init Error 5");
 80031be:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8003220 <PWM_Timer_Init+0x128>
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 80031c2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 80031c6:	2bff      	cmp	r3, #255	; 0xff
 80031c8:	d008      	beq.n	80031dc <PWM_Timer_Init+0xe4>
			  if (HAL_OK != HAL_TIM_PWM_Start(&timerinfo[(uint8_t)ID], channelinfo[(int8_t)ID][ii]))
 80031ca:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 80031ce:	4620      	mov	r0, r4
 80031d0:	f7fe fb02 	bl	80017d8 <HAL_TIM_PWM_Start>
 80031d4:	b110      	cbz	r0, 80031dc <PWM_Timer_Init+0xe4>
				  print("Timer Init Error 5");
 80031d6:	4640      	mov	r0, r8
 80031d8:	f000 f8e6 	bl	80033a8 <print>
	  for (int ii=0;ii<4;ii++)
 80031dc:	3501      	adds	r5, #1
 80031de:	2d04      	cmp	r5, #4
 80031e0:	d1ef      	bne.n	80031c2 <PWM_Timer_Init+0xca>
			  }

		  }
	  }
}
 80031e2:	b00e      	add	sp, #56	; 0x38
 80031e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  		timerinfo[ID].Instance = TIM2;
 80031e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031ec:	6023      	str	r3, [r4, #0]
		  break;
 80031ee:	e79a      	b.n	8003126 <PWM_Timer_Init+0x2e>
	  		timerinfo[ID].Instance = TIM3;
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <PWM_Timer_Init+0x11c>)
 80031f2:	6423      	str	r3, [r4, #64]	; 0x40
		  break;
 80031f4:	e797      	b.n	8003126 <PWM_Timer_Init+0x2e>
	  		timerinfo[ID].Instance = TIM1;
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <PWM_Timer_Init+0x120>)
 80031f8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		  break;
 80031fc:	e793      	b.n	8003126 <PWM_Timer_Init+0x2e>
 80031fe:	bf00      	nop
 8003200:	2000089c 	.word	0x2000089c
 8003204:	08004929 	.word	0x08004929
 8003208:	0800493c 	.word	0x0800493c
 800320c:	0800494f 	.word	0x0800494f
 8003210:	08004988 	.word	0x08004988
 8003214:	40000400 	.word	0x40000400
 8003218:	40012c00 	.word	0x40012c00
 800321c:	08004962 	.word	0x08004962
 8003220:	08004975 	.word	0x08004975

08003224 <init_timers>:
{
 8003224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__HAL_RCC_TIM1_CLK_ENABLE();
 8003226:	4b14      	ldr	r3, [pc, #80]	; (8003278 <init_timers+0x54>)
	PWM_Timer_Init(PWM_CH1);
 8003228:	2000      	movs	r0, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 800322a:	699a      	ldr	r2, [r3, #24]
 800322c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003230:	619a      	str	r2, [r3, #24]
 8003232:	699a      	ldr	r2, [r3, #24]
 8003234:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003238:	9201      	str	r2, [sp, #4]
 800323a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();
 800323c:	69da      	ldr	r2, [r3, #28]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	61da      	str	r2, [r3, #28]
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	f002 0201 	and.w	r2, r2, #1
 800324a:	9202      	str	r2, [sp, #8]
 800324c:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_TIM2_CLK_ENABLE();
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	61da      	str	r2, [r3, #28]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	9303      	str	r3, [sp, #12]
 800325e:	9b03      	ldr	r3, [sp, #12]
	PWM_Timer_Init(PWM_CH1);
 8003260:	f7ff ff4a 	bl	80030f8 <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH2);
 8003264:	2001      	movs	r0, #1
 8003266:	f7ff ff47 	bl	80030f8 <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH3);
 800326a:	2002      	movs	r0, #2
 800326c:	f7ff ff44 	bl	80030f8 <PWM_Timer_Init>
}
 8003270:	b005      	add	sp, #20
 8003272:	f85d fb04 	ldr.w	pc, [sp], #4
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000

0800327c <configPWM>:


//Setup PWM
void configPWM(pwmtimerid_t ID,pwmchid_t channel, uint16_t duty)
{
	  if (channelinfo[(uint8_t) ID][channel] != 255)
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <configPWM+0x30>)
 800327e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8003282:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003286:	29ff      	cmp	r1, #255	; 0xff
 8003288:	d00e      	beq.n	80032a8 <configPWM+0x2c>
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <configPWM+0x34>)
 800328c:	0180      	lsls	r0, r0, #6
	  {
	  __HAL_TIM_SET_COMPARE(&timerinfo[ID],  channelinfo[(uint8_t)ID][(uint8_t)channel], duty);
 800328e:	581b      	ldr	r3, [r3, r0]
 8003290:	b909      	cbnz	r1, 8003296 <configPWM+0x1a>
 8003292:	635a      	str	r2, [r3, #52]	; 0x34
 8003294:	4770      	bx	lr
 8003296:	2904      	cmp	r1, #4
 8003298:	d101      	bne.n	800329e <configPWM+0x22>
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
 800329c:	4770      	bx	lr
 800329e:	2908      	cmp	r1, #8
 80032a0:	d101      	bne.n	80032a6 <configPWM+0x2a>
 80032a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80032a4:	4770      	bx	lr
 80032a6:	641a      	str	r2, [r3, #64]	; 0x40
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	08004988 	.word	0x08004988
 80032b0:	2000089c 	.word	0x2000089c

080032b4 <tracer_puts>:
	HAL_UART_Transmit(&huart3, &ch, 1, 5000);
}

void tracer_puts(uint8_t *str,const uint16_t size)
{
	HAL_UART_Transmit(&huart3,str,size, 5000);
 80032b4:	460a      	mov	r2, r1
 80032b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80032ba:	4601      	mov	r1, r0
 80032bc:	4801      	ldr	r0, [pc, #4]	; (80032c4 <tracer_puts+0x10>)
 80032be:	f7fe bb77 	b.w	80019b0 <HAL_UART_Transmit>
 80032c2:	bf00      	nop
 80032c4:	200007b0 	.word	0x200007b0

080032c8 <tracer_getchar>:
}


uint8_t tracer_getchar(void)
{
 80032c8:	b507      	push	{r0, r1, r2, lr}
	uint8_t data;
	if (HAL_OK == HAL_UART_Receive(&huart3, &data, 1, 0))
 80032ca:	2300      	movs	r3, #0
 80032cc:	2201      	movs	r2, #1
 80032ce:	f10d 0107 	add.w	r1, sp, #7
 80032d2:	4805      	ldr	r0, [pc, #20]	; (80032e8 <tracer_getchar+0x20>)
 80032d4:	f7fe fbc8 	bl	8001a68 <HAL_UART_Receive>
 80032d8:	b920      	cbnz	r0, 80032e4 <tracer_getchar+0x1c>
		return data;
 80032da:	f89d 0007 	ldrb.w	r0, [sp, #7]
	else
		return 0;
}
 80032de:	b003      	add	sp, #12
 80032e0:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
 80032e4:	2000      	movs	r0, #0
 80032e6:	e7fa      	b.n	80032de <tracer_getchar+0x16>
 80032e8:	200007b0 	.word	0x200007b0

080032ec <cmd_buf_reset>:
    }
}

static void cmd_buf_reset(void)
{
    cmd_buf_idx = 0;
 80032ec:	2100      	movs	r1, #0
 80032ee:	4b03      	ldr	r3, [pc, #12]	; (80032fc <cmd_buf_reset+0x10>)
    memset(cmd_buf, 0, sizeof(cmd_buf));
 80032f0:	2280      	movs	r2, #128	; 0x80
 80032f2:	4803      	ldr	r0, [pc, #12]	; (8003300 <cmd_buf_reset+0x14>)
    cmd_buf_idx = 0;
 80032f4:	6019      	str	r1, [r3, #0]
    memset(cmd_buf, 0, sizeof(cmd_buf));
 80032f6:	f000 bcaf 	b.w	8003c58 <memset>
 80032fa:	bf00      	nop
 80032fc:	20000308 	.word	0x20000308
 8003300:	20000288 	.word	0x20000288

08003304 <load_command_from_command_history>:
    }
    cmd_hist_get_idx = cmd_hist_put_idx;
}

static void load_command_from_command_history(uint8_t dir)
{
 8003304:	b510      	push	{r4, lr}
 8003306:	4c19      	ldr	r4, [pc, #100]	; (800336c <load_command_from_command_history+0x68>)
 8003308:	4a19      	ldr	r2, [pc, #100]	; (8003370 <load_command_from_command_history+0x6c>)
    /* backwards */
    if (0 == dir)
    {
        if (0 == cmd_hist_get_idx)
 800330a:	6823      	ldr	r3, [r4, #0]
    if (0 == dir)
 800330c:	b9d0      	cbnz	r0, 8003344 <load_command_from_command_history+0x40>
        if (0 == cmd_hist_get_idx)
 800330e:	b9a3      	cbnz	r3, 800333a <load_command_from_command_history+0x36>
        {
            if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_put_idx)
 8003310:	6813      	ldr	r3, [r2, #0]
 8003312:	2b07      	cmp	r3, #7
 8003314:	d015      	beq.n	8003342 <load_command_from_command_history+0x3e>
            {
                return;
            }
            cmd_hist_get_idx = SHELL_CMD_HISTORY_LEN - 1;
 8003316:	2307      	movs	r3, #7
        }
        
        cmd_hist_get_idx++;
        if (SHELL_CMD_HISTORY_LEN == cmd_hist_get_idx)
        {
            cmd_hist_get_idx = 0;
 8003318:	6023      	str	r3, [r4, #0]
        }
    }
    
    cmd_buf_reset();
 800331a:	f7ff ffe7 	bl	80032ec <cmd_buf_reset>
    strncpy(cmd_buf, cmd_hist[cmd_hist_get_idx], sizeof(cmd_buf));
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <load_command_from_command_history+0x70>)
 8003320:	6821      	ldr	r1, [r4, #0]
 8003322:	2280      	movs	r2, #128	; 0x80
 8003324:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 8003328:	4813      	ldr	r0, [pc, #76]	; (8003378 <load_command_from_command_history+0x74>)
 800332a:	f000 fd78 	bl	8003e1e <strncpy>
    cmd_buf_idx = strlen(cmd_buf);
 800332e:	4812      	ldr	r0, [pc, #72]	; (8003378 <load_command_from_command_history+0x74>)
 8003330:	f7fc ff0c 	bl	800014c <strlen>
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <load_command_from_command_history+0x78>)
 8003336:	6018      	str	r0, [r3, #0]
 8003338:	e003      	b.n	8003342 <load_command_from_command_history+0x3e>
            if (cmd_hist_get_idx - 1 == cmd_hist_put_idx)
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	3b01      	subs	r3, #1
 800333e:	4293      	cmp	r3, r2
 8003340:	d1ea      	bne.n	8003318 <load_command_from_command_history+0x14>
 8003342:	bd10      	pop	{r4, pc}
        if (cmd_hist_get_idx == cmd_hist_put_idx)
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	4293      	cmp	r3, r2
 8003348:	d0fb      	beq.n	8003342 <load_command_from_command_history+0x3e>
        if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_get_idx)
 800334a:	2b07      	cmp	r3, #7
 800334c:	d105      	bne.n	800335a <load_command_from_command_history+0x56>
            if (0 == cmd_hist_put_idx)
 800334e:	b93a      	cbnz	r2, 8003360 <load_command_from_command_history+0x5c>
                cmd_hist_get_idx++;
 8003350:	6022      	str	r2, [r4, #0]
}
 8003352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                cmd_buf_reset();
 8003356:	f7ff bfc9 	b.w	80032ec <cmd_buf_reset>
            if (cmd_hist_get_idx + 1 == cmd_hist_put_idx)
 800335a:	1c59      	adds	r1, r3, #1
 800335c:	428a      	cmp	r2, r1
 800335e:	d0f7      	beq.n	8003350 <load_command_from_command_history+0x4c>
        cmd_hist_get_idx++;
 8003360:	3301      	adds	r3, #1
        if (SHELL_CMD_HISTORY_LEN == cmd_hist_get_idx)
 8003362:	2b08      	cmp	r3, #8
            cmd_hist_get_idx = 0;
 8003364:	bf08      	it	eq
 8003366:	2300      	moveq	r3, #0
 8003368:	e7d6      	b.n	8003318 <load_command_from_command_history+0x14>
 800336a:	bf00      	nop
 800336c:	2000070c 	.word	0x2000070c
 8003370:	20000710 	.word	0x20000710
 8003374:	2000030c 	.word	0x2000030c
 8003378:	20000288 	.word	0x20000288
 800337c:	20000308 	.word	0x20000308

08003380 <send_vt100_key>:

static void send_vt100_key(vt100_key_t key)
{
 8003380:	b508      	push	{r3, lr}
    vt100_keycode_t * keycode = vt100_get_keycode(key);
 8003382:	f000 fbf1 	bl	8003b68 <vt100_get_keycode>
    if (NULL != keycode)
 8003386:	b128      	cbz	r0, 8003394 <send_vt100_key+0x14>
    {
        uart_send( keycode->code, keycode->code_len);
    }
}
 8003388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tracer_puts(bytes,size);
 800338c:	7a01      	ldrb	r1, [r0, #8]
 800338e:	6840      	ldr	r0, [r0, #4]
 8003390:	f7ff bf90 	b.w	80032b4 <tracer_puts>
 8003394:	bd08      	pop	{r3, pc}

08003396 <uart_receive_byte>:
{
 8003396:	b510      	push	{r4, lr}
 8003398:	4604      	mov	r4, r0
	unsigned char data = tracer_getchar();
 800339a:	f7ff ff95 	bl	80032c8 <tracer_getchar>
		*byte = 0;
 800339e:	7020      	strb	r0, [r4, #0]
	if (data == 0)
 80033a0:	b900      	cbnz	r0, 80033a4 <uart_receive_byte+0xe>
		return 0;
 80033a2:	bd10      	pop	{r4, pc}
		return 1;
 80033a4:	2001      	movs	r0, #1
}
 80033a6:	bd10      	pop	{r4, pc}

080033a8 <print>:
{	
 80033a8:	b40f      	push	{r0, r1, r2, r3}
 80033aa:	b513      	push	{r0, r1, r4, lr}
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80033ac:	4c0c      	ldr	r4, [pc, #48]	; (80033e0 <print+0x38>)
{	
 80033ae:	ab04      	add	r3, sp, #16
 80033b0:	f853 2b04 	ldr.w	r2, [r3], #4
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80033b4:	217c      	movs	r1, #124	; 0x7c
 80033b6:	4620      	mov	r0, r4
    va_start(args, fmt);
 80033b8:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80033ba:	f000 fe5b 	bl	8004074 <vsniprintf>
    strcat(dbgMsg, "\r\n");
 80033be:	4909      	ldr	r1, [pc, #36]	; (80033e4 <print+0x3c>)
 80033c0:	4620      	mov	r0, r4
 80033c2:	f000 fd0b 	bl	8003ddc <strcat>
    len = strlen(dbgMsg);
 80033c6:	4620      	mov	r0, r4
 80033c8:	f7fc fec0 	bl	800014c <strlen>
	tracer_puts(bytes,size);
 80033cc:	b281      	uxth	r1, r0
 80033ce:	4620      	mov	r0, r4
 80033d0:	f7ff ff70 	bl	80032b4 <tracer_puts>
}
 80033d4:	b002      	add	sp, #8
 80033d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033da:	b004      	add	sp, #16
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000714 	.word	0x20000714
 80033e4:	080049b8 	.word	0x080049b8

080033e8 <print_no_newline>:
{	
 80033e8:	b40f      	push	{r0, r1, r2, r3}
 80033ea:	b513      	push	{r0, r1, r4, lr}
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80033ec:	4c0a      	ldr	r4, [pc, #40]	; (8003418 <print_no_newline+0x30>)
{	
 80033ee:	ab04      	add	r3, sp, #16
 80033f0:	f853 2b04 	ldr.w	r2, [r3], #4
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80033f4:	217c      	movs	r1, #124	; 0x7c
 80033f6:	4620      	mov	r0, r4
    va_start(args, fmt);
 80033f8:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80033fa:	f000 fe3b 	bl	8004074 <vsniprintf>
    (void) uart_send((uint8_t *)dbgMsg, (uint16_t) strlen(dbgMsg));		
 80033fe:	4620      	mov	r0, r4
 8003400:	f7fc fea4 	bl	800014c <strlen>
	tracer_puts(bytes,size);
 8003404:	b281      	uxth	r1, r0
 8003406:	4620      	mov	r0, r4
 8003408:	f7ff ff54 	bl	80032b4 <tracer_puts>
}
 800340c:	b002      	add	sp, #8
 800340e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003412:	b004      	add	sp, #16
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000714 	.word	0x20000714

0800341c <shell_process>:
    
    cmd_buf_reset();
}

void shell_process(void)
{
 800341c:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
	char byte;
	const char prompt[] = "DBG>";
 8003420:	4b70      	ldr	r3, [pc, #448]	; (80035e4 <shell_process+0x1c8>)
{
 8003422:	b097      	sub	sp, #92	; 0x5c
	const char prompt[] = "DBG>";
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	791b      	ldrb	r3, [r3, #4]
            print_no_newline(cmd_buf);
        }
        else if (VT100_KEY_CURSOR_DOWN == key)
        {
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 8003428:	4d6f      	ldr	r5, [pc, #444]	; (80035e8 <shell_process+0x1cc>)
            print(shell_cmd_list[i].cmd);
 800342a:	4e70      	ldr	r6, [pc, #448]	; (80035ec <shell_process+0x1d0>)
	const char prompt[] = "DBG>";
 800342c:	9003      	str	r0, [sp, #12]
 800342e:	f88d 3010 	strb.w	r3, [sp, #16]
	while (1 == uart_receive_byte((uint8_t*)&byte))
 8003432:	f10d 000b 	add.w	r0, sp, #11
 8003436:	f7ff ffae 	bl	8003396 <uart_receive_byte>
 800343a:	2801      	cmp	r0, #1
 800343c:	d002      	beq.n	8003444 <shell_process+0x28>
            }
            load_command_from_command_history(1);
            print_no_newline(cmd_buf);
        }
	}
}
 800343e:	b017      	add	sp, #92	; 0x5c
 8003440:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
        vt100_key_t key = vt100_process_byte(byte);
 8003444:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8003448:	f000 fb46 	bl	8003ad8 <vt100_process_byte>
        if (VT100_KEY_PRINTABLE == key)
 800344c:	2801      	cmp	r0, #1
 800344e:	d10e      	bne.n	800346e <shell_process+0x52>
    if ((unsigned int)cmd_buf_idx < sizeof(cmd_buf))
 8003450:	682b      	ldr	r3, [r5, #0]
 8003452:	2b7f      	cmp	r3, #127	; 0x7f
 8003454:	d805      	bhi.n	8003462 <shell_process+0x46>
        cmd_buf[cmd_buf_idx++] = c;
 8003456:	1c5a      	adds	r2, r3, #1
            cmd_buf_add_char(byte);
 8003458:	f89d 100b 	ldrb.w	r1, [sp, #11]
        cmd_buf[cmd_buf_idx++] = c;
 800345c:	602a      	str	r2, [r5, #0]
 800345e:	4a64      	ldr	r2, [pc, #400]	; (80035f0 <shell_process+0x1d4>)
 8003460:	54d1      	strb	r1, [r2, r3]
	tracer_puts(bytes,size);
 8003462:	2101      	movs	r1, #1
 8003464:	f10d 000b 	add.w	r0, sp, #11
 8003468:	f7ff ff24 	bl	80032b4 <tracer_puts>
 800346c:	e7e1      	b.n	8003432 <shell_process+0x16>
        else if (VT100_KEY_ENTER == key)
 800346e:	2808      	cmp	r0, #8
 8003470:	d17a      	bne.n	8003568 <shell_process+0x14c>
			print("");
 8003472:	4860      	ldr	r0, [pc, #384]	; (80035f4 <shell_process+0x1d8>)
 8003474:	f7ff ff98 	bl	80033a8 <print>
	if (0 != strlen(cmd_buf))
 8003478:	495d      	ldr	r1, [pc, #372]	; (80035f0 <shell_process+0x1d4>)
 800347a:	780b      	ldrb	r3, [r1, #0]
 800347c:	b183      	cbz	r3, 80034a0 <shell_process+0x84>
    strncpy(cmd_hist[cmd_hist_put_idx], cmd_buf, sizeof(cmd_buf));
 800347e:	4f5e      	ldr	r7, [pc, #376]	; (80035f8 <shell_process+0x1dc>)
 8003480:	485e      	ldr	r0, [pc, #376]	; (80035fc <shell_process+0x1e0>)
 8003482:	683c      	ldr	r4, [r7, #0]
 8003484:	2280      	movs	r2, #128	; 0x80
 8003486:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    cmd_hist_put_idx++;
 800348a:	3401      	adds	r4, #1
    strncpy(cmd_hist[cmd_hist_put_idx], cmd_buf, sizeof(cmd_buf));
 800348c:	f000 fcc7 	bl	8003e1e <strncpy>
    if (cmd_hist_put_idx >= SHELL_CMD_HISTORY_LEN)
 8003490:	2c07      	cmp	r4, #7
        cmd_hist_put_idx = 0;
 8003492:	bfca      	itet	gt
 8003494:	2300      	movgt	r3, #0
    cmd_hist_put_idx++;
 8003496:	603c      	strle	r4, [r7, #0]
        cmd_hist_put_idx = 0;
 8003498:	603b      	strgt	r3, [r7, #0]
    cmd_hist_get_idx = cmd_hist_put_idx;
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	4b58      	ldr	r3, [pc, #352]	; (8003600 <shell_process+0x1e4>)
 800349e:	601a      	str	r2, [r3, #0]
	tokens[arg_num] = strtok(buffer, " ");
 80034a0:	4958      	ldr	r1, [pc, #352]	; (8003604 <shell_process+0x1e8>)
 80034a2:	4853      	ldr	r0, [pc, #332]	; (80035f0 <shell_process+0x1d4>)
 80034a4:	f000 fcd0 	bl	8003e48 <strtok>
	int arg_num = 0;
 80034a8:	2400      	movs	r4, #0
	tokens[arg_num] = strtok(buffer, " ");
 80034aa:	f10d 0958 	add.w	r9, sp, #88	; 0x58
		tokens[++arg_num] = strtok(NULL, " ");
 80034ae:	4f55      	ldr	r7, [pc, #340]	; (8003604 <shell_process+0x1e8>)
	tokens[arg_num] = strtok(buffer, " ");
 80034b0:	f849 0d44 	str.w	r0, [r9, #-68]!
	while(NULL != tokens[arg_num] && arg_num < (MAX_ARGUMENT_NUM-1))
 80034b4:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
 80034b8:	b10b      	cbz	r3, 80034be <shell_process+0xa2>
 80034ba:	2c0f      	cmp	r4, #15
 80034bc:	d11f      	bne.n	80034fe <shell_process+0xe2>
    if (0 == strncmp(argv[0], "help", SHELL_CMD_BUF_LEN))
 80034be:	2280      	movs	r2, #128	; 0x80
 80034c0:	4951      	ldr	r1, [pc, #324]	; (8003608 <shell_process+0x1ec>)
 80034c2:	9805      	ldr	r0, [sp, #20]
 80034c4:	f000 fc99 	bl	8003dfa <strncmp>
	return arg_num - 1;
 80034c8:	3c01      	subs	r4, #1
    if (0 == strncmp(argv[0], "help", SHELL_CMD_BUF_LEN))
 80034ca:	4607      	mov	r7, r0
 80034cc:	b1f8      	cbz	r0, 800350e <shell_process+0xf2>
    if (0 == strncmp(argv[0], "cls", SHELL_CMD_BUF_LEN))
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	494e      	ldr	r1, [pc, #312]	; (800360c <shell_process+0x1f0>)
 80034d2:	9805      	ldr	r0, [sp, #20]
 80034d4:	f000 fc91 	bl	8003dfa <strncmp>
 80034d8:	bb58      	cbnz	r0, 8003532 <shell_process+0x116>
        send_vt100_key(VT100_KEY_CLEAR_SCREEN);
 80034da:	200d      	movs	r0, #13
 80034dc:	f7ff ff50 	bl	8003380 <send_vt100_key>
        send_vt100_key(VT100_KEY_MOVE_CURSOR_HOME);
 80034e0:	200e      	movs	r0, #14
 80034e2:	f7ff ff4d 	bl	8003380 <send_vt100_key>
    cmd_buf_reset();
 80034e6:	f7ff ff01 	bl	80032ec <cmd_buf_reset>
	tracer_puts(bytes,size);
 80034ea:	f10d 000b 	add.w	r0, sp, #11
 80034ee:	2101      	movs	r1, #1
 80034f0:	f7ff fee0 	bl	80032b4 <tracer_puts>
			print_no_newline("\n%s", prompt);
 80034f4:	a903      	add	r1, sp, #12
 80034f6:	4846      	ldr	r0, [pc, #280]	; (8003610 <shell_process+0x1f4>)
 80034f8:	f7ff ff76 	bl	80033e8 <print_no_newline>
 80034fc:	e799      	b.n	8003432 <shell_process+0x16>
		tokens[++arg_num] = strtok(NULL, " ");
 80034fe:	4639      	mov	r1, r7
 8003500:	2000      	movs	r0, #0
 8003502:	f000 fca1 	bl	8003e48 <strtok>
 8003506:	3401      	adds	r4, #1
 8003508:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
 800350c:	e7d2      	b.n	80034b4 <shell_process+0x98>
            print(shell_cmd_list[i].cmd);
 800350e:	f04f 0a0c 	mov.w	sl, #12
        print("");
 8003512:	4838      	ldr	r0, [pc, #224]	; (80035f4 <shell_process+0x1d8>)
 8003514:	f7ff ff48 	bl	80033a8 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 8003518:	4b3e      	ldr	r3, [pc, #248]	; (8003614 <shell_process+0x1f8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	9b01      	ldr	r3, [sp, #4]
 8003520:	429f      	cmp	r7, r3
 8003522:	dad4      	bge.n	80034ce <shell_process+0xb2>
            print(shell_cmd_list[i].cmd);
 8003524:	fb0a f307 	mul.w	r3, sl, r7
 8003528:	5998      	ldr	r0, [r3, r6]
 800352a:	f7ff ff3d 	bl	80033a8 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 800352e:	3701      	adds	r7, #1
 8003530:	e7f5      	b.n	800351e <shell_process+0x102>
    if (0 == strncmp(argv[0], "cls", SHELL_CMD_BUF_LEN))
 8003532:	f04f 0a00 	mov.w	sl, #0
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 8003536:	4b37      	ldr	r3, [pc, #220]	; (8003614 <shell_process+0x1f8>)
 8003538:	4f2c      	ldr	r7, [pc, #176]	; (80035ec <shell_process+0x1d0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	9301      	str	r3, [sp, #4]
 800353e:	9b01      	ldr	r3, [sp, #4]
 8003540:	459a      	cmp	sl, r3
 8003542:	dad0      	bge.n	80034e6 <shell_process+0xca>
            if(0 == strncmp(argv[0], shell_cmd_list[i].cmd, SHELL_CMD_BUF_LEN))
 8003544:	2280      	movs	r2, #128	; 0x80
 8003546:	6839      	ldr	r1, [r7, #0]
 8003548:	9805      	ldr	r0, [sp, #20]
 800354a:	f000 fc56 	bl	8003dfa <strncmp>
 800354e:	b938      	cbnz	r0, 8003560 <shell_process+0x144>
                if(0 == shell_cmd_list[i].handler(argc, argv))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4649      	mov	r1, r9
 8003554:	4620      	mov	r0, r4
 8003556:	4798      	blx	r3
 8003558:	b910      	cbnz	r0, 8003560 <shell_process+0x144>
                    print(shell_cmd_list[i].desc);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff ff24 	bl	80033a8 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 8003560:	f10a 0a01 	add.w	sl, sl, #1
 8003564:	370c      	adds	r7, #12
 8003566:	e7ea      	b.n	800353e <shell_process+0x122>
        else if (VT100_KEY_INVALID == key)
 8003568:	2800      	cmp	r0, #0
 800356a:	f43f af62 	beq.w	8003432 <shell_process+0x16>
        else if (VT100_KEY_BACKSPACE == key)
 800356e:	2807      	cmp	r0, #7
 8003570:	d10e      	bne.n	8003590 <shell_process+0x174>
    if (cmd_buf_idx > 0)
 8003572:	682b      	ldr	r3, [r5, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	dd04      	ble.n	8003582 <shell_process+0x166>
        cmd_buf[--cmd_buf_idx] = 0;
 8003578:	2100      	movs	r1, #0
 800357a:	4a1d      	ldr	r2, [pc, #116]	; (80035f0 <shell_process+0x1d4>)
 800357c:	3b01      	subs	r3, #1
 800357e:	602b      	str	r3, [r5, #0]
 8003580:	54d1      	strb	r1, [r2, r3]
            send_vt100_key(VT100_KEY_BACKSPACE);
 8003582:	2007      	movs	r0, #7
 8003584:	f7ff fefc 	bl	8003380 <send_vt100_key>
            send_vt100_key(VT100_KEY_CLEAR_EOL);
 8003588:	200a      	movs	r0, #10
 800358a:	f7ff fef9 	bl	8003380 <send_vt100_key>
 800358e:	e750      	b.n	8003432 <shell_process+0x16>
        else if (VT100_KEY_CURSOR_UP == key)
 8003590:	2802      	cmp	r0, #2
 8003592:	d116      	bne.n	80035c2 <shell_process+0x1a6>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 8003594:	200b      	movs	r0, #11
 8003596:	f7ff fef3 	bl	8003380 <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 800359a:	2400      	movs	r4, #0
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	3304      	adds	r3, #4
 80035a0:	429c      	cmp	r4, r3
 80035a2:	d309      	bcc.n	80035b8 <shell_process+0x19c>
			print_no_newline(prompt);
 80035a4:	a803      	add	r0, sp, #12
 80035a6:	f7ff ff1f 	bl	80033e8 <print_no_newline>
            load_command_from_command_history(0);
 80035aa:	2000      	movs	r0, #0
            load_command_from_command_history(1);
 80035ac:	f7ff feaa 	bl	8003304 <load_command_from_command_history>
            print_no_newline(cmd_buf);
 80035b0:	480f      	ldr	r0, [pc, #60]	; (80035f0 <shell_process+0x1d4>)
 80035b2:	f7ff ff19 	bl	80033e8 <print_no_newline>
 80035b6:	e73c      	b.n	8003432 <shell_process+0x16>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 80035b8:	200c      	movs	r0, #12
 80035ba:	f7ff fee1 	bl	8003380 <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 80035be:	3401      	adds	r4, #1
 80035c0:	e7ec      	b.n	800359c <shell_process+0x180>
        else if (VT100_KEY_CURSOR_DOWN == key)
 80035c2:	2803      	cmp	r0, #3
 80035c4:	f47f af35 	bne.w	8003432 <shell_process+0x16>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 80035c8:	200b      	movs	r0, #11
 80035ca:	f7ff fed9 	bl	8003380 <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 80035ce:	2400      	movs	r4, #0
 80035d0:	682b      	ldr	r3, [r5, #0]
 80035d2:	429c      	cmp	r4, r3
 80035d4:	db01      	blt.n	80035da <shell_process+0x1be>
            load_command_from_command_history(1);
 80035d6:	2001      	movs	r0, #1
 80035d8:	e7e8      	b.n	80035ac <shell_process+0x190>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 80035da:	200c      	movs	r0, #12
 80035dc:	f7ff fed0 	bl	8003380 <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 80035e0:	3401      	adds	r4, #1
 80035e2:	e7f5      	b.n	80035d0 <shell_process+0x1b4>
 80035e4:	08004924 	.word	0x08004924
 80035e8:	20000308 	.word	0x20000308
 80035ec:	08004a80 	.word	0x08004a80
 80035f0:	20000288 	.word	0x20000288
 80035f4:	080049ba 	.word	0x080049ba
 80035f8:	20000710 	.word	0x20000710
 80035fc:	2000030c 	.word	0x2000030c
 8003600:	2000070c 	.word	0x2000070c
 8003604:	08004c76 	.word	0x08004c76
 8003608:	080049bb 	.word	0x080049bb
 800360c:	080049c0 	.word	0x080049c0
 8003610:	080049c4 	.word	0x080049c4
 8003614:	080049c8 	.word	0x080049c8

08003618 <shell_cmd_dumpconfig>:
		return 1;
}

//dumpconfig
static int shell_cmd_dumpconfig(int argc, char ** argv)
{
 8003618:	b508      	push	{r3, lr}
		print("TBD");
 800361a:	4802      	ldr	r0, [pc, #8]	; (8003624 <shell_cmd_dumpconfig+0xc>)
 800361c:	f7ff fec4 	bl	80033a8 <print>
		return 1;
}
 8003620:	2001      	movs	r0, #1
 8003622:	bd08      	pop	{r3, pc}
 8003624:	080049cc 	.word	0x080049cc

08003628 <shell_cmd_getaddr>:
{
 8003628:	b508      	push	{r3, lr}
		print("DMX512 Address: %d",get_addr());
 800362a:	f7ff f9ab 	bl	8002984 <get_addr>
 800362e:	4601      	mov	r1, r0
 8003630:	4802      	ldr	r0, [pc, #8]	; (800363c <shell_cmd_getaddr+0x14>)
 8003632:	f7ff feb9 	bl	80033a8 <print>
}
 8003636:	2001      	movs	r0, #1
 8003638:	bd08      	pop	{r3, pc}
 800363a:	bf00      	nop
 800363c:	08004a2e 	.word	0x08004a2e

08003640 <shell_cmd_getmode>:
{
 8003640:	b508      	push	{r3, lr}
	switch (get_mode())
 8003642:	f7ff f9a5 	bl	8002990 <get_mode>
 8003646:	2801      	cmp	r0, #1
 8003648:	d008      	beq.n	800365c <shell_cmd_getmode+0x1c>
 800364a:	d303      	bcc.n	8003654 <shell_cmd_getmode+0x14>
 800364c:	2802      	cmp	r0, #2
 800364e:	d007      	beq.n	8003660 <shell_cmd_getmode+0x20>
}
 8003650:	2001      	movs	r0, #1
 8003652:	bd08      	pop	{r3, pc}
		print("Mode None (Uninitialized)");
 8003654:	4803      	ldr	r0, [pc, #12]	; (8003664 <shell_cmd_getmode+0x24>)
		print("Mode 2 (PWM + Strip)");
 8003656:	f7ff fea7 	bl	80033a8 <print>
		break;
 800365a:	e7f9      	b.n	8003650 <shell_cmd_getmode+0x10>
		print("Mode 1 (PWM)");
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <shell_cmd_getmode+0x28>)
 800365e:	e7fa      	b.n	8003656 <shell_cmd_getmode+0x16>
		print("Mode 2 (PWM + Strip)");
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <shell_cmd_getmode+0x2c>)
 8003662:	e7f8      	b.n	8003656 <shell_cmd_getmode+0x16>
 8003664:	08004a41 	.word	0x08004a41
 8003668:	08004a5b 	.word	0x08004a5b
 800366c:	08004a68 	.word	0x08004a68

08003670 <shell_cmd_dumpregs>:
{
 8003670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		print("DMX512 Address: %d",get_addr());
 8003672:	f7ff f987 	bl	8002984 <get_addr>
 8003676:	4601      	mov	r1, r0
 8003678:	4816      	ldr	r0, [pc, #88]	; (80036d4 <shell_cmd_dumpregs+0x64>)
 800367a:	f7ff fe95 	bl	80033a8 <print>
		print("DMX512 Blocklength: %d",get_reg_length());
 800367e:	f7ff f98d 	bl	800299c <get_reg_length>
 8003682:	4601      	mov	r1, r0
 8003684:	4814      	ldr	r0, [pc, #80]	; (80036d8 <shell_cmd_dumpregs+0x68>)
 8003686:	f7ff fe8f 	bl	80033a8 <print>
		print("Mode: %d",(uint8_t)get_mode());
 800368a:	f7ff f981 	bl	8002990 <get_mode>
 800368e:	4601      	mov	r1, r0
 8003690:	4812      	ldr	r0, [pc, #72]	; (80036dc <shell_cmd_dumpregs+0x6c>)
 8003692:	f7ff fe89 	bl	80033a8 <print>
		print("---------------------------");
 8003696:	4812      	ldr	r0, [pc, #72]	; (80036e0 <shell_cmd_dumpregs+0x70>)
 8003698:	f7ff fe86 	bl	80033a8 <print>
		for(int ii=0;ii< get_reg_length();ii++)
 800369c:	2400      	movs	r4, #0
			print("Reg: %d\t Addr:%d  \t (%s)\t Val: %d",ii,get_addr()+ii,get_reg_name(ii),get_reg(ii));
 800369e:	4d11      	ldr	r5, [pc, #68]	; (80036e4 <shell_cmd_dumpregs+0x74>)
		for(int ii=0;ii< get_reg_length();ii++)
 80036a0:	f7ff f97c 	bl	800299c <get_reg_length>
 80036a4:	42a0      	cmp	r0, r4
 80036a6:	d802      	bhi.n	80036ae <shell_cmd_dumpregs+0x3e>
}
 80036a8:	2001      	movs	r0, #1
 80036aa:	b003      	add	sp, #12
 80036ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			print("Reg: %d\t Addr:%d  \t (%s)\t Val: %d",ii,get_addr()+ii,get_reg_name(ii),get_reg(ii));
 80036ae:	f7ff f969 	bl	8002984 <get_addr>
 80036b2:	1826      	adds	r6, r4, r0
 80036b4:	4620      	mov	r0, r4
 80036b6:	f7ff f9bb 	bl	8002a30 <get_reg_name>
 80036ba:	4607      	mov	r7, r0
 80036bc:	4620      	mov	r0, r4
 80036be:	f7ff f9a7 	bl	8002a10 <get_reg>
 80036c2:	4621      	mov	r1, r4
 80036c4:	9000      	str	r0, [sp, #0]
 80036c6:	463b      	mov	r3, r7
 80036c8:	4632      	mov	r2, r6
 80036ca:	4628      	mov	r0, r5
 80036cc:	f7ff fe6c 	bl	80033a8 <print>
		for(int ii=0;ii< get_reg_length();ii++)
 80036d0:	3401      	adds	r4, #1
 80036d2:	e7e5      	b.n	80036a0 <shell_cmd_dumpregs+0x30>
 80036d4:	08004a2e 	.word	0x08004a2e
 80036d8:	080049d0 	.word	0x080049d0
 80036dc:	080049e7 	.word	0x080049e7
 80036e0:	080049f0 	.word	0x080049f0
 80036e4:	08004a0c 	.word	0x08004a0c

080036e8 <shell_cmd_setpwm>:

//setpwm
static int shell_cmd_setpwm(int argc, char ** argv)
{
	if (argc == 3)
 80036e8:	2803      	cmp	r0, #3
{
 80036ea:	b570      	push	{r4, r5, r6, lr}
 80036ec:	460c      	mov	r4, r1
	if (argc == 3)
 80036ee:	d111      	bne.n	8003714 <shell_cmd_setpwm+0x2c>
	{
		configPWM((pwmtimerid_t)atoi(argv[1]),(pwmchid_t)atoi(argv[2]), (uint16_t)atoi(argv[3]));
 80036f0:	6848      	ldr	r0, [r1, #4]
 80036f2:	f000 fa72 	bl	8003bda <atoi>
 80036f6:	4605      	mov	r5, r0
 80036f8:	68a0      	ldr	r0, [r4, #8]
 80036fa:	f000 fa6e 	bl	8003bda <atoi>
 80036fe:	4606      	mov	r6, r0
 8003700:	68e0      	ldr	r0, [r4, #12]
 8003702:	f000 fa6a 	bl	8003bda <atoi>
 8003706:	b2f1      	uxtb	r1, r6
 8003708:	b282      	uxth	r2, r0
 800370a:	b2e8      	uxtb	r0, r5
 800370c:	f7ff fdb6 	bl	800327c <configPWM>
 8003710:	2001      	movs	r0, #1
 8003712:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		return 0;
 8003714:	2000      	movs	r0, #0
	}
	return 1;
}
 8003716:	bd70      	pop	{r4, r5, r6, pc}

08003718 <shell_cmd_test>:
	if (argc == 1)
 8003718:	2801      	cmp	r0, #1
{
 800371a:	b510      	push	{r4, lr}
 800371c:	4604      	mov	r4, r0
	if (argc == 1)
 800371e:	d105      	bne.n	800372c <shell_cmd_test+0x14>
		print("Loopback Data: %s",argv[1]);
 8003720:	6849      	ldr	r1, [r1, #4]
 8003722:	4803      	ldr	r0, [pc, #12]	; (8003730 <shell_cmd_test+0x18>)
 8003724:	f7ff fe40 	bl	80033a8 <print>
}
 8003728:	4620      	mov	r0, r4
 800372a:	bd10      	pop	{r4, pc}
	return 0;
 800372c:	2400      	movs	r4, #0
 800372e:	e7fb      	b.n	8003728 <shell_cmd_test+0x10>
 8003730:	08004ac8 	.word	0x08004ac8

08003734 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_MspInit+0x3c>)
{
 8003736:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	619a      	str	r2, [r3, #24]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	f002 0201 	and.w	r2, r2, #1
 8003746:	9200      	str	r2, [sp, #0]
 8003748:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003750:	61da      	str	r2, [r3, #28]
 8003752:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003754:	4a07      	ldr	r2, [pc, #28]	; (8003774 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800375e:	6853      	ldr	r3, [r2, #4]
 8003760:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003764:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003768:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800376a:	b002      	add	sp, #8
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	40010000 	.word	0x40010000

08003778 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003778:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377a:	2410      	movs	r4, #16
{
 800377c:	4605      	mov	r5, r0
 800377e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	4622      	mov	r2, r4
 8003782:	2100      	movs	r1, #0
 8003784:	eb0d 0004 	add.w	r0, sp, r4
 8003788:	f000 fa66 	bl	8003c58 <memset>
  if(hadc->Instance==ADC1)
 800378c:	682b      	ldr	r3, [r5, #0]
 800378e:	4a1e      	ldr	r2, [pc, #120]	; (8003808 <HAL_ADC_MspInit+0x90>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d11d      	bne.n	80037d0 <HAL_ADC_MspInit+0x58>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003794:	4b1d      	ldr	r3, [pc, #116]	; (800380c <HAL_ADC_MspInit+0x94>)
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = ANALOG_0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(ANALOG_0_GPIO_Port, &GPIO_InitStruct);
 8003796:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_ADC1_CLK_ENABLE();
 800379a:	699a      	ldr	r2, [r3, #24]
 800379c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a0:	619a      	str	r2, [r3, #24]
 80037a2:	699a      	ldr	r2, [r3, #24]
 80037a4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80037a8:	9200      	str	r2, [sp, #0]
 80037aa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	f042 0204 	orr.w	r2, r2, #4
 80037b2:	619a      	str	r2, [r3, #24]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ANALOG_0_Pin;
 80037be:	2301      	movs	r3, #1
 80037c0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037c2:	2303      	movs	r3, #3
 80037c4:	9305      	str	r3, [sp, #20]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN4 
    */
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 80037c6:	4812      	ldr	r0, [pc, #72]	; (8003810 <HAL_ADC_MspInit+0x98>)
 80037c8:	f7fc feda 	bl	8000580 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80037cc:	b009      	add	sp, #36	; 0x24
 80037ce:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 80037d0:	4a10      	ldr	r2, [pc, #64]	; (8003814 <HAL_ADC_MspInit+0x9c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d1fa      	bne.n	80037cc <HAL_ADC_MspInit+0x54>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80037d6:	4b0d      	ldr	r3, [pc, #52]	; (800380c <HAL_ADC_MspInit+0x94>)
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 80037d8:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 80037da:	699a      	ldr	r2, [r3, #24]
 80037dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037e0:	619a      	str	r2, [r3, #24]
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80037e8:	9202      	str	r2, [sp, #8]
 80037ea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	f042 0204 	orr.w	r2, r2, #4
 80037f2:	619a      	str	r2, [r3, #24]
 80037f4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 80037f6:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	9303      	str	r3, [sp, #12]
 80037fe:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003800:	2303      	movs	r3, #3
 8003802:	9305      	str	r3, [sp, #20]
 8003804:	e7df      	b.n	80037c6 <HAL_ADC_MspInit+0x4e>
 8003806:	bf00      	nop
 8003808:	40012400 	.word	0x40012400
 800380c:	40021000 	.word	0x40021000
 8003810:	40010800 	.word	0x40010800
 8003814:	40012800 	.word	0x40012800

08003818 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	2210      	movs	r2, #16
{
 800381a:	b510      	push	{r4, lr}
 800381c:	4604      	mov	r4, r0
 800381e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	eb0d 0002 	add.w	r0, sp, r2
 8003824:	2100      	movs	r1, #0
 8003826:	f000 fa17 	bl	8003c58 <memset>
  if(huart->Instance==USART1)
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	4a2a      	ldr	r2, [pc, #168]	; (80038d8 <HAL_UART_MspInit+0xc0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d125      	bne.n	800387e <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003832:	4b2a      	ldr	r3, [pc, #168]	; (80038dc <HAL_UART_MspInit+0xc4>)
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = RS485_RXTX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8003834:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8003836:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8003838:	4829      	ldr	r0, [pc, #164]	; (80038e0 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800383a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800383e:	619a      	str	r2, [r3, #24]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003846:	9200      	str	r2, [sp, #0]
 8003848:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	f042 0208 	orr.w	r2, r2, #8
 8003850:	619a      	str	r2, [r3, #24]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = RS485_RXTX_Pin;
 800385c:	2340      	movs	r3, #64	; 0x40
 800385e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003860:	2312      	movs	r3, #18
 8003862:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003864:	2303      	movs	r3, #3
 8003866:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8003868:	f7fc fe8a 	bl	8000580 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800386c:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <HAL_UART_MspInit+0xcc>)
 800386e:	6853      	ldr	r3, [r2, #4]
 8003870:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800387a:	b008      	add	sp, #32
 800387c:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 800387e:	4a1a      	ldr	r2, [pc, #104]	; (80038e8 <HAL_UART_MspInit+0xd0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d1fa      	bne.n	800387a <HAL_UART_MspInit+0x62>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003884:	4b15      	ldr	r3, [pc, #84]	; (80038dc <HAL_UART_MspInit+0xc4>)
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 8003886:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8003888:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 800388a:	4815      	ldr	r0, [pc, #84]	; (80038e0 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800388c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003890:	61da      	str	r2, [r3, #28]
 8003892:	69da      	ldr	r2, [r3, #28]
 8003894:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003898:	9202      	str	r2, [sp, #8]
 800389a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	f042 0208 	orr.w	r2, r2, #8
 80038a2:	619a      	str	r2, [r3, #24]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	9303      	str	r3, [sp, #12]
 80038ac:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = RS232_TX_Pin;
 80038ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b4:	2302      	movs	r3, #2
 80038b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038b8:	2303      	movs	r3, #3
 80038ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 80038bc:	f7fc fe60 	bl	8000580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS232_RX_Pin;
 80038c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038c4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038c6:	2300      	movs	r3, #0
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 80038c8:	a904      	add	r1, sp, #16
 80038ca:	4805      	ldr	r0, [pc, #20]	; (80038e0 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 80038d0:	f7fc fe56 	bl	8000580 <HAL_GPIO_Init>
}
 80038d4:	e7d1      	b.n	800387a <HAL_UART_MspInit+0x62>
 80038d6:	bf00      	nop
 80038d8:	40013800 	.word	0x40013800
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40010c00 	.word	0x40010c00
 80038e4:	40010000 	.word	0x40010000
 80038e8:	40004800 	.word	0x40004800

080038ec <NMI_Handler>:
 80038ec:	4770      	bx	lr

080038ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ee:	e7fe      	b.n	80038ee <HardFault_Handler>

080038f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038f0:	e7fe      	b.n	80038f0 <MemManage_Handler>

080038f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038f2:	e7fe      	b.n	80038f2 <BusFault_Handler>

080038f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038f4:	e7fe      	b.n	80038f4 <UsageFault_Handler>

080038f6 <SVC_Handler>:
 80038f6:	4770      	bx	lr

080038f8 <DebugMon_Handler>:
 80038f8:	4770      	bx	lr

080038fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038fa:	4770      	bx	lr

080038fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038fc:	f7fc bc64 	b.w	80001c8 <HAL_IncTick>

08003900 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003900:	4801      	ldr	r0, [pc, #4]	; (8003908 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8003902:	f7fc bf9f 	b.w	8000844 <HAL_PCD_IRQHandler>
 8003906:	bf00      	nop
 8003908:	2000095c 	.word	0x2000095c

0800390c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800390c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800390e:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <_sbrk+0x2c>)
{
 8003910:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	b909      	cbnz	r1, 800391a <_sbrk+0xe>
		heap_end = &end;
 8003916:	4909      	ldr	r1, [pc, #36]	; (800393c <_sbrk+0x30>)
 8003918:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800391a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800391c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800391e:	4402      	add	r2, r0
 8003920:	428a      	cmp	r2, r1
 8003922:	d906      	bls.n	8003932 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003924:	f000 f95e 	bl	8003be4 <__errno>
 8003928:	230c      	movs	r3, #12
 800392a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800392c:	f04f 30ff 	mov.w	r0, #4294967295
 8003930:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003932:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003934:	bd08      	pop	{r3, pc}
 8003936:	bf00      	nop
 8003938:	20000794 	.word	0x20000794
 800393c:	20000bcc 	.word	0x20000bcc

08003940 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <SystemInit+0x40>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	4a0d      	ldr	r2, [pc, #52]	; (8003984 <SystemInit+0x44>)
 800394e:	400a      	ands	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003958:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800395c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003964:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800396c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800396e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003972:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003974:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <SystemInit+0x48>)
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
 8003984:	f8ff0000 	.word	0xf8ff0000
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800398c:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8003990:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003994:	f7fe bcc6 	b.w	8002324 <USBD_LL_SetupStage>

08003998 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003998:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800399c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80039a0:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80039a4:	f7fe bceb 	b.w	800237e <USBD_LL_DataOutStage>

080039a8 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80039a8:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80039ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ae:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80039b2:	f7fe bd1e 	b.w	80023f2 <USBD_LL_DataInStage>

080039b6 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80039b6:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80039ba:	f7fe bdb2 	b.w	8002522 <USBD_LL_SOF>

080039be <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80039be:	6883      	ldr	r3, [r0, #8]
{ 
 80039c0:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80039c2:	2b02      	cmp	r3, #2
{ 
 80039c4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80039c6:	d001      	beq.n	80039cc <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80039c8:	f7ff fb94 	bl	80030f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80039cc:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 80039d0:	2101      	movs	r1, #1
 80039d2:	f7fe fd90 	bl	80024f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80039d6:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 80039da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80039de:	f7fe bd63 	b.w	80024a8 <USBD_LL_Reset>
	...

080039e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80039e4:	b510      	push	{r4, lr}
 80039e6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80039e8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80039ec:	f7fe fd86 	bl	80024fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80039f0:	69a3      	ldr	r3, [r4, #24]
 80039f2:	b123      	cbz	r3, 80039fe <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80039f4:	4a02      	ldr	r2, [pc, #8]	; (8003a00 <HAL_PCD_SuspendCallback+0x1c>)
 80039f6:	6913      	ldr	r3, [r2, #16]
 80039f8:	f043 0306 	orr.w	r3, r3, #6
 80039fc:	6113      	str	r3, [r2, #16]
 80039fe:	bd10      	pop	{r4, pc}
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003a04:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003a08:	f7fe bd81 	b.w	800250e <USBD_LL_Resume>

08003a0c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003a0c:	b510      	push	{r4, lr}
 8003a0e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003a10:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003a14:	4613      	mov	r3, r2
 8003a16:	4622      	mov	r2, r4
 8003a18:	f7fc feb3 	bl	8000782 <HAL_PCD_EP_Open>
 8003a1c:	2803      	cmp	r0, #3
 8003a1e:	bf9a      	itte	ls
 8003a20:	4b01      	ldrls	r3, [pc, #4]	; (8003a28 <USBD_LL_OpenEP+0x1c>)
 8003a22:	5c18      	ldrbls	r0, [r3, r0]
 8003a24:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8003a26:	bd10      	pop	{r4, pc}
 8003a28:	08004b8e 	.word	0x08004b8e

08003a2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003a2c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003a2e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003a32:	f7fd f92d 	bl	8000c90 <HAL_PCD_EP_SetStall>
 8003a36:	2803      	cmp	r0, #3
 8003a38:	bf9a      	itte	ls
 8003a3a:	4b02      	ldrls	r3, [pc, #8]	; (8003a44 <USBD_LL_StallEP+0x18>)
 8003a3c:	5c18      	ldrbls	r0, [r3, r0]
 8003a3e:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8003a40:	bd08      	pop	{r3, pc}
 8003a42:	bf00      	nop
 8003a44:	08004b8e 	.word	0x08004b8e

08003a48 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003a48:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003a4a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003a4e:	f7fd f953 	bl	8000cf8 <HAL_PCD_EP_ClrStall>
 8003a52:	2803      	cmp	r0, #3
 8003a54:	bf9a      	itte	ls
 8003a56:	4b02      	ldrls	r3, [pc, #8]	; (8003a60 <USBD_LL_ClearStallEP+0x18>)
 8003a58:	5c18      	ldrbls	r0, [r3, r0]
 8003a5a:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8003a5c:	bd08      	pop	{r3, pc}
 8003a5e:	bf00      	nop
 8003a60:	08004b8e 	.word	0x08004b8e

08003a64 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003a64:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003a66:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003a6a:	bf45      	ittet	mi
 8003a6c:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003a70:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003a74:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003a78:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003a7c:	bf58      	it	pl
 8003a7e:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 8003a82:	4770      	bx	lr

08003a84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003a84:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003a86:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003a8a:	f7fc fe66 	bl	800075a <HAL_PCD_SetAddress>
 8003a8e:	2803      	cmp	r0, #3
 8003a90:	bf9a      	itte	ls
 8003a92:	4b02      	ldrls	r3, [pc, #8]	; (8003a9c <USBD_LL_SetUSBAddress+0x18>)
 8003a94:	5c18      	ldrbls	r0, [r3, r0]
 8003a96:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8003a98:	bd08      	pop	{r3, pc}
 8003a9a:	bf00      	nop
 8003a9c:	08004b8e 	.word	0x08004b8e

08003aa0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003aa0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003aa2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003aa6:	f7fc feb7 	bl	8000818 <HAL_PCD_EP_Transmit>
 8003aaa:	2803      	cmp	r0, #3
 8003aac:	bf9a      	itte	ls
 8003aae:	4b02      	ldrls	r3, [pc, #8]	; (8003ab8 <USBD_LL_Transmit+0x18>)
 8003ab0:	5c18      	ldrbls	r0, [r3, r0]
 8003ab2:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8003ab4:	bd08      	pop	{r3, pc}
 8003ab6:	bf00      	nop
 8003ab8:	08004b8e 	.word	0x08004b8e

08003abc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003abc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003abe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003ac2:	f7fc fe91 	bl	80007e8 <HAL_PCD_EP_Receive>
 8003ac6:	2803      	cmp	r0, #3
 8003ac8:	bf9a      	itte	ls
 8003aca:	4b02      	ldrls	r3, [pc, #8]	; (8003ad4 <USBD_LL_PrepareReceive+0x18>)
 8003acc:	5c18      	ldrbls	r0, [r3, r0]
 8003ace:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8003ad0:	bd08      	pop	{r3, pc}
 8003ad2:	bf00      	nop
 8003ad4:	08004b8e 	.word	0x08004b8e

08003ad8 <vt100_process_byte>:
    
    return VT100_KEY_INVALID;
}

vt100_key_t vt100_process_byte(uint8_t byte)
{
 8003ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    static uint8_t cbuf[8] = {0};
    static uint8_t cbuf_idx = 0;
    
    if (0 == cbuf_idx && true == is_printable(byte))
 8003adc:	4d1f      	ldr	r5, [pc, #124]	; (8003b5c <vt100_process_byte+0x84>)
 8003ade:	782b      	ldrb	r3, [r5, #0]
 8003ae0:	b91b      	cbnz	r3, 8003aea <vt100_process_byte+0x12>
 8003ae2:	f1a0 0220 	sub.w	r2, r0, #32
 8003ae6:	2a5e      	cmp	r2, #94	; 0x5e
 8003ae8:	d931      	bls.n	8003b4e <vt100_process_byte+0x76>
    {
        return VT100_KEY_PRINTABLE;
    }
    else if (0x0D == byte) /* Enter */
 8003aea:	280d      	cmp	r0, #13
 8003aec:	d032      	beq.n	8003b54 <vt100_process_byte+0x7c>
        return VT100_KEY_ENTER;
    }
    else
    {
        vt100_key_t key = VT100_KEY_INVALID;
        cbuf[cbuf_idx++] = byte;
 8003aee:	4c1c      	ldr	r4, [pc, #112]	; (8003b60 <vt100_process_byte+0x88>)
 8003af0:	4f1c      	ldr	r7, [pc, #112]	; (8003b64 <vt100_process_byte+0x8c>)
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8003af2:	f04f 0800 	mov.w	r8, #0
 8003af6:	46b9      	mov	r9, r7
            (0 == strncmp((const char*)vt100_keycodes[ii].code, (const char*)buf, len)))
 8003af8:	46a2      	mov	sl, r4
        cbuf[cbuf_idx++] = byte;
 8003afa:	1c5e      	adds	r6, r3, #1
 8003afc:	b2f6      	uxtb	r6, r6
 8003afe:	702e      	strb	r6, [r5, #0]
 8003b00:	54e0      	strb	r0, [r4, r3]
        if ((len == vt100_keycodes[ii].code_len) &&
 8003b02:	7a3b      	ldrb	r3, [r7, #8]
 8003b04:	42b3      	cmp	r3, r6
 8003b06:	d115      	bne.n	8003b34 <vt100_process_byte+0x5c>
            (0 == strncmp((const char*)vt100_keycodes[ii].code, (const char*)buf, len)))
 8003b08:	4632      	mov	r2, r6
 8003b0a:	4651      	mov	r1, sl
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f974 	bl	8003dfa <strncmp>
        if ((len == vt100_keycodes[ii].code_len) &&
 8003b12:	4603      	mov	r3, r0
 8003b14:	b970      	cbnz	r0, 8003b34 <vt100_process_byte+0x5c>
            return vt100_keycodes[ii].key;
 8003b16:	220c      	movs	r2, #12
 8003b18:	fb02 f808 	mul.w	r8, r2, r8
 8003b1c:	f819 0008 	ldrb.w	r0, [r9, r8]
        key = find_key(cbuf, cbuf_idx);
        if (VT100_KEY_INVALID != key)
 8003b20:	b980      	cbnz	r0, 8003b44 <vt100_process_byte+0x6c>
            memset(cbuf, 0, sizeof(cbuf));
            return key;
        }
        else
        {
            if (cbuf_idx >= sizeof(cbuf))
 8003b22:	2e07      	cmp	r6, #7
 8003b24:	f04f 0000 	mov.w	r0, #0
 8003b28:	d915      	bls.n	8003b56 <vt100_process_byte+0x7e>
            {
                cbuf_idx = 0;
 8003b2a:	7028      	strb	r0, [r5, #0]
                memset(cbuf, 0, sizeof(cbuf));
 8003b2c:	6020      	str	r0, [r4, #0]
 8003b2e:	6060      	str	r0, [r4, #4]
 8003b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8003b34:	f108 0801 	add.w	r8, r8, #1
 8003b38:	f1b8 0f0f 	cmp.w	r8, #15
 8003b3c:	f107 070c 	add.w	r7, r7, #12
 8003b40:	d1df      	bne.n	8003b02 <vt100_process_byte+0x2a>
 8003b42:	e7ee      	b.n	8003b22 <vt100_process_byte+0x4a>
            cbuf_idx = 0;
 8003b44:	702b      	strb	r3, [r5, #0]
            memset(cbuf, 0, sizeof(cbuf));
 8003b46:	6023      	str	r3, [r4, #0]
 8003b48:	6063      	str	r3, [r4, #4]
            return key;
 8003b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return VT100_KEY_PRINTABLE;
 8003b4e:	2001      	movs	r0, #1
 8003b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return VT100_KEY_ENTER;
 8003b54:	2008      	movs	r0, #8
            }
        }
    }

    return VT100_KEY_INVALID;
}
 8003b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b5a:	bf00      	nop
 8003b5c:	200007a0 	.word	0x200007a0
 8003b60:	20000798 	.word	0x20000798
 8003b64:	08004bb4 	.word	0x08004bb4

08003b68 <vt100_get_keycode>:

vt100_keycode_t * vt100_get_keycode(vt100_key_t key)
{
    if (key >= VT100_KEY_MAX) return NULL;
 8003b68:	280e      	cmp	r0, #14
{
 8003b6a:	b530      	push	{r4, r5, lr}
    if (key >= VT100_KEY_MAX) return NULL;
 8003b6c:	d80c      	bhi.n	8003b88 <vt100_get_keycode+0x20>
 8003b6e:	2200      	movs	r2, #0
 8003b70:	240c      	movs	r4, #12
    
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
    {
        if (vt100_keycodes[ii].key == key)
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <vt100_get_keycode+0x24>)
 8003b74:	fb04 f102 	mul.w	r1, r4, r2
 8003b78:	5ccd      	ldrb	r5, [r1, r3]
 8003b7a:	4285      	cmp	r5, r0
 8003b7c:	d101      	bne.n	8003b82 <vt100_get_keycode+0x1a>
        {
            return (vt100_keycode_t*)&vt100_keycodes[ii];
 8003b7e:	1858      	adds	r0, r3, r1
 8003b80:	bd30      	pop	{r4, r5, pc}
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8003b82:	3201      	adds	r2, #1
 8003b84:	2a0f      	cmp	r2, #15
 8003b86:	d1f5      	bne.n	8003b74 <vt100_get_keycode+0xc>
    if (key >= VT100_KEY_MAX) return NULL;
 8003b88:	2000      	movs	r0, #0
        }
    }
    
    return NULL;
}
 8003b8a:	bd30      	pop	{r4, r5, pc}
 8003b8c:	08004bb4 	.word	0x08004bb4

08003b90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003b90:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003b92:	e003      	b.n	8003b9c <LoopCopyDataInit>

08003b94 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003b96:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003b98:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003b9a:	3104      	adds	r1, #4

08003b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003b9c:	480a      	ldr	r0, [pc, #40]	; (8003bc8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003ba0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003ba2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003ba4:	d3f6      	bcc.n	8003b94 <CopyDataInit>
  ldr r2, =_sbss
 8003ba6:	4a0a      	ldr	r2, [pc, #40]	; (8003bd0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003ba8:	e002      	b.n	8003bb0 <LoopFillZerobss>

08003baa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003baa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003bac:	f842 3b04 	str.w	r3, [r2], #4

08003bb0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003bb0:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003bb2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003bb4:	d3f9      	bcc.n	8003baa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003bb6:	f7ff fec3 	bl	8003940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bba:	f000 f819 	bl	8003bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bbe:	f7ff f949 	bl	8002e54 <main>
  bx lr
 8003bc2:	4770      	bx	lr
  ldr r3, =_sidata
 8003bc4:	08004db0 	.word	0x08004db0
  ldr r0, =_sdata
 8003bc8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003bcc:	20000248 	.word	0x20000248
  ldr r2, =_sbss
 8003bd0:	20000248 	.word	0x20000248
  ldr r3, = _ebss
 8003bd4:	20000bcc 	.word	0x20000bcc

08003bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bd8:	e7fe      	b.n	8003bd8 <ADC1_2_IRQHandler>

08003bda <atoi>:
 8003bda:	220a      	movs	r2, #10
 8003bdc:	2100      	movs	r1, #0
 8003bde:	f000 ba07 	b.w	8003ff0 <strtol>
	...

08003be4 <__errno>:
 8003be4:	4b01      	ldr	r3, [pc, #4]	; (8003bec <__errno+0x8>)
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000078 	.word	0x20000078

08003bf0 <__libc_init_array>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	2500      	movs	r5, #0
 8003bf4:	4e0c      	ldr	r6, [pc, #48]	; (8003c28 <__libc_init_array+0x38>)
 8003bf6:	4c0d      	ldr	r4, [pc, #52]	; (8003c2c <__libc_init_array+0x3c>)
 8003bf8:	1ba4      	subs	r4, r4, r6
 8003bfa:	10a4      	asrs	r4, r4, #2
 8003bfc:	42a5      	cmp	r5, r4
 8003bfe:	d109      	bne.n	8003c14 <__libc_init_array+0x24>
 8003c00:	f000 fdb4 	bl	800476c <_init>
 8003c04:	2500      	movs	r5, #0
 8003c06:	4e0a      	ldr	r6, [pc, #40]	; (8003c30 <__libc_init_array+0x40>)
 8003c08:	4c0a      	ldr	r4, [pc, #40]	; (8003c34 <__libc_init_array+0x44>)
 8003c0a:	1ba4      	subs	r4, r4, r6
 8003c0c:	10a4      	asrs	r4, r4, #2
 8003c0e:	42a5      	cmp	r5, r4
 8003c10:	d105      	bne.n	8003c1e <__libc_init_array+0x2e>
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c18:	4798      	blx	r3
 8003c1a:	3501      	adds	r5, #1
 8003c1c:	e7ee      	b.n	8003bfc <__libc_init_array+0xc>
 8003c1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c22:	4798      	blx	r3
 8003c24:	3501      	adds	r5, #1
 8003c26:	e7f2      	b.n	8003c0e <__libc_init_array+0x1e>
 8003c28:	08004da8 	.word	0x08004da8
 8003c2c:	08004da8 	.word	0x08004da8
 8003c30:	08004da8 	.word	0x08004da8
 8003c34:	08004dac 	.word	0x08004dac

08003c38 <malloc>:
 8003c38:	4b02      	ldr	r3, [pc, #8]	; (8003c44 <malloc+0xc>)
 8003c3a:	4601      	mov	r1, r0
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	f000 b85f 	b.w	8003d00 <_malloc_r>
 8003c42:	bf00      	nop
 8003c44:	20000078 	.word	0x20000078

08003c48 <free>:
 8003c48:	4b02      	ldr	r3, [pc, #8]	; (8003c54 <free+0xc>)
 8003c4a:	4601      	mov	r1, r0
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	f000 b80b 	b.w	8003c68 <_free_r>
 8003c52:	bf00      	nop
 8003c54:	20000078 	.word	0x20000078

08003c58 <memset>:
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4402      	add	r2, r0
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d100      	bne.n	8003c62 <memset+0xa>
 8003c60:	4770      	bx	lr
 8003c62:	f803 1b01 	strb.w	r1, [r3], #1
 8003c66:	e7f9      	b.n	8003c5c <memset+0x4>

08003c68 <_free_r>:
 8003c68:	b538      	push	{r3, r4, r5, lr}
 8003c6a:	4605      	mov	r5, r0
 8003c6c:	2900      	cmp	r1, #0
 8003c6e:	d043      	beq.n	8003cf8 <_free_r+0x90>
 8003c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c74:	1f0c      	subs	r4, r1, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	bfb8      	it	lt
 8003c7a:	18e4      	addlt	r4, r4, r3
 8003c7c:	f000 fa1d 	bl	80040ba <__malloc_lock>
 8003c80:	4a1e      	ldr	r2, [pc, #120]	; (8003cfc <_free_r+0x94>)
 8003c82:	6813      	ldr	r3, [r2, #0]
 8003c84:	4610      	mov	r0, r2
 8003c86:	b933      	cbnz	r3, 8003c96 <_free_r+0x2e>
 8003c88:	6063      	str	r3, [r4, #4]
 8003c8a:	6014      	str	r4, [r2, #0]
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c92:	f000 ba13 	b.w	80040bc <__malloc_unlock>
 8003c96:	42a3      	cmp	r3, r4
 8003c98:	d90b      	bls.n	8003cb2 <_free_r+0x4a>
 8003c9a:	6821      	ldr	r1, [r4, #0]
 8003c9c:	1862      	adds	r2, r4, r1
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	bf01      	itttt	eq
 8003ca2:	681a      	ldreq	r2, [r3, #0]
 8003ca4:	685b      	ldreq	r3, [r3, #4]
 8003ca6:	1852      	addeq	r2, r2, r1
 8003ca8:	6022      	streq	r2, [r4, #0]
 8003caa:	6063      	str	r3, [r4, #4]
 8003cac:	6004      	str	r4, [r0, #0]
 8003cae:	e7ed      	b.n	8003c8c <_free_r+0x24>
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	b10a      	cbz	r2, 8003cba <_free_r+0x52>
 8003cb6:	42a2      	cmp	r2, r4
 8003cb8:	d9fa      	bls.n	8003cb0 <_free_r+0x48>
 8003cba:	6819      	ldr	r1, [r3, #0]
 8003cbc:	1858      	adds	r0, r3, r1
 8003cbe:	42a0      	cmp	r0, r4
 8003cc0:	d10b      	bne.n	8003cda <_free_r+0x72>
 8003cc2:	6820      	ldr	r0, [r4, #0]
 8003cc4:	4401      	add	r1, r0
 8003cc6:	1858      	adds	r0, r3, r1
 8003cc8:	4282      	cmp	r2, r0
 8003cca:	6019      	str	r1, [r3, #0]
 8003ccc:	d1de      	bne.n	8003c8c <_free_r+0x24>
 8003cce:	6810      	ldr	r0, [r2, #0]
 8003cd0:	6852      	ldr	r2, [r2, #4]
 8003cd2:	4401      	add	r1, r0
 8003cd4:	6019      	str	r1, [r3, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	e7d8      	b.n	8003c8c <_free_r+0x24>
 8003cda:	d902      	bls.n	8003ce2 <_free_r+0x7a>
 8003cdc:	230c      	movs	r3, #12
 8003cde:	602b      	str	r3, [r5, #0]
 8003ce0:	e7d4      	b.n	8003c8c <_free_r+0x24>
 8003ce2:	6820      	ldr	r0, [r4, #0]
 8003ce4:	1821      	adds	r1, r4, r0
 8003ce6:	428a      	cmp	r2, r1
 8003ce8:	bf01      	itttt	eq
 8003cea:	6811      	ldreq	r1, [r2, #0]
 8003cec:	6852      	ldreq	r2, [r2, #4]
 8003cee:	1809      	addeq	r1, r1, r0
 8003cf0:	6021      	streq	r1, [r4, #0]
 8003cf2:	6062      	str	r2, [r4, #4]
 8003cf4:	605c      	str	r4, [r3, #4]
 8003cf6:	e7c9      	b.n	8003c8c <_free_r+0x24>
 8003cf8:	bd38      	pop	{r3, r4, r5, pc}
 8003cfa:	bf00      	nop
 8003cfc:	200007a4 	.word	0x200007a4

08003d00 <_malloc_r>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	1ccd      	adds	r5, r1, #3
 8003d04:	f025 0503 	bic.w	r5, r5, #3
 8003d08:	3508      	adds	r5, #8
 8003d0a:	2d0c      	cmp	r5, #12
 8003d0c:	bf38      	it	cc
 8003d0e:	250c      	movcc	r5, #12
 8003d10:	2d00      	cmp	r5, #0
 8003d12:	4606      	mov	r6, r0
 8003d14:	db01      	blt.n	8003d1a <_malloc_r+0x1a>
 8003d16:	42a9      	cmp	r1, r5
 8003d18:	d903      	bls.n	8003d22 <_malloc_r+0x22>
 8003d1a:	230c      	movs	r3, #12
 8003d1c:	6033      	str	r3, [r6, #0]
 8003d1e:	2000      	movs	r0, #0
 8003d20:	bd70      	pop	{r4, r5, r6, pc}
 8003d22:	f000 f9ca 	bl	80040ba <__malloc_lock>
 8003d26:	4a23      	ldr	r2, [pc, #140]	; (8003db4 <_malloc_r+0xb4>)
 8003d28:	6814      	ldr	r4, [r2, #0]
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	b991      	cbnz	r1, 8003d54 <_malloc_r+0x54>
 8003d2e:	4c22      	ldr	r4, [pc, #136]	; (8003db8 <_malloc_r+0xb8>)
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	b91b      	cbnz	r3, 8003d3c <_malloc_r+0x3c>
 8003d34:	4630      	mov	r0, r6
 8003d36:	f000 f841 	bl	8003dbc <_sbrk_r>
 8003d3a:	6020      	str	r0, [r4, #0]
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f000 f83c 	bl	8003dbc <_sbrk_r>
 8003d44:	1c43      	adds	r3, r0, #1
 8003d46:	d126      	bne.n	8003d96 <_malloc_r+0x96>
 8003d48:	230c      	movs	r3, #12
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	6033      	str	r3, [r6, #0]
 8003d4e:	f000 f9b5 	bl	80040bc <__malloc_unlock>
 8003d52:	e7e4      	b.n	8003d1e <_malloc_r+0x1e>
 8003d54:	680b      	ldr	r3, [r1, #0]
 8003d56:	1b5b      	subs	r3, r3, r5
 8003d58:	d41a      	bmi.n	8003d90 <_malloc_r+0x90>
 8003d5a:	2b0b      	cmp	r3, #11
 8003d5c:	d90f      	bls.n	8003d7e <_malloc_r+0x7e>
 8003d5e:	600b      	str	r3, [r1, #0]
 8003d60:	18cc      	adds	r4, r1, r3
 8003d62:	50cd      	str	r5, [r1, r3]
 8003d64:	4630      	mov	r0, r6
 8003d66:	f000 f9a9 	bl	80040bc <__malloc_unlock>
 8003d6a:	f104 000b 	add.w	r0, r4, #11
 8003d6e:	1d23      	adds	r3, r4, #4
 8003d70:	f020 0007 	bic.w	r0, r0, #7
 8003d74:	1ac3      	subs	r3, r0, r3
 8003d76:	d01b      	beq.n	8003db0 <_malloc_r+0xb0>
 8003d78:	425a      	negs	r2, r3
 8003d7a:	50e2      	str	r2, [r4, r3]
 8003d7c:	bd70      	pop	{r4, r5, r6, pc}
 8003d7e:	428c      	cmp	r4, r1
 8003d80:	bf0b      	itete	eq
 8003d82:	6863      	ldreq	r3, [r4, #4]
 8003d84:	684b      	ldrne	r3, [r1, #4]
 8003d86:	6013      	streq	r3, [r2, #0]
 8003d88:	6063      	strne	r3, [r4, #4]
 8003d8a:	bf18      	it	ne
 8003d8c:	460c      	movne	r4, r1
 8003d8e:	e7e9      	b.n	8003d64 <_malloc_r+0x64>
 8003d90:	460c      	mov	r4, r1
 8003d92:	6849      	ldr	r1, [r1, #4]
 8003d94:	e7ca      	b.n	8003d2c <_malloc_r+0x2c>
 8003d96:	1cc4      	adds	r4, r0, #3
 8003d98:	f024 0403 	bic.w	r4, r4, #3
 8003d9c:	42a0      	cmp	r0, r4
 8003d9e:	d005      	beq.n	8003dac <_malloc_r+0xac>
 8003da0:	1a21      	subs	r1, r4, r0
 8003da2:	4630      	mov	r0, r6
 8003da4:	f000 f80a 	bl	8003dbc <_sbrk_r>
 8003da8:	3001      	adds	r0, #1
 8003daa:	d0cd      	beq.n	8003d48 <_malloc_r+0x48>
 8003dac:	6025      	str	r5, [r4, #0]
 8003dae:	e7d9      	b.n	8003d64 <_malloc_r+0x64>
 8003db0:	bd70      	pop	{r4, r5, r6, pc}
 8003db2:	bf00      	nop
 8003db4:	200007a4 	.word	0x200007a4
 8003db8:	200007a8 	.word	0x200007a8

08003dbc <_sbrk_r>:
 8003dbc:	b538      	push	{r3, r4, r5, lr}
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	4c05      	ldr	r4, [pc, #20]	; (8003dd8 <_sbrk_r+0x1c>)
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	4608      	mov	r0, r1
 8003dc6:	6023      	str	r3, [r4, #0]
 8003dc8:	f7ff fda0 	bl	800390c <_sbrk>
 8003dcc:	1c43      	adds	r3, r0, #1
 8003dce:	d102      	bne.n	8003dd6 <_sbrk_r+0x1a>
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	b103      	cbz	r3, 8003dd6 <_sbrk_r+0x1a>
 8003dd4:	602b      	str	r3, [r5, #0]
 8003dd6:	bd38      	pop	{r3, r4, r5, pc}
 8003dd8:	20000bc8 	.word	0x20000bc8

08003ddc <strcat>:
 8003ddc:	4602      	mov	r2, r0
 8003dde:	b510      	push	{r4, lr}
 8003de0:	4613      	mov	r3, r2
 8003de2:	781c      	ldrb	r4, [r3, #0]
 8003de4:	3201      	adds	r2, #1
 8003de6:	2c00      	cmp	r4, #0
 8003de8:	d1fa      	bne.n	8003de0 <strcat+0x4>
 8003dea:	3b01      	subs	r3, #1
 8003dec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003df0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003df4:	2a00      	cmp	r2, #0
 8003df6:	d1f9      	bne.n	8003dec <strcat+0x10>
 8003df8:	bd10      	pop	{r4, pc}

08003dfa <strncmp>:
 8003dfa:	b510      	push	{r4, lr}
 8003dfc:	b16a      	cbz	r2, 8003e1a <strncmp+0x20>
 8003dfe:	3901      	subs	r1, #1
 8003e00:	1884      	adds	r4, r0, r2
 8003e02:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003e06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d103      	bne.n	8003e16 <strncmp+0x1c>
 8003e0e:	42a0      	cmp	r0, r4
 8003e10:	d001      	beq.n	8003e16 <strncmp+0x1c>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f5      	bne.n	8003e02 <strncmp+0x8>
 8003e16:	1a98      	subs	r0, r3, r2
 8003e18:	bd10      	pop	{r4, pc}
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	bd10      	pop	{r4, pc}

08003e1e <strncpy>:
 8003e1e:	b570      	push	{r4, r5, r6, lr}
 8003e20:	4604      	mov	r4, r0
 8003e22:	b902      	cbnz	r2, 8003e26 <strncpy+0x8>
 8003e24:	bd70      	pop	{r4, r5, r6, pc}
 8003e26:	4623      	mov	r3, r4
 8003e28:	f811 5b01 	ldrb.w	r5, [r1], #1
 8003e2c:	1e56      	subs	r6, r2, #1
 8003e2e:	f803 5b01 	strb.w	r5, [r3], #1
 8003e32:	b91d      	cbnz	r5, 8003e3c <strncpy+0x1e>
 8003e34:	4414      	add	r4, r2
 8003e36:	42a3      	cmp	r3, r4
 8003e38:	d103      	bne.n	8003e42 <strncpy+0x24>
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	461c      	mov	r4, r3
 8003e3e:	4632      	mov	r2, r6
 8003e40:	e7ef      	b.n	8003e22 <strncpy+0x4>
 8003e42:	f803 5b01 	strb.w	r5, [r3], #1
 8003e46:	e7f6      	b.n	8003e36 <strncpy+0x18>

08003e48 <strtok>:
 8003e48:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <strtok+0x50>)
 8003e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e4e:	681d      	ldr	r5, [r3, #0]
 8003e50:	4606      	mov	r6, r0
 8003e52:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003e54:	460f      	mov	r7, r1
 8003e56:	b9b4      	cbnz	r4, 8003e86 <strtok+0x3e>
 8003e58:	2050      	movs	r0, #80	; 0x50
 8003e5a:	f7ff feed 	bl	8003c38 <malloc>
 8003e5e:	65a8      	str	r0, [r5, #88]	; 0x58
 8003e60:	6004      	str	r4, [r0, #0]
 8003e62:	6044      	str	r4, [r0, #4]
 8003e64:	6084      	str	r4, [r0, #8]
 8003e66:	60c4      	str	r4, [r0, #12]
 8003e68:	6104      	str	r4, [r0, #16]
 8003e6a:	6144      	str	r4, [r0, #20]
 8003e6c:	6184      	str	r4, [r0, #24]
 8003e6e:	6284      	str	r4, [r0, #40]	; 0x28
 8003e70:	62c4      	str	r4, [r0, #44]	; 0x2c
 8003e72:	6304      	str	r4, [r0, #48]	; 0x30
 8003e74:	6344      	str	r4, [r0, #52]	; 0x34
 8003e76:	6384      	str	r4, [r0, #56]	; 0x38
 8003e78:	63c4      	str	r4, [r0, #60]	; 0x3c
 8003e7a:	6404      	str	r4, [r0, #64]	; 0x40
 8003e7c:	6444      	str	r4, [r0, #68]	; 0x44
 8003e7e:	6484      	str	r4, [r0, #72]	; 0x48
 8003e80:	64c4      	str	r4, [r0, #76]	; 0x4c
 8003e82:	7704      	strb	r4, [r0, #28]
 8003e84:	6244      	str	r4, [r0, #36]	; 0x24
 8003e86:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003e88:	4639      	mov	r1, r7
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e90:	2301      	movs	r3, #1
 8003e92:	f000 b803 	b.w	8003e9c <__strtok_r>
 8003e96:	bf00      	nop
 8003e98:	20000078 	.word	0x20000078

08003e9c <__strtok_r>:
 8003e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e9e:	b918      	cbnz	r0, 8003ea8 <__strtok_r+0xc>
 8003ea0:	6810      	ldr	r0, [r2, #0]
 8003ea2:	b908      	cbnz	r0, 8003ea8 <__strtok_r+0xc>
 8003ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	460f      	mov	r7, r1
 8003eac:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003eb0:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003eb4:	b91e      	cbnz	r6, 8003ebe <__strtok_r+0x22>
 8003eb6:	b965      	cbnz	r5, 8003ed2 <__strtok_r+0x36>
 8003eb8:	6015      	str	r5, [r2, #0]
 8003eba:	4628      	mov	r0, r5
 8003ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ebe:	42b5      	cmp	r5, r6
 8003ec0:	d1f6      	bne.n	8003eb0 <__strtok_r+0x14>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1ef      	bne.n	8003ea6 <__strtok_r+0xa>
 8003ec6:	6014      	str	r4, [r2, #0]
 8003ec8:	7003      	strb	r3, [r0, #0]
 8003eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ecc:	461c      	mov	r4, r3
 8003ece:	e00c      	b.n	8003eea <__strtok_r+0x4e>
 8003ed0:	b915      	cbnz	r5, 8003ed8 <__strtok_r+0x3c>
 8003ed2:	460e      	mov	r6, r1
 8003ed4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003ed8:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003edc:	42ab      	cmp	r3, r5
 8003ede:	d1f7      	bne.n	8003ed0 <__strtok_r+0x34>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0f3      	beq.n	8003ecc <__strtok_r+0x30>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003eea:	6014      	str	r4, [r2, #0]
 8003eec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003eee <_strtol_l.isra.0>:
 8003eee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef2:	4680      	mov	r8, r0
 8003ef4:	4689      	mov	r9, r1
 8003ef6:	4692      	mov	sl, r2
 8003ef8:	461f      	mov	r7, r3
 8003efa:	468b      	mov	fp, r1
 8003efc:	465d      	mov	r5, fp
 8003efe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003f00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f04:	f000 f8c4 	bl	8004090 <__locale_ctype_ptr_l>
 8003f08:	4420      	add	r0, r4
 8003f0a:	7846      	ldrb	r6, [r0, #1]
 8003f0c:	f016 0608 	ands.w	r6, r6, #8
 8003f10:	d10b      	bne.n	8003f2a <_strtol_l.isra.0+0x3c>
 8003f12:	2c2d      	cmp	r4, #45	; 0x2d
 8003f14:	d10b      	bne.n	8003f2e <_strtol_l.isra.0+0x40>
 8003f16:	2601      	movs	r6, #1
 8003f18:	782c      	ldrb	r4, [r5, #0]
 8003f1a:	f10b 0502 	add.w	r5, fp, #2
 8003f1e:	b167      	cbz	r7, 8003f3a <_strtol_l.isra.0+0x4c>
 8003f20:	2f10      	cmp	r7, #16
 8003f22:	d114      	bne.n	8003f4e <_strtol_l.isra.0+0x60>
 8003f24:	2c30      	cmp	r4, #48	; 0x30
 8003f26:	d00a      	beq.n	8003f3e <_strtol_l.isra.0+0x50>
 8003f28:	e011      	b.n	8003f4e <_strtol_l.isra.0+0x60>
 8003f2a:	46ab      	mov	fp, r5
 8003f2c:	e7e6      	b.n	8003efc <_strtol_l.isra.0+0xe>
 8003f2e:	2c2b      	cmp	r4, #43	; 0x2b
 8003f30:	bf04      	itt	eq
 8003f32:	782c      	ldrbeq	r4, [r5, #0]
 8003f34:	f10b 0502 	addeq.w	r5, fp, #2
 8003f38:	e7f1      	b.n	8003f1e <_strtol_l.isra.0+0x30>
 8003f3a:	2c30      	cmp	r4, #48	; 0x30
 8003f3c:	d127      	bne.n	8003f8e <_strtol_l.isra.0+0xa0>
 8003f3e:	782b      	ldrb	r3, [r5, #0]
 8003f40:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003f44:	2b58      	cmp	r3, #88	; 0x58
 8003f46:	d14b      	bne.n	8003fe0 <_strtol_l.isra.0+0xf2>
 8003f48:	2710      	movs	r7, #16
 8003f4a:	786c      	ldrb	r4, [r5, #1]
 8003f4c:	3502      	adds	r5, #2
 8003f4e:	2e00      	cmp	r6, #0
 8003f50:	bf0c      	ite	eq
 8003f52:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003f56:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	fbb1 fef7 	udiv	lr, r1, r7
 8003f60:	4610      	mov	r0, r2
 8003f62:	fb07 1c1e 	mls	ip, r7, lr, r1
 8003f66:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003f6a:	2b09      	cmp	r3, #9
 8003f6c:	d811      	bhi.n	8003f92 <_strtol_l.isra.0+0xa4>
 8003f6e:	461c      	mov	r4, r3
 8003f70:	42a7      	cmp	r7, r4
 8003f72:	dd1d      	ble.n	8003fb0 <_strtol_l.isra.0+0xc2>
 8003f74:	1c53      	adds	r3, r2, #1
 8003f76:	d007      	beq.n	8003f88 <_strtol_l.isra.0+0x9a>
 8003f78:	4586      	cmp	lr, r0
 8003f7a:	d316      	bcc.n	8003faa <_strtol_l.isra.0+0xbc>
 8003f7c:	d101      	bne.n	8003f82 <_strtol_l.isra.0+0x94>
 8003f7e:	45a4      	cmp	ip, r4
 8003f80:	db13      	blt.n	8003faa <_strtol_l.isra.0+0xbc>
 8003f82:	2201      	movs	r2, #1
 8003f84:	fb00 4007 	mla	r0, r0, r7, r4
 8003f88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f8c:	e7eb      	b.n	8003f66 <_strtol_l.isra.0+0x78>
 8003f8e:	270a      	movs	r7, #10
 8003f90:	e7dd      	b.n	8003f4e <_strtol_l.isra.0+0x60>
 8003f92:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003f96:	2b19      	cmp	r3, #25
 8003f98:	d801      	bhi.n	8003f9e <_strtol_l.isra.0+0xb0>
 8003f9a:	3c37      	subs	r4, #55	; 0x37
 8003f9c:	e7e8      	b.n	8003f70 <_strtol_l.isra.0+0x82>
 8003f9e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003fa2:	2b19      	cmp	r3, #25
 8003fa4:	d804      	bhi.n	8003fb0 <_strtol_l.isra.0+0xc2>
 8003fa6:	3c57      	subs	r4, #87	; 0x57
 8003fa8:	e7e2      	b.n	8003f70 <_strtol_l.isra.0+0x82>
 8003faa:	f04f 32ff 	mov.w	r2, #4294967295
 8003fae:	e7eb      	b.n	8003f88 <_strtol_l.isra.0+0x9a>
 8003fb0:	1c53      	adds	r3, r2, #1
 8003fb2:	d108      	bne.n	8003fc6 <_strtol_l.isra.0+0xd8>
 8003fb4:	2322      	movs	r3, #34	; 0x22
 8003fb6:	4608      	mov	r0, r1
 8003fb8:	f8c8 3000 	str.w	r3, [r8]
 8003fbc:	f1ba 0f00 	cmp.w	sl, #0
 8003fc0:	d107      	bne.n	8003fd2 <_strtol_l.isra.0+0xe4>
 8003fc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc6:	b106      	cbz	r6, 8003fca <_strtol_l.isra.0+0xdc>
 8003fc8:	4240      	negs	r0, r0
 8003fca:	f1ba 0f00 	cmp.w	sl, #0
 8003fce:	d00c      	beq.n	8003fea <_strtol_l.isra.0+0xfc>
 8003fd0:	b122      	cbz	r2, 8003fdc <_strtol_l.isra.0+0xee>
 8003fd2:	3d01      	subs	r5, #1
 8003fd4:	f8ca 5000 	str.w	r5, [sl]
 8003fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fdc:	464d      	mov	r5, r9
 8003fde:	e7f9      	b.n	8003fd4 <_strtol_l.isra.0+0xe6>
 8003fe0:	2430      	movs	r4, #48	; 0x30
 8003fe2:	2f00      	cmp	r7, #0
 8003fe4:	d1b3      	bne.n	8003f4e <_strtol_l.isra.0+0x60>
 8003fe6:	2708      	movs	r7, #8
 8003fe8:	e7b1      	b.n	8003f4e <_strtol_l.isra.0+0x60>
 8003fea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003ff0 <strtol>:
 8003ff0:	4b08      	ldr	r3, [pc, #32]	; (8004014 <strtol+0x24>)
 8003ff2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ff4:	681c      	ldr	r4, [r3, #0]
 8003ff6:	4d08      	ldr	r5, [pc, #32]	; (8004018 <strtol+0x28>)
 8003ff8:	6a23      	ldr	r3, [r4, #32]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bf08      	it	eq
 8003ffe:	462b      	moveq	r3, r5
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	4613      	mov	r3, r2
 8004004:	460a      	mov	r2, r1
 8004006:	4601      	mov	r1, r0
 8004008:	4620      	mov	r0, r4
 800400a:	f7ff ff70 	bl	8003eee <_strtol_l.isra.0>
 800400e:	b003      	add	sp, #12
 8004010:	bd30      	pop	{r4, r5, pc}
 8004012:	bf00      	nop
 8004014:	20000078 	.word	0x20000078
 8004018:	200000dc 	.word	0x200000dc

0800401c <_vsniprintf_r>:
 800401c:	b530      	push	{r4, r5, lr}
 800401e:	1e14      	subs	r4, r2, #0
 8004020:	4605      	mov	r5, r0
 8004022:	b09b      	sub	sp, #108	; 0x6c
 8004024:	4618      	mov	r0, r3
 8004026:	da05      	bge.n	8004034 <_vsniprintf_r+0x18>
 8004028:	238b      	movs	r3, #139	; 0x8b
 800402a:	f04f 30ff 	mov.w	r0, #4294967295
 800402e:	602b      	str	r3, [r5, #0]
 8004030:	b01b      	add	sp, #108	; 0x6c
 8004032:	bd30      	pop	{r4, r5, pc}
 8004034:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004038:	f8ad 300c 	strh.w	r3, [sp, #12]
 800403c:	bf0c      	ite	eq
 800403e:	4623      	moveq	r3, r4
 8004040:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004044:	9302      	str	r3, [sp, #8]
 8004046:	9305      	str	r3, [sp, #20]
 8004048:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800404c:	9100      	str	r1, [sp, #0]
 800404e:	9104      	str	r1, [sp, #16]
 8004050:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004054:	4602      	mov	r2, r0
 8004056:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004058:	4669      	mov	r1, sp
 800405a:	4628      	mov	r0, r5
 800405c:	f000 f88a 	bl	8004174 <_svfiprintf_r>
 8004060:	1c43      	adds	r3, r0, #1
 8004062:	bfbc      	itt	lt
 8004064:	238b      	movlt	r3, #139	; 0x8b
 8004066:	602b      	strlt	r3, [r5, #0]
 8004068:	2c00      	cmp	r4, #0
 800406a:	d0e1      	beq.n	8004030 <_vsniprintf_r+0x14>
 800406c:	2200      	movs	r2, #0
 800406e:	9b00      	ldr	r3, [sp, #0]
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e7dd      	b.n	8004030 <_vsniprintf_r+0x14>

08004074 <vsniprintf>:
 8004074:	b507      	push	{r0, r1, r2, lr}
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	460a      	mov	r2, r1
 800407c:	4601      	mov	r1, r0
 800407e:	4803      	ldr	r0, [pc, #12]	; (800408c <vsniprintf+0x18>)
 8004080:	6800      	ldr	r0, [r0, #0]
 8004082:	f7ff ffcb 	bl	800401c <_vsniprintf_r>
 8004086:	b003      	add	sp, #12
 8004088:	f85d fb04 	ldr.w	pc, [sp], #4
 800408c:	20000078 	.word	0x20000078

08004090 <__locale_ctype_ptr_l>:
 8004090:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004094:	4770      	bx	lr

08004096 <__ascii_mbtowc>:
 8004096:	b082      	sub	sp, #8
 8004098:	b901      	cbnz	r1, 800409c <__ascii_mbtowc+0x6>
 800409a:	a901      	add	r1, sp, #4
 800409c:	b142      	cbz	r2, 80040b0 <__ascii_mbtowc+0x1a>
 800409e:	b14b      	cbz	r3, 80040b4 <__ascii_mbtowc+0x1e>
 80040a0:	7813      	ldrb	r3, [r2, #0]
 80040a2:	600b      	str	r3, [r1, #0]
 80040a4:	7812      	ldrb	r2, [r2, #0]
 80040a6:	1c10      	adds	r0, r2, #0
 80040a8:	bf18      	it	ne
 80040aa:	2001      	movne	r0, #1
 80040ac:	b002      	add	sp, #8
 80040ae:	4770      	bx	lr
 80040b0:	4610      	mov	r0, r2
 80040b2:	e7fb      	b.n	80040ac <__ascii_mbtowc+0x16>
 80040b4:	f06f 0001 	mvn.w	r0, #1
 80040b8:	e7f8      	b.n	80040ac <__ascii_mbtowc+0x16>

080040ba <__malloc_lock>:
 80040ba:	4770      	bx	lr

080040bc <__malloc_unlock>:
 80040bc:	4770      	bx	lr

080040be <__ssputs_r>:
 80040be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c2:	688e      	ldr	r6, [r1, #8]
 80040c4:	4682      	mov	sl, r0
 80040c6:	429e      	cmp	r6, r3
 80040c8:	460c      	mov	r4, r1
 80040ca:	4691      	mov	r9, r2
 80040cc:	4698      	mov	r8, r3
 80040ce:	d835      	bhi.n	800413c <__ssputs_r+0x7e>
 80040d0:	898a      	ldrh	r2, [r1, #12]
 80040d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040d6:	d031      	beq.n	800413c <__ssputs_r+0x7e>
 80040d8:	2302      	movs	r3, #2
 80040da:	6825      	ldr	r5, [r4, #0]
 80040dc:	6909      	ldr	r1, [r1, #16]
 80040de:	1a6f      	subs	r7, r5, r1
 80040e0:	6965      	ldr	r5, [r4, #20]
 80040e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040e6:	fb95 f5f3 	sdiv	r5, r5, r3
 80040ea:	f108 0301 	add.w	r3, r8, #1
 80040ee:	443b      	add	r3, r7
 80040f0:	429d      	cmp	r5, r3
 80040f2:	bf38      	it	cc
 80040f4:	461d      	movcc	r5, r3
 80040f6:	0553      	lsls	r3, r2, #21
 80040f8:	d531      	bpl.n	800415e <__ssputs_r+0xa0>
 80040fa:	4629      	mov	r1, r5
 80040fc:	f7ff fe00 	bl	8003d00 <_malloc_r>
 8004100:	4606      	mov	r6, r0
 8004102:	b950      	cbnz	r0, 800411a <__ssputs_r+0x5c>
 8004104:	230c      	movs	r3, #12
 8004106:	f8ca 3000 	str.w	r3, [sl]
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004114:	81a3      	strh	r3, [r4, #12]
 8004116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411a:	463a      	mov	r2, r7
 800411c:	6921      	ldr	r1, [r4, #16]
 800411e:	f000 fad0 	bl	80046c2 <memcpy>
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412c:	81a3      	strh	r3, [r4, #12]
 800412e:	6126      	str	r6, [r4, #16]
 8004130:	443e      	add	r6, r7
 8004132:	6026      	str	r6, [r4, #0]
 8004134:	4646      	mov	r6, r8
 8004136:	6165      	str	r5, [r4, #20]
 8004138:	1bed      	subs	r5, r5, r7
 800413a:	60a5      	str	r5, [r4, #8]
 800413c:	4546      	cmp	r6, r8
 800413e:	bf28      	it	cs
 8004140:	4646      	movcs	r6, r8
 8004142:	4649      	mov	r1, r9
 8004144:	4632      	mov	r2, r6
 8004146:	6820      	ldr	r0, [r4, #0]
 8004148:	f000 fac6 	bl	80046d8 <memmove>
 800414c:	68a3      	ldr	r3, [r4, #8]
 800414e:	2000      	movs	r0, #0
 8004150:	1b9b      	subs	r3, r3, r6
 8004152:	60a3      	str	r3, [r4, #8]
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	441e      	add	r6, r3
 8004158:	6026      	str	r6, [r4, #0]
 800415a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800415e:	462a      	mov	r2, r5
 8004160:	f000 fad4 	bl	800470c <_realloc_r>
 8004164:	4606      	mov	r6, r0
 8004166:	2800      	cmp	r0, #0
 8004168:	d1e1      	bne.n	800412e <__ssputs_r+0x70>
 800416a:	6921      	ldr	r1, [r4, #16]
 800416c:	4650      	mov	r0, sl
 800416e:	f7ff fd7b 	bl	8003c68 <_free_r>
 8004172:	e7c7      	b.n	8004104 <__ssputs_r+0x46>

08004174 <_svfiprintf_r>:
 8004174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004178:	b09d      	sub	sp, #116	; 0x74
 800417a:	9303      	str	r3, [sp, #12]
 800417c:	898b      	ldrh	r3, [r1, #12]
 800417e:	4680      	mov	r8, r0
 8004180:	061c      	lsls	r4, r3, #24
 8004182:	460d      	mov	r5, r1
 8004184:	4616      	mov	r6, r2
 8004186:	d50f      	bpl.n	80041a8 <_svfiprintf_r+0x34>
 8004188:	690b      	ldr	r3, [r1, #16]
 800418a:	b96b      	cbnz	r3, 80041a8 <_svfiprintf_r+0x34>
 800418c:	2140      	movs	r1, #64	; 0x40
 800418e:	f7ff fdb7 	bl	8003d00 <_malloc_r>
 8004192:	6028      	str	r0, [r5, #0]
 8004194:	6128      	str	r0, [r5, #16]
 8004196:	b928      	cbnz	r0, 80041a4 <_svfiprintf_r+0x30>
 8004198:	230c      	movs	r3, #12
 800419a:	f8c8 3000 	str.w	r3, [r8]
 800419e:	f04f 30ff 	mov.w	r0, #4294967295
 80041a2:	e0c4      	b.n	800432e <_svfiprintf_r+0x1ba>
 80041a4:	2340      	movs	r3, #64	; 0x40
 80041a6:	616b      	str	r3, [r5, #20]
 80041a8:	2300      	movs	r3, #0
 80041aa:	9309      	str	r3, [sp, #36]	; 0x24
 80041ac:	2320      	movs	r3, #32
 80041ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041b2:	2330      	movs	r3, #48	; 0x30
 80041b4:	f04f 0b01 	mov.w	fp, #1
 80041b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041bc:	4637      	mov	r7, r6
 80041be:	463c      	mov	r4, r7
 80041c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d13c      	bne.n	8004242 <_svfiprintf_r+0xce>
 80041c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80041cc:	d00b      	beq.n	80041e6 <_svfiprintf_r+0x72>
 80041ce:	4653      	mov	r3, sl
 80041d0:	4632      	mov	r2, r6
 80041d2:	4629      	mov	r1, r5
 80041d4:	4640      	mov	r0, r8
 80041d6:	f7ff ff72 	bl	80040be <__ssputs_r>
 80041da:	3001      	adds	r0, #1
 80041dc:	f000 80a2 	beq.w	8004324 <_svfiprintf_r+0x1b0>
 80041e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e2:	4453      	add	r3, sl
 80041e4:	9309      	str	r3, [sp, #36]	; 0x24
 80041e6:	783b      	ldrb	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 809b 	beq.w	8004324 <_svfiprintf_r+0x1b0>
 80041ee:	2300      	movs	r3, #0
 80041f0:	f04f 32ff 	mov.w	r2, #4294967295
 80041f4:	9304      	str	r3, [sp, #16]
 80041f6:	9307      	str	r3, [sp, #28]
 80041f8:	9205      	str	r2, [sp, #20]
 80041fa:	9306      	str	r3, [sp, #24]
 80041fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004200:	931a      	str	r3, [sp, #104]	; 0x68
 8004202:	2205      	movs	r2, #5
 8004204:	7821      	ldrb	r1, [r4, #0]
 8004206:	4850      	ldr	r0, [pc, #320]	; (8004348 <_svfiprintf_r+0x1d4>)
 8004208:	f000 fa4d 	bl	80046a6 <memchr>
 800420c:	1c67      	adds	r7, r4, #1
 800420e:	9b04      	ldr	r3, [sp, #16]
 8004210:	b9d8      	cbnz	r0, 800424a <_svfiprintf_r+0xd6>
 8004212:	06d9      	lsls	r1, r3, #27
 8004214:	bf44      	itt	mi
 8004216:	2220      	movmi	r2, #32
 8004218:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800421c:	071a      	lsls	r2, r3, #28
 800421e:	bf44      	itt	mi
 8004220:	222b      	movmi	r2, #43	; 0x2b
 8004222:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004226:	7822      	ldrb	r2, [r4, #0]
 8004228:	2a2a      	cmp	r2, #42	; 0x2a
 800422a:	d016      	beq.n	800425a <_svfiprintf_r+0xe6>
 800422c:	2100      	movs	r1, #0
 800422e:	200a      	movs	r0, #10
 8004230:	9a07      	ldr	r2, [sp, #28]
 8004232:	4627      	mov	r7, r4
 8004234:	783b      	ldrb	r3, [r7, #0]
 8004236:	3401      	adds	r4, #1
 8004238:	3b30      	subs	r3, #48	; 0x30
 800423a:	2b09      	cmp	r3, #9
 800423c:	d950      	bls.n	80042e0 <_svfiprintf_r+0x16c>
 800423e:	b1c9      	cbz	r1, 8004274 <_svfiprintf_r+0x100>
 8004240:	e011      	b.n	8004266 <_svfiprintf_r+0xf2>
 8004242:	2b25      	cmp	r3, #37	; 0x25
 8004244:	d0c0      	beq.n	80041c8 <_svfiprintf_r+0x54>
 8004246:	4627      	mov	r7, r4
 8004248:	e7b9      	b.n	80041be <_svfiprintf_r+0x4a>
 800424a:	4a3f      	ldr	r2, [pc, #252]	; (8004348 <_svfiprintf_r+0x1d4>)
 800424c:	463c      	mov	r4, r7
 800424e:	1a80      	subs	r0, r0, r2
 8004250:	fa0b f000 	lsl.w	r0, fp, r0
 8004254:	4318      	orrs	r0, r3
 8004256:	9004      	str	r0, [sp, #16]
 8004258:	e7d3      	b.n	8004202 <_svfiprintf_r+0x8e>
 800425a:	9a03      	ldr	r2, [sp, #12]
 800425c:	1d11      	adds	r1, r2, #4
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	9103      	str	r1, [sp, #12]
 8004262:	2a00      	cmp	r2, #0
 8004264:	db01      	blt.n	800426a <_svfiprintf_r+0xf6>
 8004266:	9207      	str	r2, [sp, #28]
 8004268:	e004      	b.n	8004274 <_svfiprintf_r+0x100>
 800426a:	4252      	negs	r2, r2
 800426c:	f043 0302 	orr.w	r3, r3, #2
 8004270:	9207      	str	r2, [sp, #28]
 8004272:	9304      	str	r3, [sp, #16]
 8004274:	783b      	ldrb	r3, [r7, #0]
 8004276:	2b2e      	cmp	r3, #46	; 0x2e
 8004278:	d10d      	bne.n	8004296 <_svfiprintf_r+0x122>
 800427a:	787b      	ldrb	r3, [r7, #1]
 800427c:	1c79      	adds	r1, r7, #1
 800427e:	2b2a      	cmp	r3, #42	; 0x2a
 8004280:	d132      	bne.n	80042e8 <_svfiprintf_r+0x174>
 8004282:	9b03      	ldr	r3, [sp, #12]
 8004284:	3702      	adds	r7, #2
 8004286:	1d1a      	adds	r2, r3, #4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	9203      	str	r2, [sp, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	bfb8      	it	lt
 8004290:	f04f 33ff 	movlt.w	r3, #4294967295
 8004294:	9305      	str	r3, [sp, #20]
 8004296:	4c2d      	ldr	r4, [pc, #180]	; (800434c <_svfiprintf_r+0x1d8>)
 8004298:	2203      	movs	r2, #3
 800429a:	7839      	ldrb	r1, [r7, #0]
 800429c:	4620      	mov	r0, r4
 800429e:	f000 fa02 	bl	80046a6 <memchr>
 80042a2:	b138      	cbz	r0, 80042b4 <_svfiprintf_r+0x140>
 80042a4:	2340      	movs	r3, #64	; 0x40
 80042a6:	1b00      	subs	r0, r0, r4
 80042a8:	fa03 f000 	lsl.w	r0, r3, r0
 80042ac:	9b04      	ldr	r3, [sp, #16]
 80042ae:	3701      	adds	r7, #1
 80042b0:	4303      	orrs	r3, r0
 80042b2:	9304      	str	r3, [sp, #16]
 80042b4:	7839      	ldrb	r1, [r7, #0]
 80042b6:	2206      	movs	r2, #6
 80042b8:	4825      	ldr	r0, [pc, #148]	; (8004350 <_svfiprintf_r+0x1dc>)
 80042ba:	1c7e      	adds	r6, r7, #1
 80042bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042c0:	f000 f9f1 	bl	80046a6 <memchr>
 80042c4:	2800      	cmp	r0, #0
 80042c6:	d035      	beq.n	8004334 <_svfiprintf_r+0x1c0>
 80042c8:	4b22      	ldr	r3, [pc, #136]	; (8004354 <_svfiprintf_r+0x1e0>)
 80042ca:	b9fb      	cbnz	r3, 800430c <_svfiprintf_r+0x198>
 80042cc:	9b03      	ldr	r3, [sp, #12]
 80042ce:	3307      	adds	r3, #7
 80042d0:	f023 0307 	bic.w	r3, r3, #7
 80042d4:	3308      	adds	r3, #8
 80042d6:	9303      	str	r3, [sp, #12]
 80042d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042da:	444b      	add	r3, r9
 80042dc:	9309      	str	r3, [sp, #36]	; 0x24
 80042de:	e76d      	b.n	80041bc <_svfiprintf_r+0x48>
 80042e0:	fb00 3202 	mla	r2, r0, r2, r3
 80042e4:	2101      	movs	r1, #1
 80042e6:	e7a4      	b.n	8004232 <_svfiprintf_r+0xbe>
 80042e8:	2300      	movs	r3, #0
 80042ea:	240a      	movs	r4, #10
 80042ec:	4618      	mov	r0, r3
 80042ee:	9305      	str	r3, [sp, #20]
 80042f0:	460f      	mov	r7, r1
 80042f2:	783a      	ldrb	r2, [r7, #0]
 80042f4:	3101      	adds	r1, #1
 80042f6:	3a30      	subs	r2, #48	; 0x30
 80042f8:	2a09      	cmp	r2, #9
 80042fa:	d903      	bls.n	8004304 <_svfiprintf_r+0x190>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0ca      	beq.n	8004296 <_svfiprintf_r+0x122>
 8004300:	9005      	str	r0, [sp, #20]
 8004302:	e7c8      	b.n	8004296 <_svfiprintf_r+0x122>
 8004304:	fb04 2000 	mla	r0, r4, r0, r2
 8004308:	2301      	movs	r3, #1
 800430a:	e7f1      	b.n	80042f0 <_svfiprintf_r+0x17c>
 800430c:	ab03      	add	r3, sp, #12
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	462a      	mov	r2, r5
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <_svfiprintf_r+0x1e4>)
 8004314:	a904      	add	r1, sp, #16
 8004316:	4640      	mov	r0, r8
 8004318:	f3af 8000 	nop.w
 800431c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004320:	4681      	mov	r9, r0
 8004322:	d1d9      	bne.n	80042d8 <_svfiprintf_r+0x164>
 8004324:	89ab      	ldrh	r3, [r5, #12]
 8004326:	065b      	lsls	r3, r3, #25
 8004328:	f53f af39 	bmi.w	800419e <_svfiprintf_r+0x2a>
 800432c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800432e:	b01d      	add	sp, #116	; 0x74
 8004330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004334:	ab03      	add	r3, sp, #12
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	462a      	mov	r2, r5
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <_svfiprintf_r+0x1e4>)
 800433c:	a904      	add	r1, sp, #16
 800433e:	4640      	mov	r0, r8
 8004340:	f000 f884 	bl	800444c <_printf_i>
 8004344:	e7ea      	b.n	800431c <_svfiprintf_r+0x1a8>
 8004346:	bf00      	nop
 8004348:	08004c72 	.word	0x08004c72
 800434c:	08004c78 	.word	0x08004c78
 8004350:	08004c7c 	.word	0x08004c7c
 8004354:	00000000 	.word	0x00000000
 8004358:	080040bf 	.word	0x080040bf

0800435c <_printf_common>:
 800435c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004360:	4691      	mov	r9, r2
 8004362:	461f      	mov	r7, r3
 8004364:	688a      	ldr	r2, [r1, #8]
 8004366:	690b      	ldr	r3, [r1, #16]
 8004368:	4606      	mov	r6, r0
 800436a:	4293      	cmp	r3, r2
 800436c:	bfb8      	it	lt
 800436e:	4613      	movlt	r3, r2
 8004370:	f8c9 3000 	str.w	r3, [r9]
 8004374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004378:	460c      	mov	r4, r1
 800437a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800437e:	b112      	cbz	r2, 8004386 <_printf_common+0x2a>
 8004380:	3301      	adds	r3, #1
 8004382:	f8c9 3000 	str.w	r3, [r9]
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	0699      	lsls	r1, r3, #26
 800438a:	bf42      	ittt	mi
 800438c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004390:	3302      	addmi	r3, #2
 8004392:	f8c9 3000 	strmi.w	r3, [r9]
 8004396:	6825      	ldr	r5, [r4, #0]
 8004398:	f015 0506 	ands.w	r5, r5, #6
 800439c:	d107      	bne.n	80043ae <_printf_common+0x52>
 800439e:	f104 0a19 	add.w	sl, r4, #25
 80043a2:	68e3      	ldr	r3, [r4, #12]
 80043a4:	f8d9 2000 	ldr.w	r2, [r9]
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	429d      	cmp	r5, r3
 80043ac:	db2a      	blt.n	8004404 <_printf_common+0xa8>
 80043ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80043b2:	6822      	ldr	r2, [r4, #0]
 80043b4:	3300      	adds	r3, #0
 80043b6:	bf18      	it	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	0692      	lsls	r2, r2, #26
 80043bc:	d42f      	bmi.n	800441e <_printf_common+0xc2>
 80043be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043c2:	4639      	mov	r1, r7
 80043c4:	4630      	mov	r0, r6
 80043c6:	47c0      	blx	r8
 80043c8:	3001      	adds	r0, #1
 80043ca:	d022      	beq.n	8004412 <_printf_common+0xb6>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	68e5      	ldr	r5, [r4, #12]
 80043d0:	f003 0306 	and.w	r3, r3, #6
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	bf18      	it	ne
 80043d8:	2500      	movne	r5, #0
 80043da:	f8d9 2000 	ldr.w	r2, [r9]
 80043de:	f04f 0900 	mov.w	r9, #0
 80043e2:	bf08      	it	eq
 80043e4:	1aad      	subeq	r5, r5, r2
 80043e6:	68a3      	ldr	r3, [r4, #8]
 80043e8:	6922      	ldr	r2, [r4, #16]
 80043ea:	bf08      	it	eq
 80043ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043f0:	4293      	cmp	r3, r2
 80043f2:	bfc4      	itt	gt
 80043f4:	1a9b      	subgt	r3, r3, r2
 80043f6:	18ed      	addgt	r5, r5, r3
 80043f8:	341a      	adds	r4, #26
 80043fa:	454d      	cmp	r5, r9
 80043fc:	d11b      	bne.n	8004436 <_printf_common+0xda>
 80043fe:	2000      	movs	r0, #0
 8004400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004404:	2301      	movs	r3, #1
 8004406:	4652      	mov	r2, sl
 8004408:	4639      	mov	r1, r7
 800440a:	4630      	mov	r0, r6
 800440c:	47c0      	blx	r8
 800440e:	3001      	adds	r0, #1
 8004410:	d103      	bne.n	800441a <_printf_common+0xbe>
 8004412:	f04f 30ff 	mov.w	r0, #4294967295
 8004416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800441a:	3501      	adds	r5, #1
 800441c:	e7c1      	b.n	80043a2 <_printf_common+0x46>
 800441e:	2030      	movs	r0, #48	; 0x30
 8004420:	18e1      	adds	r1, r4, r3
 8004422:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800442c:	4422      	add	r2, r4
 800442e:	3302      	adds	r3, #2
 8004430:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004434:	e7c3      	b.n	80043be <_printf_common+0x62>
 8004436:	2301      	movs	r3, #1
 8004438:	4622      	mov	r2, r4
 800443a:	4639      	mov	r1, r7
 800443c:	4630      	mov	r0, r6
 800443e:	47c0      	blx	r8
 8004440:	3001      	adds	r0, #1
 8004442:	d0e6      	beq.n	8004412 <_printf_common+0xb6>
 8004444:	f109 0901 	add.w	r9, r9, #1
 8004448:	e7d7      	b.n	80043fa <_printf_common+0x9e>
	...

0800444c <_printf_i>:
 800444c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004450:	4617      	mov	r7, r2
 8004452:	7e0a      	ldrb	r2, [r1, #24]
 8004454:	b085      	sub	sp, #20
 8004456:	2a6e      	cmp	r2, #110	; 0x6e
 8004458:	4698      	mov	r8, r3
 800445a:	4606      	mov	r6, r0
 800445c:	460c      	mov	r4, r1
 800445e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004460:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004464:	f000 80bc 	beq.w	80045e0 <_printf_i+0x194>
 8004468:	d81a      	bhi.n	80044a0 <_printf_i+0x54>
 800446a:	2a63      	cmp	r2, #99	; 0x63
 800446c:	d02e      	beq.n	80044cc <_printf_i+0x80>
 800446e:	d80a      	bhi.n	8004486 <_printf_i+0x3a>
 8004470:	2a00      	cmp	r2, #0
 8004472:	f000 80c8 	beq.w	8004606 <_printf_i+0x1ba>
 8004476:	2a58      	cmp	r2, #88	; 0x58
 8004478:	f000 808a 	beq.w	8004590 <_printf_i+0x144>
 800447c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004480:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004484:	e02a      	b.n	80044dc <_printf_i+0x90>
 8004486:	2a64      	cmp	r2, #100	; 0x64
 8004488:	d001      	beq.n	800448e <_printf_i+0x42>
 800448a:	2a69      	cmp	r2, #105	; 0x69
 800448c:	d1f6      	bne.n	800447c <_printf_i+0x30>
 800448e:	6821      	ldr	r1, [r4, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004496:	d023      	beq.n	80044e0 <_printf_i+0x94>
 8004498:	1d11      	adds	r1, r2, #4
 800449a:	6019      	str	r1, [r3, #0]
 800449c:	6813      	ldr	r3, [r2, #0]
 800449e:	e027      	b.n	80044f0 <_printf_i+0xa4>
 80044a0:	2a73      	cmp	r2, #115	; 0x73
 80044a2:	f000 80b4 	beq.w	800460e <_printf_i+0x1c2>
 80044a6:	d808      	bhi.n	80044ba <_printf_i+0x6e>
 80044a8:	2a6f      	cmp	r2, #111	; 0x6f
 80044aa:	d02a      	beq.n	8004502 <_printf_i+0xb6>
 80044ac:	2a70      	cmp	r2, #112	; 0x70
 80044ae:	d1e5      	bne.n	800447c <_printf_i+0x30>
 80044b0:	680a      	ldr	r2, [r1, #0]
 80044b2:	f042 0220 	orr.w	r2, r2, #32
 80044b6:	600a      	str	r2, [r1, #0]
 80044b8:	e003      	b.n	80044c2 <_printf_i+0x76>
 80044ba:	2a75      	cmp	r2, #117	; 0x75
 80044bc:	d021      	beq.n	8004502 <_printf_i+0xb6>
 80044be:	2a78      	cmp	r2, #120	; 0x78
 80044c0:	d1dc      	bne.n	800447c <_printf_i+0x30>
 80044c2:	2278      	movs	r2, #120	; 0x78
 80044c4:	496f      	ldr	r1, [pc, #444]	; (8004684 <_printf_i+0x238>)
 80044c6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80044ca:	e064      	b.n	8004596 <_printf_i+0x14a>
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80044d2:	1d11      	adds	r1, r2, #4
 80044d4:	6019      	str	r1, [r3, #0]
 80044d6:	6813      	ldr	r3, [r2, #0]
 80044d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044dc:	2301      	movs	r3, #1
 80044de:	e0a3      	b.n	8004628 <_printf_i+0x1dc>
 80044e0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80044e4:	f102 0104 	add.w	r1, r2, #4
 80044e8:	6019      	str	r1, [r3, #0]
 80044ea:	d0d7      	beq.n	800449c <_printf_i+0x50>
 80044ec:	f9b2 3000 	ldrsh.w	r3, [r2]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	da03      	bge.n	80044fc <_printf_i+0xb0>
 80044f4:	222d      	movs	r2, #45	; 0x2d
 80044f6:	425b      	negs	r3, r3
 80044f8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80044fc:	4962      	ldr	r1, [pc, #392]	; (8004688 <_printf_i+0x23c>)
 80044fe:	220a      	movs	r2, #10
 8004500:	e017      	b.n	8004532 <_printf_i+0xe6>
 8004502:	6820      	ldr	r0, [r4, #0]
 8004504:	6819      	ldr	r1, [r3, #0]
 8004506:	f010 0f80 	tst.w	r0, #128	; 0x80
 800450a:	d003      	beq.n	8004514 <_printf_i+0xc8>
 800450c:	1d08      	adds	r0, r1, #4
 800450e:	6018      	str	r0, [r3, #0]
 8004510:	680b      	ldr	r3, [r1, #0]
 8004512:	e006      	b.n	8004522 <_printf_i+0xd6>
 8004514:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004518:	f101 0004 	add.w	r0, r1, #4
 800451c:	6018      	str	r0, [r3, #0]
 800451e:	d0f7      	beq.n	8004510 <_printf_i+0xc4>
 8004520:	880b      	ldrh	r3, [r1, #0]
 8004522:	2a6f      	cmp	r2, #111	; 0x6f
 8004524:	bf14      	ite	ne
 8004526:	220a      	movne	r2, #10
 8004528:	2208      	moveq	r2, #8
 800452a:	4957      	ldr	r1, [pc, #348]	; (8004688 <_printf_i+0x23c>)
 800452c:	2000      	movs	r0, #0
 800452e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004532:	6865      	ldr	r5, [r4, #4]
 8004534:	2d00      	cmp	r5, #0
 8004536:	60a5      	str	r5, [r4, #8]
 8004538:	f2c0 809c 	blt.w	8004674 <_printf_i+0x228>
 800453c:	6820      	ldr	r0, [r4, #0]
 800453e:	f020 0004 	bic.w	r0, r0, #4
 8004542:	6020      	str	r0, [r4, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d13f      	bne.n	80045c8 <_printf_i+0x17c>
 8004548:	2d00      	cmp	r5, #0
 800454a:	f040 8095 	bne.w	8004678 <_printf_i+0x22c>
 800454e:	4675      	mov	r5, lr
 8004550:	2a08      	cmp	r2, #8
 8004552:	d10b      	bne.n	800456c <_printf_i+0x120>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	07da      	lsls	r2, r3, #31
 8004558:	d508      	bpl.n	800456c <_printf_i+0x120>
 800455a:	6923      	ldr	r3, [r4, #16]
 800455c:	6862      	ldr	r2, [r4, #4]
 800455e:	429a      	cmp	r2, r3
 8004560:	bfde      	ittt	le
 8004562:	2330      	movle	r3, #48	; 0x30
 8004564:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004568:	f105 35ff 	addle.w	r5, r5, #4294967295
 800456c:	ebae 0305 	sub.w	r3, lr, r5
 8004570:	6123      	str	r3, [r4, #16]
 8004572:	f8cd 8000 	str.w	r8, [sp]
 8004576:	463b      	mov	r3, r7
 8004578:	aa03      	add	r2, sp, #12
 800457a:	4621      	mov	r1, r4
 800457c:	4630      	mov	r0, r6
 800457e:	f7ff feed 	bl	800435c <_printf_common>
 8004582:	3001      	adds	r0, #1
 8004584:	d155      	bne.n	8004632 <_printf_i+0x1e6>
 8004586:	f04f 30ff 	mov.w	r0, #4294967295
 800458a:	b005      	add	sp, #20
 800458c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004590:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004594:	493c      	ldr	r1, [pc, #240]	; (8004688 <_printf_i+0x23c>)
 8004596:	6822      	ldr	r2, [r4, #0]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800459e:	f100 0504 	add.w	r5, r0, #4
 80045a2:	601d      	str	r5, [r3, #0]
 80045a4:	d001      	beq.n	80045aa <_printf_i+0x15e>
 80045a6:	6803      	ldr	r3, [r0, #0]
 80045a8:	e002      	b.n	80045b0 <_printf_i+0x164>
 80045aa:	0655      	lsls	r5, r2, #25
 80045ac:	d5fb      	bpl.n	80045a6 <_printf_i+0x15a>
 80045ae:	8803      	ldrh	r3, [r0, #0]
 80045b0:	07d0      	lsls	r0, r2, #31
 80045b2:	bf44      	itt	mi
 80045b4:	f042 0220 	orrmi.w	r2, r2, #32
 80045b8:	6022      	strmi	r2, [r4, #0]
 80045ba:	b91b      	cbnz	r3, 80045c4 <_printf_i+0x178>
 80045bc:	6822      	ldr	r2, [r4, #0]
 80045be:	f022 0220 	bic.w	r2, r2, #32
 80045c2:	6022      	str	r2, [r4, #0]
 80045c4:	2210      	movs	r2, #16
 80045c6:	e7b1      	b.n	800452c <_printf_i+0xe0>
 80045c8:	4675      	mov	r5, lr
 80045ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80045ce:	fb02 3310 	mls	r3, r2, r0, r3
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80045d8:	4603      	mov	r3, r0
 80045da:	2800      	cmp	r0, #0
 80045dc:	d1f5      	bne.n	80045ca <_printf_i+0x17e>
 80045de:	e7b7      	b.n	8004550 <_printf_i+0x104>
 80045e0:	6808      	ldr	r0, [r1, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80045e8:	6949      	ldr	r1, [r1, #20]
 80045ea:	d004      	beq.n	80045f6 <_printf_i+0x1aa>
 80045ec:	1d10      	adds	r0, r2, #4
 80045ee:	6018      	str	r0, [r3, #0]
 80045f0:	6813      	ldr	r3, [r2, #0]
 80045f2:	6019      	str	r1, [r3, #0]
 80045f4:	e007      	b.n	8004606 <_printf_i+0x1ba>
 80045f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045fa:	f102 0004 	add.w	r0, r2, #4
 80045fe:	6018      	str	r0, [r3, #0]
 8004600:	6813      	ldr	r3, [r2, #0]
 8004602:	d0f6      	beq.n	80045f2 <_printf_i+0x1a6>
 8004604:	8019      	strh	r1, [r3, #0]
 8004606:	2300      	movs	r3, #0
 8004608:	4675      	mov	r5, lr
 800460a:	6123      	str	r3, [r4, #16]
 800460c:	e7b1      	b.n	8004572 <_printf_i+0x126>
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	1d11      	adds	r1, r2, #4
 8004612:	6019      	str	r1, [r3, #0]
 8004614:	6815      	ldr	r5, [r2, #0]
 8004616:	2100      	movs	r1, #0
 8004618:	6862      	ldr	r2, [r4, #4]
 800461a:	4628      	mov	r0, r5
 800461c:	f000 f843 	bl	80046a6 <memchr>
 8004620:	b108      	cbz	r0, 8004626 <_printf_i+0x1da>
 8004622:	1b40      	subs	r0, r0, r5
 8004624:	6060      	str	r0, [r4, #4]
 8004626:	6863      	ldr	r3, [r4, #4]
 8004628:	6123      	str	r3, [r4, #16]
 800462a:	2300      	movs	r3, #0
 800462c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004630:	e79f      	b.n	8004572 <_printf_i+0x126>
 8004632:	6923      	ldr	r3, [r4, #16]
 8004634:	462a      	mov	r2, r5
 8004636:	4639      	mov	r1, r7
 8004638:	4630      	mov	r0, r6
 800463a:	47c0      	blx	r8
 800463c:	3001      	adds	r0, #1
 800463e:	d0a2      	beq.n	8004586 <_printf_i+0x13a>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	079b      	lsls	r3, r3, #30
 8004644:	d507      	bpl.n	8004656 <_printf_i+0x20a>
 8004646:	2500      	movs	r5, #0
 8004648:	f104 0919 	add.w	r9, r4, #25
 800464c:	68e3      	ldr	r3, [r4, #12]
 800464e:	9a03      	ldr	r2, [sp, #12]
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	429d      	cmp	r5, r3
 8004654:	db05      	blt.n	8004662 <_printf_i+0x216>
 8004656:	68e0      	ldr	r0, [r4, #12]
 8004658:	9b03      	ldr	r3, [sp, #12]
 800465a:	4298      	cmp	r0, r3
 800465c:	bfb8      	it	lt
 800465e:	4618      	movlt	r0, r3
 8004660:	e793      	b.n	800458a <_printf_i+0x13e>
 8004662:	2301      	movs	r3, #1
 8004664:	464a      	mov	r2, r9
 8004666:	4639      	mov	r1, r7
 8004668:	4630      	mov	r0, r6
 800466a:	47c0      	blx	r8
 800466c:	3001      	adds	r0, #1
 800466e:	d08a      	beq.n	8004586 <_printf_i+0x13a>
 8004670:	3501      	adds	r5, #1
 8004672:	e7eb      	b.n	800464c <_printf_i+0x200>
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1a7      	bne.n	80045c8 <_printf_i+0x17c>
 8004678:	780b      	ldrb	r3, [r1, #0]
 800467a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800467e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004682:	e765      	b.n	8004550 <_printf_i+0x104>
 8004684:	08004c94 	.word	0x08004c94
 8004688:	08004c83 	.word	0x08004c83

0800468c <__ascii_wctomb>:
 800468c:	b149      	cbz	r1, 80046a2 <__ascii_wctomb+0x16>
 800468e:	2aff      	cmp	r2, #255	; 0xff
 8004690:	bf8b      	itete	hi
 8004692:	238a      	movhi	r3, #138	; 0x8a
 8004694:	700a      	strbls	r2, [r1, #0]
 8004696:	6003      	strhi	r3, [r0, #0]
 8004698:	2001      	movls	r0, #1
 800469a:	bf88      	it	hi
 800469c:	f04f 30ff 	movhi.w	r0, #4294967295
 80046a0:	4770      	bx	lr
 80046a2:	4608      	mov	r0, r1
 80046a4:	4770      	bx	lr

080046a6 <memchr>:
 80046a6:	b510      	push	{r4, lr}
 80046a8:	b2c9      	uxtb	r1, r1
 80046aa:	4402      	add	r2, r0
 80046ac:	4290      	cmp	r0, r2
 80046ae:	4603      	mov	r3, r0
 80046b0:	d101      	bne.n	80046b6 <memchr+0x10>
 80046b2:	2000      	movs	r0, #0
 80046b4:	bd10      	pop	{r4, pc}
 80046b6:	781c      	ldrb	r4, [r3, #0]
 80046b8:	3001      	adds	r0, #1
 80046ba:	428c      	cmp	r4, r1
 80046bc:	d1f6      	bne.n	80046ac <memchr+0x6>
 80046be:	4618      	mov	r0, r3
 80046c0:	bd10      	pop	{r4, pc}

080046c2 <memcpy>:
 80046c2:	b510      	push	{r4, lr}
 80046c4:	1e43      	subs	r3, r0, #1
 80046c6:	440a      	add	r2, r1
 80046c8:	4291      	cmp	r1, r2
 80046ca:	d100      	bne.n	80046ce <memcpy+0xc>
 80046cc:	bd10      	pop	{r4, pc}
 80046ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046d6:	e7f7      	b.n	80046c8 <memcpy+0x6>

080046d8 <memmove>:
 80046d8:	4288      	cmp	r0, r1
 80046da:	b510      	push	{r4, lr}
 80046dc:	eb01 0302 	add.w	r3, r1, r2
 80046e0:	d803      	bhi.n	80046ea <memmove+0x12>
 80046e2:	1e42      	subs	r2, r0, #1
 80046e4:	4299      	cmp	r1, r3
 80046e6:	d10c      	bne.n	8004702 <memmove+0x2a>
 80046e8:	bd10      	pop	{r4, pc}
 80046ea:	4298      	cmp	r0, r3
 80046ec:	d2f9      	bcs.n	80046e2 <memmove+0xa>
 80046ee:	1881      	adds	r1, r0, r2
 80046f0:	1ad2      	subs	r2, r2, r3
 80046f2:	42d3      	cmn	r3, r2
 80046f4:	d100      	bne.n	80046f8 <memmove+0x20>
 80046f6:	bd10      	pop	{r4, pc}
 80046f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004700:	e7f7      	b.n	80046f2 <memmove+0x1a>
 8004702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004706:	f802 4f01 	strb.w	r4, [r2, #1]!
 800470a:	e7eb      	b.n	80046e4 <memmove+0xc>

0800470c <_realloc_r>:
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470e:	4607      	mov	r7, r0
 8004710:	4614      	mov	r4, r2
 8004712:	460e      	mov	r6, r1
 8004714:	b921      	cbnz	r1, 8004720 <_realloc_r+0x14>
 8004716:	4611      	mov	r1, r2
 8004718:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800471c:	f7ff baf0 	b.w	8003d00 <_malloc_r>
 8004720:	b922      	cbnz	r2, 800472c <_realloc_r+0x20>
 8004722:	f7ff faa1 	bl	8003c68 <_free_r>
 8004726:	4625      	mov	r5, r4
 8004728:	4628      	mov	r0, r5
 800472a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800472c:	f000 f814 	bl	8004758 <_malloc_usable_size_r>
 8004730:	4284      	cmp	r4, r0
 8004732:	d90f      	bls.n	8004754 <_realloc_r+0x48>
 8004734:	4621      	mov	r1, r4
 8004736:	4638      	mov	r0, r7
 8004738:	f7ff fae2 	bl	8003d00 <_malloc_r>
 800473c:	4605      	mov	r5, r0
 800473e:	2800      	cmp	r0, #0
 8004740:	d0f2      	beq.n	8004728 <_realloc_r+0x1c>
 8004742:	4631      	mov	r1, r6
 8004744:	4622      	mov	r2, r4
 8004746:	f7ff ffbc 	bl	80046c2 <memcpy>
 800474a:	4631      	mov	r1, r6
 800474c:	4638      	mov	r0, r7
 800474e:	f7ff fa8b 	bl	8003c68 <_free_r>
 8004752:	e7e9      	b.n	8004728 <_realloc_r+0x1c>
 8004754:	4635      	mov	r5, r6
 8004756:	e7e7      	b.n	8004728 <_realloc_r+0x1c>

08004758 <_malloc_usable_size_r>:
 8004758:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800475c:	2800      	cmp	r0, #0
 800475e:	f1a0 0004 	sub.w	r0, r0, #4
 8004762:	bfbc      	itt	lt
 8004764:	580b      	ldrlt	r3, [r1, r0]
 8004766:	18c0      	addlt	r0, r0, r3
 8004768:	4770      	bx	lr
	...

0800476c <_init>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr

08004778 <_fini>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr
