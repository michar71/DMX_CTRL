
DMX_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009620  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001620  08009730  08009730  00019730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ad50  0800ad50  0001ad50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ad54  0800ad54  0001ad54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000003d4  20000000  0800ad58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001588  200003d8  0800b12c  000203d8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20001960  0800b12c  00021960  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000203d4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00038ef7  00000000  00000000  000203fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008969  00000000  00000000  000592f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000fe10  00000000  00000000  00061c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001858  00000000  00000000  00071a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000021e0  00000000  00000000  000732c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001e42c  00000000  00000000  000754a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001fd01  00000000  00000000  000938d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000824c5  00000000  00000000  000b35d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00135a9a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c44  00000000  00000000  00135b18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003d8 	.word	0x200003d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009718 	.word	0x08009718

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003dc 	.word	0x200003dc
 800014c:	08009718 	.word	0x08009718

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_frsub>:
 8000a5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a60:	e002      	b.n	8000a68 <__addsf3>
 8000a62:	bf00      	nop

08000a64 <__aeabi_fsub>:
 8000a64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a68 <__addsf3>:
 8000a68:	0042      	lsls	r2, r0, #1
 8000a6a:	bf1f      	itttt	ne
 8000a6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a70:	ea92 0f03 	teqne	r2, r3
 8000a74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a7c:	d06a      	beq.n	8000b54 <__addsf3+0xec>
 8000a7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a86:	bfc1      	itttt	gt
 8000a88:	18d2      	addgt	r2, r2, r3
 8000a8a:	4041      	eorgt	r1, r0
 8000a8c:	4048      	eorgt	r0, r1
 8000a8e:	4041      	eorgt	r1, r0
 8000a90:	bfb8      	it	lt
 8000a92:	425b      	neglt	r3, r3
 8000a94:	2b19      	cmp	r3, #25
 8000a96:	bf88      	it	hi
 8000a98:	4770      	bxhi	lr
 8000a9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ab2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4249      	negne	r1, r1
 8000aba:	ea92 0f03 	teq	r2, r3
 8000abe:	d03f      	beq.n	8000b40 <__addsf3+0xd8>
 8000ac0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ac4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac8:	eb10 000c 	adds.w	r0, r0, ip
 8000acc:	f1c3 0320 	rsb	r3, r3, #32
 8000ad0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ad4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__addsf3+0x78>
 8000ada:	4249      	negs	r1, r1
 8000adc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ae4:	d313      	bcc.n	8000b0e <__addsf3+0xa6>
 8000ae6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aea:	d306      	bcc.n	8000afa <__addsf3+0x92>
 8000aec:	0840      	lsrs	r0, r0, #1
 8000aee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000af2:	f102 0201 	add.w	r2, r2, #1
 8000af6:	2afe      	cmp	r2, #254	; 0xfe
 8000af8:	d251      	bcs.n	8000b9e <__addsf3+0x136>
 8000afa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000afe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b02:	bf08      	it	eq
 8000b04:	f020 0001 	biceq.w	r0, r0, #1
 8000b08:	ea40 0003 	orr.w	r0, r0, r3
 8000b0c:	4770      	bx	lr
 8000b0e:	0049      	lsls	r1, r1, #1
 8000b10:	eb40 0000 	adc.w	r0, r0, r0
 8000b14:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b18:	f1a2 0201 	sub.w	r2, r2, #1
 8000b1c:	d1ed      	bne.n	8000afa <__addsf3+0x92>
 8000b1e:	fab0 fc80 	clz	ip, r0
 8000b22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b26:	ebb2 020c 	subs.w	r2, r2, ip
 8000b2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b2e:	bfaa      	itet	ge
 8000b30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b34:	4252      	neglt	r2, r2
 8000b36:	4318      	orrge	r0, r3
 8000b38:	bfbc      	itt	lt
 8000b3a:	40d0      	lsrlt	r0, r2
 8000b3c:	4318      	orrlt	r0, r3
 8000b3e:	4770      	bx	lr
 8000b40:	f092 0f00 	teq	r2, #0
 8000b44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b48:	bf06      	itte	eq
 8000b4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b4e:	3201      	addeq	r2, #1
 8000b50:	3b01      	subne	r3, #1
 8000b52:	e7b5      	b.n	8000ac0 <__addsf3+0x58>
 8000b54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b5c:	bf18      	it	ne
 8000b5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b62:	d021      	beq.n	8000ba8 <__addsf3+0x140>
 8000b64:	ea92 0f03 	teq	r2, r3
 8000b68:	d004      	beq.n	8000b74 <__addsf3+0x10c>
 8000b6a:	f092 0f00 	teq	r2, #0
 8000b6e:	bf08      	it	eq
 8000b70:	4608      	moveq	r0, r1
 8000b72:	4770      	bx	lr
 8000b74:	ea90 0f01 	teq	r0, r1
 8000b78:	bf1c      	itt	ne
 8000b7a:	2000      	movne	r0, #0
 8000b7c:	4770      	bxne	lr
 8000b7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b82:	d104      	bne.n	8000b8e <__addsf3+0x126>
 8000b84:	0040      	lsls	r0, r0, #1
 8000b86:	bf28      	it	cs
 8000b88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	4770      	bx	lr
 8000b8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b92:	bf3c      	itt	cc
 8000b94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bxcc	lr
 8000b9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	4770      	bx	lr
 8000ba8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bac:	bf16      	itet	ne
 8000bae:	4608      	movne	r0, r1
 8000bb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bb4:	4601      	movne	r1, r0
 8000bb6:	0242      	lsls	r2, r0, #9
 8000bb8:	bf06      	itte	eq
 8000bba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bbe:	ea90 0f01 	teqeq	r0, r1
 8000bc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ui2f>:
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e004      	b.n	8000bd8 <__aeabi_i2f+0x8>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_i2f>:
 8000bd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	bf48      	it	mi
 8000bd6:	4240      	negmi	r0, r0
 8000bd8:	ea5f 0c00 	movs.w	ip, r0
 8000bdc:	bf08      	it	eq
 8000bde:	4770      	bxeq	lr
 8000be0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000be4:	4601      	mov	r1, r0
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	e01c      	b.n	8000c26 <__aeabi_l2f+0x2a>

08000bec <__aeabi_ul2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e00a      	b.n	8000c10 <__aeabi_l2f+0x14>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_l2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c08:	d502      	bpl.n	8000c10 <__aeabi_l2f+0x14>
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	ea5f 0c01 	movs.w	ip, r1
 8000c14:	bf02      	ittt	eq
 8000c16:	4684      	moveq	ip, r0
 8000c18:	4601      	moveq	r1, r0
 8000c1a:	2000      	moveq	r0, #0
 8000c1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c20:	bf08      	it	eq
 8000c22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c2a:	fabc f28c 	clz	r2, ip
 8000c2e:	3a08      	subs	r2, #8
 8000c30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c34:	db10      	blt.n	8000c58 <__aeabi_l2f+0x5c>
 8000c36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c40:	f1c2 0220 	rsb	r2, r2, #32
 8000c44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c48:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4c:	eb43 0002 	adc.w	r0, r3, r2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f102 0220 	add.w	r2, r2, #32
 8000c5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c60:	f1c2 0220 	rsb	r2, r2, #32
 8000c64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c68:	fa21 f202 	lsr.w	r2, r1, r2
 8000c6c:	eb43 0002 	adc.w	r0, r3, r2
 8000c70:	bf08      	it	eq
 8000c72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_fmul>:
 8000c78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c80:	bf1e      	ittt	ne
 8000c82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c86:	ea92 0f0c 	teqne	r2, ip
 8000c8a:	ea93 0f0c 	teqne	r3, ip
 8000c8e:	d06f      	beq.n	8000d70 <__aeabi_fmul+0xf8>
 8000c90:	441a      	add	r2, r3
 8000c92:	ea80 0c01 	eor.w	ip, r0, r1
 8000c96:	0240      	lsls	r0, r0, #9
 8000c98:	bf18      	it	ne
 8000c9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c9e:	d01e      	beq.n	8000cde <__aeabi_fmul+0x66>
 8000ca0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ca4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ca8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cac:	fba0 3101 	umull	r3, r1, r0, r1
 8000cb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cb4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cb8:	bf3e      	ittt	cc
 8000cba:	0049      	lslcc	r1, r1, #1
 8000cbc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cc0:	005b      	lslcc	r3, r3, #1
 8000cc2:	ea40 0001 	orr.w	r0, r0, r1
 8000cc6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cca:	2afd      	cmp	r2, #253	; 0xfd
 8000ccc:	d81d      	bhi.n	8000d0a <__aeabi_fmul+0x92>
 8000cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd6:	bf08      	it	eq
 8000cd8:	f020 0001 	biceq.w	r0, r0, #1
 8000cdc:	4770      	bx	lr
 8000cde:	f090 0f00 	teq	r0, #0
 8000ce2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ce6:	bf08      	it	eq
 8000ce8:	0249      	lsleq	r1, r1, #9
 8000cea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cf2:	3a7f      	subs	r2, #127	; 0x7f
 8000cf4:	bfc2      	ittt	gt
 8000cf6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cfa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cfe:	4770      	bxgt	lr
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	3a01      	subs	r2, #1
 8000d0a:	dc5d      	bgt.n	8000dc8 <__aeabi_fmul+0x150>
 8000d0c:	f112 0f19 	cmn.w	r2, #25
 8000d10:	bfdc      	itt	le
 8000d12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d16:	4770      	bxle	lr
 8000d18:	f1c2 0200 	rsb	r2, r2, #0
 8000d1c:	0041      	lsls	r1, r0, #1
 8000d1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d22:	f1c2 0220 	rsb	r2, r2, #32
 8000d26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d2e:	f140 0000 	adc.w	r0, r0, #0
 8000d32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d36:	bf08      	it	eq
 8000d38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3c:	4770      	bx	lr
 8000d3e:	f092 0f00 	teq	r2, #0
 8000d42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d46:	bf02      	ittt	eq
 8000d48:	0040      	lsleq	r0, r0, #1
 8000d4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d4e:	3a01      	subeq	r2, #1
 8000d50:	d0f9      	beq.n	8000d46 <__aeabi_fmul+0xce>
 8000d52:	ea40 000c 	orr.w	r0, r0, ip
 8000d56:	f093 0f00 	teq	r3, #0
 8000d5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d5e:	bf02      	ittt	eq
 8000d60:	0049      	lsleq	r1, r1, #1
 8000d62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d66:	3b01      	subeq	r3, #1
 8000d68:	d0f9      	beq.n	8000d5e <__aeabi_fmul+0xe6>
 8000d6a:	ea41 010c 	orr.w	r1, r1, ip
 8000d6e:	e78f      	b.n	8000c90 <__aeabi_fmul+0x18>
 8000d70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d74:	ea92 0f0c 	teq	r2, ip
 8000d78:	bf18      	it	ne
 8000d7a:	ea93 0f0c 	teqne	r3, ip
 8000d7e:	d00a      	beq.n	8000d96 <__aeabi_fmul+0x11e>
 8000d80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d84:	bf18      	it	ne
 8000d86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	d1d8      	bne.n	8000d3e <__aeabi_fmul+0xc6>
 8000d8c:	ea80 0001 	eor.w	r0, r0, r1
 8000d90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d94:	4770      	bx	lr
 8000d96:	f090 0f00 	teq	r0, #0
 8000d9a:	bf17      	itett	ne
 8000d9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000da0:	4608      	moveq	r0, r1
 8000da2:	f091 0f00 	teqne	r1, #0
 8000da6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000daa:	d014      	beq.n	8000dd6 <__aeabi_fmul+0x15e>
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	d101      	bne.n	8000db6 <__aeabi_fmul+0x13e>
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	d10f      	bne.n	8000dd6 <__aeabi_fmul+0x15e>
 8000db6:	ea93 0f0c 	teq	r3, ip
 8000dba:	d103      	bne.n	8000dc4 <__aeabi_fmul+0x14c>
 8000dbc:	024b      	lsls	r3, r1, #9
 8000dbe:	bf18      	it	ne
 8000dc0:	4608      	movne	r0, r1
 8000dc2:	d108      	bne.n	8000dd6 <__aeabi_fmul+0x15e>
 8000dc4:	ea80 0001 	eor.w	r0, r0, r1
 8000dc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bx	lr
 8000dd6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dda:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fdiv>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d069      	beq.n	8000ecc <__aeabi_fdiv+0xec>
 8000df8:	eba2 0203 	sub.w	r2, r2, r3
 8000dfc:	ea80 0c01 	eor.w	ip, r0, r1
 8000e00:	0249      	lsls	r1, r1, #9
 8000e02:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e06:	d037      	beq.n	8000e78 <__aeabi_fdiv+0x98>
 8000e08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e0c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e10:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	bf38      	it	cc
 8000e1c:	005b      	lslcc	r3, r3, #1
 8000e1e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e22:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e26:	428b      	cmp	r3, r1
 8000e28:	bf24      	itt	cs
 8000e2a:	1a5b      	subcs	r3, r3, r1
 8000e2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e30:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e34:	bf24      	itt	cs
 8000e36:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e3a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e3e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e42:	bf24      	itt	cs
 8000e44:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e50:	bf24      	itt	cs
 8000e52:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e56:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	bf18      	it	ne
 8000e5e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e62:	d1e0      	bne.n	8000e26 <__aeabi_fdiv+0x46>
 8000e64:	2afd      	cmp	r2, #253	; 0xfd
 8000e66:	f63f af50 	bhi.w	8000d0a <__aeabi_fmul+0x92>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e70:	bf08      	it	eq
 8000e72:	f020 0001 	biceq.w	r0, r0, #1
 8000e76:	4770      	bx	lr
 8000e78:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e7c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e80:	327f      	adds	r2, #127	; 0x7f
 8000e82:	bfc2      	ittt	gt
 8000e84:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e88:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e8c:	4770      	bxgt	lr
 8000e8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	3a01      	subs	r2, #1
 8000e98:	e737      	b.n	8000d0a <__aeabi_fmul+0x92>
 8000e9a:	f092 0f00 	teq	r2, #0
 8000e9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0040      	lsleq	r0, r0, #1
 8000ea6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eaa:	3a01      	subeq	r2, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fdiv+0xc2>
 8000eae:	ea40 000c 	orr.w	r0, r0, ip
 8000eb2:	f093 0f00 	teq	r3, #0
 8000eb6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eba:	bf02      	ittt	eq
 8000ebc:	0049      	lsleq	r1, r1, #1
 8000ebe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ec2:	3b01      	subeq	r3, #1
 8000ec4:	d0f9      	beq.n	8000eba <__aeabi_fdiv+0xda>
 8000ec6:	ea41 010c 	orr.w	r1, r1, ip
 8000eca:	e795      	b.n	8000df8 <__aeabi_fdiv+0x18>
 8000ecc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ed0:	ea92 0f0c 	teq	r2, ip
 8000ed4:	d108      	bne.n	8000ee8 <__aeabi_fdiv+0x108>
 8000ed6:	0242      	lsls	r2, r0, #9
 8000ed8:	f47f af7d 	bne.w	8000dd6 <__aeabi_fmul+0x15e>
 8000edc:	ea93 0f0c 	teq	r3, ip
 8000ee0:	f47f af70 	bne.w	8000dc4 <__aeabi_fmul+0x14c>
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	e776      	b.n	8000dd6 <__aeabi_fmul+0x15e>
 8000ee8:	ea93 0f0c 	teq	r3, ip
 8000eec:	d104      	bne.n	8000ef8 <__aeabi_fdiv+0x118>
 8000eee:	024b      	lsls	r3, r1, #9
 8000ef0:	f43f af4c 	beq.w	8000d8c <__aeabi_fmul+0x114>
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	e76e      	b.n	8000dd6 <__aeabi_fmul+0x15e>
 8000ef8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000efc:	bf18      	it	ne
 8000efe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	d1ca      	bne.n	8000e9a <__aeabi_fdiv+0xba>
 8000f04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f08:	f47f af5c 	bne.w	8000dc4 <__aeabi_fmul+0x14c>
 8000f0c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f10:	f47f af3c 	bne.w	8000d8c <__aeabi_fmul+0x114>
 8000f14:	e75f      	b.n	8000dd6 <__aeabi_fmul+0x15e>
 8000f16:	bf00      	nop

08000f18 <__aeabi_f2iz>:
 8000f18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f1c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f20:	d30f      	bcc.n	8000f42 <__aeabi_f2iz+0x2a>
 8000f22:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f26:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f2a:	d90d      	bls.n	8000f48 <__aeabi_f2iz+0x30>
 8000f2c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f34:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f38:	fa23 f002 	lsr.w	r0, r3, r2
 8000f3c:	bf18      	it	ne
 8000f3e:	4240      	negne	r0, r0
 8000f40:	4770      	bx	lr
 8000f42:	f04f 0000 	mov.w	r0, #0
 8000f46:	4770      	bx	lr
 8000f48:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_f2iz+0x3a>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d105      	bne.n	8000f5e <__aeabi_f2iz+0x46>
 8000f52:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f56:	bf08      	it	eq
 8000f58:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_InitTick+0x3c>)
{
 8000f68:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f6a:	7818      	ldrb	r0, [r3, #0]
 8000f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f70:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f74:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <HAL_InitTick+0x40>)
 8000f76:	6810      	ldr	r0, [r2, #0]
 8000f78:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f7c:	f000 fac8 	bl	8001510 <HAL_SYSTICK_Config>
 8000f80:	4604      	mov	r4, r0
 8000f82:	b958      	cbnz	r0, 8000f9c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f84:	2d0f      	cmp	r5, #15
 8000f86:	d809      	bhi.n	8000f9c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	4602      	mov	r2, r0
 8000f8a:	4629      	mov	r1, r5
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f000 fa7c 	bl	800148c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4620      	mov	r0, r4
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <HAL_InitTick+0x44>)
 8000f98:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f9a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	e7fc      	b.n	8000f9a <HAL_InitTick+0x36>
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000184 	.word	0x20000184
 8000fa8:	20000004 	.word	0x20000004

08000fac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_Init+0x20>)
{
 8000fae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fba:	f000 fa55 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff ffd0 	bl	8000f64 <HAL_InitTick>
  HAL_MspInit();
 8000fc4:	f005 fc88 	bl	80068d8 <HAL_MspInit>
}
 8000fc8:	2000      	movs	r0, #0
 8000fca:	bd08      	pop	{r3, pc}
 8000fcc:	40022000 	.word	0x40022000

08000fd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fd0:	4a03      	ldr	r2, [pc, #12]	; (8000fe0 <HAL_IncTick+0x10>)
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <HAL_IncTick+0x14>)
 8000fd4:	6811      	ldr	r1, [r2, #0]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	440b      	add	r3, r1
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	2000096c 	.word	0x2000096c
 8000fe4:	20000000 	.word	0x20000000

08000fe8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fe8:	4b01      	ldr	r3, [pc, #4]	; (8000ff0 <HAL_GetTick+0x8>)
 8000fea:	6818      	ldr	r0, [r3, #0]
}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	2000096c 	.word	0x2000096c

08000ff4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ff4:	6803      	ldr	r3, [r0, #0]
 8000ff6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000ff8:	4770      	bx	lr

08000ffa <HAL_ADC_LevelOutOfWindowCallback>:
 8000ffa:	4770      	bx	lr

08000ffc <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000ffc:	6803      	ldr	r3, [r0, #0]
{
 8000ffe:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001000:	685a      	ldr	r2, [r3, #4]
{
 8001002:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001004:	0690      	lsls	r0, r2, #26
 8001006:	d527      	bpl.n	8001058 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	0791      	lsls	r1, r2, #30
 800100c:	d524      	bpl.n	8001058 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800100e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001010:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001012:	bf5e      	ittt	pl
 8001014:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8001016:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800101a:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001022:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001026:	d110      	bne.n	800104a <HAL_ADC_IRQHandler+0x4e>
 8001028:	7b22      	ldrb	r2, [r4, #12]
 800102a:	b972      	cbnz	r2, 800104a <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	f022 0220 	bic.w	r2, r2, #32
 8001032:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001034:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001036:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800103a:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800103c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800103e:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001040:	bf5e      	ittt	pl
 8001042:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8001044:	f043 0301 	orrpl.w	r3, r3, #1
 8001048:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800104a:	4620      	mov	r0, r4
 800104c:	f005 fde2 	bl	8006c14 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001050:	f06f 0212 	mvn.w	r2, #18
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	0610      	lsls	r0, r2, #24
 800105e:	d530      	bpl.n	80010c2 <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	0751      	lsls	r1, r2, #29
 8001064:	d52d      	bpl.n	80010c2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001066:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001068:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800106a:	bf5e      	ittt	pl
 800106c:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800106e:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8001072:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 800107a:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 800107e:	d00a      	beq.n	8001096 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001080:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001082:	0550      	lsls	r0, r2, #21
 8001084:	d416      	bmi.n	80010b4 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800108c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001090:	d110      	bne.n	80010b4 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001092:	7b22      	ldrb	r2, [r4, #12]
 8001094:	b972      	cbnz	r2, 80010b4 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800109c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800109e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010a4:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010a8:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010aa:	bf5e      	ittt	pl
 80010ac:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80010ae:	f043 0301 	orrpl.w	r3, r3, #1
 80010b2:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010b4:	4620      	mov	r0, r4
 80010b6:	f000 f9d5 	bl	8001464 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010ba:	f06f 020c 	mvn.w	r2, #12
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	0652      	lsls	r2, r2, #25
 80010c8:	d50d      	bpl.n	80010e6 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	07db      	lsls	r3, r3, #31
 80010ce:	d50a      	bpl.n	80010e6 <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010d2:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d8:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010da:	f7ff ff8e 	bl	8000ffa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80010de:	f06f 0201 	mvn.w	r2, #1
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80010e6:	bd10      	pop	{r4, pc}

080010e8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80010e8:	2300      	movs	r3, #0
{ 
 80010ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80010ec:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d06d      	beq.n	80011d2 <HAL_ADC_ConfigChannel+0xea>
 80010f6:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010f8:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80010fa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80010fe:	2d06      	cmp	r5, #6
 8001100:	6802      	ldr	r2, [r0, #0]
 8001102:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001106:	680c      	ldr	r4, [r1, #0]
 8001108:	d823      	bhi.n	8001152 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800110a:	261f      	movs	r6, #31
 800110c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800110e:	3b05      	subs	r3, #5
 8001110:	409e      	lsls	r6, r3
 8001112:	ea25 0506 	bic.w	r5, r5, r6
 8001116:	fa04 f303 	lsl.w	r3, r4, r3
 800111a:	432b      	orrs	r3, r5
 800111c:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800111e:	2c09      	cmp	r4, #9
 8001120:	688b      	ldr	r3, [r1, #8]
 8001122:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8001126:	f04f 0107 	mov.w	r1, #7
 800112a:	d92a      	bls.n	8001182 <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800112c:	68d6      	ldr	r6, [r2, #12]
 800112e:	3d1e      	subs	r5, #30
 8001130:	40a9      	lsls	r1, r5
 8001132:	ea26 0101 	bic.w	r1, r6, r1
 8001136:	40ab      	lsls	r3, r5
 8001138:	430b      	orrs	r3, r1
 800113a:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800113c:	f1a4 0310 	sub.w	r3, r4, #16
 8001140:	2b01      	cmp	r3, #1
 8001142:	d926      	bls.n	8001192 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001144:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001146:	2200      	movs	r2, #0
 8001148:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800114c:	4618      	mov	r0, r3
 800114e:	b002      	add	sp, #8
 8001150:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001152:	2d0c      	cmp	r5, #12
 8001154:	f04f 051f 	mov.w	r5, #31
 8001158:	d809      	bhi.n	800116e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800115a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800115c:	3b23      	subs	r3, #35	; 0x23
 800115e:	409d      	lsls	r5, r3
 8001160:	ea26 0505 	bic.w	r5, r6, r5
 8001164:	fa04 f303 	lsl.w	r3, r4, r3
 8001168:	432b      	orrs	r3, r5
 800116a:	6313      	str	r3, [r2, #48]	; 0x30
 800116c:	e7d7      	b.n	800111e <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800116e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001170:	3b41      	subs	r3, #65	; 0x41
 8001172:	409d      	lsls	r5, r3
 8001174:	ea26 0505 	bic.w	r5, r6, r5
 8001178:	fa04 f303 	lsl.w	r3, r4, r3
 800117c:	432b      	orrs	r3, r5
 800117e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001180:	e7cd      	b.n	800111e <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001182:	6916      	ldr	r6, [r2, #16]
 8001184:	40a9      	lsls	r1, r5
 8001186:	ea26 0101 	bic.w	r1, r6, r1
 800118a:	40ab      	lsls	r3, r5
 800118c:	430b      	orrs	r3, r1
 800118e:	6113      	str	r3, [r2, #16]
 8001190:	e7d4      	b.n	800113c <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_ADC_ConfigChannel+0xf0>)
 8001194:	429a      	cmp	r2, r3
 8001196:	d116      	bne.n	80011c6 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001198:	6893      	ldr	r3, [r2, #8]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	d4d2      	bmi.n	8001144 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800119e:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011a0:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011a6:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011a8:	d1cc      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_ADC_ConfigChannel+0xf4>)
 80011ac:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <HAL_ADC_ConfigChannel+0xf8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80011b4:	230a      	movs	r3, #10
 80011b6:	4353      	muls	r3, r2
            wait_loop_index--;
 80011b8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80011ba:	9b01      	ldr	r3, [sp, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0c1      	beq.n	8001144 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 80011c0:	9b01      	ldr	r3, [sp, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	e7f8      	b.n	80011b8 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80011c8:	f043 0320 	orr.w	r3, r3, #32
 80011cc:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e7b9      	b.n	8001146 <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 80011d2:	2302      	movs	r3, #2
 80011d4:	e7ba      	b.n	800114c <HAL_ADC_ConfigChannel+0x64>
 80011d6:	bf00      	nop
 80011d8:	40012400 	.word	0x40012400
 80011dc:	20000184 	.word	0x20000184
 80011e0:	000f4240 	.word	0x000f4240

080011e4 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80011e4:	2300      	movs	r3, #0
{
 80011e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80011e8:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011ea:	6803      	ldr	r3, [r0, #0]
{
 80011ec:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	07d2      	lsls	r2, r2, #31
 80011f2:	d502      	bpl.n	80011fa <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011f4:	2000      	movs	r0, #0
}
 80011f6:	b002      	add	sp, #8
 80011f8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	f042 0201 	orr.w	r2, r2, #1
 8001200:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <ADC_Enable+0x68>)
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <ADC_Enable+0x6c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800120c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800120e:	9b01      	ldr	r3, [sp, #4]
 8001210:	b9c3      	cbnz	r3, 8001244 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8001212:	f7ff fee9 	bl	8000fe8 <HAL_GetTick>
 8001216:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	689d      	ldr	r5, [r3, #8]
 800121c:	f015 0501 	ands.w	r5, r5, #1
 8001220:	d1e8      	bne.n	80011f4 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001222:	f7ff fee1 	bl	8000fe8 <HAL_GetTick>
 8001226:	1b80      	subs	r0, r0, r6
 8001228:	2802      	cmp	r0, #2
 800122a:	d9f5      	bls.n	8001218 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800122c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800122e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001232:	f043 0310 	orr.w	r3, r3, #16
 8001236:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001238:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800123a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001242:	e7d8      	b.n	80011f6 <ADC_Enable+0x12>
      wait_loop_index--;
 8001244:	9b01      	ldr	r3, [sp, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	e7e0      	b.n	800120c <ADC_Enable+0x28>
 800124a:	bf00      	nop
 800124c:	20000184 	.word	0x20000184
 8001250:	000f4240 	.word	0x000f4240

08001254 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 8001254:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001258:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800125a:	2b01      	cmp	r3, #1
{
 800125c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800125e:	d058      	beq.n	8001312 <HAL_ADC_Start_IT+0xbe>
 8001260:	2301      	movs	r3, #1
 8001262:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001266:	f7ff ffbd 	bl	80011e4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800126a:	2800      	cmp	r0, #0
 800126c:	d14d      	bne.n	800130a <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 800126e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001270:	4a29      	ldr	r2, [pc, #164]	; (8001318 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8001272:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	4293      	cmp	r3, r2
 8001284:	d104      	bne.n	8001290 <HAL_ADC_Start_IT+0x3c>
 8001286:	4925      	ldr	r1, [pc, #148]	; (800131c <HAL_ADC_Start_IT+0xc8>)
 8001288:	684a      	ldr	r2, [r1, #4]
 800128a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800128e:	d132      	bne.n	80012f6 <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001290:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001292:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001296:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001298:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800129a:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800129c:	bf41      	itttt	mi
 800129e:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80012a0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80012a4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80012a8:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012b0:	bf1c      	itt	ne
 80012b2:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80012b4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80012b8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80012c0:	f06f 0202 	mvn.w	r2, #2
 80012c4:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	f042 0220 	orr.w	r2, r2, #32
 80012cc:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80012d4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80012d8:	d113      	bne.n	8001302 <HAL_ADC_Start_IT+0xae>
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <HAL_ADC_Start_IT+0xc4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d105      	bne.n	80012ec <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80012e0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80012e4:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012e6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80012ea:	d10a      	bne.n	8001302 <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80012f2:	609a      	str	r2, [r3, #8]
}
 80012f4:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012fc:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012fe:	684a      	ldr	r2, [r1, #4]
 8001300:	e7cb      	b.n	800129a <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001308:	e7f3      	b.n	80012f2 <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 800130a:	2300      	movs	r3, #0
 800130c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001310:	e7f0      	b.n	80012f4 <HAL_ADC_Start_IT+0xa0>
  __HAL_LOCK(hadc);
 8001312:	2002      	movs	r0, #2
 8001314:	e7ee      	b.n	80012f4 <HAL_ADC_Start_IT+0xa0>
 8001316:	bf00      	nop
 8001318:	40012800 	.word	0x40012800
 800131c:	40012400 	.word	0x40012400

08001320 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001320:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001322:	6803      	ldr	r3, [r0, #0]
{
 8001324:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	07d2      	lsls	r2, r2, #31
 800132a:	d401      	bmi.n	8001330 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800132c:	2000      	movs	r0, #0
}
 800132e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	f022 0201 	bic.w	r2, r2, #1
 8001336:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001338:	f7ff fe56 	bl	8000fe8 <HAL_GetTick>
 800133c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	07db      	lsls	r3, r3, #31
 8001344:	d5f2      	bpl.n	800132c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001346:	f7ff fe4f 	bl	8000fe8 <HAL_GetTick>
 800134a:	1b40      	subs	r0, r0, r5
 800134c:	2802      	cmp	r0, #2
 800134e:	d9f6      	bls.n	800133e <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001350:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001352:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001354:	f043 0310 	orr.w	r3, r3, #16
 8001358:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001362:	e7e4      	b.n	800132e <ADC_ConversionStop_Disable+0xe>

08001364 <HAL_ADC_Init>:
{
 8001364:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8001366:	4604      	mov	r4, r0
 8001368:	2800      	cmp	r0, #0
 800136a:	d070      	beq.n	800144e <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800136c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800136e:	b923      	cbnz	r3, 800137a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001370:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001372:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001376:	f005 fad1 	bl	800691c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800137a:	4620      	mov	r0, r4
 800137c:	f7ff ffd0 	bl	8001320 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001380:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001382:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8001386:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001388:	d163      	bne.n	8001452 <HAL_ADC_Init+0xee>
 800138a:	2800      	cmp	r0, #0
 800138c:	d161      	bne.n	8001452 <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800138e:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001390:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001394:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001396:	f023 0302 	bic.w	r3, r3, #2
 800139a:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800139e:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013a0:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80013a2:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013a4:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013a6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013aa:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013ae:	d037      	beq.n	8001420 <HAL_ADC_Init+0xbc>
 80013b0:	2901      	cmp	r1, #1
 80013b2:	bf14      	ite	ne
 80013b4:	4606      	movne	r6, r0
 80013b6:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013ba:	7d25      	ldrb	r5, [r4, #20]
 80013bc:	2d01      	cmp	r5, #1
 80013be:	d106      	bne.n	80013ce <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013c0:	bb83      	cbnz	r3, 8001424 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013c2:	69a3      	ldr	r3, [r4, #24]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80013ca:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80013ce:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013d0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80013d4:	685d      	ldr	r5, [r3, #4]
 80013d6:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80013da:	ea45 0506 	orr.w	r5, r5, r6
 80013de:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80013e0:	689e      	ldr	r6, [r3, #8]
 80013e2:	4d1e      	ldr	r5, [pc, #120]	; (800145c <HAL_ADC_Init+0xf8>)
 80013e4:	ea05 0506 	and.w	r5, r5, r6
 80013e8:	ea45 0502 	orr.w	r5, r5, r2
 80013ec:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013ee:	d001      	beq.n	80013f4 <HAL_ADC_Init+0x90>
 80013f0:	2901      	cmp	r1, #1
 80013f2:	d120      	bne.n	8001436 <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80013f4:	6921      	ldr	r1, [r4, #16]
 80013f6:	3901      	subs	r1, #1
 80013f8:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80013fa:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80013fc:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001400:	4329      	orrs	r1, r5
 8001402:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001404:	6899      	ldr	r1, [r3, #8]
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_ADC_Init+0xfc>)
 8001408:	400b      	ands	r3, r1
 800140a:	429a      	cmp	r2, r3
 800140c:	d115      	bne.n	800143a <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 800140e:	2300      	movs	r3, #0
 8001410:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001412:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001414:	f023 0303 	bic.w	r3, r3, #3
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800141e:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001420:	460e      	mov	r6, r1
 8001422:	e7ca      	b.n	80013ba <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001424:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001426:	f043 0320 	orr.w	r3, r3, #32
 800142a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001434:	e7cb      	b.n	80013ce <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 8001436:	2100      	movs	r1, #0
 8001438:	e7df      	b.n	80013fa <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 800143a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800143c:	f023 0312 	bic.w	r3, r3, #18
 8001440:	f043 0310 	orr.w	r3, r3, #16
 8001444:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001446:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800144e:	2001      	movs	r0, #1
 8001450:	e7e5      	b.n	800141e <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	62a3      	str	r3, [r4, #40]	; 0x28
 8001458:	e7f9      	b.n	800144e <HAL_ADC_Init+0xea>
 800145a:	bf00      	nop
 800145c:	ffe1f7fd 	.word	0xffe1f7fd
 8001460:	ff1f0efe 	.word	0xff1f0efe

08001464 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001464:	4770      	bx	lr
	...

08001468 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800146a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800146e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001476:	041b      	lsls	r3, r3, #16
 8001478:	0c1b      	lsrs	r3, r3, #16
 800147a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800147e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001482:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001484:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148e:	b570      	push	{r4, r5, r6, lr}
 8001490:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001492:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001496:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149a:	f1c4 0507 	rsb	r5, r4, #7
 800149e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a0:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	bf28      	it	cs
 80014a6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a8:	2b06      	cmp	r3, #6
 80014aa:	bf98      	it	ls
 80014ac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ae:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	bf88      	it	hi
 80014b4:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b6:	ea21 0303 	bic.w	r3, r1, r3
 80014ba:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014bc:	fa06 f404 	lsl.w	r4, r6, r4
 80014c0:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80014c4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c6:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	bfa8      	it	ge
 80014cc:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80014d0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	bfb8      	it	lt
 80014d6:	4a06      	ldrlt	r2, [pc, #24]	; (80014f0 <HAL_NVIC_SetPriority+0x64>)
 80014d8:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	bfab      	itete	ge
 80014dc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e8:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	e000ed14 	.word	0xe000ed14

080014f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80014f4:	2800      	cmp	r0, #0
 80014f6:	db08      	blt.n	800150a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f8:	2301      	movs	r3, #1
 80014fa:	0942      	lsrs	r2, r0, #5
 80014fc:	f000 001f 	and.w	r0, r0, #31
 8001500:	fa03 f000 	lsl.w	r0, r3, r0
 8001504:	4b01      	ldr	r3, [pc, #4]	; (800150c <HAL_NVIC_EnableIRQ+0x18>)
 8001506:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100

08001510 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001510:	3801      	subs	r0, #1
 8001512:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001516:	d20a      	bcs.n	800152e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	4a06      	ldr	r2, [pc, #24]	; (8001538 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001520:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e010 	.word	0xe000e010
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800153c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800153e:	b330      	cbz	r0, 800158e <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001540:	2214      	movs	r2, #20
 8001542:	6801      	ldr	r1, [r0, #0]
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <HAL_DMA_Init+0x58>)
 8001546:	440b      	add	r3, r1
 8001548:	fbb3 f3f2 	udiv	r3, r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001552:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001554:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001556:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 800155a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155c:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800155e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001562:	4323      	orrs	r3, r4
 8001564:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001566:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800156c:	6944      	ldr	r4, [r0, #20]
 800156e:	4323      	orrs	r3, r4
 8001570:	6984      	ldr	r4, [r0, #24]
 8001572:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001574:	69c4      	ldr	r4, [r0, #28]
 8001576:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001578:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800157a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800157c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800157e:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001580:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001584:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001586:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800158a:	4618      	mov	r0, r3
}
 800158c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800158e:	2001      	movs	r0, #1
 8001590:	e7fc      	b.n	800158c <HAL_DMA_Init+0x50>
 8001592:	bf00      	nop
 8001594:	bffdfff8 	.word	0xbffdfff8
 8001598:	40020000 	.word	0x40020000

0800159c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800159c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800159e:	f890 4020 	ldrb.w	r4, [r0, #32]
 80015a2:	2c01      	cmp	r4, #1
 80015a4:	d035      	beq.n	8001612 <HAL_DMA_Start_IT+0x76>
 80015a6:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015a8:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80015ac:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80015b0:	42a5      	cmp	r5, r4
 80015b2:	f04f 0600 	mov.w	r6, #0
 80015b6:	f04f 0402 	mov.w	r4, #2
 80015ba:	d128      	bne.n	800160e <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015bc:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015c0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c2:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80015c4:	6826      	ldr	r6, [r4, #0]
 80015c6:	f026 0601 	bic.w	r6, r6, #1
 80015ca:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015cc:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 80015d0:	40bd      	lsls	r5, r7
 80015d2:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015d4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015d6:	6843      	ldr	r3, [r0, #4]
 80015d8:	6805      	ldr	r5, [r0, #0]
 80015da:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80015dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015de:	bf0b      	itete	eq
 80015e0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80015e2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80015e4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80015e6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80015e8:	b14b      	cbz	r3, 80015fe <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80015f0:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015f2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80015f4:	682b      	ldr	r3, [r5, #0]
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	602b      	str	r3, [r5, #0]
}
 80015fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	f043 030a 	orr.w	r3, r3, #10
 800160c:	e7f0      	b.n	80015f0 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800160e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001612:	2002      	movs	r0, #2
 8001614:	e7f2      	b.n	80015fc <HAL_DMA_Start_IT+0x60>
	...

08001618 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001618:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 800161c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800161e:	2b02      	cmp	r3, #2
 8001620:	d003      	beq.n	800162a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001622:	2304      	movs	r3, #4
 8001624:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001626:	2001      	movs	r0, #1
}
 8001628:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162a:	6803      	ldr	r3, [r0, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f022 020e 	bic.w	r2, r2, #14
 8001632:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800163c:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <HAL_DMA_Abort_IT+0x88>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d01f      	beq.n	8001682 <HAL_DMA_Abort_IT+0x6a>
 8001642:	3214      	adds	r2, #20
 8001644:	4293      	cmp	r3, r2
 8001646:	d01e      	beq.n	8001686 <HAL_DMA_Abort_IT+0x6e>
 8001648:	3214      	adds	r2, #20
 800164a:	4293      	cmp	r3, r2
 800164c:	d01d      	beq.n	800168a <HAL_DMA_Abort_IT+0x72>
 800164e:	3214      	adds	r2, #20
 8001650:	4293      	cmp	r3, r2
 8001652:	d01d      	beq.n	8001690 <HAL_DMA_Abort_IT+0x78>
 8001654:	3214      	adds	r2, #20
 8001656:	4293      	cmp	r3, r2
 8001658:	d01d      	beq.n	8001696 <HAL_DMA_Abort_IT+0x7e>
 800165a:	3214      	adds	r2, #20
 800165c:	4293      	cmp	r3, r2
 800165e:	bf0c      	ite	eq
 8001660:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001664:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 800166a:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800166c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800166e:	2301      	movs	r3, #1
 8001670:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001674:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001676:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800167a:	b17b      	cbz	r3, 800169c <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 800167c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800167e:	4620      	mov	r0, r4
 8001680:	e7d2      	b.n	8001628 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001682:	2301      	movs	r3, #1
 8001684:	e7f0      	b.n	8001668 <HAL_DMA_Abort_IT+0x50>
 8001686:	2310      	movs	r3, #16
 8001688:	e7ee      	b.n	8001668 <HAL_DMA_Abort_IT+0x50>
 800168a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168e:	e7eb      	b.n	8001668 <HAL_DMA_Abort_IT+0x50>
 8001690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001694:	e7e8      	b.n	8001668 <HAL_DMA_Abort_IT+0x50>
 8001696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169a:	e7e5      	b.n	8001668 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800169c:	4618      	mov	r0, r3
 800169e:	e7c3      	b.n	8001628 <HAL_DMA_Abort_IT+0x10>
 80016a0:	40020008 	.word	0x40020008
 80016a4:	40020000 	.word	0x40020000

080016a8 <HAL_DMA_IRQHandler>:
{
 80016a8:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016aa:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016ac:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016ae:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016b0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80016b2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016b4:	4095      	lsls	r5, r2
 80016b6:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80016b8:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016ba:	d032      	beq.n	8001722 <HAL_DMA_IRQHandler+0x7a>
 80016bc:	074d      	lsls	r5, r1, #29
 80016be:	d530      	bpl.n	8001722 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016c4:	bf5e      	ittt	pl
 80016c6:	681a      	ldrpl	r2, [r3, #0]
 80016c8:	f022 0204 	bicpl.w	r2, r2, #4
 80016cc:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016ce:	4a3e      	ldr	r2, [pc, #248]	; (80017c8 <HAL_DMA_IRQHandler+0x120>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d019      	beq.n	8001708 <HAL_DMA_IRQHandler+0x60>
 80016d4:	3214      	adds	r2, #20
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d018      	beq.n	800170c <HAL_DMA_IRQHandler+0x64>
 80016da:	3214      	adds	r2, #20
 80016dc:	4293      	cmp	r3, r2
 80016de:	d017      	beq.n	8001710 <HAL_DMA_IRQHandler+0x68>
 80016e0:	3214      	adds	r2, #20
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d017      	beq.n	8001716 <HAL_DMA_IRQHandler+0x6e>
 80016e6:	3214      	adds	r2, #20
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d017      	beq.n	800171c <HAL_DMA_IRQHandler+0x74>
 80016ec:	3214      	adds	r2, #20
 80016ee:	4293      	cmp	r3, r2
 80016f0:	bf0c      	ite	eq
 80016f2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80016f6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80016fa:	4a34      	ldr	r2, [pc, #208]	; (80017cc <HAL_DMA_IRQHandler+0x124>)
 80016fc:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80016fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001700:	2b00      	cmp	r3, #0
 8001702:	d05e      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x11a>
}
 8001704:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001706:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001708:	2304      	movs	r3, #4
 800170a:	e7f6      	b.n	80016fa <HAL_DMA_IRQHandler+0x52>
 800170c:	2340      	movs	r3, #64	; 0x40
 800170e:	e7f4      	b.n	80016fa <HAL_DMA_IRQHandler+0x52>
 8001710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001714:	e7f1      	b.n	80016fa <HAL_DMA_IRQHandler+0x52>
 8001716:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800171a:	e7ee      	b.n	80016fa <HAL_DMA_IRQHandler+0x52>
 800171c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001720:	e7eb      	b.n	80016fa <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001722:	2502      	movs	r5, #2
 8001724:	4095      	lsls	r5, r2
 8001726:	4225      	tst	r5, r4
 8001728:	d035      	beq.n	8001796 <HAL_DMA_IRQHandler+0xee>
 800172a:	078d      	lsls	r5, r1, #30
 800172c:	d533      	bpl.n	8001796 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	0694      	lsls	r4, r2, #26
 8001732:	d406      	bmi.n	8001742 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	f022 020a 	bic.w	r2, r2, #10
 800173a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800173c:	2201      	movs	r2, #1
 800173e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001742:	4a21      	ldr	r2, [pc, #132]	; (80017c8 <HAL_DMA_IRQHandler+0x120>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d019      	beq.n	800177c <HAL_DMA_IRQHandler+0xd4>
 8001748:	3214      	adds	r2, #20
 800174a:	4293      	cmp	r3, r2
 800174c:	d018      	beq.n	8001780 <HAL_DMA_IRQHandler+0xd8>
 800174e:	3214      	adds	r2, #20
 8001750:	4293      	cmp	r3, r2
 8001752:	d017      	beq.n	8001784 <HAL_DMA_IRQHandler+0xdc>
 8001754:	3214      	adds	r2, #20
 8001756:	4293      	cmp	r3, r2
 8001758:	d017      	beq.n	800178a <HAL_DMA_IRQHandler+0xe2>
 800175a:	3214      	adds	r2, #20
 800175c:	4293      	cmp	r3, r2
 800175e:	d017      	beq.n	8001790 <HAL_DMA_IRQHandler+0xe8>
 8001760:	3214      	adds	r2, #20
 8001762:	4293      	cmp	r3, r2
 8001764:	bf0c      	ite	eq
 8001766:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800176a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800176e:	4a17      	ldr	r2, [pc, #92]	; (80017cc <HAL_DMA_IRQHandler+0x124>)
 8001770:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001772:	2300      	movs	r3, #0
 8001774:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001778:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800177a:	e7c1      	b.n	8001700 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800177c:	2302      	movs	r3, #2
 800177e:	e7f6      	b.n	800176e <HAL_DMA_IRQHandler+0xc6>
 8001780:	2320      	movs	r3, #32
 8001782:	e7f4      	b.n	800176e <HAL_DMA_IRQHandler+0xc6>
 8001784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001788:	e7f1      	b.n	800176e <HAL_DMA_IRQHandler+0xc6>
 800178a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800178e:	e7ee      	b.n	800176e <HAL_DMA_IRQHandler+0xc6>
 8001790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001794:	e7eb      	b.n	800176e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001796:	2508      	movs	r5, #8
 8001798:	4095      	lsls	r5, r2
 800179a:	4225      	tst	r5, r4
 800179c:	d011      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x11a>
 800179e:	0709      	lsls	r1, r1, #28
 80017a0:	d50f      	bpl.n	80017c2 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a2:	6819      	ldr	r1, [r3, #0]
 80017a4:	f021 010e 	bic.w	r1, r1, #14
 80017a8:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017aa:	2301      	movs	r3, #1
 80017ac:	fa03 f202 	lsl.w	r2, r3, r2
 80017b0:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017b2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80017b4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80017b8:	2300      	movs	r3, #0
 80017ba:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80017be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80017c0:	e79e      	b.n	8001700 <HAL_DMA_IRQHandler+0x58>
}
 80017c2:	bc70      	pop	{r4, r5, r6}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40020008 	.word	0x40020008
 80017cc:	40020000 	.word	0x40020000

080017d0 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80017d0:	4a11      	ldr	r2, [pc, #68]	; (8001818 <FLASH_SetErrorCode+0x48>)
 80017d2:	68d3      	ldr	r3, [r2, #12]
 80017d4:	f013 0310 	ands.w	r3, r3, #16
 80017d8:	d005      	beq.n	80017e6 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80017da:	4910      	ldr	r1, [pc, #64]	; (800181c <FLASH_SetErrorCode+0x4c>)
 80017dc:	69cb      	ldr	r3, [r1, #28]
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80017e4:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80017e6:	68d2      	ldr	r2, [r2, #12]
 80017e8:	0750      	lsls	r0, r2, #29
 80017ea:	d506      	bpl.n	80017fa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80017ec:	490b      	ldr	r1, [pc, #44]	; (800181c <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80017ee:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80017f2:	69ca      	ldr	r2, [r1, #28]
 80017f4:	f042 0201 	orr.w	r2, r2, #1
 80017f8:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80017fa:	4a07      	ldr	r2, [pc, #28]	; (8001818 <FLASH_SetErrorCode+0x48>)
 80017fc:	69d1      	ldr	r1, [r2, #28]
 80017fe:	07c9      	lsls	r1, r1, #31
 8001800:	d508      	bpl.n	8001814 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001802:	4806      	ldr	r0, [pc, #24]	; (800181c <FLASH_SetErrorCode+0x4c>)
 8001804:	69c1      	ldr	r1, [r0, #28]
 8001806:	f041 0104 	orr.w	r1, r1, #4
 800180a:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800180c:	69d1      	ldr	r1, [r2, #28]
 800180e:	f021 0101 	bic.w	r1, r1, #1
 8001812:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001814:	60d3      	str	r3, [r2, #12]
}  
 8001816:	4770      	bx	lr
 8001818:	40022000 	.word	0x40022000
 800181c:	20000970 	.word	0x20000970

08001820 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_FLASH_Unlock+0x1c>)
 8001822:	6918      	ldr	r0, [r3, #16]
 8001824:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001828:	d007      	beq.n	800183a <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800182a:	4a05      	ldr	r2, [pc, #20]	; (8001840 <HAL_FLASH_Unlock+0x20>)
 800182c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800182e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001832:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001834:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8001836:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 800183a:	4770      	bx	lr
 800183c:	40022000 	.word	0x40022000
 8001840:	45670123 	.word	0x45670123

08001844 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001844:	4a03      	ldr	r2, [pc, #12]	; (8001854 <HAL_FLASH_Lock+0x10>)
}
 8001846:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001848:	6913      	ldr	r3, [r2, #16]
 800184a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800184e:	6113      	str	r3, [r2, #16]
}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40022000 	.word	0x40022000

08001858 <FLASH_WaitForLastOperation>:
{
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185a:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff fbc4 	bl	8000fe8 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001860:	4c11      	ldr	r4, [pc, #68]	; (80018a8 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8001862:	4607      	mov	r7, r0
 8001864:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001866:	68e3      	ldr	r3, [r4, #12]
 8001868:	07d8      	lsls	r0, r3, #31
 800186a:	d412      	bmi.n	8001892 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800186c:	68e3      	ldr	r3, [r4, #12]
 800186e:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001870:	bf44      	itt	mi
 8001872:	2320      	movmi	r3, #32
 8001874:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001876:	68eb      	ldr	r3, [r5, #12]
 8001878:	06da      	lsls	r2, r3, #27
 800187a:	d406      	bmi.n	800188a <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800187c:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800187e:	07db      	lsls	r3, r3, #31
 8001880:	d403      	bmi.n	800188a <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001882:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001884:	f010 0004 	ands.w	r0, r0, #4
 8001888:	d007      	beq.n	800189a <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 800188a:	f7ff ffa1 	bl	80017d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800188e:	2001      	movs	r0, #1
 8001890:	e003      	b.n	800189a <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8001892:	1c73      	adds	r3, r6, #1
 8001894:	d0e7      	beq.n	8001866 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001896:	b90e      	cbnz	r6, 800189c <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8001898:	2003      	movs	r0, #3
}
 800189a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800189c:	f7ff fba4 	bl	8000fe8 <HAL_GetTick>
 80018a0:	1bc0      	subs	r0, r0, r7
 80018a2:	42b0      	cmp	r0, r6
 80018a4:	d9df      	bls.n	8001866 <FLASH_WaitForLastOperation+0xe>
 80018a6:	e7f7      	b.n	8001898 <FLASH_WaitForLastOperation+0x40>
 80018a8:	40022000 	.word	0x40022000

080018ac <HAL_FLASH_Program>:
{
 80018ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80018b0:	4c24      	ldr	r4, [pc, #144]	; (8001944 <HAL_FLASH_Program+0x98>)
{
 80018b2:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 80018b4:	7e23      	ldrb	r3, [r4, #24]
{
 80018b6:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80018b8:	2b01      	cmp	r3, #1
{
 80018ba:	460f      	mov	r7, r1
 80018bc:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80018be:	d03f      	beq.n	8001940 <HAL_FLASH_Program+0x94>
 80018c0:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018c2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80018c6:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018c8:	f7ff ffc6 	bl	8001858 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80018cc:	bba0      	cbnz	r0, 8001938 <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80018ce:	2d01      	cmp	r5, #1
 80018d0:	d003      	beq.n	80018da <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 80018d2:	2d02      	cmp	r5, #2
 80018d4:	bf0c      	ite	eq
 80018d6:	2502      	moveq	r5, #2
 80018d8:	2504      	movne	r5, #4
 80018da:	f04f 0900 	mov.w	r9, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018de:	46cb      	mov	fp, r9
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80018e0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8001948 <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80018e4:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80018e8:	f1c3 0120 	rsb	r1, r3, #32
 80018ec:	f1a3 0220 	sub.w	r2, r3, #32
 80018f0:	fa06 f101 	lsl.w	r1, r6, r1
 80018f4:	fa28 f303 	lsr.w	r3, r8, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018f8:	f8c4 b01c 	str.w	fp, [r4, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80018fc:	430b      	orrs	r3, r1
 80018fe:	fa26 f202 	lsr.w	r2, r6, r2
 8001902:	4313      	orrs	r3, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001904:	f8da 2010 	ldr.w	r2, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001908:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	f8ca 2010 	str.w	r2, [sl, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001912:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 8001916:	f827 3019 	strh.w	r3, [r7, r9, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800191a:	f7ff ff9d 	bl	8001858 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800191e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 800192a:	b928      	cbnz	r0, 8001938 <HAL_FLASH_Program+0x8c>
 800192c:	f109 0901 	add.w	r9, r9, #1
    for (index = 0U; index < nbiterations; index++)
 8001930:	fa5f f389 	uxtb.w	r3, r9
 8001934:	429d      	cmp	r5, r3
 8001936:	d8d5      	bhi.n	80018e4 <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 8001938:	2300      	movs	r3, #0
 800193a:	7623      	strb	r3, [r4, #24]
}
 800193c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8001940:	2002      	movs	r0, #2
 8001942:	e7fb      	b.n	800193c <HAL_FLASH_Program+0x90>
 8001944:	20000970 	.word	0x20000970
 8001948:	40022000 	.word	0x40022000

0800194c <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800194c:	2200      	movs	r2, #0
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <FLASH_MassErase.isra.0+0x1c>)
 8001950:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <FLASH_MassErase.isra.0+0x20>)
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	f042 0204 	orr.w	r2, r2, #4
 800195a:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001962:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000970 	.word	0x20000970
 800196c:	40022000 	.word	0x40022000

08001970 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001970:	2200      	movs	r2, #0
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <FLASH_PageErase+0x1c>)
 8001974:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <FLASH_PageErase+0x20>)
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	f042 0202 	orr.w	r2, r2, #2
 800197e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001980:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001988:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800198a:	4770      	bx	lr
 800198c:	20000970 	.word	0x20000970
 8001990:	40022000 	.word	0x40022000

08001994 <HAL_FLASHEx_Erase>:
{
 8001994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8001998:	4d22      	ldr	r5, [pc, #136]	; (8001a24 <HAL_FLASHEx_Erase+0x90>)
{
 800199a:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 800199c:	7e2b      	ldrb	r3, [r5, #24]
{
 800199e:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d03d      	beq.n	8001a20 <HAL_FLASHEx_Erase+0x8c>
 80019a4:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80019a6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 80019a8:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80019aa:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80019ac:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80019b0:	d113      	bne.n	80019da <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80019b2:	f7ff ff51 	bl	8001858 <FLASH_WaitForLastOperation>
 80019b6:	b120      	cbz	r0, 80019c2 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80019b8:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80019ba:	2300      	movs	r3, #0
 80019bc:	762b      	strb	r3, [r5, #24]
}
 80019be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 80019c2:	f7ff ffc3 	bl	800194c <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019ca:	f7ff ff45 	bl	8001858 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80019ce:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <HAL_FLASHEx_Erase+0x94>)
 80019d0:	6913      	ldr	r3, [r2, #16]
 80019d2:	f023 0304 	bic.w	r3, r3, #4
 80019d6:	6113      	str	r3, [r2, #16]
 80019d8:	e7ef      	b.n	80019ba <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80019da:	f7ff ff3d 	bl	8001858 <FLASH_WaitForLastOperation>
 80019de:	2800      	cmp	r0, #0
 80019e0:	d1ea      	bne.n	80019b8 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019ea:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80019ec:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80019ee:	4c0e      	ldr	r4, [pc, #56]	; (8001a28 <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80019f0:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
 80019f4:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 80019f8:	42b3      	cmp	r3, r6
 80019fa:	d9de      	bls.n	80019ba <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 80019fc:	4630      	mov	r0, r6
 80019fe:	f7ff ffb7 	bl	8001970 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a02:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a06:	f7ff ff27 	bl	8001858 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001a0a:	6923      	ldr	r3, [r4, #16]
 8001a0c:	f023 0302 	bic.w	r3, r3, #2
 8001a10:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8001a12:	b110      	cbz	r0, 8001a1a <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8001a14:	f8c8 6000 	str.w	r6, [r8]
            break;
 8001a18:	e7cf      	b.n	80019ba <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8001a1a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a1e:	e7e7      	b.n	80019f0 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8001a20:	2002      	movs	r0, #2
 8001a22:	e7cc      	b.n	80019be <HAL_FLASHEx_Erase+0x2a>
 8001a24:	20000970 	.word	0x20000970
 8001a28:	40022000 	.word	0x40022000

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a30:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001a32:	4626      	mov	r6, r4
 8001a34:	4b65      	ldr	r3, [pc, #404]	; (8001bcc <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a36:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001bdc <HAL_GPIO_Init+0x1b0>
 8001a3a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001be0 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3e:	680a      	ldr	r2, [r1, #0]
 8001a40:	fa32 f506 	lsrs.w	r5, r2, r6
 8001a44:	d102      	bne.n	8001a4c <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001a46:	b003      	add	sp, #12
 8001a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001a4c:	f04f 0801 	mov.w	r8, #1
 8001a50:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a54:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001a58:	4590      	cmp	r8, r2
 8001a5a:	d17e      	bne.n	8001b5a <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8001a5c:	684d      	ldr	r5, [r1, #4]
 8001a5e:	2d12      	cmp	r5, #18
 8001a60:	f000 80a9 	beq.w	8001bb6 <HAL_GPIO_Init+0x18a>
 8001a64:	f200 8082 	bhi.w	8001b6c <HAL_GPIO_Init+0x140>
 8001a68:	2d02      	cmp	r5, #2
 8001a6a:	f000 80a1 	beq.w	8001bb0 <HAL_GPIO_Init+0x184>
 8001a6e:	d876      	bhi.n	8001b5e <HAL_GPIO_Init+0x132>
 8001a70:	2d00      	cmp	r5, #0
 8001a72:	f000 8088 	beq.w	8001b86 <HAL_GPIO_Init+0x15a>
 8001a76:	2d01      	cmp	r5, #1
 8001a78:	f000 8098 	beq.w	8001bac <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a7c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a80:	2aff      	cmp	r2, #255	; 0xff
 8001a82:	bf93      	iteet	ls
 8001a84:	4682      	movls	sl, r0
 8001a86:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001a8a:	3d08      	subhi	r5, #8
 8001a8c:	f8d0 b000 	ldrls.w	fp, [r0]
 8001a90:	bf92      	itee	ls
 8001a92:	00b5      	lslls	r5, r6, #2
 8001a94:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001a98:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a9a:	fa09 f805 	lsl.w	r8, r9, r5
 8001a9e:	ea2b 0808 	bic.w	r8, fp, r8
 8001aa2:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa6:	bf88      	it	hi
 8001aa8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001aac:	ea48 0505 	orr.w	r5, r8, r5
 8001ab0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001ab8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001abc:	d04d      	beq.n	8001b5a <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001abe:	4f44      	ldr	r7, [pc, #272]	; (8001bd0 <HAL_GPIO_Init+0x1a4>)
 8001ac0:	f026 0803 	bic.w	r8, r6, #3
 8001ac4:	69bd      	ldr	r5, [r7, #24]
 8001ac6:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001aca:	f045 0501 	orr.w	r5, r5, #1
 8001ace:	61bd      	str	r5, [r7, #24]
 8001ad0:	69bd      	ldr	r5, [r7, #24]
 8001ad2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8001ad6:	f005 0501 	and.w	r5, r5, #1
 8001ada:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001adc:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae0:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ae2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001ae6:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aea:	fa09 f90b 	lsl.w	r9, r9, fp
 8001aee:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001af2:	4d38      	ldr	r5, [pc, #224]	; (8001bd4 <HAL_GPIO_Init+0x1a8>)
 8001af4:	42a8      	cmp	r0, r5
 8001af6:	d063      	beq.n	8001bc0 <HAL_GPIO_Init+0x194>
 8001af8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	d061      	beq.n	8001bc4 <HAL_GPIO_Init+0x198>
 8001b00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b04:	42a8      	cmp	r0, r5
 8001b06:	d05f      	beq.n	8001bc8 <HAL_GPIO_Init+0x19c>
 8001b08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b0c:	42a8      	cmp	r0, r5
 8001b0e:	bf0c      	ite	eq
 8001b10:	2503      	moveq	r5, #3
 8001b12:	2504      	movne	r5, #4
 8001b14:	fa05 f50b 	lsl.w	r5, r5, fp
 8001b18:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001b1c:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001b20:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b22:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001b26:	bf14      	ite	ne
 8001b28:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b2a:	4395      	biceq	r5, r2
 8001b2c:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001b2e:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b30:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001b34:	bf14      	ite	ne
 8001b36:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b38:	4395      	biceq	r5, r2
 8001b3a:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b3c:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b3e:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b42:	bf14      	ite	ne
 8001b44:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b46:	4395      	biceq	r5, r2
 8001b48:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b4a:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b4c:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b50:	bf14      	ite	ne
 8001b52:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b54:	ea25 0202 	biceq.w	r2, r5, r2
 8001b58:	60da      	str	r2, [r3, #12]
	position++;
 8001b5a:	3601      	adds	r6, #1
 8001b5c:	e76f      	b.n	8001a3e <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8001b5e:	2d03      	cmp	r5, #3
 8001b60:	d022      	beq.n	8001ba8 <HAL_GPIO_Init+0x17c>
 8001b62:	2d11      	cmp	r5, #17
 8001b64:	d18a      	bne.n	8001a7c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b66:	68cc      	ldr	r4, [r1, #12]
 8001b68:	3404      	adds	r4, #4
          break;
 8001b6a:	e787      	b.n	8001a7c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001b6c:	4f1a      	ldr	r7, [pc, #104]	; (8001bd8 <HAL_GPIO_Init+0x1ac>)
 8001b6e:	42bd      	cmp	r5, r7
 8001b70:	d009      	beq.n	8001b86 <HAL_GPIO_Init+0x15a>
 8001b72:	d812      	bhi.n	8001b9a <HAL_GPIO_Init+0x16e>
 8001b74:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001be4 <HAL_GPIO_Init+0x1b8>
 8001b78:	454d      	cmp	r5, r9
 8001b7a:	d004      	beq.n	8001b86 <HAL_GPIO_Init+0x15a>
 8001b7c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001b80:	454d      	cmp	r5, r9
 8001b82:	f47f af7b 	bne.w	8001a7c <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b86:	688c      	ldr	r4, [r1, #8]
 8001b88:	b1c4      	cbz	r4, 8001bbc <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b8a:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001b8c:	bf0c      	ite	eq
 8001b8e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001b92:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b96:	2408      	movs	r4, #8
 8001b98:	e770      	b.n	8001a7c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001b9a:	4565      	cmp	r5, ip
 8001b9c:	d0f3      	beq.n	8001b86 <HAL_GPIO_Init+0x15a>
 8001b9e:	4575      	cmp	r5, lr
 8001ba0:	d0f1      	beq.n	8001b86 <HAL_GPIO_Init+0x15a>
 8001ba2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001be8 <HAL_GPIO_Init+0x1bc>
 8001ba6:	e7eb      	b.n	8001b80 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba8:	2400      	movs	r4, #0
 8001baa:	e767      	b.n	8001a7c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bac:	68cc      	ldr	r4, [r1, #12]
          break;
 8001bae:	e765      	b.n	8001a7c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bb0:	68cc      	ldr	r4, [r1, #12]
 8001bb2:	3408      	adds	r4, #8
          break;
 8001bb4:	e762      	b.n	8001a7c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bb6:	68cc      	ldr	r4, [r1, #12]
 8001bb8:	340c      	adds	r4, #12
          break;
 8001bba:	e75f      	b.n	8001a7c <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bbc:	2404      	movs	r4, #4
 8001bbe:	e75d      	b.n	8001a7c <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bc0:	2500      	movs	r5, #0
 8001bc2:	e7a7      	b.n	8001b14 <HAL_GPIO_Init+0xe8>
 8001bc4:	2501      	movs	r5, #1
 8001bc6:	e7a5      	b.n	8001b14 <HAL_GPIO_Init+0xe8>
 8001bc8:	2502      	movs	r5, #2
 8001bca:	e7a3      	b.n	8001b14 <HAL_GPIO_Init+0xe8>
 8001bcc:	40010400 	.word	0x40010400
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010800 	.word	0x40010800
 8001bd8:	10210000 	.word	0x10210000
 8001bdc:	10310000 	.word	0x10310000
 8001be0:	10320000 	.word	0x10320000
 8001be4:	10110000 	.word	0x10110000
 8001be8:	10220000 	.word	0x10220000

08001bec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bec:	6883      	ldr	r3, [r0, #8]
 8001bee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001bf0:	bf14      	ite	ne
 8001bf2:	2001      	movne	r0, #1
 8001bf4:	2000      	moveq	r0, #0
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf8:	b10a      	cbz	r2, 8001bfe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bfa:	6101      	str	r1, [r0, #16]
  }
}
 8001bfc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bfe:	0409      	lsls	r1, r1, #16
 8001c00:	e7fb      	b.n	8001bfa <HAL_GPIO_WritePin+0x2>

08001c02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c02:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c04:	4604      	mov	r4, r0
{
 8001c06:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001c08:	b310      	cbz	r0, 8001c50 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c0a:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8001c0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c12:	b91b      	cbnz	r3, 8001c1c <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c14:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c18:	f005 f962 	bl	8006ee0 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c1c:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c1e:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c20:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8001c22:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c26:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8001c2a:	f001 fd40 	bl	80036ae <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c30:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c32:	682b      	ldr	r3, [r5, #0]
 8001c34:	4625      	mov	r5, r4
 8001c36:	6033      	str	r3, [r6, #0]
 8001c38:	1d27      	adds	r7, r4, #4
 8001c3a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001c3e:	f855 0b10 	ldr.w	r0, [r5], #16
 8001c42:	f001 fd25 	bl	8003690 <USB_CoreInit>
 8001c46:	4606      	mov	r6, r0
 8001c48:	b120      	cbz	r0, 8001c54 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 8001c50:	2501      	movs	r5, #1
 8001c52:	e048      	b.n	8001ce6 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c54:	4601      	mov	r1, r0
 8001c56:	6820      	ldr	r0, [r4, #0]
 8001c58:	f001 fd33 	bl	80036c2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5c:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c5e:	f04f 0c01 	mov.w	ip, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c62:	6861      	ldr	r1, [r4, #4]
 8001c64:	b2c3      	uxtb	r3, r0
 8001c66:	4299      	cmp	r1, r3
 8001c68:	f100 0001 	add.w	r0, r0, #1
 8001c6c:	d817      	bhi.n	8001c9e <HAL_PCD_Init+0x9c>
 8001c6e:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c70:	4610      	mov	r0, r2
 8001c72:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c74:	4299      	cmp	r1, r3
 8001c76:	f102 0201 	add.w	r2, r2, #1
 8001c7a:	d81d      	bhi.n	8001cb8 <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7e:	466e      	mov	r6, sp
 8001c80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c82:	682b      	ldr	r3, [r5, #0]
 8001c84:	6033      	str	r3, [r6, #0]
 8001c86:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001c8a:	6820      	ldr	r0, [r4, #0]
 8001c8c:	f001 fd1b 	bl	80036c6 <USB_DevInit>
 8001c90:	2301      	movs	r3, #1
 8001c92:	4605      	mov	r5, r0
 8001c94:	b300      	cbz	r0, 8001cd8 <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c96:	2202      	movs	r2, #2
 8001c98:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 8001c9c:	e7d8      	b.n	8001c50 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8001c9e:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8001ca2:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001ca6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001caa:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cac:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cb0:	e9c2 660e 	strd	r6, r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cb4:	6416      	str	r6, [r2, #64]	; 0x40
 8001cb6:	e7d5      	b.n	8001c64 <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 8001cb8:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8001cbc:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cc0:	330a      	adds	r3, #10
 8001cc2:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8001cc4:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cc8:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ccc:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cd0:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cd4:	50e0      	str	r0, [r4, r3]
 8001cd6:	e7cc      	b.n	8001c72 <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001cd8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cdc:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ce0:	6820      	ldr	r0, [r4, #0]
 8001ce2:	f001 ff92 	bl	8003c0a <USB_DevDisconnect>

  return HAL_OK;
}
 8001ce6:	4628      	mov	r0, r5
 8001ce8:	b007      	add	sp, #28
 8001cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cec <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001cec:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 8001cf0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001cf2:	2b01      	cmp	r3, #1
{
 8001cf4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001cf6:	d00e      	beq.n	8001d16 <HAL_PCD_Start+0x2a>
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001cfe:	f005 fa1c 	bl	800713a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001d02:	6820      	ldr	r0, [r4, #0]
 8001d04:	f001 ff7f 	bl	8003c06 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001d08:	6820      	ldr	r0, [r4, #0]
 8001d0a:	f001 fcc8 	bl	800369e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8001d14:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001d16:	2002      	movs	r0, #2
 8001d18:	e7fc      	b.n	8001d14 <HAL_PCD_Start+0x28>

08001d1a <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001d1a:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 8001d1e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001d20:	2a01      	cmp	r2, #1
{
 8001d22:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001d24:	d00b      	beq.n	8001d3e <HAL_PCD_SetAddress+0x24>
 8001d26:	2201      	movs	r2, #1
 8001d28:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8001d2c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d30:	6800      	ldr	r0, [r0, #0]
 8001d32:	f001 ff62 	bl	8003bfa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8001d3c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001d3e:	2002      	movs	r0, #2
 8001d40:	e7fc      	b.n	8001d3c <HAL_PCD_SetAddress+0x22>

08001d42 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001d42:	b570      	push	{r4, r5, r6, lr}
 8001d44:	4604      	mov	r4, r0
 8001d46:	f001 0507 	and.w	r5, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d4a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001d4e:	ea4f 1045 	mov.w	r0, r5, lsl #5
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d52:	bf14      	ite	ne
 8001d54:	f100 0128 	addne.w	r1, r0, #40	; 0x28
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d58:	f500 7194 	addeq.w	r1, r0, #296	; 0x128
 8001d5c:	eb04 0600 	add.w	r6, r4, r0
    ep->is_in = 1U;
 8001d60:	bf17      	itett	ne
 8001d62:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8001d64:	2000      	moveq	r0, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d66:	1909      	addne	r1, r1, r4
    ep->is_in = 1U;
 8001d68:	f886 0029 	strbne.w	r0, [r6, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d6c:	bf04      	itt	eq
 8001d6e:	1909      	addeq	r1, r1, r4
    ep->is_in = 0U;
 8001d70:	f886 0129 	strbeq.w	r0, [r6, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8001d74:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8001d76:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d78:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 8001d7a:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001d7c:	b102      	cbz	r2, 8001d80 <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d7e:	81cd      	strh	r5, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d80:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8001d82:	bf04      	itt	eq
 8001d84:	2300      	moveq	r3, #0
 8001d86:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8001d88:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d009      	beq.n	8001da4 <HAL_PCD_EP_Open+0x62>
 8001d90:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d92:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001d94:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d98:	f001 fcb0 	bl	80036fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
}
 8001da2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8001da4:	2002      	movs	r0, #2
 8001da6:	e7fc      	b.n	8001da2 <HAL_PCD_EP_Open+0x60>

08001da8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001da8:	f001 0207 	and.w	r2, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dac:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001db0:	ea4f 1342 	mov.w	r3, r2, lsl #5
{
 8001db4:	b510      	push	{r4, lr}
 8001db6:	4604      	mov	r4, r0
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db8:	bf18      	it	ne
 8001dba:	f103 0128 	addne.w	r1, r3, #40	; 0x28
 8001dbe:	4418      	add	r0, r3
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc0:	bf0b      	itete	eq
 8001dc2:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
    ep->is_in = 1U;
 8001dc6:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8001dc8:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dca:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dcc:	bf0a      	itet	eq
 8001dce:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8001dd0:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 8001dd4:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001dd8:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 8001dda:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d009      	beq.n	8001df6 <HAL_PCD_EP_Close+0x4e>
 8001de2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001de4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001de6:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dea:	f001 fde1 	bl	80039b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8001df4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001df6:	2002      	movs	r0, #2
 8001df8:	e7fc      	b.n	8001df4 <HAL_PCD_EP_Close+0x4c>

08001dfa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dfa:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8001dfc:	2600      	movs	r6, #0
 8001dfe:	f001 0107 	and.w	r1, r1, #7
 8001e02:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 8001e04:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e06:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e0a:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e0e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8001e10:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 8001e14:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 8001e18:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 8001e1c:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e20:	6800      	ldr	r0, [r0, #0]
 8001e22:	f001 ff09 	bl	8003c38 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001e26:	4630      	mov	r0, r6
 8001e28:	bd70      	pop	{r4, r5, r6, pc}

08001e2a <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e2a:	f001 0107 	and.w	r1, r1, #7
 8001e2e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8001e32:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8001e36:	4770      	bx	lr

08001e38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e38:	f001 0107 	and.w	r1, r1, #7
 8001e3c:	b570      	push	{r4, r5, r6, lr}
 8001e3e:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e40:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8001e42:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8001e46:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8001e48:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4a:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e4e:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e52:	4401      	add	r1, r0
  ep->xfer_count = 0U;
 8001e54:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8001e56:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e5a:	6800      	ldr	r0, [r0, #0]
 8001e5c:	f001 feec 	bl	8003c38 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001e60:	4630      	mov	r0, r6
 8001e62:	bd70      	pop	{r4, r5, r6, pc}

08001e64 <HAL_PCD_IRQHandler>:
{
 8001e64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e68:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e6a:	6800      	ldr	r0, [r0, #0]
 8001e6c:	f001 fecf 	bl	8003c0e <USB_ReadInterrupts>
 8001e70:	0402      	lsls	r2, r0, #16
 8001e72:	d50b      	bpl.n	8001e8c <HAL_PCD_IRQHandler+0x28>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e74:	f8df 940c 	ldr.w	r9, [pc, #1036]	; 8002284 <HAL_PCD_IRQHandler+0x420>
 8001e78:	f8df a40c 	ldr.w	sl, [pc, #1036]	; 8002288 <HAL_PCD_IRQHandler+0x424>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e7c:	f8df b40c 	ldr.w	fp, [pc, #1036]	; 800228c <HAL_PCD_IRQHandler+0x428>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e80:	6820      	ldr	r0, [r4, #0]
 8001e82:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001e86:	041b      	lsls	r3, r3, #16
 8001e88:	f100 809e 	bmi.w	8001fc8 <HAL_PCD_IRQHandler+0x164>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001e8c:	6820      	ldr	r0, [r4, #0]
 8001e8e:	f001 febe 	bl	8003c0e <USB_ReadInterrupts>
 8001e92:	0543      	lsls	r3, r0, #21
 8001e94:	d50f      	bpl.n	8001eb6 <HAL_PCD_IRQHandler+0x52>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e96:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001e98:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e9a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ea2:	041b      	lsls	r3, r3, #16
 8001ea4:	0c1b      	lsrs	r3, r3, #16
 8001ea6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001eaa:	f005 f852 	bl	8006f52 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f7ff ff32 	bl	8001d1a <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001eb6:	6820      	ldr	r0, [r4, #0]
 8001eb8:	f001 fea9 	bl	8003c0e <USB_ReadInterrupts>
 8001ebc:	0447      	lsls	r7, r0, #17
 8001ebe:	d508      	bpl.n	8001ed2 <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ec0:	6822      	ldr	r2, [r4, #0]
 8001ec2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eca:	041b      	lsls	r3, r3, #16
 8001ecc:	0c1b      	lsrs	r3, r3, #16
 8001ece:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ed2:	6820      	ldr	r0, [r4, #0]
 8001ed4:	f001 fe9b 	bl	8003c0e <USB_ReadInterrupts>
 8001ed8:	0486      	lsls	r6, r0, #18
 8001eda:	d508      	bpl.n	8001eee <HAL_PCD_IRQHandler+0x8a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001edc:	6822      	ldr	r2, [r4, #0]
 8001ede:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001ee2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ee6:	041b      	lsls	r3, r3, #16
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001eee:	6820      	ldr	r0, [r4, #0]
 8001ef0:	f001 fe8d 	bl	8003c0e <USB_ReadInterrupts>
 8001ef4:	04c5      	lsls	r5, r0, #19
 8001ef6:	d51c      	bpl.n	8001f32 <HAL_PCD_IRQHandler+0xce>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ef8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8001efa:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001efc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	041b      	lsls	r3, r3, #16
 8001f06:	0c1b      	lsrs	r3, r3, #16
 8001f08:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f0c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001f10:	f023 0308 	bic.w	r3, r3, #8
 8001f14:	041b      	lsls	r3, r3, #16
 8001f16:	0c1b      	lsrs	r3, r3, #16
 8001f18:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001f1c:	f005 f83c 	bl	8006f98 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f20:	6822      	ldr	r2, [r4, #0]
 8001f22:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	0c1b      	lsrs	r3, r3, #16
 8001f2e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001f32:	6820      	ldr	r0, [r4, #0]
 8001f34:	f001 fe6b 	bl	8003c0e <USB_ReadInterrupts>
 8001f38:	0500      	lsls	r0, r0, #20
 8001f3a:	d524      	bpl.n	8001f86 <HAL_PCD_IRQHandler+0x122>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001f3c:	6820      	ldr	r0, [r4, #0]
 8001f3e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001f42:	f043 0308 	orr.w	r3, r3, #8
 8001f46:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f4a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001f4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f52:	041b      	lsls	r3, r3, #16
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001f5a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001f5e:	f043 0304 	orr.w	r3, r3, #4
 8001f62:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f66:	f001 fe52 	bl	8003c0e <USB_ReadInterrupts>
 8001f6a:	04c1      	lsls	r1, r0, #19
 8001f6c:	d508      	bpl.n	8001f80 <HAL_PCD_IRQHandler+0x11c>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f6e:	6822      	ldr	r2, [r4, #0]
 8001f70:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001f74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f78:	041b      	lsls	r3, r3, #16
 8001f7a:	0c1b      	lsrs	r3, r3, #16
 8001f7c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8001f80:	4620      	mov	r0, r4
 8001f82:	f004 fff9 	bl	8006f78 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f86:	6820      	ldr	r0, [r4, #0]
 8001f88:	f001 fe41 	bl	8003c0e <USB_ReadInterrupts>
 8001f8c:	0582      	lsls	r2, r0, #22
 8001f8e:	d50b      	bpl.n	8001fa8 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f90:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001f92:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f94:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f9c:	041b      	lsls	r3, r3, #16
 8001f9e:	0c1b      	lsrs	r3, r3, #16
 8001fa0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001fa4:	f004 ffd1 	bl	8006f4a <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001fa8:	6820      	ldr	r0, [r4, #0]
 8001faa:	f001 fe30 	bl	8003c0e <USB_ReadInterrupts>
 8001fae:	05c3      	lsls	r3, r0, #23
 8001fb0:	d508      	bpl.n	8001fc4 <HAL_PCD_IRQHandler+0x160>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fb2:	6822      	ldr	r2, [r4, #0]
 8001fb4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fbc:	041b      	lsls	r3, r3, #16
 8001fbe:	0c1b      	lsrs	r3, r3, #16
 8001fc0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001fc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8001fc8:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8001fcc:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8001fce:	f011 060f 	ands.w	r6, r1, #15
 8001fd2:	f040 80b1 	bne.w	8002138 <HAL_PCD_IRQHandler+0x2d4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001fd6:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fda:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001fdc:	d12a      	bne.n	8002034 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fde:	ea09 0303 	and.w	r3, r9, r3
 8001fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fe6:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fe8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001fec:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001ff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001ff4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001ff8:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001ffc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002002:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002004:	4413      	add	r3, r2
 8002006:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002008:	4620      	mov	r0, r4
 800200a:	f004 ff97 	bl	8006f3c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800200e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002012:	2b00      	cmp	r3, #0
 8002014:	f43f af34 	beq.w	8001e80 <HAL_PCD_IRQHandler+0x1c>
 8002018:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800201a:	2a00      	cmp	r2, #0
 800201c:	f47f af30 	bne.w	8001e80 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002020:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002024:	6821      	ldr	r1, [r4, #0]
 8002026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800202e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8002032:	e725      	b.n	8001e80 <HAL_PCD_IRQHandler+0x1c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002034:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002036:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 800203a:	d020      	beq.n	800207e <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800203c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002040:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002044:	f504 710c 	add.w	r1, r4, #560	; 0x230
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800204c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002050:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002054:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8002058:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800205c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002060:	f001 febe 	bl	8003de0 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002064:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002066:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002068:	8813      	ldrh	r3, [r2, #0]
 800206a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800206e:	051b      	lsls	r3, r3, #20
 8002070:	0d1b      	lsrs	r3, r3, #20
 8002072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002076:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002078:	f004 ff52 	bl	8006f20 <HAL_PCD_SetupStageCallback>
 800207c:	e700      	b.n	8001e80 <HAL_PCD_IRQHandler+0x1c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800207e:	041f      	lsls	r7, r3, #16
 8002080:	f57f aefe 	bpl.w	8001e80 <HAL_PCD_IRQHandler+0x1c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002084:	8803      	ldrh	r3, [r0, #0]
 8002086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208a:	051b      	lsls	r3, r3, #20
 800208c:	0d1b      	lsrs	r3, r3, #20
 800208e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002092:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002094:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002098:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 800209c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80020a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80020a4:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80020a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ac:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80020b0:	b18b      	cbz	r3, 80020d6 <HAL_PCD_IRQHandler+0x272>
 80020b2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 80020b6:	b171      	cbz	r1, 80020d6 <HAL_PCD_IRQHandler+0x272>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020b8:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80020bc:	f001 fe90 	bl	8003de0 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80020c0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 80020c4:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020c8:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 80020ca:	4413      	add	r3, r2
 80020cc:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020d0:	4620      	mov	r0, r4
 80020d2:	f004 ff2b 	bl	8006f2c <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020d6:	6821      	ldr	r1, [r4, #0]
 80020d8:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 80020dc:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80020e0:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	b9bd      	cbnz	r5, 8002118 <HAL_PCD_IRQHandler+0x2b4>
 80020e8:	5ac2      	ldrh	r2, [r0, r3]
 80020ea:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80020ee:	0412      	lsls	r2, r2, #16
 80020f0:	0c12      	lsrs	r2, r2, #16
 80020f2:	52c2      	strh	r2, [r0, r3]
 80020f4:	5ac2      	ldrh	r2, [r0, r3]
 80020f6:	ea4a 0202 	orr.w	r2, sl, r2
 80020fa:	b292      	uxth	r2, r2
 80020fc:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80020fe:	880b      	ldrh	r3, [r1, #0]
 8002100:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002108:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800210c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002114:	800b      	strh	r3, [r1, #0]
 8002116:	e6b3      	b.n	8001e80 <HAL_PCD_IRQHandler+0x1c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002118:	2d3e      	cmp	r5, #62	; 0x3e
 800211a:	d805      	bhi.n	8002128 <HAL_PCD_IRQHandler+0x2c4>
 800211c:	086a      	lsrs	r2, r5, #1
 800211e:	07ee      	lsls	r6, r5, #31
 8002120:	bf48      	it	mi
 8002122:	3201      	addmi	r2, #1
 8002124:	0292      	lsls	r2, r2, #10
 8002126:	e7e8      	b.n	80020fa <HAL_PCD_IRQHandler+0x296>
 8002128:	096a      	lsrs	r2, r5, #5
 800212a:	06ed      	lsls	r5, r5, #27
 800212c:	bf08      	it	eq
 800212e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002132:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 8002136:	e7e0      	b.n	80020fa <HAL_PCD_IRQHandler+0x296>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002138:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 800213c:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002140:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8002144:	d03c      	beq.n	80021c0 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002146:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800214a:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800214c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002150:	051b      	lsls	r3, r3, #20
 8002152:	0d1b      	lsrs	r3, r3, #20
 8002154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002158:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800215c:	19e1      	adds	r1, r4, r7
 800215e:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 8002162:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8002166:	2b00      	cmp	r3, #0
 8002168:	d150      	bne.n	800220c <HAL_PCD_IRQHandler+0x3a8>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800216a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800216e:	f891 5128 	ldrb.w	r5, [r1, #296]	; 0x128
 8002172:	3306      	adds	r3, #6
 8002174:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002178:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 800217c:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8002180:	b135      	cbz	r5, 8002190 <HAL_PCD_IRQHandler+0x32c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002182:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8002186:	462b      	mov	r3, r5
 8002188:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 800218c:	f001 fe28 	bl	8003de0 <USB_ReadPMA>
 8002190:	19e1      	adds	r1, r4, r7
        ep->xfer_count += count;
 8002192:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 8002196:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 800219a:	442b      	add	r3, r5
 800219c:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021a0:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 80021a4:	442a      	add	r2, r5
 80021a6:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021aa:	b11b      	cbz	r3, 80021b4 <HAL_PCD_IRQHandler+0x350>
 80021ac:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 80021b0:	4285      	cmp	r5, r0
 80021b2:	d25d      	bcs.n	8002270 <HAL_PCD_IRQHandler+0x40c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021b4:	4427      	add	r7, r4
 80021b6:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 80021ba:	4620      	mov	r0, r4
 80021bc:	f004 feb6 	bl	8006f2c <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021c0:	f018 0f80 	tst.w	r8, #128	; 0x80
 80021c4:	f43f ae5c 	beq.w	8001e80 <HAL_PCD_IRQHandler+0x1c>
 80021c8:	6823      	ldr	r3, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021ca:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021cc:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80021d0:	ea09 0202 	and.w	r2, r9, r2
 80021d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021d8:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021dc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80021e0:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 80021e4:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 80021e8:	3202      	adds	r2, #2
 80021ea:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80021ee:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80021f2:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 80021f6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80021fc:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80021fe:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8002200:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8002202:	63f2      	str	r2, [r6, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 8002204:	bbd3      	cbnz	r3, 800227c <HAL_PCD_IRQHandler+0x418>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002206:	f004 fe99 	bl	8006f3c <HAL_PCD_DataInStageCallback>
 800220a:	e639      	b.n	8001e80 <HAL_PCD_IRQHandler+0x1c>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800220c:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 8002210:	f830 5023 	ldrh.w	r5, [r0, r3, lsl #2]
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	f415 4f80 	tst.w	r5, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800221a:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800221e:	442b      	add	r3, r5
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002220:	d01b      	beq.n	800225a <HAL_PCD_IRQHandler+0x3f6>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002222:	3302      	adds	r3, #2
 8002224:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8002228:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 800222c:	b135      	cbz	r5, 800223c <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800222e:	462b      	mov	r3, r5
 8002230:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002234:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8002238:	f001 fdd2 	bl	8003de0 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800223c:	19e3      	adds	r3, r4, r7
 800223e:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8002242:	6822      	ldr	r2, [r4, #0]
 8002244:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002248:	ea0b 0303 	and.w	r3, fp, r3
 800224c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002250:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002254:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002258:	e79a      	b.n	8002190 <HAL_PCD_IRQHandler+0x32c>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800225a:	3306      	adds	r3, #6
 800225c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8002260:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8002264:	2d00      	cmp	r5, #0
 8002266:	d0e9      	beq.n	800223c <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002268:	462b      	mov	r3, r5
 800226a:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 800226e:	e7e1      	b.n	8002234 <HAL_PCD_IRQHandler+0x3d0>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002270:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8002274:	4620      	mov	r0, r4
 8002276:	f7ff fdc0 	bl	8001dfa <HAL_PCD_EP_Receive>
 800227a:	e7a1      	b.n	80021c0 <HAL_PCD_IRQHandler+0x35c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800227c:	f7ff fddc 	bl	8001e38 <HAL_PCD_EP_Transmit>
 8002280:	e5fe      	b.n	8001e80 <HAL_PCD_IRQHandler+0x1c>
 8002282:	bf00      	nop
 8002284:	ffff8f0f 	.word	0xffff8f0f
 8002288:	ffff8000 	.word	0xffff8000
 800228c:	ffff8f8f 	.word	0xffff8f8f

08002290 <HAL_PCD_EP_SetStall>:
{
 8002290:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002292:	6843      	ldr	r3, [r0, #4]
 8002294:	f001 0507 	and.w	r5, r1, #7
 8002298:	429d      	cmp	r5, r3
{
 800229a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800229c:	d828      	bhi.n	80022f0 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 800229e:	060b      	lsls	r3, r1, #24
 80022a0:	d51d      	bpl.n	80022de <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 80022a2:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022a4:	016b      	lsls	r3, r5, #5
 80022a6:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 80022aa:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ac:	4401      	add	r1, r0
    ep->is_in = 1U;
 80022ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 80022b2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80022b4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80022b6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80022b8:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80022bc:	429a      	cmp	r2, r3
 80022be:	d019      	beq.n	80022f4 <HAL_PCD_EP_SetStall+0x64>
 80022c0:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022c4:	6820      	ldr	r0, [r4, #0]
 80022c6:	f001 fc39 	bl	8003b3c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ca:	b925      	cbnz	r5, 80022d6 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80022cc:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80022d0:	6820      	ldr	r0, [r4, #0]
 80022d2:	f001 fc9f 	bl	8003c14 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 80022dc:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80022de:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80022e0:	014b      	lsls	r3, r1, #5
 80022e2:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 80022e6:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80022e8:	4401      	add	r1, r0
    ep->is_in = 0U;
 80022ea:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 80022ee:	e7e0      	b.n	80022b2 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80022f0:	2001      	movs	r0, #1
 80022f2:	e7f3      	b.n	80022dc <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 80022f4:	2002      	movs	r0, #2
 80022f6:	e7f1      	b.n	80022dc <HAL_PCD_EP_SetStall+0x4c>

080022f8 <HAL_PCD_EP_ClrStall>:
{
 80022f8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022fa:	6843      	ldr	r3, [r0, #4]
 80022fc:	f001 020f 	and.w	r2, r1, #15
 8002300:	429a      	cmp	r2, r3
{
 8002302:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002304:	d827      	bhi.n	8002356 <HAL_PCD_EP_ClrStall+0x5e>
 8002306:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 800230a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800230e:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002312:	bf14      	ite	ne
 8002314:	f103 0128 	addne.w	r1, r3, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002318:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
 800231c:	4418      	add	r0, r3
  ep->is_stall = 0U;
 800231e:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8002322:	bf15      	itete	ne
 8002324:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8002326:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002328:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800232a:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 800232c:	bf14      	ite	ne
 800232e:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 8002332:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  ep->is_stall = 0U;
 8002336:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002338:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800233a:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 800233e:	2b01      	cmp	r3, #1
 8002340:	d00b      	beq.n	800235a <HAL_PCD_EP_ClrStall+0x62>
 8002342:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002344:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002346:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800234a:	f001 fc13 	bl	8003b74 <USB_EPClearStall>
  return HAL_OK;
 800234e:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8002350:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
}
 8002354:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002356:	2001      	movs	r0, #1
 8002358:	e7fc      	b.n	8002354 <HAL_PCD_EP_ClrStall+0x5c>
  __HAL_LOCK(hpcd);
 800235a:	2002      	movs	r0, #2
 800235c:	e7fa      	b.n	8002354 <HAL_PCD_EP_ClrStall+0x5c>

0800235e <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800235e:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002362:	bf1b      	ittet	ne
 8002364:	f001 0107 	andne.w	r1, r1, #7
 8002368:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800236c:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002370:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8002372:	bf08      	it	eq
 8002374:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
 8002378:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800237a:	b91a      	cbnz	r2, 8002384 <HAL_PCDEx_PMAConfig+0x26>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800237c:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800237e:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8002380:	2000      	movs	r0, #0
 8002382:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8002384:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002386:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8002388:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800238a:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800238c:	8143      	strh	r3, [r0, #10]
 800238e:	e7f7      	b.n	8002380 <HAL_PCDEx_PMAConfig+0x22>

08002390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002390:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002394:	4605      	mov	r5, r0
 8002396:	b908      	cbnz	r0, 800239c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8002398:	2001      	movs	r0, #1
 800239a:	e03c      	b.n	8002416 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239c:	6803      	ldr	r3, [r0, #0]
 800239e:	07db      	lsls	r3, r3, #31
 80023a0:	d410      	bmi.n	80023c4 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	682b      	ldr	r3, [r5, #0]
 80023a4:	079f      	lsls	r7, r3, #30
 80023a6:	d45d      	bmi.n	8002464 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a8:	682b      	ldr	r3, [r5, #0]
 80023aa:	0719      	lsls	r1, r3, #28
 80023ac:	f100 8094 	bmi.w	80024d8 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b0:	682b      	ldr	r3, [r5, #0]
 80023b2:	075a      	lsls	r2, r3, #29
 80023b4:	f100 80be 	bmi.w	8002534 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b8:	69e8      	ldr	r0, [r5, #28]
 80023ba:	2800      	cmp	r0, #0
 80023bc:	f040 812c 	bne.w	8002618 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80023c0:	2000      	movs	r0, #0
 80023c2:	e028      	b.n	8002416 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023c4:	4c8f      	ldr	r4, [pc, #572]	; (8002604 <HAL_RCC_OscConfig+0x274>)
 80023c6:	6863      	ldr	r3, [r4, #4]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d007      	beq.n	80023e0 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023d0:	6863      	ldr	r3, [r4, #4]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d109      	bne.n	80023ee <HAL_RCC_OscConfig+0x5e>
 80023da:	6863      	ldr	r3, [r4, #4]
 80023dc:	03de      	lsls	r6, r3, #15
 80023de:	d506      	bpl.n	80023ee <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	039c      	lsls	r4, r3, #14
 80023e4:	d5dd      	bpl.n	80023a2 <HAL_RCC_OscConfig+0x12>
 80023e6:	686b      	ldr	r3, [r5, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1da      	bne.n	80023a2 <HAL_RCC_OscConfig+0x12>
 80023ec:	e7d4      	b.n	8002398 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ee:	686b      	ldr	r3, [r5, #4]
 80023f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f4:	d112      	bne.n	800241c <HAL_RCC_OscConfig+0x8c>
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023fe:	f7fe fdf3 	bl	8000fe8 <HAL_GetTick>
 8002402:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	0398      	lsls	r0, r3, #14
 8002408:	d4cb      	bmi.n	80023a2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240a:	f7fe fded 	bl	8000fe8 <HAL_GetTick>
 800240e:	1b80      	subs	r0, r0, r6
 8002410:	2864      	cmp	r0, #100	; 0x64
 8002412:	d9f7      	bls.n	8002404 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002414:	2003      	movs	r0, #3
}
 8002416:	b002      	add	sp, #8
 8002418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241c:	b99b      	cbnz	r3, 8002446 <HAL_RCC_OscConfig+0xb6>
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002424:	6023      	str	r3, [r4, #0]
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800242e:	f7fe fddb 	bl	8000fe8 <HAL_GetTick>
 8002432:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	0399      	lsls	r1, r3, #14
 8002438:	d5b3      	bpl.n	80023a2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800243a:	f7fe fdd5 	bl	8000fe8 <HAL_GetTick>
 800243e:	1b80      	subs	r0, r0, r6
 8002440:	2864      	cmp	r0, #100	; 0x64
 8002442:	d9f7      	bls.n	8002434 <HAL_RCC_OscConfig+0xa4>
 8002444:	e7e6      	b.n	8002414 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002446:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244a:	6823      	ldr	r3, [r4, #0]
 800244c:	d103      	bne.n	8002456 <HAL_RCC_OscConfig+0xc6>
 800244e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002452:	6023      	str	r3, [r4, #0]
 8002454:	e7cf      	b.n	80023f6 <HAL_RCC_OscConfig+0x66>
 8002456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245a:	6023      	str	r3, [r4, #0]
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002462:	e7cb      	b.n	80023fc <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002464:	4c67      	ldr	r4, [pc, #412]	; (8002604 <HAL_RCC_OscConfig+0x274>)
 8002466:	6863      	ldr	r3, [r4, #4]
 8002468:	f013 0f0c 	tst.w	r3, #12
 800246c:	d007      	beq.n	800247e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800246e:	6863      	ldr	r3, [r4, #4]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b08      	cmp	r3, #8
 8002476:	d110      	bne.n	800249a <HAL_RCC_OscConfig+0x10a>
 8002478:	6863      	ldr	r3, [r4, #4]
 800247a:	03da      	lsls	r2, r3, #15
 800247c:	d40d      	bmi.n	800249a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	079b      	lsls	r3, r3, #30
 8002482:	d502      	bpl.n	800248a <HAL_RCC_OscConfig+0xfa>
 8002484:	692b      	ldr	r3, [r5, #16]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d186      	bne.n	8002398 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	696a      	ldr	r2, [r5, #20]
 800248e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002492:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002496:	6023      	str	r3, [r4, #0]
 8002498:	e786      	b.n	80023a8 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800249a:	692a      	ldr	r2, [r5, #16]
 800249c:	4b5a      	ldr	r3, [pc, #360]	; (8002608 <HAL_RCC_OscConfig+0x278>)
 800249e:	b16a      	cbz	r2, 80024bc <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024a4:	f7fe fda0 	bl	8000fe8 <HAL_GetTick>
 80024a8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	079f      	lsls	r7, r3, #30
 80024ae:	d4ec      	bmi.n	800248a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b0:	f7fe fd9a 	bl	8000fe8 <HAL_GetTick>
 80024b4:	1b80      	subs	r0, r0, r6
 80024b6:	2802      	cmp	r0, #2
 80024b8:	d9f7      	bls.n	80024aa <HAL_RCC_OscConfig+0x11a>
 80024ba:	e7ab      	b.n	8002414 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80024bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024be:	f7fe fd93 	bl	8000fe8 <HAL_GetTick>
 80024c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	0798      	lsls	r0, r3, #30
 80024c8:	f57f af6e 	bpl.w	80023a8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024cc:	f7fe fd8c 	bl	8000fe8 <HAL_GetTick>
 80024d0:	1b80      	subs	r0, r0, r6
 80024d2:	2802      	cmp	r0, #2
 80024d4:	d9f6      	bls.n	80024c4 <HAL_RCC_OscConfig+0x134>
 80024d6:	e79d      	b.n	8002414 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d8:	69aa      	ldr	r2, [r5, #24]
 80024da:	4c4a      	ldr	r4, [pc, #296]	; (8002604 <HAL_RCC_OscConfig+0x274>)
 80024dc:	4b4b      	ldr	r3, [pc, #300]	; (800260c <HAL_RCC_OscConfig+0x27c>)
 80024de:	b1da      	cbz	r2, 8002518 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80024e4:	f7fe fd80 	bl	8000fe8 <HAL_GetTick>
 80024e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024ec:	079b      	lsls	r3, r3, #30
 80024ee:	d50d      	bpl.n	800250c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024f0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80024f4:	4b46      	ldr	r3, [pc, #280]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80024fc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80024fe:	bf00      	nop
  }
  while (Delay --);
 8002500:	9b01      	ldr	r3, [sp, #4]
 8002502:	1e5a      	subs	r2, r3, #1
 8002504:	9201      	str	r2, [sp, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f9      	bne.n	80024fe <HAL_RCC_OscConfig+0x16e>
 800250a:	e751      	b.n	80023b0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250c:	f7fe fd6c 	bl	8000fe8 <HAL_GetTick>
 8002510:	1b80      	subs	r0, r0, r6
 8002512:	2802      	cmp	r0, #2
 8002514:	d9e9      	bls.n	80024ea <HAL_RCC_OscConfig+0x15a>
 8002516:	e77d      	b.n	8002414 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002518:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800251a:	f7fe fd65 	bl	8000fe8 <HAL_GetTick>
 800251e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002522:	079f      	lsls	r7, r3, #30
 8002524:	f57f af44 	bpl.w	80023b0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002528:	f7fe fd5e 	bl	8000fe8 <HAL_GetTick>
 800252c:	1b80      	subs	r0, r0, r6
 800252e:	2802      	cmp	r0, #2
 8002530:	d9f6      	bls.n	8002520 <HAL_RCC_OscConfig+0x190>
 8002532:	e76f      	b.n	8002414 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002534:	4c33      	ldr	r4, [pc, #204]	; (8002604 <HAL_RCC_OscConfig+0x274>)
 8002536:	69e3      	ldr	r3, [r4, #28]
 8002538:	00d8      	lsls	r0, r3, #3
 800253a:	d424      	bmi.n	8002586 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 800253c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	69e3      	ldr	r3, [r4, #28]
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002544:	61e3      	str	r3, [r4, #28]
 8002546:	69e3      	ldr	r3, [r4, #28]
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002550:	4e30      	ldr	r6, [pc, #192]	; (8002614 <HAL_RCC_OscConfig+0x284>)
 8002552:	6833      	ldr	r3, [r6, #0]
 8002554:	05d9      	lsls	r1, r3, #23
 8002556:	d518      	bpl.n	800258a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002558:	68eb      	ldr	r3, [r5, #12]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d126      	bne.n	80025ac <HAL_RCC_OscConfig+0x21c>
 800255e:	6a23      	ldr	r3, [r4, #32]
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002566:	f7fe fd3f 	bl	8000fe8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800256e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002570:	6a23      	ldr	r3, [r4, #32]
 8002572:	079b      	lsls	r3, r3, #30
 8002574:	d53f      	bpl.n	80025f6 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8002576:	2f00      	cmp	r7, #0
 8002578:	f43f af1e 	beq.w	80023b8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800257c:	69e3      	ldr	r3, [r4, #28]
 800257e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002582:	61e3      	str	r3, [r4, #28]
 8002584:	e718      	b.n	80023b8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8002586:	2700      	movs	r7, #0
 8002588:	e7e2      	b.n	8002550 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258a:	6833      	ldr	r3, [r6, #0]
 800258c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002590:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002592:	f7fe fd29 	bl	8000fe8 <HAL_GetTick>
 8002596:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	6833      	ldr	r3, [r6, #0]
 800259a:	05da      	lsls	r2, r3, #23
 800259c:	d4dc      	bmi.n	8002558 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7fe fd23 	bl	8000fe8 <HAL_GetTick>
 80025a2:	eba0 0008 	sub.w	r0, r0, r8
 80025a6:	2864      	cmp	r0, #100	; 0x64
 80025a8:	d9f6      	bls.n	8002598 <HAL_RCC_OscConfig+0x208>
 80025aa:	e733      	b.n	8002414 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ac:	b9ab      	cbnz	r3, 80025da <HAL_RCC_OscConfig+0x24a>
 80025ae:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	6223      	str	r3, [r4, #32]
 80025ba:	6a23      	ldr	r3, [r4, #32]
 80025bc:	f023 0304 	bic.w	r3, r3, #4
 80025c0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80025c2:	f7fe fd11 	bl	8000fe8 <HAL_GetTick>
 80025c6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c8:	6a23      	ldr	r3, [r4, #32]
 80025ca:	0798      	lsls	r0, r3, #30
 80025cc:	d5d3      	bpl.n	8002576 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7fe fd0b 	bl	8000fe8 <HAL_GetTick>
 80025d2:	1b80      	subs	r0, r0, r6
 80025d4:	4540      	cmp	r0, r8
 80025d6:	d9f7      	bls.n	80025c8 <HAL_RCC_OscConfig+0x238>
 80025d8:	e71c      	b.n	8002414 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025da:	2b05      	cmp	r3, #5
 80025dc:	6a23      	ldr	r3, [r4, #32]
 80025de:	d103      	bne.n	80025e8 <HAL_RCC_OscConfig+0x258>
 80025e0:	f043 0304 	orr.w	r3, r3, #4
 80025e4:	6223      	str	r3, [r4, #32]
 80025e6:	e7ba      	b.n	800255e <HAL_RCC_OscConfig+0x1ce>
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	6223      	str	r3, [r4, #32]
 80025ee:	6a23      	ldr	r3, [r4, #32]
 80025f0:	f023 0304 	bic.w	r3, r3, #4
 80025f4:	e7b6      	b.n	8002564 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7fe fcf7 	bl	8000fe8 <HAL_GetTick>
 80025fa:	eba0 0008 	sub.w	r0, r0, r8
 80025fe:	42b0      	cmp	r0, r6
 8002600:	d9b6      	bls.n	8002570 <HAL_RCC_OscConfig+0x1e0>
 8002602:	e707      	b.n	8002414 <HAL_RCC_OscConfig+0x84>
 8002604:	40021000 	.word	0x40021000
 8002608:	42420000 	.word	0x42420000
 800260c:	42420480 	.word	0x42420480
 8002610:	20000184 	.word	0x20000184
 8002614:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002618:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <HAL_RCC_OscConfig+0x334>)
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	461c      	mov	r4, r3
 800261e:	f002 020c 	and.w	r2, r2, #12
 8002622:	2a08      	cmp	r2, #8
 8002624:	d03d      	beq.n	80026a2 <HAL_RCC_OscConfig+0x312>
 8002626:	2300      	movs	r3, #0
 8002628:	4e27      	ldr	r6, [pc, #156]	; (80026c8 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800262c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262e:	d12b      	bne.n	8002688 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8002630:	f7fe fcda 	bl	8000fe8 <HAL_GetTick>
 8002634:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	0199      	lsls	r1, r3, #6
 800263a:	d41f      	bmi.n	800267c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800263c:	6a2b      	ldr	r3, [r5, #32]
 800263e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002642:	d105      	bne.n	8002650 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002644:	6862      	ldr	r2, [r4, #4]
 8002646:	68a9      	ldr	r1, [r5, #8]
 8002648:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800264c:	430a      	orrs	r2, r1
 800264e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002650:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002652:	6862      	ldr	r2, [r4, #4]
 8002654:	430b      	orrs	r3, r1
 8002656:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800265a:	4313      	orrs	r3, r2
 800265c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800265e:	2301      	movs	r3, #1
 8002660:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002662:	f7fe fcc1 	bl	8000fe8 <HAL_GetTick>
 8002666:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	019a      	lsls	r2, r3, #6
 800266c:	f53f aea8 	bmi.w	80023c0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fcba 	bl	8000fe8 <HAL_GetTick>
 8002674:	1b40      	subs	r0, r0, r5
 8002676:	2802      	cmp	r0, #2
 8002678:	d9f6      	bls.n	8002668 <HAL_RCC_OscConfig+0x2d8>
 800267a:	e6cb      	b.n	8002414 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267c:	f7fe fcb4 	bl	8000fe8 <HAL_GetTick>
 8002680:	1bc0      	subs	r0, r0, r7
 8002682:	2802      	cmp	r0, #2
 8002684:	d9d7      	bls.n	8002636 <HAL_RCC_OscConfig+0x2a6>
 8002686:	e6c5      	b.n	8002414 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002688:	f7fe fcae 	bl	8000fe8 <HAL_GetTick>
 800268c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268e:	6823      	ldr	r3, [r4, #0]
 8002690:	019b      	lsls	r3, r3, #6
 8002692:	f57f ae95 	bpl.w	80023c0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe fca7 	bl	8000fe8 <HAL_GetTick>
 800269a:	1b40      	subs	r0, r0, r5
 800269c:	2802      	cmp	r0, #2
 800269e:	d9f6      	bls.n	800268e <HAL_RCC_OscConfig+0x2fe>
 80026a0:	e6b8      	b.n	8002414 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a2:	2801      	cmp	r0, #1
 80026a4:	f43f aeb7 	beq.w	8002416 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80026a8:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	6a2b      	ldr	r3, [r5, #32]
 80026ac:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80026b0:	429a      	cmp	r2, r3
 80026b2:	f47f ae71 	bne.w	8002398 <HAL_RCC_OscConfig+0x8>
 80026b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026b8:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80026bc:	1ac0      	subs	r0, r0, r3
 80026be:	bf18      	it	ne
 80026c0:	2001      	movne	r0, #1
 80026c2:	e6a8      	b.n	8002416 <HAL_RCC_OscConfig+0x86>
 80026c4:	40021000 	.word	0x40021000
 80026c8:	42420060 	.word	0x42420060

080026cc <HAL_RCC_GetSysClockFreq>:
{
 80026cc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026ce:	4b18      	ldr	r3, [pc, #96]	; (8002730 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80026d0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026d2:	ac02      	add	r4, sp, #8
 80026d4:	f103 0510 	add.w	r5, r3, #16
 80026d8:	4622      	mov	r2, r4
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	6859      	ldr	r1, [r3, #4]
 80026de:	3308      	adds	r3, #8
 80026e0:	c203      	stmia	r2!, {r0, r1}
 80026e2:	42ab      	cmp	r3, r5
 80026e4:	4614      	mov	r4, r2
 80026e6:	d1f7      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026e8:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80026ec:	4911      	ldr	r1, [pc, #68]	; (8002734 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026ee:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80026f2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80026f4:	f003 020c 	and.w	r2, r3, #12
 80026f8:	2a08      	cmp	r2, #8
 80026fa:	d117      	bne.n	800272c <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026fc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002700:	a806      	add	r0, sp, #24
 8002702:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002704:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002706:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800270a:	d50c      	bpl.n	8002726 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800270c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800270e:	480a      	ldr	r0, [pc, #40]	; (8002738 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002710:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002714:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002716:	aa06      	add	r2, sp, #24
 8002718:	4413      	add	r3, r2
 800271a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800271e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002722:	b007      	add	sp, #28
 8002724:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002726:	4805      	ldr	r0, [pc, #20]	; (800273c <HAL_RCC_GetSysClockFreq+0x70>)
 8002728:	4350      	muls	r0, r2
 800272a:	e7fa      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 800272c:	4802      	ldr	r0, [pc, #8]	; (8002738 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800272e:	e7f8      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x56>
 8002730:	08009730 	.word	0x08009730
 8002734:	40021000 	.word	0x40021000
 8002738:	007a1200 	.word	0x007a1200
 800273c:	003d0900 	.word	0x003d0900

08002740 <HAL_RCC_ClockConfig>:
{
 8002740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002744:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002746:	4604      	mov	r4, r0
 8002748:	b910      	cbnz	r0, 8002750 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800274a:	2001      	movs	r0, #1
}
 800274c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002750:	4a44      	ldr	r2, [pc, #272]	; (8002864 <HAL_RCC_ClockConfig+0x124>)
 8002752:	6813      	ldr	r3, [r2, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	428b      	cmp	r3, r1
 800275a:	d328      	bcc.n	80027ae <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275c:	6821      	ldr	r1, [r4, #0]
 800275e:	078e      	lsls	r6, r1, #30
 8002760:	d430      	bmi.n	80027c4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002762:	07ca      	lsls	r2, r1, #31
 8002764:	d443      	bmi.n	80027ee <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002766:	4a3f      	ldr	r2, [pc, #252]	; (8002864 <HAL_RCC_ClockConfig+0x124>)
 8002768:	6813      	ldr	r3, [r2, #0]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	42ab      	cmp	r3, r5
 8002770:	d865      	bhi.n	800283e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002772:	6822      	ldr	r2, [r4, #0]
 8002774:	4d3c      	ldr	r5, [pc, #240]	; (8002868 <HAL_RCC_ClockConfig+0x128>)
 8002776:	f012 0f04 	tst.w	r2, #4
 800277a:	d16c      	bne.n	8002856 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	0713      	lsls	r3, r2, #28
 800277e:	d506      	bpl.n	800278e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002780:	686b      	ldr	r3, [r5, #4]
 8002782:	6922      	ldr	r2, [r4, #16]
 8002784:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002788:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800278c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800278e:	f7ff ff9d 	bl	80026cc <HAL_RCC_GetSysClockFreq>
 8002792:	686b      	ldr	r3, [r5, #4]
 8002794:	4a35      	ldr	r2, [pc, #212]	; (800286c <HAL_RCC_ClockConfig+0x12c>)
 8002796:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	40d8      	lsrs	r0, r3
 800279e:	4b34      	ldr	r3, [pc, #208]	; (8002870 <HAL_RCC_ClockConfig+0x130>)
 80027a0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80027a2:	4b34      	ldr	r3, [pc, #208]	; (8002874 <HAL_RCC_ClockConfig+0x134>)
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	f7fe fbdd 	bl	8000f64 <HAL_InitTick>
  return HAL_OK;
 80027aa:	2000      	movs	r0, #0
 80027ac:	e7ce      	b.n	800274c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	6813      	ldr	r3, [r2, #0]
 80027b0:	f023 0307 	bic.w	r3, r3, #7
 80027b4:	430b      	orrs	r3, r1
 80027b6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b8:	6813      	ldr	r3, [r2, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	428b      	cmp	r3, r1
 80027c0:	d1c3      	bne.n	800274a <HAL_RCC_ClockConfig+0xa>
 80027c2:	e7cb      	b.n	800275c <HAL_RCC_ClockConfig+0x1c>
 80027c4:	4b28      	ldr	r3, [pc, #160]	; (8002868 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027ca:	bf1e      	ittt	ne
 80027cc:	685a      	ldrne	r2, [r3, #4]
 80027ce:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80027d2:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d6:	bf42      	ittt	mi
 80027d8:	685a      	ldrmi	r2, [r3, #4]
 80027da:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80027de:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	68a0      	ldr	r0, [r4, #8]
 80027e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80027e8:	4302      	orrs	r2, r0
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	e7b9      	b.n	8002762 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ee:	6862      	ldr	r2, [r4, #4]
 80027f0:	4e1d      	ldr	r6, [pc, #116]	; (8002868 <HAL_RCC_ClockConfig+0x128>)
 80027f2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f4:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f6:	d11a      	bne.n	800282e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	d0a5      	beq.n	800274a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002800:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002804:	f023 0303 	bic.w	r3, r3, #3
 8002808:	4313      	orrs	r3, r2
 800280a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800280c:	f7fe fbec 	bl	8000fe8 <HAL_GetTick>
 8002810:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	6873      	ldr	r3, [r6, #4]
 8002814:	6862      	ldr	r2, [r4, #4]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800281e:	d0a2      	beq.n	8002766 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7fe fbe2 	bl	8000fe8 <HAL_GetTick>
 8002824:	1bc0      	subs	r0, r0, r7
 8002826:	4540      	cmp	r0, r8
 8002828:	d9f3      	bls.n	8002812 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800282a:	2003      	movs	r0, #3
 800282c:	e78e      	b.n	800274c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282e:	2a02      	cmp	r2, #2
 8002830:	d102      	bne.n	8002838 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002832:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002836:	e7e1      	b.n	80027fc <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	f013 0f02 	tst.w	r3, #2
 800283c:	e7de      	b.n	80027fc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	6813      	ldr	r3, [r2, #0]
 8002840:	f023 0307 	bic.w	r3, r3, #7
 8002844:	432b      	orrs	r3, r5
 8002846:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002848:	6813      	ldr	r3, [r2, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	42ab      	cmp	r3, r5
 8002850:	f47f af7b 	bne.w	800274a <HAL_RCC_ClockConfig+0xa>
 8002854:	e78d      	b.n	8002772 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002856:	686b      	ldr	r3, [r5, #4]
 8002858:	68e1      	ldr	r1, [r4, #12]
 800285a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800285e:	430b      	orrs	r3, r1
 8002860:	606b      	str	r3, [r5, #4]
 8002862:	e78b      	b.n	800277c <HAL_RCC_ClockConfig+0x3c>
 8002864:	40022000 	.word	0x40022000
 8002868:	40021000 	.word	0x40021000
 800286c:	0800a541 	.word	0x0800a541
 8002870:	20000184 	.word	0x20000184
 8002874:	20000004 	.word	0x20000004

08002878 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002878:	4b04      	ldr	r3, [pc, #16]	; (800288c <HAL_RCC_GetPCLK1Freq+0x14>)
 800287a:	4a05      	ldr	r2, [pc, #20]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x18>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002882:	5cd3      	ldrb	r3, [r2, r3]
 8002884:	4a03      	ldr	r2, [pc, #12]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002886:	6810      	ldr	r0, [r2, #0]
}
 8002888:	40d8      	lsrs	r0, r3
 800288a:	4770      	bx	lr
 800288c:	40021000 	.word	0x40021000
 8002890:	0800a551 	.word	0x0800a551
 8002894:	20000184 	.word	0x20000184

08002898 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <HAL_RCC_GetPCLK2Freq+0x14>)
 800289a:	4a05      	ldr	r2, [pc, #20]	; (80028b0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	4a03      	ldr	r2, [pc, #12]	; (80028b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80028a6:	6810      	ldr	r0, [r2, #0]
}
 80028a8:	40d8      	lsrs	r0, r3
 80028aa:	4770      	bx	lr
 80028ac:	40021000 	.word	0x40021000
 80028b0:	0800a551 	.word	0x0800a551
 80028b4:	20000184 	.word	0x20000184

080028b8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028b8:	6803      	ldr	r3, [r0, #0]
{
 80028ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028be:	07d9      	lsls	r1, r3, #31
{
 80028c0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028c2:	d520      	bpl.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c4:	4c35      	ldr	r4, [pc, #212]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80028c6:	69e3      	ldr	r3, [r4, #28]
 80028c8:	00da      	lsls	r2, r3, #3
 80028ca:	d432      	bmi.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80028cc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ce:	69e3      	ldr	r3, [r4, #28]
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d4:	61e3      	str	r3, [r4, #28]
 80028d6:	69e3      	ldr	r3, [r4, #28]
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028dc:	9301      	str	r3, [sp, #4]
 80028de:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	4e2f      	ldr	r6, [pc, #188]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80028e2:	6833      	ldr	r3, [r6, #0]
 80028e4:	05db      	lsls	r3, r3, #23
 80028e6:	d526      	bpl.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028e8:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ea:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80028ee:	d136      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028f0:	6a23      	ldr	r3, [r4, #32]
 80028f2:	686a      	ldr	r2, [r5, #4]
 80028f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f8:	4313      	orrs	r3, r2
 80028fa:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028fc:	b11f      	cbz	r7, 8002906 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fe:	69e3      	ldr	r3, [r4, #28]
 8002900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002904:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002906:	6828      	ldr	r0, [r5, #0]
 8002908:	0783      	lsls	r3, r0, #30
 800290a:	d506      	bpl.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800290c:	4a23      	ldr	r2, [pc, #140]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800290e:	68a9      	ldr	r1, [r5, #8]
 8002910:	6853      	ldr	r3, [r2, #4]
 8002912:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002916:	430b      	orrs	r3, r1
 8002918:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800291a:	f010 0010 	ands.w	r0, r0, #16
 800291e:	d01b      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002920:	4a1e      	ldr	r2, [pc, #120]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002922:	68e9      	ldr	r1, [r5, #12]
 8002924:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002926:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002928:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800292c:	430b      	orrs	r3, r1
 800292e:	6053      	str	r3, [r2, #4]
 8002930:	e012      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8002932:	2700      	movs	r7, #0
 8002934:	e7d4      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002936:	6833      	ldr	r3, [r6, #0]
 8002938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800293e:	f7fe fb53 	bl	8000fe8 <HAL_GetTick>
 8002942:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	6833      	ldr	r3, [r6, #0]
 8002946:	05d8      	lsls	r0, r3, #23
 8002948:	d4ce      	bmi.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294a:	f7fe fb4d 	bl	8000fe8 <HAL_GetTick>
 800294e:	eba0 0008 	sub.w	r0, r0, r8
 8002952:	2864      	cmp	r0, #100	; 0x64
 8002954:	d9f6      	bls.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002956:	2003      	movs	r0, #3
}
 8002958:	b002      	add	sp, #8
 800295a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800295e:	686a      	ldr	r2, [r5, #4]
 8002960:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002964:	429a      	cmp	r2, r3
 8002966:	d0c3      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002968:	2001      	movs	r0, #1
 800296a:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800296c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800296e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002970:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002972:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002976:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002978:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800297a:	07d9      	lsls	r1, r3, #31
 800297c:	d5b8      	bpl.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800297e:	f7fe fb33 	bl	8000fe8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002986:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	6a23      	ldr	r3, [r4, #32]
 800298a:	079a      	lsls	r2, r3, #30
 800298c:	d4b0      	bmi.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7fe fb2b 	bl	8000fe8 <HAL_GetTick>
 8002992:	1b80      	subs	r0, r0, r6
 8002994:	4540      	cmp	r0, r8
 8002996:	d9f7      	bls.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002998:	e7dd      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	40007000 	.word	0x40007000
 80029a4:	42420440 	.word	0x42420440

080029a8 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	4604      	mov	r4, r0
 80029ac:	460e      	mov	r6, r1
 80029ae:	4615      	mov	r5, r2
 80029b0:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029b2:	6821      	ldr	r1, [r4, #0]
 80029b4:	688a      	ldr	r2, [r1, #8]
 80029b6:	ea36 0302 	bics.w	r3, r6, r2
 80029ba:	d001      	beq.n	80029c0 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80029bc:	2000      	movs	r0, #0
 80029be:	e02d      	b.n	8002a1c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80029c0:	1c6b      	adds	r3, r5, #1
 80029c2:	d0f7      	beq.n	80029b4 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80029c4:	f7fe fb10 	bl	8000fe8 <HAL_GetTick>
 80029c8:	1bc0      	subs	r0, r0, r7
 80029ca:	4285      	cmp	r5, r0
 80029cc:	d8f1      	bhi.n	80029b2 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029d6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029d8:	6862      	ldr	r2, [r4, #4]
 80029da:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80029de:	d10a      	bne.n	80029f6 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
 80029e0:	68a2      	ldr	r2, [r4, #8]
 80029e2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80029e6:	d002      	beq.n	80029ee <SPI_WaitFlagStateUntilTimeout.constprop.6+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029e8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80029ec:	d103      	bne.n	80029f6 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
          __HAL_SPI_DISABLE(hspi);
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029f4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80029f8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80029fc:	d107      	bne.n	8002a0e <SPI_WaitFlagStateUntilTimeout.constprop.6+0x66>
          SPI_RESET_CRC(hspi);
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a0c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002a14:	2300      	movs	r3, #0
 8002a16:	2003      	movs	r0, #3
 8002a18:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a1e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1e:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a20:	4613      	mov	r3, r2
 8002a22:	460a      	mov	r2, r1
 8002a24:	2180      	movs	r1, #128	; 0x80
{
 8002a26:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a28:	f7ff ffbe 	bl	80029a8 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8002a2c:	b120      	cbz	r0, 8002a38 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8002a2e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a32:	f043 0320 	orr.w	r3, r3, #32
 8002a36:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002a38:	bd10      	pop	{r4, pc}

08002a3a <HAL_SPI_MspInit>:
}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_SPI_Init>:
{
 8002a3c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002a3e:	4604      	mov	r4, r0
 8002a40:	2800      	cmp	r0, #0
 8002a42:	d034      	beq.n	8002aae <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a48:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002a4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a50:	b91b      	cbnz	r3, 8002a5a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002a52:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002a56:	f7ff fff0 	bl	8002a3a <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002a5a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002a5c:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002a5e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002a62:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002a64:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8002a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a6a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002a6c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8002a70:	4303      	orrs	r3, r0
 8002a72:	68e0      	ldr	r0, [r4, #12]
 8002a74:	4303      	orrs	r3, r0
 8002a76:	6920      	ldr	r0, [r4, #16]
 8002a78:	4303      	orrs	r3, r0
 8002a7a:	6960      	ldr	r0, [r4, #20]
 8002a7c:	4303      	orrs	r3, r0
 8002a7e:	69e0      	ldr	r0, [r4, #28]
 8002a80:	4303      	orrs	r3, r0
 8002a82:	6a20      	ldr	r0, [r4, #32]
 8002a84:	4303      	orrs	r3, r0
 8002a86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a88:	4303      	orrs	r3, r0
 8002a8a:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a8e:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002a90:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a92:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002a96:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a98:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a9a:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a9c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aa2:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002aa4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002aa6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002aa8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002aac:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002aae:	2001      	movs	r0, #1
 8002ab0:	e7fc      	b.n	8002aac <HAL_SPI_Init+0x70>

08002ab2 <HAL_SPI_Transmit>:
{
 8002ab2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002ab6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002ab8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002abc:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002abe:	2b01      	cmp	r3, #1
{
 8002ac0:	460d      	mov	r5, r1
 8002ac2:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002ac4:	f000 809c 	beq.w	8002c00 <HAL_SPI_Transmit+0x14e>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002ace:	f7fe fa8b 	bl	8000fe8 <HAL_GetTick>
 8002ad2:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002ad4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002ad8:	b2c0      	uxtb	r0, r0
 8002ada:	2801      	cmp	r0, #1
 8002adc:	f040 808e 	bne.w	8002bfc <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8002ae0:	2d00      	cmp	r5, #0
 8002ae2:	d05e      	beq.n	8002ba2 <HAL_SPI_Transmit+0xf0>
 8002ae4:	f1b8 0f00 	cmp.w	r8, #0
 8002ae8:	d05b      	beq.n	8002ba2 <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002aea:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aec:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002aee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af2:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002af4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002af6:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002af8:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8002afc:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002afe:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002b00:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 8002b04:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002b0a:	bf08      	it	eq
 8002b0c:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b0e:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8002b10:	bf08      	it	eq
 8002b12:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 8002b16:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8002b1a:	bf08      	it	eq
 8002b1c:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b1e:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b20:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b22:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002b24:	bf5e      	ittt	pl
 8002b26:	6803      	ldrpl	r3, [r0, #0]
 8002b28:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002b2c:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b2e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002b32:	6863      	ldr	r3, [r4, #4]
 8002b34:	d13e      	bne.n	8002bb4 <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b36:	b113      	cbz	r3, 8002b3e <HAL_SPI_Transmit+0x8c>
 8002b38:	f1b8 0f01 	cmp.w	r8, #1
 8002b3c:	d107      	bne.n	8002b4e <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b3e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002b42:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b44:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002b46:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002b4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	b9a3      	cbnz	r3, 8002b7e <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b54:	463a      	mov	r2, r7
 8002b56:	4631      	mov	r1, r6
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f7ff ff60 	bl	8002a1e <SPI_EndRxTxTransaction>
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d149      	bne.n	8002bf6 <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b62:	68a3      	ldr	r3, [r4, #8]
 8002b64:	b933      	cbnz	r3, 8002b74 <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	9201      	str	r2, [sp, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b74:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002b76:	3000      	adds	r0, #0
 8002b78:	bf18      	it	ne
 8002b7a:	2001      	movne	r0, #1
error:
 8002b7c:	e011      	b.n	8002ba2 <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b7e:	6822      	ldr	r2, [r4, #0]
 8002b80:	6893      	ldr	r3, [r2, #8]
 8002b82:	0798      	lsls	r0, r3, #30
 8002b84:	d505      	bpl.n	8002b92 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b88:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002b8c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8002b90:	e7d9      	b.n	8002b46 <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b92:	f7fe fa29 	bl	8000fe8 <HAL_GetTick>
 8002b96:	1bc0      	subs	r0, r0, r7
 8002b98:	42b0      	cmp	r0, r6
 8002b9a:	d3d8      	bcc.n	8002b4e <HAL_SPI_Transmit+0x9c>
 8002b9c:	1c71      	adds	r1, r6, #1
 8002b9e:	d0d6      	beq.n	8002b4e <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 8002ba0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002bae:	b002      	add	sp, #8
 8002bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb4:	b113      	cbz	r3, 8002bbc <HAL_SPI_Transmit+0x10a>
 8002bb6:	f1b8 0f01 	cmp.w	r8, #1
 8002bba:	d108      	bne.n	8002bce <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bbc:	782b      	ldrb	r3, [r5, #0]
 8002bbe:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002bc6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002bce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0be      	beq.n	8002b54 <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	0792      	lsls	r2, r2, #30
 8002bdc:	d503      	bpl.n	8002be6 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bde:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002be0:	7812      	ldrb	r2, [r2, #0]
 8002be2:	731a      	strb	r2, [r3, #12]
 8002be4:	e7ec      	b.n	8002bc0 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be6:	f7fe f9ff 	bl	8000fe8 <HAL_GetTick>
 8002bea:	1bc0      	subs	r0, r0, r7
 8002bec:	42b0      	cmp	r0, r6
 8002bee:	d3ee      	bcc.n	8002bce <HAL_SPI_Transmit+0x11c>
 8002bf0:	1c73      	adds	r3, r6, #1
 8002bf2:	d0ec      	beq.n	8002bce <HAL_SPI_Transmit+0x11c>
 8002bf4:	e7d4      	b.n	8002ba0 <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	6563      	str	r3, [r4, #84]	; 0x54
 8002bfa:	e7b2      	b.n	8002b62 <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 8002bfc:	2002      	movs	r0, #2
 8002bfe:	e7d0      	b.n	8002ba2 <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8002c00:	2002      	movs	r0, #2
 8002c02:	e7d4      	b.n	8002bae <HAL_SPI_Transmit+0xfc>

08002c04 <HAL_SPI_Transmit_DMA>:
  __HAL_LOCK(hspi);
 8002c04:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002c08:	b510      	push	{r4, lr}
  __HAL_LOCK(hspi);
 8002c0a:	2b01      	cmp	r3, #1
{
 8002c0c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002c0e:	d04e      	beq.n	8002cae <HAL_SPI_Transmit_DMA+0xaa>
 8002c10:	2301      	movs	r3, #1
 8002c12:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 8002c16:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
 8002c1a:	b2c0      	uxtb	r0, r0
 8002c1c:	4298      	cmp	r0, r3
 8002c1e:	d144      	bne.n	8002caa <HAL_SPI_Transmit_DMA+0xa6>
  if ((pData == NULL) || (Size == 0U))
 8002c20:	2900      	cmp	r1, #0
 8002c22:	d02d      	beq.n	8002c80 <HAL_SPI_Transmit_DMA+0x7c>
 8002c24:	2a00      	cmp	r2, #0
 8002c26:	d02b      	beq.n	8002c80 <HAL_SPI_Transmit_DMA+0x7c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c32:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c34:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c36:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = 0U;
 8002c3a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8002c3c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c3e:	68a3      	ldr	r3, [r4, #8]
  hspi->TxXferSize  = Size;
 8002c40:	86a2      	strh	r2, [r4, #52]	; 0x34
 8002c42:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002c48:	bf08      	it	eq
 8002c4a:	6813      	ldreq	r3, [r2, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c4c:	6321      	str	r1, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8002c4e:	bf04      	itt	eq
 8002c50:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002c54:	6013      	streq	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002c56:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002c58:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <HAL_SPI_Transmit_DMA+0xb0>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002c5a:	320c      	adds	r2, #12
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002c5c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <HAL_SPI_Transmit_DMA+0xb4>)
 8002c60:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_SPI_Transmit_DMA+0xb8>)
 8002c64:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback = NULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	6343      	str	r3, [r0, #52]	; 0x34
                                 hspi->TxXferCount))
 8002c6a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002c6c:	f7fe fc96 	bl	800159c <HAL_DMA_Start_IT>
 8002c70:	b150      	cbz	r0, 8002c88 <HAL_SPI_Transmit_DMA+0x84>
    hspi->State = HAL_SPI_STATE_READY;
 8002c72:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c76:	f043 0310 	orr.w	r3, r3, #16
 8002c7a:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8002c7c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c80:	2300      	movs	r3, #0
 8002c82:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002c86:	bd10      	pop	{r4, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002c8e:	bf5e      	ittt	pl
 8002c90:	681a      	ldrpl	r2, [r3, #0]
 8002c92:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002c96:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	f042 0220 	orr.w	r2, r2, #32
 8002c9e:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	f042 0202 	orr.w	r2, r2, #2
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	e7ea      	b.n	8002c80 <HAL_SPI_Transmit_DMA+0x7c>
    errorcode = HAL_BUSY;
 8002caa:	2002      	movs	r0, #2
 8002cac:	e7e8      	b.n	8002c80 <HAL_SPI_Transmit_DMA+0x7c>
  __HAL_LOCK(hspi);
 8002cae:	2002      	movs	r0, #2
 8002cb0:	e7e9      	b.n	8002c86 <HAL_SPI_Transmit_DMA+0x82>
 8002cb2:	bf00      	nop
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002cf3 	.word	0x08002cf3
 8002cbc:	08002cd1 	.word	0x08002cd1

08002cc0 <HAL_SPI_TxCpltCallback>:
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_SPI_TxHalfCpltCallback>:
 8002cc2:	4770      	bx	lr

08002cc4 <SPI_DMAHalfTransmitCplt>:
{
 8002cc4:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002cc6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002cc8:	f7ff fffb 	bl	8002cc2 <HAL_SPI_TxHalfCpltCallback>
}
 8002ccc:	bd08      	pop	{r3, pc}

08002cce <HAL_SPI_ErrorCallback>:
 8002cce:	4770      	bx	lr

08002cd0 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002cd0:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002cd2:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002cd4:	6802      	ldr	r2, [r0, #0]
 8002cd6:	6853      	ldr	r3, [r2, #4]
 8002cd8:	f023 0303 	bic.w	r3, r3, #3
 8002cdc:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002cde:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002ce0:	f043 0310 	orr.w	r3, r3, #16
 8002ce4:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8002cec:	f7ff ffef 	bl	8002cce <HAL_SPI_ErrorCallback>
}
 8002cf0:	bd08      	pop	{r3, pc}

08002cf2 <SPI_DMATransmitCplt>:
{
 8002cf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cf4:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002cf6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8002cf8:	f7fe f976 	bl	8000fe8 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002cfc:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002cfe:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	069b      	lsls	r3, r3, #26
 8002d04:	d426      	bmi.n	8002d54 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d06:	6823      	ldr	r3, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d08:	4620      	mov	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	f021 0120 	bic.w	r1, r1, #32
 8002d10:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	f021 0102 	bic.w	r1, r1, #2
 8002d18:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d1a:	2164      	movs	r1, #100	; 0x64
 8002d1c:	f7ff fe7f 	bl	8002a1e <SPI_EndRxTxTransaction>
 8002d20:	b118      	cbz	r0, 8002d2a <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d24:	f043 0320 	orr.w	r3, r3, #32
 8002d28:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d2a:	68a3      	ldr	r3, [r4, #8]
 8002d2c:	b933      	cbnz	r3, 8002d3c <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	9201      	str	r2, [sp, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	9301      	str	r3, [sp, #4]
 8002d3a:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d48:	b123      	cbz	r3, 8002d54 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f7ff ffbf 	bl	8002cce <HAL_SPI_ErrorCallback>
}
 8002d50:	b003      	add	sp, #12
 8002d52:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8002d54:	4620      	mov	r0, r4
 8002d56:	f7ff ffb3 	bl	8002cc0 <HAL_SPI_TxCpltCallback>
 8002d5a:	e7f9      	b.n	8002d50 <SPI_DMATransmitCplt+0x5e>

08002d5c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d5c:	6a03      	ldr	r3, [r0, #32]
{
 8002d5e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d66:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d68:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d6a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d6c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d6e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002d72:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d74:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002d76:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002d7a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d7c:	4d0a      	ldr	r5, [pc, #40]	; (8002da8 <TIM_OC1_SetConfig+0x4c>)
 8002d7e:	42a8      	cmp	r0, r5
 8002d80:	d10b      	bne.n	8002d9a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d82:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d84:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002d88:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d8a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d8e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002d92:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d94:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d98:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d9a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d9c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d9e:	684a      	ldr	r2, [r1, #4]
 8002da0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da2:	6203      	str	r3, [r0, #32]
}
 8002da4:	bd70      	pop	{r4, r5, r6, pc}
 8002da6:	bf00      	nop
 8002da8:	40012c00 	.word	0x40012c00

08002dac <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dac:	6a03      	ldr	r3, [r0, #32]
{
 8002dae:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dba:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dbc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dbe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002dc2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dc4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002dc6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dce:	4d0b      	ldr	r5, [pc, #44]	; (8002dfc <TIM_OC3_SetConfig+0x50>)
 8002dd0:	42a8      	cmp	r0, r5
 8002dd2:	d10d      	bne.n	8002df0 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dd4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dda:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dde:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002de2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002de6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dec:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002df2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002df4:	684a      	ldr	r2, [r1, #4]
 8002df6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df8:	6203      	str	r3, [r0, #32]
}
 8002dfa:	bd70      	pop	{r4, r5, r6, pc}
 8002dfc:	40012c00 	.word	0x40012c00

08002e00 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e00:	6a03      	ldr	r3, [r0, #32]
{
 8002e02:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e0a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e0c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e0e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e10:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e12:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e16:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e1a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002e1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e20:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e24:	4d06      	ldr	r5, [pc, #24]	; (8002e40 <TIM_OC4_SetConfig+0x40>)
 8002e26:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e28:	bf02      	ittt	eq
 8002e2a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e2c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e30:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e34:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e36:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e38:	684a      	ldr	r2, [r1, #4]
 8002e3a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3c:	6203      	str	r3, [r0, #32]
}
 8002e3e:	bd30      	pop	{r4, r5, pc}
 8002e40:	40012c00 	.word	0x40012c00

08002e44 <HAL_TIM_Base_MspInit>:
}
 8002e44:	4770      	bx	lr

08002e46 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002e46:	2302      	movs	r3, #2
 8002e48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4c:	6803      	ldr	r3, [r0, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e54:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002e56:	bf1e      	ittt	ne
 8002e58:	681a      	ldrne	r2, [r3, #0]
 8002e5a:	f042 0201 	orrne.w	r2, r2, #1
 8002e5e:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002e66:	2000      	movs	r0, #0
 8002e68:	4770      	bx	lr

08002e6a <HAL_TIM_PWM_MspInit>:
 8002e6a:	4770      	bx	lr

08002e6c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e6c:	4a1a      	ldr	r2, [pc, #104]	; (8002ed8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002e6e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e70:	4290      	cmp	r0, r2
 8002e72:	d00a      	beq.n	8002e8a <TIM_Base_SetConfig+0x1e>
 8002e74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e78:	d007      	beq.n	8002e8a <TIM_Base_SetConfig+0x1e>
 8002e7a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002e7e:	4290      	cmp	r0, r2
 8002e80:	d003      	beq.n	8002e8a <TIM_Base_SetConfig+0x1e>
 8002e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e86:	4290      	cmp	r0, r2
 8002e88:	d115      	bne.n	8002eb6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002e8a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e90:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e92:	4a11      	ldr	r2, [pc, #68]	; (8002ed8 <TIM_Base_SetConfig+0x6c>)
 8002e94:	4290      	cmp	r0, r2
 8002e96:	d00a      	beq.n	8002eae <TIM_Base_SetConfig+0x42>
 8002e98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e9c:	d007      	beq.n	8002eae <TIM_Base_SetConfig+0x42>
 8002e9e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ea2:	4290      	cmp	r0, r2
 8002ea4:	d003      	beq.n	8002eae <TIM_Base_SetConfig+0x42>
 8002ea6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002eaa:	4290      	cmp	r0, r2
 8002eac:	d103      	bne.n	8002eb6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eae:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eb4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb6:	694a      	ldr	r2, [r1, #20]
 8002eb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ebc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002ebe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec0:	688b      	ldr	r3, [r1, #8]
 8002ec2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002ec4:	680b      	ldr	r3, [r1, #0]
 8002ec6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <TIM_Base_SetConfig+0x6c>)
 8002eca:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002ecc:	bf04      	itt	eq
 8002ece:	690b      	ldreq	r3, [r1, #16]
 8002ed0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	6143      	str	r3, [r0, #20]
}
 8002ed6:	4770      	bx	lr
 8002ed8:	40012c00 	.word	0x40012c00

08002edc <HAL_TIM_Base_Init>:
{
 8002edc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002ede:	4604      	mov	r4, r0
 8002ee0:	b1a0      	cbz	r0, 8002f0c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ee6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002eea:	b91b      	cbnz	r3, 8002ef4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002eec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ef0:	f7ff ffa8 	bl	8002e44 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efc:	1d21      	adds	r1, r4, #4
 8002efe:	f7ff ffb5 	bl	8002e6c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002f02:	2301      	movs	r3, #1
  return HAL_OK;
 8002f04:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002f0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	e7fc      	b.n	8002f0a <HAL_TIM_Base_Init+0x2e>

08002f10 <HAL_TIM_PWM_Init>:
{
 8002f10:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002f12:	4604      	mov	r4, r0
 8002f14:	b1a0      	cbz	r0, 8002f40 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002f16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f1e:	b91b      	cbnz	r3, 8002f28 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002f20:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002f24:	f7ff ffa1 	bl	8002e6a <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f2a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f30:	1d21      	adds	r1, r4, #4
 8002f32:	f7ff ff9b 	bl	8002e6c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002f36:	2301      	movs	r3, #1
  return HAL_OK;
 8002f38:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002f3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f40:	2001      	movs	r0, #1
 8002f42:	e7fc      	b.n	8002f3e <HAL_TIM_PWM_Init+0x2e>

08002f44 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f44:	6a03      	ldr	r3, [r0, #32]
{
 8002f46:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f48:	f023 0310 	bic.w	r3, r3, #16
 8002f4c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002f4e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002f50:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002f52:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f54:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f56:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f5e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002f60:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f64:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f68:	4d0b      	ldr	r5, [pc, #44]	; (8002f98 <TIM_OC2_SetConfig+0x54>)
 8002f6a:	42a8      	cmp	r0, r5
 8002f6c:	d10d      	bne.n	8002f8a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f6e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f74:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f78:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f7c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002f80:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f86:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002f8a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002f8c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002f8e:	684a      	ldr	r2, [r1, #4]
 8002f90:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002f92:	6203      	str	r3, [r0, #32]
}
 8002f94:	bd70      	pop	{r4, r5, r6, pc}
 8002f96:	bf00      	nop
 8002f98:	40012c00 	.word	0x40012c00

08002f9c <HAL_TIM_PWM_ConfigChannel>:
{
 8002f9c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002f9e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002fa2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	f04f 0002 	mov.w	r0, #2
 8002faa:	d025      	beq.n	8002ff8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002fac:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002fae:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002fb2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002fb6:	2a0c      	cmp	r2, #12
 8002fb8:	d818      	bhi.n	8002fec <HAL_TIM_PWM_ConfigChannel+0x50>
 8002fba:	e8df f002 	tbb	[pc, r2]
 8002fbe:	1707      	.short	0x1707
 8002fc0:	171e1717 	.word	0x171e1717
 8002fc4:	172f1717 	.word	0x172f1717
 8002fc8:	1717      	.short	0x1717
 8002fca:	40          	.byte	0x40
 8002fcb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fcc:	6820      	ldr	r0, [r4, #0]
 8002fce:	f7ff fec5 	bl	8002d5c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fd2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fd6:	699a      	ldr	r2, [r3, #24]
 8002fd8:	f042 0208 	orr.w	r2, r2, #8
 8002fdc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fde:	699a      	ldr	r2, [r3, #24]
 8002fe0:	f022 0204 	bic.w	r2, r2, #4
 8002fe4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fe6:	699a      	ldr	r2, [r3, #24]
 8002fe8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fea:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002fec:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002fee:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002ff0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002ff4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002ff8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ffa:	6820      	ldr	r0, [r4, #0]
 8002ffc:	f7ff ffa2 	bl	8002f44 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003000:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003002:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800300a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800301a:	e7e6      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800301c:	6820      	ldr	r0, [r4, #0]
 800301e:	f7ff fec5 	bl	8002dac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003022:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003024:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	f042 0208 	orr.w	r2, r2, #8
 800302c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	f022 0204 	bic.w	r2, r2, #4
 8003034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800303a:	61da      	str	r2, [r3, #28]
      break;
 800303c:	e7d6      	b.n	8002fec <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800303e:	6820      	ldr	r0, [r4, #0]
 8003040:	f7ff fede 	bl	8002e00 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003044:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003046:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800304e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003056:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003058:	69da      	ldr	r2, [r3, #28]
 800305a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800305e:	e7ec      	b.n	800303a <HAL_TIM_PWM_ConfigChannel+0x9e>

08003060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003060:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003062:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003064:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003066:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800306a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800306e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003070:	6083      	str	r3, [r0, #8]
}
 8003072:	bd10      	pop	{r4, pc}

08003074 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003074:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003078:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800307a:	2b01      	cmp	r3, #1
{
 800307c:	4604      	mov	r4, r0
 800307e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003082:	d019      	beq.n	80030b8 <HAL_TIM_ConfigClockSource+0x44>
 8003084:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003086:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800308a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800308c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003090:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003096:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800309a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800309c:	680b      	ldr	r3, [r1, #0]
 800309e:	2b40      	cmp	r3, #64	; 0x40
 80030a0:	d065      	beq.n	800316e <HAL_TIM_ConfigClockSource+0xfa>
 80030a2:	d815      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x5c>
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d00c      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x4e>
 80030a8:	d807      	bhi.n	80030ba <HAL_TIM_ConfigClockSource+0x46>
 80030aa:	b153      	cbz	r3, 80030c2 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80030ac:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80030ae:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80030b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80030b8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d001      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x4e>
 80030be:	2b30      	cmp	r3, #48	; 0x30
 80030c0:	d1f4      	bne.n	80030ac <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80030c2:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030c4:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80030c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030cc:	4313      	orrs	r3, r2
 80030ce:	e01a      	b.n	8003106 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80030d0:	2b60      	cmp	r3, #96	; 0x60
 80030d2:	d034      	beq.n	800313e <HAL_TIM_ConfigClockSource+0xca>
 80030d4:	d819      	bhi.n	800310a <HAL_TIM_ConfigClockSource+0x96>
 80030d6:	2b50      	cmp	r3, #80	; 0x50
 80030d8:	d1e8      	bne.n	80030ac <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030da:	684a      	ldr	r2, [r1, #4]
 80030dc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80030de:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030e0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030e2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030e6:	f025 0501 	bic.w	r5, r5, #1
 80030ea:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ec:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80030ee:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030f4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80030f8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80030fa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80030fc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003102:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003106:	6083      	str	r3, [r0, #8]
 8003108:	e7d0      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800310a:	2b70      	cmp	r3, #112	; 0x70
 800310c:	d00c      	beq.n	8003128 <HAL_TIM_ConfigClockSource+0xb4>
 800310e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003112:	d1cb      	bne.n	80030ac <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8003114:	68cb      	ldr	r3, [r1, #12]
 8003116:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800311a:	f7ff ffa1 	bl	8003060 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800311e:	6822      	ldr	r2, [r4, #0]
 8003120:	6893      	ldr	r3, [r2, #8]
 8003122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003126:	e008      	b.n	800313a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8003128:	68cb      	ldr	r3, [r1, #12]
 800312a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800312e:	f7ff ff97 	bl	8003060 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003132:	6822      	ldr	r2, [r4, #0]
 8003134:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003136:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800313a:	6093      	str	r3, [r2, #8]
      break;
 800313c:	e7b6      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800313e:	684d      	ldr	r5, [r1, #4]
 8003140:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003142:	6a01      	ldr	r1, [r0, #32]
 8003144:	f021 0110 	bic.w	r1, r1, #16
 8003148:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800314c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800314e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003152:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003156:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800315a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800315e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003160:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003162:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003168:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800316c:	e7cb      	b.n	8003106 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800316e:	684a      	ldr	r2, [r1, #4]
 8003170:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003172:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003174:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003176:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800317a:	f025 0501 	bic.w	r5, r5, #1
 800317e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003180:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003182:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003184:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003188:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800318c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800318e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003190:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003196:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800319a:	e7b4      	b.n	8003106 <HAL_TIM_ConfigClockSource+0x92>

0800319c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800319c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800319e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031a0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031a2:	f001 011f 	and.w	r1, r1, #31
 80031a6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80031a8:	ea23 0304 	bic.w	r3, r3, r4
 80031ac:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031ae:	6a03      	ldr	r3, [r0, #32]
 80031b0:	408a      	lsls	r2, r1
 80031b2:	431a      	orrs	r2, r3
 80031b4:	6202      	str	r2, [r0, #32]
}
 80031b6:	bd10      	pop	{r4, pc}

080031b8 <HAL_TIM_OC_Start>:
{
 80031b8:	b510      	push	{r4, lr}
 80031ba:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031bc:	2201      	movs	r2, #1
 80031be:	6800      	ldr	r0, [r0, #0]
 80031c0:	f7ff ffec 	bl	800319c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	4a09      	ldr	r2, [pc, #36]	; (80031ec <HAL_TIM_OC_Start+0x34>)
}
 80031c8:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031ca:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80031cc:	bf02      	ittt	eq
 80031ce:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80031d0:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80031d4:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031dc:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80031de:	bf1e      	ittt	ne
 80031e0:	681a      	ldrne	r2, [r3, #0]
 80031e2:	f042 0201 	orrne.w	r2, r2, #1
 80031e6:	601a      	strne	r2, [r3, #0]
}
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	bf00      	nop
 80031ec:	40012c00 	.word	0x40012c00

080031f0 <HAL_TIM_PWM_Start>:
 80031f0:	f7ff bfe2 	b.w	80031b8 <HAL_TIM_OC_Start>

080031f4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031f4:	6803      	ldr	r3, [r0, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031fc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003206:	2320      	movs	r3, #32
 8003208:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800320c:	4770      	bx	lr
	...

08003210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003210:	b538      	push	{r3, r4, r5, lr}
 8003212:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003214:	6803      	ldr	r3, [r0, #0]
 8003216:	68c1      	ldr	r1, [r0, #12]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	2419      	movs	r4, #25
 800321c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003220:	430a      	orrs	r2, r1
 8003222:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003224:	6882      	ldr	r2, [r0, #8]
 8003226:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003228:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800322a:	4302      	orrs	r2, r0
 800322c:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 800322e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003232:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003236:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003238:	430a      	orrs	r2, r1
 800323a:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	69a9      	ldr	r1, [r5, #24]
 8003240:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003244:	430a      	orrs	r2, r1
 8003246:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003248:	4a0d      	ldr	r2, [pc, #52]	; (8003280 <UART_SetConfig+0x70>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d114      	bne.n	8003278 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800324e:	f7ff fb23 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003252:	4360      	muls	r0, r4
 8003254:	686c      	ldr	r4, [r5, #4]
 8003256:	2264      	movs	r2, #100	; 0x64
 8003258:	00a4      	lsls	r4, r4, #2
 800325a:	fbb0 f0f4 	udiv	r0, r0, r4
 800325e:	fbb0 f1f2 	udiv	r1, r0, r2
 8003262:	fb02 0311 	mls	r3, r2, r1, r0
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	3332      	adds	r3, #50	; 0x32
 800326a:	fbb3 f3f2 	udiv	r3, r3, r2
 800326e:	682c      	ldr	r4, [r5, #0]
 8003270:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003274:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8003276:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003278:	f7ff fafe 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 800327c:	e7e9      	b.n	8003252 <UART_SetConfig+0x42>
 800327e:	bf00      	nop
 8003280:	40013800 	.word	0x40013800

08003284 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	4604      	mov	r4, r0
 8003288:	460e      	mov	r6, r1
 800328a:	4617      	mov	r7, r2
 800328c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800328e:	6821      	ldr	r1, [r4, #0]
 8003290:	680b      	ldr	r3, [r1, #0]
 8003292:	ea36 0303 	bics.w	r3, r6, r3
 8003296:	d101      	bne.n	800329c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003298:	2000      	movs	r0, #0
 800329a:	e014      	b.n	80032c6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800329c:	1c6b      	adds	r3, r5, #1
 800329e:	d0f7      	beq.n	8003290 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032a0:	b995      	cbnz	r5, 80032c8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032a2:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80032a4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80032b6:	2320      	movs	r3, #32
 80032b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80032bc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80032c0:	2300      	movs	r3, #0
 80032c2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 80032c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032c8:	f7fd fe8e 	bl	8000fe8 <HAL_GetTick>
 80032cc:	1bc0      	subs	r0, r0, r7
 80032ce:	4285      	cmp	r5, r0
 80032d0:	d2dd      	bcs.n	800328e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80032d2:	e7e6      	b.n	80032a2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080032d4 <HAL_UART_Init>:
{
 80032d4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80032d6:	4604      	mov	r4, r0
 80032d8:	b340      	cbz	r0, 800332c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80032da:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80032de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032e2:	b91b      	cbnz	r3, 80032ec <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80032e4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80032e8:	f003 fb68 	bl	80069bc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80032ec:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80032ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80032f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80032f4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80032f6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80032f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032fc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80032fe:	f7ff ff87 	bl	8003210 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003302:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003304:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800330c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003314:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800331c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800331e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003320:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003322:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003326:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800332a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800332c:	2001      	movs	r0, #1
 800332e:	e7fc      	b.n	800332a <HAL_UART_Init+0x56>

08003330 <HAL_HalfDuplex_Init>:
{
 8003330:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003332:	4604      	mov	r4, r0
 8003334:	b360      	cbz	r0, 8003390 <HAL_HalfDuplex_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003336:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800333a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800333e:	b91b      	cbnz	r3, 8003348 <HAL_HalfDuplex_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003340:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003344:	f003 fb3a 	bl	80069bc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003348:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800334a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800334c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003350:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003352:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003354:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003358:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800335a:	f7ff ff59 	bl	8003210 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800335e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003360:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800336a:	695a      	ldr	r2, [r3, #20]
 800336c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003370:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	f042 0208 	orr.w	r2, r2, #8
 8003378:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003380:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003382:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003384:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003386:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800338a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800338e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003390:	2001      	movs	r0, #1
 8003392:	e7fc      	b.n	800338e <HAL_HalfDuplex_Init+0x5e>

08003394 <HAL_UART_Transmit>:
{
 8003394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003398:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800339a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800339e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80033a0:	2b20      	cmp	r3, #32
{
 80033a2:	460d      	mov	r5, r1
 80033a4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80033a6:	d14c      	bne.n	8003442 <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 80033a8:	2900      	cmp	r1, #0
 80033aa:	d048      	beq.n	800343e <HAL_UART_Transmit+0xaa>
 80033ac:	2a00      	cmp	r2, #0
 80033ae:	d046      	beq.n	800343e <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80033b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d044      	beq.n	8003442 <HAL_UART_Transmit+0xae>
 80033b8:	2301      	movs	r3, #1
 80033ba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033be:	2300      	movs	r3, #0
 80033c0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033c2:	2321      	movs	r3, #33	; 0x21
 80033c4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80033c8:	f7fd fe0e 	bl	8000fe8 <HAL_GetTick>
 80033cc:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80033ce:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80033d2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033d6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80033d8:	b29b      	uxth	r3, r3
 80033da:	b963      	cbnz	r3, 80033f6 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033dc:	463b      	mov	r3, r7
 80033de:	4632      	mov	r2, r6
 80033e0:	2140      	movs	r1, #64	; 0x40
 80033e2:	4620      	mov	r0, r4
 80033e4:	f7ff ff4e 	bl	8003284 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80033e8:	b9a0      	cbnz	r0, 8003414 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80033ea:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80033ec:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80033f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80033f4:	e00f      	b.n	8003416 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80033f6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033f8:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003400:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003402:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003408:	4620      	mov	r0, r4
 800340a:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800340c:	d10e      	bne.n	800342c <HAL_UART_Transmit+0x98>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800340e:	f7ff ff39 	bl	8003284 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003412:	b110      	cbz	r0, 800341a <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 8003414:	2003      	movs	r0, #3
}
 8003416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800341a:	882b      	ldrh	r3, [r5, #0]
 800341c:	6822      	ldr	r2, [r4, #0]
 800341e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003422:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003424:	6923      	ldr	r3, [r4, #16]
 8003426:	b943      	cbnz	r3, 800343a <HAL_UART_Transmit+0xa6>
          pData += 2U;
 8003428:	3502      	adds	r5, #2
 800342a:	e7d4      	b.n	80033d6 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800342c:	f7ff ff2a 	bl	8003284 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003430:	2800      	cmp	r0, #0
 8003432:	d1ef      	bne.n	8003414 <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	782a      	ldrb	r2, [r5, #0]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	3501      	adds	r5, #1
 800343c:	e7cb      	b.n	80033d6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800343e:	2001      	movs	r0, #1
 8003440:	e7e9      	b.n	8003416 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8003442:	2002      	movs	r0, #2
 8003444:	e7e7      	b.n	8003416 <HAL_UART_Transmit+0x82>

08003446 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003446:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800344a:	2b20      	cmp	r3, #32
 800344c:	d120      	bne.n	8003490 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 800344e:	b1e9      	cbz	r1, 800348c <HAL_UART_Receive_IT+0x46>
 8003450:	b1e2      	cbz	r2, 800348c <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8003452:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003456:	2b01      	cmp	r3, #1
 8003458:	d01a      	beq.n	8003490 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 800345a:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 800345c:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345e:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003460:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003462:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003464:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003468:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 800346a:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800346c:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 800346e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003472:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003476:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003478:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 800347a:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800347c:	f041 0101 	orr.w	r1, r1, #1
 8003480:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003482:	68d1      	ldr	r1, [r2, #12]
 8003484:	f041 0120 	orr.w	r1, r1, #32
 8003488:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 800348a:	4770      	bx	lr
      return HAL_ERROR;
 800348c:	2001      	movs	r0, #1
 800348e:	4770      	bx	lr
    return HAL_BUSY;
 8003490:	2002      	movs	r0, #2
}
 8003492:	4770      	bx	lr

08003494 <HAL_UART_TxCpltCallback>:
 8003494:	4770      	bx	lr

08003496 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003496:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800349a:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800349c:	2b22      	cmp	r3, #34	; 0x22
 800349e:	d133      	bne.n	8003508 <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034a0:	6881      	ldr	r1, [r0, #8]
 80034a2:	6904      	ldr	r4, [r0, #16]
 80034a4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80034a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80034aa:	6802      	ldr	r2, [r0, #0]
 80034ac:	d123      	bne.n	80034f6 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034ae:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80034b0:	b9ec      	cbnz	r4, 80034ee <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b6:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80034ba:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80034bc:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80034be:	3c01      	subs	r4, #1
 80034c0:	b2a4      	uxth	r4, r4
 80034c2:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80034c4:	b98c      	cbnz	r4, 80034ea <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034c6:	6803      	ldr	r3, [r0, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	f022 0220 	bic.w	r2, r2, #32
 80034ce:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034d6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80034e0:	2320      	movs	r3, #32
 80034e2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80034e6:	f001 fa2d 	bl	8004944 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80034ea:	2000      	movs	r0, #0
 80034ec:	e00d      	b.n	800350a <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	f823 2b01 	strh.w	r2, [r3], #1
 80034f4:	e7e1      	b.n	80034ba <UART_Receive_IT+0x24>
 80034f6:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034f8:	6852      	ldr	r2, [r2, #4]
 80034fa:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 80034fc:	b90c      	cbnz	r4, 8003502 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e7dc      	b.n	80034bc <UART_Receive_IT+0x26>
 8003502:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003506:	e7fa      	b.n	80034fe <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8003508:	2002      	movs	r0, #2
}
 800350a:	bd10      	pop	{r4, pc}

0800350c <HAL_UART_ErrorCallback>:
 800350c:	4770      	bx	lr
	...

08003510 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003510:	6803      	ldr	r3, [r0, #0]
{
 8003512:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003514:	681a      	ldr	r2, [r3, #0]
{
 8003516:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003518:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800351a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800351c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800351e:	d107      	bne.n	8003530 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003520:	0696      	lsls	r6, r2, #26
 8003522:	d558      	bpl.n	80035d6 <HAL_UART_IRQHandler+0xc6>
 8003524:	068d      	lsls	r5, r1, #26
 8003526:	d556      	bpl.n	80035d6 <HAL_UART_IRQHandler+0xc6>
}
 8003528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800352c:	f7ff bfb3 	b.w	8003496 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003530:	f015 0501 	ands.w	r5, r5, #1
 8003534:	d102      	bne.n	800353c <HAL_UART_IRQHandler+0x2c>
 8003536:	f411 7f90 	tst.w	r1, #288	; 0x120
 800353a:	d04c      	beq.n	80035d6 <HAL_UART_IRQHandler+0xc6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800353c:	07d3      	lsls	r3, r2, #31
 800353e:	d505      	bpl.n	800354c <HAL_UART_IRQHandler+0x3c>
 8003540:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003542:	bf42      	ittt	mi
 8003544:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8003546:	f043 0301 	orrmi.w	r3, r3, #1
 800354a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800354c:	0750      	lsls	r0, r2, #29
 800354e:	d504      	bpl.n	800355a <HAL_UART_IRQHandler+0x4a>
 8003550:	b11d      	cbz	r5, 800355a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003552:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003554:	f043 0302 	orr.w	r3, r3, #2
 8003558:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800355a:	0793      	lsls	r3, r2, #30
 800355c:	d504      	bpl.n	8003568 <HAL_UART_IRQHandler+0x58>
 800355e:	b11d      	cbz	r5, 8003568 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003560:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003568:	0716      	lsls	r6, r2, #28
 800356a:	d504      	bpl.n	8003576 <HAL_UART_IRQHandler+0x66>
 800356c:	b11d      	cbz	r5, 8003576 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800356e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003570:	f043 0308 	orr.w	r3, r3, #8
 8003574:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003576:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003578:	b343      	cbz	r3, 80035cc <HAL_UART_IRQHandler+0xbc>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800357a:	0695      	lsls	r5, r2, #26
 800357c:	d504      	bpl.n	8003588 <HAL_UART_IRQHandler+0x78>
 800357e:	0688      	lsls	r0, r1, #26
 8003580:	d502      	bpl.n	8003588 <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 8003582:	4620      	mov	r0, r4
 8003584:	f7ff ff87 	bl	8003496 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003588:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800358a:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800358c:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800358e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003590:	0711      	lsls	r1, r2, #28
 8003592:	d402      	bmi.n	800359a <HAL_UART_IRQHandler+0x8a>
 8003594:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003598:	d019      	beq.n	80035ce <HAL_UART_IRQHandler+0xbe>
        UART_EndRxTransfer(huart);
 800359a:	f7ff fe2b 	bl	80031f4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	0652      	lsls	r2, r2, #25
 80035a4:	d50f      	bpl.n	80035c6 <HAL_UART_IRQHandler+0xb6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035a6:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80035a8:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ae:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80035b0:	b148      	cbz	r0, 80035c6 <HAL_UART_IRQHandler+0xb6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035b2:	4b26      	ldr	r3, [pc, #152]	; (800364c <HAL_UART_IRQHandler+0x13c>)
 80035b4:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035b6:	f7fe f82f 	bl	8001618 <HAL_DMA_Abort_IT>
 80035ba:	b138      	cbz	r0, 80035cc <HAL_UART_IRQHandler+0xbc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80035be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80035c4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80035c6:	4620      	mov	r0, r4
 80035c8:	f7ff ffa0 	bl	800350c <HAL_UART_ErrorCallback>
}
 80035cc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80035ce:	f7ff ff9d 	bl	800350c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d2:	63e5      	str	r5, [r4, #60]	; 0x3c
 80035d4:	e7fa      	b.n	80035cc <HAL_UART_IRQHandler+0xbc>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035d6:	0616      	lsls	r6, r2, #24
 80035d8:	d528      	bpl.n	800362c <HAL_UART_IRQHandler+0x11c>
 80035da:	060d      	lsls	r5, r1, #24
 80035dc:	d526      	bpl.n	800362c <HAL_UART_IRQHandler+0x11c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035de:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80035e2:	2a21      	cmp	r2, #33	; 0x21
 80035e4:	d1f2      	bne.n	80035cc <HAL_UART_IRQHandler+0xbc>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035e6:	68a1      	ldr	r1, [r4, #8]
 80035e8:	6a22      	ldr	r2, [r4, #32]
 80035ea:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80035ee:	d118      	bne.n	8003622 <HAL_UART_IRQHandler+0x112>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035f0:	8811      	ldrh	r1, [r2, #0]
 80035f2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80035f6:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035f8:	6921      	ldr	r1, [r4, #16]
 80035fa:	b981      	cbnz	r1, 800361e <HAL_UART_IRQHandler+0x10e>
        huart->pTxBuffPtr += 2U;
 80035fc:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80035fe:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8003600:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003602:	3a01      	subs	r2, #1
 8003604:	b292      	uxth	r2, r2
 8003606:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003608:	2a00      	cmp	r2, #0
 800360a:	d1df      	bne.n	80035cc <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003612:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800361a:	60da      	str	r2, [r3, #12]
 800361c:	e7d6      	b.n	80035cc <HAL_UART_IRQHandler+0xbc>
        huart->pTxBuffPtr += 1U;
 800361e:	3201      	adds	r2, #1
 8003620:	e7ed      	b.n	80035fe <HAL_UART_IRQHandler+0xee>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003622:	1c51      	adds	r1, r2, #1
 8003624:	6221      	str	r1, [r4, #32]
 8003626:	7812      	ldrb	r2, [r2, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	e7e9      	b.n	8003600 <HAL_UART_IRQHandler+0xf0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800362c:	0650      	lsls	r0, r2, #25
 800362e:	d5cd      	bpl.n	80035cc <HAL_UART_IRQHandler+0xbc>
 8003630:	064a      	lsls	r2, r1, #25
 8003632:	d5cb      	bpl.n	80035cc <HAL_UART_IRQHandler+0xbc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003634:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003636:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800363e:	2320      	movs	r3, #32
 8003640:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003644:	f7ff ff26 	bl	8003494 <HAL_UART_TxCpltCallback>
 8003648:	e7c0      	b.n	80035cc <HAL_UART_IRQHandler+0xbc>
 800364a:	bf00      	nop
 800364c:	08003651 	.word	0x08003651

08003650 <UART_DMAAbortOnError>:
{
 8003650:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003652:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003654:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003656:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003658:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800365a:	f7ff ff57 	bl	800350c <HAL_UART_ErrorCallback>
}
 800365e:	bd08      	pop	{r3, pc}

08003660 <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 8003660:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003664:	2b01      	cmp	r3, #1
 8003666:	d011      	beq.n	800368c <HAL_HalfDuplex_EnableReceiver+0x2c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003668:	2324      	movs	r3, #36	; 0x24
  tmpreg = huart->Instance->CR1;
 800366a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpreg = huart->Instance->CR1;
 8003670:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8003672:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_RE;
 8003676:	f043 0304 	orr.w	r3, r3, #4
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800367a:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800367c:	2320      	movs	r3, #32
 800367e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8003682:	2300      	movs	r3, #0
 8003684:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8003688:	4618      	mov	r0, r3
 800368a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800368c:	2002      	movs	r0, #2
}
 800368e:	4770      	bx	lr

08003690 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003690:	b084      	sub	sp, #16
 8003692:	a801      	add	r0, sp, #4
 8003694:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003698:	b004      	add	sp, #16
 800369a:	2000      	movs	r0, #0
 800369c:	4770      	bx	lr

0800369e <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800369e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80036a2:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80036a6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80036aa:	2000      	movs	r0, #0
 80036ac:	4770      	bx	lr

080036ae <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80036ae:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80036b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036b6:	045b      	lsls	r3, r3, #17
 80036b8:	0c5b      	lsrs	r3, r3, #17
 80036ba:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80036be:	2000      	movs	r0, #0
 80036c0:	4770      	bx	lr

080036c2 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80036c2:	2000      	movs	r0, #0
 80036c4:	4770      	bx	lr

080036c6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80036c6:	b084      	sub	sp, #16
 80036c8:	b510      	push	{r4, lr}
 80036ca:	ac03      	add	r4, sp, #12
 80036cc:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80036d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = USB_CNTR_FRES;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80036e0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80036e4:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80036e8:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
}
 80036ec:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 80036ee:	f442 423f 	orr.w	r2, r2, #48896	; 0xbf00
 80036f2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	4770      	bx	lr
	...

080036fc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80036fe:	780c      	ldrb	r4, [r1, #0]
{
 8003700:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003702:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8003706:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003708:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800370c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 8003710:	2803      	cmp	r0, #3
 8003712:	d803      	bhi.n	800371c <USB_ActivateEndpoint+0x20>
 8003714:	e8df f000 	tbb	[pc, r0]
 8003718:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 800371c:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800371e:	f248 0580 	movw	r5, #32896	; 0x8080
 8003722:	432a      	orrs	r2, r5
 8003724:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003728:	780e      	ldrb	r6, [r1, #0]
 800372a:	4a9e      	ldr	r2, [pc, #632]	; (80039a4 <USB_ActivateEndpoint+0x2a8>)
 800372c:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8003730:	4335      	orrs	r5, r6
 8003732:	4014      	ands	r4, r2
 8003734:	432c      	orrs	r4, r5
 8003736:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 800373a:	7b0d      	ldrb	r5, [r1, #12]
 800373c:	780c      	ldrb	r4, [r1, #0]
 800373e:	2d00      	cmp	r5, #0
 8003740:	f040 8082 	bne.w	8003848 <USB_ActivateEndpoint+0x14c>
 8003744:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 8003746:	784e      	ldrb	r6, [r1, #1]
 8003748:	086d      	lsrs	r5, r5, #1
 800374a:	006d      	lsls	r5, r5, #1
 800374c:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8003750:	b376      	cbz	r6, 80037b0 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003752:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8003756:	4434      	add	r4, r6
 8003758:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800375c:	780d      	ldrb	r5, [r1, #0]
 800375e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003762:	0667      	lsls	r7, r4, #25
 8003764:	d508      	bpl.n	8003778 <USB_ActivateEndpoint+0x7c>
 8003766:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800376a:	4022      	ands	r2, r4
 800376c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003770:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003774:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003778:	78ca      	ldrb	r2, [r1, #3]
 800377a:	780c      	ldrb	r4, [r1, #0]
 800377c:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800377e:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8003782:	4a89      	ldr	r2, [pc, #548]	; (80039a8 <USB_ActivateEndpoint+0x2ac>)
 8003784:	ea02 0201 	and.w	r2, r2, r1
 8003788:	bf18      	it	ne
 800378a:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800378e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003792:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003796:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800379a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 800379c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80037a0:	2000      	movs	r0, #0
 80037a2:	e7bc      	b.n	800371e <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 80037a4:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80037a8:	e7fa      	b.n	80037a0 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80037aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037ae:	e7f7      	b.n	80037a0 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037b0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037b4:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037b6:	4414      	add	r4, r2
 80037b8:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037bc:	780a      	ldrb	r2, [r1, #0]
 80037be:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80037c2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80037c6:	b2a4      	uxth	r4, r4
 80037c8:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80037cc:	bb56      	cbnz	r6, 8003824 <USB_ActivateEndpoint+0x128>
 80037ce:	5b15      	ldrh	r5, [r2, r4]
 80037d0:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 80037d4:	042d      	lsls	r5, r5, #16
 80037d6:	0c2d      	lsrs	r5, r5, #16
 80037d8:	5315      	strh	r5, [r2, r4]
 80037da:	5b15      	ldrh	r5, [r2, r4]
 80037dc:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80037e0:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037e2:	780c      	ldrb	r4, [r1, #0]
 80037e4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80037e8:	0457      	lsls	r7, r2, #17
 80037ea:	d50b      	bpl.n	8003804 <USB_ActivateEndpoint+0x108>
 80037ec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80037f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80037f4:	0512      	lsls	r2, r2, #20
 80037f6:	0d12      	lsrs	r2, r2, #20
 80037f8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80037fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003800:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003804:	7809      	ldrb	r1, [r1, #0]
 8003806:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800380a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800380e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003812:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800381a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800381e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003822:	e7ba      	b.n	800379a <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003824:	2e3e      	cmp	r6, #62	; 0x3e
 8003826:	d806      	bhi.n	8003836 <USB_ActivateEndpoint+0x13a>
 8003828:	0875      	lsrs	r5, r6, #1
 800382a:	07f6      	lsls	r6, r6, #31
 800382c:	bf48      	it	mi
 800382e:	3501      	addmi	r5, #1
 8003830:	02ad      	lsls	r5, r5, #10
 8003832:	b2ad      	uxth	r5, r5
 8003834:	e7d4      	b.n	80037e0 <USB_ActivateEndpoint+0xe4>
 8003836:	0977      	lsrs	r7, r6, #5
 8003838:	06f5      	lsls	r5, r6, #27
 800383a:	4d5c      	ldr	r5, [pc, #368]	; (80039ac <USB_ActivateEndpoint+0x2b0>)
 800383c:	bf08      	it	eq
 800383e:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8003842:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8003846:	e7f4      	b.n	8003832 <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003848:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 800384c:	4015      	ands	r5, r2
 800384e:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8003852:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003856:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800385a:	780c      	ldrb	r4, [r1, #0]
 800385c:	890d      	ldrh	r5, [r1, #8]
 800385e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8003862:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8003866:	086d      	lsrs	r5, r5, #1
 8003868:	b2b6      	uxth	r6, r6
 800386a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800386e:	006d      	lsls	r5, r5, #1
 8003870:	53a5      	strh	r5, [r4, r6]
 8003872:	780c      	ldrb	r4, [r1, #0]
 8003874:	894d      	ldrh	r5, [r1, #10]
 8003876:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800387a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800387e:	086d      	lsrs	r5, r5, #1
 8003880:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 8003884:	006d      	lsls	r5, r5, #1
 8003886:	b2b6      	uxth	r6, r6
 8003888:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 800388a:	784c      	ldrb	r4, [r1, #1]
 800388c:	780d      	ldrb	r5, [r1, #0]
 800388e:	2c00      	cmp	r4, #0
 8003890:	d143      	bne.n	800391a <USB_ActivateEndpoint+0x21e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003892:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003896:	0466      	lsls	r6, r4, #17
 8003898:	d508      	bpl.n	80038ac <USB_ActivateEndpoint+0x1b0>
 800389a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800389e:	4022      	ands	r2, r4
 80038a0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80038a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038a8:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038ac:	780c      	ldrb	r4, [r1, #0]
 80038ae:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80038b2:	0655      	lsls	r5, r2, #25
 80038b4:	d50b      	bpl.n	80038ce <USB_ActivateEndpoint+0x1d2>
 80038b6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80038ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80038be:	0512      	lsls	r2, r2, #20
 80038c0:	0d12      	lsrs	r2, r2, #20
 80038c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038c6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80038ca:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80038ce:	780c      	ldrb	r4, [r1, #0]
 80038d0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80038d4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80038d8:	0512      	lsls	r2, r2, #20
 80038da:	0d12      	lsrs	r2, r2, #20
 80038dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038e0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80038e4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038e8:	f248 0480 	movw	r4, #32896	; 0x8080
 80038ec:	780d      	ldrb	r5, [r1, #0]
 80038ee:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80038f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038fa:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80038fe:	4322      	orrs	r2, r4
 8003900:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003904:	7809      	ldrb	r1, [r1, #0]
 8003906:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800390a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800390e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003912:	4314      	orrs	r4, r2
 8003914:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 8003918:	e73f      	b.n	800379a <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800391a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800391e:	0464      	lsls	r4, r4, #17
 8003920:	d508      	bpl.n	8003934 <USB_ActivateEndpoint+0x238>
 8003922:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003926:	4022      	ands	r2, r4
 8003928:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800392c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003930:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003934:	780c      	ldrb	r4, [r1, #0]
 8003936:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800393a:	0652      	lsls	r2, r2, #25
 800393c:	d50b      	bpl.n	8003956 <USB_ActivateEndpoint+0x25a>
 800393e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003942:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003946:	0512      	lsls	r2, r2, #20
 8003948:	0d12      	lsrs	r2, r2, #20
 800394a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800394e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003952:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003956:	780c      	ldrb	r4, [r1, #0]
 8003958:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800395c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003960:	0512      	lsls	r2, r2, #20
 8003962:	0d12      	lsrs	r2, r2, #20
 8003964:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003968:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800396c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8003970:	78ca      	ldrb	r2, [r1, #3]
 8003972:	780c      	ldrb	r4, [r1, #0]
 8003974:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003976:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 800397a:	4a0b      	ldr	r2, [pc, #44]	; (80039a8 <USB_ActivateEndpoint+0x2ac>)
 800397c:	ea02 0205 	and.w	r2, r2, r5
 8003980:	bf18      	it	ne
 8003982:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800398a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800398e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003992:	7809      	ldrb	r1, [r1, #0]
 8003994:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003998:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800399c:	0492      	lsls	r2, r2, #18
 800399e:	0c92      	lsrs	r2, r2, #18
 80039a0:	e739      	b.n	8003816 <USB_ActivateEndpoint+0x11a>
 80039a2:	bf00      	nop
 80039a4:	ffff8f8f 	.word	0xffff8f8f
 80039a8:	ffff8fbf 	.word	0xffff8fbf
 80039ac:	ffff8000 	.word	0xffff8000

080039b0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80039b0:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 80039b2:	7b0c      	ldrb	r4, [r1, #12]
 80039b4:	784a      	ldrb	r2, [r1, #1]
 80039b6:	780b      	ldrb	r3, [r1, #0]
 80039b8:	bbbc      	cbnz	r4, 8003a2a <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 80039ba:	b1f2      	cbz	r2, 80039fa <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039bc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80039c0:	0652      	lsls	r2, r2, #25
 80039c2:	d50b      	bpl.n	80039dc <USB_DeactivateEndpoint+0x2c>
 80039c4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80039c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80039cc:	0512      	lsls	r2, r2, #20
 80039ce:	0d12      	lsrs	r2, r2, #20
 80039d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039d4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80039d8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039dc:	780a      	ldrb	r2, [r1, #0]
 80039de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039e6:	051b      	lsls	r3, r3, #20
 80039e8:	0d1b      	lsrs	r3, r3, #20
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80039ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80039f6:	2000      	movs	r0, #0
 80039f8:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039fa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80039fe:	0454      	lsls	r4, r2, #17
 8003a00:	d50b      	bpl.n	8003a1a <USB_DeactivateEndpoint+0x6a>
 8003a02:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a06:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003a0a:	0512      	lsls	r2, r2, #20
 8003a0c:	0d12      	lsrs	r2, r2, #20
 8003a0e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003a12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a16:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a1a:	780a      	ldrb	r2, [r1, #0]
 8003a1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a24:	049b      	lsls	r3, r3, #18
 8003a26:	0c9b      	lsrs	r3, r3, #18
 8003a28:	e7df      	b.n	80039ea <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8003a2a:	2a00      	cmp	r2, #0
 8003a2c:	d144      	bne.n	8003ab8 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a2e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a32:	0452      	lsls	r2, r2, #17
 8003a34:	d50b      	bpl.n	8003a4e <USB_DeactivateEndpoint+0x9e>
 8003a36:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a3a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003a3e:	0512      	lsls	r2, r2, #20
 8003a40:	0d12      	lsrs	r2, r2, #20
 8003a42:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003a46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a4a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a4e:	780a      	ldrb	r2, [r1, #0]
 8003a50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a54:	065c      	lsls	r4, r3, #25
 8003a56:	d50b      	bpl.n	8003a70 <USB_DeactivateEndpoint+0xc0>
 8003a58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a60:	051b      	lsls	r3, r3, #20
 8003a62:	0d1b      	lsrs	r3, r3, #20
 8003a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a6c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003a70:	780a      	ldrb	r2, [r1, #0]
 8003a72:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a7a:	051b      	lsls	r3, r3, #20
 8003a7c:	0d1b      	lsrs	r3, r3, #20
 8003a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a86:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a8a:	f248 0280 	movw	r2, #32896	; 0x8080
 8003a8e:	780c      	ldrb	r4, [r1, #0]
 8003a90:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003a94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003aa2:	7809      	ldrb	r1, [r1, #0]
 8003aa4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8003ab6:	e79e      	b.n	80039f6 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ab8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003abc:	0452      	lsls	r2, r2, #17
 8003abe:	d50b      	bpl.n	8003ad8 <USB_DeactivateEndpoint+0x128>
 8003ac0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003ac4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003ac8:	0512      	lsls	r2, r2, #20
 8003aca:	0d12      	lsrs	r2, r2, #20
 8003acc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003ad0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ad4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ad8:	780a      	ldrb	r2, [r1, #0]
 8003ada:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ade:	065b      	lsls	r3, r3, #25
 8003ae0:	d50b      	bpl.n	8003afa <USB_DeactivateEndpoint+0x14a>
 8003ae2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aea:	051b      	lsls	r3, r3, #20
 8003aec:	0d1b      	lsrs	r3, r3, #20
 8003aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003af6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003afa:	780a      	ldrb	r2, [r1, #0]
 8003afc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b04:	051b      	lsls	r3, r3, #20
 8003b06:	0d1b      	lsrs	r3, r3, #20
 8003b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b10:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b14:	f248 0280 	movw	r2, #32896	; 0x8080
 8003b18:	780c      	ldrb	r4, [r1, #0]
 8003b1a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b2c:	7809      	ldrb	r1, [r1, #0]
 8003b2e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003b32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	e7b9      	b.n	8003ab0 <USB_DeactivateEndpoint+0x100>

08003b3c <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003b3c:	784b      	ldrb	r3, [r1, #1]
 8003b3e:	780a      	ldrb	r2, [r1, #0]
 8003b40:	b17b      	cbz	r3, 8003b62 <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003b42:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b4e:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003b5e:	2000      	movs	r0, #0
 8003b60:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003b62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b72:	e7ee      	b.n	8003b52 <USB_EPSetStall+0x16>

08003b74 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003b74:	7b0b      	ldrb	r3, [r1, #12]
 8003b76:	bb23      	cbnz	r3, 8003bc2 <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 8003b78:	784b      	ldrb	r3, [r1, #1]
 8003b7a:	780a      	ldrb	r2, [r1, #0]
 8003b7c:	b31b      	cbz	r3, 8003bc6 <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b82:	065b      	lsls	r3, r3, #25
 8003b84:	d50b      	bpl.n	8003b9e <USB_EPClearStall+0x2a>
 8003b86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b8e:	051b      	lsls	r3, r3, #20
 8003b90:	0d1b      	lsrs	r3, r3, #20
 8003b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b9a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003b9e:	78cb      	ldrb	r3, [r1, #3]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d00e      	beq.n	8003bc2 <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ba4:	780a      	ldrb	r2, [r1, #0]
 8003ba6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb2:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bc6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bca:	045b      	lsls	r3, r3, #17
 8003bcc:	d50b      	bpl.n	8003be6 <USB_EPClearStall+0x72>
 8003bce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd6:	051b      	lsls	r3, r3, #20
 8003bd8:	0d1b      	lsrs	r3, r3, #20
 8003bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003be6:	780a      	ldrb	r2, [r1, #0]
 8003be8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003bf8:	e7dd      	b.n	8003bb6 <USB_EPClearStall+0x42>

08003bfa <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003bfa:	b911      	cbnz	r1, 8003c02 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003c02:	2000      	movs	r0, #0
 8003c04:	4770      	bx	lr

08003c06 <USB_DevConnect>:
 8003c06:	2000      	movs	r0, #0
 8003c08:	4770      	bx	lr

08003c0a <USB_DevDisconnect>:
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	4770      	bx	lr

08003c0e <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003c0e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003c12:	4770      	bx	lr

08003c14 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003c14:	2000      	movs	r0, #0
 8003c16:	4770      	bx	lr

08003c18 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c18:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003c1c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d100      	bne.n	8003c2e <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8003c2c:	4770      	bx	lr
 8003c2e:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8003c32:	f822 0b04 	strh.w	r0, [r2], #4
 8003c36:	e7f7      	b.n	8003c28 <USB_WritePMA+0x10>

08003c38 <USB_EPStartXfer>:
{
 8003c38:	b570      	push	{r4, r5, r6, lr}
 8003c3a:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8003c3c:	7849      	ldrb	r1, [r1, #1]
{
 8003c3e:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8003c40:	2901      	cmp	r1, #1
 8003c42:	69aa      	ldr	r2, [r5, #24]
 8003c44:	692b      	ldr	r3, [r5, #16]
 8003c46:	7b28      	ldrb	r0, [r5, #12]
 8003c48:	d15d      	bne.n	8003d06 <USB_EPStartXfer+0xce>
    if (ep->xfer_len > ep->maxpacket)
 8003c4a:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003c4c:	bf9d      	ittte	ls
 8003c4e:	2300      	movls	r3, #0
 8003c50:	61ab      	strls	r3, [r5, #24]
 8003c52:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8003c54:	1ad2      	subhi	r2, r2, r3
 8003c56:	bf88      	it	hi
 8003c58:	61aa      	strhi	r2, [r5, #24]
 8003c5a:	6969      	ldr	r1, [r5, #20]
 8003c5c:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8003c5e:	b9e8      	cbnz	r0, 8003c9c <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003c60:	4633      	mov	r3, r6
 8003c62:	88ea      	ldrh	r2, [r5, #6]
 8003c64:	4620      	mov	r0, r4
 8003c66:	f7ff ffd7 	bl	8003c18 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003c6a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8003c6e:	782a      	ldrb	r2, [r5, #0]
 8003c70:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8003c74:	0112      	lsls	r2, r2, #4
 8003c76:	440b      	add	r3, r1
 8003c78:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003c7a:	782a      	ldrb	r2, [r5, #0]
 8003c7c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c88:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c94:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8003c98:	2000      	movs	r0, #0
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003c9c:	782b      	ldrb	r3, [r5, #0]
 8003c9e:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ca2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003ca6:	0652      	lsls	r2, r2, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ca8:	bf4b      	itete	mi
 8003caa:	f204 420c 	addwmi	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cae:	f204 4204 	addwpl	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cb2:	1812      	addmi	r2, r2, r0
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cb4:	1812      	addpl	r2, r2, r0
 8003cb6:	ea4f 1303 	mov.w	r3, r3, lsl #4
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cba:	bf4b      	itete	mi
 8003cbc:	52d6      	strhmi	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cbe:	52d6      	strhpl	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 8003cc0:	896a      	ldrhmi	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8003cc2:	892a      	ldrhpl	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cc4:	4633      	mov	r3, r6
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f7ff ffa6 	bl	8003c18 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003ccc:	786b      	ldrb	r3, [r5, #1]
 8003cce:	782a      	ldrb	r2, [r5, #0]
 8003cd0:	b963      	cbnz	r3, 8003cec <USB_EPStartXfer+0xb4>
 8003cd2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cda:	051b      	lsls	r3, r3, #20
 8003cdc:	0d1b      	lsrs	r3, r3, #20
 8003cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ce6:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8003cea:	e7c6      	b.n	8003c7a <USB_EPStartXfer+0x42>
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d1c4      	bne.n	8003c7a <USB_EPStartXfer+0x42>
 8003cf0:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cf8:	051b      	lsls	r3, r3, #20
 8003cfa:	0d1b      	lsrs	r3, r3, #20
 8003cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d04:	e7ef      	b.n	8003ce6 <USB_EPStartXfer+0xae>
    if (ep->xfer_len > ep->maxpacket)
 8003d06:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003d08:	bf93      	iteet	ls
 8003d0a:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8003d0c:	1ad2      	subhi	r2, r2, r3
 8003d0e:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8003d10:	61ab      	strls	r3, [r5, #24]
 8003d12:	bf98      	it	ls
 8003d14:	4613      	movls	r3, r2
 8003d16:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8003d18:	b990      	cbnz	r0, 8003d40 <USB_EPStartXfer+0x108>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003d1a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8003d1e:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8003d22:	4401      	add	r1, r0
 8003d24:	0112      	lsls	r2, r2, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d13b      	bne.n	8003da2 <USB_EPStartXfer+0x16a>
 8003d2a:	5a8b      	ldrh	r3, [r1, r2]
 8003d2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	0c1b      	lsrs	r3, r3, #16
 8003d34:	528b      	strh	r3, [r1, r2]
 8003d36:	5a8b      	ldrh	r3, [r1, r2]
 8003d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d3c:	528b      	strh	r3, [r1, r2]
 8003d3e:	e039      	b.n	8003db4 <USB_EPStartXfer+0x17c>
 8003d40:	b981      	cbnz	r1, 8003d64 <USB_EPStartXfer+0x12c>
 8003d42:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8003d46:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8003d4a:	4401      	add	r1, r0
 8003d4c:	0112      	lsls	r2, r2, #4
 8003d4e:	b9b3      	cbnz	r3, 8003d7e <USB_EPStartXfer+0x146>
 8003d50:	5a88      	ldrh	r0, [r1, r2]
 8003d52:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8003d56:	0400      	lsls	r0, r0, #16
 8003d58:	0c00      	lsrs	r0, r0, #16
 8003d5a:	5288      	strh	r0, [r1, r2]
 8003d5c:	5a88      	ldrh	r0, [r1, r2]
 8003d5e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003d62:	5288      	strh	r0, [r1, r2]
 8003d64:	7869      	ldrb	r1, [r5, #1]
 8003d66:	782a      	ldrb	r2, [r5, #0]
 8003d68:	2900      	cmp	r1, #0
 8003d6a:	d0d6      	beq.n	8003d1a <USB_EPStartXfer+0xe2>
 8003d6c:	2901      	cmp	r1, #1
 8003d6e:	d121      	bne.n	8003db4 <USB_EPStartXfer+0x17c>
 8003d70:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8003d74:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8003d78:	4401      	add	r1, r0
 8003d7a:	0112      	lsls	r2, r2, #4
 8003d7c:	e02c      	b.n	8003dd8 <USB_EPStartXfer+0x1a0>
 8003d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8003d80:	d806      	bhi.n	8003d90 <USB_EPStartXfer+0x158>
 8003d82:	0858      	lsrs	r0, r3, #1
 8003d84:	07de      	lsls	r6, r3, #31
 8003d86:	bf48      	it	mi
 8003d88:	3001      	addmi	r0, #1
 8003d8a:	0280      	lsls	r0, r0, #10
 8003d8c:	b280      	uxth	r0, r0
 8003d8e:	e7e8      	b.n	8003d62 <USB_EPStartXfer+0x12a>
 8003d90:	095e      	lsrs	r6, r3, #5
 8003d92:	06d8      	lsls	r0, r3, #27
 8003d94:	4811      	ldr	r0, [pc, #68]	; (8003ddc <USB_EPStartXfer+0x1a4>)
 8003d96:	bf08      	it	eq
 8003d98:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003d9c:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8003da0:	e7f4      	b.n	8003d8c <USB_EPStartXfer+0x154>
 8003da2:	2b3e      	cmp	r3, #62	; 0x3e
 8003da4:	d810      	bhi.n	8003dc8 <USB_EPStartXfer+0x190>
 8003da6:	0858      	lsrs	r0, r3, #1
 8003da8:	07de      	lsls	r6, r3, #31
 8003daa:	bf48      	it	mi
 8003dac:	3001      	addmi	r0, #1
 8003dae:	0280      	lsls	r0, r0, #10
 8003db0:	b280      	uxth	r0, r0
 8003db2:	5288      	strh	r0, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003db4:	782a      	ldrb	r2, [r5, #0]
 8003db6:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003dc6:	e761      	b.n	8003c8c <USB_EPStartXfer+0x54>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003dc8:	0958      	lsrs	r0, r3, #5
 8003dca:	06db      	lsls	r3, r3, #27
 8003dcc:	4b03      	ldr	r3, [pc, #12]	; (8003ddc <USB_EPStartXfer+0x1a4>)
 8003dce:	bf08      	it	eq
 8003dd0:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003dd4:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	e7af      	b.n	8003d3c <USB_EPStartXfer+0x104>
 8003ddc:	ffff8000 	.word	0xffff8000

08003de0 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003de0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8003de4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003de6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003dea:	085d      	lsrs	r5, r3, #1
 8003dec:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003dee:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8003df0:	462e      	mov	r6, r5
 8003df2:	3002      	adds	r0, #2
 8003df4:	b936      	cbnz	r6, 8003e04 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003df6:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8003df8:	bf44      	itt	mi
 8003dfa:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003dfe:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8003e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003e04:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8003e08:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8003e0a:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003e0c:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003e10:	0a24      	lsrs	r4, r4, #8
 8003e12:	f800 4c01 	strb.w	r4, [r0, #-1]
 8003e16:	e7ec      	b.n	8003df2 <USB_ReadPMA+0x12>

08003e18 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003e18:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8003e1c:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003e1e:	b16b      	cbz	r3, 8003e3c <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e20:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003e24:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003e28:	28ff      	cmp	r0, #255	; 0xff
 8003e2a:	d007      	beq.n	8003e3c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003e32:	4621      	mov	r1, r4
 8003e34:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003e36:	23ff      	movs	r3, #255	; 0xff
 8003e38:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	bd10      	pop	{r4, pc}

08003e40 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003e40:	2343      	movs	r3, #67	; 0x43
 8003e42:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003e44:	4800      	ldr	r0, [pc, #0]	; (8003e48 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003e46:	4770      	bx	lr
 8003e48:	20000040 	.word	0x20000040

08003e4c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003e4c:	2343      	movs	r3, #67	; 0x43
 8003e4e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003e50:	4800      	ldr	r0, [pc, #0]	; (8003e54 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003e52:	4770      	bx	lr
 8003e54:	20000084 	.word	0x20000084

08003e58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003e58:	2343      	movs	r3, #67	; 0x43
 8003e5a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003e5c:	4800      	ldr	r0, [pc, #0]	; (8003e60 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003e5e:	4770      	bx	lr
 8003e60:	200000d4 	.word	0x200000d4

08003e64 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003e64:	230a      	movs	r3, #10
 8003e66:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003e68:	4800      	ldr	r0, [pc, #0]	; (8003e6c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003e6a:	4770      	bx	lr
 8003e6c:	200000c8 	.word	0x200000c8

08003e70 <USBD_CDC_DataOut>:
{
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e74:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003e78:	f003 f956 	bl	8007128 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8003e7c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003e80:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003e84:	b14b      	cbz	r3, 8003e9a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003e86:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8003e8a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003e94:	4798      	blx	r3
    return USBD_OK;
 8003e96:	2000      	movs	r0, #0
}
 8003e98:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003e9a:	2002      	movs	r0, #2
 8003e9c:	e7fc      	b.n	8003e98 <USBD_CDC_DataOut+0x28>

08003e9e <USBD_CDC_DataIn>:
{
 8003e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003ea0:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8003ea4:	b1ce      	cbz	r6, 8003eda <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003ea6:	2314      	movs	r3, #20
 8003ea8:	fb03 0301 	mla	r3, r3, r1, r0
 8003eac:	69da      	ldr	r2, [r3, #28]
 8003eae:	b182      	cbz	r2, 8003ed2 <USBD_CDC_DataIn+0x34>
 8003eb0:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8003eb4:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8003eb8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003eba:	fbb2 f4f5 	udiv	r4, r2, r5
 8003ebe:	fb05 2414 	mls	r4, r5, r4, r2
 8003ec2:	b934      	cbnz	r4, 8003ed2 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8003ec4:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003ec6:	4622      	mov	r2, r4
 8003ec8:	4623      	mov	r3, r4
 8003eca:	f003 f911 	bl	80070f0 <USBD_LL_Transmit>
    return USBD_OK;
 8003ece:	4620      	mov	r0, r4
}
 8003ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8003ed8:	e7fa      	b.n	8003ed0 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8003eda:	2002      	movs	r0, #2
 8003edc:	e7f8      	b.n	8003ed0 <USBD_CDC_DataIn+0x32>

08003ede <USBD_CDC_Setup>:
{
 8003ede:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8003ee2:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ee6:	780a      	ldrb	r2, [r1, #0]
{
 8003ee8:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003eea:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8003eee:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ef0:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003ef4:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8003ef8:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003efc:	d028      	beq.n	8003f50 <USBD_CDC_Setup+0x72>
 8003efe:	2c20      	cmp	r4, #32
 8003f00:	d145      	bne.n	8003f8e <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 8003f02:	88cc      	ldrh	r4, [r1, #6]
 8003f04:	784b      	ldrb	r3, [r1, #1]
 8003f06:	b1e4      	cbz	r4, 8003f42 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8003f08:	0612      	lsls	r2, r2, #24
 8003f0a:	d511      	bpl.n	8003f30 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f0c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003f10:	4639      	mov	r1, r7
 8003f12:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003f16:	4618      	mov	r0, r3
 8003f18:	4622      	mov	r2, r4
 8003f1a:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003f1c:	88f2      	ldrh	r2, [r6, #6]
 8003f1e:	4639      	mov	r1, r7
 8003f20:	4628      	mov	r0, r5
 8003f22:	f000 fc46 	bl	80047b2 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003f26:	4644      	mov	r4, r8
}
 8003f28:	4620      	mov	r0, r4
 8003f2a:	b003      	add	sp, #12
 8003f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8003f30:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003f34:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003f38:	4622      	mov	r2, r4
 8003f3a:	4639      	mov	r1, r7
 8003f3c:	f000 fc4e 	bl	80047dc <USBD_CtlPrepareRx>
 8003f40:	e7f1      	b.n	8003f26 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f42:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003f46:	4618      	mov	r0, r3
 8003f48:	6895      	ldr	r5, [r2, #8]
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	47a8      	blx	r5
 8003f4e:	e7eb      	b.n	8003f28 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8003f50:	784f      	ldrb	r7, [r1, #1]
 8003f52:	2f0a      	cmp	r7, #10
 8003f54:	d00d      	beq.n	8003f72 <USBD_CDC_Setup+0x94>
 8003f56:	2f0b      	cmp	r7, #11
 8003f58:	d015      	beq.n	8003f86 <USBD_CDC_Setup+0xa8>
 8003f5a:	b9c7      	cbnz	r7, 8003f8e <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f5c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d114      	bne.n	8003f8e <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003f64:	2202      	movs	r2, #2
 8003f66:	f10d 0106 	add.w	r1, sp, #6
 8003f6a:	f000 fc22 	bl	80047b2 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003f6e:	463c      	mov	r4, r7
 8003f70:	e7da      	b.n	8003f28 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f72:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d109      	bne.n	8003f8e <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f10d 0105 	add.w	r1, sp, #5
 8003f80:	f000 fc17 	bl	80047b2 <USBD_CtlSendData>
 8003f84:	e7d0      	b.n	8003f28 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003f86:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d0cc      	beq.n	8003f28 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8003f8e:	4631      	mov	r1, r6
 8003f90:	4628      	mov	r0, r5
 8003f92:	f000 fbe7 	bl	8004764 <USBD_CtlError>
          ret = USBD_FAIL;
 8003f96:	2402      	movs	r4, #2
          break;
 8003f98:	e7c6      	b.n	8003f28 <USBD_CDC_Setup+0x4a>

08003f9a <USBD_CDC_DeInit>:
{
 8003f9a:	b538      	push	{r3, r4, r5, lr}
 8003f9c:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003f9e:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003fa0:	2181      	movs	r1, #129	; 0x81
 8003fa2:	f003 f85d 	bl	8007060 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003fa6:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003fa8:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003faa:	4620      	mov	r0, r4
 8003fac:	f003 f858 	bl	8007060 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003fb0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003fb4:	2182      	movs	r1, #130	; 0x82
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f003 f852 	bl	8007060 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8003fbc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003fc0:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003fc2:	b14b      	cbz	r3, 8003fd8 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003fc4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003fcc:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8003fd0:	f003 f8b2 	bl	8007138 <USBD_static_free>
    pdev->pClassData = NULL;
 8003fd4:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8003fd8:	2000      	movs	r0, #0
 8003fda:	bd38      	pop	{r3, r4, r5, pc}

08003fdc <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003fdc:	7c03      	ldrb	r3, [r0, #16]
{
 8003fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe2:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003fe4:	bbcb      	cbnz	r3, 800405a <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fea:	2202      	movs	r2, #2
 8003fec:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003fee:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003ff0:	f003 f826 	bl	8007040 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003ff8:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	4620      	mov	r0, r4
 8004000:	f003 f81e 	bl	8007040 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004004:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004008:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800400a:	2308      	movs	r3, #8
 800400c:	2203      	movs	r2, #3
 800400e:	2182      	movs	r1, #130	; 0x82
 8004010:	4620      	mov	r0, r4
 8004012:	f003 f815 	bl	8007040 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004016:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004018:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800401c:	f003 f888 	bl	8007130 <USBD_static_malloc>
 8004020:	4606      	mov	r6, r0
 8004022:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8004026:	b350      	cbz	r0, 800407e <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 8004028:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800402a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004032:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8004036:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 800403a:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800403e:	f1b8 0f00 	cmp.w	r8, #0
 8004042:	d113      	bne.n	800406c <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004048:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800404c:	4629      	mov	r1, r5
 800404e:	4620      	mov	r0, r4
 8004050:	f003 f85c 	bl	800710c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004054:	4640      	mov	r0, r8
}
 8004056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800405a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800405c:	2340      	movs	r3, #64	; 0x40
 800405e:	2202      	movs	r2, #2
 8004060:	2181      	movs	r1, #129	; 0x81
 8004062:	f002 ffed 	bl	8007040 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004066:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004068:	2340      	movs	r3, #64	; 0x40
 800406a:	e7c6      	b.n	8003ffa <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800406c:	2340      	movs	r3, #64	; 0x40
 800406e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004072:	4629      	mov	r1, r5
 8004074:	4620      	mov	r0, r4
 8004076:	f003 f849 	bl	800710c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800407a:	4638      	mov	r0, r7
 800407c:	e7eb      	b.n	8004056 <USBD_CDC_Init+0x7a>
    ret = 1U;
 800407e:	4628      	mov	r0, r5
 8004080:	e7e9      	b.n	8004056 <USBD_CDC_Init+0x7a>

08004082 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8004082:	b119      	cbz	r1, 800408c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8004084:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8004088:	2000      	movs	r0, #0
 800408a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800408c:	2002      	movs	r0, #2
  }

  return ret;
}
 800408e:	4770      	bx	lr

08004090 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004090:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8004094:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8004096:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800409a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800409e:	4770      	bx	lr

080040a0 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80040a0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 80040a4:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80040a6:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80040aa:	4770      	bx	lr

080040ac <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040ac:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80040b0:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 80040b2:	b182      	cbz	r2, 80040d6 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 80040b4:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 80040b8:	2301      	movs	r3, #1
 80040ba:	b974      	cbnz	r4, 80040da <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80040bc:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80040c0:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80040c4:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80040c6:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80040c8:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	f003 f80f 	bl	80070f0 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 80040d2:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 80040d4:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80040d6:	2002      	movs	r0, #2
 80040d8:	e7fc      	b.n	80040d4 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 80040da:	4618      	mov	r0, r3
 80040dc:	e7fa      	b.n	80040d4 <USBD_CDC_TransmitPacket+0x28>

080040de <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040de:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80040e2:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80040e4:	b162      	cbz	r2, 8004100 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040e6:	7c04      	ldrb	r4, [r0, #16]
 80040e8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80040ec:	b934      	cbnz	r4, 80040fc <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80040ee:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80040f2:	2101      	movs	r1, #1
 80040f4:	f003 f80a 	bl	800710c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80040f8:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80040fa:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80040fc:	2340      	movs	r3, #64	; 0x40
 80040fe:	e7f8      	b.n	80040f2 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8004100:	2002      	movs	r0, #2
 8004102:	e7fa      	b.n	80040fa <USBD_CDC_ReceivePacket+0x1c>

08004104 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004104:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004106:	b180      	cbz	r0, 800412a <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004108:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800410c:	b113      	cbz	r3, 8004114 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800410e:	2300      	movs	r3, #0
 8004110:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004114:	b109      	cbz	r1, 800411a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004116:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800411a:	2301      	movs	r3, #1
  pdev->id = id;
 800411c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800411e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004122:	f002 ff3d 	bl	8006fa0 <USBD_LL_Init>

  return USBD_OK;
 8004126:	2000      	movs	r0, #0
}
 8004128:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800412a:	2002      	movs	r0, #2
 800412c:	e7fc      	b.n	8004128 <USBD_Init+0x24>

0800412e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800412e:	b119      	cbz	r1, 8004138 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004130:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8004134:	2000      	movs	r0, #0
 8004136:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004138:	2002      	movs	r0, #2
  }

  return status;
}
 800413a:	4770      	bx	lr

0800413c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800413c:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800413e:	f002 ff71 	bl	8007024 <USBD_LL_Start>

  return USBD_OK;
}
 8004142:	2000      	movs	r0, #0
 8004144:	bd08      	pop	{r3, pc}

08004146 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004146:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004148:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800414c:	b90b      	cbnz	r3, 8004152 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800414e:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004150:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4798      	blx	r3
 8004156:	2800      	cmp	r0, #0
 8004158:	d0fa      	beq.n	8004150 <USBD_SetClassConfig+0xa>
 800415a:	e7f8      	b.n	800414e <USBD_SetClassConfig+0x8>

0800415c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800415c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800415e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4798      	blx	r3

  return USBD_OK;
}
 8004166:	2000      	movs	r0, #0
 8004168:	bd08      	pop	{r3, pc}

0800416a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800416a:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800416c:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8004170:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004172:	4628      	mov	r0, r5
 8004174:	f000 fae2 	bl	800473c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004178:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800417a:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 800417e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004182:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8004186:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800418a:	f001 031f 	and.w	r3, r1, #31
 800418e:	2b01      	cmp	r3, #1
 8004190:	d00e      	beq.n	80041b0 <USBD_LL_SetupStage+0x46>
 8004192:	d307      	bcc.n	80041a4 <USBD_LL_SetupStage+0x3a>
 8004194:	2b02      	cmp	r3, #2
 8004196:	d010      	beq.n	80041ba <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004198:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800419c:	4620      	mov	r0, r4
 800419e:	f002 ff6d 	bl	800707c <USBD_LL_StallEP>
      break;
 80041a2:	e003      	b.n	80041ac <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80041a4:	4629      	mov	r1, r5
 80041a6:	4620      	mov	r0, r4
 80041a8:	f000 f8f6 	bl	8004398 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80041ac:	2000      	movs	r0, #0
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80041b0:	4629      	mov	r1, r5
 80041b2:	4620      	mov	r0, r4
 80041b4:	f000 fa14 	bl	80045e0 <USBD_StdItfReq>
      break;
 80041b8:	e7f8      	b.n	80041ac <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80041ba:	4629      	mov	r1, r5
 80041bc:	4620      	mov	r0, r4
 80041be:	f000 fa34 	bl	800462a <USBD_StdEPReq>
      break;
 80041c2:	e7f3      	b.n	80041ac <USBD_LL_SetupStage+0x42>

080041c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80041c4:	b570      	push	{r4, r5, r6, lr}
 80041c6:	4605      	mov	r5, r0
 80041c8:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80041ca:	bb49      	cbnz	r1, 8004220 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80041cc:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d11e      	bne.n	8004212 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 80041d4:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 80041d8:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 80041dc:	4293      	cmp	r3, r2
 80041de:	d90b      	bls.n	80041f8 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 80041e0:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 80041e2:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 80041e4:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80041e8:	bf8c      	ite	hi
 80041ea:	b29a      	uxthhi	r2, r3
 80041ec:	b292      	uxthls	r2, r2
 80041ee:	4631      	mov	r1, r6
 80041f0:	f000 fb03 	bl	80047fa <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80041f4:	2000      	movs	r0, #0
}
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80041f8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	b123      	cbz	r3, 800420a <USBD_LL_DataOutStage+0x46>
 8004200:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004204:	2a03      	cmp	r2, #3
 8004206:	d100      	bne.n	800420a <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8004208:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800420a:	4628      	mov	r0, r5
 800420c:	f000 fafd 	bl	800480a <USBD_CtlSendStatus>
 8004210:	e7f0      	b.n	80041f4 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004212:	2b05      	cmp	r3, #5
 8004214:	d1ee      	bne.n	80041f4 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8004216:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800421a:	f002 ff2f 	bl	800707c <USBD_LL_StallEP>
 800421e:	e7e9      	b.n	80041f4 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8004220:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	b12b      	cbz	r3, 8004234 <USBD_LL_DataOutStage+0x70>
 8004228:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800422c:	2a03      	cmp	r2, #3
 800422e:	d101      	bne.n	8004234 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8004230:	4798      	blx	r3
 8004232:	e7df      	b.n	80041f4 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8004234:	2002      	movs	r0, #2
 8004236:	e7de      	b.n	80041f6 <USBD_LL_DataOutStage+0x32>

08004238 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	4613      	mov	r3, r2
 800423c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800423e:	460e      	mov	r6, r1
 8004240:	2900      	cmp	r1, #0
 8004242:	d147      	bne.n	80042d4 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004244:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004248:	2a02      	cmp	r2, #2
 800424a:	d13c      	bne.n	80042c6 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 800424c:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8004250:	4295      	cmp	r5, r2
 8004252:	d913      	bls.n	800427c <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8004254:	1aaa      	subs	r2, r5, r2
 8004256:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004258:	4619      	mov	r1, r3
 800425a:	b292      	uxth	r2, r2
 800425c:	f000 fab6 	bl	80047cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004260:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004262:	461a      	mov	r2, r3
 8004264:	4619      	mov	r1, r3
 8004266:	4620      	mov	r0, r4
 8004268:	f002 ff50 	bl	800710c <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800426c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004270:	2000      	movs	r0, #0
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004276:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800427a:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800427c:	69c3      	ldr	r3, [r0, #28]
 800427e:	fbb3 f5f2 	udiv	r5, r3, r2
 8004282:	fb02 3515 	mls	r5, r2, r5, r3
 8004286:	b965      	cbnz	r5, 80042a2 <USBD_LL_DataInStage+0x6a>
 8004288:	429a      	cmp	r2, r3
 800428a:	d80a      	bhi.n	80042a2 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 800428c:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8004290:	4293      	cmp	r3, r2
 8004292:	d206      	bcs.n	80042a2 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004294:	462a      	mov	r2, r5
 8004296:	f000 fa99 	bl	80047cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800429a:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800429e:	462b      	mov	r3, r5
 80042a0:	e7df      	b.n	8004262 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80042a2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	b12b      	cbz	r3, 80042b6 <USBD_LL_DataInStage+0x7e>
 80042aa:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80042ae:	2a03      	cmp	r2, #3
 80042b0:	d101      	bne.n	80042b6 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80042b2:	4620      	mov	r0, r4
 80042b4:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80042b6:	2180      	movs	r1, #128	; 0x80
 80042b8:	4620      	mov	r0, r4
 80042ba:	f002 fedf 	bl	800707c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80042be:	4620      	mov	r0, r4
 80042c0:	f000 faae 	bl	8004820 <USBD_CtlReceiveStatus>
 80042c4:	e7d2      	b.n	800426c <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80042c6:	f032 0304 	bics.w	r3, r2, #4
 80042ca:	d1cf      	bne.n	800426c <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80042cc:	2180      	movs	r1, #128	; 0x80
 80042ce:	f002 fed5 	bl	800707c <USBD_LL_StallEP>
 80042d2:	e7cb      	b.n	800426c <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80042d4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	b133      	cbz	r3, 80042ea <USBD_LL_DataInStage+0xb2>
 80042dc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80042e0:	2a03      	cmp	r2, #3
 80042e2:	d102      	bne.n	80042ea <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 80042e4:	4798      	blx	r3
  return USBD_OK;
 80042e6:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80042e8:	e7c7      	b.n	800427a <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 80042ea:	2002      	movs	r0, #2
 80042ec:	e7c5      	b.n	800427a <USBD_LL_DataInStage+0x42>

080042ee <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80042ee:	2200      	movs	r2, #0
{
 80042f0:	b570      	push	{r4, r5, r6, lr}
 80042f2:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80042f4:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80042f6:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80042f8:	4611      	mov	r1, r2
 80042fa:	2340      	movs	r3, #64	; 0x40
 80042fc:	f002 fea0 	bl	8007040 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004300:	4633      	mov	r3, r6
 8004302:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004304:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004308:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800430c:	2200      	movs	r2, #0
 800430e:	4620      	mov	r0, r4
 8004310:	f002 fe96 	bl	8007040 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8004314:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004316:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800431a:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800431c:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800431e:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004322:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8004326:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004328:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800432c:	b123      	cbz	r3, 8004338 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800432e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004332:	4620      	mov	r0, r4
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004338:	2000      	movs	r0, #0
 800433a:	bd70      	pop	{r4, r5, r6, pc}

0800433c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800433c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800433e:	2000      	movs	r0, #0
 8004340:	4770      	bx	lr

08004342 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004342:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004346:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800434a:	2304      	movs	r3, #4
 800434c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004350:	2000      	movs	r0, #0
 8004352:	4770      	bx	lr

08004354 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004354:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004358:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800435a:	bf04      	itt	eq
 800435c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004360:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004364:	2000      	movs	r0, #0
 8004366:	4770      	bx	lr

08004368 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004368:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800436a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800436e:	2a03      	cmp	r2, #3
 8004370:	d104      	bne.n	800437c <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8004372:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	b103      	cbz	r3, 800437c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800437a:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800437c:	2000      	movs	r0, #0
 800437e:	bd08      	pop	{r3, pc}

08004380 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8004380:	b510      	push	{r4, lr}
 8004382:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8004384:	2180      	movs	r1, #128	; 0x80
 8004386:	f002 fe79 	bl	800707c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800438a:	4620      	mov	r0, r4
}
 800438c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8004390:	2100      	movs	r1, #0
 8004392:	f002 be73 	b.w	800707c <USBD_LL_StallEP>
	...

08004398 <USBD_StdDevReq>:
{
 8004398:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800439a:	780b      	ldrb	r3, [r1, #0]
{
 800439c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800439e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80043a2:	2b20      	cmp	r3, #32
{
 80043a4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043a6:	d012      	beq.n	80043ce <USBD_StdDevReq+0x36>
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d010      	beq.n	80043ce <USBD_StdDevReq+0x36>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d15b      	bne.n	8004468 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 80043b0:	784b      	ldrb	r3, [r1, #1]
 80043b2:	2b09      	cmp	r3, #9
 80043b4:	d858      	bhi.n	8004468 <USBD_StdDevReq+0xd0>
 80043b6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80043ba:	00e9      	.short	0x00e9
 80043bc:	00570105 	.word	0x00570105
 80043c0:	005700fe 	.word	0x005700fe
 80043c4:	00130084 	.word	0x00130084
 80043c8:	00d20057 	.word	0x00d20057
 80043cc:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 80043ce:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80043d2:	4629      	mov	r1, r5
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	4620      	mov	r0, r4
 80043d8:	4798      	blx	r3
}
 80043da:	2000      	movs	r0, #0
 80043dc:	b003      	add	sp, #12
 80043de:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80043e6:	884b      	ldrh	r3, [r1, #2]
 80043e8:	0a1a      	lsrs	r2, r3, #8
 80043ea:	3a01      	subs	r2, #1
 80043ec:	2a06      	cmp	r2, #6
 80043ee:	d83b      	bhi.n	8004468 <USBD_StdDevReq+0xd0>
 80043f0:	e8df f002 	tbb	[pc, r2]
 80043f4:	3a2d2004 	.word	0x3a2d2004
 80043f8:	523a      	.short	0x523a
 80043fa:	5c          	.byte	0x5c
 80043fb:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80043fc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004400:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004402:	f10d 0106 	add.w	r1, sp, #6
 8004406:	7c20      	ldrb	r0, [r4, #16]
 8004408:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800440a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800440e:	b152      	cbz	r2, 8004426 <USBD_StdDevReq+0x8e>
 8004410:	88eb      	ldrh	r3, [r5, #6]
 8004412:	b143      	cbz	r3, 8004426 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8004414:	429a      	cmp	r2, r3
 8004416:	bf28      	it	cs
 8004418:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800441a:	4601      	mov	r1, r0
 800441c:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800441e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004422:	f000 f9c6 	bl	80047b2 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8004426:	88eb      	ldrh	r3, [r5, #6]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1d6      	bne.n	80043da <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 800442c:	4620      	mov	r0, r4
 800442e:	f000 f9ec 	bl	800480a <USBD_CtlSendStatus>
 8004432:	e7d2      	b.n	80043da <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004434:	7c02      	ldrb	r2, [r0, #16]
 8004436:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800443a:	b932      	cbnz	r2, 800444a <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800443e:	f10d 0006 	add.w	r0, sp, #6
 8004442:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004444:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004446:	7043      	strb	r3, [r0, #1]
 8004448:	e7df      	b.n	800440a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	e7f7      	b.n	800443e <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b05      	cmp	r3, #5
 8004452:	d809      	bhi.n	8004468 <USBD_StdDevReq+0xd0>
 8004454:	e8df f003 	tbb	[pc, r3]
 8004458:	14100c03 	.word	0x14100c03
 800445c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800445e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004462:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1cc      	bne.n	8004402 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8004468:	4620      	mov	r0, r4
 800446a:	f7ff ff89 	bl	8004380 <USBD_CtlError.constprop.1>
 800446e:	e7b4      	b.n	80043da <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004470:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	e7f5      	b.n	8004464 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004478:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	e7f1      	b.n	8004464 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004480:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	e7ed      	b.n	8004464 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004488:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	e7e9      	b.n	8004464 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004490:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	e7e5      	b.n	8004464 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004498:	7c03      	ldrb	r3, [r0, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e4      	bne.n	8004468 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800449e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044a2:	f10d 0006 	add.w	r0, sp, #6
 80044a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a8:	4798      	blx	r3
 80044aa:	e7ae      	b.n	800440a <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044ac:	7c03      	ldrb	r3, [r0, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1da      	bne.n	8004468 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80044b2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044b6:	f10d 0006 	add.w	r0, sp, #6
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80044be:	2307      	movs	r3, #7
 80044c0:	e7c1      	b.n	8004446 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80044c2:	888b      	ldrh	r3, [r1, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1cf      	bne.n	8004468 <USBD_StdDevReq+0xd0>
 80044c8:	88cb      	ldrh	r3, [r1, #6]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1cc      	bne.n	8004468 <USBD_StdDevReq+0xd0>
 80044ce:	884d      	ldrh	r5, [r1, #2]
 80044d0:	2d7f      	cmp	r5, #127	; 0x7f
 80044d2:	d8c9      	bhi.n	8004468 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d0c5      	beq.n	8004468 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80044dc:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80044de:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80044e2:	f002 fdf7 	bl	80070d4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80044e6:	4620      	mov	r0, r4
 80044e8:	f000 f98f 	bl	800480a <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80044ec:	b11d      	cbz	r5, 80044f6 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80044ee:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80044f0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80044f4:	e771      	b.n	80043da <USBD_StdDevReq+0x42>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e7fa      	b.n	80044f0 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 80044fa:	7889      	ldrb	r1, [r1, #2]
 80044fc:	4d37      	ldr	r5, [pc, #220]	; (80045dc <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80044fe:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8004500:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004502:	d8b1      	bhi.n	8004468 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8004504:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004508:	2b02      	cmp	r3, #2
 800450a:	d008      	beq.n	800451e <USBD_StdDevReq+0x186>
 800450c:	2b03      	cmp	r3, #3
 800450e:	d014      	beq.n	800453a <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8004510:	f7ff ff36 	bl	8004380 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004514:	7829      	ldrb	r1, [r5, #0]
 8004516:	4620      	mov	r0, r4
 8004518:	f7ff fe20 	bl	800415c <USBD_ClrClassConfig>
 800451c:	e75d      	b.n	80043da <USBD_StdDevReq+0x42>
        if (cfgidx)
 800451e:	2900      	cmp	r1, #0
 8004520:	d084      	beq.n	800442c <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8004522:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004524:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8004526:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004528:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800452c:	4620      	mov	r0, r4
 800452e:	f7ff fe0a 	bl	8004146 <USBD_SetClassConfig>
 8004532:	2802      	cmp	r0, #2
 8004534:	f47f af7a 	bne.w	800442c <USBD_StdDevReq+0x94>
 8004538:	e796      	b.n	8004468 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 800453a:	b931      	cbnz	r1, 800454a <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800453c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800453e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004540:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8004544:	f7ff fe0a 	bl	800415c <USBD_ClrClassConfig>
 8004548:	e770      	b.n	800442c <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 800454a:	6841      	ldr	r1, [r0, #4]
 800454c:	2901      	cmp	r1, #1
 800454e:	f43f af6d 	beq.w	800442c <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004552:	b2c9      	uxtb	r1, r1
 8004554:	f7ff fe02 	bl	800415c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004558:	7829      	ldrb	r1, [r5, #0]
 800455a:	6061      	str	r1, [r4, #4]
 800455c:	e7e6      	b.n	800452c <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 800455e:	88ca      	ldrh	r2, [r1, #6]
 8004560:	2a01      	cmp	r2, #1
 8004562:	d181      	bne.n	8004468 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8004564:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004568:	2b00      	cmp	r3, #0
 800456a:	f43f af7d 	beq.w	8004468 <USBD_StdDevReq+0xd0>
 800456e:	2b02      	cmp	r3, #2
 8004570:	d904      	bls.n	800457c <USBD_StdDevReq+0x1e4>
 8004572:	2b03      	cmp	r3, #3
 8004574:	f47f af78 	bne.w	8004468 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004578:	1d01      	adds	r1, r0, #4
 800457a:	e003      	b.n	8004584 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 800457c:	4601      	mov	r1, r0
 800457e:	2300      	movs	r3, #0
 8004580:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004584:	4620      	mov	r0, r4
 8004586:	f000 f914 	bl	80047b2 <USBD_CtlSendData>
 800458a:	e726      	b.n	80043da <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 800458c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004590:	3b01      	subs	r3, #1
 8004592:	2b02      	cmp	r3, #2
 8004594:	f63f af68 	bhi.w	8004468 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8004598:	88cb      	ldrh	r3, [r1, #6]
 800459a:	2b02      	cmp	r3, #2
 800459c:	f47f af64 	bne.w	8004468 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80045a0:	2301      	movs	r3, #1
 80045a2:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80045a4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80045a8:	b10b      	cbz	r3, 80045ae <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80045aa:	2303      	movs	r3, #3
 80045ac:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80045ae:	2202      	movs	r2, #2
 80045b0:	f104 010c 	add.w	r1, r4, #12
 80045b4:	e7e6      	b.n	8004584 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80045b6:	884b      	ldrh	r3, [r1, #2]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	f47f af0e 	bne.w	80043da <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80045be:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80045c2:	e733      	b.n	800442c <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 80045c4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045c8:	3b01      	subs	r3, #1
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	f63f af4c 	bhi.w	8004468 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80045d0:	884b      	ldrh	r3, [r1, #2]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	f47f af01 	bne.w	80043da <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	e7f0      	b.n	80045be <USBD_StdDevReq+0x226>
 80045dc:	200003f4 	.word	0x200003f4

080045e0 <USBD_StdItfReq>:
{
 80045e0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045e2:	780b      	ldrb	r3, [r1, #0]
{
 80045e4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80045ea:	2b20      	cmp	r3, #32
{
 80045ec:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045ee:	d002      	beq.n	80045f6 <USBD_StdItfReq+0x16>
 80045f0:	2b40      	cmp	r3, #64	; 0x40
 80045f2:	d000      	beq.n	80045f6 <USBD_StdItfReq+0x16>
 80045f4:	b9ab      	cbnz	r3, 8004622 <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 80045f6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80045fa:	3b01      	subs	r3, #1
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d810      	bhi.n	8004622 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004600:	792b      	ldrb	r3, [r5, #4]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d80d      	bhi.n	8004622 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004606:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800460a:	4629      	mov	r1, r5
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	4620      	mov	r0, r4
 8004610:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004612:	88eb      	ldrh	r3, [r5, #6]
 8004614:	b91b      	cbnz	r3, 800461e <USBD_StdItfReq+0x3e>
 8004616:	b910      	cbnz	r0, 800461e <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8004618:	4620      	mov	r0, r4
 800461a:	f000 f8f6 	bl	800480a <USBD_CtlSendStatus>
}
 800461e:	2000      	movs	r0, #0
 8004620:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8004622:	4620      	mov	r0, r4
 8004624:	f7ff feac 	bl	8004380 <USBD_CtlError.constprop.1>
          break;
 8004628:	e7f9      	b.n	800461e <USBD_StdItfReq+0x3e>

0800462a <USBD_StdEPReq>:
{
 800462a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800462c:	780a      	ldrb	r2, [r1, #0]
{
 800462e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004630:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004634:	2a20      	cmp	r2, #32
{
 8004636:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004638:	d014      	beq.n	8004664 <USBD_StdEPReq+0x3a>
 800463a:	2a40      	cmp	r2, #64	; 0x40
 800463c:	d012      	beq.n	8004664 <USBD_StdEPReq+0x3a>
 800463e:	b96a      	cbnz	r2, 800465c <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8004640:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8004642:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 8004644:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 8004646:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8004648:	d020      	beq.n	800468c <USBD_StdEPReq+0x62>
 800464a:	d336      	bcc.n	80046ba <USBD_StdEPReq+0x90>
 800464c:	2a03      	cmp	r2, #3
 800464e:	d105      	bne.n	800465c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8004650:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004654:	2a02      	cmp	r2, #2
 8004656:	d027      	beq.n	80046a8 <USBD_StdEPReq+0x7e>
 8004658:	2a03      	cmp	r2, #3
 800465a:	d00b      	beq.n	8004674 <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 800465c:	4620      	mov	r0, r4
 800465e:	f7ff fe8f 	bl	8004380 <USBD_CtlError.constprop.1>
              break;
 8004662:	e005      	b.n	8004670 <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 8004664:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8004668:	4619      	mov	r1, r3
 800466a:	6892      	ldr	r2, [r2, #8]
 800466c:	4620      	mov	r0, r4
 800466e:	4790      	blx	r2
}
 8004670:	2000      	movs	r0, #0
 8004672:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004674:	885a      	ldrh	r2, [r3, #2]
 8004676:	b92a      	cbnz	r2, 8004684 <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 8004678:	064a      	lsls	r2, r1, #25
 800467a:	d003      	beq.n	8004684 <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800467c:	88db      	ldrh	r3, [r3, #6]
 800467e:	b90b      	cbnz	r3, 8004684 <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 8004680:	f002 fcfc 	bl	800707c <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8004684:	4620      	mov	r0, r4
 8004686:	f000 f8c0 	bl	800480a <USBD_CtlSendStatus>
              break;
 800468a:	e7f1      	b.n	8004670 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 800468c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004690:	2a02      	cmp	r2, #2
 8004692:	d009      	beq.n	80046a8 <USBD_StdEPReq+0x7e>
 8004694:	2a03      	cmp	r2, #3
 8004696:	d1e1      	bne.n	800465c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004698:	885b      	ldrh	r3, [r3, #2]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1e8      	bne.n	8004670 <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 800469e:	064d      	lsls	r5, r1, #25
 80046a0:	d0f0      	beq.n	8004684 <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80046a2:	f002 fcf9 	bl	8007098 <USBD_LL_ClearStallEP>
 80046a6:	e7ed      	b.n	8004684 <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80046a8:	064b      	lsls	r3, r1, #25
 80046aa:	d0d7      	beq.n	800465c <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 80046ac:	f002 fce6 	bl	800707c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80046b0:	2180      	movs	r1, #128	; 0x80
 80046b2:	4620      	mov	r0, r4
 80046b4:	f002 fce2 	bl	800707c <USBD_LL_StallEP>
 80046b8:	e7da      	b.n	8004670 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80046ba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d018      	beq.n	80046f4 <USBD_StdEPReq+0xca>
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d1ca      	bne.n	800465c <USBD_StdEPReq+0x32>
 80046c6:	2314      	movs	r3, #20
 80046c8:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80046cc:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80046d0:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80046d4:	d01f      	beq.n	8004716 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80046d6:	6992      	ldr	r2, [r2, #24]
 80046d8:	2a00      	cmp	r2, #0
 80046da:	d0bf      	beq.n	800465c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80046dc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80046e0:	fb05 3503 	mla	r5, r5, r3, r3
 80046e4:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80046e6:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80046ea:	d11f      	bne.n	800472c <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 80046ec:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80046ee:	2202      	movs	r2, #2
 80046f0:	4629      	mov	r1, r5
 80046f2:	e00c      	b.n	800470e <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80046f4:	064a      	lsls	r2, r1, #25
 80046f6:	d1b1      	bne.n	800465c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80046f8:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 80046fa:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80046fe:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004702:	bf4c      	ite	mi
 8004704:	f100 0114 	addmi.w	r1, r0, #20
 8004708:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800470c:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800470e:	4620      	mov	r0, r4
 8004710:	f000 f84f 	bl	80047b2 <USBD_CtlSendData>
              break;
 8004714:	e7ac      	b.n	8004670 <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004716:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 800471a:	2a00      	cmp	r2, #0
 800471c:	d09e      	beq.n	800465c <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800471e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004722:	fb03 0505 	mla	r5, r3, r5, r0
 8004726:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800472a:	e7dc      	b.n	80046e6 <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800472c:	4620      	mov	r0, r4
 800472e:	f002 fcc1 	bl	80070b4 <USBD_LL_IsStallEP>
 8004732:	b108      	cbz	r0, 8004738 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8004734:	2301      	movs	r3, #1
 8004736:	e7d9      	b.n	80046ec <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8004738:	6028      	str	r0, [r5, #0]
 800473a:	e7d8      	b.n	80046ee <USBD_StdEPReq+0xc4>

0800473c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800473c:	780b      	ldrb	r3, [r1, #0]
 800473e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004740:	784b      	ldrb	r3, [r1, #1]
 8004742:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004744:	78ca      	ldrb	r2, [r1, #3]
 8004746:	788b      	ldrb	r3, [r1, #2]
 8004748:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800474c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800474e:	794a      	ldrb	r2, [r1, #5]
 8004750:	790b      	ldrb	r3, [r1, #4]
 8004752:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004756:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004758:	79ca      	ldrb	r2, [r1, #7]
 800475a:	798b      	ldrb	r3, [r1, #6]
 800475c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004760:	80c3      	strh	r3, [r0, #6]
}
 8004762:	4770      	bx	lr

08004764 <USBD_CtlError>:
{
 8004764:	b510      	push	{r4, lr}
 8004766:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004768:	2180      	movs	r1, #128	; 0x80
 800476a:	f002 fc87 	bl	800707c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800476e:	4620      	mov	r0, r4
}
 8004770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8004774:	2100      	movs	r1, #0
 8004776:	f002 bc81 	b.w	800707c <USBD_LL_StallEP>

0800477a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800477a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800477c:	b188      	cbz	r0, 80047a2 <USBD_GetString+0x28>
 800477e:	4605      	mov	r5, r0
 8004780:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8004782:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2c00      	cmp	r4, #0
 800478a:	d1f9      	bne.n	8004780 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800478c:	3301      	adds	r3, #1
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004792:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004794:	2303      	movs	r3, #3
 8004796:	704b      	strb	r3, [r1, #1]
 8004798:	2302      	movs	r3, #2
 800479a:	3801      	subs	r0, #1
    while (*desc != '\0')
 800479c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80047a0:	b905      	cbnz	r5, 80047a4 <USBD_GetString+0x2a>
}
 80047a2:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	54cd      	strb	r5, [r1, r3]
 80047a8:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80047aa:	3302      	adds	r3, #2
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	548c      	strb	r4, [r1, r2]
 80047b0:	e7f4      	b.n	800479c <USBD_GetString+0x22>

080047b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80047b2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80047b4:	2202      	movs	r2, #2
{
 80047b6:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80047b8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80047bc:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80047c0:	460a      	mov	r2, r1
 80047c2:	2100      	movs	r1, #0
 80047c4:	f002 fc94 	bl	80070f0 <USBD_LL_Transmit>

  return USBD_OK;
}
 80047c8:	2000      	movs	r0, #0
 80047ca:	bd10      	pop	{r4, pc}

080047cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80047cc:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80047ce:	4613      	mov	r3, r2
 80047d0:	460a      	mov	r2, r1
 80047d2:	2100      	movs	r1, #0
 80047d4:	f002 fc8c 	bl	80070f0 <USBD_LL_Transmit>

  return USBD_OK;
}
 80047d8:	2000      	movs	r0, #0
 80047da:	bd08      	pop	{r3, pc}

080047dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80047dc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80047de:	2203      	movs	r2, #3
{
 80047e0:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80047e2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80047e6:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80047ea:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80047ec:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80047f0:	2100      	movs	r1, #0
 80047f2:	f002 fc8b 	bl	800710c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80047f6:	2000      	movs	r0, #0
 80047f8:	bd10      	pop	{r4, pc}

080047fa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80047fa:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80047fc:	4613      	mov	r3, r2
 80047fe:	460a      	mov	r2, r1
 8004800:	2100      	movs	r1, #0
 8004802:	f002 fc83 	bl	800710c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004806:	2000      	movs	r0, #0
 8004808:	bd08      	pop	{r3, pc}

0800480a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800480a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800480c:	2304      	movs	r3, #4
 800480e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004812:	2300      	movs	r3, #0
 8004814:	461a      	mov	r2, r3
 8004816:	4619      	mov	r1, r3
 8004818:	f002 fc6a 	bl	80070f0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800481c:	2000      	movs	r0, #0
 800481e:	bd08      	pop	{r3, pc}

08004820 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004820:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004822:	2305      	movs	r3, #5
 8004824:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004828:	2300      	movs	r3, #0
 800482a:	461a      	mov	r2, r3
 800482c:	4619      	mov	r1, r3
 800482e:	f002 fc6d 	bl	800710c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004832:	2000      	movs	r0, #0
 8004834:	bd08      	pop	{r3, pc}
	...

08004838 <get_addr>:
 8004838:	4b01      	ldr	r3, [pc, #4]	; (8004840 <get_addr+0x8>)
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	200003f8 	.word	0x200003f8

08004844 <get_mode>:
 8004844:	4b01      	ldr	r3, [pc, #4]	; (800484c <get_mode+0x8>)
 8004846:	7818      	ldrb	r0, [r3, #0]
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	200003f5 	.word	0x200003f5

08004850 <get_reg_length>:
 8004850:	4b01      	ldr	r3, [pc, #4]	; (8004858 <get_reg_length+0x8>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000400 	.word	0x20000400

0800485c <init_regs>:
 800485c:	b510      	push	{r4, lr}
 800485e:	4c06      	ldr	r4, [pc, #24]	; (8004878 <init_regs+0x1c>)
 8004860:	6820      	ldr	r0, [r4, #0]
 8004862:	b108      	cbz	r0, 8004868 <init_regs+0xc>
 8004864:	f003 f9e4 	bl	8007c30 <free>
 8004868:	4b04      	ldr	r3, [pc, #16]	; (800487c <init_regs+0x20>)
 800486a:	2101      	movs	r1, #1
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	f003 f9a5 	bl	8007bbc <calloc>
 8004872:	6020      	str	r0, [r4, #0]
 8004874:	bd10      	pop	{r4, pc}
 8004876:	bf00      	nop
 8004878:	200003fc 	.word	0x200003fc
 800487c:	20000400 	.word	0x20000400

08004880 <dmx512_init>:
 8004880:	f010 0f01 	tst.w	r0, #1
 8004884:	bf18      	it	ne
 8004886:	2201      	movne	r2, #1
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <dmx512_init+0x24>)
 800488a:	6019      	str	r1, [r3, #0]
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <dmx512_init+0x28>)
 800488e:	bf18      	it	ne
 8004890:	701a      	strbne	r2, [r3, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	bf14      	ite	ne
 8004898:	220b      	movne	r2, #11
 800489a:	221a      	moveq	r2, #26
 800489c:	4b03      	ldr	r3, [pc, #12]	; (80048ac <dmx512_init+0x2c>)
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	f7ff bfdc 	b.w	800485c <init_regs>
 80048a4:	200003f8 	.word	0x200003f8
 80048a8:	200003f5 	.word	0x200003f5
 80048ac:	20000400 	.word	0x20000400

080048b0 <set_reg>:
 80048b0:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <set_reg+0x14>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	b123      	cbz	r3, 80048c0 <set_reg+0x10>
 80048b6:	4a04      	ldr	r2, [pc, #16]	; (80048c8 <set_reg+0x18>)
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	4282      	cmp	r2, r0
 80048bc:	bf88      	it	hi
 80048be:	5419      	strbhi	r1, [r3, r0]
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	200003fc 	.word	0x200003fc
 80048c8:	20000400 	.word	0x20000400

080048cc <get_reg>:
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <get_reg+0x18>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	b12b      	cbz	r3, 80048de <get_reg+0x12>
 80048d2:	4a05      	ldr	r2, [pc, #20]	; (80048e8 <get_reg+0x1c>)
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	4282      	cmp	r2, r0
 80048d8:	d901      	bls.n	80048de <get_reg+0x12>
 80048da:	5c18      	ldrb	r0, [r3, r0]
 80048dc:	4770      	bx	lr
 80048de:	2000      	movs	r0, #0
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	200003fc 	.word	0x200003fc
 80048e8:	20000400 	.word	0x20000400

080048ec <get_reg_name>:
 80048ec:	4b04      	ldr	r3, [pc, #16]	; (8004900 <get_reg_name+0x14>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4283      	cmp	r3, r0
 80048f2:	bf86      	itte	hi
 80048f4:	4b03      	ldrhi	r3, [pc, #12]	; (8004904 <get_reg_name+0x18>)
 80048f6:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
 80048fa:	2000      	movls	r0, #0
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000400 	.word	0x20000400
 8004904:	20000118 	.word	0x20000118

08004908 <USART1_IRQHandler>:
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <USART1_IRQHandler+0x28>)
 800490a:	b082      	sub	sp, #8
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	0792      	lsls	r2, r2, #30
 8004912:	d509      	bpl.n	8004928 <USART1_IRQHandler+0x20>
 8004914:	2200      	movs	r2, #0
 8004916:	9201      	str	r2, [sp, #4]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	9201      	str	r2, [sp, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	9b01      	ldr	r3, [sp, #4]
 8004924:	4b03      	ldr	r3, [pc, #12]	; (8004934 <USART1_IRQHandler+0x2c>)
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	4801      	ldr	r0, [pc, #4]	; (8004930 <USART1_IRQHandler+0x28>)
 800492a:	b002      	add	sp, #8
 800492c:	f7fe bdf0 	b.w	8003510 <HAL_UART_IRQHandler>
 8004930:	20000c40 	.word	0x20000c40
 8004934:	20000410 	.word	0x20000410

08004938 <USART3_IRQHandler>:
 8004938:	4801      	ldr	r0, [pc, #4]	; (8004940 <USART3_IRQHandler+0x8>)
 800493a:	f7fe bde9 	b.w	8003510 <HAL_UART_IRQHandler>
 800493e:	bf00      	nop
 8004940:	20000b64 	.word	0x20000b64

08004944 <HAL_UART_RxCpltCallback>:
 8004944:	6803      	ldr	r3, [r0, #0]
 8004946:	4a37      	ldr	r2, [pc, #220]	; (8004a24 <HAL_UART_RxCpltCallback+0xe0>)
 8004948:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800494a:	4293      	cmp	r3, r2
 800494c:	d156      	bne.n	80049fc <HAL_UART_RxCpltCallback+0xb8>
 800494e:	4b36      	ldr	r3, [pc, #216]	; (8004a28 <HAL_UART_RxCpltCallback+0xe4>)
 8004950:	4d36      	ldr	r5, [pc, #216]	; (8004a2c <HAL_UART_RxCpltCallback+0xe8>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	4c36      	ldr	r4, [pc, #216]	; (8004a30 <HAL_UART_RxCpltCallback+0xec>)
 8004956:	f88d 3007 	strb.w	r3, [sp, #7]
 800495a:	782b      	ldrb	r3, [r5, #0]
 800495c:	b36b      	cbz	r3, 80049ba <HAL_UART_RxCpltCallback+0x76>
 800495e:	4a35      	ldr	r2, [pc, #212]	; (8004a34 <HAL_UART_RxCpltCallback+0xf0>)
 8004960:	7813      	ldrb	r3, [r2, #0]
 8004962:	3301      	adds	r3, #1
 8004964:	b2db      	uxtb	r3, r3
 8004966:	7013      	strb	r3, [r2, #0]
 8004968:	7813      	ldrb	r3, [r2, #0]
 800496a:	2b2c      	cmp	r3, #44	; 0x2c
 800496c:	d10d      	bne.n	800498a <HAL_UART_RxCpltCallback+0x46>
 800496e:	2300      	movs	r3, #0
 8004970:	7013      	strb	r3, [r2, #0]
 8004972:	4a31      	ldr	r2, [pc, #196]	; (8004a38 <HAL_UART_RxCpltCallback+0xf4>)
 8004974:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004978:	7813      	ldrb	r3, [r2, #0]
 800497a:	4830      	ldr	r0, [pc, #192]	; (8004a3c <HAL_UART_RxCpltCallback+0xf8>)
 800497c:	fab3 f383 	clz	r3, r3
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	7013      	strb	r3, [r2, #0]
 8004984:	7812      	ldrb	r2, [r2, #0]
 8004986:	f7fd f937 	bl	8001bf8 <HAL_GPIO_WritePin>
 800498a:	2300      	movs	r3, #0
 800498c:	492c      	ldr	r1, [pc, #176]	; (8004a40 <HAL_UART_RxCpltCallback+0xfc>)
 800498e:	700b      	strb	r3, [r1, #0]
 8004990:	8023      	strh	r3, [r4, #0]
 8004992:	702b      	strb	r3, [r5, #0]
 8004994:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004998:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 800499c:	b15a      	cbz	r2, 80049b6 <HAL_UART_RxCpltCallback+0x72>
 800499e:	2b17      	cmp	r3, #23
 80049a0:	f04f 0201 	mov.w	r2, #1
 80049a4:	d027      	beq.n	80049f6 <HAL_UART_RxCpltCallback+0xb2>
 80049a6:	700a      	strb	r2, [r1, #0]
 80049a8:	491f      	ldr	r1, [pc, #124]	; (8004a28 <HAL_UART_RxCpltCallback+0xe4>)
 80049aa:	4826      	ldr	r0, [pc, #152]	; (8004a44 <HAL_UART_RxCpltCallback+0x100>)
 80049ac:	b002      	add	sp, #8
 80049ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80049b2:	f7fe bd48 	b.w	8003446 <HAL_UART_Receive_IT>
 80049b6:	4a24      	ldr	r2, [pc, #144]	; (8004a48 <HAL_UART_RxCpltCallback+0x104>)
 80049b8:	7013      	strb	r3, [r2, #0]
 80049ba:	4b23      	ldr	r3, [pc, #140]	; (8004a48 <HAL_UART_RxCpltCallback+0x104>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	b9a3      	cbnz	r3, 80049ea <HAL_UART_RxCpltCallback+0xa6>
 80049c0:	4d22      	ldr	r5, [pc, #136]	; (8004a4c <HAL_UART_RxCpltCallback+0x108>)
 80049c2:	8823      	ldrh	r3, [r4, #0]
 80049c4:	682a      	ldr	r2, [r5, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d80f      	bhi.n	80049ea <HAL_UART_RxCpltCallback+0xa6>
 80049ca:	8826      	ldrh	r6, [r4, #0]
 80049cc:	f7ff ff40 	bl	8004850 <get_reg_length>
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	b2b6      	uxth	r6, r6
 80049d4:	4418      	add	r0, r3
 80049d6:	4286      	cmp	r6, r0
 80049d8:	d207      	bcs.n	80049ea <HAL_UART_RxCpltCallback+0xa6>
 80049da:	8820      	ldrh	r0, [r4, #0]
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80049e2:	1ac0      	subs	r0, r0, r3
 80049e4:	3801      	subs	r0, #1
 80049e6:	f7ff ff63 	bl	80048b0 <set_reg>
 80049ea:	8823      	ldrh	r3, [r4, #0]
 80049ec:	2201      	movs	r2, #1
 80049ee:	3301      	adds	r3, #1
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	8023      	strh	r3, [r4, #0]
 80049f4:	e7d8      	b.n	80049a8 <HAL_UART_RxCpltCallback+0x64>
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <HAL_UART_RxCpltCallback+0x104>)
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	e7de      	b.n	80049ba <HAL_UART_RxCpltCallback+0x76>
 80049fc:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <HAL_UART_RxCpltCallback+0x10c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d10d      	bne.n	8004a1e <HAL_UART_RxCpltCallback+0xda>
 8004a02:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <HAL_UART_RxCpltCallback+0x110>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	4913      	ldr	r1, [pc, #76]	; (8004a58 <HAL_UART_RxCpltCallback+0x114>)
 8004a0a:	b133      	cbz	r3, 8004a1a <HAL_UART_RxCpltCallback+0xd6>
 8004a0c:	4813      	ldr	r0, [pc, #76]	; (8004a5c <HAL_UART_RxCpltCallback+0x118>)
 8004a0e:	f000 fffd 	bl	8005a0c <ring_buffer_put>
 8004a12:	2201      	movs	r2, #1
 8004a14:	4910      	ldr	r1, [pc, #64]	; (8004a58 <HAL_UART_RxCpltCallback+0x114>)
 8004a16:	4812      	ldr	r0, [pc, #72]	; (8004a60 <HAL_UART_RxCpltCallback+0x11c>)
 8004a18:	e7c8      	b.n	80049ac <HAL_UART_RxCpltCallback+0x68>
 8004a1a:	4812      	ldr	r0, [pc, #72]	; (8004a64 <HAL_UART_RxCpltCallback+0x120>)
 8004a1c:	e7f7      	b.n	8004a0e <HAL_UART_RxCpltCallback+0xca>
 8004a1e:	b002      	add	sp, #8
 8004a20:	bd70      	pop	{r4, r5, r6, pc}
 8004a22:	bf00      	nop
 8004a24:	40013800 	.word	0x40013800
 8004a28:	20000404 	.word	0x20000404
 8004a2c:	20000410 	.word	0x20000410
 8004a30:	20000406 	.word	0x20000406
 8004a34:	20000409 	.word	0x20000409
 8004a38:	20000408 	.word	0x20000408
 8004a3c:	40011000 	.word	0x40011000
 8004a40:	20000180 	.word	0x20000180
 8004a44:	20000c40 	.word	0x20000c40
 8004a48:	2000040a 	.word	0x2000040a
 8004a4c:	2000040c 	.word	0x2000040c
 8004a50:	40004800 	.word	0x40004800
 8004a54:	20000420 	.word	0x20000420
 8004a58:	20000405 	.word	0x20000405
 8004a5c:	20000990 	.word	0x20000990
 8004a60:	20000b64 	.word	0x20000b64
 8004a64:	200009a8 	.word	0x200009a8

08004a68 <dmx512_setRx>:
 8004a68:	b508      	push	{r3, lr}
 8004a6a:	4805      	ldr	r0, [pc, #20]	; (8004a80 <dmx512_setRx+0x18>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2180      	movs	r1, #128	; 0x80
 8004a70:	f7fd f8c2 	bl	8001bf8 <HAL_GPIO_WritePin>
 8004a74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004a78:	4802      	ldr	r0, [pc, #8]	; (8004a84 <dmx512_setRx+0x1c>)
 8004a7a:	f7fe bdf1 	b.w	8003660 <HAL_HalfDuplex_EnableReceiver>
 8004a7e:	bf00      	nop
 8004a80:	40010c00 	.word	0x40010c00
 8004a84:	20000c40 	.word	0x20000c40

08004a88 <dmx512_rec_enable.part.0>:
 8004a88:	b508      	push	{r3, lr}
 8004a8a:	f7ff fed5 	bl	8004838 <get_addr>
 8004a8e:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <dmx512_rec_enable.part.0+0x1c>)
 8004a90:	6018      	str	r0, [r3, #0]
 8004a92:	f7ff ffe9 	bl	8004a68 <dmx512_setRx>
 8004a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	4902      	ldr	r1, [pc, #8]	; (8004aa8 <dmx512_rec_enable.part.0+0x20>)
 8004a9e:	4803      	ldr	r0, [pc, #12]	; (8004aac <dmx512_rec_enable.part.0+0x24>)
 8004aa0:	f7fe bcd1 	b.w	8003446 <HAL_UART_Receive_IT>
 8004aa4:	2000040c 	.word	0x2000040c
 8004aa8:	20000404 	.word	0x20000404
 8004aac:	20000c40 	.word	0x20000c40

08004ab0 <dmx512_rec_init>:
 8004ab0:	b508      	push	{r3, lr}
 8004ab2:	f7ff ffe9 	bl	8004a88 <dmx512_rec_enable.part.0>
 8004ab6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004aba:	2201      	movs	r2, #1
 8004abc:	4901      	ldr	r1, [pc, #4]	; (8004ac4 <dmx512_rec_init+0x14>)
 8004abe:	4802      	ldr	r0, [pc, #8]	; (8004ac8 <dmx512_rec_init+0x18>)
 8004ac0:	f7fe bcc1 	b.w	8003446 <HAL_UART_Receive_IT>
 8004ac4:	20000405 	.word	0x20000405
 8004ac8:	20000b64 	.word	0x20000b64

08004acc <EE_LL_Format>:
 8004acc:	b530      	push	{r4, r5, lr}
 8004ace:	4604      	mov	r4, r0
 8004ad0:	02a4      	lsls	r4, r4, #10
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8004ad8:	460d      	mov	r5, r1
 8004ada:	f7fc fea1 	bl	8001820 <HAL_FLASH_Unlock>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	9404      	str	r4, [sp, #16]
 8004ae2:	2400      	movs	r4, #0
 8004ae4:	a901      	add	r1, sp, #4
 8004ae6:	a802      	add	r0, sp, #8
 8004ae8:	9505      	str	r5, [sp, #20]
 8004aea:	9303      	str	r3, [sp, #12]
 8004aec:	9402      	str	r4, [sp, #8]
 8004aee:	f7fc ff51 	bl	8001994 <HAL_FLASHEx_Erase>
 8004af2:	b938      	cbnz	r0, 8004b04 <EE_LL_Format+0x38>
 8004af4:	f7fc fea6 	bl	8001844 <HAL_FLASH_Lock>
 8004af8:	9801      	ldr	r0, [sp, #4]
 8004afa:	1c43      	adds	r3, r0, #1
 8004afc:	4258      	negs	r0, r3
 8004afe:	4158      	adcs	r0, r3
 8004b00:	b007      	add	sp, #28
 8004b02:	bd30      	pop	{r4, r5, pc}
 8004b04:	f7fc fe9e 	bl	8001844 <HAL_FLASH_Lock>
 8004b08:	4620      	mov	r0, r4
 8004b0a:	e7f9      	b.n	8004b00 <EE_LL_Format+0x34>

08004b0c <EE_Format>:
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	207f      	movs	r0, #127	; 0x7f
 8004b10:	f7ff bfdc 	b.w	8004acc <EE_LL_Format>

08004b14 <EE_Reads>:
 8004b14:	4401      	add	r1, r0
 8004b16:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004b1a:	dd0b      	ble.n	8004b34 <EE_Reads+0x20>
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	4770      	bx	lr
 8004b20:	0083      	lsls	r3, r0, #2
 8004b22:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004b26:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	f842 3b04 	str.w	r3, [r2], #4
 8004b32:	b280      	uxth	r0, r0
 8004b34:	4281      	cmp	r1, r0
 8004b36:	dcf3      	bgt.n	8004b20 <EE_Reads+0xc>
 8004b38:	2001      	movs	r0, #1
 8004b3a:	4770      	bx	lr

08004b3c <EE_Writes>:
 8004b3c:	4401      	add	r1, r0
 8004b3e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b44:	4616      	mov	r6, r2
 8004b46:	dd02      	ble.n	8004b4e <EE_Writes+0x12>
 8004b48:	2400      	movs	r4, #0
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b4e:	f7ff ffdd 	bl	8004b0c <EE_Format>
 8004b52:	4604      	mov	r4, r0
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d0f7      	beq.n	8004b48 <EE_Writes+0xc>
 8004b58:	f7fc fe62 	bl	8001820 <HAL_FLASH_Unlock>
 8004b5c:	4d09      	ldr	r5, [pc, #36]	; (8004b84 <EE_Writes+0x48>)
 8004b5e:	4f0a      	ldr	r7, [pc, #40]	; (8004b88 <EE_Writes+0x4c>)
 8004b60:	3e04      	subs	r6, #4
 8004b62:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8004b66:	2300      	movs	r3, #0
 8004b68:	4629      	mov	r1, r5
 8004b6a:	2002      	movs	r0, #2
 8004b6c:	f7fc fe9e 	bl	80018ac <HAL_FLASH_Program>
 8004b70:	b110      	cbz	r0, 8004b78 <EE_Writes+0x3c>
 8004b72:	f7fc fe67 	bl	8001844 <HAL_FLASH_Lock>
 8004b76:	e7e7      	b.n	8004b48 <EE_Writes+0xc>
 8004b78:	3504      	adds	r5, #4
 8004b7a:	42bd      	cmp	r5, r7
 8004b7c:	d1f1      	bne.n	8004b62 <EE_Writes+0x26>
 8004b7e:	f7fc fe61 	bl	8001844 <HAL_FLASH_Lock>
 8004b82:	e7e2      	b.n	8004b4a <EE_Writes+0xe>
 8004b84:	0801fc00 	.word	0x0801fc00
 8004b88:	08020000 	.word	0x08020000

08004b8c <init_fx_list>:
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	4a04      	ldr	r2, [pc, #16]	; (8004ba0 <init_fx_list+0x14>)
 8004b90:	4904      	ldr	r1, [pc, #16]	; (8004ba4 <init_fx_list+0x18>)
 8004b92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004b96:	3301      	adds	r3, #1
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d1fa      	bne.n	8004b92 <init_fx_list+0x6>
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	200009c0 	.word	0x200009c0
 8004ba4:	0800985c 	.word	0x0800985c

08004ba8 <register_fx>:
 8004ba8:	b510      	push	{r4, lr}
 8004baa:	4a0e      	ldr	r2, [pc, #56]	; (8004be4 <register_fx+0x3c>)
 8004bac:	b9c1      	cbnz	r1, 8004be0 <register_fx+0x38>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004bb4:	b2dc      	uxtb	r4, r3
 8004bb6:	6909      	ldr	r1, [r1, #16]
 8004bb8:	b141      	cbz	r1, 8004bcc <register_fx+0x24>
 8004bba:	3301      	adds	r3, #1
 8004bbc:	2b40      	cmp	r3, #64	; 0x40
 8004bbe:	d1f7      	bne.n	8004bb0 <register_fx+0x8>
 8004bc0:	4809      	ldr	r0, [pc, #36]	; (8004be8 <register_fx+0x40>)
 8004bc2:	f001 fad1 	bl	8006168 <print>
 8004bc6:	2400      	movs	r4, #0
 8004bc8:	4620      	mov	r0, r4
 8004bca:	bd10      	pop	{r4, pc}
 8004bcc:	2c3f      	cmp	r4, #63	; 0x3f
 8004bce:	d0f7      	beq.n	8004bc0 <register_fx+0x18>
 8004bd0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	1cc2      	adds	r2, r0, #3
 8004bd8:	4804      	ldr	r0, [pc, #16]	; (8004bec <register_fx+0x44>)
 8004bda:	f001 fac5 	bl	8006168 <print>
 8004bde:	e7f3      	b.n	8004bc8 <register_fx+0x20>
 8004be0:	460c      	mov	r4, r1
 8004be2:	e7f5      	b.n	8004bd0 <register_fx+0x28>
 8004be4:	200009c0 	.word	0x200009c0
 8004be8:	08009870 	.word	0x08009870
 8004bec:	0800987e 	.word	0x0800987e

08004bf0 <fx_install>:
 8004bf0:	b508      	push	{r3, lr}
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f002 fc1a 	bl	800742c <fx_pwm_running_light>
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f002 fc1d 	bl	8007438 <fx_pwm_running_pulse_light>
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f002 fba8 	bl	8007354 <fx_pwm_pulsing_light>
 8004c04:	2000      	movs	r0, #0
 8004c06:	f002 fbab 	bl	8007360 <fx_pwm_pulsing_pulse_light>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	f002 fdc4 	bl	8007798 <fx_strip_running_light>
 8004c10:	2000      	movs	r0, #0
 8004c12:	f002 fd27 	bl	8007664 <fx_strip_rainbow>
 8004c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	f002 bcaa 	b.w	8007574 <fx_strip_cylon>

08004c20 <install_fx>:
 8004c20:	f7ff bfe6 	b.w	8004bf0 <fx_install>

08004c24 <start_fx>:
 8004c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c28:	4c22      	ldr	r4, [pc, #136]	; (8004cb4 <start_fx+0x90>)
 8004c2a:	4605      	mov	r5, r0
 8004c2c:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 8004c30:	4e21      	ldr	r6, [pc, #132]	; (8004cb8 <start_fx+0x94>)
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	b903      	cbnz	r3, 8004c38 <start_fx+0x14>
 8004c36:	bb70      	cbnz	r0, 8004c96 <start_fx+0x72>
 8004c38:	4f20      	ldr	r7, [pc, #128]	; (8004cbc <start_fx+0x98>)
 8004c3a:	783b      	ldrb	r3, [r7, #0]
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d011      	beq.n	8004c64 <start_fx+0x40>
 8004c40:	7833      	ldrb	r3, [r6, #0]
 8004c42:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8004c46:	690b      	ldr	r3, [r1, #16]
 8004c48:	b11b      	cbz	r3, 8004c52 <start_fx+0x2e>
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	68c9      	ldr	r1, [r1, #12]
 8004c4e:	2002      	movs	r0, #2
 8004c50:	4798      	blx	r3
 8004c52:	7831      	ldrb	r1, [r6, #0]
 8004c54:	481a      	ldr	r0, [pc, #104]	; (8004cc0 <start_fx+0x9c>)
 8004c56:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8004c5a:	3203      	adds	r2, #3
 8004c5c:	f001 fa84 	bl	8006168 <print>
 8004c60:	2303      	movs	r3, #3
 8004c62:	703b      	strb	r3, [r7, #0]
 8004c64:	2100      	movs	r1, #0
 8004c66:	4b17      	ldr	r3, [pc, #92]	; (8004cc4 <start_fx+0xa0>)
 8004c68:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8004cd0 <start_fx+0xac>
 8004c6c:	6019      	str	r1, [r3, #0]
 8004c6e:	7833      	ldrb	r3, [r6, #0]
 8004c70:	7035      	strb	r5, [r6, #0]
 8004c72:	f888 3000 	strb.w	r3, [r8]
 8004c76:	b17d      	cbz	r5, 8004c98 <start_fx+0x74>
 8004c78:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
 8004c7c:	4608      	mov	r0, r1
 8004c7e:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 8004c82:	47a8      	blx	r5
 8004c84:	7831      	ldrb	r1, [r6, #0]
 8004c86:	b950      	cbnz	r0, 8004c9e <start_fx+0x7a>
 8004c88:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8004c8c:	7038      	strb	r0, [r7, #0]
 8004c8e:	3203      	adds	r2, #3
 8004c90:	480d      	ldr	r0, [pc, #52]	; (8004cc8 <start_fx+0xa4>)
 8004c92:	f001 fa69 	bl	8006168 <print>
 8004c96:	7835      	ldrb	r5, [r6, #0]
 8004c98:	4628      	mov	r0, r5
 8004c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c9e:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8004ca2:	480a      	ldr	r0, [pc, #40]	; (8004ccc <start_fx+0xa8>)
 8004ca4:	3203      	adds	r2, #3
 8004ca6:	f001 fa5f 	bl	8006168 <print>
 8004caa:	f898 3000 	ldrb.w	r3, [r8]
 8004cae:	7033      	strb	r3, [r6, #0]
 8004cb0:	e7f1      	b.n	8004c96 <start_fx+0x72>
 8004cb2:	bf00      	nop
 8004cb4:	200009c0 	.word	0x200009c0
 8004cb8:	20000411 	.word	0x20000411
 8004cbc:	20000412 	.word	0x20000412
 8004cc0:	0800988c 	.word	0x0800988c
 8004cc4:	20000414 	.word	0x20000414
 8004cc8:	080098a7 	.word	0x080098a7
 8004ccc:	080098c0 	.word	0x080098c0
 8004cd0:	20000418 	.word	0x20000418

08004cd4 <fx_done>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4d10      	ldr	r5, [pc, #64]	; (8004d18 <fx_done+0x44>)
 8004cd8:	4c10      	ldr	r4, [pc, #64]	; (8004d1c <fx_done+0x48>)
 8004cda:	782b      	ldrb	r3, [r5, #0]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004ce2:	2002      	movs	r0, #2
 8004ce4:	68d9      	ldr	r1, [r3, #12]
 8004ce6:	691e      	ldr	r6, [r3, #16]
 8004ce8:	47b0      	blx	r6
 8004cea:	7829      	ldrb	r1, [r5, #0]
 8004cec:	480c      	ldr	r0, [pc, #48]	; (8004d20 <fx_done+0x4c>)
 8004cee:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8004cf2:	3203      	adds	r2, #3
 8004cf4:	f001 fa38 	bl	8006168 <print>
 8004cf8:	2203      	movs	r2, #3
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <fx_done+0x50>)
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	782b      	ldrb	r3, [r5, #0]
 8004d00:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004d04:	7898      	ldrb	r0, [r3, #2]
 8004d06:	b118      	cbz	r0, 8004d10 <fx_done+0x3c>
 8004d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d0c:	f7ff bf8a 	b.w	8004c24 <start_fx>
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <fx_done+0x54>)
 8004d12:	7818      	ldrb	r0, [r3, #0]
 8004d14:	e7f8      	b.n	8004d08 <fx_done+0x34>
 8004d16:	bf00      	nop
 8004d18:	20000411 	.word	0x20000411
 8004d1c:	200009c0 	.word	0x200009c0
 8004d20:	0800988c 	.word	0x0800988c
 8004d24:	20000412 	.word	0x20000412
 8004d28:	20000418 	.word	0x20000418

08004d2c <run_fx>:
 8004d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2e:	4e17      	ldr	r6, [pc, #92]	; (8004d8c <run_fx+0x60>)
 8004d30:	7833      	ldrb	r3, [r6, #0]
 8004d32:	b353      	cbz	r3, 8004d8a <run_fx+0x5e>
 8004d34:	4f16      	ldr	r7, [pc, #88]	; (8004d90 <run_fx+0x64>)
 8004d36:	4c17      	ldr	r4, [pc, #92]	; (8004d94 <run_fx+0x68>)
 8004d38:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8004d3c:	6821      	ldr	r1, [r4, #0]
 8004d3e:	7858      	ldrb	r0, [r3, #1]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	2801      	cmp	r0, #1
 8004d44:	d105      	bne.n	8004d52 <run_fx+0x26>
 8004d46:	4291      	cmp	r1, r2
 8004d48:	d10f      	bne.n	8004d6a <run_fx+0x3e>
 8004d4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d4e:	f7ff bfc1 	b.w	8004cd4 <fx_done>
 8004d52:	2802      	cmp	r0, #2
 8004d54:	d109      	bne.n	8004d6a <run_fx+0x3e>
 8004d56:	4291      	cmp	r1, r2
 8004d58:	d107      	bne.n	8004d6a <run_fx+0x3e>
 8004d5a:	2500      	movs	r5, #0
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	6025      	str	r5, [r4, #0]
 8004d60:	462a      	mov	r2, r5
 8004d62:	4628      	mov	r0, r5
 8004d64:	4798      	blx	r3
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <run_fx+0x6c>)
 8004d68:	701d      	strb	r5, [r3, #0]
 8004d6a:	7833      	ldrb	r3, [r6, #0]
 8004d6c:	6821      	ldr	r1, [r4, #0]
 8004d6e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8004d72:	2001      	movs	r0, #1
 8004d74:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 8004d78:	47a8      	blx	r5
 8004d7a:	2801      	cmp	r0, #1
 8004d7c:	d0e5      	beq.n	8004d4a <run_fx+0x1e>
 8004d7e:	2201      	movs	r2, #1
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <run_fx+0x6c>)
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	4413      	add	r3, r2
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d8c:	20000411 	.word	0x20000411
 8004d90:	200009c0 	.word	0x200009c0
 8004d94:	20000414 	.word	0x20000414
 8004d98:	20000412 	.word	0x20000412

08004d9c <get_mode_from_pins>:
#include <stm32f103xb.h>
#include <stm32f1xx.h>
#include <stm32f1xx_hal_gpio.h>

uint8_t get_mode_from_pins(void)
{
 8004d9c:	b510      	push	{r4, lr}
	uint8_t mode = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_0_GPIO_Port, MODE_0_Pin))
 8004d9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004da2:	4808      	ldr	r0, [pc, #32]	; (8004dc4 <get_mode_from_pins+0x28>)
 8004da4:	f7fc ff22 	bl	8001bec <HAL_GPIO_ReadPin>
	uint8_t mode = 0;
 8004da8:	fab0 f480 	clz	r4, r0
		mode = mode | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_1_GPIO_Port, MODE_1_Pin))
 8004dac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004db0:	4804      	ldr	r0, [pc, #16]	; (8004dc4 <get_mode_from_pins+0x28>)
	uint8_t mode = 0;
 8004db2:	0964      	lsrs	r4, r4, #5
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_1_GPIO_Port, MODE_1_Pin))
 8004db4:	f7fc ff1a 	bl	8001bec <HAL_GPIO_ReadPin>
 8004db8:	b908      	cbnz	r0, 8004dbe <get_mode_from_pins+0x22>
		mode = mode | 0x02;
 8004dba:	f044 0402 	orr.w	r4, r4, #2
	return mode;
}
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	bd10      	pop	{r4, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40011000 	.word	0x40011000

08004dc8 <get_addr_from_pins>:

uint8_t get_addr_from_pins(void)
{
 8004dc8:	b510      	push	{r4, lr}
	uint8_t addr = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_0_GPIO_Port, ADDR_0_Pin))
 8004dca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dce:	481f      	ldr	r0, [pc, #124]	; (8004e4c <get_addr_from_pins+0x84>)
 8004dd0:	f7fc ff0c 	bl	8001bec <HAL_GPIO_ReadPin>
	uint8_t addr = 0;
 8004dd4:	fab0 f480 	clz	r4, r0
		addr = addr | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_1_GPIO_Port, ADDR_1_Pin))
 8004dd8:	2108      	movs	r1, #8
 8004dda:	481d      	ldr	r0, [pc, #116]	; (8004e50 <get_addr_from_pins+0x88>)
	uint8_t addr = 0;
 8004ddc:	0964      	lsrs	r4, r4, #5
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_1_GPIO_Port, ADDR_1_Pin))
 8004dde:	f7fc ff05 	bl	8001bec <HAL_GPIO_ReadPin>
 8004de2:	b908      	cbnz	r0, 8004de8 <get_addr_from_pins+0x20>
		addr = addr | 0x02;
 8004de4:	f044 0402 	orr.w	r4, r4, #2
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_2_GPIO_Port, ADDR_2_Pin))
 8004de8:	2110      	movs	r1, #16
 8004dea:	4819      	ldr	r0, [pc, #100]	; (8004e50 <get_addr_from_pins+0x88>)
 8004dec:	f7fc fefe 	bl	8001bec <HAL_GPIO_ReadPin>
 8004df0:	b908      	cbnz	r0, 8004df6 <get_addr_from_pins+0x2e>
		addr = addr | 0x04;
 8004df2:	f044 0404 	orr.w	r4, r4, #4
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_3_GPIO_Port, ADDR_3_Pin))
 8004df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dfa:	4815      	ldr	r0, [pc, #84]	; (8004e50 <get_addr_from_pins+0x88>)
 8004dfc:	f7fc fef6 	bl	8001bec <HAL_GPIO_ReadPin>
 8004e00:	b908      	cbnz	r0, 8004e06 <get_addr_from_pins+0x3e>
		addr = addr | 0x08;
 8004e02:	f044 0408 	orr.w	r4, r4, #8
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_4_GPIO_Port, ADDR_4_Pin))
 8004e06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e0a:	4811      	ldr	r0, [pc, #68]	; (8004e50 <get_addr_from_pins+0x88>)
 8004e0c:	f7fc feee 	bl	8001bec <HAL_GPIO_ReadPin>
 8004e10:	b908      	cbnz	r0, 8004e16 <get_addr_from_pins+0x4e>
		addr = addr | 0x10;
 8004e12:	f044 0410 	orr.w	r4, r4, #16
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_5_GPIO_Port, ADDR_5_Pin))
 8004e16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e1a:	480d      	ldr	r0, [pc, #52]	; (8004e50 <get_addr_from_pins+0x88>)
 8004e1c:	f7fc fee6 	bl	8001bec <HAL_GPIO_ReadPin>
 8004e20:	b908      	cbnz	r0, 8004e26 <get_addr_from_pins+0x5e>
		addr = addr | 0x20;
 8004e22:	f044 0420 	orr.w	r4, r4, #32
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_6_GPIO_Port, ADDR_6_Pin))
 8004e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e2a:	4809      	ldr	r0, [pc, #36]	; (8004e50 <get_addr_from_pins+0x88>)
 8004e2c:	f7fc fede 	bl	8001bec <HAL_GPIO_ReadPin>
 8004e30:	b908      	cbnz	r0, 8004e36 <get_addr_from_pins+0x6e>
		addr = addr | 0x40;
 8004e32:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_7_GPIO_Port, ADDR_7_Pin))
 8004e36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e3a:	4805      	ldr	r0, [pc, #20]	; (8004e50 <get_addr_from_pins+0x88>)
 8004e3c:	f7fc fed6 	bl	8001bec <HAL_GPIO_ReadPin>
 8004e40:	b908      	cbnz	r0, 8004e46 <get_addr_from_pins+0x7e>
		addr = addr | 0x80;
 8004e42:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	return addr;
}
 8004e46:	4620      	mov	r0, r4
 8004e48:	bd10      	pop	{r4, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40010800 	.word	0x40010800
 8004e50:	40010c00 	.word	0x40010c00

08004e54 <check_button>:

uint8_t check_button(void)
{
 8004e54:	b508      	push	{r3, lr}
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin))
 8004e56:	2120      	movs	r1, #32
 8004e58:	4803      	ldr	r0, [pc, #12]	; (8004e68 <check_button+0x14>)
 8004e5a:	f7fc fec7 	bl	8001bec <HAL_GPIO_ReadPin>
		return 1;

	return 0;
}
 8004e5e:	fab0 f080 	clz	r0, r0
 8004e62:	0940      	lsrs	r0, r0, #5
 8004e64:	bd08      	pop	{r3, pc}
 8004e66:	bf00      	nop
 8004e68:	40010800 	.word	0x40010800

08004e6c <scale_value>:
	reg_shadow[MAX_BRIGHTNESS] = 255;
	update_pwm_lights(1);
}

uint16_t scale_value( uint8_t val,int16_t offset, int16_t gain, int16_t gamma)
{
 8004e6c:	b570      	push	{r4, r5, r6, lr}
	int32_t res = 0;
	//1) Scale input between 0 and max
	res = ((uint32_t)val * (uint32_t) MAX_PWM)/(uint32_t)255;
 8004e6e:	f240 4434 	movw	r4, #1076	; 0x434
 8004e72:	23ff      	movs	r3, #255	; 0xff
 8004e74:	4360      	muls	r0, r4
 8004e76:	fbb0 f3f3 	udiv	r3, r0, r3
{
 8004e7a:	4616      	mov	r6, r2
	res = (res * (uint32_t)brightness_scale) / (uint32_t) MAX_PWM;
 8004e7c:	4a0e      	ldr	r2, [pc, #56]	; (8004eb8 <scale_value+0x4c>)
 8004e7e:	8810      	ldrh	r0, [r2, #0]
 8004e80:	4358      	muls	r0, r3
 8004e82:	fbb0 f0f4 	udiv	r0, r0, r4

	//Subtract offset
	res = res - offset;

	//Apply Gain
	res = (int16_t) ((float)res * ((float)gain)/100);
 8004e86:	1a40      	subs	r0, r0, r1
 8004e88:	f7fb fea2 	bl	8000bd0 <__aeabi_i2f>
 8004e8c:	4605      	mov	r5, r0
 8004e8e:	4630      	mov	r0, r6
 8004e90:	f7fb fe9e 	bl	8000bd0 <__aeabi_i2f>
 8004e94:	4601      	mov	r1, r0
 8004e96:	4628      	mov	r0, r5
 8004e98:	f7fb feee 	bl	8000c78 <__aeabi_fmul>
 8004e9c:	4907      	ldr	r1, [pc, #28]	; (8004ebc <scale_value+0x50>)
 8004e9e:	f7fb ff9f 	bl	8000de0 <__aeabi_fdiv>
 8004ea2:	f7fc f839 	bl	8000f18 <__aeabi_f2iz>
 8004ea6:	b200      	sxth	r0, r0
 8004ea8:	42a0      	cmp	r0, r4
 8004eaa:	bfa8      	it	ge
 8004eac:	4620      	movge	r0, r4
	//Limit output to valid range
	if (res<0)
		res = 0;
	if (res > MAX_PWM)
		res = MAX_PWM;
	return res;
 8004eae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8004eb2:	b280      	uxth	r0, r0
 8004eb4:	bd70      	pop	{r4, r5, r6, pc}
 8004eb6:	bf00      	nop
 8004eb8:	2000041a 	.word	0x2000041a
 8004ebc:	42c80000 	.word	0x42c80000

08004ec0 <update_pwm_lights>:

//Check what has changed and update Lights
//We only update parameters that have changed otherwise we might have waveform-artifacts...
void update_pwm_lights(uint8_t force)
{
 8004ec0:	b570      	push	{r4, r5, r6, lr}

	//Check if global brightness has changed and scale value
	if ((reg_shadow[MAX_BRIGHTNESS])!= get_reg(MAX_BRIGHTNESS) || force)
 8004ec2:	4ca2      	ldr	r4, [pc, #648]	; (800514c <update_pwm_lights+0x28c>)
{
 8004ec4:	4605      	mov	r5, r0
	if ((reg_shadow[MAX_BRIGHTNESS])!= get_reg(MAX_BRIGHTNESS) || force)
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	2000      	movs	r0, #0
 8004eca:	781e      	ldrb	r6, [r3, #0]
 8004ecc:	f7ff fcfe 	bl	80048cc <get_reg>
 8004ed0:	4286      	cmp	r6, r0
 8004ed2:	d100      	bne.n	8004ed6 <update_pwm_lights+0x16>
 8004ed4:	b185      	cbz	r5, 8004ef8 <update_pwm_lights+0x38>
	{
		brightness_scale = ((uint32_t)get_reg(MAX_BRIGHTNESS) * (uint32_t) MAX_PWM)/(uint32_t)255;
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f7ff fcf8 	bl	80048cc <get_reg>
 8004edc:	f240 4334 	movw	r3, #1076	; 0x434
 8004ee0:	4358      	muls	r0, r3
 8004ee2:	23ff      	movs	r3, #255	; 0xff
 8004ee4:	fbb0 f0f3 	udiv	r0, r0, r3
 8004ee8:	4b99      	ldr	r3, [pc, #612]	; (8005150 <update_pwm_lights+0x290>)
		//After a brightness update we need to update all the over PWM outputs
		force = 1;
		reg_shadow[MAX_BRIGHTNESS] = get_reg(MAX_BRIGHTNESS);
 8004eea:	6825      	ldr	r5, [r4, #0]
		brightness_scale = ((uint32_t)get_reg(MAX_BRIGHTNESS) * (uint32_t) MAX_PWM)/(uint32_t)255;
 8004eec:	8018      	strh	r0, [r3, #0]
		reg_shadow[MAX_BRIGHTNESS] = get_reg(MAX_BRIGHTNESS);
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f7ff fcec 	bl	80048cc <get_reg>
 8004ef4:	7028      	strb	r0, [r5, #0]
		force = 1;
 8004ef6:	2501      	movs	r5, #1
	}

	//Update PWM Values if needed
	if ((reg_shadow[CH1_RED])!= get_reg(CH1_RED) || force)
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	2001      	movs	r0, #1
 8004efc:	785e      	ldrb	r6, [r3, #1]
 8004efe:	f7ff fce5 	bl	80048cc <get_reg>
 8004f02:	4286      	cmp	r6, r0
 8004f04:	d100      	bne.n	8004f08 <update_pwm_lights+0x48>
 8004f06:	b1ad      	cbz	r5, 8004f34 <update_pwm_lights+0x74>
	{
		configPWM(PWM_CH1,CH_RED,scale_value(get_reg(CH1_RED),settings.offset_red,settings.gain_red,settings.gamma_red));
 8004f08:	2001      	movs	r0, #1
 8004f0a:	f7ff fcdf 	bl	80048cc <get_reg>
 8004f0e:	4991      	ldr	r1, [pc, #580]	; (8005154 <update_pwm_lights+0x294>)
 8004f10:	f9b1 303e 	ldrsh.w	r3, [r1, #62]	; 0x3e
 8004f14:	f9b1 203c 	ldrsh.w	r2, [r1, #60]	; 0x3c
 8004f18:	f9b1 103a 	ldrsh.w	r1, [r1, #58]	; 0x3a
 8004f1c:	f7ff ffa6 	bl	8004e6c <scale_value>
 8004f20:	2100      	movs	r1, #0
 8004f22:	4602      	mov	r2, r0
 8004f24:	4608      	mov	r0, r1
 8004f26:	f000 fd09 	bl	800593c <configPWM>
		reg_shadow[CH1_RED] = get_reg(CH1_RED);
 8004f2a:	2001      	movs	r0, #1
 8004f2c:	6826      	ldr	r6, [r4, #0]
 8004f2e:	f7ff fccd 	bl	80048cc <get_reg>
 8004f32:	7070      	strb	r0, [r6, #1]
	}

	if ((reg_shadow[CH1_GREEN])!= get_reg(CH1_GREEN) || force)
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	2002      	movs	r0, #2
 8004f38:	789e      	ldrb	r6, [r3, #2]
 8004f3a:	f7ff fcc7 	bl	80048cc <get_reg>
 8004f3e:	4286      	cmp	r6, r0
 8004f40:	d100      	bne.n	8004f44 <update_pwm_lights+0x84>
 8004f42:	b1ad      	cbz	r5, 8004f70 <update_pwm_lights+0xb0>
	{
		configPWM(PWM_CH1,CH_GREEN,scale_value(get_reg(CH1_GREEN),settings.offset_green,settings.gain_green,settings.gamma_green));
 8004f44:	2002      	movs	r0, #2
 8004f46:	f7ff fcc1 	bl	80048cc <get_reg>
 8004f4a:	4982      	ldr	r1, [pc, #520]	; (8005154 <update_pwm_lights+0x294>)
 8004f4c:	f9b1 3044 	ldrsh.w	r3, [r1, #68]	; 0x44
 8004f50:	f9b1 2042 	ldrsh.w	r2, [r1, #66]	; 0x42
 8004f54:	f9b1 1040 	ldrsh.w	r1, [r1, #64]	; 0x40
 8004f58:	f7ff ff88 	bl	8004e6c <scale_value>
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	4602      	mov	r2, r0
 8004f60:	2000      	movs	r0, #0
 8004f62:	f000 fceb 	bl	800593c <configPWM>
		reg_shadow[CH1_GREEN] = get_reg(CH1_GREEN);
 8004f66:	2002      	movs	r0, #2
 8004f68:	6826      	ldr	r6, [r4, #0]
 8004f6a:	f7ff fcaf 	bl	80048cc <get_reg>
 8004f6e:	70b0      	strb	r0, [r6, #2]
	}

	if ((reg_shadow[CH1_BLUE])!= get_reg(CH1_BLUE) || force)
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	2003      	movs	r0, #3
 8004f74:	78de      	ldrb	r6, [r3, #3]
 8004f76:	f7ff fca9 	bl	80048cc <get_reg>
 8004f7a:	4286      	cmp	r6, r0
 8004f7c:	d100      	bne.n	8004f80 <update_pwm_lights+0xc0>
 8004f7e:	b1ad      	cbz	r5, 8004fac <update_pwm_lights+0xec>
	{
		configPWM(PWM_CH1,CH_BLUE,scale_value(get_reg(CH1_BLUE),settings.offset_blue,settings.gain_blue,settings.gamma_blue));
 8004f80:	2003      	movs	r0, #3
 8004f82:	f7ff fca3 	bl	80048cc <get_reg>
 8004f86:	4973      	ldr	r1, [pc, #460]	; (8005154 <update_pwm_lights+0x294>)
 8004f88:	f9b1 304a 	ldrsh.w	r3, [r1, #74]	; 0x4a
 8004f8c:	f9b1 2048 	ldrsh.w	r2, [r1, #72]	; 0x48
 8004f90:	f9b1 1046 	ldrsh.w	r1, [r1, #70]	; 0x46
 8004f94:	f7ff ff6a 	bl	8004e6c <scale_value>
 8004f98:	2102      	movs	r1, #2
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f000 fccd 	bl	800593c <configPWM>
		reg_shadow[CH1_BLUE] = get_reg(CH1_BLUE);
 8004fa2:	2003      	movs	r0, #3
 8004fa4:	6826      	ldr	r6, [r4, #0]
 8004fa6:	f7ff fc91 	bl	80048cc <get_reg>
 8004faa:	70f0      	strb	r0, [r6, #3]
	}

	if ((reg_shadow[CH2_RED])!= get_reg(CH2_RED) || force)
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	2004      	movs	r0, #4
 8004fb0:	791e      	ldrb	r6, [r3, #4]
 8004fb2:	f7ff fc8b 	bl	80048cc <get_reg>
 8004fb6:	4286      	cmp	r6, r0
 8004fb8:	d100      	bne.n	8004fbc <update_pwm_lights+0xfc>
 8004fba:	b1ad      	cbz	r5, 8004fe8 <update_pwm_lights+0x128>
	{
		configPWM(PWM_CH2,CH_RED,scale_value(get_reg(CH2_RED),settings.offset_red,settings.gain_red,settings.gamma_red));
 8004fbc:	2004      	movs	r0, #4
 8004fbe:	f7ff fc85 	bl	80048cc <get_reg>
 8004fc2:	4964      	ldr	r1, [pc, #400]	; (8005154 <update_pwm_lights+0x294>)
 8004fc4:	f9b1 303e 	ldrsh.w	r3, [r1, #62]	; 0x3e
 8004fc8:	f9b1 203c 	ldrsh.w	r2, [r1, #60]	; 0x3c
 8004fcc:	f9b1 103a 	ldrsh.w	r1, [r1, #58]	; 0x3a
 8004fd0:	f7ff ff4c 	bl	8004e6c <scale_value>
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	2001      	movs	r0, #1
 8004fda:	f000 fcaf 	bl	800593c <configPWM>
		reg_shadow[CH2_RED] = get_reg(CH2_RED);
 8004fde:	2004      	movs	r0, #4
 8004fe0:	6826      	ldr	r6, [r4, #0]
 8004fe2:	f7ff fc73 	bl	80048cc <get_reg>
 8004fe6:	7130      	strb	r0, [r6, #4]
	}

	if ((reg_shadow[CH2_GREEN])!= get_reg(CH2_GREEN) || force)
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	2005      	movs	r0, #5
 8004fec:	795e      	ldrb	r6, [r3, #5]
 8004fee:	f7ff fc6d 	bl	80048cc <get_reg>
 8004ff2:	4286      	cmp	r6, r0
 8004ff4:	d100      	bne.n	8004ff8 <update_pwm_lights+0x138>
 8004ff6:	b1ad      	cbz	r5, 8005024 <update_pwm_lights+0x164>
	{
		configPWM(PWM_CH2,CH_GREEN,scale_value(get_reg(CH2_GREEN),settings.offset_green,settings.gain_green,settings.gamma_green));
 8004ff8:	2005      	movs	r0, #5
 8004ffa:	f7ff fc67 	bl	80048cc <get_reg>
 8004ffe:	4955      	ldr	r1, [pc, #340]	; (8005154 <update_pwm_lights+0x294>)
 8005000:	f9b1 3044 	ldrsh.w	r3, [r1, #68]	; 0x44
 8005004:	f9b1 2042 	ldrsh.w	r2, [r1, #66]	; 0x42
 8005008:	f9b1 1040 	ldrsh.w	r1, [r1, #64]	; 0x40
 800500c:	f7ff ff2e 	bl	8004e6c <scale_value>
 8005010:	2101      	movs	r1, #1
 8005012:	4602      	mov	r2, r0
 8005014:	4608      	mov	r0, r1
 8005016:	f000 fc91 	bl	800593c <configPWM>
		reg_shadow[CH2_GREEN] = get_reg(CH2_GREEN);
 800501a:	2005      	movs	r0, #5
 800501c:	6826      	ldr	r6, [r4, #0]
 800501e:	f7ff fc55 	bl	80048cc <get_reg>
 8005022:	7170      	strb	r0, [r6, #5]
	}

	if ((reg_shadow[CH2_BLUE])!= get_reg(CH2_BLUE) || force)
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	2006      	movs	r0, #6
 8005028:	799e      	ldrb	r6, [r3, #6]
 800502a:	f7ff fc4f 	bl	80048cc <get_reg>
 800502e:	4286      	cmp	r6, r0
 8005030:	d100      	bne.n	8005034 <update_pwm_lights+0x174>
 8005032:	b1ad      	cbz	r5, 8005060 <update_pwm_lights+0x1a0>
	{
		configPWM(PWM_CH2,CH_BLUE,scale_value(get_reg(CH2_BLUE),settings.offset_blue,settings.gain_blue,settings.gamma_blue));
 8005034:	2006      	movs	r0, #6
 8005036:	f7ff fc49 	bl	80048cc <get_reg>
 800503a:	4946      	ldr	r1, [pc, #280]	; (8005154 <update_pwm_lights+0x294>)
 800503c:	f9b1 304a 	ldrsh.w	r3, [r1, #74]	; 0x4a
 8005040:	f9b1 2048 	ldrsh.w	r2, [r1, #72]	; 0x48
 8005044:	f9b1 1046 	ldrsh.w	r1, [r1, #70]	; 0x46
 8005048:	f7ff ff10 	bl	8004e6c <scale_value>
 800504c:	2102      	movs	r1, #2
 800504e:	4602      	mov	r2, r0
 8005050:	2001      	movs	r0, #1
 8005052:	f000 fc73 	bl	800593c <configPWM>
		reg_shadow[CH2_BLUE] = get_reg(CH2_BLUE);
 8005056:	2006      	movs	r0, #6
 8005058:	6826      	ldr	r6, [r4, #0]
 800505a:	f7ff fc37 	bl	80048cc <get_reg>
 800505e:	71b0      	strb	r0, [r6, #6]
	}

	if ((reg_shadow[CH3_RED])!= get_reg(CH3_RED) || force)
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	2007      	movs	r0, #7
 8005064:	79de      	ldrb	r6, [r3, #7]
 8005066:	f7ff fc31 	bl	80048cc <get_reg>
 800506a:	4286      	cmp	r6, r0
 800506c:	d100      	bne.n	8005070 <update_pwm_lights+0x1b0>
 800506e:	b1ad      	cbz	r5, 800509c <update_pwm_lights+0x1dc>
	{
		configPWM(PWM_CH3,CH_RED,scale_value(get_reg(CH3_RED),settings.offset_red,settings.gain_red,settings.gamma_red));
 8005070:	2007      	movs	r0, #7
 8005072:	f7ff fc2b 	bl	80048cc <get_reg>
 8005076:	4937      	ldr	r1, [pc, #220]	; (8005154 <update_pwm_lights+0x294>)
 8005078:	f9b1 303e 	ldrsh.w	r3, [r1, #62]	; 0x3e
 800507c:	f9b1 203c 	ldrsh.w	r2, [r1, #60]	; 0x3c
 8005080:	f9b1 103a 	ldrsh.w	r1, [r1, #58]	; 0x3a
 8005084:	f7ff fef2 	bl	8004e6c <scale_value>
 8005088:	2100      	movs	r1, #0
 800508a:	4602      	mov	r2, r0
 800508c:	2002      	movs	r0, #2
 800508e:	f000 fc55 	bl	800593c <configPWM>
		reg_shadow[CH3_RED] = get_reg(CH3_RED);
 8005092:	2007      	movs	r0, #7
 8005094:	6826      	ldr	r6, [r4, #0]
 8005096:	f7ff fc19 	bl	80048cc <get_reg>
 800509a:	71f0      	strb	r0, [r6, #7]
	}

	if ((reg_shadow[CH3_GREEN])!= get_reg(CH3_GREEN) || force)
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	2008      	movs	r0, #8
 80050a0:	7a1e      	ldrb	r6, [r3, #8]
 80050a2:	f7ff fc13 	bl	80048cc <get_reg>
 80050a6:	4286      	cmp	r6, r0
 80050a8:	d100      	bne.n	80050ac <update_pwm_lights+0x1ec>
 80050aa:	b1ad      	cbz	r5, 80050d8 <update_pwm_lights+0x218>
	{
		configPWM(PWM_CH3,CH_GREEN,scale_value(get_reg(CH3_GREEN),settings.offset_green,settings.gain_green,settings.gamma_green));
 80050ac:	2008      	movs	r0, #8
 80050ae:	f7ff fc0d 	bl	80048cc <get_reg>
 80050b2:	4928      	ldr	r1, [pc, #160]	; (8005154 <update_pwm_lights+0x294>)
 80050b4:	f9b1 3044 	ldrsh.w	r3, [r1, #68]	; 0x44
 80050b8:	f9b1 2042 	ldrsh.w	r2, [r1, #66]	; 0x42
 80050bc:	f9b1 1040 	ldrsh.w	r1, [r1, #64]	; 0x40
 80050c0:	f7ff fed4 	bl	8004e6c <scale_value>
 80050c4:	2101      	movs	r1, #1
 80050c6:	4602      	mov	r2, r0
 80050c8:	2002      	movs	r0, #2
 80050ca:	f000 fc37 	bl	800593c <configPWM>
		reg_shadow[CH3_GREEN] = get_reg(CH3_GREEN);
 80050ce:	2008      	movs	r0, #8
 80050d0:	6826      	ldr	r6, [r4, #0]
 80050d2:	f7ff fbfb 	bl	80048cc <get_reg>
 80050d6:	7230      	strb	r0, [r6, #8]
	}

	if ((reg_shadow[CH3_BLUE])!= get_reg(CH3_BLUE) || force)
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	2009      	movs	r0, #9
 80050dc:	7a5e      	ldrb	r6, [r3, #9]
 80050de:	f7ff fbf5 	bl	80048cc <get_reg>
 80050e2:	4286      	cmp	r6, r0
 80050e4:	d100      	bne.n	80050e8 <update_pwm_lights+0x228>
 80050e6:	b1ad      	cbz	r5, 8005114 <update_pwm_lights+0x254>
	{
		configPWM(PWM_CH3,CH_BLUE,scale_value(get_reg(CH3_BLUE),settings.offset_blue,settings.gain_blue,settings.gamma_blue));
 80050e8:	2009      	movs	r0, #9
 80050ea:	f7ff fbef 	bl	80048cc <get_reg>
 80050ee:	4919      	ldr	r1, [pc, #100]	; (8005154 <update_pwm_lights+0x294>)
 80050f0:	f9b1 304a 	ldrsh.w	r3, [r1, #74]	; 0x4a
 80050f4:	f9b1 2048 	ldrsh.w	r2, [r1, #72]	; 0x48
 80050f8:	f9b1 1046 	ldrsh.w	r1, [r1, #70]	; 0x46
 80050fc:	f7ff feb6 	bl	8004e6c <scale_value>
 8005100:	2102      	movs	r1, #2
 8005102:	4602      	mov	r2, r0
 8005104:	4608      	mov	r0, r1
 8005106:	f000 fc19 	bl	800593c <configPWM>
		reg_shadow[CH3_BLUE] = get_reg(CH3_BLUE);
 800510a:	2009      	movs	r0, #9
 800510c:	6826      	ldr	r6, [r4, #0]
 800510e:	f7ff fbdd 	bl	80048cc <get_reg>
 8005112:	7270      	strb	r0, [r6, #9]
	}

	if ((reg_shadow[CH3_WHITE])!= get_reg(CH3_WHITE) || force)
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	200a      	movs	r0, #10
 8005118:	7a9e      	ldrb	r6, [r3, #10]
 800511a:	f7ff fbd7 	bl	80048cc <get_reg>
 800511e:	4286      	cmp	r6, r0
 8005120:	d100      	bne.n	8005124 <update_pwm_lights+0x264>
 8005122:	b18d      	cbz	r5, 8005148 <update_pwm_lights+0x288>
	{
		configPWM(PWM_CH3,CH_WHITE,scale_value(get_reg(CH3_WHITE),0,100,220));  //TBD, no settings?
 8005124:	200a      	movs	r0, #10
 8005126:	f7ff fbd1 	bl	80048cc <get_reg>
 800512a:	23dc      	movs	r3, #220	; 0xdc
 800512c:	2264      	movs	r2, #100	; 0x64
 800512e:	2100      	movs	r1, #0
 8005130:	f7ff fe9c 	bl	8004e6c <scale_value>
 8005134:	2103      	movs	r1, #3
 8005136:	4602      	mov	r2, r0
 8005138:	2002      	movs	r0, #2
 800513a:	f000 fbff 	bl	800593c <configPWM>
		reg_shadow[CH3_WHITE] = get_reg(CH3_WHITE);
 800513e:	200a      	movs	r0, #10
 8005140:	6824      	ldr	r4, [r4, #0]
 8005142:	f7ff fbc3 	bl	80048cc <get_reg>
 8005146:	72a0      	strb	r0, [r4, #10]
	}

}
 8005148:	bd70      	pop	{r4, r5, r6, pc}
 800514a:	bf00      	nop
 800514c:	2000041c 	.word	0x2000041c
 8005150:	2000041a 	.word	0x2000041a
 8005154:	20000ac0 	.word	0x20000ac0

08005158 <init_update_lights>:
{
 8005158:	b510      	push	{r4, lr}
	if (reg_shadow != NULL)
 800515a:	4c09      	ldr	r4, [pc, #36]	; (8005180 <init_update_lights+0x28>)
 800515c:	6820      	ldr	r0, [r4, #0]
 800515e:	b108      	cbz	r0, 8005164 <init_update_lights+0xc>
		free(reg_shadow);
 8005160:	f002 fd66 	bl	8007c30 <free>
	reg_shadow = calloc(get_reg_length()+1, sizeof(uint8_t));
 8005164:	f7ff fb74 	bl	8004850 <get_reg_length>
 8005168:	2101      	movs	r1, #1
 800516a:	4408      	add	r0, r1
 800516c:	f002 fd26 	bl	8007bbc <calloc>
	reg_shadow[MAX_BRIGHTNESS] = 255;
 8005170:	23ff      	movs	r3, #255	; 0xff
 8005172:	7003      	strb	r3, [r0, #0]
	reg_shadow = calloc(get_reg_length()+1, sizeof(uint8_t));
 8005174:	6020      	str	r0, [r4, #0]
	update_pwm_lights(1);
 8005176:	2001      	movs	r0, #1
}
 8005178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_pwm_lights(1);
 800517c:	f7ff bea0 	b.w	8004ec0 <update_pwm_lights>
 8005180:	2000041c 	.word	0x2000041c

08005184 <update_fx>:

void update_fx(void)
{
 8005184:	b538      	push	{r3, r4, r5, lr}
	uint8_t val = 0;

	//Deal with LED Strip Registers/Effects
	if (DMX_MODE2 == get_mode())
 8005186:	f7ff fb5d 	bl	8004844 <get_mode>
 800518a:	2801      	cmp	r0, #1
 800518c:	d116      	bne.n	80051bc <update_fx+0x38>
	{
		val = get_reg(FX_SELECT)/settings.fx_multiplier;
 800518e:	200b      	movs	r0, #11
 8005190:	f7ff fb9c 	bl	80048cc <get_reg>
 8005194:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <update_fx+0x3c>)
		//Activate FX if valid FX is selected or restore settings...
		if (reg_shadow[FX_SELECT]!= val)
 8005196:	4d0b      	ldr	r5, [pc, #44]	; (80051c4 <update_fx+0x40>)
		val = get_reg(FX_SELECT)/settings.fx_multiplier;
 8005198:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800519c:	fbb0 f0f3 	udiv	r0, r0, r3
		if (reg_shadow[FX_SELECT]!= val)
 80051a0:	682b      	ldr	r3, [r5, #0]
		val = get_reg(FX_SELECT)/settings.fx_multiplier;
 80051a2:	b2c0      	uxtb	r0, r0
		if (reg_shadow[FX_SELECT]!= val)
 80051a4:	7adb      	ldrb	r3, [r3, #11]
 80051a6:	4283      	cmp	r3, r0
 80051a8:	d008      	beq.n	80051bc <update_fx+0x38>
		{
			val = start_fx(val);
 80051aa:	f7ff fd3b 	bl	8004c24 <start_fx>
 80051ae:	4604      	mov	r4, r0
			set_reg(FX_SELECT,val);
 80051b0:	4601      	mov	r1, r0
 80051b2:	200b      	movs	r0, #11
 80051b4:	f7ff fb7c 	bl	80048b0 <set_reg>
			reg_shadow[FX_SELECT] = val;
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	72dc      	strb	r4, [r3, #11]
		}
	}
}
 80051bc:	bd38      	pop	{r3, r4, r5, pc}
 80051be:	bf00      	nop
 80051c0:	20000ac0 	.word	0x20000ac0
 80051c4:	2000041c 	.word	0x2000041c

080051c8 <SystemClock_Config>:
 80051c8:	b530      	push	{r4, r5, lr}
 80051ca:	2410      	movs	r4, #16
 80051cc:	b095      	sub	sp, #84	; 0x54
 80051ce:	4622      	mov	r2, r4
 80051d0:	2100      	movs	r1, #0
 80051d2:	a80c      	add	r0, sp, #48	; 0x30
 80051d4:	f002 fd3f 	bl	8007c56 <memset>
 80051d8:	2214      	movs	r2, #20
 80051da:	2100      	movs	r1, #0
 80051dc:	eb0d 0002 	add.w	r0, sp, r2
 80051e0:	f002 fd39 	bl	8007c56 <memset>
 80051e4:	4622      	mov	r2, r4
 80051e6:	2100      	movs	r1, #0
 80051e8:	a801      	add	r0, sp, #4
 80051ea:	f002 fd34 	bl	8007c56 <memset>
 80051ee:	2502      	movs	r5, #2
 80051f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051f4:	2209      	movs	r2, #9
 80051f6:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
 80051fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80051fe:	2201      	movs	r2, #1
 8005200:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005204:	a80a      	add	r0, sp, #40	; 0x28
 8005206:	920e      	str	r2, [sp, #56]	; 0x38
 8005208:	9210      	str	r2, [sp, #64]	; 0x40
 800520a:	9313      	str	r3, [sp, #76]	; 0x4c
 800520c:	f7fd f8c0 	bl	8002390 <HAL_RCC_OscConfig>
 8005210:	230f      	movs	r3, #15
 8005212:	2400      	movs	r4, #0
 8005214:	e9cd 3505 	strd	r3, r5, [sp, #20]
 8005218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800521c:	4629      	mov	r1, r5
 800521e:	a805      	add	r0, sp, #20
 8005220:	e9cd 4307 	strd	r4, r3, [sp, #28]
 8005224:	9409      	str	r4, [sp, #36]	; 0x24
 8005226:	f7fd fa8b 	bl	8002740 <HAL_RCC_ClockConfig>
 800522a:	2312      	movs	r3, #18
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005232:	a801      	add	r0, sp, #4
 8005234:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8005238:	f7fd fb3e 	bl	80028b8 <HAL_RCCEx_PeriphCLKConfig>
 800523c:	b015      	add	sp, #84	; 0x54
 800523e:	bd30      	pop	{r4, r5, pc}

08005240 <main>:
 8005240:	2400      	movs	r4, #0
 8005242:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005246:	4dc2      	ldr	r5, [pc, #776]	; (8005550 <main+0x310>)
 8005248:	b08b      	sub	sp, #44	; 0x2c
 800524a:	f7fb feaf 	bl	8000fac <HAL_Init>
 800524e:	f7ff ffbb 	bl	80051c8 <SystemClock_Config>
 8005252:	9408      	str	r4, [sp, #32]
 8005254:	69ab      	ldr	r3, [r5, #24]
 8005256:	2601      	movs	r6, #1
 8005258:	2702      	movs	r7, #2
 800525a:	f04f 0880 	mov.w	r8, #128	; 0x80
 800525e:	f043 0310 	orr.w	r3, r3, #16
 8005262:	61ab      	str	r3, [r5, #24]
 8005264:	69ab      	ldr	r3, [r5, #24]
 8005266:	a906      	add	r1, sp, #24
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	9302      	str	r3, [sp, #8]
 800526e:	9b02      	ldr	r3, [sp, #8]
 8005270:	69ab      	ldr	r3, [r5, #24]
 8005272:	48b8      	ldr	r0, [pc, #736]	; (8005554 <main+0x314>)
 8005274:	f043 0320 	orr.w	r3, r3, #32
 8005278:	61ab      	str	r3, [r5, #24]
 800527a:	69ab      	ldr	r3, [r5, #24]
 800527c:	f44f 5900 	mov.w	r9, #8192	; 0x2000
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	9303      	str	r3, [sp, #12]
 8005286:	9b03      	ldr	r3, [sp, #12]
 8005288:	69ab      	ldr	r3, [r5, #24]
 800528a:	f04f 0a03 	mov.w	sl, #3
 800528e:	f043 0304 	orr.w	r3, r3, #4
 8005292:	61ab      	str	r3, [r5, #24]
 8005294:	69ab      	ldr	r3, [r5, #24]
 8005296:	f248 0b20 	movw	fp, #32800	; 0x8020
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	9304      	str	r3, [sp, #16]
 80052a0:	9b04      	ldr	r3, [sp, #16]
 80052a2:	69ab      	ldr	r3, [r5, #24]
 80052a4:	f043 0308 	orr.w	r3, r3, #8
 80052a8:	61ab      	str	r3, [r5, #24]
 80052aa:	69ab      	ldr	r3, [r5, #24]
 80052ac:	e9cd 8606 	strd	r8, r6, [sp, #24]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	9305      	str	r3, [sp, #20]
 80052b6:	9b05      	ldr	r3, [sp, #20]
 80052b8:	9709      	str	r7, [sp, #36]	; 0x24
 80052ba:	f7fc fbb7 	bl	8001a2c <HAL_GPIO_Init>
 80052be:	4622      	mov	r2, r4
 80052c0:	4641      	mov	r1, r8
 80052c2:	48a4      	ldr	r0, [pc, #656]	; (8005554 <main+0x314>)
 80052c4:	f7fc fc98 	bl	8001bf8 <HAL_GPIO_WritePin>
 80052c8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80052cc:	a906      	add	r1, sp, #24
 80052ce:	48a2      	ldr	r0, [pc, #648]	; (8005558 <main+0x318>)
 80052d0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80052d4:	9408      	str	r4, [sp, #32]
 80052d6:	f7fc fba9 	bl	8001a2c <HAL_GPIO_Init>
 80052da:	a906      	add	r1, sp, #24
 80052dc:	489e      	ldr	r0, [pc, #632]	; (8005558 <main+0x318>)
 80052de:	e9cd 9606 	strd	r9, r6, [sp, #24]
 80052e2:	9709      	str	r7, [sp, #36]	; 0x24
 80052e4:	f7fc fba2 	bl	8001a2c <HAL_GPIO_Init>
 80052e8:	f240 73ce 	movw	r3, #1998	; 0x7ce
 80052ec:	a906      	add	r1, sp, #24
 80052ee:	489b      	ldr	r0, [pc, #620]	; (800555c <main+0x31c>)
 80052f0:	e9cd 3706 	strd	r3, r7, [sp, #24]
 80052f4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80052f8:	f7fc fb98 	bl	8001a2c <HAL_GPIO_Init>
 80052fc:	a906      	add	r1, sp, #24
 80052fe:	4895      	ldr	r0, [pc, #596]	; (8005554 <main+0x314>)
 8005300:	e9cd a706 	strd	sl, r7, [sp, #24]
 8005304:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005308:	f7fc fb90 	bl	8001a2c <HAL_GPIO_Init>
 800530c:	a906      	add	r1, sp, #24
 800530e:	4893      	ldr	r0, [pc, #588]	; (800555c <main+0x31c>)
 8005310:	e9cd b406 	strd	fp, r4, [sp, #24]
 8005314:	9608      	str	r6, [sp, #32]
 8005316:	f7fc fb89 	bl	8001a2c <HAL_GPIO_Init>
 800531a:	f247 3318 	movw	r3, #29464	; 0x7318
 800531e:	a906      	add	r1, sp, #24
 8005320:	488c      	ldr	r0, [pc, #560]	; (8005554 <main+0x314>)
 8005322:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005326:	9608      	str	r6, [sp, #32]
 8005328:	f7fc fb80 	bl	8001a2c <HAL_GPIO_Init>
 800532c:	a906      	add	r1, sp, #24
 800532e:	4889      	ldr	r0, [pc, #548]	; (8005554 <main+0x314>)
 8005330:	e9cd b706 	strd	fp, r7, [sp, #24]
 8005334:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005338:	f7fc fb78 	bl	8001a2c <HAL_GPIO_Init>
 800533c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005340:	f44f 2a60 	mov.w	sl, #917504	; 0xe0000
 8005344:	a906      	add	r1, sp, #24
 8005346:	4883      	ldr	r0, [pc, #524]	; (8005554 <main+0x314>)
 8005348:	e9cd 4708 	strd	r4, r7, [sp, #32]
 800534c:	e9cd 3606 	strd	r3, r6, [sp, #24]
 8005350:	f7fc fb6c 	bl	8001a2c <HAL_GPIO_Init>
 8005354:	4a82      	ldr	r2, [pc, #520]	; (8005560 <main+0x320>)
 8005356:	4f83      	ldr	r7, [pc, #524]	; (8005564 <main+0x324>)
 8005358:	6853      	ldr	r3, [r2, #4]
 800535a:	4649      	mov	r1, r9
 800535c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005360:	4333      	orrs	r3, r6
 8005362:	6053      	str	r3, [r2, #4]
 8005364:	487c      	ldr	r0, [pc, #496]	; (8005558 <main+0x318>)
 8005366:	4622      	mov	r2, r4
 8005368:	f7fc fc46 	bl	8001bf8 <HAL_GPIO_WritePin>
 800536c:	4b7e      	ldr	r3, [pc, #504]	; (8005568 <main+0x328>)
 800536e:	4638      	mov	r0, r7
 8005370:	603b      	str	r3, [r7, #0]
 8005372:	60bc      	str	r4, [r7, #8]
 8005374:	733c      	strb	r4, [r7, #12]
 8005376:	753c      	strb	r4, [r7, #20]
 8005378:	f8c7 a01c 	str.w	sl, [r7, #28]
 800537c:	607c      	str	r4, [r7, #4]
 800537e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8005382:	9408      	str	r4, [sp, #32]
 8005384:	613e      	str	r6, [r7, #16]
 8005386:	f7fb ffed 	bl	8001364 <HAL_ADC_Init>
 800538a:	a906      	add	r1, sp, #24
 800538c:	4638      	mov	r0, r7
 800538e:	4f77      	ldr	r7, [pc, #476]	; (800556c <main+0x32c>)
 8005390:	e9cd 4606 	strd	r4, r6, [sp, #24]
 8005394:	9408      	str	r4, [sp, #32]
 8005396:	f7fb fea7 	bl	80010e8 <HAL_ADC_ConfigChannel>
 800539a:	4b75      	ldr	r3, [pc, #468]	; (8005570 <main+0x330>)
 800539c:	4638      	mov	r0, r7
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	60bc      	str	r4, [r7, #8]
 80053a2:	733c      	strb	r4, [r7, #12]
 80053a4:	753c      	strb	r4, [r7, #20]
 80053a6:	f8c7 a01c 	str.w	sl, [r7, #28]
 80053aa:	607c      	str	r4, [r7, #4]
 80053ac:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80053b0:	9408      	str	r4, [sp, #32]
 80053b2:	613e      	str	r6, [r7, #16]
 80053b4:	f7fb ffd6 	bl	8001364 <HAL_ADC_Init>
 80053b8:	2304      	movs	r3, #4
 80053ba:	4638      	mov	r0, r7
 80053bc:	270c      	movs	r7, #12
 80053be:	a906      	add	r1, sp, #24
 80053c0:	e9cd 3606 	strd	r3, r6, [sp, #24]
 80053c4:	9408      	str	r4, [sp, #32]
 80053c6:	f7fb fe8f 	bl	80010e8 <HAL_ADC_ConfigChannel>
 80053ca:	486a      	ldr	r0, [pc, #424]	; (8005574 <main+0x334>)
 80053cc:	4b6a      	ldr	r3, [pc, #424]	; (8005578 <main+0x338>)
 80053ce:	4a6b      	ldr	r2, [pc, #428]	; (800557c <main+0x33c>)
 80053d0:	e9c0 4902 	strd	r4, r9, [r0, #8]
 80053d4:	e9c0 2300 	strd	r2, r3, [r0]
 80053d8:	e9c0 7405 	strd	r7, r4, [r0, #20]
 80053dc:	6104      	str	r4, [r0, #16]
 80053de:	61c4      	str	r4, [r0, #28]
 80053e0:	f7fd ffa6 	bl	8003330 <HAL_HalfDuplex_Init>
 80053e4:	4622      	mov	r2, r4
 80053e6:	4621      	mov	r1, r4
 80053e8:	2025      	movs	r0, #37	; 0x25
 80053ea:	f7fc f84f 	bl	800148c <HAL_NVIC_SetPriority>
 80053ee:	2025      	movs	r0, #37	; 0x25
 80053f0:	f7fc f880 	bl	80014f4 <HAL_NVIC_EnableIRQ>
 80053f4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80053f8:	4861      	ldr	r0, [pc, #388]	; (8005580 <main+0x340>)
 80053fa:	4962      	ldr	r1, [pc, #392]	; (8005584 <main+0x344>)
 80053fc:	e9c0 4704 	strd	r4, r7, [r0, #16]
 8005400:	e9c0 1300 	strd	r1, r3, [r0]
 8005404:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005408:	e9c0 4406 	strd	r4, r4, [r0, #24]
 800540c:	f7fd ff62 	bl	80032d4 <HAL_UART_Init>
 8005410:	4b5d      	ldr	r3, [pc, #372]	; (8005588 <main+0x348>)
 8005412:	f44f 7a82 	mov.w	sl, #260	; 0x104
 8005416:	f8c3 8004 	str.w	r8, [r3, #4]
 800541a:	f44f 7900 	mov.w	r9, #512	; 0x200
 800541e:	f04f 0820 	mov.w	r8, #32
 8005422:	270a      	movs	r7, #10
 8005424:	69ab      	ldr	r3, [r5, #24]
 8005426:	4859      	ldr	r0, [pc, #356]	; (800558c <main+0x34c>)
 8005428:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800542c:	61ab      	str	r3, [r5, #24]
 800542e:	69ab      	ldr	r3, [r5, #24]
 8005430:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005438:	9306      	str	r3, [sp, #24]
 800543a:	9b06      	ldr	r3, [sp, #24]
 800543c:	4b54      	ldr	r3, [pc, #336]	; (8005590 <main+0x350>)
 800543e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005442:	e9c0 3a00 	strd	r3, sl, [r0]
 8005446:	e9c0 4408 	strd	r4, r4, [r0, #32]
 800544a:	6284      	str	r4, [r0, #40]	; 0x28
 800544c:	e9c0 9806 	strd	r9, r8, [r0, #24]
 8005450:	62c7      	str	r7, [r0, #44]	; 0x2c
 8005452:	f7fd faf3 	bl	8002a3c <HAL_SPI_Init>
 8005456:	69eb      	ldr	r3, [r5, #28]
 8005458:	484e      	ldr	r0, [pc, #312]	; (8005594 <main+0x354>)
 800545a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800545e:	61eb      	str	r3, [r5, #28]
 8005460:	69eb      	ldr	r3, [r5, #28]
 8005462:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	9b01      	ldr	r3, [sp, #4]
 800546e:	4b4a      	ldr	r3, [pc, #296]	; (8005598 <main+0x358>)
 8005470:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005474:	e9c0 3a00 	strd	r3, sl, [r0]
 8005478:	e9c0 4408 	strd	r4, r4, [r0, #32]
 800547c:	e9c0 470a 	strd	r4, r7, [r0, #40]	; 0x28
 8005480:	e9c0 9806 	strd	r9, r8, [r0, #24]
 8005484:	f7fd fada 	bl	8002a3c <HAL_SPI_Init>
 8005488:	696b      	ldr	r3, [r5, #20]
 800548a:	4622      	mov	r2, r4
 800548c:	4333      	orrs	r3, r6
 800548e:	616b      	str	r3, [r5, #20]
 8005490:	696b      	ldr	r3, [r5, #20]
 8005492:	4621      	mov	r1, r4
 8005494:	4033      	ands	r3, r6
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	200d      	movs	r0, #13
 800549a:	9b00      	ldr	r3, [sp, #0]
 800549c:	f7fb fff6 	bl	800148c <HAL_NVIC_SetPriority>
 80054a0:	200d      	movs	r0, #13
 80054a2:	f7fc f827 	bl	80014f4 <HAL_NVIC_EnableIRQ>
 80054a6:	4622      	mov	r2, r4
 80054a8:	4621      	mov	r1, r4
 80054aa:	200e      	movs	r0, #14
 80054ac:	f7fb ffee 	bl	800148c <HAL_NVIC_SetPriority>
 80054b0:	200e      	movs	r0, #14
 80054b2:	f7fc f81f 	bl	80014f4 <HAL_NVIC_EnableIRQ>
 80054b6:	4839      	ldr	r0, [pc, #228]	; (800559c <main+0x35c>)
 80054b8:	f000 fe56 	bl	8006168 <print>
 80054bc:	4838      	ldr	r0, [pc, #224]	; (80055a0 <main+0x360>)
 80054be:	f000 fe53 	bl	8006168 <print>
 80054c2:	4838      	ldr	r0, [pc, #224]	; (80055a4 <main+0x364>)
 80054c4:	f000 fe50 	bl	8006168 <print>
 80054c8:	4835      	ldr	r0, [pc, #212]	; (80055a0 <main+0x360>)
 80054ca:	f000 fe4d 	bl	8006168 <print>
 80054ce:	4833      	ldr	r0, [pc, #204]	; (800559c <main+0x35c>)
 80054d0:	f000 fe4a 	bl	8006168 <print>
 80054d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054d6:	f7ff fc61 	bl	8004d9c <get_mode_from_pins>
 80054da:	4604      	mov	r4, r0
 80054dc:	f7ff fc74 	bl	8004dc8 <get_addr_from_pins>
 80054e0:	fa00 f106 	lsl.w	r1, r0, r6
 80054e4:	4620      	mov	r0, r4
 80054e6:	f7ff f9cb 	bl	8004880 <dmx512_init>
 80054ea:	482f      	ldr	r0, [pc, #188]	; (80055a8 <main+0x368>)
 80054ec:	f000 fe3c 	bl	8006168 <print>
 80054f0:	f7ff fc54 	bl	8004d9c <get_mode_from_pins>
 80054f4:	0780      	lsls	r0, r0, #30
 80054f6:	f140 80ee 	bpl.w	80056d6 <main+0x496>
 80054fa:	4b2c      	ldr	r3, [pc, #176]	; (80055ac <main+0x36c>)
 80054fc:	701e      	strb	r6, [r3, #0]
 80054fe:	f001 fc7b 	bl	8006df8 <MX_USB_DEVICE_Init>
 8005502:	482b      	ldr	r0, [pc, #172]	; (80055b0 <main+0x370>)
 8005504:	f000 fe30 	bl	8006168 <print>
 8005508:	2180      	movs	r1, #128	; 0x80
 800550a:	482a      	ldr	r0, [pc, #168]	; (80055b4 <main+0x374>)
 800550c:	f000 fa32 	bl	8005974 <ring_buffer_init>
 8005510:	2800      	cmp	r0, #0
 8005512:	f000 80e2 	beq.w	80056da <main+0x49a>
 8005516:	4828      	ldr	r0, [pc, #160]	; (80055b8 <main+0x378>)
 8005518:	f000 fe26 	bl	8006168 <print>
 800551c:	2180      	movs	r1, #128	; 0x80
 800551e:	4827      	ldr	r0, [pc, #156]	; (80055bc <main+0x37c>)
 8005520:	f000 fa28 	bl	8005974 <ring_buffer_init>
 8005524:	2800      	cmp	r0, #0
 8005526:	f000 80da 	beq.w	80056de <main+0x49e>
 800552a:	4825      	ldr	r0, [pc, #148]	; (80055c0 <main+0x380>)
 800552c:	f000 fe1c 	bl	8006168 <print>
 8005530:	f7ff fabe 	bl	8004ab0 <dmx512_rec_init>
 8005534:	4823      	ldr	r0, [pc, #140]	; (80055c4 <main+0x384>)
 8005536:	f000 fe17 	bl	8006168 <print>
 800553a:	f000 f9d3 	bl	80058e4 <init_timers>
 800553e:	4822      	ldr	r0, [pc, #136]	; (80055c8 <main+0x388>)
 8005540:	f000 fe12 	bl	8006168 <print>
 8005544:	f000 fb4c 	bl	8005be0 <init_settings>
 8005548:	4820      	ldr	r0, [pc, #128]	; (80055cc <main+0x38c>)
 800554a:	f000 fe0d 	bl	8006168 <print>
 800554e:	e03f      	b.n	80055d0 <main+0x390>
 8005550:	40021000 	.word	0x40021000
 8005554:	40010c00 	.word	0x40010c00
 8005558:	40011000 	.word	0x40011000
 800555c:	40010800 	.word	0x40010800
 8005560:	40010000 	.word	0x40010000
 8005564:	20000c10 	.word	0x20000c10
 8005568:	40012400 	.word	0x40012400
 800556c:	20000ba4 	.word	0x20000ba4
 8005570:	40012800 	.word	0x40012800
 8005574:	20000c40 	.word	0x20000c40
 8005578:	0003d090 	.word	0x0003d090
 800557c:	40013800 	.word	0x40013800
 8005580:	20000b64 	.word	0x20000b64
 8005584:	40004800 	.word	0x40004800
 8005588:	e000e100 	.word	0xe000e100
 800558c:	20000c80 	.word	0x20000c80
 8005590:	40013000 	.word	0x40013000
 8005594:	20000b0c 	.word	0x20000b0c
 8005598:	40003800 	.word	0x40003800
 800559c:	08009fbb 	.word	0x08009fbb
 80055a0:	08009ffe 	.word	0x08009ffe
 80055a4:	080098e0 	.word	0x080098e0
 80055a8:	080098ee 	.word	0x080098ee
 80055ac:	20000422 	.word	0x20000422
 80055b0:	08009905 	.word	0x08009905
 80055b4:	200009a8 	.word	0x200009a8
 80055b8:	08009920 	.word	0x08009920
 80055bc:	20000990 	.word	0x20000990
 80055c0:	0800995e 	.word	0x0800995e
 80055c4:	080099a6 	.word	0x080099a6
 80055c8:	080099bb 	.word	0x080099bb
 80055cc:	080099cf 	.word	0x080099cf
 80055d0:	4860      	ldr	r0, [pc, #384]	; (8005754 <main+0x514>)
 80055d2:	f000 fdc9 	bl	8006168 <print>
 80055d6:	f7ff fc3d 	bl	8004e54 <check_button>
 80055da:	2800      	cmp	r0, #0
 80055dc:	f040 8081 	bne.w	80056e2 <main+0x4a2>
 80055e0:	f000 fb9e 	bl	8005d20 <load_settings>
 80055e4:	4b5c      	ldr	r3, [pc, #368]	; (8005758 <main+0x518>)
 80055e6:	4a5d      	ldr	r2, [pc, #372]	; (800575c <main+0x51c>)
 80055e8:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 80055ec:	485c      	ldr	r0, [pc, #368]	; (8005760 <main+0x520>)
 80055ee:	7011      	strb	r1, [r2, #0]
 80055f0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80055f4:	4b5b      	ldr	r3, [pc, #364]	; (8005764 <main+0x524>)
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	f000 fdb6 	bl	8006168 <print>
 80055fc:	f000 fb18 	bl	8005c30 <apply_settings>
 8005600:	4859      	ldr	r0, [pc, #356]	; (8005768 <main+0x528>)
 8005602:	f000 fdb1 	bl	8006168 <print>
 8005606:	f7ff f91d 	bl	8004844 <get_mode>
 800560a:	2801      	cmp	r0, #1
 800560c:	d175      	bne.n	80056fa <main+0x4ba>
 800560e:	4857      	ldr	r0, [pc, #348]	; (800576c <main+0x52c>)
 8005610:	4c51      	ldr	r4, [pc, #324]	; (8005758 <main+0x518>)
 8005612:	f000 fda9 	bl	8006168 <print>
 8005616:	f7ff fab9 	bl	8004b8c <init_fx_list>
 800561a:	f7ff fb01 	bl	8004c20 <install_fx>
 800561e:	4854      	ldr	r0, [pc, #336]	; (8005770 <main+0x530>)
 8005620:	f000 fda2 	bl	8006168 <print>
 8005624:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8005626:	2000      	movs	r0, #0
 8005628:	f002 f9d0 	bl	80079cc <WS2812B_init>
 800562c:	2800      	cmp	r0, #0
 800562e:	d05c      	beq.n	80056ea <main+0x4aa>
 8005630:	4850      	ldr	r0, [pc, #320]	; (8005774 <main+0x534>)
 8005632:	f000 fd99 	bl	8006168 <print>
 8005636:	2000      	movs	r0, #0
 8005638:	f002 f9ac 	bl	8007994 <WS2812B_clear>
 800563c:	2000      	movs	r0, #0
 800563e:	f002 f92f 	bl	80078a0 <WS2812B_show>
 8005642:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8005644:	2001      	movs	r0, #1
 8005646:	f002 f9c1 	bl	80079cc <WS2812B_init>
 800564a:	2800      	cmp	r0, #0
 800564c:	d051      	beq.n	80056f2 <main+0x4b2>
 800564e:	484a      	ldr	r0, [pc, #296]	; (8005778 <main+0x538>)
 8005650:	f000 fd8a 	bl	8006168 <print>
 8005654:	2001      	movs	r0, #1
 8005656:	f002 f99d 	bl	8007994 <WS2812B_clear>
 800565a:	2001      	movs	r0, #1
 800565c:	f002 f920 	bl	80078a0 <WS2812B_show>
 8005660:	4846      	ldr	r0, [pc, #280]	; (800577c <main+0x53c>)
 8005662:	f000 fd81 	bl	8006168 <print>
 8005666:	f7ff fd77 	bl	8005158 <init_update_lights>
 800566a:	4845      	ldr	r0, [pc, #276]	; (8005780 <main+0x540>)
 800566c:	f000 fd7c 	bl	8006168 <print>
 8005670:	f001 fb14 	bl	8006c9c <init_trigger>
 8005674:	4843      	ldr	r0, [pc, #268]	; (8005784 <main+0x544>)
 8005676:	f000 fd77 	bl	8006168 <print>
 800567a:	4843      	ldr	r0, [pc, #268]	; (8005788 <main+0x548>)
 800567c:	f000 fd74 	bl	8006168 <print>
 8005680:	4842      	ldr	r0, [pc, #264]	; (800578c <main+0x54c>)
 8005682:	f000 fd91 	bl	80061a8 <print_no_newline>
 8005686:	2201      	movs	r2, #1
 8005688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800568c:	4840      	ldr	r0, [pc, #256]	; (8005790 <main+0x550>)
 800568e:	f7fc fab3 	bl	8001bf8 <HAL_GPIO_WritePin>
 8005692:	4d40      	ldr	r5, [pc, #256]	; (8005794 <main+0x554>)
 8005694:	f000 fda2 	bl	80061dc <shell_process>
 8005698:	f000 f9f0 	bl	8005a7c <dmx_serial_process>
 800569c:	782b      	ldrb	r3, [r5, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d03d      	beq.n	800571e <main+0x4de>
 80056a2:	f001 fa61 	bl	8006b68 <process_testmode>
 80056a6:	4604      	mov	r4, r0
 80056a8:	7028      	strb	r0, [r5, #0]
 80056aa:	bb40      	cbnz	r0, 80056fe <main+0x4be>
 80056ac:	2001      	movs	r0, #1
 80056ae:	f7ff fc07 	bl	8004ec0 <update_pwm_lights>
 80056b2:	f7ff f8c7 	bl	8004844 <get_mode>
 80056b6:	2801      	cmp	r0, #1
 80056b8:	4606      	mov	r6, r0
 80056ba:	d1eb      	bne.n	8005694 <main+0x454>
 80056bc:	4620      	mov	r0, r4
 80056be:	f002 f969 	bl	8007994 <WS2812B_clear>
 80056c2:	4620      	mov	r0, r4
 80056c4:	f002 f8ec 	bl	80078a0 <WS2812B_show>
 80056c8:	4630      	mov	r0, r6
 80056ca:	f002 f963 	bl	8007994 <WS2812B_clear>
 80056ce:	4630      	mov	r0, r6
 80056d0:	f002 f8e6 	bl	80078a0 <WS2812B_show>
 80056d4:	e7de      	b.n	8005694 <main+0x454>
 80056d6:	4830      	ldr	r0, [pc, #192]	; (8005798 <main+0x558>)
 80056d8:	e714      	b.n	8005504 <main+0x2c4>
 80056da:	4830      	ldr	r0, [pc, #192]	; (800579c <main+0x55c>)
 80056dc:	e71c      	b.n	8005518 <main+0x2d8>
 80056de:	4830      	ldr	r0, [pc, #192]	; (80057a0 <main+0x560>)
 80056e0:	e724      	b.n	800552c <main+0x2ec>
 80056e2:	f000 fb2f 	bl	8005d44 <save_settings>
 80056e6:	482f      	ldr	r0, [pc, #188]	; (80057a4 <main+0x564>)
 80056e8:	e786      	b.n	80055f8 <main+0x3b8>
 80056ea:	482f      	ldr	r0, [pc, #188]	; (80057a8 <main+0x568>)
 80056ec:	f000 fd3c 	bl	8006168 <print>
 80056f0:	e7a7      	b.n	8005642 <main+0x402>
 80056f2:	482e      	ldr	r0, [pc, #184]	; (80057ac <main+0x56c>)
 80056f4:	f000 fd38 	bl	8006168 <print>
 80056f8:	e7b2      	b.n	8005660 <main+0x420>
 80056fa:	482d      	ldr	r0, [pc, #180]	; (80057b0 <main+0x570>)
 80056fc:	e7b1      	b.n	8005662 <main+0x422>
 80056fe:	f7ff f8a1 	bl	8004844 <get_mode>
 8005702:	2801      	cmp	r0, #1
 8005704:	4604      	mov	r4, r0
 8005706:	d1c5      	bne.n	8005694 <main+0x454>
 8005708:	2000      	movs	r0, #0
 800570a:	f002 fa11 	bl	8007b30 <WS2812B_test>
 800570e:	2000      	movs	r0, #0
 8005710:	f002 f8c6 	bl	80078a0 <WS2812B_show>
 8005714:	4620      	mov	r0, r4
 8005716:	f002 fa0b 	bl	8007b30 <WS2812B_test>
 800571a:	4620      	mov	r0, r4
 800571c:	e7d8      	b.n	80056d0 <main+0x490>
 800571e:	f7ff fb99 	bl	8004e54 <check_button>
 8005722:	2801      	cmp	r0, #1
 8005724:	bf08      	it	eq
 8005726:	7028      	strbeq	r0, [r5, #0]
 8005728:	f001 fad8 	bl	8006cdc <process_trigger>
 800572c:	f7ff f88a 	bl	8004844 <get_mode>
 8005730:	2801      	cmp	r0, #1
 8005732:	4604      	mov	r4, r0
 8005734:	d107      	bne.n	8005746 <main+0x506>
 8005736:	f7ff faf9 	bl	8004d2c <run_fx>
 800573a:	2000      	movs	r0, #0
 800573c:	f002 f8b0 	bl	80078a0 <WS2812B_show>
 8005740:	4620      	mov	r0, r4
 8005742:	f002 f8ad 	bl	80078a0 <WS2812B_show>
 8005746:	2000      	movs	r0, #0
 8005748:	f7ff fbba 	bl	8004ec0 <update_pwm_lights>
 800574c:	f7ff fd1a 	bl	8005184 <update_fx>
 8005750:	e7a0      	b.n	8005694 <main+0x454>
 8005752:	bf00      	nop
 8005754:	080099ec 	.word	0x080099ec
 8005758:	20000ac0 	.word	0x20000ac0
 800575c:	20000420 	.word	0x20000420
 8005760:	08009a00 	.word	0x08009a00
 8005764:	20000421 	.word	0x20000421
 8005768:	08009a21 	.word	0x08009a21
 800576c:	08009a33 	.word	0x08009a33
 8005770:	08009a49 	.word	0x08009a49
 8005774:	08009a62 	.word	0x08009a62
 8005778:	08009a94 	.word	0x08009a94
 800577c:	08009ac6 	.word	0x08009ac6
 8005780:	08009aea 	.word	0x08009aea
 8005784:	08009b03 	.word	0x08009b03
 8005788:	08009b19 	.word	0x08009b19
 800578c:	08009b26 	.word	0x08009b26
 8005790:	40011000 	.word	0x40011000
 8005794:	20000423 	.word	0x20000423
 8005798:	08009911 	.word	0x08009911
 800579c:	0800993e 	.word	0x0800993e
 80057a0:	08009981 	.word	0x08009981
 80057a4:	08009a0f 	.word	0x08009a0f
 80057a8:	08009a7c 	.word	0x08009a7c
 80057ac:	08009aae 	.word	0x08009aae
 80057b0:	08009ad8 	.word	0x08009ad8

080057b4 <Error_Handler>:
 80057b4:	4770      	bx	lr
	...

080057b8 <PWM_Timer_Init>:

	  TIM_MasterConfigTypeDef sMasterConfig;
	  TIM_OC_InitTypeDef sConfigOC;
	  TIM_ClockConfigTypeDef sClockSourceConfig;

	  memset(&sConfigOC, 0, sizeof(sConfigOC));
 80057b8:	221c      	movs	r2, #28
{
 80057ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057be:	b08e      	sub	sp, #56	; 0x38
 80057c0:	4606      	mov	r6, r0
	  memset(&sConfigOC, 0, sizeof(sConfigOC));
 80057c2:	2100      	movs	r1, #0
 80057c4:	eb0d 0002 	add.w	r0, sp, r2
 80057c8:	f002 fa45 	bl	8007c56 <memset>
	  memset(&sMasterConfig, 0, sizeof(sMasterConfig));
 80057cc:	2100      	movs	r1, #0
	  memset(&sClockSourceConfig, 0, sizeof(sClockSourceConfig));
 80057ce:	2210      	movs	r2, #16
 80057d0:	a803      	add	r0, sp, #12
	  memset(&sMasterConfig, 0, sizeof(sMasterConfig));
 80057d2:	e9cd 1101 	strd	r1, r1, [sp, #4]
	  memset(&sClockSourceConfig, 0, sizeof(sClockSourceConfig));
 80057d6:	f002 fa3e 	bl	8007c56 <memset>

	  switch(ID)
 80057da:	2e01      	cmp	r6, #1
 80057dc:	4c38      	ldr	r4, [pc, #224]	; (80058c0 <PWM_Timer_Init+0x108>)
 80057de:	d067      	beq.n	80058b0 <PWM_Timer_Init+0xf8>
 80057e0:	d362      	bcc.n	80058a8 <PWM_Timer_Init+0xf0>
 80057e2:	2e02      	cmp	r6, #2
 80057e4:	d067      	beq.n	80058b6 <PWM_Timer_Init+0xfe>
	  	  case PWM_CH3:
	  		timerinfo[ID].Instance = TIM1;
		  break;
	  }

	  timerinfo[(uint8_t)ID].Init.Prescaler = 0;
 80057e6:	2300      	movs	r3, #0
	  timerinfo[(uint8_t)ID].Init.CounterMode = TIM_COUNTERMODE_UP;
	  timerinfo[(uint8_t)ID].Init.Period = 1066; //TBD....
 80057e8:	f240 422a 	movw	r2, #1066	; 0x42a
	  timerinfo[(uint8_t)ID].Init.Prescaler = 0;
 80057ec:	eb04 1486 	add.w	r4, r4, r6, lsl #6
	  timerinfo[(uint8_t)ID].Init.CounterMode = TIM_COUNTERMODE_UP;
 80057f0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	  timerinfo[(uint8_t)ID].Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057f4:	e9c4 2303 	strd	r2, r3, [r4, #12]
	  timerinfo[(uint8_t)ID].Init.RepetitionCounter = 0;
 80057f8:	6163      	str	r3, [r4, #20]
	  if (HAL_TIM_Base_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)/* to use the Timer to generate a simple time base for TIM1 */
 80057fa:	4620      	mov	r0, r4
 80057fc:	f7fd fb6e 	bl	8002edc <HAL_TIM_Base_Init>
 8005800:	b110      	cbz	r0, 8005808 <PWM_Timer_Init+0x50>
	  {
		  print("Timer Init Error 1");
 8005802:	4830      	ldr	r0, [pc, #192]	; (80058c4 <PWM_Timer_Init+0x10c>)
 8005804:	f000 fcb0 	bl	8006168 <print>
	  }

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;//the default clock is the internal clock from the APBx, using this function
 8005808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&timerinfo[(uint8_t)ID], &sClockSourceConfig) != HAL_OK)//Initializes the TIM PWM Time Base according to the specified
 800580c:	a903      	add	r1, sp, #12
 800580e:	4620      	mov	r0, r4
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;//the default clock is the internal clock from the APBx, using this function
 8005810:	9303      	str	r3, [sp, #12]
	  if (HAL_TIM_ConfigClockSource(&timerinfo[(uint8_t)ID], &sClockSourceConfig) != HAL_OK)//Initializes the TIM PWM Time Base according to the specified
 8005812:	f7fd fc2f 	bl	8003074 <HAL_TIM_ConfigClockSource>
 8005816:	b110      	cbz	r0, 800581e <PWM_Timer_Init+0x66>
	 //parameters in the TIM_HandleTypeDef and create the associated handle.
	   {
		  print("Timer Init Error 2");
 8005818:	482b      	ldr	r0, [pc, #172]	; (80058c8 <PWM_Timer_Init+0x110>)
 800581a:	f000 fca5 	bl	8006168 <print>
	   }


	  if (HAL_TIM_PWM_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)
 800581e:	4620      	mov	r0, r4
 8005820:	f7fd fb76 	bl	8002f10 <HAL_TIM_PWM_Init>
 8005824:	b110      	cbz	r0, 800582c <PWM_Timer_Init+0x74>
	  {
		  print("Timer Init Error 3");
 8005826:	4829      	ldr	r0, [pc, #164]	; (80058cc <PWM_Timer_Init+0x114>)
 8005828:	f000 fc9e 	bl	8006168 <print>
	  }


	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
	  sConfigOC.Pulse = MAX_PWM/2; /* 50% duty cycle is 538, set to 0 initially*///
 800582c:	f240 231a 	movw	r3, #538	; 0x21a
 8005830:	2260      	movs	r2, #96	; 0x60
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005832:	2500      	movs	r5, #0
	  sConfigOC.Pulse = MAX_PWM/2; /* 50% duty cycle is 538, set to 0 initially*///
 8005834:	e9cd 2307 	strd	r2, r3, [sp, #28]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005838:	2304      	movs	r3, #4
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800583a:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
 800583e:	4b24      	ldr	r3, [pc, #144]	; (80058d0 <PWM_Timer_Init+0x118>)
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005840:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
 8005844:	eb03 1706 	add.w	r7, r3, r6, lsl #4
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
		  {
			  if (HAL_OK != HAL_TIM_PWM_ConfigChannel(&timerinfo[(uint8_t)ID], &sConfigOC, channelinfo[(int8_t)ID][ii]))
			  {
				  print("Timer Init Error 4");
 8005848:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80058dc <PWM_Timer_Init+0x124>
 800584c:	b276      	sxtb	r6, r6
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800584e:	950d      	str	r5, [sp, #52]	; 0x34
 8005850:	eb03 1606 	add.w	r6, r3, r6, lsl #4
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 8005854:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8005858:	2bff      	cmp	r3, #255	; 0xff
 800585a:	d009      	beq.n	8005870 <PWM_Timer_Init+0xb8>
			  if (HAL_OK != HAL_TIM_PWM_ConfigChannel(&timerinfo[(uint8_t)ID], &sConfigOC, channelinfo[(int8_t)ID][ii]))
 800585c:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 8005860:	a907      	add	r1, sp, #28
 8005862:	4620      	mov	r0, r4
 8005864:	f7fd fb9a 	bl	8002f9c <HAL_TIM_PWM_ConfigChannel>
 8005868:	b110      	cbz	r0, 8005870 <PWM_Timer_Init+0xb8>
				  print("Timer Init Error 4");
 800586a:	4640      	mov	r0, r8
 800586c:	f000 fc7c 	bl	8006168 <print>
	  for (int ii=0;ii<4;ii++)
 8005870:	3501      	adds	r5, #1
 8005872:	2d04      	cmp	r5, #4
 8005874:	d1ee      	bne.n	8005854 <PWM_Timer_Init+0x9c>

		  }
	  }

	 // HAL_TIM_MspPostInit(&timerinfo[(uint8_t)ID]);//output pin assignment
	  HAL_TIM_Base_Start(&timerinfo[(uint8_t)ID]); //Starts the TIM Base generation
 8005876:	4620      	mov	r0, r4
 8005878:	f7fd fae5 	bl	8002e46 <HAL_TIM_Base_Start>

	  for (int ii=0;ii<4;ii++)
 800587c:	2500      	movs	r5, #0
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
		  {
			  if (HAL_OK != HAL_TIM_PWM_Start(&timerinfo[(uint8_t)ID], channelinfo[(int8_t)ID][ii]))
			  {
				  print("Timer Init Error 5");
 800587e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80058e0 <PWM_Timer_Init+0x128>
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 8005882:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8005886:	2bff      	cmp	r3, #255	; 0xff
 8005888:	d008      	beq.n	800589c <PWM_Timer_Init+0xe4>
			  if (HAL_OK != HAL_TIM_PWM_Start(&timerinfo[(uint8_t)ID], channelinfo[(int8_t)ID][ii]))
 800588a:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 800588e:	4620      	mov	r0, r4
 8005890:	f7fd fcae 	bl	80031f0 <HAL_TIM_PWM_Start>
 8005894:	b110      	cbz	r0, 800589c <PWM_Timer_Init+0xe4>
				  print("Timer Init Error 5");
 8005896:	4640      	mov	r0, r8
 8005898:	f000 fc66 	bl	8006168 <print>
	  for (int ii=0;ii<4;ii++)
 800589c:	3501      	adds	r5, #1
 800589e:	2d04      	cmp	r5, #4
 80058a0:	d1ef      	bne.n	8005882 <PWM_Timer_Init+0xca>
			  }

		  }
	  }
}
 80058a2:	b00e      	add	sp, #56	; 0x38
 80058a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  		timerinfo[ID].Instance = TIM2;
 80058a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058ac:	6023      	str	r3, [r4, #0]
		  break;
 80058ae:	e79a      	b.n	80057e6 <PWM_Timer_Init+0x2e>
	  		timerinfo[ID].Instance = TIM3;
 80058b0:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <PWM_Timer_Init+0x11c>)
 80058b2:	6423      	str	r3, [r4, #64]	; 0x40
		  break;
 80058b4:	e797      	b.n	80057e6 <PWM_Timer_Init+0x2e>
	  		timerinfo[ID].Instance = TIM1;
 80058b6:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <PWM_Timer_Init+0x120>)
 80058b8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		  break;
 80058bc:	e793      	b.n	80057e6 <PWM_Timer_Init+0x2e>
 80058be:	bf00      	nop
 80058c0:	20000d60 	.word	0x20000d60
 80058c4:	08009b2b 	.word	0x08009b2b
 80058c8:	08009b3e 	.word	0x08009b3e
 80058cc:	08009b51 	.word	0x08009b51
 80058d0:	08009b8c 	.word	0x08009b8c
 80058d4:	40000400 	.word	0x40000400
 80058d8:	40012c00 	.word	0x40012c00
 80058dc:	08009b64 	.word	0x08009b64
 80058e0:	08009b77 	.word	0x08009b77

080058e4 <init_timers>:
{
 80058e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__HAL_RCC_TIM1_CLK_ENABLE();
 80058e6:	4b14      	ldr	r3, [pc, #80]	; (8005938 <init_timers+0x54>)
	PWM_Timer_Init(PWM_CH1);
 80058e8:	2000      	movs	r0, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 80058ea:	699a      	ldr	r2, [r3, #24]
 80058ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058f0:	619a      	str	r2, [r3, #24]
 80058f2:	699a      	ldr	r2, [r3, #24]
 80058f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80058f8:	9201      	str	r2, [sp, #4]
 80058fa:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();
 80058fc:	69da      	ldr	r2, [r3, #28]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	61da      	str	r2, [r3, #28]
 8005904:	69da      	ldr	r2, [r3, #28]
 8005906:	f002 0201 	and.w	r2, r2, #1
 800590a:	9202      	str	r2, [sp, #8]
 800590c:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_TIM3_CLK_ENABLE();
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	f042 0202 	orr.w	r2, r2, #2
 8005914:	61da      	str	r2, [r3, #28]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	9303      	str	r3, [sp, #12]
 800591e:	9b03      	ldr	r3, [sp, #12]
	PWM_Timer_Init(PWM_CH1);
 8005920:	f7ff ff4a 	bl	80057b8 <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH2);
 8005924:	2001      	movs	r0, #1
 8005926:	f7ff ff47 	bl	80057b8 <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH3);
 800592a:	2002      	movs	r0, #2
}
 800592c:	b005      	add	sp, #20
 800592e:	f85d eb04 	ldr.w	lr, [sp], #4
	PWM_Timer_Init(PWM_CH3);
 8005932:	f7ff bf41 	b.w	80057b8 <PWM_Timer_Init>
 8005936:	bf00      	nop
 8005938:	40021000 	.word	0x40021000

0800593c <configPWM>:


//Setup PWM
void configPWM(pwmtimerid_t ID,pwmchid_t channel, uint16_t duty)
{
	  if (channelinfo[(uint8_t) ID][channel] != 255)
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <configPWM+0x30>)
 800593e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8005942:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005946:	29ff      	cmp	r1, #255	; 0xff
 8005948:	d00e      	beq.n	8005968 <configPWM+0x2c>
 800594a:	4b09      	ldr	r3, [pc, #36]	; (8005970 <configPWM+0x34>)
 800594c:	0180      	lsls	r0, r0, #6
 800594e:	581b      	ldr	r3, [r3, r0]
	  {
	  __HAL_TIM_SET_COMPARE(&timerinfo[ID],  channelinfo[(uint8_t)ID][(uint8_t)channel], duty);
 8005950:	b909      	cbnz	r1, 8005956 <configPWM+0x1a>
 8005952:	635a      	str	r2, [r3, #52]	; 0x34
 8005954:	4770      	bx	lr
 8005956:	2904      	cmp	r1, #4
 8005958:	d101      	bne.n	800595e <configPWM+0x22>
 800595a:	639a      	str	r2, [r3, #56]	; 0x38
 800595c:	4770      	bx	lr
 800595e:	2908      	cmp	r1, #8
 8005960:	d101      	bne.n	8005966 <configPWM+0x2a>
 8005962:	63da      	str	r2, [r3, #60]	; 0x3c
 8005964:	4770      	bx	lr
 8005966:	641a      	str	r2, [r3, #64]	; 0x40
	  }
}
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	08009b8c 	.word	0x08009b8c
 8005970:	20000d60 	.word	0x20000d60

08005974 <ring_buffer_init>:
 * @param *rbd - pointer to the ring buffer descriptor
 * @param size - ring buffer size in number of bytes
 * @return RB_ERROR, RB_OK
 */
rb_status_t ring_buffer_init(rb_att_t *rbd, uint32_t size)
{
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	460d      	mov	r5, r1
  rbd->status = RB_ERROR;
 8005978:	2101      	movs	r1, #1
{
 800597a:	4604      	mov	r4, r0
  rbd->status = RB_ERROR;
 800597c:	7501      	strb	r1, [r0, #20]

  if(rbd != NULL) // rbd must not be pointer to nowhere
  {
    rbd->buff = calloc(size, sizeof(uint8_t)); // allocate memory of "size" bytes, set all values to 0.
 800597e:	4628      	mov	r0, r5
 8005980:	f002 f91c 	bl	8007bbc <calloc>
 8005984:	6020      	str	r0, [r4, #0]
    //rbd->buff = malloc(size * sizeof(uint8_t)); // Use this instead of calloc() if you don't wish to set all values to 0 by default.

    if(rbd->buff != NULL)  // buff must not be pointer to nowhere
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	b12b      	cbz	r3, 8005996 <ring_buffer_init+0x22>
    {
      rbd->n_elem = size;

      // Initialize the ring buffer internal variables
      rbd->head = 0;
 800598a:	2300      	movs	r3, #0
      rbd->n_elem = size;
 800598c:	6065      	str	r5, [r4, #4]
      rbd->head = 0;
 800598e:	60a3      	str	r3, [r4, #8]
      rbd->tail = 0;
 8005990:	60e3      	str	r3, [r4, #12]
      rbd->count = 0;
 8005992:	6123      	str	r3, [r4, #16]
      rbd->status = RB_OK;
 8005994:	7523      	strb	r3, [r4, #20]
    }
  }

  return rbd->status;
 8005996:	7d20      	ldrb	r0, [r4, #20]
}
 8005998:	bd38      	pop	{r3, r4, r5, pc}

0800599a <ring_buffer_get>:
 * @param data - pointer to store the data
 * @param num - number of elements to read
 * @return RB_NOT_ENOUGH_DATA, RB_OK, RB_ERROR
 */
rb_status_t ring_buffer_get(rb_att_t *rbd, uint8_t *data, uint32_t num)
{
 800599a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599c:	460b      	mov	r3, r1
 800599e:	4615      	mov	r5, r2
  rb_status_t status = RB_ERROR;
  uint32_t num_to_end = 0;

  if(rbd != NULL)  // rbd must not be a pointer to nowhere
 80059a0:	4604      	mov	r4, r0
 80059a2:	b350      	cbz	r0, 80059fa <ring_buffer_get+0x60>
{
  uint32_t size = 0;

  if(rbd != NULL)  // rbd must not be a pointer to nowhere
  {
	  size = rbd->count;
 80059a4:	6902      	ldr	r2, [r0, #16]
	  if(ring_buffer_size(rbd) >= num) //buffer is not empty and there is at least num of data stored
 80059a6:	4295      	cmp	r5, r2
 80059a8:	d829      	bhi.n	80059fe <ring_buffer_get+0x64>
		  if(rbd->tail >= rbd->n_elem) // reset ring buffer tail
 80059aa:	68c1      	ldr	r1, [r0, #12]
 80059ac:	6842      	ldr	r2, [r0, #4]
 80059ae:	4291      	cmp	r1, r2
			  rbd->tail = 0;
 80059b0:	bf24      	itt	cs
 80059b2:	2200      	movcs	r2, #0
 80059b4:	60c2      	strcs	r2, [r0, #12]
      num_to_end = rbd->n_elem - rbd->tail;
 80059b6:	6846      	ldr	r6, [r0, #4]
 80059b8:	68c2      	ldr	r2, [r0, #12]
        memcpy(data, &(rbd->buff[rbd->tail]), num_to_end); //read from buffer partial data
 80059ba:	6800      	ldr	r0, [r0, #0]
      num_to_end = rbd->n_elem - rbd->tail;
 80059bc:	1ab6      	subs	r6, r6, r2
      if(num >= num_to_end) // is there enough ("num") of data to read before reaching buffer last element
 80059be:	42b5      	cmp	r5, r6
        memcpy(data, &(rbd->buff[rbd->tail]), num_to_end); //read from buffer partial data
 80059c0:	68e1      	ldr	r1, [r4, #12]
      if(num >= num_to_end) // is there enough ("num") of data to read before reaching buffer last element
 80059c2:	d311      	bcc.n	80059e8 <ring_buffer_get+0x4e>
        memcpy(data, &(rbd->buff[rbd->tail]), num_to_end); //read from buffer partial data
 80059c4:	4401      	add	r1, r0
 80059c6:	4632      	mov	r2, r6
 80059c8:	4618      	mov	r0, r3
 80059ca:	f002 f939 	bl	8007c40 <memcpy>
        memcpy(data + num_to_end, rbd->buff, (num - num_to_end)); //read from buffer remaining partial data
 80059ce:	1baf      	subs	r7, r5, r6
 80059d0:	6821      	ldr	r1, [r4, #0]
 80059d2:	463a      	mov	r2, r7
 80059d4:	4430      	add	r0, r6
 80059d6:	f002 f933 	bl	8007c40 <memcpy>
        rbd->tail = num - num_to_end;  // tail increment
 80059da:	60e7      	str	r7, [r4, #12]
      status = RB_OK;
 80059dc:	2000      	movs	r0, #0
        rbd->count = rbd->count - num; // decrement counter for num of data
 80059de:	6923      	ldr	r3, [r4, #16]
 80059e0:	1b5d      	subs	r5, r3, r5
 80059e2:	6125      	str	r5, [r4, #16]
  rbd->status = status;
 80059e4:	7520      	strb	r0, [r4, #20]
}
 80059e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(data, &(rbd->buff[rbd->tail]), num); //read from buffer
 80059e8:	4401      	add	r1, r0
 80059ea:	462a      	mov	r2, r5
 80059ec:	4618      	mov	r0, r3
 80059ee:	f002 f927 	bl	8007c40 <memcpy>
        rbd->tail = rbd->tail + num;  // increment tail
 80059f2:	68e3      	ldr	r3, [r4, #12]
 80059f4:	442b      	add	r3, r5
 80059f6:	60e3      	str	r3, [r4, #12]
 80059f8:	e7f0      	b.n	80059dc <ring_buffer_get+0x42>
  rb_status_t status = RB_ERROR;
 80059fa:	2001      	movs	r0, #1
 80059fc:	e7f2      	b.n	80059e4 <ring_buffer_get+0x4a>
      status = RB_NOT_ENOUGH_DATA;
 80059fe:	2005      	movs	r0, #5
 8005a00:	e7f0      	b.n	80059e4 <ring_buffer_get+0x4a>

08005a02 <ring_buffer_free_elements>:
  if(rbd != NULL)  // rbd must not be a pointer to nowhere
 8005a02:	b110      	cbz	r0, 8005a0a <ring_buffer_free_elements+0x8>
   ret_val = rbd->n_elem - rbd->count;
 8005a04:	6843      	ldr	r3, [r0, #4]
 8005a06:	6900      	ldr	r0, [r0, #16]
 8005a08:	1a18      	subs	r0, r3, r0
}
 8005a0a:	4770      	bx	lr

08005a0c <ring_buffer_put>:
{
 8005a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a10:	460f      	mov	r7, r1
 8005a12:	4615      	mov	r5, r2
  if(rbd != NULL)  // rbd must not be a pointer to nowhere
 8005a14:	4604      	mov	r4, r0
 8005a16:	b360      	cbz	r0, 8005a72 <ring_buffer_put+0x66>
    if(ring_buffer_free_elements(rbd) >= num)  // is there enough space in buffer for num of data
 8005a18:	f7ff fff3 	bl	8005a02 <ring_buffer_free_elements>
 8005a1c:	4290      	cmp	r0, r2
 8005a1e:	d32a      	bcc.n	8005a76 <ring_buffer_put+0x6a>
    	if(rbd->head >= rbd->n_elem) // reset ring buffer head
 8005a20:	68a2      	ldr	r2, [r4, #8]
 8005a22:	6863      	ldr	r3, [r4, #4]
 8005a24:	429a      	cmp	r2, r3
          rbd->head = 0;
 8005a26:	bf24      	itt	cs
 8005a28:	2300      	movcs	r3, #0
 8005a2a:	60a3      	strcs	r3, [r4, #8]
      num_to_end = rbd->n_elem - rbd->head; // that many data can be written into buffer, before reaching buffer last element
 8005a2c:	6866      	ldr	r6, [r4, #4]
 8005a2e:	68a3      	ldr	r3, [r4, #8]
    	memcpy(&(rbd->buff[rbd->head]), data, num_to_end); //write to buffer partial data
 8005a30:	6820      	ldr	r0, [r4, #0]
      num_to_end = rbd->n_elem - rbd->head; // that many data can be written into buffer, before reaching buffer last element
 8005a32:	1af6      	subs	r6, r6, r3
      if(num_to_end < num) // if there is not enough space for "num" of data before reaching buffer last element
 8005a34:	42b5      	cmp	r5, r6
    	memcpy(&(rbd->buff[rbd->head]), data, num_to_end); //write to buffer partial data
 8005a36:	68a3      	ldr	r3, [r4, #8]
      if(num_to_end < num) // if there is not enough space for "num" of data before reaching buffer last element
 8005a38:	d913      	bls.n	8005a62 <ring_buffer_put+0x56>
    	memcpy(&(rbd->buff[rbd->head]), data, num_to_end); //write to buffer partial data
 8005a3a:	4632      	mov	r2, r6
 8005a3c:	4418      	add	r0, r3
        memcpy(rbd->buff, (data + num_to_end), (num - num_to_end)); //write to buffer rest of the data, starting with buffer[0]
 8005a3e:	eba5 0806 	sub.w	r8, r5, r6
    	memcpy(&(rbd->buff[rbd->head]), data, num_to_end); //write to buffer partial data
 8005a42:	f002 f8fd 	bl	8007c40 <memcpy>
        memcpy(rbd->buff, (data + num_to_end), (num - num_to_end)); //write to buffer rest of the data, starting with buffer[0]
 8005a46:	6820      	ldr	r0, [r4, #0]
 8005a48:	4642      	mov	r2, r8
 8005a4a:	19b9      	adds	r1, r7, r6
 8005a4c:	f002 f8f8 	bl	8007c40 <memcpy>
        rbd->head = num - num_to_end;  //head
 8005a50:	f8c4 8008 	str.w	r8, [r4, #8]
      status = RB_OK;
 8005a54:	2000      	movs	r0, #0
        rbd->count = rbd->count + num; // increment counter for num of data
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	441d      	add	r5, r3
 8005a5a:	6125      	str	r5, [r4, #16]
  rbd->status = status;
 8005a5c:	7520      	strb	r0, [r4, #20]
}
 8005a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	memcpy(&(rbd->buff[rbd->head]), data, num); //write to buffer all num of data in one piece
 8005a62:	4418      	add	r0, r3
 8005a64:	462a      	mov	r2, r5
 8005a66:	f002 f8eb 	bl	8007c40 <memcpy>
        rbd->head = rbd->head + num;  // increment head
 8005a6a:	68a3      	ldr	r3, [r4, #8]
 8005a6c:	442b      	add	r3, r5
 8005a6e:	60a3      	str	r3, [r4, #8]
 8005a70:	e7f0      	b.n	8005a54 <ring_buffer_put+0x48>
  rb_status_t status = RB_ERROR;
 8005a72:	2001      	movs	r0, #1
 8005a74:	e7f2      	b.n	8005a5c <ring_buffer_put+0x50>
    	status = RB_NOT_ENOUGH_SPACE;
 8005a76:	2004      	movs	r0, #4
 8005a78:	e7f0      	b.n	8005a5c <ring_buffer_put+0x50>
	...

08005a7c <dmx_serial_process>:
uint8_t escaped = 0;

#define ESC_CHAR 0x5C

void dmx_serial_process(void)
{
 8005a7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t data;
	uint32_t regsize =  get_reg_length();
 8005a80:	f7fe fee6 	bl	8004850 <get_reg_length>

	//Both Ports are set to Shell
	if ((UART_mode_SERIAL==0) && (UART_mode_USB==0))
 8005a84:	4d37      	ldr	r5, [pc, #220]	; (8005b64 <dmx_serial_process+0xe8>)
	uint32_t regsize =  get_reg_length();
 8005a86:	4606      	mov	r6, r0
	if ((UART_mode_SERIAL==0) && (UART_mode_USB==0))
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	b91b      	cbnz	r3, 8005a94 <dmx_serial_process+0x18>
 8005a8c:	4b36      	ldr	r3, [pc, #216]	; (8005b68 <dmx_serial_process+0xec>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d045      	beq.n	8005b20 <dmx_serial_process+0xa4>
		return;

	while ((RB_OK == ring_buffer_get(&rx_buff_dmx, &data, 1)) && (reg_count<regsize) && (syncstart == 1))
 8005a94:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8005b78 <dmx_serial_process+0xfc>
 8005a98:	4f34      	ldr	r7, [pc, #208]	; (8005b6c <dmx_serial_process+0xf0>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f10d 0107 	add.w	r1, sp, #7
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	f7ff ff7a 	bl	800599a <ring_buffer_get>
 8005aa6:	4c32      	ldr	r4, [pc, #200]	; (8005b70 <dmx_serial_process+0xf4>)
 8005aa8:	b990      	cbnz	r0, 8005ad0 <dmx_serial_process+0x54>
 8005aaa:	8820      	ldrh	r0, [r4, #0]
 8005aac:	42b0      	cmp	r0, r6
 8005aae:	d20f      	bcs.n	8005ad0 <dmx_serial_process+0x54>
 8005ab0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8005b74 <dmx_serial_process+0xf8>
 8005ab4:	f899 3000 	ldrb.w	r3, [r9]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d109      	bne.n	8005ad0 <dmx_serial_process+0x54>
	{
		if ((data == ESC_CHAR) && (escaped == 0))
 8005abc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005ac0:	f897 a000 	ldrb.w	sl, [r7]
 8005ac4:	295c      	cmp	r1, #92	; 0x5c
 8005ac6:	d11b      	bne.n	8005b00 <dmx_serial_process+0x84>
 8005ac8:	f1ba 0f00 	cmp.w	sl, #0
 8005acc:	d12b      	bne.n	8005b26 <dmx_serial_process+0xaa>
					reg_count++;
					break;
				default:			//Everything else we just ignore
					break;
			}
			escaped = 0;
 8005ace:	703b      	strb	r3, [r7, #0]
			return;
		}
	}

	//If we have exceeded the number of registers or haven't synced yet just pull a byte
	if ((reg_count>=regsize) || (syncstart == 0))
 8005ad0:	8823      	ldrh	r3, [r4, #0]
 8005ad2:	42b3      	cmp	r3, r6
 8005ad4:	d202      	bcs.n	8005adc <dmx_serial_process+0x60>
 8005ad6:	4b27      	ldr	r3, [pc, #156]	; (8005b74 <dmx_serial_process+0xf8>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	bb0b      	cbnz	r3, 8005b20 <dmx_serial_process+0xa4>
	{
		if (RB_OK == ring_buffer_get(&rx_buff_dmx, &data, 1))
 8005adc:	2201      	movs	r2, #1
 8005ade:	f10d 0107 	add.w	r1, sp, #7
 8005ae2:	4825      	ldr	r0, [pc, #148]	; (8005b78 <dmx_serial_process+0xfc>)
 8005ae4:	f7ff ff59 	bl	800599a <ring_buffer_get>
 8005ae8:	b9d0      	cbnz	r0, 8005b20 <dmx_serial_process+0xa4>
		{
			//If it happens to be the escape byte we go into escape mode
			if ((data == ESC_CHAR) && (escaped == 0))
 8005aea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005aee:	4a1f      	ldr	r2, [pc, #124]	; (8005b6c <dmx_serial_process+0xf0>)
 8005af0:	2b5c      	cmp	r3, #92	; 0x5c
 8005af2:	7811      	ldrb	r1, [r2, #0]
 8005af4:	4610      	mov	r0, r2
 8005af6:	d127      	bne.n	8005b48 <dmx_serial_process+0xcc>
 8005af8:	bb59      	cbnz	r1, 8005b52 <dmx_serial_process+0xd6>
			{
				escaped = 1;
 8005afa:	2301      	movs	r3, #1
 8005afc:	7013      	strb	r3, [r2, #0]
				return;
 8005afe:	e00f      	b.n	8005b20 <dmx_serial_process+0xa4>
		if (escaped)
 8005b00:	f1ba 0f00 	cmp.w	sl, #0
 8005b04:	d015      	beq.n	8005b32 <dmx_serial_process+0xb6>
			switch (data)
 8005b06:	296d      	cmp	r1, #109	; 0x6d
 8005b08:	d005      	beq.n	8005b16 <dmx_serial_process+0x9a>
 8005b0a:	b911      	cbnz	r1, 8005b12 <dmx_serial_process+0x96>
					reg_count = 0;
 8005b0c:	8021      	strh	r1, [r4, #0]
					syncstart = 1;
 8005b0e:	f889 3000 	strb.w	r3, [r9]
			escaped = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	e7db      	b.n	8005ace <dmx_serial_process+0x52>
					UART_mode_SERIAL = (int)UART_MODE_SHELL;
 8005b16:	2300      	movs	r3, #0
					syncstart = 0;
 8005b18:	4a16      	ldr	r2, [pc, #88]	; (8005b74 <dmx_serial_process+0xf8>)
					UART_mode_SERIAL = (int)UART_MODE_SHELL;
 8005b1a:	602b      	str	r3, [r5, #0]
					syncstart = 0;
 8005b1c:	7013      	strb	r3, [r2, #0]
					reg_count = 0;
 8005b1e:	8023      	strh	r3, [r4, #0]
		else
		{
			return;
		}
	}
}
 8005b20:	b002      	add	sp, #8
 8005b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					set_reg(reg_count, ESC_CHAR);
 8005b26:	f7fe fec3 	bl	80048b0 <set_reg>
					reg_count++;
 8005b2a:	8823      	ldrh	r3, [r4, #0]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	8023      	strh	r3, [r4, #0]
					break;
 8005b30:	e7ef      	b.n	8005b12 <dmx_serial_process+0x96>
		set_reg(reg_count, data);
 8005b32:	f7fe febd 	bl	80048b0 <set_reg>
		reg_count++;
 8005b36:	8823      	ldrh	r3, [r4, #0]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	b29b      	uxth	r3, r3
		if (reg_count >=regsize)
 8005b3c:	42b3      	cmp	r3, r6
		reg_count++;
 8005b3e:	8023      	strh	r3, [r4, #0]
		if (reg_count >=regsize)
 8005b40:	d3ab      	bcc.n	8005a9a <dmx_serial_process+0x1e>
			syncstart = 0;
 8005b42:	f889 a000 	strb.w	sl, [r9]
			return;
 8005b46:	e7eb      	b.n	8005b20 <dmx_serial_process+0xa4>
			if (escaped)
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	d0e9      	beq.n	8005b20 <dmx_serial_process+0xa4>
				switch (data)
 8005b4c:	b123      	cbz	r3, 8005b58 <dmx_serial_process+0xdc>
 8005b4e:	2b6d      	cmp	r3, #109	; 0x6d
 8005b50:	d0e1      	beq.n	8005b16 <dmx_serial_process+0x9a>
				escaped = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	7003      	strb	r3, [r0, #0]
 8005b56:	e7e3      	b.n	8005b20 <dmx_serial_process+0xa4>
						syncstart = 1;
 8005b58:	2201      	movs	r2, #1
						reg_count = 0;
 8005b5a:	8023      	strh	r3, [r4, #0]
						syncstart = 1;
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <dmx_serial_process+0xf8>)
 8005b5e:	701a      	strb	r2, [r3, #0]
						break;
 8005b60:	e7f7      	b.n	8005b52 <dmx_serial_process+0xd6>
 8005b62:	bf00      	nop
 8005b64:	20000420 	.word	0x20000420
 8005b68:	20000421 	.word	0x20000421
 8005b6c:	20000424 	.word	0x20000424
 8005b70:	20000426 	.word	0x20000426
 8005b74:	20000428 	.word	0x20000428
 8005b78:	20000990 	.word	0x20000990

08005b7c <tracer_puts>:
	if (UART_mode_SERIAL == 0)
		HAL_UART_Transmit(&huart3, &ch, 1, 5000);
}

void tracer_puts(uint8_t *str,const uint16_t size)
{
 8005b7c:	b570      	push	{r4, r5, r6, lr}
	if (USB_Active)
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <tracer_puts+0x30>)
{
 8005b80:	4604      	mov	r4, r0
	if (USB_Active)
 8005b82:	781b      	ldrb	r3, [r3, #0]
{
 8005b84:	460d      	mov	r5, r1
	if (USB_Active)
 8005b86:	b123      	cbz	r3, 8005b92 <tracer_puts+0x16>
	{
		if (UART_mode_USB == 0)
 8005b88:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <tracer_puts+0x34>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	b90b      	cbnz	r3, 8005b92 <tracer_puts+0x16>
			CDC_Transmit_FS(str,size);
 8005b8e:	f001 f991 	bl	8006eb4 <CDC_Transmit_FS>
	}
	if (UART_mode_SERIAL == 0)
 8005b92:	4b08      	ldr	r3, [pc, #32]	; (8005bb4 <tracer_puts+0x38>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	b943      	cbnz	r3, 8005baa <tracer_puts+0x2e>
		HAL_UART_Transmit(&huart3,str,size, 5000);
 8005b98:	462a      	mov	r2, r5
 8005b9a:	4621      	mov	r1, r4
}
 8005b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_UART_Transmit(&huart3,str,size, 5000);
 8005ba0:	f241 3388 	movw	r3, #5000	; 0x1388
 8005ba4:	4804      	ldr	r0, [pc, #16]	; (8005bb8 <tracer_puts+0x3c>)
 8005ba6:	f7fd bbf5 	b.w	8003394 <HAL_UART_Transmit>
}
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	20000422 	.word	0x20000422
 8005bb0:	20000421 	.word	0x20000421
 8005bb4:	20000420 	.word	0x20000420
 8005bb8:	20000b64 	.word	0x20000b64

08005bbc <tracer_getchar>:

#ifdef USE_UART_IRQ
uint8_t tracer_getchar(void)
{
 8005bbc:	b507      	push	{r0, r1, r2, lr}
	uint8_t data;
	if (RB_OK == ring_buffer_get(&rx_buff_shell, &data, 1))
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f10d 0107 	add.w	r1, sp, #7
 8005bc4:	4805      	ldr	r0, [pc, #20]	; (8005bdc <tracer_getchar+0x20>)
 8005bc6:	f7ff fee8 	bl	800599a <ring_buffer_get>
 8005bca:	b920      	cbnz	r0, 8005bd6 <tracer_getchar+0x1a>
		return data;
 8005bcc:	f89d 0007 	ldrb.w	r0, [sp, #7]
	else
		return 0;
}
 8005bd0:	b003      	add	sp, #12
 8005bd2:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	e7fa      	b.n	8005bd0 <tracer_getchar+0x14>
 8005bda:	bf00      	nop
 8005bdc:	200009a8 	.word	0x200009a8

08005be0 <init_settings>:
 8005be0:	b510      	push	{r4, lr}
 8005be2:	4c12      	ldr	r4, [pc, #72]	; (8005c2c <init_settings+0x4c>)
 8005be4:	2238      	movs	r2, #56	; 0x38
 8005be6:	2100      	movs	r1, #0
 8005be8:	4620      	mov	r0, r4
 8005bea:	f002 f834 	bl	8007c56 <memset>
 8005bee:	22ff      	movs	r2, #255	; 0xff
 8005bf0:	f824 2c02 	strh.w	r2, [r4, #-2]
 8005bf4:	2209      	movs	r2, #9
 8005bf6:	84a2      	strh	r2, [r4, #36]	; 0x24
 8005bf8:	84e2      	strh	r2, [r4, #38]	; 0x26
 8005bfa:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8005bfe:	8722      	strh	r2, [r4, #56]	; 0x38
 8005c00:	22dc      	movs	r2, #220	; 0xdc
 8005c02:	2164      	movs	r1, #100	; 0x64
 8005c04:	f64f 70b0 	movw	r0, #65456	; 0xffb0
 8005c08:	87a2      	strh	r2, [r4, #60]	; 0x3c
 8005c0a:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
 8005c0e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8005c12:	2201      	movs	r2, #1
 8005c14:	8761      	strh	r1, [r4, #58]	; 0x3a
 8005c16:	87e0      	strh	r0, [r4, #62]	; 0x3e
 8005c18:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8005c1c:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
 8005c20:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
 8005c24:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20000ac2 	.word	0x20000ac2

08005c30 <apply_settings>:
 8005c30:	b510      	push	{r4, lr}
 8005c32:	4c3a      	ldr	r4, [pc, #232]	; (8005d1c <apply_settings+0xec>)
 8005c34:	2000      	movs	r0, #0
 8005c36:	7821      	ldrb	r1, [r4, #0]
 8005c38:	f7fe fe3a 	bl	80048b0 <set_reg>
 8005c3c:	78a1      	ldrb	r1, [r4, #2]
 8005c3e:	2001      	movs	r0, #1
 8005c40:	f7fe fe36 	bl	80048b0 <set_reg>
 8005c44:	7921      	ldrb	r1, [r4, #4]
 8005c46:	2002      	movs	r0, #2
 8005c48:	f7fe fe32 	bl	80048b0 <set_reg>
 8005c4c:	79a1      	ldrb	r1, [r4, #6]
 8005c4e:	2003      	movs	r0, #3
 8005c50:	f7fe fe2e 	bl	80048b0 <set_reg>
 8005c54:	7a21      	ldrb	r1, [r4, #8]
 8005c56:	2004      	movs	r0, #4
 8005c58:	f7fe fe2a 	bl	80048b0 <set_reg>
 8005c5c:	7aa1      	ldrb	r1, [r4, #10]
 8005c5e:	2005      	movs	r0, #5
 8005c60:	f7fe fe26 	bl	80048b0 <set_reg>
 8005c64:	7b21      	ldrb	r1, [r4, #12]
 8005c66:	2006      	movs	r0, #6
 8005c68:	f7fe fe22 	bl	80048b0 <set_reg>
 8005c6c:	7ba1      	ldrb	r1, [r4, #14]
 8005c6e:	2007      	movs	r0, #7
 8005c70:	f7fe fe1e 	bl	80048b0 <set_reg>
 8005c74:	7c21      	ldrb	r1, [r4, #16]
 8005c76:	2008      	movs	r0, #8
 8005c78:	f7fe fe1a 	bl	80048b0 <set_reg>
 8005c7c:	7ca1      	ldrb	r1, [r4, #18]
 8005c7e:	2009      	movs	r0, #9
 8005c80:	f7fe fe16 	bl	80048b0 <set_reg>
 8005c84:	7d21      	ldrb	r1, [r4, #20]
 8005c86:	200a      	movs	r0, #10
 8005c88:	f7fe fe12 	bl	80048b0 <set_reg>
 8005c8c:	f7fe fdda 	bl	8004844 <get_mode>
 8005c90:	2801      	cmp	r0, #1
 8005c92:	d142      	bne.n	8005d1a <apply_settings+0xea>
 8005c94:	7da1      	ldrb	r1, [r4, #22]
 8005c96:	200b      	movs	r0, #11
 8005c98:	f7fe fe0a 	bl	80048b0 <set_reg>
 8005c9c:	7de1      	ldrb	r1, [r4, #23]
 8005c9e:	200c      	movs	r0, #12
 8005ca0:	f7fe fe06 	bl	80048b0 <set_reg>
 8005ca4:	7e21      	ldrb	r1, [r4, #24]
 8005ca6:	200d      	movs	r0, #13
 8005ca8:	f7fe fe02 	bl	80048b0 <set_reg>
 8005cac:	7e61      	ldrb	r1, [r4, #25]
 8005cae:	200e      	movs	r0, #14
 8005cb0:	f7fe fdfe 	bl	80048b0 <set_reg>
 8005cb4:	7ea1      	ldrb	r1, [r4, #26]
 8005cb6:	200f      	movs	r0, #15
 8005cb8:	f7fe fdfa 	bl	80048b0 <set_reg>
 8005cbc:	7ee1      	ldrb	r1, [r4, #27]
 8005cbe:	2010      	movs	r0, #16
 8005cc0:	f7fe fdf6 	bl	80048b0 <set_reg>
 8005cc4:	7f21      	ldrb	r1, [r4, #28]
 8005cc6:	2011      	movs	r0, #17
 8005cc8:	f7fe fdf2 	bl	80048b0 <set_reg>
 8005ccc:	7f61      	ldrb	r1, [r4, #29]
 8005cce:	2012      	movs	r0, #18
 8005cd0:	f7fe fdee 	bl	80048b0 <set_reg>
 8005cd4:	7fa1      	ldrb	r1, [r4, #30]
 8005cd6:	2013      	movs	r0, #19
 8005cd8:	f7fe fdea 	bl	80048b0 <set_reg>
 8005cdc:	7fe1      	ldrb	r1, [r4, #31]
 8005cde:	2014      	movs	r0, #20
 8005ce0:	f7fe fde6 	bl	80048b0 <set_reg>
 8005ce4:	f894 1020 	ldrb.w	r1, [r4, #32]
 8005ce8:	2015      	movs	r0, #21
 8005cea:	f7fe fde1 	bl	80048b0 <set_reg>
 8005cee:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 8005cf2:	2016      	movs	r0, #22
 8005cf4:	f7fe fddc 	bl	80048b0 <set_reg>
 8005cf8:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 8005cfc:	2017      	movs	r0, #23
 8005cfe:	f7fe fdd7 	bl	80048b0 <set_reg>
 8005d02:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8005d06:	2018      	movs	r0, #24
 8005d08:	f7fe fdd2 	bl	80048b0 <set_reg>
 8005d0c:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8005d10:	2019      	movs	r0, #25
 8005d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d16:	f7fe bdcb 	b.w	80048b0 <set_reg>
 8005d1a:	bd10      	pop	{r4, pc}
 8005d1c:	20000ac0 	.word	0x20000ac0

08005d20 <load_settings>:
 8005d20:	b508      	push	{r3, lr}
 8005d22:	4a06      	ldr	r2, [pc, #24]	; (8005d3c <load_settings+0x1c>)
 8005d24:	214c      	movs	r1, #76	; 0x4c
 8005d26:	2000      	movs	r0, #0
 8005d28:	f7fe fef4 	bl	8004b14 <EE_Reads>
 8005d2c:	b920      	cbnz	r0, 8005d38 <load_settings+0x18>
 8005d2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005d32:	4803      	ldr	r0, [pc, #12]	; (8005d40 <load_settings+0x20>)
 8005d34:	f000 ba18 	b.w	8006168 <print>
 8005d38:	bd08      	pop	{r3, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000ac0 	.word	0x20000ac0
 8005d40:	08009bbc 	.word	0x08009bbc

08005d44 <save_settings>:
 8005d44:	b508      	push	{r3, lr}
 8005d46:	4a06      	ldr	r2, [pc, #24]	; (8005d60 <save_settings+0x1c>)
 8005d48:	214c      	movs	r1, #76	; 0x4c
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f7fe fef6 	bl	8004b3c <EE_Writes>
 8005d50:	b920      	cbnz	r0, 8005d5c <save_settings+0x18>
 8005d52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005d56:	4803      	ldr	r0, [pc, #12]	; (8005d64 <save_settings+0x20>)
 8005d58:	f000 ba06 	b.w	8006168 <print>
 8005d5c:	bd08      	pop	{r3, pc}
 8005d5e:	bf00      	nop
 8005d60:	20000ac0 	.word	0x20000ac0
 8005d64:	08009fa5 	.word	0x08009fa5

08005d68 <print_settings>:
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	4d90      	ldr	r5, [pc, #576]	; (8005fac <print_settings+0x244>)
 8005d6c:	4e90      	ldr	r6, [pc, #576]	; (8005fb0 <print_settings+0x248>)
 8005d6e:	4628      	mov	r0, r5
 8005d70:	4c90      	ldr	r4, [pc, #576]	; (8005fb4 <print_settings+0x24c>)
 8005d72:	f000 f9f9 	bl	8006168 <print>
 8005d76:	4890      	ldr	r0, [pc, #576]	; (8005fb8 <print_settings+0x250>)
 8005d78:	f000 f9f6 	bl	8006168 <print>
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	f000 f9f3 	bl	8006168 <print>
 8005d82:	8821      	ldrh	r1, [r4, #0]
 8005d84:	488d      	ldr	r0, [pc, #564]	; (8005fbc <print_settings+0x254>)
 8005d86:	f000 f9ef 	bl	8006168 <print>
 8005d8a:	8861      	ldrh	r1, [r4, #2]
 8005d8c:	488c      	ldr	r0, [pc, #560]	; (8005fc0 <print_settings+0x258>)
 8005d8e:	f000 f9eb 	bl	8006168 <print>
 8005d92:	88a1      	ldrh	r1, [r4, #4]
 8005d94:	488b      	ldr	r0, [pc, #556]	; (8005fc4 <print_settings+0x25c>)
 8005d96:	f000 f9e7 	bl	8006168 <print>
 8005d9a:	88e1      	ldrh	r1, [r4, #6]
 8005d9c:	488a      	ldr	r0, [pc, #552]	; (8005fc8 <print_settings+0x260>)
 8005d9e:	f000 f9e3 	bl	8006168 <print>
 8005da2:	8921      	ldrh	r1, [r4, #8]
 8005da4:	4889      	ldr	r0, [pc, #548]	; (8005fcc <print_settings+0x264>)
 8005da6:	f000 f9df 	bl	8006168 <print>
 8005daa:	8961      	ldrh	r1, [r4, #10]
 8005dac:	4888      	ldr	r0, [pc, #544]	; (8005fd0 <print_settings+0x268>)
 8005dae:	f000 f9db 	bl	8006168 <print>
 8005db2:	89a1      	ldrh	r1, [r4, #12]
 8005db4:	4887      	ldr	r0, [pc, #540]	; (8005fd4 <print_settings+0x26c>)
 8005db6:	f000 f9d7 	bl	8006168 <print>
 8005dba:	89e1      	ldrh	r1, [r4, #14]
 8005dbc:	4886      	ldr	r0, [pc, #536]	; (8005fd8 <print_settings+0x270>)
 8005dbe:	f000 f9d3 	bl	8006168 <print>
 8005dc2:	8a21      	ldrh	r1, [r4, #16]
 8005dc4:	4885      	ldr	r0, [pc, #532]	; (8005fdc <print_settings+0x274>)
 8005dc6:	f000 f9cf 	bl	8006168 <print>
 8005dca:	8a61      	ldrh	r1, [r4, #18]
 8005dcc:	4884      	ldr	r0, [pc, #528]	; (8005fe0 <print_settings+0x278>)
 8005dce:	f000 f9cb 	bl	8006168 <print>
 8005dd2:	8aa1      	ldrh	r1, [r4, #20]
 8005dd4:	4883      	ldr	r0, [pc, #524]	; (8005fe4 <print_settings+0x27c>)
 8005dd6:	f000 f9c7 	bl	8006168 <print>
 8005dda:	7da1      	ldrb	r1, [r4, #22]
 8005ddc:	4882      	ldr	r0, [pc, #520]	; (8005fe8 <print_settings+0x280>)
 8005dde:	f000 f9c3 	bl	8006168 <print>
 8005de2:	7de1      	ldrb	r1, [r4, #23]
 8005de4:	4881      	ldr	r0, [pc, #516]	; (8005fec <print_settings+0x284>)
 8005de6:	f000 f9bf 	bl	8006168 <print>
 8005dea:	7e21      	ldrb	r1, [r4, #24]
 8005dec:	4880      	ldr	r0, [pc, #512]	; (8005ff0 <print_settings+0x288>)
 8005dee:	f000 f9bb 	bl	8006168 <print>
 8005df2:	7e61      	ldrb	r1, [r4, #25]
 8005df4:	487f      	ldr	r0, [pc, #508]	; (8005ff4 <print_settings+0x28c>)
 8005df6:	f000 f9b7 	bl	8006168 <print>
 8005dfa:	7ea1      	ldrb	r1, [r4, #26]
 8005dfc:	487e      	ldr	r0, [pc, #504]	; (8005ff8 <print_settings+0x290>)
 8005dfe:	f000 f9b3 	bl	8006168 <print>
 8005e02:	7ee1      	ldrb	r1, [r4, #27]
 8005e04:	487d      	ldr	r0, [pc, #500]	; (8005ffc <print_settings+0x294>)
 8005e06:	f000 f9af 	bl	8006168 <print>
 8005e0a:	7f21      	ldrb	r1, [r4, #28]
 8005e0c:	487c      	ldr	r0, [pc, #496]	; (8006000 <print_settings+0x298>)
 8005e0e:	f000 f9ab 	bl	8006168 <print>
 8005e12:	7f61      	ldrb	r1, [r4, #29]
 8005e14:	487b      	ldr	r0, [pc, #492]	; (8006004 <print_settings+0x29c>)
 8005e16:	f000 f9a7 	bl	8006168 <print>
 8005e1a:	7fa1      	ldrb	r1, [r4, #30]
 8005e1c:	487a      	ldr	r0, [pc, #488]	; (8006008 <print_settings+0x2a0>)
 8005e1e:	f000 f9a3 	bl	8006168 <print>
 8005e22:	7fe1      	ldrb	r1, [r4, #31]
 8005e24:	4879      	ldr	r0, [pc, #484]	; (800600c <print_settings+0x2a4>)
 8005e26:	f000 f99f 	bl	8006168 <print>
 8005e2a:	f894 1020 	ldrb.w	r1, [r4, #32]
 8005e2e:	4878      	ldr	r0, [pc, #480]	; (8006010 <print_settings+0x2a8>)
 8005e30:	f000 f99a 	bl	8006168 <print>
 8005e34:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 8005e38:	4876      	ldr	r0, [pc, #472]	; (8006014 <print_settings+0x2ac>)
 8005e3a:	f000 f995 	bl	8006168 <print>
 8005e3e:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 8005e42:	4875      	ldr	r0, [pc, #468]	; (8006018 <print_settings+0x2b0>)
 8005e44:	f000 f990 	bl	8006168 <print>
 8005e48:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8005e4c:	4873      	ldr	r0, [pc, #460]	; (800601c <print_settings+0x2b4>)
 8005e4e:	f000 f98b 	bl	8006168 <print>
 8005e52:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8005e56:	4872      	ldr	r0, [pc, #456]	; (8006020 <print_settings+0x2b8>)
 8005e58:	f000 f986 	bl	8006168 <print>
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f000 f983 	bl	8006168 <print>
 8005e62:	4870      	ldr	r0, [pc, #448]	; (8006024 <print_settings+0x2bc>)
 8005e64:	f000 f980 	bl	8006168 <print>
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f000 f97d 	bl	8006168 <print>
 8005e6e:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8005e72:	486d      	ldr	r0, [pc, #436]	; (8006028 <print_settings+0x2c0>)
 8005e74:	f000 f978 	bl	8006168 <print>
 8005e78:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8005e7a:	486c      	ldr	r0, [pc, #432]	; (800602c <print_settings+0x2c4>)
 8005e7c:	f000 f974 	bl	8006168 <print>
 8005e80:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8005e82:	486b      	ldr	r0, [pc, #428]	; (8006030 <print_settings+0x2c8>)
 8005e84:	f000 f970 	bl	8006168 <print>
 8005e88:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8005e8c:	4869      	ldr	r0, [pc, #420]	; (8006034 <print_settings+0x2cc>)
 8005e8e:	f000 f96b 	bl	8006168 <print>
 8005e92:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 8005e96:	4868      	ldr	r0, [pc, #416]	; (8006038 <print_settings+0x2d0>)
 8005e98:	f000 f966 	bl	8006168 <print>
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	f000 f963 	bl	8006168 <print>
 8005ea2:	4866      	ldr	r0, [pc, #408]	; (800603c <print_settings+0x2d4>)
 8005ea4:	f000 f960 	bl	8006168 <print>
 8005ea8:	4865      	ldr	r0, [pc, #404]	; (8006040 <print_settings+0x2d8>)
 8005eaa:	f000 f95d 	bl	8006168 <print>
 8005eae:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8005eb2:	4864      	ldr	r0, [pc, #400]	; (8006044 <print_settings+0x2dc>)
 8005eb4:	f000 f958 	bl	8006168 <print>
 8005eb8:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8005ebc:	4862      	ldr	r0, [pc, #392]	; (8006048 <print_settings+0x2e0>)
 8005ebe:	f000 f953 	bl	8006168 <print>
 8005ec2:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 8005ec6:	4861      	ldr	r0, [pc, #388]	; (800604c <print_settings+0x2e4>)
 8005ec8:	f000 f94e 	bl	8006168 <print>
 8005ecc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8005ed0:	485f      	ldr	r0, [pc, #380]	; (8006050 <print_settings+0x2e8>)
 8005ed2:	f000 f949 	bl	8006168 <print>
 8005ed6:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8005eda:	485e      	ldr	r0, [pc, #376]	; (8006054 <print_settings+0x2ec>)
 8005edc:	f000 f944 	bl	8006168 <print>
 8005ee0:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8005ee4:	485c      	ldr	r0, [pc, #368]	; (8006058 <print_settings+0x2f0>)
 8005ee6:	f000 f93f 	bl	8006168 <print>
 8005eea:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 8005eee:	485b      	ldr	r0, [pc, #364]	; (800605c <print_settings+0x2f4>)
 8005ef0:	f000 f93a 	bl	8006168 <print>
 8005ef4:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
 8005ef8:	4859      	ldr	r0, [pc, #356]	; (8006060 <print_settings+0x2f8>)
 8005efa:	f000 f935 	bl	8006168 <print>
 8005efe:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8005f02:	4858      	ldr	r0, [pc, #352]	; (8006064 <print_settings+0x2fc>)
 8005f04:	f000 f930 	bl	8006168 <print>
 8005f08:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 8005f0c:	4856      	ldr	r0, [pc, #344]	; (8006068 <print_settings+0x300>)
 8005f0e:	f000 f92b 	bl	8006168 <print>
 8005f12:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
 8005f16:	4855      	ldr	r0, [pc, #340]	; (800606c <print_settings+0x304>)
 8005f18:	f000 f926 	bl	8006168 <print>
 8005f1c:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 8005f20:	4853      	ldr	r0, [pc, #332]	; (8006070 <print_settings+0x308>)
 8005f22:	f000 f921 	bl	8006168 <print>
 8005f26:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8005f2a:	4852      	ldr	r0, [pc, #328]	; (8006074 <print_settings+0x30c>)
 8005f2c:	f000 f91c 	bl	8006168 <print>
 8005f30:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8005f34:	4850      	ldr	r0, [pc, #320]	; (8006078 <print_settings+0x310>)
 8005f36:	f000 f917 	bl	8006168 <print>
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f000 f914 	bl	8006168 <print>
 8005f40:	484e      	ldr	r0, [pc, #312]	; (800607c <print_settings+0x314>)
 8005f42:	f000 f911 	bl	8006168 <print>
 8005f46:	484e      	ldr	r0, [pc, #312]	; (8006080 <print_settings+0x318>)
 8005f48:	f000 f90e 	bl	8006168 <print>
 8005f4c:	f9b4 103a 	ldrsh.w	r1, [r4, #58]	; 0x3a
 8005f50:	484c      	ldr	r0, [pc, #304]	; (8006084 <print_settings+0x31c>)
 8005f52:	f000 f909 	bl	8006168 <print>
 8005f56:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8005f5a:	484b      	ldr	r0, [pc, #300]	; (8006088 <print_settings+0x320>)
 8005f5c:	f000 f904 	bl	8006168 <print>
 8005f60:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
 8005f64:	4849      	ldr	r0, [pc, #292]	; (800608c <print_settings+0x324>)
 8005f66:	f000 f8ff 	bl	8006168 <print>
 8005f6a:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8005f6e:	4848      	ldr	r0, [pc, #288]	; (8006090 <print_settings+0x328>)
 8005f70:	f000 f8fa 	bl	8006168 <print>
 8005f74:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
 8005f78:	4846      	ldr	r0, [pc, #280]	; (8006094 <print_settings+0x32c>)
 8005f7a:	f000 f8f5 	bl	8006168 <print>
 8005f7e:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
 8005f82:	4845      	ldr	r0, [pc, #276]	; (8006098 <print_settings+0x330>)
 8005f84:	f000 f8f0 	bl	8006168 <print>
 8005f88:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
 8005f8c:	4843      	ldr	r0, [pc, #268]	; (800609c <print_settings+0x334>)
 8005f8e:	f000 f8eb 	bl	8006168 <print>
 8005f92:	f9b4 1048 	ldrsh.w	r1, [r4, #72]	; 0x48
 8005f96:	4842      	ldr	r0, [pc, #264]	; (80060a0 <print_settings+0x338>)
 8005f98:	f000 f8e6 	bl	8006168 <print>
 8005f9c:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
 8005fa0:	4840      	ldr	r0, [pc, #256]	; (80060a4 <print_settings+0x33c>)
 8005fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005fa6:	f000 b8df 	b.w	8006168 <print>
 8005faa:	bf00      	nop
 8005fac:	08009fbb 	.word	0x08009fbb
 8005fb0:	0800a004 	.word	0x0800a004
 8005fb4:	20000ac0 	.word	0x20000ac0
 8005fb8:	08009bcf 	.word	0x08009bcf
 8005fbc:	08009bd8 	.word	0x08009bd8
 8005fc0:	08009be8 	.word	0x08009be8
 8005fc4:	08009bf4 	.word	0x08009bf4
 8005fc8:	08009c02 	.word	0x08009c02
 8005fcc:	08009c0f 	.word	0x08009c0f
 8005fd0:	08009c1b 	.word	0x08009c1b
 8005fd4:	08009c29 	.word	0x08009c29
 8005fd8:	08009c36 	.word	0x08009c36
 8005fdc:	08009c42 	.word	0x08009c42
 8005fe0:	08009c50 	.word	0x08009c50
 8005fe4:	08009c5d 	.word	0x08009c5d
 8005fe8:	08009c6b 	.word	0x08009c6b
 8005fec:	08009c79 	.word	0x08009c79
 8005ff0:	08009c8c 	.word	0x08009c8c
 8005ff4:	08009c9d 	.word	0x08009c9d
 8005ff8:	08009cad 	.word	0x08009cad
 8005ffc:	08009cc0 	.word	0x08009cc0
 8006000:	08009cce 	.word	0x08009cce
 8006004:	08009cdc 	.word	0x08009cdc
 8006008:	08009cea 	.word	0x08009cea
 800600c:	08009cfd 	.word	0x08009cfd
 8006010:	08009d0e 	.word	0x08009d0e
 8006014:	08009d1e 	.word	0x08009d1e
 8006018:	08009d31 	.word	0x08009d31
 800601c:	08009d3f 	.word	0x08009d3f
 8006020:	08009d4d 	.word	0x08009d4d
 8006024:	08009d5b 	.word	0x08009d5b
 8006028:	08009d64 	.word	0x08009d64
 800602c:	08009d76 	.word	0x08009d76
 8006030:	08009d89 	.word	0x08009d89
 8006034:	08009d9c 	.word	0x08009d9c
 8006038:	08009db1 	.word	0x08009db1
 800603c:	08009dc3 	.word	0x08009dc3
 8006040:	0800a003 	.word	0x0800a003
 8006044:	08009dcc 	.word	0x08009dcc
 8006048:	08009ddc 	.word	0x08009ddc
 800604c:	08009def 	.word	0x08009def
 8006050:	08009e0a 	.word	0x08009e0a
 8006054:	08009e25 	.word	0x08009e25
 8006058:	08009e40 	.word	0x08009e40
 800605c:	08009e5a 	.word	0x08009e5a
 8006060:	08009e6f 	.word	0x08009e6f
 8006064:	08009e7f 	.word	0x08009e7f
 8006068:	08009e92 	.word	0x08009e92
 800606c:	08009ead 	.word	0x08009ead
 8006070:	08009ec8 	.word	0x08009ec8
 8006074:	08009ee3 	.word	0x08009ee3
 8006078:	08009efd 	.word	0x08009efd
 800607c:	08009f12 	.word	0x08009f12
 8006080:	0800a000 	.word	0x0800a000
 8006084:	08009f1e 	.word	0x08009f1e
 8006088:	08009f2d 	.word	0x08009f2d
 800608c:	08009f3a 	.word	0x08009f3a
 8006090:	08009f48 	.word	0x08009f48
 8006094:	08009f59 	.word	0x08009f59
 8006098:	08009f68 	.word	0x08009f68
 800609c:	08009f78 	.word	0x08009f78
 80060a0:	08009f88 	.word	0x08009f88
 80060a4:	08009f96 	.word	0x08009f96

080060a8 <cmd_buf_reset>:
    }
}

static void cmd_buf_reset(void)
{
    cmd_buf_idx = 0;
 80060a8:	2100      	movs	r1, #0
 80060aa:	4b03      	ldr	r3, [pc, #12]	; (80060b8 <cmd_buf_reset+0x10>)
    memset(cmd_buf, 0, sizeof(cmd_buf));
 80060ac:	2240      	movs	r2, #64	; 0x40
 80060ae:	4803      	ldr	r0, [pc, #12]	; (80060bc <cmd_buf_reset+0x14>)
    cmd_buf_idx = 0;
 80060b0:	6019      	str	r1, [r3, #0]
    memset(cmd_buf, 0, sizeof(cmd_buf));
 80060b2:	f001 bdd0 	b.w	8007c56 <memset>
 80060b6:	bf00      	nop
 80060b8:	2000046c 	.word	0x2000046c
 80060bc:	20000429 	.word	0x20000429

080060c0 <send_vt100_key>:
    strncpy(cmd_buf, cmd_hist[cmd_hist_get_idx], sizeof(cmd_buf));
    cmd_buf_idx = strlen(cmd_buf);
}

static void send_vt100_key(vt100_key_t key)
{
 80060c0:	b508      	push	{r3, lr}
    vt100_keycode_t * keycode = vt100_get_keycode(key);
 80060c2:	f001 f8f7 	bl	80072b4 <vt100_get_keycode>
    if (NULL != keycode)
 80060c6:	b128      	cbz	r0, 80060d4 <send_vt100_key+0x14>
    {
        uart_send( keycode->code, keycode->code_len);
    }
}
 80060c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tracer_puts(bytes,size);
 80060cc:	7a01      	ldrb	r1, [r0, #8]
 80060ce:	6840      	ldr	r0, [r0, #4]
 80060d0:	f7ff bd54 	b.w	8005b7c <tracer_puts>
}
 80060d4:	bd08      	pop	{r3, pc}
	...

080060d8 <load_command_from_command_history>:
{
 80060d8:	4919      	ldr	r1, [pc, #100]	; (8006140 <load_command_from_command_history+0x68>)
 80060da:	4a1a      	ldr	r2, [pc, #104]	; (8006144 <load_command_from_command_history+0x6c>)
 80060dc:	b510      	push	{r4, lr}
 80060de:	680b      	ldr	r3, [r1, #0]
 80060e0:	6812      	ldr	r2, [r2, #0]
 80060e2:	460c      	mov	r4, r1
    if (0 == dir)
 80060e4:	b9c0      	cbnz	r0, 8006118 <load_command_from_command_history+0x40>
        if (0 == cmd_hist_get_idx)
 80060e6:	b99b      	cbnz	r3, 8006110 <load_command_from_command_history+0x38>
            if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_put_idx)
 80060e8:	2a07      	cmp	r2, #7
 80060ea:	d014      	beq.n	8006116 <load_command_from_command_history+0x3e>
            cmd_hist_get_idx = SHELL_CMD_HISTORY_LEN - 1;
 80060ec:	2307      	movs	r3, #7
            cmd_hist_get_idx = 0;
 80060ee:	6023      	str	r3, [r4, #0]
    cmd_buf_reset();
 80060f0:	f7ff ffda 	bl	80060a8 <cmd_buf_reset>
    strncpy(cmd_buf, cmd_hist[cmd_hist_get_idx], sizeof(cmd_buf));
 80060f4:	4b14      	ldr	r3, [pc, #80]	; (8006148 <load_command_from_command_history+0x70>)
 80060f6:	6821      	ldr	r1, [r4, #0]
 80060f8:	2240      	movs	r2, #64	; 0x40
 80060fa:	eb03 1181 	add.w	r1, r3, r1, lsl #6
 80060fe:	4813      	ldr	r0, [pc, #76]	; (800614c <load_command_from_command_history+0x74>)
 8006100:	f001 fe97 	bl	8007e32 <strncpy>
    cmd_buf_idx = strlen(cmd_buf);
 8006104:	4811      	ldr	r0, [pc, #68]	; (800614c <load_command_from_command_history+0x74>)
 8006106:	f7fa f823 	bl	8000150 <strlen>
 800610a:	4b11      	ldr	r3, [pc, #68]	; (8006150 <load_command_from_command_history+0x78>)
 800610c:	6018      	str	r0, [r3, #0]
 800610e:	e002      	b.n	8006116 <load_command_from_command_history+0x3e>
            if (cmd_hist_get_idx - 1 == cmd_hist_put_idx)
 8006110:	3b01      	subs	r3, #1
 8006112:	4293      	cmp	r3, r2
 8006114:	d1eb      	bne.n	80060ee <load_command_from_command_history+0x16>
}
 8006116:	bd10      	pop	{r4, pc}
        if (cmd_hist_get_idx == cmd_hist_put_idx)
 8006118:	4293      	cmp	r3, r2
 800611a:	d0fc      	beq.n	8006116 <load_command_from_command_history+0x3e>
        if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_get_idx)
 800611c:	2b07      	cmp	r3, #7
 800611e:	d105      	bne.n	800612c <load_command_from_command_history+0x54>
            if (0 == cmd_hist_put_idx)
 8006120:	b94a      	cbnz	r2, 8006136 <load_command_from_command_history+0x5e>
                cmd_hist_get_idx = 0;
 8006122:	600a      	str	r2, [r1, #0]
}
 8006124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                cmd_buf_reset();
 8006128:	f7ff bfbe 	b.w	80060a8 <cmd_buf_reset>
            if (cmd_hist_get_idx + 1 == cmd_hist_put_idx)
 800612c:	1c58      	adds	r0, r3, #1
 800612e:	4290      	cmp	r0, r2
 8006130:	d101      	bne.n	8006136 <load_command_from_command_history+0x5e>
                cmd_hist_get_idx++;
 8006132:	6008      	str	r0, [r1, #0]
 8006134:	e7f6      	b.n	8006124 <load_command_from_command_history+0x4c>
        cmd_hist_get_idx++;
 8006136:	3301      	adds	r3, #1
        if (SHELL_CMD_HISTORY_LEN == cmd_hist_get_idx)
 8006138:	2b08      	cmp	r3, #8
            cmd_hist_get_idx = 0;
 800613a:	bf08      	it	eq
 800613c:	2300      	moveq	r3, #0
 800613e:	e7d6      	b.n	80060ee <load_command_from_command_history+0x16>
 8006140:	20000670 	.word	0x20000670
 8006144:	20000674 	.word	0x20000674
 8006148:	20000470 	.word	0x20000470
 800614c:	20000429 	.word	0x20000429
 8006150:	2000046c 	.word	0x2000046c

08006154 <uart_receive_byte>:
{
 8006154:	b510      	push	{r4, lr}
 8006156:	4604      	mov	r4, r0
	unsigned char data = tracer_getchar();
 8006158:	f7ff fd30 	bl	8005bbc <tracer_getchar>
		*byte = 0;
 800615c:	7020      	strb	r0, [r4, #0]
	if (data == 0)
 800615e:	b900      	cbnz	r0, 8006162 <uart_receive_byte+0xe>
}
 8006160:	bd10      	pop	{r4, pc}
		return 1;
 8006162:	2001      	movs	r0, #1
 8006164:	e7fc      	b.n	8006160 <uart_receive_byte+0xc>
	...

08006168 <print>:
{	
 8006168:	b40f      	push	{r0, r1, r2, r3}
 800616a:	b513      	push	{r0, r1, r4, lr}
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 800616c:	4c0c      	ldr	r4, [pc, #48]	; (80061a0 <print+0x38>)
{	
 800616e:	ab04      	add	r3, sp, #16
 8006170:	f853 2b04 	ldr.w	r2, [r3], #4
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 8006174:	217c      	movs	r1, #124	; 0x7c
 8006176:	4620      	mov	r0, r4
    va_start(args, fmt);
 8006178:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 800617a:	f001 ff81 	bl	8008080 <vsniprintf>
    strcat(dbgMsg, "\r\n");
 800617e:	4909      	ldr	r1, [pc, #36]	; (80061a4 <print+0x3c>)
 8006180:	4620      	mov	r0, r4
 8006182:	f001 fe35 	bl	8007df0 <strcat>
    len = strlen(dbgMsg);
 8006186:	4620      	mov	r0, r4
 8006188:	f7f9 ffe2 	bl	8000150 <strlen>
	tracer_puts(bytes,size);
 800618c:	b281      	uxth	r1, r0
 800618e:	4620      	mov	r0, r4
 8006190:	f7ff fcf4 	bl	8005b7c <tracer_puts>
}
 8006194:	b002      	add	sp, #8
 8006196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800619a:	b004      	add	sp, #16
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	20000678 	.word	0x20000678
 80061a4:	08009fb9 	.word	0x08009fb9

080061a8 <print_no_newline>:
{	
 80061a8:	b40f      	push	{r0, r1, r2, r3}
 80061aa:	b513      	push	{r0, r1, r4, lr}
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80061ac:	4c0a      	ldr	r4, [pc, #40]	; (80061d8 <print_no_newline+0x30>)
{	
 80061ae:	ab04      	add	r3, sp, #16
 80061b0:	f853 2b04 	ldr.w	r2, [r3], #4
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80061b4:	217c      	movs	r1, #124	; 0x7c
 80061b6:	4620      	mov	r0, r4
    va_start(args, fmt);
 80061b8:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80061ba:	f001 ff61 	bl	8008080 <vsniprintf>
    (void) uart_send((uint8_t *)dbgMsg, (uint16_t) strlen(dbgMsg));		
 80061be:	4620      	mov	r0, r4
 80061c0:	f7f9 ffc6 	bl	8000150 <strlen>
	tracer_puts(bytes,size);
 80061c4:	b281      	uxth	r1, r0
 80061c6:	4620      	mov	r0, r4
 80061c8:	f7ff fcd8 	bl	8005b7c <tracer_puts>
}
 80061cc:	b002      	add	sp, #8
 80061ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d2:	b004      	add	sp, #16
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	20000678 	.word	0x20000678

080061dc <shell_process>:
    
    cmd_buf_reset();
}

void shell_process(void)
{
 80061dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char byte;
	const char prompt[] = "DBG>";
 80061e0:	4b75      	ldr	r3, [pc, #468]	; (80063b8 <shell_process+0x1dc>)
{
 80061e2:	b08f      	sub	sp, #60	; 0x3c
	const char prompt[] = "DBG>";
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	791b      	ldrb	r3, [r3, #4]
 80061e8:	9003      	str	r0, [sp, #12]
 80061ea:	f88d 3010 	strb.w	r3, [sp, #16]
	
	//Both Ports are set to Serial DMX
	if (UART_mode_SERIAL && UART_mode_USB)
 80061ee:	4b73      	ldr	r3, [pc, #460]	; (80063bc <shell_process+0x1e0>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	b113      	cbz	r3, 80061fa <shell_process+0x1e>
 80061f4:	4b72      	ldr	r3, [pc, #456]	; (80063c0 <shell_process+0x1e4>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	b9e3      	cbnz	r3, 8006234 <shell_process+0x58>
            print_no_newline(cmd_buf);
        }
        else if (VT100_KEY_CURSOR_DOWN == key)
        {
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 80061fa:	4c72      	ldr	r4, [pc, #456]	; (80063c4 <shell_process+0x1e8>)
            print(shell_cmd_list[i].cmd);
 80061fc:	4e72      	ldr	r6, [pc, #456]	; (80063c8 <shell_process+0x1ec>)
 80061fe:	e013      	b.n	8006228 <shell_process+0x4c>
        vt100_key_t key = vt100_process_byte(byte);
 8006200:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8006204:	f001 f814 	bl	8007230 <vt100_process_byte>
        if (VT100_KEY_PRINTABLE == key)
 8006208:	2801      	cmp	r0, #1
 800620a:	d116      	bne.n	800623a <shell_process+0x5e>
    if ((unsigned int)cmd_buf_idx < sizeof(cmd_buf))
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	2b3f      	cmp	r3, #63	; 0x3f
 8006210:	d805      	bhi.n	800621e <shell_process+0x42>
        cmd_buf[cmd_buf_idx++] = c;
 8006212:	1c5a      	adds	r2, r3, #1
            cmd_buf_add_char(byte);
 8006214:	f89d 100b 	ldrb.w	r1, [sp, #11]
        cmd_buf[cmd_buf_idx++] = c;
 8006218:	6022      	str	r2, [r4, #0]
 800621a:	4a6c      	ldr	r2, [pc, #432]	; (80063cc <shell_process+0x1f0>)
 800621c:	54d1      	strb	r1, [r2, r3]
	tracer_puts(bytes,size);
 800621e:	2101      	movs	r1, #1
 8006220:	f10d 000b 	add.w	r0, sp, #11
 8006224:	f7ff fcaa 	bl	8005b7c <tracer_puts>
	while (1 == uart_receive_byte((uint8_t*)&byte))
 8006228:	f10d 000b 	add.w	r0, sp, #11
 800622c:	f7ff ff92 	bl	8006154 <uart_receive_byte>
 8006230:	2801      	cmp	r0, #1
 8006232:	d0e5      	beq.n	8006200 <shell_process+0x24>
            }
            load_command_from_command_history(1);
            print_no_newline(cmd_buf);
        }
	}
}
 8006234:	b00f      	add	sp, #60	; 0x3c
 8006236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (VT100_KEY_ENTER == key)
 800623a:	2808      	cmp	r0, #8
 800623c:	d17e      	bne.n	800633c <shell_process+0x160>
			print("");
 800623e:	4864      	ldr	r0, [pc, #400]	; (80063d0 <shell_process+0x1f4>)
 8006240:	f7ff ff92 	bl	8006168 <print>
	if (0 != strlen(cmd_buf))
 8006244:	4961      	ldr	r1, [pc, #388]	; (80063cc <shell_process+0x1f0>)
 8006246:	780b      	ldrb	r3, [r1, #0]
 8006248:	b183      	cbz	r3, 800626c <shell_process+0x90>
    strncpy(cmd_hist[cmd_hist_put_idx], cmd_buf, sizeof(cmd_buf));
 800624a:	4f62      	ldr	r7, [pc, #392]	; (80063d4 <shell_process+0x1f8>)
 800624c:	4862      	ldr	r0, [pc, #392]	; (80063d8 <shell_process+0x1fc>)
 800624e:	683d      	ldr	r5, [r7, #0]
 8006250:	2240      	movs	r2, #64	; 0x40
 8006252:	eb00 1085 	add.w	r0, r0, r5, lsl #6
    cmd_hist_put_idx++;
 8006256:	3501      	adds	r5, #1
    strncpy(cmd_hist[cmd_hist_put_idx], cmd_buf, sizeof(cmd_buf));
 8006258:	f001 fdeb 	bl	8007e32 <strncpy>
    if (cmd_hist_put_idx >= SHELL_CMD_HISTORY_LEN)
 800625c:	2d07      	cmp	r5, #7
        cmd_hist_put_idx = 0;
 800625e:	bfca      	itet	gt
 8006260:	2300      	movgt	r3, #0
    cmd_hist_put_idx++;
 8006262:	603d      	strle	r5, [r7, #0]
        cmd_hist_put_idx = 0;
 8006264:	603b      	strgt	r3, [r7, #0]
    cmd_hist_get_idx = cmd_hist_put_idx;
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	4b5c      	ldr	r3, [pc, #368]	; (80063dc <shell_process+0x200>)
 800626a:	601a      	str	r2, [r3, #0]
	tokens[arg_num] = strtok(buffer, " ");
 800626c:	495c      	ldr	r1, [pc, #368]	; (80063e0 <shell_process+0x204>)
 800626e:	4857      	ldr	r0, [pc, #348]	; (80063cc <shell_process+0x1f0>)
 8006270:	f001 fdf4 	bl	8007e5c <strtok>
	int arg_num = 0;
 8006274:	2500      	movs	r5, #0
	tokens[arg_num] = strtok(buffer, " ");
 8006276:	f10d 0838 	add.w	r8, sp, #56	; 0x38
		tokens[++arg_num] = strtok(NULL, " ");
 800627a:	4f59      	ldr	r7, [pc, #356]	; (80063e0 <shell_process+0x204>)
	tokens[arg_num] = strtok(buffer, " ");
 800627c:	f848 0d24 	str.w	r0, [r8, #-36]!
	while(NULL != tokens[arg_num] && arg_num < (MAX_ARGUMENT_NUM-1))
 8006280:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
 8006284:	b10b      	cbz	r3, 800628a <shell_process+0xae>
 8006286:	2d07      	cmp	r5, #7
 8006288:	d12c      	bne.n	80062e4 <shell_process+0x108>
    if (0 == strncmp(argv[0], "help", SHELL_CMD_BUF_LEN))
 800628a:	2240      	movs	r2, #64	; 0x40
 800628c:	4955      	ldr	r1, [pc, #340]	; (80063e4 <shell_process+0x208>)
 800628e:	9805      	ldr	r0, [sp, #20]
 8006290:	f001 fdbd 	bl	8007e0e <strncmp>
 8006294:	4607      	mov	r7, r0
 8006296:	b368      	cbz	r0, 80062f4 <shell_process+0x118>
    if (0 == strncmp(argv[0], "cls", SHELL_CMD_BUF_LEN))
 8006298:	2240      	movs	r2, #64	; 0x40
 800629a:	4953      	ldr	r1, [pc, #332]	; (80063e8 <shell_process+0x20c>)
 800629c:	9805      	ldr	r0, [sp, #20]
 800629e:	f001 fdb6 	bl	8007e0e <strncmp>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d038      	beq.n	8006318 <shell_process+0x13c>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 80062a6:	f04f 0900 	mov.w	r9, #0
 80062aa:	f04f 0b0c 	mov.w	fp, #12
 80062ae:	4b4f      	ldr	r3, [pc, #316]	; (80063ec <shell_process+0x210>)
 80062b0:	681f      	ldr	r7, [r3, #0]
 80062b2:	45b9      	cmp	r9, r7
 80062b4:	da36      	bge.n	8006324 <shell_process+0x148>
 80062b6:	fb0b f309 	mul.w	r3, fp, r9
            if(0 == strncmp(argv[0], shell_cmd_list[i].cmd, SHELL_CMD_BUF_LEN))
 80062ba:	2240      	movs	r2, #64	; 0x40
 80062bc:	5999      	ldr	r1, [r3, r6]
 80062be:	9805      	ldr	r0, [sp, #20]
 80062c0:	eb03 0a06 	add.w	sl, r3, r6
 80062c4:	f001 fda3 	bl	8007e0e <strncmp>
 80062c8:	b948      	cbnz	r0, 80062de <shell_process+0x102>
                if(0 == shell_cmd_list[i].handler(argc, argv))
 80062ca:	f8da 3008 	ldr.w	r3, [sl, #8]
 80062ce:	4641      	mov	r1, r8
 80062d0:	1e68      	subs	r0, r5, #1
 80062d2:	4798      	blx	r3
 80062d4:	b918      	cbnz	r0, 80062de <shell_process+0x102>
                    print(shell_cmd_list[i].desc);
 80062d6:	f8da 0004 	ldr.w	r0, [sl, #4]
 80062da:	f7ff ff45 	bl	8006168 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 80062de:	f109 0901 	add.w	r9, r9, #1
 80062e2:	e7e6      	b.n	80062b2 <shell_process+0xd6>
		tokens[++arg_num] = strtok(NULL, " ");
 80062e4:	4639      	mov	r1, r7
 80062e6:	2000      	movs	r0, #0
 80062e8:	f001 fdb8 	bl	8007e5c <strtok>
 80062ec:	3501      	adds	r5, #1
 80062ee:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 80062f2:	e7c5      	b.n	8006280 <shell_process+0xa4>
            print(shell_cmd_list[i].cmd);
 80062f4:	f04f 0a0c 	mov.w	sl, #12
        print("");
 80062f8:	4835      	ldr	r0, [pc, #212]	; (80063d0 <shell_process+0x1f4>)
 80062fa:	f7ff ff35 	bl	8006168 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 80062fe:	4b3b      	ldr	r3, [pc, #236]	; (80063ec <shell_process+0x210>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	9301      	str	r3, [sp, #4]
 8006304:	9b01      	ldr	r3, [sp, #4]
 8006306:	429f      	cmp	r7, r3
 8006308:	dac6      	bge.n	8006298 <shell_process+0xbc>
            print(shell_cmd_list[i].cmd);
 800630a:	fb0a f307 	mul.w	r3, sl, r7
 800630e:	5998      	ldr	r0, [r3, r6]
 8006310:	f7ff ff2a 	bl	8006168 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 8006314:	3701      	adds	r7, #1
 8006316:	e7f5      	b.n	8006304 <shell_process+0x128>
        send_vt100_key(VT100_KEY_CLEAR_SCREEN);
 8006318:	200d      	movs	r0, #13
 800631a:	f7ff fed1 	bl	80060c0 <send_vt100_key>
        send_vt100_key(VT100_KEY_MOVE_CURSOR_HOME);
 800631e:	200e      	movs	r0, #14
 8006320:	f7ff fece 	bl	80060c0 <send_vt100_key>
    cmd_buf_reset();
 8006324:	f7ff fec0 	bl	80060a8 <cmd_buf_reset>
	tracer_puts(bytes,size);
 8006328:	f10d 000b 	add.w	r0, sp, #11
 800632c:	2101      	movs	r1, #1
 800632e:	f7ff fc25 	bl	8005b7c <tracer_puts>
			print_no_newline("\n%s", prompt);
 8006332:	a903      	add	r1, sp, #12
 8006334:	482e      	ldr	r0, [pc, #184]	; (80063f0 <shell_process+0x214>)
 8006336:	f7ff ff37 	bl	80061a8 <print_no_newline>
 800633a:	e775      	b.n	8006228 <shell_process+0x4c>
        else if (VT100_KEY_INVALID == key)
 800633c:	2800      	cmp	r0, #0
 800633e:	f43f af73 	beq.w	8006228 <shell_process+0x4c>
        else if (VT100_KEY_BACKSPACE == key)
 8006342:	2807      	cmp	r0, #7
 8006344:	d10e      	bne.n	8006364 <shell_process+0x188>
    if (cmd_buf_idx > 0)
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	dd04      	ble.n	8006356 <shell_process+0x17a>
        cmd_buf[--cmd_buf_idx] = 0;
 800634c:	2100      	movs	r1, #0
 800634e:	4a1f      	ldr	r2, [pc, #124]	; (80063cc <shell_process+0x1f0>)
 8006350:	3b01      	subs	r3, #1
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	54d1      	strb	r1, [r2, r3]
            send_vt100_key(VT100_KEY_BACKSPACE);
 8006356:	2007      	movs	r0, #7
 8006358:	f7ff feb2 	bl	80060c0 <send_vt100_key>
            send_vt100_key(VT100_KEY_CLEAR_EOL);
 800635c:	200a      	movs	r0, #10
 800635e:	f7ff feaf 	bl	80060c0 <send_vt100_key>
 8006362:	e761      	b.n	8006228 <shell_process+0x4c>
        else if (VT100_KEY_CURSOR_UP == key)
 8006364:	2802      	cmp	r0, #2
 8006366:	d116      	bne.n	8006396 <shell_process+0x1ba>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 8006368:	200b      	movs	r0, #11
 800636a:	f7ff fea9 	bl	80060c0 <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 800636e:	2500      	movs	r5, #0
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	3304      	adds	r3, #4
 8006374:	42ab      	cmp	r3, r5
 8006376:	d809      	bhi.n	800638c <shell_process+0x1b0>
			print_no_newline(prompt);
 8006378:	a803      	add	r0, sp, #12
 800637a:	f7ff ff15 	bl	80061a8 <print_no_newline>
            load_command_from_command_history(0);
 800637e:	2000      	movs	r0, #0
            load_command_from_command_history(1);
 8006380:	f7ff feaa 	bl	80060d8 <load_command_from_command_history>
            print_no_newline(cmd_buf);
 8006384:	4811      	ldr	r0, [pc, #68]	; (80063cc <shell_process+0x1f0>)
 8006386:	f7ff ff0f 	bl	80061a8 <print_no_newline>
 800638a:	e74d      	b.n	8006228 <shell_process+0x4c>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 800638c:	200c      	movs	r0, #12
 800638e:	f7ff fe97 	bl	80060c0 <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 8006392:	3501      	adds	r5, #1
 8006394:	e7ec      	b.n	8006370 <shell_process+0x194>
        else if (VT100_KEY_CURSOR_DOWN == key)
 8006396:	2803      	cmp	r0, #3
 8006398:	f47f af46 	bne.w	8006228 <shell_process+0x4c>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 800639c:	200b      	movs	r0, #11
 800639e:	f7ff fe8f 	bl	80060c0 <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 80063a2:	2500      	movs	r5, #0
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	42ab      	cmp	r3, r5
 80063a8:	dc01      	bgt.n	80063ae <shell_process+0x1d2>
            load_command_from_command_history(1);
 80063aa:	2001      	movs	r0, #1
 80063ac:	e7e8      	b.n	8006380 <shell_process+0x1a4>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 80063ae:	200c      	movs	r0, #12
 80063b0:	f7ff fe86 	bl	80060c0 <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 80063b4:	3501      	adds	r5, #1
 80063b6:	e7f5      	b.n	80063a4 <shell_process+0x1c8>
 80063b8:	08009b26 	.word	0x08009b26
 80063bc:	20000420 	.word	0x20000420
 80063c0:	20000421 	.word	0x20000421
 80063c4:	2000046c 	.word	0x2000046c
 80063c8:	0800a064 	.word	0x0800a064
 80063cc:	20000429 	.word	0x20000429
 80063d0:	08009fbb 	.word	0x08009fbb
 80063d4:	20000674 	.word	0x20000674
 80063d8:	20000470 	.word	0x20000470
 80063dc:	20000670 	.word	0x20000670
 80063e0:	0800991e 	.word	0x0800991e
 80063e4:	08009fbc 	.word	0x08009fbc
 80063e8:	08009fc1 	.word	0x08009fc1
 80063ec:	08009fcc 	.word	0x08009fcc
 80063f0:	08009fc5 	.word	0x08009fc5

080063f4 <shell_cmd_dumpadc>:
 80063f4:	b508      	push	{r3, lr}
 80063f6:	f000 fcc9 	bl	8006d8c <print_adc_data>
 80063fa:	2001      	movs	r0, #1
 80063fc:	bd08      	pop	{r3, pc}
	...

08006400 <shell_cmd_storedefaultregs>:
 8006400:	b510      	push	{r4, lr}
 8006402:	2000      	movs	r0, #0
 8006404:	f7fe fa62 	bl	80048cc <get_reg>
 8006408:	4c38      	ldr	r4, [pc, #224]	; (80064ec <shell_cmd_storedefaultregs+0xec>)
 800640a:	8020      	strh	r0, [r4, #0]
 800640c:	2001      	movs	r0, #1
 800640e:	f7fe fa5d 	bl	80048cc <get_reg>
 8006412:	8060      	strh	r0, [r4, #2]
 8006414:	2002      	movs	r0, #2
 8006416:	f7fe fa59 	bl	80048cc <get_reg>
 800641a:	80a0      	strh	r0, [r4, #4]
 800641c:	2003      	movs	r0, #3
 800641e:	f7fe fa55 	bl	80048cc <get_reg>
 8006422:	80e0      	strh	r0, [r4, #6]
 8006424:	2004      	movs	r0, #4
 8006426:	f7fe fa51 	bl	80048cc <get_reg>
 800642a:	8120      	strh	r0, [r4, #8]
 800642c:	2005      	movs	r0, #5
 800642e:	f7fe fa4d 	bl	80048cc <get_reg>
 8006432:	8160      	strh	r0, [r4, #10]
 8006434:	2006      	movs	r0, #6
 8006436:	f7fe fa49 	bl	80048cc <get_reg>
 800643a:	81a0      	strh	r0, [r4, #12]
 800643c:	2007      	movs	r0, #7
 800643e:	f7fe fa45 	bl	80048cc <get_reg>
 8006442:	81e0      	strh	r0, [r4, #14]
 8006444:	2008      	movs	r0, #8
 8006446:	f7fe fa41 	bl	80048cc <get_reg>
 800644a:	8220      	strh	r0, [r4, #16]
 800644c:	2009      	movs	r0, #9
 800644e:	f7fe fa3d 	bl	80048cc <get_reg>
 8006452:	8260      	strh	r0, [r4, #18]
 8006454:	200a      	movs	r0, #10
 8006456:	f7fe fa39 	bl	80048cc <get_reg>
 800645a:	82a0      	strh	r0, [r4, #20]
 800645c:	f7fe f9f2 	bl	8004844 <get_mode>
 8006460:	2801      	cmp	r0, #1
 8006462:	d140      	bne.n	80064e6 <shell_cmd_storedefaultregs+0xe6>
 8006464:	200b      	movs	r0, #11
 8006466:	f7fe fa31 	bl	80048cc <get_reg>
 800646a:	75a0      	strb	r0, [r4, #22]
 800646c:	200c      	movs	r0, #12
 800646e:	f7fe fa2d 	bl	80048cc <get_reg>
 8006472:	75e0      	strb	r0, [r4, #23]
 8006474:	200d      	movs	r0, #13
 8006476:	f7fe fa29 	bl	80048cc <get_reg>
 800647a:	7620      	strb	r0, [r4, #24]
 800647c:	200e      	movs	r0, #14
 800647e:	f7fe fa25 	bl	80048cc <get_reg>
 8006482:	7660      	strb	r0, [r4, #25]
 8006484:	200f      	movs	r0, #15
 8006486:	f7fe fa21 	bl	80048cc <get_reg>
 800648a:	76a0      	strb	r0, [r4, #26]
 800648c:	2010      	movs	r0, #16
 800648e:	f7fe fa1d 	bl	80048cc <get_reg>
 8006492:	76e0      	strb	r0, [r4, #27]
 8006494:	2011      	movs	r0, #17
 8006496:	f7fe fa19 	bl	80048cc <get_reg>
 800649a:	7720      	strb	r0, [r4, #28]
 800649c:	2012      	movs	r0, #18
 800649e:	f7fe fa15 	bl	80048cc <get_reg>
 80064a2:	7760      	strb	r0, [r4, #29]
 80064a4:	2013      	movs	r0, #19
 80064a6:	f7fe fa11 	bl	80048cc <get_reg>
 80064aa:	77a0      	strb	r0, [r4, #30]
 80064ac:	2014      	movs	r0, #20
 80064ae:	f7fe fa0d 	bl	80048cc <get_reg>
 80064b2:	77e0      	strb	r0, [r4, #31]
 80064b4:	2015      	movs	r0, #21
 80064b6:	f7fe fa09 	bl	80048cc <get_reg>
 80064ba:	f884 0020 	strb.w	r0, [r4, #32]
 80064be:	2016      	movs	r0, #22
 80064c0:	f7fe fa04 	bl	80048cc <get_reg>
 80064c4:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
 80064c8:	2017      	movs	r0, #23
 80064ca:	f7fe f9ff 	bl	80048cc <get_reg>
 80064ce:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
 80064d2:	2018      	movs	r0, #24
 80064d4:	f7fe f9fa 	bl	80048cc <get_reg>
 80064d8:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 80064dc:	2019      	movs	r0, #25
 80064de:	f7fe f9f5 	bl	80048cc <get_reg>
 80064e2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
 80064e6:	2001      	movs	r0, #1
 80064e8:	bd10      	pop	{r4, pc}
 80064ea:	bf00      	nop
 80064ec:	20000ac0 	.word	0x20000ac0

080064f0 <shell_cmd_getmode>:
 80064f0:	b508      	push	{r3, lr}
 80064f2:	f7fe f9a7 	bl	8004844 <get_mode>
 80064f6:	b118      	cbz	r0, 8006500 <shell_cmd_getmode+0x10>
 80064f8:	2801      	cmp	r0, #1
 80064fa:	d005      	beq.n	8006508 <shell_cmd_getmode+0x18>
 80064fc:	2001      	movs	r0, #1
 80064fe:	bd08      	pop	{r3, pc}
 8006500:	4802      	ldr	r0, [pc, #8]	; (800650c <shell_cmd_getmode+0x1c>)
 8006502:	f7ff fe31 	bl	8006168 <print>
 8006506:	e7f9      	b.n	80064fc <shell_cmd_getmode+0xc>
 8006508:	4801      	ldr	r0, [pc, #4]	; (8006510 <shell_cmd_getmode+0x20>)
 800650a:	e7fa      	b.n	8006502 <shell_cmd_getmode+0x12>
 800650c:	0800a041 	.word	0x0800a041
 8006510:	0800a04e 	.word	0x0800a04e

08006514 <shell_cmd_savesettings>:
 8006514:	b508      	push	{r3, lr}
 8006516:	f7ff fc15 	bl	8005d44 <save_settings>
 800651a:	2001      	movs	r0, #1
 800651c:	bd08      	pop	{r3, pc}

0800651e <shell_cmd_dumpsettings>:
 800651e:	b508      	push	{r3, lr}
 8006520:	f7ff fc22 	bl	8005d68 <print_settings>
 8006524:	2001      	movs	r0, #1
 8006526:	bd08      	pop	{r3, pc}

08006528 <shell_cmd_getaddr>:
 8006528:	b508      	push	{r3, lr}
 800652a:	f7fe f985 	bl	8004838 <get_addr>
 800652e:	4601      	mov	r1, r0
 8006530:	4802      	ldr	r0, [pc, #8]	; (800653c <shell_cmd_getaddr+0x14>)
 8006532:	f7ff fe19 	bl	8006168 <print>
 8006536:	2001      	movs	r0, #1
 8006538:	bd08      	pop	{r3, pc}
 800653a:	bf00      	nop
 800653c:	0800a02e 	.word	0x0800a02e

08006540 <shell_cmd_dumpregs>:
 8006540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006542:	f7fe f979 	bl	8004838 <get_addr>
 8006546:	4601      	mov	r1, r0
 8006548:	4816      	ldr	r0, [pc, #88]	; (80065a4 <shell_cmd_dumpregs+0x64>)
 800654a:	f7ff fe0d 	bl	8006168 <print>
 800654e:	f7fe f97f 	bl	8004850 <get_reg_length>
 8006552:	4601      	mov	r1, r0
 8006554:	4814      	ldr	r0, [pc, #80]	; (80065a8 <shell_cmd_dumpregs+0x68>)
 8006556:	f7ff fe07 	bl	8006168 <print>
 800655a:	f7fe f973 	bl	8004844 <get_mode>
 800655e:	4601      	mov	r1, r0
 8006560:	4812      	ldr	r0, [pc, #72]	; (80065ac <shell_cmd_dumpregs+0x6c>)
 8006562:	f7ff fe01 	bl	8006168 <print>
 8006566:	4812      	ldr	r0, [pc, #72]	; (80065b0 <shell_cmd_dumpregs+0x70>)
 8006568:	f7ff fdfe 	bl	8006168 <print>
 800656c:	2400      	movs	r4, #0
 800656e:	4d11      	ldr	r5, [pc, #68]	; (80065b4 <shell_cmd_dumpregs+0x74>)
 8006570:	f7fe f96e 	bl	8004850 <get_reg_length>
 8006574:	42a0      	cmp	r0, r4
 8006576:	d802      	bhi.n	800657e <shell_cmd_dumpregs+0x3e>
 8006578:	2001      	movs	r0, #1
 800657a:	b003      	add	sp, #12
 800657c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800657e:	f7fe f95b 	bl	8004838 <get_addr>
 8006582:	1906      	adds	r6, r0, r4
 8006584:	4620      	mov	r0, r4
 8006586:	f7fe f9b1 	bl	80048ec <get_reg_name>
 800658a:	4607      	mov	r7, r0
 800658c:	4620      	mov	r0, r4
 800658e:	f7fe f99d 	bl	80048cc <get_reg>
 8006592:	4621      	mov	r1, r4
 8006594:	9000      	str	r0, [sp, #0]
 8006596:	463b      	mov	r3, r7
 8006598:	4632      	mov	r2, r6
 800659a:	4628      	mov	r0, r5
 800659c:	f7ff fde4 	bl	8006168 <print>
 80065a0:	3401      	adds	r4, #1
 80065a2:	e7e5      	b.n	8006570 <shell_cmd_dumpregs+0x30>
 80065a4:	0800a02e 	.word	0x0800a02e
 80065a8:	08009fd0 	.word	0x08009fd0
 80065ac:	08009fe7 	.word	0x08009fe7
 80065b0:	08009ff0 	.word	0x08009ff0
 80065b4:	0800a00c 	.word	0x0800a00c

080065b8 <shell_cmd_switchuartmode>:
 80065b8:	2802      	cmp	r0, #2
 80065ba:	b508      	push	{r3, lr}
 80065bc:	d10d      	bne.n	80065da <shell_cmd_switchuartmode+0x22>
 80065be:	6848      	ldr	r0, [r1, #4]
 80065c0:	f001 faf7 	bl	8007bb2 <atoi>
 80065c4:	b118      	cbz	r0, 80065ce <shell_cmd_switchuartmode+0x16>
 80065c6:	2801      	cmp	r0, #1
 80065c8:	d005      	beq.n	80065d6 <shell_cmd_switchuartmode+0x1e>
 80065ca:	2001      	movs	r0, #1
 80065cc:	e002      	b.n	80065d4 <shell_cmd_switchuartmode+0x1c>
 80065ce:	2001      	movs	r0, #1
 80065d0:	4b03      	ldr	r3, [pc, #12]	; (80065e0 <shell_cmd_switchuartmode+0x28>)
 80065d2:	6018      	str	r0, [r3, #0]
 80065d4:	bd08      	pop	{r3, pc}
 80065d6:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <shell_cmd_switchuartmode+0x2c>)
 80065d8:	e7fb      	b.n	80065d2 <shell_cmd_switchuartmode+0x1a>
 80065da:	2000      	movs	r0, #0
 80065dc:	e7fa      	b.n	80065d4 <shell_cmd_switchuartmode+0x1c>
 80065de:	bf00      	nop
 80065e0:	20000420 	.word	0x20000420
 80065e4:	20000421 	.word	0x20000421

080065e8 <shell_cmd_setuartmode>:
 80065e8:	2802      	cmp	r0, #2
 80065ea:	b538      	push	{r3, r4, r5, lr}
 80065ec:	460d      	mov	r5, r1
 80065ee:	d117      	bne.n	8006620 <shell_cmd_setuartmode+0x38>
 80065f0:	6848      	ldr	r0, [r1, #4]
 80065f2:	f001 fade 	bl	8007bb2 <atoi>
 80065f6:	4604      	mov	r4, r0
 80065f8:	b118      	cbz	r0, 8006602 <shell_cmd_setuartmode+0x1a>
 80065fa:	2801      	cmp	r0, #1
 80065fc:	d008      	beq.n	8006610 <shell_cmd_setuartmode+0x28>
 80065fe:	2401      	movs	r4, #1
 8006600:	e00c      	b.n	800661c <shell_cmd_setuartmode+0x34>
 8006602:	68a8      	ldr	r0, [r5, #8]
 8006604:	f001 fad5 	bl	8007bb2 <atoi>
 8006608:	4b06      	ldr	r3, [pc, #24]	; (8006624 <shell_cmd_setuartmode+0x3c>)
 800660a:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
 800660e:	e7f6      	b.n	80065fe <shell_cmd_setuartmode+0x16>
 8006610:	68a8      	ldr	r0, [r5, #8]
 8006612:	f001 face 	bl	8007bb2 <atoi>
 8006616:	4b03      	ldr	r3, [pc, #12]	; (8006624 <shell_cmd_setuartmode+0x3c>)
 8006618:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
 800661c:	4620      	mov	r0, r4
 800661e:	bd38      	pop	{r3, r4, r5, pc}
 8006620:	2400      	movs	r4, #0
 8006622:	e7fb      	b.n	800661c <shell_cmd_setuartmode+0x34>
 8006624:	20000ac0 	.word	0x20000ac0

08006628 <shell_cmd_setstriplength>:
 8006628:	2802      	cmp	r0, #2
 800662a:	b538      	push	{r3, r4, r5, lr}
 800662c:	460d      	mov	r5, r1
 800662e:	d115      	bne.n	800665c <shell_cmd_setstriplength+0x34>
 8006630:	6848      	ldr	r0, [r1, #4]
 8006632:	f001 fabe 	bl	8007bb2 <atoi>
 8006636:	4604      	mov	r4, r0
 8006638:	b118      	cbz	r0, 8006642 <shell_cmd_setstriplength+0x1a>
 800663a:	2801      	cmp	r0, #1
 800663c:	d007      	beq.n	800664e <shell_cmd_setstriplength+0x26>
 800663e:	2401      	movs	r4, #1
 8006640:	e00a      	b.n	8006658 <shell_cmd_setstriplength+0x30>
 8006642:	68a8      	ldr	r0, [r5, #8]
 8006644:	f001 fab5 	bl	8007bb2 <atoi>
 8006648:	4b05      	ldr	r3, [pc, #20]	; (8006660 <shell_cmd_setstriplength+0x38>)
 800664a:	84d8      	strh	r0, [r3, #38]	; 0x26
 800664c:	e7f7      	b.n	800663e <shell_cmd_setstriplength+0x16>
 800664e:	68a8      	ldr	r0, [r5, #8]
 8006650:	f001 faaf 	bl	8007bb2 <atoi>
 8006654:	4b02      	ldr	r3, [pc, #8]	; (8006660 <shell_cmd_setstriplength+0x38>)
 8006656:	8518      	strh	r0, [r3, #40]	; 0x28
 8006658:	4620      	mov	r0, r4
 800665a:	bd38      	pop	{r3, r4, r5, pc}
 800665c:	2400      	movs	r4, #0
 800665e:	e7fb      	b.n	8006658 <shell_cmd_setstriplength+0x30>
 8006660:	20000ac0 	.word	0x20000ac0

08006664 <shell_cmd_settriggerctrl>:
 8006664:	2805      	cmp	r0, #5
 8006666:	b570      	push	{r4, r5, r6, lr}
 8006668:	460c      	mov	r4, r1
 800666a:	d135      	bne.n	80066d8 <shell_cmd_settriggerctrl+0x74>
 800666c:	6848      	ldr	r0, [r1, #4]
 800666e:	f001 faa0 	bl	8007bb2 <atoi>
 8006672:	4605      	mov	r5, r0
 8006674:	b118      	cbz	r0, 800667e <shell_cmd_settriggerctrl+0x1a>
 8006676:	2801      	cmp	r0, #1
 8006678:	d017      	beq.n	80066aa <shell_cmd_settriggerctrl+0x46>
 800667a:	2501      	movs	r5, #1
 800667c:	e02a      	b.n	80066d4 <shell_cmd_settriggerctrl+0x70>
 800667e:	68a0      	ldr	r0, [r4, #8]
 8006680:	f001 fa97 	bl	8007bb2 <atoi>
 8006684:	4d15      	ldr	r5, [pc, #84]	; (80066dc <shell_cmd_settriggerctrl+0x78>)
 8006686:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
 800668a:	68e0      	ldr	r0, [r4, #12]
 800668c:	f001 fa91 	bl	8007bb2 <atoi>
 8006690:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
 8006694:	6920      	ldr	r0, [r4, #16]
 8006696:	f001 fa8c 	bl	8007bb2 <atoi>
 800669a:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
 800669e:	6960      	ldr	r0, [r4, #20]
 80066a0:	f001 fa87 	bl	8007bb2 <atoi>
 80066a4:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
 80066a8:	e7e7      	b.n	800667a <shell_cmd_settriggerctrl+0x16>
 80066aa:	68a0      	ldr	r0, [r4, #8]
 80066ac:	f001 fa81 	bl	8007bb2 <atoi>
 80066b0:	4e0a      	ldr	r6, [pc, #40]	; (80066dc <shell_cmd_settriggerctrl+0x78>)
 80066b2:	f886 0037 	strb.w	r0, [r6, #55]	; 0x37
 80066b6:	68e0      	ldr	r0, [r4, #12]
 80066b8:	f001 fa7b 	bl	8007bb2 <atoi>
 80066bc:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 80066c0:	6920      	ldr	r0, [r4, #16]
 80066c2:	f001 fa76 	bl	8007bb2 <atoi>
 80066c6:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
 80066ca:	6960      	ldr	r0, [r4, #20]
 80066cc:	f001 fa71 	bl	8007bb2 <atoi>
 80066d0:	f886 0036 	strb.w	r0, [r6, #54]	; 0x36
 80066d4:	4628      	mov	r0, r5
 80066d6:	bd70      	pop	{r4, r5, r6, pc}
 80066d8:	2500      	movs	r5, #0
 80066da:	e7fb      	b.n	80066d4 <shell_cmd_settriggerctrl+0x70>
 80066dc:	20000ac0 	.word	0x20000ac0

080066e0 <shell_cmd_settriggerconfig>:
 80066e0:	2804      	cmp	r0, #4
 80066e2:	b570      	push	{r4, r5, r6, lr}
 80066e4:	460c      	mov	r4, r1
 80066e6:	d12b      	bne.n	8006740 <shell_cmd_settriggerconfig+0x60>
 80066e8:	6848      	ldr	r0, [r1, #4]
 80066ea:	f001 fa62 	bl	8007bb2 <atoi>
 80066ee:	4605      	mov	r5, r0
 80066f0:	b118      	cbz	r0, 80066fa <shell_cmd_settriggerconfig+0x1a>
 80066f2:	2801      	cmp	r0, #1
 80066f4:	d012      	beq.n	800671c <shell_cmd_settriggerconfig+0x3c>
 80066f6:	2501      	movs	r5, #1
 80066f8:	e020      	b.n	800673c <shell_cmd_settriggerconfig+0x5c>
 80066fa:	68a0      	ldr	r0, [r4, #8]
 80066fc:	f001 fa59 	bl	8007bb2 <atoi>
 8006700:	4d10      	ldr	r5, [pc, #64]	; (8006744 <shell_cmd_settriggerconfig+0x64>)
 8006702:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
 8006706:	68e0      	ldr	r0, [r4, #12]
 8006708:	f001 fa53 	bl	8007bb2 <atoi>
 800670c:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
 8006710:	6920      	ldr	r0, [r4, #16]
 8006712:	f001 fa4e 	bl	8007bb2 <atoi>
 8006716:	f885 0032 	strb.w	r0, [r5, #50]	; 0x32
 800671a:	e7ec      	b.n	80066f6 <shell_cmd_settriggerconfig+0x16>
 800671c:	68a0      	ldr	r0, [r4, #8]
 800671e:	f001 fa48 	bl	8007bb2 <atoi>
 8006722:	4e08      	ldr	r6, [pc, #32]	; (8006744 <shell_cmd_settriggerconfig+0x64>)
 8006724:	f886 0033 	strb.w	r0, [r6, #51]	; 0x33
 8006728:	68e0      	ldr	r0, [r4, #12]
 800672a:	f001 fa42 	bl	8007bb2 <atoi>
 800672e:	f886 0034 	strb.w	r0, [r6, #52]	; 0x34
 8006732:	6920      	ldr	r0, [r4, #16]
 8006734:	f001 fa3d 	bl	8007bb2 <atoi>
 8006738:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800673c:	4628      	mov	r0, r5
 800673e:	bd70      	pop	{r4, r5, r6, pc}
 8006740:	2500      	movs	r5, #0
 8006742:	e7fb      	b.n	800673c <shell_cmd_settriggerconfig+0x5c>
 8006744:	20000ac0 	.word	0x20000ac0

08006748 <shell_cmd_setgamma>:
 8006748:	2802      	cmp	r0, #2
 800674a:	b538      	push	{r3, r4, r5, lr}
 800674c:	460c      	mov	r4, r1
 800674e:	d118      	bne.n	8006782 <shell_cmd_setgamma+0x3a>
 8006750:	6848      	ldr	r0, [r1, #4]
 8006752:	f001 fa2e 	bl	8007bb2 <atoi>
 8006756:	4d0c      	ldr	r5, [pc, #48]	; (8006788 <shell_cmd_setgamma+0x40>)
 8006758:	b138      	cbz	r0, 800676a <shell_cmd_setgamma+0x22>
 800675a:	2802      	cmp	r0, #2
 800675c:	d00b      	beq.n	8006776 <shell_cmd_setgamma+0x2e>
 800675e:	68a0      	ldr	r0, [r4, #8]
 8006760:	f001 fa27 	bl	8007bb2 <atoi>
 8006764:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
 8006768:	e003      	b.n	8006772 <shell_cmd_setgamma+0x2a>
 800676a:	68a0      	ldr	r0, [r4, #8]
 800676c:	f001 fa21 	bl	8007bb2 <atoi>
 8006770:	87e8      	strh	r0, [r5, #62]	; 0x3e
 8006772:	2001      	movs	r0, #1
 8006774:	bd38      	pop	{r3, r4, r5, pc}
 8006776:	68a0      	ldr	r0, [r4, #8]
 8006778:	f001 fa1b 	bl	8007bb2 <atoi>
 800677c:	f8a5 004a 	strh.w	r0, [r5, #74]	; 0x4a
 8006780:	e7f7      	b.n	8006772 <shell_cmd_setgamma+0x2a>
 8006782:	2000      	movs	r0, #0
 8006784:	e7f6      	b.n	8006774 <shell_cmd_setgamma+0x2c>
 8006786:	bf00      	nop
 8006788:	20000ac0 	.word	0x20000ac0

0800678c <shell_cmd_setoffset>:
 800678c:	2802      	cmp	r0, #2
 800678e:	b538      	push	{r3, r4, r5, lr}
 8006790:	460c      	mov	r4, r1
 8006792:	d118      	bne.n	80067c6 <shell_cmd_setoffset+0x3a>
 8006794:	6848      	ldr	r0, [r1, #4]
 8006796:	f001 fa0c 	bl	8007bb2 <atoi>
 800679a:	4d0c      	ldr	r5, [pc, #48]	; (80067cc <shell_cmd_setoffset+0x40>)
 800679c:	b138      	cbz	r0, 80067ae <shell_cmd_setoffset+0x22>
 800679e:	2802      	cmp	r0, #2
 80067a0:	d00b      	beq.n	80067ba <shell_cmd_setoffset+0x2e>
 80067a2:	68a0      	ldr	r0, [r4, #8]
 80067a4:	f001 fa05 	bl	8007bb2 <atoi>
 80067a8:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
 80067ac:	e003      	b.n	80067b6 <shell_cmd_setoffset+0x2a>
 80067ae:	68a0      	ldr	r0, [r4, #8]
 80067b0:	f001 f9ff 	bl	8007bb2 <atoi>
 80067b4:	8768      	strh	r0, [r5, #58]	; 0x3a
 80067b6:	2001      	movs	r0, #1
 80067b8:	bd38      	pop	{r3, r4, r5, pc}
 80067ba:	68a0      	ldr	r0, [r4, #8]
 80067bc:	f001 f9f9 	bl	8007bb2 <atoi>
 80067c0:	f8a5 0046 	strh.w	r0, [r5, #70]	; 0x46
 80067c4:	e7f7      	b.n	80067b6 <shell_cmd_setoffset+0x2a>
 80067c6:	2000      	movs	r0, #0
 80067c8:	e7f6      	b.n	80067b8 <shell_cmd_setoffset+0x2c>
 80067ca:	bf00      	nop
 80067cc:	20000ac0 	.word	0x20000ac0

080067d0 <shell_cmd_setgain>:
 80067d0:	2802      	cmp	r0, #2
 80067d2:	b538      	push	{r3, r4, r5, lr}
 80067d4:	460c      	mov	r4, r1
 80067d6:	d118      	bne.n	800680a <shell_cmd_setgain+0x3a>
 80067d8:	6848      	ldr	r0, [r1, #4]
 80067da:	f001 f9ea 	bl	8007bb2 <atoi>
 80067de:	4d0c      	ldr	r5, [pc, #48]	; (8006810 <shell_cmd_setgain+0x40>)
 80067e0:	b138      	cbz	r0, 80067f2 <shell_cmd_setgain+0x22>
 80067e2:	2802      	cmp	r0, #2
 80067e4:	d00b      	beq.n	80067fe <shell_cmd_setgain+0x2e>
 80067e6:	68a0      	ldr	r0, [r4, #8]
 80067e8:	f001 f9e3 	bl	8007bb2 <atoi>
 80067ec:	f8a5 0042 	strh.w	r0, [r5, #66]	; 0x42
 80067f0:	e003      	b.n	80067fa <shell_cmd_setgain+0x2a>
 80067f2:	68a0      	ldr	r0, [r4, #8]
 80067f4:	f001 f9dd 	bl	8007bb2 <atoi>
 80067f8:	87a8      	strh	r0, [r5, #60]	; 0x3c
 80067fa:	2001      	movs	r0, #1
 80067fc:	bd38      	pop	{r3, r4, r5, pc}
 80067fe:	68a0      	ldr	r0, [r4, #8]
 8006800:	f001 f9d7 	bl	8007bb2 <atoi>
 8006804:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
 8006808:	e7f7      	b.n	80067fa <shell_cmd_setgain+0x2a>
 800680a:	2000      	movs	r0, #0
 800680c:	e7f6      	b.n	80067fc <shell_cmd_setgain+0x2c>
 800680e:	bf00      	nop
 8006810:	20000ac0 	.word	0x20000ac0

08006814 <shell_cmd_setfxmultiplier>:
 8006814:	b510      	push	{r4, lr}
 8006816:	6848      	ldr	r0, [r1, #4]
 8006818:	f001 f9cb 	bl	8007bb2 <atoi>
 800681c:	b2c0      	uxtb	r0, r0
 800681e:	2804      	cmp	r0, #4
 8006820:	4c07      	ldr	r4, [pc, #28]	; (8006840 <shell_cmd_setfxmultiplier+0x2c>)
 8006822:	d002      	beq.n	800682a <shell_cmd_setfxmultiplier+0x16>
 8006824:	1e43      	subs	r3, r0, #1
 8006826:	2b01      	cmp	r3, #1
 8006828:	d803      	bhi.n	8006832 <shell_cmd_setfxmultiplier+0x1e>
 800682a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
 800682e:	2001      	movs	r0, #1
 8006830:	bd10      	pop	{r4, pc}
 8006832:	4804      	ldr	r0, [pc, #16]	; (8006844 <shell_cmd_setfxmultiplier+0x30>)
 8006834:	f7ff fc98 	bl	8006168 <print>
 8006838:	2304      	movs	r3, #4
 800683a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 800683e:	e7f6      	b.n	800682e <shell_cmd_setfxmultiplier+0x1a>
 8006840:	20000ac0 	.word	0x20000ac0
 8006844:	0800a154 	.word	0x0800a154

08006848 <shell_cmd_test>:
 8006848:	2801      	cmp	r0, #1
 800684a:	b510      	push	{r4, lr}
 800684c:	4604      	mov	r4, r0
 800684e:	d105      	bne.n	800685c <shell_cmd_test+0x14>
 8006850:	6849      	ldr	r1, [r1, #4]
 8006852:	4803      	ldr	r0, [pc, #12]	; (8006860 <shell_cmd_test+0x18>)
 8006854:	f7ff fc88 	bl	8006168 <print>
 8006858:	4620      	mov	r0, r4
 800685a:	bd10      	pop	{r4, pc}
 800685c:	2400      	movs	r4, #0
 800685e:	e7fb      	b.n	8006858 <shell_cmd_test+0x10>
 8006860:	0800a167 	.word	0x0800a167

08006864 <shell_cmd_setreg>:
 8006864:	2802      	cmp	r0, #2
 8006866:	b538      	push	{r3, r4, r5, lr}
 8006868:	460c      	mov	r4, r1
 800686a:	d10c      	bne.n	8006886 <shell_cmd_setreg+0x22>
 800686c:	6848      	ldr	r0, [r1, #4]
 800686e:	f001 f9a0 	bl	8007bb2 <atoi>
 8006872:	4605      	mov	r5, r0
 8006874:	68a0      	ldr	r0, [r4, #8]
 8006876:	f001 f99c 	bl	8007bb2 <atoi>
 800687a:	b2c1      	uxtb	r1, r0
 800687c:	4628      	mov	r0, r5
 800687e:	f7fe f817 	bl	80048b0 <set_reg>
 8006882:	2001      	movs	r0, #1
 8006884:	bd38      	pop	{r3, r4, r5, pc}
 8006886:	2000      	movs	r0, #0
 8006888:	e7fc      	b.n	8006884 <shell_cmd_setreg+0x20>

0800688a <shell_cmd_setbrightness>:
 800688a:	2801      	cmp	r0, #1
 800688c:	b510      	push	{r4, lr}
 800688e:	4604      	mov	r4, r0
 8006890:	d108      	bne.n	80068a4 <shell_cmd_setbrightness+0x1a>
 8006892:	6848      	ldr	r0, [r1, #4]
 8006894:	f001 f98d 	bl	8007bb2 <atoi>
 8006898:	b2c1      	uxtb	r1, r0
 800689a:	2000      	movs	r0, #0
 800689c:	f7fe f808 	bl	80048b0 <set_reg>
 80068a0:	4620      	mov	r0, r4
 80068a2:	bd10      	pop	{r4, pc}
 80068a4:	2400      	movs	r4, #0
 80068a6:	e7fb      	b.n	80068a0 <shell_cmd_setbrightness+0x16>

080068a8 <shell_cmd_setpwm>:
 80068a8:	2803      	cmp	r0, #3
 80068aa:	b570      	push	{r4, r5, r6, lr}
 80068ac:	460c      	mov	r4, r1
 80068ae:	d111      	bne.n	80068d4 <shell_cmd_setpwm+0x2c>
 80068b0:	6848      	ldr	r0, [r1, #4]
 80068b2:	f001 f97e 	bl	8007bb2 <atoi>
 80068b6:	4605      	mov	r5, r0
 80068b8:	68a0      	ldr	r0, [r4, #8]
 80068ba:	f001 f97a 	bl	8007bb2 <atoi>
 80068be:	4606      	mov	r6, r0
 80068c0:	68e0      	ldr	r0, [r4, #12]
 80068c2:	f001 f976 	bl	8007bb2 <atoi>
 80068c6:	b2f1      	uxtb	r1, r6
 80068c8:	b282      	uxth	r2, r0
 80068ca:	b2e8      	uxtb	r0, r5
 80068cc:	f7ff f836 	bl	800593c <configPWM>
 80068d0:	2001      	movs	r0, #1
 80068d2:	bd70      	pop	{r4, r5, r6, pc}
 80068d4:	2000      	movs	r0, #0
 80068d6:	e7fc      	b.n	80068d2 <shell_cmd_setpwm+0x2a>

080068d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80068d8:	4b0e      	ldr	r3, [pc, #56]	; (8006914 <HAL_MspInit+0x3c>)
{
 80068da:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80068dc:	699a      	ldr	r2, [r3, #24]
 80068de:	f042 0201 	orr.w	r2, r2, #1
 80068e2:	619a      	str	r2, [r3, #24]
 80068e4:	699a      	ldr	r2, [r3, #24]
 80068e6:	f002 0201 	and.w	r2, r2, #1
 80068ea:	9200      	str	r2, [sp, #0]
 80068ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80068f4:	61da      	str	r2, [r3, #28]
 80068f6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80068f8:	4a07      	ldr	r2, [pc, #28]	; (8006918 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80068fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068fe:	9301      	str	r3, [sp, #4]
 8006900:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006902:	6853      	ldr	r3, [r2, #4]
 8006904:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006908:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800690c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800690e:	b002      	add	sp, #8
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40021000 	.word	0x40021000
 8006918:	40010000 	.word	0x40010000

0800691c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800691c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800691e:	2410      	movs	r4, #16
{
 8006920:	4605      	mov	r5, r0
 8006922:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006924:	4622      	mov	r2, r4
 8006926:	2100      	movs	r1, #0
 8006928:	eb0d 0004 	add.w	r0, sp, r4
 800692c:	f001 f993 	bl	8007c56 <memset>
  if(hadc->Instance==ADC1)
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	4a1e      	ldr	r2, [pc, #120]	; (80069ac <HAL_ADC_MspInit+0x90>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d11d      	bne.n	8006974 <HAL_ADC_MspInit+0x58>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006938:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <HAL_ADC_MspInit+0x94>)
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = ANALOG_0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(ANALOG_0_GPIO_Port, &GPIO_InitStruct);
 800693a:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_ADC1_CLK_ENABLE();
 800693e:	699a      	ldr	r2, [r3, #24]
 8006940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006944:	619a      	str	r2, [r3, #24]
 8006946:	699a      	ldr	r2, [r3, #24]
 8006948:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800694c:	9200      	str	r2, [sp, #0]
 800694e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	f042 0204 	orr.w	r2, r2, #4
 8006956:	619a      	str	r2, [r3, #24]
 8006958:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800695a:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006964:	2303      	movs	r3, #3
 8006966:	e9cd 2304 	strd	r2, r3, [sp, #16]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN4 
    */
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 800696a:	4812      	ldr	r0, [pc, #72]	; (80069b4 <HAL_ADC_MspInit+0x98>)
 800696c:	f7fb f85e 	bl	8001a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006970:	b009      	add	sp, #36	; 0x24
 8006972:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 8006974:	4a10      	ldr	r2, [pc, #64]	; (80069b8 <HAL_ADC_MspInit+0x9c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d1fa      	bne.n	8006970 <HAL_ADC_MspInit+0x54>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800697a:	4b0d      	ldr	r3, [pc, #52]	; (80069b0 <HAL_ADC_MspInit+0x94>)
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 800697c:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006984:	619a      	str	r2, [r3, #24]
 8006986:	699a      	ldr	r2, [r3, #24]
 8006988:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800698c:	9202      	str	r2, [sp, #8]
 800698e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006990:	699a      	ldr	r2, [r3, #24]
 8006992:	f042 0204 	orr.w	r2, r2, #4
 8006996:	619a      	str	r2, [r3, #24]
 8006998:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 800699a:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	9303      	str	r3, [sp, #12]
 80069a2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069a4:	2303      	movs	r3, #3
 80069a6:	9305      	str	r3, [sp, #20]
 80069a8:	e7df      	b.n	800696a <HAL_ADC_MspInit+0x4e>
 80069aa:	bf00      	nop
 80069ac:	40012400 	.word	0x40012400
 80069b0:	40021000 	.word	0x40021000
 80069b4:	40010800 	.word	0x40010800
 80069b8:	40012800 	.word	0x40012800

080069bc <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069bc:	2210      	movs	r2, #16
{
 80069be:	b510      	push	{r4, lr}
 80069c0:	4604      	mov	r4, r0
 80069c2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069c4:	eb0d 0002 	add.w	r0, sp, r2
 80069c8:	2100      	movs	r1, #0
 80069ca:	f001 f944 	bl	8007c56 <memset>
  if(huart->Instance==USART1)
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	4a2a      	ldr	r2, [pc, #168]	; (8006a7c <HAL_UART_MspInit+0xc0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d125      	bne.n	8006a22 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80069d6:	4b2a      	ldr	r3, [pc, #168]	; (8006a80 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = RS485_RXTX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069d8:	2040      	movs	r0, #64	; 0x40
    __HAL_RCC_USART1_CLK_ENABLE();
 80069da:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 80069dc:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 80069de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069e2:	619a      	str	r2, [r3, #24]
 80069e4:	699a      	ldr	r2, [r3, #24]
 80069e6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80069ea:	9200      	str	r2, [sp, #0]
 80069ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069ee:	699a      	ldr	r2, [r3, #24]
 80069f0:	f042 0208 	orr.w	r2, r2, #8
 80069f4:	619a      	str	r2, [r3, #24]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a00:	2312      	movs	r3, #18
 8006a02:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a06:	2303      	movs	r3, #3
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8006a08:	481e      	ldr	r0, [pc, #120]	; (8006a84 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a0a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8006a0c:	f7fb f80e 	bl	8001a2c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8006a10:	4a1d      	ldr	r2, [pc, #116]	; (8006a88 <HAL_UART_MspInit+0xcc>)
 8006a12:	6853      	ldr	r3, [r2, #4]
 8006a14:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006a18:	f043 0304 	orr.w	r3, r3, #4
 8006a1c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006a1e:	b008      	add	sp, #32
 8006a20:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8006a22:	4a1a      	ldr	r2, [pc, #104]	; (8006a8c <HAL_UART_MspInit+0xd0>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d1fa      	bne.n	8006a1e <HAL_UART_MspInit+0x62>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006a28:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <HAL_UART_MspInit+0xc4>)
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 8006a2a:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8006a2c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 8006a2e:	4815      	ldr	r0, [pc, #84]	; (8006a84 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8006a30:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006a34:	61da      	str	r2, [r3, #28]
 8006a36:	69da      	ldr	r2, [r3, #28]
 8006a38:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8006a3c:	9202      	str	r2, [sp, #8]
 8006a3e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a40:	699a      	ldr	r2, [r3, #24]
 8006a42:	f042 0208 	orr.w	r2, r2, #8
 8006a46:	619a      	str	r2, [r3, #24]
 8006a48:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a4e:	f003 0308 	and.w	r3, r3, #8
 8006a52:	9303      	str	r3, [sp, #12]
 8006a54:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a56:	2302      	movs	r3, #2
 8006a58:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 8006a60:	f7fa ffe4 	bl	8001a2c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a64:	2300      	movs	r3, #0
 8006a66:	f44f 6100 	mov.w	r1, #2048	; 0x800
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 8006a6a:	4806      	ldr	r0, [pc, #24]	; (8006a84 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a6c:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 8006a70:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a72:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 8006a74:	f7fa ffda 	bl	8001a2c <HAL_GPIO_Init>
}
 8006a78:	e7d1      	b.n	8006a1e <HAL_UART_MspInit+0x62>
 8006a7a:	bf00      	nop
 8006a7c:	40013800 	.word	0x40013800
 8006a80:	40021000 	.word	0x40021000
 8006a84:	40010c00 	.word	0x40010c00
 8006a88:	40010000 	.word	0x40010000
 8006a8c:	40004800 	.word	0x40004800

08006a90 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006a90:	4770      	bx	lr

08006a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a92:	e7fe      	b.n	8006a92 <HardFault_Handler>

08006a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a94:	e7fe      	b.n	8006a94 <MemManage_Handler>

08006a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a96:	e7fe      	b.n	8006a96 <BusFault_Handler>

08006a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a98:	e7fe      	b.n	8006a98 <UsageFault_Handler>

08006a9a <SVC_Handler>:
 8006a9a:	4770      	bx	lr

08006a9c <DebugMon_Handler>:
 8006a9c:	4770      	bx	lr

08006a9e <PendSV_Handler>:
 8006a9e:	4770      	bx	lr

08006aa0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006aa0:	f7fa ba96 	b.w	8000fd0 <HAL_IncTick>

08006aa4 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006aa4:	4801      	ldr	r0, [pc, #4]	; (8006aac <DMA1_Channel3_IRQHandler+0x8>)
 8006aa6:	f7fa bdff 	b.w	80016a8 <HAL_DMA_IRQHandler>
 8006aaa:	bf00      	nop
 8006aac:	20000d1c 	.word	0x20000d1c

08006ab0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006ab0:	4801      	ldr	r0, [pc, #4]	; (8006ab8 <DMA1_Channel4_IRQHandler+0x8>)
 8006ab2:	f7fa bdf9 	b.w	80016a8 <HAL_DMA_IRQHandler>
 8006ab6:	bf00      	nop
 8006ab8:	20000cd8 	.word	0x20000cd8

08006abc <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006abc:	4801      	ldr	r0, [pc, #4]	; (8006ac4 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8006abe:	f7fb b9d1 	b.w	8001e64 <HAL_PCD_IRQHandler>
 8006ac2:	bf00      	nop
 8006ac4:	200014ec 	.word	0x200014ec

08006ac8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8006ac8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006aca:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <_sbrk+0x2c>)
{
 8006acc:	4602      	mov	r2, r0
	if (heap_end == 0)
 8006ace:	6819      	ldr	r1, [r3, #0]
 8006ad0:	b909      	cbnz	r1, 8006ad6 <_sbrk+0xe>
		heap_end = &end;
 8006ad2:	4909      	ldr	r1, [pc, #36]	; (8006af8 <_sbrk+0x30>)
 8006ad4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8006ad6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8006ad8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8006ada:	4402      	add	r2, r0
 8006adc:	428a      	cmp	r2, r1
 8006ade:	d906      	bls.n	8006aee <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006ae0:	f001 f874 	bl	8007bcc <__errno>
 8006ae4:	230c      	movs	r3, #12
 8006ae6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006ae8:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8006aec:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8006aee:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8006af0:	e7fc      	b.n	8006aec <_sbrk+0x24>
 8006af2:	bf00      	nop
 8006af4:	200006f8 	.word	0x200006f8
 8006af8:	20001960 	.word	0x20001960

08006afc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006afc:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <SystemInit+0x40>)
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	f042 0201 	orr.w	r2, r2, #1
 8006b04:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006b06:	6859      	ldr	r1, [r3, #4]
 8006b08:	4a0d      	ldr	r2, [pc, #52]	; (8006b40 <SystemInit+0x44>)
 8006b0a:	400a      	ands	r2, r1
 8006b0c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006b14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b18:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b20:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8006b28:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006b2a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006b2e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006b30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b34:	4b03      	ldr	r3, [pc, #12]	; (8006b44 <SystemInit+0x48>)
 8006b36:	609a      	str	r2, [r3, #8]
#endif 
}
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	40021000 	.word	0x40021000
 8006b40:	f8ff0000 	.word	0xf8ff0000
 8006b44:	e000ed00 	.word	0xe000ed00

08006b48 <lights_off>:
							 {PWM_CH3,CH_RED},{PWM_CH3,CH_GREEN},{PWM_CH3,CH_BLUE},{PWM_CH3,CH_WHITE}};



void lights_off(void)
{
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	2400      	movs	r4, #0
	for (uint8_t ii=0;ii<STATE_CNT;ii++)
		configPWM(states[ii].id,states[ii].ch, 0);
 8006b4c:	4d05      	ldr	r5, [pc, #20]	; (8006b64 <lights_off+0x1c>)
 8006b4e:	192b      	adds	r3, r5, r4
 8006b50:	5d28      	ldrb	r0, [r5, r4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	7859      	ldrb	r1, [r3, #1]
 8006b56:	3402      	adds	r4, #2
 8006b58:	f7fe fef0 	bl	800593c <configPWM>
	for (uint8_t ii=0;ii<STATE_CNT;ii++)
 8006b5c:	2c14      	cmp	r4, #20
 8006b5e:	d1f6      	bne.n	8006b4e <lights_off+0x6>
}
 8006b60:	bd38      	pop	{r3, r4, r5, pc}
 8006b62:	bf00      	nop
 8006b64:	20000189 	.word	0x20000189

08006b68 <process_testmode>:

uint8_t process_testmode(void)
{
 8006b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static uint8_t last_button_state = 1;
	static uint16_t cnt = 0;
	static uint8_t done = 0;
	uint8_t button_state = 1;

	if (done)
 8006b6c:	4a21      	ldr	r2, [pc, #132]	; (8006bf4 <process_testmode+0x8c>)
 8006b6e:	4b22      	ldr	r3, [pc, #136]	; (8006bf8 <process_testmode+0x90>)
 8006b70:	7811      	ldrb	r1, [r2, #0]
 8006b72:	881c      	ldrh	r4, [r3, #0]
 8006b74:	461d      	mov	r5, r3
 8006b76:	4616      	mov	r6, r2
 8006b78:	b141      	cbz	r1, 8006b8c <process_testmode+0x24>
	{
		if (cnt == 0)
 8006b7a:	b91c      	cbnz	r4, 8006b84 <process_testmode+0x1c>
		{
			done = 0;
			return 0;
 8006b7c:	4620      	mov	r0, r4
			done = 0;
 8006b7e:	7014      	strb	r4, [r2, #0]
			done = 1;
		}
		last_button_state = button_state;
	}
	return 1;
}
 8006b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cnt--;
 8006b84:	3c01      	subs	r4, #1
 8006b86:	801c      	strh	r4, [r3, #0]
	return 1;
 8006b88:	2001      	movs	r0, #1
 8006b8a:	e7f9      	b.n	8006b80 <process_testmode+0x18>
		if (cnt == 0)
 8006b8c:	b9bc      	cbnz	r4, 8006bbe <process_testmode+0x56>
			cnt = STEP_CNT;
 8006b8e:	f44f 7316 	mov.w	r3, #600	; 0x258
			configPWM(states[state].id,states[state].ch, MAX_PWM);
 8006b92:	4f1a      	ldr	r7, [pc, #104]	; (8006bfc <process_testmode+0x94>)
			cnt = STEP_CNT;
 8006b94:	802b      	strh	r3, [r5, #0]
			lights_off();
 8006b96:	f7ff ffd7 	bl	8006b48 <lights_off>
			configPWM(states[state].id,states[state].ch, MAX_PWM);
 8006b9a:	4b19      	ldr	r3, [pc, #100]	; (8006c00 <process_testmode+0x98>)
 8006b9c:	7838      	ldrb	r0, [r7, #0]
 8006b9e:	f240 4234 	movw	r2, #1076	; 0x434
 8006ba2:	eb03 0140 	add.w	r1, r3, r0, lsl #1
 8006ba6:	7849      	ldrb	r1, [r1, #1]
 8006ba8:	f813 0010 	ldrb.w	r0, [r3, r0, lsl #1]
 8006bac:	f7fe fec6 	bl	800593c <configPWM>
			state++;
 8006bb0:	783b      	ldrb	r3, [r7, #0]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	b2db      	uxtb	r3, r3
			if (state == STATE_CNT)
 8006bb6:	2b0a      	cmp	r3, #10
			state++;
 8006bb8:	bf14      	ite	ne
 8006bba:	703b      	strbne	r3, [r7, #0]
				state = 0;
 8006bbc:	703c      	strbeq	r4, [r7, #0]
		cnt--;
 8006bbe:	882b      	ldrh	r3, [r5, #0]
		if ((last_button_state == 0) && (button_state == 1))
 8006bc0:	4c10      	ldr	r4, [pc, #64]	; (8006c04 <process_testmode+0x9c>)
		cnt--;
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	802b      	strh	r3, [r5, #0]
		button_state = check_button();
 8006bc6:	f7fe f945 	bl	8004e54 <check_button>
		if ((last_button_state == 0) && (button_state == 1))
 8006bca:	f894 8000 	ldrb.w	r8, [r4]
		button_state = check_button();
 8006bce:	4607      	mov	r7, r0
		if ((last_button_state == 0) && (button_state == 1))
 8006bd0:	f1b8 0f00 	cmp.w	r8, #0
 8006bd4:	d10b      	bne.n	8006bee <process_testmode+0x86>
 8006bd6:	2801      	cmp	r0, #1
 8006bd8:	d109      	bne.n	8006bee <process_testmode+0x86>
			last_button_state = 1;
 8006bda:	7020      	strb	r0, [r4, #0]
			lights_off();
 8006bdc:	f7ff ffb4 	bl	8006b48 <lights_off>
			cnt = STEP_CNT;
 8006be0:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006be4:	802b      	strh	r3, [r5, #0]
			state = 0;
 8006be6:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <process_testmode+0x94>)
			done = 1;
 8006be8:	7037      	strb	r7, [r6, #0]
			state = 0;
 8006bea:	f883 8000 	strb.w	r8, [r3]
		last_button_state = button_state;
 8006bee:	7027      	strb	r7, [r4, #0]
 8006bf0:	e7ca      	b.n	8006b88 <process_testmode+0x20>
 8006bf2:	bf00      	nop
 8006bf4:	200006fe 	.word	0x200006fe
 8006bf8:	200006fc 	.word	0x200006fc
 8006bfc:	200006ff 	.word	0x200006ff
 8006c00:	20000189 	.word	0x20000189
 8006c04:	20000188 	.word	0x20000188

08006c08 <ADC1_2_IRQHandler>:
 8006c08:	4b01      	ldr	r3, [pc, #4]	; (8006c10 <ADC1_2_IRQHandler+0x8>)
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	f7fa b9f6 	b.w	8000ffc <HAL_ADC_IRQHandler>
 8006c10:	200001a0 	.word	0x200001a0

08006c14 <HAL_ADC_ConvCpltCallback>:
 8006c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c16:	6804      	ldr	r4, [r0, #0]
 8006c18:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <HAL_ADC_ConvCpltCallback+0x70>)
 8006c1a:	4605      	mov	r5, r0
 8006c1c:	1ae3      	subs	r3, r4, r3
 8006c1e:	425c      	negs	r4, r3
 8006c20:	415c      	adcs	r4, r3
 8006c22:	f7fa f9e7 	bl	8000ff4 <HAL_ADC_GetValue>
 8006c26:	4a18      	ldr	r2, [pc, #96]	; (8006c88 <HAL_ADC_ConvCpltCallback+0x74>)
 8006c28:	0121      	lsls	r1, r4, #4
 8006c2a:	1857      	adds	r7, r2, r1
 8006c2c:	7bbb      	ldrb	r3, [r7, #14]
 8006c2e:	00e4      	lsls	r4, r4, #3
 8006c30:	18e6      	adds	r6, r4, r3
 8006c32:	3301      	adds	r3, #1
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 8006c3a:	0900      	lsrs	r0, r0, #4
 8006c3c:	2b05      	cmp	r3, #5
 8006c3e:	80b0      	strh	r0, [r6, #4]
 8006c40:	73bb      	strb	r3, [r7, #14]
 8006c42:	d111      	bne.n	8006c68 <HAL_ADC_ConvCpltCallback+0x54>
 8006c44:	2000      	movs	r0, #0
 8006c46:	3406      	adds	r4, #6
 8006c48:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8006c4c:	3402      	adds	r4, #2
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	f834 6d02 	ldrh.w	r6, [r4, #-2]!
 8006c54:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8006c58:	4430      	add	r0, r6
 8006c5a:	d1f8      	bne.n	8006c4e <HAL_ADC_ConvCpltCallback+0x3a>
 8006c5c:	1854      	adds	r4, r2, r1
 8006c5e:	73a3      	strb	r3, [r4, #14]
 8006c60:	2305      	movs	r3, #5
 8006c62:	fbb0 f0f3 	udiv	r0, r0, r3
 8006c66:	5250      	strh	r0, [r2, r1]
 8006c68:	682a      	ldr	r2, [r5, #0]
 8006c6a:	4b08      	ldr	r3, [pc, #32]	; (8006c8c <HAL_ADC_ConvCpltCallback+0x78>)
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	bf08      	it	eq
 8006c70:	4a07      	ldreq	r2, [pc, #28]	; (8006c90 <HAL_ADC_ConvCpltCallback+0x7c>)
 8006c72:	4b08      	ldr	r3, [pc, #32]	; (8006c94 <HAL_ADC_ConvCpltCallback+0x80>)
 8006c74:	bf18      	it	ne
 8006c76:	4a08      	ldrne	r2, [pc, #32]	; (8006c98 <HAL_ADC_ConvCpltCallback+0x84>)
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	6818      	ldr	r0, [r3, #0]
 8006c7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c80:	f7fa bae8 	b.w	8001254 <HAL_ADC_Start_IT>
 8006c84:	40012800 	.word	0x40012800
 8006c88:	20000e20 	.word	0x20000e20
 8006c8c:	40012400 	.word	0x40012400
 8006c90:	20000ba4 	.word	0x20000ba4
 8006c94:	200001a0 	.word	0x200001a0
 8006c98:	20000c10 	.word	0x20000c10

08006c9c <init_trigger>:
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	2410      	movs	r4, #16
 8006ca0:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <init_trigger+0x38>)
 8006ca2:	4622      	mov	r2, r4
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	f000 ffd5 	bl	8007c56 <memset>
 8006cac:	4622      	mov	r2, r4
 8006cae:	2100      	movs	r1, #0
 8006cb0:	4420      	add	r0, r4
 8006cb2:	f000 ffd0 	bl	8007c56 <memset>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2012      	movs	r0, #18
 8006cba:	4611      	mov	r1, r2
 8006cbc:	f7fa fbe6 	bl	800148c <HAL_NVIC_SetPriority>
 8006cc0:	2012      	movs	r0, #18
 8006cc2:	f7fa fc17 	bl	80014f4 <HAL_NVIC_EnableIRQ>
 8006cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cca:	4b03      	ldr	r3, [pc, #12]	; (8006cd8 <init_trigger+0x3c>)
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	f7fa bac1 	b.w	8001254 <HAL_ADC_Start_IT>
 8006cd2:	bf00      	nop
 8006cd4:	20000e20 	.word	0x20000e20
 8006cd8:	200001a0 	.word	0x200001a0

08006cdc <process_trigger>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4c29      	ldr	r4, [pc, #164]	; (8006d84 <process_trigger+0xa8>)
 8006ce0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8006ce4:	b150      	cbz	r0, 8006cfc <process_trigger+0x20>
 8006ce6:	4d28      	ldr	r5, [pc, #160]	; (8006d88 <process_trigger+0xac>)
 8006ce8:	8829      	ldrh	r1, [r5, #0]
 8006cea:	886a      	ldrh	r2, [r5, #2]
 8006cec:	4291      	cmp	r1, r2
 8006cee:	d005      	beq.n	8006cfc <process_trigger+0x20>
 8006cf0:	2801      	cmp	r0, #1
 8006cf2:	d012      	beq.n	8006d1a <process_trigger+0x3e>
 8006cf4:	2802      	cmp	r0, #2
 8006cf6:	d016      	beq.n	8006d26 <process_trigger+0x4a>
 8006cf8:	882b      	ldrh	r3, [r5, #0]
 8006cfa:	806b      	strh	r3, [r5, #2]
 8006cfc:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
 8006d00:	b150      	cbz	r0, 8006d18 <process_trigger+0x3c>
 8006d02:	4d21      	ldr	r5, [pc, #132]	; (8006d88 <process_trigger+0xac>)
 8006d04:	8a29      	ldrh	r1, [r5, #16]
 8006d06:	8a6a      	ldrh	r2, [r5, #18]
 8006d08:	4291      	cmp	r1, r2
 8006d0a:	d005      	beq.n	8006d18 <process_trigger+0x3c>
 8006d0c:	2801      	cmp	r0, #1
 8006d0e:	d01e      	beq.n	8006d4e <process_trigger+0x72>
 8006d10:	2802      	cmp	r0, #2
 8006d12:	d022      	beq.n	8006d5a <process_trigger+0x7e>
 8006d14:	8a2b      	ldrh	r3, [r5, #16]
 8006d16:	826b      	strh	r3, [r5, #18]
 8006d18:	bd38      	pop	{r3, r4, r5, pc}
 8006d1a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8006d1e:	b2c9      	uxtb	r1, r1
 8006d20:	f7fd fdc6 	bl	80048b0 <set_reg>
 8006d24:	e7e8      	b.n	8006cf8 <process_trigger+0x1c>
 8006d26:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8006d2a:	4299      	cmp	r1, r3
 8006d2c:	d906      	bls.n	8006d3c <process_trigger+0x60>
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d204      	bcs.n	8006d3c <process_trigger+0x60>
 8006d32:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8006d36:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8006d3a:	e7f1      	b.n	8006d20 <process_trigger+0x44>
 8006d3c:	4299      	cmp	r1, r3
 8006d3e:	d2db      	bcs.n	8006cf8 <process_trigger+0x1c>
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d9d9      	bls.n	8006cf8 <process_trigger+0x1c>
 8006d44:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8006d48:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8006d4c:	e7e8      	b.n	8006d20 <process_trigger+0x44>
 8006d4e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8006d52:	b2c9      	uxtb	r1, r1
 8006d54:	f7fd fdac 	bl	80048b0 <set_reg>
 8006d58:	e7dc      	b.n	8006d14 <process_trigger+0x38>
 8006d5a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8006d5e:	4299      	cmp	r1, r3
 8006d60:	d906      	bls.n	8006d70 <process_trigger+0x94>
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d204      	bcs.n	8006d70 <process_trigger+0x94>
 8006d66:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
 8006d6a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8006d6e:	e7f1      	b.n	8006d54 <process_trigger+0x78>
 8006d70:	4299      	cmp	r1, r3
 8006d72:	d2cf      	bcs.n	8006d14 <process_trigger+0x38>
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d9cd      	bls.n	8006d14 <process_trigger+0x38>
 8006d78:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8006d7c:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
 8006d80:	e7e8      	b.n	8006d54 <process_trigger+0x78>
 8006d82:	bf00      	nop
 8006d84:	20000ac0 	.word	0x20000ac0
 8006d88:	20000e20 	.word	0x20000e20

08006d8c <print_adc_data>:
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d92:	4c12      	ldr	r4, [pc, #72]	; (8006ddc <print_adc_data+0x50>)
 8006d94:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8006df4 <print_adc_data+0x68>
 8006d98:	4f11      	ldr	r7, [pc, #68]	; (8006de0 <print_adc_data+0x54>)
 8006d9a:	4e12      	ldr	r6, [pc, #72]	; (8006de4 <print_adc_data+0x58>)
 8006d9c:	1c5d      	adds	r5, r3, #1
 8006d9e:	4629      	mov	r1, r5
 8006da0:	4640      	mov	r0, r8
 8006da2:	f7ff f9e1 	bl	8006168 <print>
 8006da6:	4638      	mov	r0, r7
 8006da8:	f7ff f9de 	bl	8006168 <print>
 8006dac:	8821      	ldrh	r1, [r4, #0]
 8006dae:	4630      	mov	r0, r6
 8006db0:	f7ff f9da 	bl	8006168 <print>
 8006db4:	8861      	ldrh	r1, [r4, #2]
 8006db6:	480c      	ldr	r0, [pc, #48]	; (8006de8 <print_adc_data+0x5c>)
 8006db8:	f7ff f9d6 	bl	8006168 <print>
 8006dbc:	7ba1      	ldrb	r1, [r4, #14]
 8006dbe:	480b      	ldr	r0, [pc, #44]	; (8006dec <print_adc_data+0x60>)
 8006dc0:	f7ff f9d2 	bl	8006168 <print>
 8006dc4:	480a      	ldr	r0, [pc, #40]	; (8006df0 <print_adc_data+0x64>)
 8006dc6:	f7ff f9cf 	bl	8006168 <print>
 8006dca:	2d02      	cmp	r5, #2
 8006dcc:	f104 0410 	add.w	r4, r4, #16
 8006dd0:	f04f 0301 	mov.w	r3, #1
 8006dd4:	d1e2      	bne.n	8006d9c <print_adc_data+0x10>
 8006dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000e20 	.word	0x20000e20
 8006de0:	0800a004 	.word	0x0800a004
 8006de4:	0800a560 	.word	0x0800a560
 8006de8:	0800a56c 	.word	0x0800a56c
 8006dec:	0800a57d 	.word	0x0800a57d
 8006df0:	08009fbb 	.word	0x08009fbb
 8006df4:	0800a559 	.word	0x0800a559

08006df8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006df8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	490e      	ldr	r1, [pc, #56]	; (8006e38 <MX_USB_DEVICE_Init+0x40>)
 8006dfe:	480f      	ldr	r0, [pc, #60]	; (8006e3c <MX_USB_DEVICE_Init+0x44>)
 8006e00:	f7fd f980 	bl	8004104 <USBD_Init>
 8006e04:	b108      	cbz	r0, 8006e0a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8006e06:	f7fe fcd5 	bl	80057b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e0a:	490d      	ldr	r1, [pc, #52]	; (8006e40 <MX_USB_DEVICE_Init+0x48>)
 8006e0c:	480b      	ldr	r0, [pc, #44]	; (8006e3c <MX_USB_DEVICE_Init+0x44>)
 8006e0e:	f7fd f98e 	bl	800412e <USBD_RegisterClass>
 8006e12:	b108      	cbz	r0, 8006e18 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8006e14:	f7fe fcce 	bl	80057b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e18:	490a      	ldr	r1, [pc, #40]	; (8006e44 <MX_USB_DEVICE_Init+0x4c>)
 8006e1a:	4808      	ldr	r0, [pc, #32]	; (8006e3c <MX_USB_DEVICE_Init+0x44>)
 8006e1c:	f7fd f931 	bl	8004082 <USBD_CDC_RegisterInterface>
 8006e20:	b108      	cbz	r0, 8006e26 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8006e22:	f7fe fcc7 	bl	80057b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e26:	4805      	ldr	r0, [pc, #20]	; (8006e3c <MX_USB_DEVICE_Init+0x44>)
 8006e28:	f7fd f988 	bl	800413c <USBD_Start>
 8006e2c:	b118      	cbz	r0, 8006e36 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006e32:	f7fe bcbf 	b.w	80057b4 <Error_Handler>
}
 8006e36:	bd08      	pop	{r3, pc}
 8006e38:	200001b4 	.word	0x200001b4
 8006e3c:	20000e40 	.word	0x20000e40
 8006e40:	20000008 	.word	0x20000008
 8006e44:	200001a4 	.word	0x200001a4

08006e48 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006e48:	2000      	movs	r0, #0
 8006e4a:	4770      	bx	lr

08006e4c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	4770      	bx	lr

08006e50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006e50:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  //Loopback Test
  //CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
  //Send Data to ring buffer
  if (UART_mode_USB)
 8006e52:	4b0a      	ldr	r3, [pc, #40]	; (8006e7c <CDC_Receive_FS+0x2c>)
 8006e54:	680a      	ldr	r2, [r1, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
{
 8006e58:	4604      	mov	r4, r0
	  ring_buffer_put(&rx_buff_dmx, Buf, *Len);
 8006e5a:	4601      	mov	r1, r0
  if (UART_mode_USB)
 8006e5c:	b15b      	cbz	r3, 8006e76 <CDC_Receive_FS+0x26>
	  ring_buffer_put(&rx_buff_dmx, Buf, *Len);
 8006e5e:	4808      	ldr	r0, [pc, #32]	; (8006e80 <CDC_Receive_FS+0x30>)
  else
	  ring_buffer_put(&rx_buff_shell, Buf, *Len);
 8006e60:	f7fe fdd4 	bl	8005a0c <ring_buffer_put>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006e64:	4621      	mov	r1, r4
 8006e66:	4807      	ldr	r0, [pc, #28]	; (8006e84 <CDC_Receive_FS+0x34>)
 8006e68:	f7fd f91a 	bl	80040a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006e6c:	4805      	ldr	r0, [pc, #20]	; (8006e84 <CDC_Receive_FS+0x34>)
 8006e6e:	f7fd f936 	bl	80040de <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8006e72:	2000      	movs	r0, #0
 8006e74:	bd10      	pop	{r4, pc}
	  ring_buffer_put(&rx_buff_shell, Buf, *Len);
 8006e76:	4804      	ldr	r0, [pc, #16]	; (8006e88 <CDC_Receive_FS+0x38>)
 8006e78:	e7f2      	b.n	8006e60 <CDC_Receive_FS+0x10>
 8006e7a:	bf00      	nop
 8006e7c:	20000421 	.word	0x20000421
 8006e80:	20000990 	.word	0x20000990
 8006e84:	20000e40 	.word	0x20000e40
 8006e88:	200009a8 	.word	0x200009a8

08006e8c <CDC_Init_FS>:
{
 8006e8c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e8e:	4c06      	ldr	r4, [pc, #24]	; (8006ea8 <CDC_Init_FS+0x1c>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	4906      	ldr	r1, [pc, #24]	; (8006eac <CDC_Init_FS+0x20>)
 8006e94:	4620      	mov	r0, r4
 8006e96:	f7fd f8fb 	bl	8004090 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e9a:	4905      	ldr	r1, [pc, #20]	; (8006eb0 <CDC_Init_FS+0x24>)
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f7fd f8ff 	bl	80040a0 <USBD_CDC_SetRxBuffer>
}
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	bd10      	pop	{r4, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000e40 	.word	0x20000e40
 8006eac:	200012f8 	.word	0x200012f8
 8006eb0:	20001104 	.word	0x20001104

08006eb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006eb4:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006eb6:	4c09      	ldr	r4, [pc, #36]	; (8006edc <CDC_Transmit_FS+0x28>)
{
 8006eb8:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006eba:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8006ebe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ec2:	b943      	cbnz	r3, 8006ed6 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006ec4:	4601      	mov	r1, r0
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f7fd f8e2 	bl	8004090 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006ecc:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8006ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006ed2:	f7fd b8eb 	b.w	80040ac <USBD_CDC_TransmitPacket>
}
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	bd10      	pop	{r4, pc}
 8006eda:	bf00      	nop
 8006edc:	20000e40 	.word	0x20000e40

08006ee0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ee0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8006ee2:	4b0e      	ldr	r3, [pc, #56]	; (8006f1c <HAL_PCD_MspInit+0x3c>)
 8006ee4:	6802      	ldr	r2, [r0, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d115      	bne.n	8006f16 <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006eea:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8006eee:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006ef0:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8006ef2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006ef6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006ef8:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8006efa:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006efc:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8006efe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006f06:	f7fa fac1 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006f0a:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006f0c:	b003      	add	sp, #12
 8006f0e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006f12:	f7fa baef 	b.w	80014f4 <HAL_NVIC_EnableIRQ>
}
 8006f16:	b003      	add	sp, #12
 8006f18:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f1c:	40005c00 	.word	0x40005c00

08006f20 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006f20:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8006f24:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006f28:	f7fd b91f 	b.w	800416a <USBD_LL_SetupStage>

08006f2c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006f2c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8006f30:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8006f34:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006f38:	f7fd b944 	b.w	80041c4 <USBD_LL_DataOutStage>

08006f3c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006f3c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8006f40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f42:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006f46:	f7fd b977 	b.w	8004238 <USBD_LL_DataInStage>

08006f4a <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006f4a:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006f4e:	f7fd ba0b 	b.w	8004368 <USBD_LL_SOF>

08006f52 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006f52:	6883      	ldr	r3, [r0, #8]
{ 
 8006f54:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006f56:	2b02      	cmp	r3, #2
{ 
 8006f58:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006f5a:	d001      	beq.n	8006f60 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8006f5c:	f7fe fc2a 	bl	80057b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006f60:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8006f64:	2101      	movs	r1, #1
 8006f66:	f7fd f9e9 	bl	800433c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f6a:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8006f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f72:	f7fd b9bc 	b.w	80042ee <USBD_LL_Reset>
	...

08006f78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006f7c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006f80:	f7fd f9df 	bl	8004342 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f84:	69a3      	ldr	r3, [r4, #24]
 8006f86:	b123      	cbz	r3, 8006f92 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f88:	4a02      	ldr	r2, [pc, #8]	; (8006f94 <HAL_PCD_SuspendCallback+0x1c>)
 8006f8a:	6913      	ldr	r3, [r2, #16]
 8006f8c:	f043 0306 	orr.w	r3, r3, #6
 8006f90:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f92:	bd10      	pop	{r4, pc}
 8006f94:	e000ed00 	.word	0xe000ed00

08006f98 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f98:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006f9c:	f7fd b9da 	b.w	8004354 <USBD_LL_Resume>

08006fa0 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006fa0:	2308      	movs	r3, #8
{
 8006fa2:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006fa4:	4a1d      	ldr	r2, [pc, #116]	; (800701c <USBD_LL_Init+0x7c>)
{
 8006fa6:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8006fa8:	481d      	ldr	r0, [pc, #116]	; (8007020 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006faa:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006fae:	2302      	movs	r3, #2
 8006fb0:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006fb2:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8006fb4:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.pData = pdev;
 8006fb8:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006fbc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006fc0:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006fc2:	f7fa fe1e 	bl	8001c02 <HAL_PCD_Init>
 8006fc6:	b108      	cbz	r0, 8006fcc <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8006fc8:	f7fe fbf4 	bl	80057b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2318      	movs	r3, #24
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006fd6:	f7fb f9c2 	bl	800235e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006fda:	2358      	movs	r3, #88	; 0x58
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2180      	movs	r1, #128	; 0x80
 8006fe0:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006fe4:	f7fb f9bb 	bl	800235e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006fe8:	23c0      	movs	r3, #192	; 0xc0
 8006fea:	2200      	movs	r2, #0
 8006fec:	2181      	movs	r1, #129	; 0x81
 8006fee:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006ff2:	f7fb f9b4 	bl	800235e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006ff6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8007002:	f7fb f9ac 	bl	800235e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800700a:	2200      	movs	r2, #0
 800700c:	2182      	movs	r1, #130	; 0x82
 800700e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8007012:	f7fb f9a4 	bl	800235e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8007016:	2000      	movs	r0, #0
 8007018:	bd10      	pop	{r4, pc}
 800701a:	bf00      	nop
 800701c:	40005c00 	.word	0x40005c00
 8007020:	200014ec 	.word	0x200014ec

08007024 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007024:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007026:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800702a:	f7fa fe5f 	bl	8001cec <HAL_PCD_Start>
 800702e:	2803      	cmp	r0, #3
 8007030:	bf96      	itet	ls
 8007032:	4b02      	ldrls	r3, [pc, #8]	; (800703c <USBD_LL_Start+0x18>)
 8007034:	2002      	movhi	r0, #2
 8007036:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8007038:	bd08      	pop	{r3, pc}
 800703a:	bf00      	nop
 800703c:	0800a58c 	.word	0x0800a58c

08007040 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007040:	b510      	push	{r4, lr}
 8007042:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007044:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007048:	4613      	mov	r3, r2
 800704a:	4622      	mov	r2, r4
 800704c:	f7fa fe79 	bl	8001d42 <HAL_PCD_EP_Open>
 8007050:	2803      	cmp	r0, #3
 8007052:	bf96      	itet	ls
 8007054:	4b01      	ldrls	r3, [pc, #4]	; (800705c <USBD_LL_OpenEP+0x1c>)
 8007056:	2002      	movhi	r0, #2
 8007058:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 800705a:	bd10      	pop	{r4, pc}
 800705c:	0800a58c 	.word	0x0800a58c

08007060 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007060:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007062:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007066:	f7fa fe9f 	bl	8001da8 <HAL_PCD_EP_Close>
 800706a:	2803      	cmp	r0, #3
 800706c:	bf96      	itet	ls
 800706e:	4b02      	ldrls	r3, [pc, #8]	; (8007078 <USBD_LL_CloseEP+0x18>)
 8007070:	2002      	movhi	r0, #2
 8007072:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8007074:	bd08      	pop	{r3, pc}
 8007076:	bf00      	nop
 8007078:	0800a58c 	.word	0x0800a58c

0800707c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800707c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800707e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007082:	f7fb f905 	bl	8002290 <HAL_PCD_EP_SetStall>
 8007086:	2803      	cmp	r0, #3
 8007088:	bf96      	itet	ls
 800708a:	4b02      	ldrls	r3, [pc, #8]	; (8007094 <USBD_LL_StallEP+0x18>)
 800708c:	2002      	movhi	r0, #2
 800708e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8007090:	bd08      	pop	{r3, pc}
 8007092:	bf00      	nop
 8007094:	0800a58c 	.word	0x0800a58c

08007098 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007098:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800709a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800709e:	f7fb f92b 	bl	80022f8 <HAL_PCD_EP_ClrStall>
 80070a2:	2803      	cmp	r0, #3
 80070a4:	bf96      	itet	ls
 80070a6:	4b02      	ldrls	r3, [pc, #8]	; (80070b0 <USBD_LL_ClearStallEP+0x18>)
 80070a8:	2002      	movhi	r0, #2
 80070aa:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 80070ac:	bd08      	pop	{r3, pc}
 80070ae:	bf00      	nop
 80070b0:	0800a58c 	.word	0x0800a58c

080070b4 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 80070b4:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80070b6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80070ba:	bf45      	ittet	mi
 80070bc:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 80070c0:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80070c4:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80070c8:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80070cc:	bf58      	it	pl
 80070ce:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 80070d2:	4770      	bx	lr

080070d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80070d4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80070d6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80070da:	f7fa fe1e 	bl	8001d1a <HAL_PCD_SetAddress>
 80070de:	2803      	cmp	r0, #3
 80070e0:	bf96      	itet	ls
 80070e2:	4b02      	ldrls	r3, [pc, #8]	; (80070ec <USBD_LL_SetUSBAddress+0x18>)
 80070e4:	2002      	movhi	r0, #2
 80070e6:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 80070e8:	bd08      	pop	{r3, pc}
 80070ea:	bf00      	nop
 80070ec:	0800a58c 	.word	0x0800a58c

080070f0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80070f0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80070f2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80070f6:	f7fa fe9f 	bl	8001e38 <HAL_PCD_EP_Transmit>
 80070fa:	2803      	cmp	r0, #3
 80070fc:	bf96      	itet	ls
 80070fe:	4b02      	ldrls	r3, [pc, #8]	; (8007108 <USBD_LL_Transmit+0x18>)
 8007100:	2002      	movhi	r0, #2
 8007102:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8007104:	bd08      	pop	{r3, pc}
 8007106:	bf00      	nop
 8007108:	0800a58c 	.word	0x0800a58c

0800710c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800710c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800710e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007112:	f7fa fe72 	bl	8001dfa <HAL_PCD_EP_Receive>
 8007116:	2803      	cmp	r0, #3
 8007118:	bf96      	itet	ls
 800711a:	4b02      	ldrls	r3, [pc, #8]	; (8007124 <USBD_LL_PrepareReceive+0x18>)
 800711c:	2002      	movhi	r0, #2
 800711e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8007120:	bd08      	pop	{r3, pc}
 8007122:	bf00      	nop
 8007124:	0800a58c 	.word	0x0800a58c

08007128 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007128:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800712c:	f7fa be7d 	b.w	8001e2a <HAL_PCD_EP_GetRxCount>

08007130 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8007130:	4800      	ldr	r0, [pc, #0]	; (8007134 <USBD_static_malloc+0x4>)
 8007132:	4770      	bx	lr
 8007134:	20000700 	.word	0x20000700

08007138 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8007138:	4770      	bx	lr

0800713a <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800713a:	4770      	bx	lr

0800713c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800713c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800713e:	4801      	ldr	r0, [pc, #4]	; (8007144 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8007140:	800b      	strh	r3, [r1, #0]
}
 8007142:	4770      	bx	lr
 8007144:	200001d0 	.word	0x200001d0

08007148 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007148:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800714a:	4801      	ldr	r0, [pc, #4]	; (8007150 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800714c:	800b      	strh	r3, [r1, #0]
}
 800714e:	4770      	bx	lr
 8007150:	200001e4 	.word	0x200001e4

08007154 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007154:	2300      	movs	r3, #0
 8007156:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8007158:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 800715a:	0f05      	lsrs	r5, r0, #28
 800715c:	b2ec      	uxtb	r4, r5
 800715e:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007160:	bf94      	ite	ls
 8007162:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007164:	3437      	addhi	r4, #55	; 0x37
 8007166:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800716a:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 800716e:	3301      	adds	r3, #1
 8007170:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 8007172:	b2dc      	uxtb	r4, r3
 8007174:	42a2      	cmp	r2, r4
    value = value << 4;
 8007176:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800717a:	d8ee      	bhi.n	800715a <IntToUnicode+0x6>
  }
}
 800717c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007180 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8007180:	231a      	movs	r3, #26
{
 8007182:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8007184:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007186:	4b09      	ldr	r3, [pc, #36]	; (80071ac <USBD_FS_SerialStrDescriptor+0x2c>)
 8007188:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800718a:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800718c:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800718e:	18c0      	adds	r0, r0, r3
 8007190:	d00a      	beq.n	80071a8 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007192:	4b07      	ldr	r3, [pc, #28]	; (80071b0 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007194:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007196:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007198:	4906      	ldr	r1, [pc, #24]	; (80071b4 <USBD_FS_SerialStrDescriptor+0x34>)
 800719a:	f7ff ffdb 	bl	8007154 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800719e:	2204      	movs	r2, #4
 80071a0:	4905      	ldr	r1, [pc, #20]	; (80071b8 <USBD_FS_SerialStrDescriptor+0x38>)
 80071a2:	4620      	mov	r0, r4
 80071a4:	f7ff ffd6 	bl	8007154 <IntToUnicode>
}
 80071a8:	4804      	ldr	r0, [pc, #16]	; (80071bc <USBD_FS_SerialStrDescriptor+0x3c>)
 80071aa:	bd10      	pop	{r4, pc}
 80071ac:	1ffff7e8 	.word	0x1ffff7e8
 80071b0:	1ffff7ec 	.word	0x1ffff7ec
 80071b4:	200001ea 	.word	0x200001ea
 80071b8:	200001fa 	.word	0x200001fa
 80071bc:	200001e8 	.word	0x200001e8

080071c0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80071c0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071c2:	4c04      	ldr	r4, [pc, #16]	; (80071d4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80071c4:	460a      	mov	r2, r1
 80071c6:	4804      	ldr	r0, [pc, #16]	; (80071d8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80071c8:	4621      	mov	r1, r4
 80071ca:	f7fd fad6 	bl	800477a <USBD_GetString>
}
 80071ce:	4620      	mov	r0, r4
 80071d0:	bd10      	pop	{r4, pc}
 80071d2:	bf00      	nop
 80071d4:	20001758 	.word	0x20001758
 80071d8:	0800a5a9 	.word	0x0800a5a9

080071dc <USBD_FS_ProductStrDescriptor>:
{
 80071dc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071de:	4c04      	ldr	r4, [pc, #16]	; (80071f0 <USBD_FS_ProductStrDescriptor+0x14>)
 80071e0:	460a      	mov	r2, r1
 80071e2:	4804      	ldr	r0, [pc, #16]	; (80071f4 <USBD_FS_ProductStrDescriptor+0x18>)
 80071e4:	4621      	mov	r1, r4
 80071e6:	f7fd fac8 	bl	800477a <USBD_GetString>
}
 80071ea:	4620      	mov	r0, r4
 80071ec:	bd10      	pop	{r4, pc}
 80071ee:	bf00      	nop
 80071f0:	20001758 	.word	0x20001758
 80071f4:	0800a5bc 	.word	0x0800a5bc

080071f8 <USBD_FS_ConfigStrDescriptor>:
{
 80071f8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071fa:	4c04      	ldr	r4, [pc, #16]	; (800720c <USBD_FS_ConfigStrDescriptor+0x14>)
 80071fc:	460a      	mov	r2, r1
 80071fe:	4804      	ldr	r0, [pc, #16]	; (8007210 <USBD_FS_ConfigStrDescriptor+0x18>)
 8007200:	4621      	mov	r1, r4
 8007202:	f7fd faba 	bl	800477a <USBD_GetString>
}
 8007206:	4620      	mov	r0, r4
 8007208:	bd10      	pop	{r4, pc}
 800720a:	bf00      	nop
 800720c:	20001758 	.word	0x20001758
 8007210:	0800a590 	.word	0x0800a590

08007214 <USBD_FS_InterfaceStrDescriptor>:
{
 8007214:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007216:	4c04      	ldr	r4, [pc, #16]	; (8007228 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8007218:	460a      	mov	r2, r1
 800721a:	4804      	ldr	r0, [pc, #16]	; (800722c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800721c:	4621      	mov	r1, r4
 800721e:	f7fd faac 	bl	800477a <USBD_GetString>
}
 8007222:	4620      	mov	r0, r4
 8007224:	bd10      	pop	{r4, pc}
 8007226:	bf00      	nop
 8007228:	20001758 	.word	0x20001758
 800722c:	0800a59b 	.word	0x0800a59b

08007230 <vt100_process_byte>:
    
    return VT100_KEY_INVALID;
}

vt100_key_t vt100_process_byte(uint8_t byte)
{
 8007230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    static uint8_t cbuf[8] = {0};
    static uint8_t cbuf_idx = 0;
    
    if (0 == cbuf_idx && true == is_printable(byte))
 8007234:	4d1c      	ldr	r5, [pc, #112]	; (80072a8 <vt100_process_byte+0x78>)
 8007236:	782b      	ldrb	r3, [r5, #0]
 8007238:	b91b      	cbnz	r3, 8007242 <vt100_process_byte+0x12>
 800723a:	f1a0 0220 	sub.w	r2, r0, #32
 800723e:	2a5e      	cmp	r2, #94	; 0x5e
 8007240:	d92e      	bls.n	80072a0 <vt100_process_byte+0x70>
    {
        return VT100_KEY_PRINTABLE;
    }
    else if (0x0D == byte) /* Enter */
 8007242:	280d      	cmp	r0, #13
 8007244:	d02e      	beq.n	80072a4 <vt100_process_byte+0x74>
        return VT100_KEY_ENTER;
    }
    else
    {
        vt100_key_t key = VT100_KEY_INVALID;
        cbuf[cbuf_idx++] = byte;
 8007246:	4c19      	ldr	r4, [pc, #100]	; (80072ac <vt100_process_byte+0x7c>)
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8007248:	2700      	movs	r7, #0
 800724a:	f04f 0a0c 	mov.w	sl, #12
            (0 == strncmp((const char*)vt100_keycodes[ii].code, (const char*)buf, len)))
 800724e:	46a3      	mov	fp, r4
        cbuf[cbuf_idx++] = byte;
 8007250:	1c5e      	adds	r6, r3, #1
 8007252:	b2f6      	uxtb	r6, r6
 8007254:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80072b0 <vt100_process_byte+0x80>
 8007258:	702e      	strb	r6, [r5, #0]
 800725a:	54e0      	strb	r0, [r4, r3]
 800725c:	fb0a 9807 	mla	r8, sl, r7, r9
        if ((len == vt100_keycodes[ii].code_len) &&
 8007260:	f898 3008 	ldrb.w	r3, [r8, #8]
 8007264:	42b3      	cmp	r3, r6
 8007266:	d112      	bne.n	800728e <vt100_process_byte+0x5e>
            (0 == strncmp((const char*)vt100_keycodes[ii].code, (const char*)buf, len)))
 8007268:	4632      	mov	r2, r6
 800726a:	4659      	mov	r1, fp
 800726c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007270:	f000 fdcd 	bl	8007e0e <strncmp>
        if ((len == vt100_keycodes[ii].code_len) &&
 8007274:	4603      	mov	r3, r0
 8007276:	b950      	cbnz	r0, 800728e <vt100_process_byte+0x5e>
            return vt100_keycodes[ii].key;
 8007278:	f898 0000 	ldrb.w	r0, [r8]
        key = find_key(cbuf, cbuf_idx);
        if (VT100_KEY_INVALID != key)
 800727c:	b958      	cbnz	r0, 8007296 <vt100_process_byte+0x66>
            memset(cbuf, 0, sizeof(cbuf));
            return key;
        }
        else
        {
            if (cbuf_idx >= sizeof(cbuf))
 800727e:	2e07      	cmp	r6, #7
 8007280:	f04f 0000 	mov.w	r0, #0
 8007284:	d90a      	bls.n	800729c <vt100_process_byte+0x6c>
            {
                cbuf_idx = 0;
 8007286:	7028      	strb	r0, [r5, #0]
                memset(cbuf, 0, sizeof(cbuf));
 8007288:	6020      	str	r0, [r4, #0]
 800728a:	6060      	str	r0, [r4, #4]
 800728c:	e006      	b.n	800729c <vt100_process_byte+0x6c>
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 800728e:	3701      	adds	r7, #1
 8007290:	2f0f      	cmp	r7, #15
 8007292:	d1e3      	bne.n	800725c <vt100_process_byte+0x2c>
 8007294:	e7f3      	b.n	800727e <vt100_process_byte+0x4e>
            cbuf_idx = 0;
 8007296:	702b      	strb	r3, [r5, #0]
            memset(cbuf, 0, sizeof(cbuf));
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	6063      	str	r3, [r4, #4]
            }
        }
    }

    return VT100_KEY_INVALID;
}
 800729c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return VT100_KEY_PRINTABLE;
 80072a0:	2001      	movs	r0, #1
 80072a2:	e7fb      	b.n	800729c <vt100_process_byte+0x6c>
        return VT100_KEY_ENTER;
 80072a4:	2008      	movs	r0, #8
 80072a6:	e7f9      	b.n	800729c <vt100_process_byte+0x6c>
 80072a8:	20000928 	.word	0x20000928
 80072ac:	20000920 	.word	0x20000920
 80072b0:	0800a5ec 	.word	0x0800a5ec

080072b4 <vt100_get_keycode>:

vt100_keycode_t * vt100_get_keycode(vt100_key_t key)
{
    if (key >= VT100_KEY_MAX) return NULL;
 80072b4:	280e      	cmp	r0, #14
{
 80072b6:	b530      	push	{r4, r5, lr}
    if (key >= VT100_KEY_MAX) return NULL;
 80072b8:	d80c      	bhi.n	80072d4 <vt100_get_keycode+0x20>
    
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 80072ba:	2200      	movs	r2, #0
 80072bc:	240c      	movs	r4, #12
    {
        if (vt100_keycodes[ii].key == key)
 80072be:	4b06      	ldr	r3, [pc, #24]	; (80072d8 <vt100_get_keycode+0x24>)
 80072c0:	fb04 f102 	mul.w	r1, r4, r2
 80072c4:	5ccd      	ldrb	r5, [r1, r3]
 80072c6:	4285      	cmp	r5, r0
 80072c8:	d101      	bne.n	80072ce <vt100_get_keycode+0x1a>
        {
            return (vt100_keycode_t*)&vt100_keycodes[ii];
 80072ca:	1858      	adds	r0, r3, r1
        }
    }
    
    return NULL;
}
 80072cc:	bd30      	pop	{r4, r5, pc}
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 80072ce:	3201      	adds	r2, #1
 80072d0:	2a0f      	cmp	r2, #15
 80072d2:	d1f5      	bne.n	80072c0 <vt100_get_keycode+0xc>
    if (key >= VT100_KEY_MAX) return NULL;
 80072d4:	2000      	movs	r0, #0
 80072d6:	e7f9      	b.n	80072cc <vt100_get_keycode+0x18>
 80072d8:	0800a5ec 	.word	0x0800a5ec

080072dc <fx_pwm_pulsing_light_run>:
t_fx_result fx_pwm_pulsing_light_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
	uint8_t ii = 0;
	int16_t val;

	switch(state)
 80072dc:	2801      	cmp	r0, #1
{
 80072de:	b570      	push	{r4, r5, r6, lr}
	switch(state)
 80072e0:	d00b      	beq.n	80072fa <fx_pwm_pulsing_light_run+0x1e>
 80072e2:	d303      	bcc.n	80072ec <fx_pwm_pulsing_light_run+0x10>
 80072e4:	2802      	cmp	r0, #2
 80072e6:	d029      	beq.n	800733c <fx_pwm_pulsing_light_run+0x60>
				set_pwm_light(ii, 0);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 80072e8:	2003      	movs	r0, #3
 80072ea:	e005      	b.n	80072f8 <fx_pwm_pulsing_light_run+0x1c>
			data = 0;
 80072ec:	2400      	movs	r4, #0
 80072ee:	4b18      	ldr	r3, [pc, #96]	; (8007350 <fx_pwm_pulsing_light_run+0x74>)
 80072f0:	701c      	strb	r4, [r3, #0]
			reset_frame_delay();
 80072f2:	f000 fa57 	bl	80077a4 <reset_frame_delay>
			return FX_OK;
 80072f6:	4620      	mov	r0, r4
}
 80072f8:	bd70      	pop	{r4, r5, r6, pc}
				val = data + get_DMX_variable(DMX_STRIP1_COMPLEXITY);
 80072fa:	4c15      	ldr	r4, [pc, #84]	; (8007350 <fx_pwm_pulsing_light_run+0x74>)
 80072fc:	200f      	movs	r0, #15
 80072fe:	7825      	ldrb	r5, [r4, #0]
 8007300:	f000 fa72 	bl	80077e8 <get_DMX_variable>
 8007304:	4428      	add	r0, r5
				if (val>255)
 8007306:	b283      	uxth	r3, r0
 8007308:	2bff      	cmp	r3, #255	; 0xff
					data = 255;
 800730a:	bf8c      	ite	hi
 800730c:	23ff      	movhi	r3, #255	; 0xff
					data = val;
 800730e:	7020      	strbls	r0, [r4, #0]
			val = get_DMX_variable(DMX_STRIP1_SIZE);
 8007310:	f04f 000e 	mov.w	r0, #14
					data = 255;
 8007314:	bf88      	it	hi
 8007316:	7023      	strbhi	r3, [r4, #0]
			val = get_DMX_variable(DMX_STRIP1_SIZE);
 8007318:	f000 fa66 	bl	80077e8 <get_DMX_variable>
 800731c:	b205      	sxth	r5, r0
 800731e:	2d09      	cmp	r5, #9
 8007320:	bfa8      	it	ge
 8007322:	2509      	movge	r5, #9
 8007324:	2600      	movs	r6, #0
 8007326:	b2f0      	uxtb	r0, r6
			for (ii=0;ii<val+1;ii++)
 8007328:	4285      	cmp	r5, r0
 800732a:	f106 0601 	add.w	r6, r6, #1
 800732e:	da01      	bge.n	8007334 <fx_pwm_pulsing_light_run+0x58>
 8007330:	2002      	movs	r0, #2
 8007332:	e7e1      	b.n	80072f8 <fx_pwm_pulsing_light_run+0x1c>
				set_pwm_light(ii, data);
 8007334:	7821      	ldrb	r1, [r4, #0]
 8007336:	f000 fa54 	bl	80077e2 <set_pwm_light>
 800733a:	e7f4      	b.n	8007326 <fx_pwm_pulsing_light_run+0x4a>
	switch(state)
 800733c:	2400      	movs	r4, #0
				set_pwm_light(ii, 0);
 800733e:	b2e0      	uxtb	r0, r4
 8007340:	2100      	movs	r1, #0
 8007342:	3401      	adds	r4, #1
 8007344:	f000 fa4d 	bl	80077e2 <set_pwm_light>
			for (ii=0;ii<10;ii++)
 8007348:	2c0a      	cmp	r4, #10
 800734a:	d1f8      	bne.n	800733e <fx_pwm_pulsing_light_run+0x62>
			return FX_COMPLETED;
 800734c:	2001      	movs	r0, #1
 800734e:	e7d3      	b.n	80072f8 <fx_pwm_pulsing_light_run+0x1c>
 8007350:	20001958 	.word	0x20001958

08007354 <fx_pwm_pulsing_light>:
	register_fx(&param1,fx_num);
 8007354:	4601      	mov	r1, r0
 8007356:	4801      	ldr	r0, [pc, #4]	; (800735c <fx_pwm_pulsing_light+0x8>)
 8007358:	f7fd bc26 	b.w	8004ba8 <register_fx>
 800735c:	0800a6a0 	.word	0x0800a6a0

08007360 <fx_pwm_pulsing_pulse_light>:
	register_fx(&param2,fx_num);
 8007360:	4601      	mov	r1, r0
 8007362:	4801      	ldr	r0, [pc, #4]	; (8007368 <fx_pwm_pulsing_pulse_light+0x8>)
 8007364:	f7fd bc20 	b.w	8004ba8 <register_fx>
 8007368:	0800a6b4 	.word	0x0800a6b4

0800736c <fx_pwm_running_light_run>:
t_fx_result fx_pwm_running_light_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
	uint8_t ii = 0;
	int16_t val;

	switch(state)
 800736c:	2801      	cmp	r0, #1
{
 800736e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(state)
 8007370:	d012      	beq.n	8007398 <fx_pwm_running_light_run+0x2c>
 8007372:	d303      	bcc.n	800737c <fx_pwm_running_light_run+0x10>
 8007374:	2802      	cmp	r0, #2
 8007376:	d051      	beq.n	800741c <fx_pwm_running_light_run+0xb0>
			free(data);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 8007378:	2003      	movs	r0, #3
 800737a:	e00c      	b.n	8007396 <fx_pwm_running_light_run+0x2a>
			data = malloc(11);
 800737c:	200b      	movs	r0, #11
 800737e:	f000 fc4f 	bl	8007c20 <malloc>
			memset(data, 0, 11);
 8007382:	2400      	movs	r4, #0
			data = malloc(11);
 8007384:	4b28      	ldr	r3, [pc, #160]	; (8007428 <fx_pwm_running_light_run+0xbc>)
			memset(data, 0, 11);
 8007386:	e9c0 4400 	strd	r4, r4, [r0]
 800738a:	f8c0 4007 	str.w	r4, [r0, #7]
			data = malloc(11);
 800738e:	6018      	str	r0, [r3, #0]
			reset_frame_delay();
 8007390:	f000 fa08 	bl	80077a4 <reset_frame_delay>
			return FX_OK;
 8007394:	4620      	mov	r0, r4
}
 8007396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (!check_frame_delay(get_DMX_variable(DMX_STRIP1_SPEED))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 8007398:	200d      	movs	r0, #13
 800739a:	f000 fa25 	bl	80077e8 <get_DMX_variable>
 800739e:	f000 fa07 	bl	80077b0 <check_frame_delay>
 80073a2:	b908      	cbnz	r0, 80073a8 <fx_pwm_running_light_run+0x3c>
				return FX_RUNNING;
 80073a4:	2002      	movs	r0, #2
 80073a6:	e7f6      	b.n	8007396 <fx_pwm_running_light_run+0x2a>
				val = data[ii] - (255 - get_DMX_variable(DMX_STRIP1_COMPLEXITY));
 80073a8:	4e1f      	ldr	r6, [pc, #124]	; (8007428 <fx_pwm_running_light_run+0xbc>)
 80073aa:	2700      	movs	r7, #0
 80073ac:	4635      	mov	r5, r6
 80073ae:	6833      	ldr	r3, [r6, #0]
 80073b0:	200f      	movs	r0, #15
 80073b2:	5ddc      	ldrb	r4, [r3, r7]
 80073b4:	f000 fa18 	bl	80077e8 <get_DMX_variable>
 80073b8:	38ff      	subs	r0, #255	; 0xff
 80073ba:	4404      	add	r4, r0
 80073bc:	b224      	sxth	r4, r4
				data[ii] = (uint8_t)val;
 80073be:	6833      	ldr	r3, [r6, #0]
 80073c0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80073c4:	55dc      	strb	r4, [r3, r7]
 80073c6:	3701      	adds	r7, #1
			for (ii=0;ii<10;ii++)
 80073c8:	2f0a      	cmp	r7, #10
 80073ca:	d1f0      	bne.n	80073ae <fx_pwm_running_light_run+0x42>
			ii = get_DMX_variable(DMX_STRIP1_SIZE);
 80073cc:	200e      	movs	r0, #14
 80073ce:	f000 fa0b 	bl	80077e8 <get_DMX_variable>
 80073d2:	2809      	cmp	r0, #9
 80073d4:	bf28      	it	cs
 80073d6:	2009      	movcs	r0, #9
 80073d8:	b2c4      	uxtb	r4, r0
			if (get_DMX_variable(DMX_STRIP1_PATTERN))	//Reverse
 80073da:	200c      	movs	r0, #12
 80073dc:	f000 fa04 	bl	80077e8 <get_DMX_variable>
				if (data[10] == 0)
 80073e0:	6833      	ldr	r3, [r6, #0]
 80073e2:	7a9a      	ldrb	r2, [r3, #10]
			if (get_DMX_variable(DMX_STRIP1_PATTERN))	//Reverse
 80073e4:	b198      	cbz	r0, 800740e <fx_pwm_running_light_run+0xa2>
				if (data[10] == 0)
 80073e6:	b90a      	cbnz	r2, 80073ec <fx_pwm_running_light_run+0x80>
					data[10] = ii + 1;
 80073e8:	3401      	adds	r4, #1
 80073ea:	729c      	strb	r4, [r3, #10]
				data[10]--;
 80073ec:	7a9a      	ldrb	r2, [r3, #10]
 80073ee:	3a01      	subs	r2, #1
			data[data[10]] = 255;
 80073f0:	21ff      	movs	r1, #255	; 0xff
 80073f2:	2400      	movs	r4, #0
				data[10]++;
 80073f4:	729a      	strb	r2, [r3, #10]
			data[data[10]] = 255;
 80073f6:	682b      	ldr	r3, [r5, #0]
 80073f8:	7a9a      	ldrb	r2, [r3, #10]
 80073fa:	5499      	strb	r1, [r3, r2]
				set_pwm_light(ii, data[ii]);
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	b2e0      	uxtb	r0, r4
 8007400:	5d19      	ldrb	r1, [r3, r4]
 8007402:	3401      	adds	r4, #1
 8007404:	f000 f9ed 	bl	80077e2 <set_pwm_light>
			for (ii=0;ii<10;ii++)
 8007408:	2c0a      	cmp	r4, #10
 800740a:	d1f7      	bne.n	80073fc <fx_pwm_running_light_run+0x90>
 800740c:	e7ca      	b.n	80073a4 <fx_pwm_running_light_run+0x38>
				if (data[10] == ii)
 800740e:	42a2      	cmp	r2, r4
					data[10] = 255;
 8007410:	bf04      	itt	eq
 8007412:	22ff      	moveq	r2, #255	; 0xff
 8007414:	729a      	strbeq	r2, [r3, #10]
				data[10]++;
 8007416:	7a9a      	ldrb	r2, [r3, #10]
 8007418:	3201      	adds	r2, #1
 800741a:	e7e9      	b.n	80073f0 <fx_pwm_running_light_run+0x84>
			free(data);
 800741c:	4b02      	ldr	r3, [pc, #8]	; (8007428 <fx_pwm_running_light_run+0xbc>)
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	f000 fc06 	bl	8007c30 <free>
			return FX_COMPLETED;
 8007424:	2001      	movs	r0, #1
 8007426:	e7b6      	b.n	8007396 <fx_pwm_running_light_run+0x2a>
 8007428:	20001958 	.word	0x20001958

0800742c <fx_pwm_running_light>:
	register_fx(&param1, fx_num);
 800742c:	4601      	mov	r1, r0
 800742e:	4801      	ldr	r0, [pc, #4]	; (8007434 <fx_pwm_running_light+0x8>)
 8007430:	f7fd bbba 	b.w	8004ba8 <register_fx>
 8007434:	0800a6c8 	.word	0x0800a6c8

08007438 <fx_pwm_running_pulse_light>:
	register_fx(&param2, fx_num);
 8007438:	4601      	mov	r1, r0
 800743a:	4801      	ldr	r0, [pc, #4]	; (8007440 <fx_pwm_running_pulse_light+0x8>)
 800743c:	f7fd bbb4 	b.w	8004ba8 <register_fx>
 8007440:	0800a6dc 	.word	0x0800a6dc
 8007444:	00000000 	.word	0x00000000

08007448 <fx_strip_cylon_run>:
	static uint16_t pos = 0;
	static t_rgb_buf buf;
	double res;
	uint16_t poscalc;

	switch(state)
 8007448:	2801      	cmp	r0, #1
{
 800744a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch(state)
 800744c:	d015      	beq.n	800747a <fx_strip_cylon_run+0x32>
 800744e:	d303      	bcc.n	8007458 <fx_strip_cylon_run+0x10>
 8007450:	2802      	cmp	r0, #2
 8007452:	d075      	beq.n	8007540 <fx_strip_cylon_run+0xf8>
			destroy_rgb_buffer(&buf);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 8007454:	2003      	movs	r0, #3
 8007456:	e00e      	b.n	8007476 <fx_strip_cylon_run+0x2e>
			last_ms = millisec();
 8007458:	f000 f9c8 	bl	80077ec <millisec>
 800745c:	4b40      	ldr	r3, [pc, #256]	; (8007560 <fx_strip_cylon_run+0x118>)
 800745e:	6018      	str	r0, [r3, #0]
			if (0 ==create_rgb_buffer(&buf, WS2812B_numPixels(CH1)))
 8007460:	2000      	movs	r0, #0
 8007462:	f000 fa8f 	bl	8007984 <WS2812B_numPixels>
 8007466:	4601      	mov	r1, r0
 8007468:	483e      	ldr	r0, [pc, #248]	; (8007564 <fx_strip_cylon_run+0x11c>)
 800746a:	f000 f9c1 	bl	80077f0 <create_rgb_buffer>
 800746e:	2800      	cmp	r0, #0
			return FX_OK;
 8007470:	bf0c      	ite	eq
 8007472:	2003      	moveq	r0, #3
 8007474:	2000      	movne	r0, #0
}
 8007476:	b003      	add	sp, #12
 8007478:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if ((millisec() - last_ms) < get_DMX_variable(DMX_STRIP1_SPEED))
 800747a:	f000 f9b7 	bl	80077ec <millisec>
 800747e:	4d38      	ldr	r5, [pc, #224]	; (8007560 <fx_strip_cylon_run+0x118>)
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	1ac4      	subs	r4, r0, r3
 8007484:	200d      	movs	r0, #13
 8007486:	f000 f9af 	bl	80077e8 <get_DMX_variable>
 800748a:	4284      	cmp	r4, r0
 800748c:	d356      	bcc.n	800753c <fx_strip_cylon_run+0xf4>
			last_ms = millisec();
 800748e:	f000 f9ad 	bl	80077ec <millisec>
 8007492:	6028      	str	r0, [r5, #0]
			fade_rgb_buf(&buf,get_DMX_variable(DMX_STRIP1_SIZE));
 8007494:	200e      	movs	r0, #14
 8007496:	f000 f9a7 	bl	80077e8 <get_DMX_variable>
			res = sin (pos*PI/180);
 800749a:	4e33      	ldr	r6, [pc, #204]	; (8007568 <fx_strip_cylon_run+0x120>)
			fade_rgb_buf(&buf,get_DMX_variable(DMX_STRIP1_SIZE));
 800749c:	4601      	mov	r1, r0
 800749e:	4831      	ldr	r0, [pc, #196]	; (8007564 <fx_strip_cylon_run+0x11c>)
 80074a0:	f000 f9e1 	bl	8007866 <fade_rgb_buf>
			res = sin (pos*PI/180);
 80074a4:	8830      	ldrh	r0, [r6, #0]
 80074a6:	f7f8 ffad 	bl	8000404 <__aeabi_i2d>
 80074aa:	a32b      	add	r3, pc, #172	; (adr r3, 8007558 <fx_strip_cylon_run+0x110>)
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f7f9 f812 	bl	80004d8 <__aeabi_dmul>
 80074b4:	2200      	movs	r2, #0
 80074b6:	4b2d      	ldr	r3, [pc, #180]	; (800756c <fx_strip_cylon_run+0x124>)
 80074b8:	f7f9 f938 	bl	800072c <__aeabi_ddiv>
 80074bc:	f001 f942 	bl	8008744 <sin>
 80074c0:	4604      	mov	r4, r0
			pos = pos + get_DMX_variable(DMX_STRIP1_COMPLEXITY);
 80074c2:	200f      	movs	r0, #15
			res = sin (pos*PI/180);
 80074c4:	460d      	mov	r5, r1
			pos = pos + get_DMX_variable(DMX_STRIP1_COMPLEXITY);
 80074c6:	f000 f98f 	bl	80077e8 <get_DMX_variable>
 80074ca:	8833      	ldrh	r3, [r6, #0]
 80074cc:	4418      	add	r0, r3
 80074ce:	b280      	uxth	r0, r0
			if (pos>360)
 80074d0:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
				pos = pos - 360;
 80074d4:	bf88      	it	hi
 80074d6:	f5a0 70b4 	subhi.w	r0, r0, #360	; 0x168
 80074da:	8030      	strh	r0, [r6, #0]
			res = res * (double)WS2812B_numPixels(CH1)/2;
 80074dc:	2000      	movs	r0, #0
 80074de:	f000 fa51 	bl	8007984 <WS2812B_numPixels>
 80074e2:	f7f8 ff7f 	bl	80003e4 <__aeabi_ui2d>
 80074e6:	4622      	mov	r2, r4
 80074e8:	462b      	mov	r3, r5
 80074ea:	f7f8 fff5 	bl	80004d8 <__aeabi_dmul>
 80074ee:	4606      	mov	r6, r0
			poscalc = (int16_t)res + (WS2812B_numPixels(CH1)/2);
 80074f0:	2000      	movs	r0, #0
			res = res * (double)WS2812B_numPixels(CH1)/2;
 80074f2:	460f      	mov	r7, r1
			poscalc = (int16_t)res + (WS2812B_numPixels(CH1)/2);
 80074f4:	f000 fa46 	bl	8007984 <WS2812B_numPixels>
			res = res * (double)WS2812B_numPixels(CH1)/2;
 80074f8:	2200      	movs	r2, #0
 80074fa:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <fx_strip_cylon_run+0x128>)
			poscalc = (int16_t)res + (WS2812B_numPixels(CH1)/2);
 80074fc:	4604      	mov	r4, r0
			res = res * (double)WS2812B_numPixels(CH1)/2;
 80074fe:	4639      	mov	r1, r7
 8007500:	4630      	mov	r0, r6
 8007502:	f7f8 ffe9 	bl	80004d8 <__aeabi_dmul>
			poscalc = (int16_t)res + (WS2812B_numPixels(CH1)/2);
 8007506:	f7f9 fa81 	bl	8000a0c <__aeabi_d2iz>
 800750a:	eb00 0454 	add.w	r4, r0, r4, lsr #1
			set_buffer_pixel(&buf,poscalc,get_DMX_variable(DMX_STRIP1_V1),get_DMX_variable(DMX_STRIP1_V2),get_DMX_variable(DMX_STRIP1_V3));
 800750e:	2010      	movs	r0, #16
 8007510:	f000 f96a 	bl	80077e8 <get_DMX_variable>
 8007514:	4605      	mov	r5, r0
 8007516:	2011      	movs	r0, #17
 8007518:	f000 f966 	bl	80077e8 <get_DMX_variable>
 800751c:	4606      	mov	r6, r0
 800751e:	2012      	movs	r0, #18
 8007520:	f000 f962 	bl	80077e8 <get_DMX_variable>
			poscalc = (int16_t)res + (WS2812B_numPixels(CH1)/2);
 8007524:	b2a4      	uxth	r4, r4
			set_buffer_pixel(&buf,poscalc,get_DMX_variable(DMX_STRIP1_V1),get_DMX_variable(DMX_STRIP1_V2),get_DMX_variable(DMX_STRIP1_V3));
 8007526:	9000      	str	r0, [sp, #0]
 8007528:	4621      	mov	r1, r4
 800752a:	480e      	ldr	r0, [pc, #56]	; (8007564 <fx_strip_cylon_run+0x11c>)
 800752c:	4633      	mov	r3, r6
 800752e:	462a      	mov	r2, r5
 8007530:	f000 f96f 	bl	8007812 <set_buffer_pixel>
			set_pixels_from_buf(CH1,&buf);
 8007534:	490b      	ldr	r1, [pc, #44]	; (8007564 <fx_strip_cylon_run+0x11c>)
 8007536:	2000      	movs	r0, #0
 8007538:	f000 f976 	bl	8007828 <set_pixels_from_buf>
					return FX_RUNNING;
 800753c:	2002      	movs	r0, #2
 800753e:	e79a      	b.n	8007476 <fx_strip_cylon_run+0x2e>
			WS2812B_clear(CH1);
 8007540:	2000      	movs	r0, #0
 8007542:	f000 fa27 	bl	8007994 <WS2812B_clear>
			WS2812B_clear(CH2);
 8007546:	2001      	movs	r0, #1
 8007548:	f000 fa24 	bl	8007994 <WS2812B_clear>
			destroy_rgb_buffer(&buf);
 800754c:	4805      	ldr	r0, [pc, #20]	; (8007564 <fx_strip_cylon_run+0x11c>)
 800754e:	f000 f95d 	bl	800780c <destroy_rgb_buffer>
			return FX_COMPLETED;
 8007552:	2001      	movs	r0, #1
 8007554:	e78f      	b.n	8007476 <fx_strip_cylon_run+0x2e>
 8007556:	bf00      	nop
 8007558:	53c8d4f1 	.word	0x53c8d4f1
 800755c:	400921fb 	.word	0x400921fb
 8007560:	20000934 	.word	0x20000934
 8007564:	2000092c 	.word	0x2000092c
 8007568:	20000938 	.word	0x20000938
 800756c:	40668000 	.word	0x40668000
 8007570:	3fe00000 	.word	0x3fe00000

08007574 <fx_strip_cylon>:
	register_fx(&param,fx_num);
 8007574:	4601      	mov	r1, r0
 8007576:	4801      	ldr	r0, [pc, #4]	; (800757c <fx_strip_cylon+0x8>)
 8007578:	f7fd bb16 	b.w	8004ba8 <register_fx>
 800757c:	0800a6f0 	.word	0x0800a6f0

08007580 <fx_strip_rainbow_run>:
{
	static int16_t pos[CH_MAX] = {0,0};
	static int16_t step[CH_MAX] = {0,0};
	static uint32_t delay[CH_MAX] = {0,0};

	switch(state)
 8007580:	2801      	cmp	r0, #1
{
 8007582:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	switch(state)
 8007586:	d004      	beq.n	8007592 <fx_strip_rainbow_run+0x12>
 8007588:	d341      	bcc.n	800760e <fx_strip_rainbow_run+0x8e>
 800758a:	2802      	cmp	r0, #2
 800758c:	d059      	beq.n	8007642 <fx_strip_rainbow_run+0xc2>
			WS2812B_clear(CH2);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 800758e:	2003      	movs	r0, #3
 8007590:	e030      	b.n	80075f4 <fx_strip_rainbow_run+0x74>
	switch(state)
 8007592:	2400      	movs	r4, #0
				if (check_custom_frame_delay(&delay[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SPEED]))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 8007594:	4e2f      	ldr	r6, [pc, #188]	; (8007654 <fx_strip_rainbow_run+0xd4>)
 8007596:	4f30      	ldr	r7, [pc, #192]	; (8007658 <fx_strip_rainbow_run+0xd8>)
					WS2812B_rainbow(ii,0, WS2812B_numPixels(ii),pos[ii],step[ii]);
 8007598:	4d30      	ldr	r5, [pc, #192]	; (800765c <fx_strip_rainbow_run+0xdc>)
				if (check_custom_frame_delay(&delay[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SPEED]))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 800759a:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 800759e:	1b1b      	subs	r3, r3, r4
 80075a0:	7858      	ldrb	r0, [r3, #1]
 80075a2:	f000 f921 	bl	80077e8 <get_DMX_variable>
 80075a6:	4601      	mov	r1, r0
 80075a8:	eb07 0084 	add.w	r0, r7, r4, lsl #2
 80075ac:	fa5f f984 	uxtb.w	r9, r4
 80075b0:	f000 f90c 	bl	80077cc <check_custom_frame_delay>
 80075b4:	b1e0      	cbz	r0, 80075f0 <fx_strip_rainbow_run+0x70>
					WS2812B_rainbow(ii,0, WS2812B_numPixels(ii),pos[ii],step[ii]);
 80075b6:	4648      	mov	r0, r9
 80075b8:	f000 f9e4 	bl	8007984 <WS2812B_numPixels>
 80075bc:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8007660 <fx_strip_rainbow_run+0xe0>
 80075c0:	f815 3014 	ldrb.w	r3, [r5, r4, lsl #1]
 80075c4:	f81a 2014 	ldrb.w	r2, [sl, r4, lsl #1]
 80075c8:	2100      	movs	r1, #0
 80075ca:	9200      	str	r2, [sp, #0]
 80075cc:	b2c2      	uxtb	r2, r0
 80075ce:	4648      	mov	r0, r9
 80075d0:	f000 fa8f 	bl	8007af2 <WS2812B_rainbow>
					pos[ii] = pos[ii] + step[ii];
 80075d4:	f83a 2014 	ldrh.w	r2, [sl, r4, lsl #1]
 80075d8:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 80075dc:	ea4f 0844 	mov.w	r8, r4, lsl #1
 80075e0:	4413      	add	r3, r2
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	b21a      	sxth	r2, r3
					if (pos[ii] > 255)
 80075e6:	2aff      	cmp	r2, #255	; 0xff
 80075e8:	dd09      	ble.n	80075fe <fx_strip_rainbow_run+0x7e>
						pos[ii] = pos[ii]-255;
 80075ea:	3bff      	subs	r3, #255	; 0xff
 80075ec:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 80075f0:	b11c      	cbz	r4, 80075fa <fx_strip_rainbow_run+0x7a>
 80075f2:	2002      	movs	r0, #2
}
 80075f4:	b002      	add	sp, #8
 80075f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 80075fa:	2401      	movs	r4, #1
 80075fc:	e7cd      	b.n	800759a <fx_strip_rainbow_run+0x1a>
					else if (pos[ii] < 0)
 80075fe:	2a00      	cmp	r2, #0
						pos[ii] = pos[ii]+255;
 8007600:	bfb6      	itet	lt
 8007602:	33ff      	addlt	r3, #255	; 0xff
					pos[ii] = pos[ii] + step[ii];
 8007604:	f828 2005 	strhge.w	r2, [r8, r5]
						pos[ii] = pos[ii]+255;
 8007608:	f828 3005 	strhlt.w	r3, [r8, r5]
 800760c:	e7f0      	b.n	80075f0 <fx_strip_rainbow_run+0x70>
				step[ii] = get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SIZE]);
 800760e:	4d11      	ldr	r5, [pc, #68]	; (8007654 <fx_strip_rainbow_run+0xd4>)
 8007610:	4c13      	ldr	r4, [pc, #76]	; (8007660 <fx_strip_rainbow_run+0xe0>)
 8007612:	78a8      	ldrb	r0, [r5, #2]
 8007614:	f000 f8e8 	bl	80077e8 <get_DMX_variable>
 8007618:	8020      	strh	r0, [r4, #0]
				if (get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_PATTERN]))
 800761a:	7828      	ldrb	r0, [r5, #0]
 800761c:	f000 f8e4 	bl	80077e8 <get_DMX_variable>
 8007620:	b110      	cbz	r0, 8007628 <fx_strip_rainbow_run+0xa8>
					step[ii] = -step[ii];
 8007622:	8823      	ldrh	r3, [r4, #0]
 8007624:	425b      	negs	r3, r3
 8007626:	8023      	strh	r3, [r4, #0]
				step[ii] = get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SIZE]);
 8007628:	7a68      	ldrb	r0, [r5, #9]
 800762a:	f000 f8dd 	bl	80077e8 <get_DMX_variable>
 800762e:	8060      	strh	r0, [r4, #2]
				if (get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_PATTERN]))
 8007630:	79e8      	ldrb	r0, [r5, #7]
 8007632:	f000 f8d9 	bl	80077e8 <get_DMX_variable>
 8007636:	b110      	cbz	r0, 800763e <fx_strip_rainbow_run+0xbe>
					step[ii] = -step[ii];
 8007638:	8863      	ldrh	r3, [r4, #2]
 800763a:	425b      	negs	r3, r3
 800763c:	8063      	strh	r3, [r4, #2]
			return FX_OK;
 800763e:	2000      	movs	r0, #0
 8007640:	e7d8      	b.n	80075f4 <fx_strip_rainbow_run+0x74>
			WS2812B_clear(CH1);
 8007642:	2000      	movs	r0, #0
 8007644:	f000 f9a6 	bl	8007994 <WS2812B_clear>
			WS2812B_clear(CH2);
 8007648:	2001      	movs	r0, #1
 800764a:	f000 f9a3 	bl	8007994 <WS2812B_clear>
			return FX_COMPLETED;
 800764e:	2001      	movs	r0, #1
 8007650:	e7d0      	b.n	80075f4 <fx_strip_rainbow_run+0x74>
 8007652:	bf00      	nop
 8007654:	0800a72c 	.word	0x0800a72c
 8007658:	2000093c 	.word	0x2000093c
 800765c:	20000944 	.word	0x20000944
 8007660:	20000948 	.word	0x20000948

08007664 <fx_strip_rainbow>:
	register_fx(&param,fx_num);
 8007664:	4601      	mov	r1, r0
 8007666:	4801      	ldr	r0, [pc, #4]	; (800766c <fx_strip_rainbow+0x8>)
 8007668:	f7fd ba9e 	b.w	8004ba8 <register_fx>
 800766c:	0800a704 	.word	0x0800a704

08007670 <fx_strip_running_light_run>:
	register_fx(&param,fx_num);
}


t_fx_result fx_strip_running_light_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 8007670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static int16_t pos[CH_MAX] = {0,0};
	static int16_t step[CH_MAX] = {0,0};
	static uint32_t delay[CH_MAX] = {0,0};

	switch(state)
 8007674:	2801      	cmp	r0, #1
{
 8007676:	b085      	sub	sp, #20
	switch(state)
 8007678:	d004      	beq.n	8007684 <fx_strip_running_light_run+0x14>
 800767a:	d35a      	bcc.n	8007732 <fx_strip_running_light_run+0xc2>
 800767c:	2802      	cmp	r0, #2
 800767e:	d07a      	beq.n	8007776 <fx_strip_running_light_run+0x106>
			WS2812B_clear(CH2);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 8007680:	2003      	movs	r0, #3
 8007682:	e044      	b.n	800770e <fx_strip_running_light_run+0x9e>
	switch(state)
 8007684:	2400      	movs	r4, #0
 8007686:	4e40      	ldr	r6, [pc, #256]	; (8007788 <fx_strip_running_light_run+0x118>)
				if (check_custom_frame_delay(&delay[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SPEED]))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 8007688:	f8df b108 	ldr.w	fp, [pc, #264]	; 8007794 <fx_strip_running_light_run+0x124>
					WS2812B_setPixelColor((t_stripchannel)ii,pos[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V1]), get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V2]), get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V3]));
 800768c:	4d3f      	ldr	r5, [pc, #252]	; (800778c <fx_strip_running_light_run+0x11c>)
					pos[ii] = pos[ii] + step[ii];
 800768e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8007790 <fx_strip_running_light_run+0x120>
				if (check_custom_frame_delay(&delay[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SPEED]))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 8007692:	7870      	ldrb	r0, [r6, #1]
 8007694:	f000 f8a8 	bl	80077e8 <get_DMX_variable>
 8007698:	4601      	mov	r1, r0
 800769a:	eb0b 0084 	add.w	r0, fp, r4, lsl #2
 800769e:	fa5f fa84 	uxtb.w	sl, r4
 80076a2:	f000 f893 	bl	80077cc <check_custom_frame_delay>
 80076a6:	b378      	cbz	r0, 8007708 <fx_strip_running_light_run+0x98>
					WS2812B_clear((t_stripchannel)ii);
 80076a8:	4650      	mov	r0, sl
 80076aa:	f000 f973 	bl	8007994 <WS2812B_clear>
					WS2812B_setPixelColor((t_stripchannel)ii,pos[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V1]), get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V2]), get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V3]));
 80076ae:	7930      	ldrb	r0, [r6, #4]
 80076b0:	f835 7014 	ldrh.w	r7, [r5, r4, lsl #1]
 80076b4:	f000 f898 	bl	80077e8 <get_DMX_variable>
 80076b8:	9003      	str	r0, [sp, #12]
 80076ba:	7970      	ldrb	r0, [r6, #5]
 80076bc:	f000 f894 	bl	80077e8 <get_DMX_variable>
 80076c0:	9002      	str	r0, [sp, #8]
 80076c2:	79b0      	ldrb	r0, [r6, #6]
 80076c4:	f000 f890 	bl	80077e8 <get_DMX_variable>
 80076c8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80076cc:	4639      	mov	r1, r7
 80076ce:	9000      	str	r0, [sp, #0]
 80076d0:	4650      	mov	r0, sl
 80076d2:	f000 f91d 	bl	8007910 <WS2812B_setPixelColor>
					pos[ii] = pos[ii] + step[ii];
 80076d6:	f835 7014 	ldrh.w	r7, [r5, r4, lsl #1]
 80076da:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
					if (pos[ii] > WS2812B_numPixels((t_stripchannel)ii))
 80076de:	4650      	mov	r0, sl
					pos[ii] = pos[ii] + step[ii];
 80076e0:	441f      	add	r7, r3
 80076e2:	b23f      	sxth	r7, r7
 80076e4:	f825 7014 	strh.w	r7, [r5, r4, lsl #1]
					if (pos[ii] > WS2812B_numPixels((t_stripchannel)ii))
 80076e8:	f000 f94c 	bl	8007984 <WS2812B_numPixels>
 80076ec:	4287      	cmp	r7, r0
 80076ee:	ea4f 0944 	mov.w	r9, r4, lsl #1
 80076f2:	dd11      	ble.n	8007718 <fx_strip_running_light_run+0xa8>
						step[ii] = -step[ii];
 80076f4:	f838 2014 	ldrh.w	r2, [r8, r4, lsl #1]
 80076f8:	4253      	negs	r3, r2
 80076fa:	f828 3014 	strh.w	r3, [r8, r4, lsl #1]
						pos[ii] = pos[ii] + step[ii];
 80076fe:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 8007702:	1a9b      	subs	r3, r3, r2
 8007704:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
 8007708:	3607      	adds	r6, #7
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 800770a:	b11c      	cbz	r4, 8007714 <fx_strip_running_light_run+0xa4>
 800770c:	2002      	movs	r0, #2
}
 800770e:	b005      	add	sp, #20
 8007710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 8007714:	2401      	movs	r4, #1
 8007716:	e7bc      	b.n	8007692 <fx_strip_running_light_run+0x22>
					else if (pos[ii] < 0)
 8007718:	f935 3014 	ldrsh.w	r3, [r5, r4, lsl #1]
 800771c:	2b00      	cmp	r3, #0
 800771e:	daf3      	bge.n	8007708 <fx_strip_running_light_run+0x98>
						step[ii] = -step[ii];
 8007720:	f839 2008 	ldrh.w	r2, [r9, r8]
 8007724:	4251      	negs	r1, r2
						pos[ii] = pos[ii] + step[ii];
 8007726:	1a9b      	subs	r3, r3, r2
						step[ii] = -step[ii];
 8007728:	f829 1008 	strh.w	r1, [r9, r8]
						pos[ii] = pos[ii] + step[ii];
 800772c:	f829 3005 	strh.w	r3, [r9, r5]
 8007730:	e7ea      	b.n	8007708 <fx_strip_running_light_run+0x98>
	switch(state)
 8007732:	2400      	movs	r4, #0
				step[ii] = get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SIZE]);
 8007734:	4f14      	ldr	r7, [pc, #80]	; (8007788 <fx_strip_running_light_run+0x118>)
 8007736:	4e16      	ldr	r6, [pc, #88]	; (8007790 <fx_strip_running_light_run+0x120>)
				  pos[ii] = WS2812B_numPixels((t_stripchannel)ii);
 8007738:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800778c <fx_strip_running_light_run+0x11c>
 800773c:	00e5      	lsls	r5, r4, #3
 800773e:	1b2d      	subs	r5, r5, r4
				step[ii] = get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SIZE]);
 8007740:	19eb      	adds	r3, r5, r7
 8007742:	7898      	ldrb	r0, [r3, #2]
 8007744:	f000 f850 	bl	80077e8 <get_DMX_variable>
 8007748:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
				if (0 != get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_PATTERN]))
 800774c:	5d78      	ldrb	r0, [r7, r5]
 800774e:	fa5f f984 	uxtb.w	r9, r4
 8007752:	f000 f849 	bl	80077e8 <get_DMX_variable>
 8007756:	b148      	cbz	r0, 800776c <fx_strip_running_light_run+0xfc>
				  pos[ii] = WS2812B_numPixels((t_stripchannel)ii);
 8007758:	4648      	mov	r0, r9
 800775a:	f000 f913 	bl	8007984 <WS2812B_numPixels>
				  step[ii] = -step[ii];
 800775e:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
				  pos[ii] = WS2812B_numPixels((t_stripchannel)ii);
 8007762:	f828 0014 	strh.w	r0, [r8, r4, lsl #1]
				  step[ii] = -step[ii];
 8007766:	425b      	negs	r3, r3
 8007768:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 800776c:	b10c      	cbz	r4, 8007772 <fx_strip_running_light_run+0x102>
			return FX_OK;
 800776e:	2000      	movs	r0, #0
 8007770:	e7cd      	b.n	800770e <fx_strip_running_light_run+0x9e>
 8007772:	2401      	movs	r4, #1
 8007774:	e7e2      	b.n	800773c <fx_strip_running_light_run+0xcc>
			WS2812B_clear(CH1);
 8007776:	2000      	movs	r0, #0
 8007778:	f000 f90c 	bl	8007994 <WS2812B_clear>
			WS2812B_clear(CH2);
 800777c:	2001      	movs	r0, #1
 800777e:	f000 f909 	bl	8007994 <WS2812B_clear>
			return FX_COMPLETED;
 8007782:	2001      	movs	r0, #1
 8007784:	e7c3      	b.n	800770e <fx_strip_running_light_run+0x9e>
 8007786:	bf00      	nop
 8007788:	0800a72c 	.word	0x0800a72c
 800778c:	20000954 	.word	0x20000954
 8007790:	20000958 	.word	0x20000958
 8007794:	2000094c 	.word	0x2000094c

08007798 <fx_strip_running_light>:
	register_fx(&param,fx_num);
 8007798:	4601      	mov	r1, r0
 800779a:	4801      	ldr	r0, [pc, #4]	; (80077a0 <fx_strip_running_light+0x8>)
 800779c:	f7fd ba04 	b.w	8004ba8 <register_fx>
 80077a0:	0800a718 	.word	0x0800a718

080077a4 <reset_frame_delay>:


//Reset the Frame Delay Counter
void reset_frame_delay(void)
{
	 delay_count = 0;
 80077a4:	2200      	movs	r2, #0
 80077a6:	4b01      	ldr	r3, [pc, #4]	; (80077ac <reset_frame_delay+0x8>)
 80077a8:	601a      	str	r2, [r3, #0]
}
 80077aa:	4770      	bx	lr
 80077ac:	2000095c 	.word	0x2000095c

080077b0 <check_frame_delay>:

//Returns true if "delay" frames have passed, else false
uint8_t check_frame_delay(uint32_t delay)
{
	if (delay == delay_count)
 80077b0:	4a05      	ldr	r2, [pc, #20]	; (80077c8 <check_frame_delay+0x18>)
 80077b2:	6813      	ldr	r3, [r2, #0]
 80077b4:	4283      	cmp	r3, r0
 80077b6:	f04f 0000 	mov.w	r0, #0
	{
		delay_count = 0;
		return 1;
	}
	delay_count++;
 80077ba:	bf15      	itete	ne
 80077bc:	3301      	addne	r3, #1
		delay_count = 0;
 80077be:	6010      	streq	r0, [r2, #0]
	delay_count++;
 80077c0:	6013      	strne	r3, [r2, #0]
		return 1;
 80077c2:	2001      	moveq	r0, #1
	return 0;
}
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	2000095c 	.word	0x2000095c

080077cc <check_custom_frame_delay>:


//Custom Delay with on Variable
uint8_t check_custom_frame_delay(uint32_t* count, uint32_t delay)
{
 80077cc:	2300      	movs	r3, #0
	if (delay == *count)
 80077ce:	6802      	ldr	r2, [r0, #0]
 80077d0:	428a      	cmp	r2, r1
	{
		*count = 0;
		return 1;
	}
	*count = *count + 1;
 80077d2:	bf15      	itete	ne
 80077d4:	3201      	addne	r2, #1
		*count = 0;
 80077d6:	6003      	streq	r3, [r0, #0]
	*count = *count + 1;
 80077d8:	6002      	strne	r2, [r0, #0]
		return 1;
 80077da:	2001      	moveq	r0, #1
	return 0;
 80077dc:	bf18      	it	ne
 80077de:	4618      	movne	r0, r3
}
 80077e0:	4770      	bx	lr

080077e2 <set_pwm_light>:


//Set Light by index (0..9)
void set_pwm_light(uint8_t index, uint8_t val)
{
	set_reg(index+1, val);
 80077e2:	3001      	adds	r0, #1
 80077e4:	f7fd b864 	b.w	80048b0 <set_reg>

080077e8 <get_DMX_variable>:


//Get a DMX Variable
uint8_t get_DMX_variable(t_dmx_var var)
{
	return get_reg((uint32_t)var);
 80077e8:	f7fd b870 	b.w	80048cc <get_reg>

080077ec <millisec>:
	return get_trigger(ch);
}

uint32_t millisec(void)
{
	return HAL_GetTick();
 80077ec:	f7f9 bbfc 	b.w	8000fe8 <HAL_GetTick>

080077f0 <create_rgb_buffer>:
{
	return (uint8_t)(((uint16_t)val * (uint16_t)scale)>>8);
}

uint8_t create_rgb_buffer(t_rgb_buf* pbuf, uint16_t size)
{
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	460d      	mov	r5, r1
	pbuf->size = 0;
 80077f4:	2300      	movs	r3, #0
{
 80077f6:	4604      	mov	r4, r0
	pbuf->size = 0;
 80077f8:	8083      	strh	r3, [r0, #4]
	pbuf->rgb_pixels = calloc(size, sizeof(t_rgb));
 80077fa:	2103      	movs	r1, #3
 80077fc:	4628      	mov	r0, r5
 80077fe:	f000 f9dd 	bl	8007bbc <calloc>
 8007802:	6020      	str	r0, [r4, #0]
	if (NULL != pbuf->rgb_pixels)
 8007804:	b108      	cbz	r0, 800780a <create_rgb_buffer+0x1a>
	{
		pbuf->size = size;
		return 1;
 8007806:	2001      	movs	r0, #1
		pbuf->size = size;
 8007808:	80a5      	strh	r5, [r4, #4]
	}
	return 0;
}
 800780a:	bd38      	pop	{r3, r4, r5, pc}

0800780c <destroy_rgb_buffer>:

void destroy_rgb_buffer(t_rgb_buf* pbuf)
{
	free(pbuf->rgb_pixels);
 800780c:	6800      	ldr	r0, [r0, #0]
 800780e:	f000 ba0f 	b.w	8007c30 <free>

08007812 <set_buffer_pixel>:
}

void set_buffer_pixel(t_rgb_buf* pbuf,uint16_t pos, uint8_t r, uint8_t g, uint8_t b)
{
 8007812:	b510      	push	{r4, lr}
	t_rgb *pix = pbuf->rgb_pixels;
	pix[pos].r = r;
 8007814:	6804      	ldr	r4, [r0, #0]
 8007816:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800781a:	1860      	adds	r0, r4, r1
 800781c:	5462      	strb	r2, [r4, r1]
	pix[pos].g = g;
 800781e:	7043      	strb	r3, [r0, #1]
	pix[pos].b = b;
 8007820:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007824:	7083      	strb	r3, [r0, #2]
}
 8007826:	bd10      	pop	{r4, pc}

08007828 <set_pixels_from_buf>:

void set_pixels_from_buf(t_stripchannel ch, t_rgb_buf* pbuf)
{
 8007828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800782a:	460d      	mov	r5, r1
 800782c:	4607      	mov	r7, r0
	uint16_t cnt;
	uint16_t maxcnt = WS2812B_numPixels(ch);
 800782e:	f000 f8a9 	bl	8007984 <WS2812B_numPixels>
 8007832:	88ac      	ldrh	r4, [r5, #4]
	t_rgb *pix = pbuf->rgb_pixels;

	if (maxcnt>pbuf->size)
		maxcnt = pbuf->size;

	for (cnt = 0;cnt<maxcnt;cnt++)
 8007834:	2600      	movs	r6, #0
 8007836:	4284      	cmp	r4, r0
 8007838:	bf28      	it	cs
 800783a:	4604      	movcs	r4, r0
 800783c:	682d      	ldr	r5, [r5, #0]
 800783e:	b2a4      	uxth	r4, r4
 8007840:	b2b1      	uxth	r1, r6
 8007842:	42a1      	cmp	r1, r4
 8007844:	f105 0503 	add.w	r5, r5, #3
 8007848:	d301      	bcc.n	800784e <set_pixels_from_buf+0x26>
	{
		WS2812B_setPixelColor(ch,cnt,pix[cnt].r,pix[cnt].g,pix[cnt].b);
	}
}
 800784a:	b003      	add	sp, #12
 800784c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WS2812B_setPixelColor(ch,cnt,pix[cnt].r,pix[cnt].g,pix[cnt].b);
 800784e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 8007852:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 8007856:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 800785a:	9000      	str	r0, [sp, #0]
 800785c:	4638      	mov	r0, r7
 800785e:	f000 f857 	bl	8007910 <WS2812B_setPixelColor>
 8007862:	3601      	adds	r6, #1
 8007864:	e7ec      	b.n	8007840 <set_pixels_from_buf+0x18>

08007866 <fade_rgb_buf>:

void fade_rgb_buf(t_rgb_buf* pbuf,uint8_t scale)
{
 8007866:	8882      	ldrh	r2, [r0, #4]
 8007868:	6803      	ldr	r3, [r0, #0]
 800786a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800786e:	1cd8      	adds	r0, r3, #3
 8007870:	4402      	add	r2, r0
 8007872:	3303      	adds	r3, #3
	uint16_t i;
	t_rgb *pix = pbuf->rgb_pixels;

	for (i = 0; i<pbuf->size;i++)
 8007874:	4293      	cmp	r3, r2
 8007876:	d100      	bne.n	800787a <fade_rgb_buf+0x14>
	{
		pix[i].r = scale256(pix[i].r, scale);
		pix[i].g = scale256(pix[i].g, scale);
		pix[i].b = scale256(pix[i].b, scale);
	}
}
 8007878:	4770      	bx	lr
	return (uint8_t)(((uint16_t)val * (uint16_t)scale)>>8);
 800787a:	f813 0c03 	ldrb.w	r0, [r3, #-3]
 800787e:	4348      	muls	r0, r1
 8007880:	1200      	asrs	r0, r0, #8
 8007882:	f803 0c03 	strb.w	r0, [r3, #-3]
 8007886:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 800788a:	4348      	muls	r0, r1
 800788c:	1200      	asrs	r0, r0, #8
 800788e:	f803 0c02 	strb.w	r0, [r3, #-2]
 8007892:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8007896:	4348      	muls	r0, r1
 8007898:	1200      	asrs	r0, r0, #8
 800789a:	f803 0c01 	strb.w	r0, [r3, #-1]
 800789e:	e7e8      	b.n	8007872 <fade_rgb_buf+0xc>

080078a0 <WS2812B_show>:
{
  uint32_t loopcnt = 0;
  static uint8_t errorcnt = 0;

  //If Strip is set to 0 pixels we ignore it...
  if (stripchannel[ch].numLEDs == 0)
 80078a0:	2318      	movs	r3, #24
{
 80078a2:	b570      	push	{r4, r5, r6, lr}
  if (stripchannel[ch].numLEDs == 0)
 80078a4:	4c18      	ldr	r4, [pc, #96]	; (8007908 <WS2812B_show+0x68>)
{
 80078a6:	4606      	mov	r6, r0
  if (stripchannel[ch].numLEDs == 0)
 80078a8:	fb03 4300 	mla	r3, r3, r0, r4
 80078ac:	889a      	ldrh	r2, [r3, #4]
 80078ae:	b352      	cbz	r2, 8007906 <WS2812B_show+0x66>
	  return;

  //Wait for last transfer to finish
  while(__HAL_SPI_GET_FLAG(stripchannel[ch].phspi, SPI_FLAG_BSY ))
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	6893      	ldr	r3, [r2, #8]
 80078b6:	061b      	lsls	r3, r3, #24
 80078b8:	d4fc      	bmi.n	80078b4 <WS2812B_show+0x14>
  {
	  loopcnt++;
  }

  while (HAL_GetTick()<stripchannel[ch].time)
 80078ba:	2518      	movs	r5, #24
 80078bc:	fb05 4506 	mla	r5, r5, r6, r4
 80078c0:	f7f9 fb92 	bl	8000fe8 <HAL_GetTick>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	4298      	cmp	r0, r3
 80078c8:	d3fa      	bcc.n	80078c0 <WS2812B_show+0x20>

  //we know how long the transfer takes..
  //(440ns per bit) * 8 bits * 3 colors * number of pixels...

  //Send Data via DMA
  if (HAL_OK != HAL_SPI_Transmit_DMA(stripchannel[ch].phspi, stripchannel[ch].pixels, stripchannel[ch].numBytes))
 80078ca:	88ea      	ldrh	r2, [r5, #6]
 80078cc:	68a9      	ldr	r1, [r5, #8]
 80078ce:	6928      	ldr	r0, [r5, #16]
 80078d0:	f7fb f998 	bl	8002c04 <HAL_SPI_Transmit_DMA>
 80078d4:	b118      	cbz	r0, 80078de <WS2812B_show+0x3e>
	  errorcnt++;
 80078d6:	4a0d      	ldr	r2, [pc, #52]	; (800790c <WS2812B_show+0x6c>)
 80078d8:	7813      	ldrb	r3, [r2, #0]
 80078da:	3301      	adds	r3, #1
 80078dc:	7013      	strb	r3, [r2, #0]
  stripchannel[ch].time = HAL_GetTick() + 6;  //we need to wait at least XXX systicks for the colors to latch in after the last transfer.
 80078de:	f7f9 fb83 	bl	8000fe8 <HAL_GetTick>
 80078e2:	2218      	movs	r2, #24
 80078e4:	4372      	muls	r2, r6
 80078e6:	3006      	adds	r0, #6
 80078e8:	18a3      	adds	r3, r4, r2
 80078ea:	50a0      	str	r0, [r4, r2]
 80078ec:	88da      	ldrh	r2, [r3, #6]
  	  	  	  	  	  	  	 //The added 6 ms here are purely experimental...

  // Need to copy the last / current buffer to the other half of the double buffer as most API code does not rebuild the entire contents
  // from scratch. Often just a few pixels are changed e.g in a chaser effect

  if (stripchannel[ch].pixels==stripchannel[ch].doubleBuffer)
 80078ee:	e9d3 1002 	ldrd	r1, r0, [r3, #8]
 80078f2:	4281      	cmp	r1, r0
  {
	// pixels was using the first buffer
	  stripchannel[ch].pixels = stripchannel[ch].doubleBuffer+stripchannel[ch].numBytes;  // set pixels to second buffer
 80078f4:	bf07      	ittee	eq
 80078f6:	1888      	addeq	r0, r1, r2
 80078f8:	6098      	streq	r0, [r3, #8]
	memcpy(stripchannel[ch].pixels,stripchannel[ch].doubleBuffer,stripchannel[ch].numBytes);// copy first buffer to second buffer
  }
  else
  {
	// pixels was using the second buffer
	  stripchannel[ch].pixels	= stripchannel[ch].doubleBuffer;  // set pixels to first buffer
 80078fa:	6098      	strne	r0, [r3, #8]
	memcpy(stripchannel[ch].pixels,stripchannel[ch].doubleBuffer+stripchannel[ch].numBytes,stripchannel[ch].numBytes);	 // copy second buffer to first buffer
 80078fc:	1881      	addne	r1, r0, r2
  }
}
 80078fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memcpy(stripchannel[ch].pixels,stripchannel[ch].doubleBuffer+stripchannel[ch].numBytes,stripchannel[ch].numBytes);	 // copy second buffer to first buffer
 8007902:	f000 b99d 	b.w	8007c40 <memcpy>
}
 8007906:	bd70      	pop	{r4, r5, r6, pc}
 8007908:	20000be0 	.word	0x20000be0
 800790c:	20000960 	.word	0x20000960

08007910 <WS2812B_setPixelColor>:

//Sets a specific pixel to a specific r,g,b colour
//Because the pixels buffer contains the encoded bitstream, which is in triplets
//the lookup table need to be used to find the correct pattern for each byte in the 3 byte sequence.
void WS2812B_setPixelColor(t_stripchannel ch,uint16_t n, uint8_t r, uint8_t g, uint8_t b)
 {
 8007910:	b5f0      	push	{r4, r5, r6, r7, lr}
   uint8_t *bptr = stripchannel[ch].pixels + (n<<3) + n +1;
 8007912:	2418      	movs	r4, #24
 8007914:	4e13      	ldr	r6, [pc, #76]	; (8007964 <WS2812B_setPixelColor+0x54>)
   uint8_t *tPtr = (uint8_t *)encoderLookup + g*2 + g;// need to index 3 x g into the lookup
 8007916:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   uint8_t *bptr = stripchannel[ch].pixels + (n<<3) + n +1;
 800791a:	fb04 6000 	mla	r0, r4, r0, r6
   uint8_t *tPtr = (uint8_t *)encoderLookup + g*2 + g;// need to index 3 x g into the lookup
 800791e:	4c12      	ldr	r4, [pc, #72]	; (8007968 <WS2812B_setPixelColor+0x58>)
   uint8_t *bptr = stripchannel[ch].pixels + (n<<3) + n +1;
 8007920:	6887      	ldr	r7, [r0, #8]
   uint8_t *tPtr = (uint8_t *)encoderLookup + g*2 + g;// need to index 3 x g into the lookup
 8007922:	18e6      	adds	r6, r4, r3
   uint8_t *bptr = stripchannel[ch].pixels + (n<<3) + n +1;
 8007924:	eb01 01c1 	add.w	r1, r1, r1, lsl #3

   *bptr++ = *tPtr++;
 8007928:	5ce3      	ldrb	r3, [r4, r3]
   uint8_t *bptr = stripchannel[ch].pixels + (n<<3) + n +1;
 800792a:	3101      	adds	r1, #1
   *bptr++ = *tPtr++;
 800792c:	547b      	strb	r3, [r7, r1]
   *bptr++ = *tPtr++;
 800792e:	7873      	ldrb	r3, [r6, #1]
   uint8_t *bptr = stripchannel[ch].pixels + (n<<3) + n +1;
 8007930:	1878      	adds	r0, r7, r1
   *bptr++ = *tPtr++;
 8007932:	7043      	strb	r3, [r0, #1]
   *bptr++ = *tPtr++;
 8007934:	78b3      	ldrb	r3, [r6, #2]

   tPtr = (uint8_t *)encoderLookup + r*2 + r;
 8007936:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   *bptr++ = *tPtr++;
 800793a:	7083      	strb	r3, [r0, #2]
   tPtr = (uint8_t *)encoderLookup + r*2 + r;
 800793c:	18a3      	adds	r3, r4, r2
   *bptr++ = *tPtr++;
 800793e:	5ca2      	ldrb	r2, [r4, r2]
 {
 8007940:	f89d 5014 	ldrb.w	r5, [sp, #20]
   *bptr++ = *tPtr++;
 8007944:	70c2      	strb	r2, [r0, #3]
   *bptr++ = *tPtr++;
 8007946:	785a      	ldrb	r2, [r3, #1]
   *bptr++ = *tPtr++;

   tPtr = (uint8_t *)encoderLookup + b*2 + b;
 8007948:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   *bptr++ = *tPtr++;
 800794c:	7102      	strb	r2, [r0, #4]
   *bptr++ = *tPtr++;
 800794e:	789b      	ldrb	r3, [r3, #2]
 8007950:	7143      	strb	r3, [r0, #5]
   *bptr++ = *tPtr++;
 8007952:	5d62      	ldrb	r2, [r4, r5]
   tPtr = (uint8_t *)encoderLookup + b*2 + b;
 8007954:	1963      	adds	r3, r4, r5
   *bptr++ = *tPtr++;
 8007956:	7182      	strb	r2, [r0, #6]
   *bptr++ = *tPtr++;
 8007958:	785a      	ldrb	r2, [r3, #1]
 800795a:	71c2      	strb	r2, [r0, #7]
   *bptr++ = *tPtr++;
 800795c:	789b      	ldrb	r3, [r3, #2]
 800795e:	7203      	strb	r3, [r0, #8]
 }
 8007960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007962:	bf00      	nop
 8007964:	20000be0 	.word	0x20000be0
 8007968:	0800a73a 	.word	0x0800a73a

0800796c <WS2812B_setPixelColorDirect>:

void WS2812B_setPixelColorDirect(t_stripchannel ch,uint16_t n, uint32_t c)
{
 800796c:	b507      	push	{r0, r1, r2, lr}
  WS2812B_setPixelColor(ch,n,(uint8_t)(c >> 16),(uint8_t)(c >>  8),(uint8_t)c);
 800796e:	b2d3      	uxtb	r3, r2
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8007976:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800797a:	f7ff ffc9 	bl	8007910 <WS2812B_setPixelColor>
}
 800797e:	b003      	add	sp, #12
 8007980:	f85d fb04 	ldr.w	pc, [sp], #4

08007984 <WS2812B_numPixels>:
}

//Get the number of pixels
uint16_t WS2812B_numPixels(t_stripchannel ch)
{
  return stripchannel[ch].numLEDs;
 8007984:	2318      	movs	r3, #24
 8007986:	4a02      	ldr	r2, [pc, #8]	; (8007990 <WS2812B_numPixels+0xc>)
 8007988:	fb03 2000 	mla	r0, r3, r0, r2
}
 800798c:	8880      	ldrh	r0, [r0, #4]
 800798e:	4770      	bx	lr
 8007990:	20000be0 	.word	0x20000be0

08007994 <WS2812B_clear>:


//Sets the encoded pixel data to turn all the LEDs off.
void WS2812B_clear(t_stripchannel ch)
{
	uint8_t * bptr= stripchannel[ch].pixels+1;// Note first byte in the buffer is a preable and is always zero. hence the +1
 8007994:	2318      	movs	r3, #24
{
 8007996:	b570      	push	{r4, r5, r6, lr}
	uint8_t *tPtr;

	for(int i=0;i< (stripchannel[ch].numLEDs *3);i++)
 8007998:	2100      	movs	r1, #0
	{
		tPtr = (uint8_t *)encoderLookup;
		*bptr++ = *tPtr++;
 800799a:	2492      	movs	r4, #146	; 0x92
		*bptr++ = *tPtr++;
 800799c:	2549      	movs	r5, #73	; 0x49
		*bptr++ = *tPtr++;
 800799e:	2624      	movs	r6, #36	; 0x24
	uint8_t * bptr= stripchannel[ch].pixels+1;// Note first byte in the buffer is a preable and is always zero. hence the +1
 80079a0:	4a09      	ldr	r2, [pc, #36]	; (80079c8 <WS2812B_clear+0x34>)
 80079a2:	fb03 2000 	mla	r0, r3, r0, r2
 80079a6:	6883      	ldr	r3, [r0, #8]
 80079a8:	3301      	adds	r3, #1
	for(int i=0;i< (stripchannel[ch].numLEDs *3);i++)
 80079aa:	8882      	ldrh	r2, [r0, #4]
 80079ac:	3303      	adds	r3, #3
 80079ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80079b2:	428a      	cmp	r2, r1
 80079b4:	dc00      	bgt.n	80079b8 <WS2812B_clear+0x24>
	}
}
 80079b6:	bd70      	pop	{r4, r5, r6, pc}
		*bptr++ = *tPtr++;
 80079b8:	f803 4c03 	strb.w	r4, [r3, #-3]
		*bptr++ = *tPtr++;
 80079bc:	f803 5c02 	strb.w	r5, [r3, #-2]
		*bptr++ = *tPtr++;
 80079c0:	f803 6c01 	strb.w	r6, [r3, #-1]
	for(int i=0;i< (stripchannel[ch].numLEDs *3);i++)
 80079c4:	3101      	adds	r1, #1
 80079c6:	e7f0      	b.n	80079aa <WS2812B_clear+0x16>
 80079c8:	20000be0 	.word	0x20000be0

080079cc <WS2812B_init>:
{
 80079cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	stripchannel[ch].pixels = NULL;
 80079d0:	2218      	movs	r2, #24
{
 80079d2:	4688      	mov	r8, r1
	stripchannel[ch].pixels = NULL;
 80079d4:	2100      	movs	r1, #0
 80079d6:	4342      	muls	r2, r0
 80079d8:	4d2c      	ldr	r5, [pc, #176]	; (8007a8c <WS2812B_init+0xc0>)
{
 80079da:	4604      	mov	r4, r0
	stripchannel[ch].pixels = NULL;
 80079dc:	18ab      	adds	r3, r5, r2
	stripchannel[ch].doubleBuffer = NULL;
 80079de:	e9c3 1102 	strd	r1, r1, [r3, #8]
	stripchannel[ch].time = 0;
 80079e2:	50a9      	str	r1, [r5, r2]
	if (ch == CH1)
 80079e4:	bb20      	cbnz	r0, 8007a30 <WS2812B_init+0x64>
		stripchannel[ch].phspi = &hspi1;
 80079e6:	4b2a      	ldr	r3, [pc, #168]	; (8007a90 <WS2812B_init+0xc4>)
 80079e8:	612b      	str	r3, [r5, #16]
		stripchannel[ch].phdma_spi_tx = &hdma_spi1_tx;
 80079ea:	4b2a      	ldr	r3, [pc, #168]	; (8007a94 <WS2812B_init+0xc8>)
 80079ec:	616b      	str	r3, [r5, #20]
  stripchannel[ch].numBytes = (number_of_leds<<3) + number_of_leds + 2; // 9 encoded bytes per pixel. 1 byte empty peamble to fix issue with SPI MOSI and on byte at the end to clear down MOSI
 80079ee:	2618      	movs	r6, #24
  uint8_t buffer0[2] = { 0, 0 };
 80079f0:	f04f 0900 	mov.w	r9, #0
  stripchannel[ch].numBytes = (number_of_leds<<3) + number_of_leds + 2; // 9 encoded bytes per pixel. 1 byte empty peamble to fix issue with SPI MOSI and on byte at the end to clear down MOSI
 80079f4:	fb06 5604 	mla	r6, r6, r4, r5
 80079f8:	f108 0002 	add.w	r0, r8, #2
 80079fc:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 8007a00:	b287      	uxth	r7, r0
 8007a02:	80f7      	strh	r7, [r6, #6]
  if((stripchannel[ch].doubleBuffer = (uint8_t *)malloc(stripchannel[ch].numBytes*2)))
 8007a04:	0078      	lsls	r0, r7, #1
  uint8_t buffer0[2] = { 0, 0 };
 8007a06:	f8ad 9004 	strh.w	r9, [sp, #4]
  if((stripchannel[ch].doubleBuffer = (uint8_t *)malloc(stripchannel[ch].numBytes*2)))
 8007a0a:	f000 f909 	bl	8007c20 <malloc>
 8007a0e:	60f0      	str	r0, [r6, #12]
 8007a10:	b198      	cbz	r0, 8007a3a <WS2812B_init+0x6e>
	stripchannel[ch].pixels = stripchannel[ch].doubleBuffer;
 8007a12:	60b0      	str	r0, [r6, #8]
    *stripchannel[ch].pixels=0;//clear the preamble byte
 8007a14:	f880 9000 	strb.w	r9, [r0]
    *(stripchannel[ch].pixels+stripchannel[ch].numBytes-1)=0;// clear the post send cleardown byte.
 8007a18:	4438      	add	r0, r7
 8007a1a:	f800 9c01 	strb.w	r9, [r0, #-1]
	stripchannel[ch].numLEDs = number_of_leds;
 8007a1e:	f8a6 8004 	strh.w	r8, [r6, #4]
    WS2812B_clear(ch);// Set the encoded data to all encoded zeros
 8007a22:	4620      	mov	r0, r4
 8007a24:	f7ff ffb6 	bl	8007994 <WS2812B_clear>
  if (ch == CH1)
 8007a28:	b15c      	cbz	r4, 8007a42 <WS2812B_init+0x76>
	  stripchannel[ch].phdma_spi_tx->Instance = DMA1_Channel4;
 8007a2a:	6973      	ldr	r3, [r6, #20]
 8007a2c:	4a1a      	ldr	r2, [pc, #104]	; (8007a98 <WS2812B_init+0xcc>)
 8007a2e:	e00a      	b.n	8007a46 <WS2812B_init+0x7a>
		stripchannel[ch].phspi = &hspi2;
 8007a30:	4a1a      	ldr	r2, [pc, #104]	; (8007a9c <WS2812B_init+0xd0>)
 8007a32:	611a      	str	r2, [r3, #16]
		stripchannel[ch].phdma_spi_tx = &hdma_spi2_tx;
 8007a34:	4a1a      	ldr	r2, [pc, #104]	; (8007aa0 <WS2812B_init+0xd4>)
 8007a36:	615a      	str	r2, [r3, #20]
 8007a38:	e7d9      	b.n	80079ee <WS2812B_init+0x22>
	  stripchannel[ch].numLEDs = stripchannel[ch].numBytes = 0;
 8007a3a:	6070      	str	r0, [r6, #4]
}
 8007a3c:	b003      	add	sp, #12
 8007a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  stripchannel[ch].phdma_spi_tx->Instance = DMA1_Channel3;
 8007a42:	696b      	ldr	r3, [r5, #20]
 8007a44:	4a17      	ldr	r2, [pc, #92]	; (8007aa4 <WS2812B_init+0xd8>)
	  stripchannel[ch].phdma_spi_tx->Instance = DMA1_Channel4;
 8007a46:	601a      	str	r2, [r3, #0]
  stripchannel[ch].phdma_spi_tx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007a48:	2318      	movs	r3, #24
 8007a4a:	fb03 5504 	mla	r5, r3, r4, r5
  stripchannel[ch].phdma_spi_tx->Init.PeriphInc = DMA_PINC_DISABLE;
 8007a4e:	2400      	movs	r4, #0
 8007a50:	2310      	movs	r3, #16
  stripchannel[ch].phdma_spi_tx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007a52:	6968      	ldr	r0, [r5, #20]
  stripchannel[ch].phdma_spi_tx->Init.PeriphInc = DMA_PINC_DISABLE;
 8007a54:	e9c0 3401 	strd	r3, r4, [r0, #4]
  stripchannel[ch].phdma_spi_tx->Init.MemInc = DMA_MINC_ENABLE;
 8007a58:	2380      	movs	r3, #128	; 0x80
  stripchannel[ch].phdma_spi_tx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007a5a:	e9c0 3403 	strd	r3, r4, [r0, #12]
  stripchannel[ch].phdma_spi_tx->Init.Priority = DMA_PRIORITY_MEDIUM;
 8007a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  stripchannel[ch].phdma_spi_tx->Init.Mode = DMA_NORMAL;
 8007a62:	e9c0 4405 	strd	r4, r4, [r0, #20]
  stripchannel[ch].phdma_spi_tx->Init.Priority = DMA_PRIORITY_MEDIUM;
 8007a66:	61c3      	str	r3, [r0, #28]
  if (HAL_DMA_Init(stripchannel[ch].phdma_spi_tx) != HAL_OK)
 8007a68:	f7f9 fd68 	bl	800153c <HAL_DMA_Init>
 8007a6c:	b110      	cbz	r0, 8007a74 <WS2812B_init+0xa8>
	    stripchannel[ch].numLEDs = stripchannel[ch].numBytes = 0;
 8007a6e:	606c      	str	r4, [r5, #4]
	    return 0;
 8007a70:	4620      	mov	r0, r4
 8007a72:	e7e3      	b.n	8007a3c <WS2812B_init+0x70>
  __HAL_LINKDMA(stripchannel[ch].phspi,hdmatx,*stripchannel[ch].phdma_spi_tx);
 8007a74:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
   HAL_SPI_Transmit(stripchannel[ch].phspi, buffer0, 1, 100 );
 8007a78:	2201      	movs	r2, #1
  __HAL_LINKDMA(stripchannel[ch].phspi,hdmatx,*stripchannel[ch].phdma_spi_tx);
 8007a7a:	6483      	str	r3, [r0, #72]	; 0x48
   HAL_SPI_Transmit(stripchannel[ch].phspi, buffer0, 1, 100 );
 8007a7c:	a901      	add	r1, sp, #4
  __HAL_LINKDMA(stripchannel[ch].phspi,hdmatx,*stripchannel[ch].phdma_spi_tx);
 8007a7e:	6258      	str	r0, [r3, #36]	; 0x24
   HAL_SPI_Transmit(stripchannel[ch].phspi, buffer0, 1, 100 );
 8007a80:	2364      	movs	r3, #100	; 0x64
 8007a82:	f7fb f816 	bl	8002ab2 <HAL_SPI_Transmit>
   return 1;
 8007a86:	2001      	movs	r0, #1
 8007a88:	e7d8      	b.n	8007a3c <WS2812B_init+0x70>
 8007a8a:	bf00      	nop
 8007a8c:	20000be0 	.word	0x20000be0
 8007a90:	20000c80 	.word	0x20000c80
 8007a94:	20000d1c 	.word	0x20000d1c
 8007a98:	40020044 	.word	0x40020044
 8007a9c:	20000b0c 	.word	0x20000b0c
 8007aa0:	20000cd8 	.word	0x20000cd8
 8007aa4:	40020030 	.word	0x40020030

08007aa8 <WS2812B_colorWheel>:

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t WS2812B_colorWheel(uint8_t WheelPos)
{
  if(WheelPos < 85)
 8007aa8:	2854      	cmp	r0, #84	; 0x54
 8007aaa:	d80a      	bhi.n	8007ac2 <WS2812B_colorWheel+0x1a>
  {
    return WS2812B_Color(WheelPos * 3, 255 - WheelPos * 3, 0);
 8007aac:	eba0 0380 	sub.w	r3, r0, r0, lsl #2
 8007ab0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007ab4:	3b01      	subs	r3, #1
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 8007ab6:	b2c0      	uxtb	r0, r0
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	0400      	lsls	r0, r0, #16
 8007abc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    {
     WheelPos -= 170;
     return WS2812B_Color(0, WheelPos * 3, 255 - WheelPos * 3);
    }
  }
}
 8007ac0:	4770      	bx	lr
    if(WheelPos < 170)
 8007ac2:	28a9      	cmp	r0, #169	; 0xa9
 8007ac4:	d80b      	bhi.n	8007ade <WS2812B_colorWheel+0x36>
     WheelPos -= 85;
 8007ac6:	3855      	subs	r0, #85	; 0x55
 8007ac8:	b2c0      	uxtb	r0, r0
     return WS2812B_Color(255 - WheelPos * 3, 0, WheelPos * 3);
 8007aca:	eba0 0380 	sub.w	r3, r0, r0, lsl #2
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	b2c0      	uxtb	r0, r0
 8007ad8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8007adc:	4770      	bx	lr
     WheelPos -= 170;
 8007ade:	3056      	adds	r0, #86	; 0x56
 8007ae0:	b2c0      	uxtb	r0, r0
     return WS2812B_Color(0, WheelPos * 3, 255 - WheelPos * 3);
 8007ae2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007ae6:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 8007aea:	3801      	subs	r0, #1
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	b2c0      	uxtb	r0, r0
 8007af0:	e7e4      	b.n	8007abc <WS2812B_colorWheel+0x14>

08007af2 <WS2812B_rainbow>:


//show rainbow colorsa starting at pixel start for count pixels with a given startvalue with a defined stepsize
void WS2812B_rainbow(t_stripchannel ch,uint8_t start, uint8_t count, uint8_t startval,  uint8_t stepsize)
{
 8007af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af6:	4606      	mov	r6, r0
  uint16_t i;
  int16_t j;

	j =startval;
 8007af8:	461c      	mov	r4, r3
{
 8007afa:	f89d 7018 	ldrb.w	r7, [sp, #24]
	for(i=start; i<(start+count); i++)
 8007afe:	b28d      	uxth	r5, r1
 8007b00:	eb01 0802 	add.w	r8, r1, r2
 8007b04:	4545      	cmp	r5, r8
 8007b06:	db01      	blt.n	8007b0c <WS2812B_rainbow+0x1a>
		if (j>255)
			j = j - 255;
		else if (j<0)
			j= j + 255;
	}
}
 8007b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WS2812B_setPixelColorDirect(ch,i, WS2812B_colorWheel((j) & 255));
 8007b0c:	b2e0      	uxtb	r0, r4
 8007b0e:	f7ff ffcb 	bl	8007aa8 <WS2812B_colorWheel>
 8007b12:	4629      	mov	r1, r5
 8007b14:	4602      	mov	r2, r0
 8007b16:	4630      	mov	r0, r6
 8007b18:	f7ff ff28 	bl	800796c <WS2812B_setPixelColorDirect>
		j = j + stepsize;
 8007b1c:	193b      	adds	r3, r7, r4
 8007b1e:	b29b      	uxth	r3, r3
		if (j>255)
 8007b20:	2bff      	cmp	r3, #255	; 0xff
			j = j - 255;
 8007b22:	bf84      	itt	hi
 8007b24:	3bff      	subhi	r3, #255	; 0xff
 8007b26:	b29b      	uxthhi	r3, r3
	for(i=start; i<(start+count); i++)
 8007b28:	3501      	adds	r5, #1
 8007b2a:	b21c      	sxth	r4, r3
 8007b2c:	b2ad      	uxth	r5, r5
 8007b2e:	e7e9      	b.n	8007b04 <WS2812B_rainbow+0x12>

08007b30 <WS2812B_test>:
  return stripchannel[ch].numLEDs;
 8007b30:	2318      	movs	r3, #24

//Running light pattern
void WS2812B_test(t_stripchannel ch)
{
 8007b32:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return stripchannel[ch].numLEDs;
 8007b34:	4a0a      	ldr	r2, [pc, #40]	; (8007b60 <WS2812B_test+0x30>)
	static uint16_t startval = 0;
	WS2812B_rainbow(ch,0, WS2812B_numPixels(ch),startval,10);
 8007b36:	4d0b      	ldr	r5, [pc, #44]	; (8007b64 <WS2812B_test+0x34>)
  return stripchannel[ch].numLEDs;
 8007b38:	fb03 2300 	mla	r3, r3, r0, r2
	WS2812B_rainbow(ch,0, WS2812B_numPixels(ch),startval,10);
 8007b3c:	791a      	ldrb	r2, [r3, #4]
 8007b3e:	230a      	movs	r3, #10
 8007b40:	882c      	ldrh	r4, [r5, #0]
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	b2e3      	uxtb	r3, r4

	//Increase Counter
	startval++;
 8007b46:	3401      	adds	r4, #1
 8007b48:	b2a4      	uxth	r4, r4
	WS2812B_rainbow(ch,0, WS2812B_numPixels(ch),startval,10);
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	f7ff ffd1 	bl	8007af2 <WS2812B_rainbow>
	if (startval == 255)
 8007b50:	2cff      	cmp	r4, #255	; 0xff
		startval = 0;
 8007b52:	bf0a      	itet	eq
 8007b54:	2300      	moveq	r3, #0
	startval++;
 8007b56:	802c      	strhne	r4, [r5, #0]
		startval = 0;
 8007b58:	802b      	strheq	r3, [r5, #0]
}
 8007b5a:	b003      	add	sp, #12
 8007b5c:	bd30      	pop	{r4, r5, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000be0 	.word	0x20000be0
 8007b64:	20000962 	.word	0x20000962

08007b68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007b68:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007b6a:	e003      	b.n	8007b74 <LoopCopyDataInit>

08007b6c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007b6c:	4b0b      	ldr	r3, [pc, #44]	; (8007b9c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007b6e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007b70:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007b72:	3104      	adds	r1, #4

08007b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007b74:	480a      	ldr	r0, [pc, #40]	; (8007ba0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007b76:	4b0b      	ldr	r3, [pc, #44]	; (8007ba4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007b78:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007b7a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007b7c:	d3f6      	bcc.n	8007b6c <CopyDataInit>
  ldr r2, =_sbss
 8007b7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ba8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007b80:	e002      	b.n	8007b88 <LoopFillZerobss>

08007b82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007b82:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007b84:	f842 3b04 	str.w	r3, [r2], #4

08007b88 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007b88:	4b08      	ldr	r3, [pc, #32]	; (8007bac <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007b8a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007b8c:	d3f9      	bcc.n	8007b82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007b8e:	f7fe ffb5 	bl	8006afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b92:	f000 f821 	bl	8007bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007b96:	f7fd fb53 	bl	8005240 <main>
  bx lr
 8007b9a:	4770      	bx	lr
  ldr r3, =_sidata
 8007b9c:	0800ad58 	.word	0x0800ad58
  ldr r0, =_sdata
 8007ba0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007ba4:	200003d4 	.word	0x200003d4
  ldr r2, =_sbss
 8007ba8:	200003d8 	.word	0x200003d8
  ldr r3, = _ebss
 8007bac:	20001960 	.word	0x20001960

08007bb0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007bb0:	e7fe      	b.n	8007bb0 <CAN1_RX1_IRQHandler>

08007bb2 <atoi>:
 8007bb2:	220a      	movs	r2, #10
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	f000 ba21 	b.w	8007ffc <strtol>
	...

08007bbc <calloc>:
 8007bbc:	4b02      	ldr	r3, [pc, #8]	; (8007bc8 <calloc+0xc>)
 8007bbe:	460a      	mov	r2, r1
 8007bc0:	4601      	mov	r1, r0
 8007bc2:	6818      	ldr	r0, [r3, #0]
 8007bc4:	f000 b84f 	b.w	8007c66 <_calloc_r>
 8007bc8:	20000204 	.word	0x20000204

08007bcc <__errno>:
 8007bcc:	4b01      	ldr	r3, [pc, #4]	; (8007bd4 <__errno+0x8>)
 8007bce:	6818      	ldr	r0, [r3, #0]
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	20000204 	.word	0x20000204

08007bd8 <__libc_init_array>:
 8007bd8:	b570      	push	{r4, r5, r6, lr}
 8007bda:	2500      	movs	r5, #0
 8007bdc:	4e0c      	ldr	r6, [pc, #48]	; (8007c10 <__libc_init_array+0x38>)
 8007bde:	4c0d      	ldr	r4, [pc, #52]	; (8007c14 <__libc_init_array+0x3c>)
 8007be0:	1ba4      	subs	r4, r4, r6
 8007be2:	10a4      	asrs	r4, r4, #2
 8007be4:	42a5      	cmp	r5, r4
 8007be6:	d109      	bne.n	8007bfc <__libc_init_array+0x24>
 8007be8:	f001 fd96 	bl	8009718 <_init>
 8007bec:	2500      	movs	r5, #0
 8007bee:	4e0a      	ldr	r6, [pc, #40]	; (8007c18 <__libc_init_array+0x40>)
 8007bf0:	4c0a      	ldr	r4, [pc, #40]	; (8007c1c <__libc_init_array+0x44>)
 8007bf2:	1ba4      	subs	r4, r4, r6
 8007bf4:	10a4      	asrs	r4, r4, #2
 8007bf6:	42a5      	cmp	r5, r4
 8007bf8:	d105      	bne.n	8007c06 <__libc_init_array+0x2e>
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c00:	4798      	blx	r3
 8007c02:	3501      	adds	r5, #1
 8007c04:	e7ee      	b.n	8007be4 <__libc_init_array+0xc>
 8007c06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c0a:	4798      	blx	r3
 8007c0c:	3501      	adds	r5, #1
 8007c0e:	e7f2      	b.n	8007bf6 <__libc_init_array+0x1e>
 8007c10:	0800ad50 	.word	0x0800ad50
 8007c14:	0800ad50 	.word	0x0800ad50
 8007c18:	0800ad50 	.word	0x0800ad50
 8007c1c:	0800ad54 	.word	0x0800ad54

08007c20 <malloc>:
 8007c20:	4b02      	ldr	r3, [pc, #8]	; (8007c2c <malloc+0xc>)
 8007c22:	4601      	mov	r1, r0
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	f000 b879 	b.w	8007d1c <_malloc_r>
 8007c2a:	bf00      	nop
 8007c2c:	20000204 	.word	0x20000204

08007c30 <free>:
 8007c30:	4b02      	ldr	r3, [pc, #8]	; (8007c3c <free+0xc>)
 8007c32:	4601      	mov	r1, r0
 8007c34:	6818      	ldr	r0, [r3, #0]
 8007c36:	f000 b825 	b.w	8007c84 <_free_r>
 8007c3a:	bf00      	nop
 8007c3c:	20000204 	.word	0x20000204

08007c40 <memcpy>:
 8007c40:	b510      	push	{r4, lr}
 8007c42:	1e43      	subs	r3, r0, #1
 8007c44:	440a      	add	r2, r1
 8007c46:	4291      	cmp	r1, r2
 8007c48:	d100      	bne.n	8007c4c <memcpy+0xc>
 8007c4a:	bd10      	pop	{r4, pc}
 8007c4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c54:	e7f7      	b.n	8007c46 <memcpy+0x6>

08007c56 <memset>:
 8007c56:	4603      	mov	r3, r0
 8007c58:	4402      	add	r2, r0
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d100      	bne.n	8007c60 <memset+0xa>
 8007c5e:	4770      	bx	lr
 8007c60:	f803 1b01 	strb.w	r1, [r3], #1
 8007c64:	e7f9      	b.n	8007c5a <memset+0x4>

08007c66 <_calloc_r>:
 8007c66:	b538      	push	{r3, r4, r5, lr}
 8007c68:	fb02 f401 	mul.w	r4, r2, r1
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	f000 f855 	bl	8007d1c <_malloc_r>
 8007c72:	4605      	mov	r5, r0
 8007c74:	b118      	cbz	r0, 8007c7e <_calloc_r+0x18>
 8007c76:	4622      	mov	r2, r4
 8007c78:	2100      	movs	r1, #0
 8007c7a:	f7ff ffec 	bl	8007c56 <memset>
 8007c7e:	4628      	mov	r0, r5
 8007c80:	bd38      	pop	{r3, r4, r5, pc}
	...

08007c84 <_free_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4605      	mov	r5, r0
 8007c88:	2900      	cmp	r1, #0
 8007c8a:	d043      	beq.n	8007d14 <_free_r+0x90>
 8007c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c90:	1f0c      	subs	r4, r1, #4
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	bfb8      	it	lt
 8007c96:	18e4      	addlt	r4, r4, r3
 8007c98:	f000 fa15 	bl	80080c6 <__malloc_lock>
 8007c9c:	4a1e      	ldr	r2, [pc, #120]	; (8007d18 <_free_r+0x94>)
 8007c9e:	6813      	ldr	r3, [r2, #0]
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	b933      	cbnz	r3, 8007cb2 <_free_r+0x2e>
 8007ca4:	6063      	str	r3, [r4, #4]
 8007ca6:	6014      	str	r4, [r2, #0]
 8007ca8:	4628      	mov	r0, r5
 8007caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cae:	f000 ba0b 	b.w	80080c8 <__malloc_unlock>
 8007cb2:	42a3      	cmp	r3, r4
 8007cb4:	d90b      	bls.n	8007cce <_free_r+0x4a>
 8007cb6:	6821      	ldr	r1, [r4, #0]
 8007cb8:	1862      	adds	r2, r4, r1
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	bf01      	itttt	eq
 8007cbe:	681a      	ldreq	r2, [r3, #0]
 8007cc0:	685b      	ldreq	r3, [r3, #4]
 8007cc2:	1852      	addeq	r2, r2, r1
 8007cc4:	6022      	streq	r2, [r4, #0]
 8007cc6:	6063      	str	r3, [r4, #4]
 8007cc8:	6004      	str	r4, [r0, #0]
 8007cca:	e7ed      	b.n	8007ca8 <_free_r+0x24>
 8007ccc:	4613      	mov	r3, r2
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	b10a      	cbz	r2, 8007cd6 <_free_r+0x52>
 8007cd2:	42a2      	cmp	r2, r4
 8007cd4:	d9fa      	bls.n	8007ccc <_free_r+0x48>
 8007cd6:	6819      	ldr	r1, [r3, #0]
 8007cd8:	1858      	adds	r0, r3, r1
 8007cda:	42a0      	cmp	r0, r4
 8007cdc:	d10b      	bne.n	8007cf6 <_free_r+0x72>
 8007cde:	6820      	ldr	r0, [r4, #0]
 8007ce0:	4401      	add	r1, r0
 8007ce2:	1858      	adds	r0, r3, r1
 8007ce4:	4282      	cmp	r2, r0
 8007ce6:	6019      	str	r1, [r3, #0]
 8007ce8:	d1de      	bne.n	8007ca8 <_free_r+0x24>
 8007cea:	6810      	ldr	r0, [r2, #0]
 8007cec:	6852      	ldr	r2, [r2, #4]
 8007cee:	4401      	add	r1, r0
 8007cf0:	6019      	str	r1, [r3, #0]
 8007cf2:	605a      	str	r2, [r3, #4]
 8007cf4:	e7d8      	b.n	8007ca8 <_free_r+0x24>
 8007cf6:	d902      	bls.n	8007cfe <_free_r+0x7a>
 8007cf8:	230c      	movs	r3, #12
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	e7d4      	b.n	8007ca8 <_free_r+0x24>
 8007cfe:	6820      	ldr	r0, [r4, #0]
 8007d00:	1821      	adds	r1, r4, r0
 8007d02:	428a      	cmp	r2, r1
 8007d04:	bf01      	itttt	eq
 8007d06:	6811      	ldreq	r1, [r2, #0]
 8007d08:	6852      	ldreq	r2, [r2, #4]
 8007d0a:	1809      	addeq	r1, r1, r0
 8007d0c:	6021      	streq	r1, [r4, #0]
 8007d0e:	6062      	str	r2, [r4, #4]
 8007d10:	605c      	str	r4, [r3, #4]
 8007d12:	e7c9      	b.n	8007ca8 <_free_r+0x24>
 8007d14:	bd38      	pop	{r3, r4, r5, pc}
 8007d16:	bf00      	nop
 8007d18:	20000964 	.word	0x20000964

08007d1c <_malloc_r>:
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	1ccd      	adds	r5, r1, #3
 8007d20:	f025 0503 	bic.w	r5, r5, #3
 8007d24:	3508      	adds	r5, #8
 8007d26:	2d0c      	cmp	r5, #12
 8007d28:	bf38      	it	cc
 8007d2a:	250c      	movcc	r5, #12
 8007d2c:	2d00      	cmp	r5, #0
 8007d2e:	4606      	mov	r6, r0
 8007d30:	db01      	blt.n	8007d36 <_malloc_r+0x1a>
 8007d32:	42a9      	cmp	r1, r5
 8007d34:	d903      	bls.n	8007d3e <_malloc_r+0x22>
 8007d36:	230c      	movs	r3, #12
 8007d38:	6033      	str	r3, [r6, #0]
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	bd70      	pop	{r4, r5, r6, pc}
 8007d3e:	f000 f9c2 	bl	80080c6 <__malloc_lock>
 8007d42:	4a21      	ldr	r2, [pc, #132]	; (8007dc8 <_malloc_r+0xac>)
 8007d44:	6814      	ldr	r4, [r2, #0]
 8007d46:	4621      	mov	r1, r4
 8007d48:	b991      	cbnz	r1, 8007d70 <_malloc_r+0x54>
 8007d4a:	4c20      	ldr	r4, [pc, #128]	; (8007dcc <_malloc_r+0xb0>)
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	b91b      	cbnz	r3, 8007d58 <_malloc_r+0x3c>
 8007d50:	4630      	mov	r0, r6
 8007d52:	f000 f83d 	bl	8007dd0 <_sbrk_r>
 8007d56:	6020      	str	r0, [r4, #0]
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f000 f838 	bl	8007dd0 <_sbrk_r>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d124      	bne.n	8007dae <_malloc_r+0x92>
 8007d64:	230c      	movs	r3, #12
 8007d66:	4630      	mov	r0, r6
 8007d68:	6033      	str	r3, [r6, #0]
 8007d6a:	f000 f9ad 	bl	80080c8 <__malloc_unlock>
 8007d6e:	e7e4      	b.n	8007d3a <_malloc_r+0x1e>
 8007d70:	680b      	ldr	r3, [r1, #0]
 8007d72:	1b5b      	subs	r3, r3, r5
 8007d74:	d418      	bmi.n	8007da8 <_malloc_r+0x8c>
 8007d76:	2b0b      	cmp	r3, #11
 8007d78:	d90f      	bls.n	8007d9a <_malloc_r+0x7e>
 8007d7a:	600b      	str	r3, [r1, #0]
 8007d7c:	18cc      	adds	r4, r1, r3
 8007d7e:	50cd      	str	r5, [r1, r3]
 8007d80:	4630      	mov	r0, r6
 8007d82:	f000 f9a1 	bl	80080c8 <__malloc_unlock>
 8007d86:	f104 000b 	add.w	r0, r4, #11
 8007d8a:	1d23      	adds	r3, r4, #4
 8007d8c:	f020 0007 	bic.w	r0, r0, #7
 8007d90:	1ac3      	subs	r3, r0, r3
 8007d92:	d0d3      	beq.n	8007d3c <_malloc_r+0x20>
 8007d94:	425a      	negs	r2, r3
 8007d96:	50e2      	str	r2, [r4, r3]
 8007d98:	e7d0      	b.n	8007d3c <_malloc_r+0x20>
 8007d9a:	684b      	ldr	r3, [r1, #4]
 8007d9c:	428c      	cmp	r4, r1
 8007d9e:	bf16      	itet	ne
 8007da0:	6063      	strne	r3, [r4, #4]
 8007da2:	6013      	streq	r3, [r2, #0]
 8007da4:	460c      	movne	r4, r1
 8007da6:	e7eb      	b.n	8007d80 <_malloc_r+0x64>
 8007da8:	460c      	mov	r4, r1
 8007daa:	6849      	ldr	r1, [r1, #4]
 8007dac:	e7cc      	b.n	8007d48 <_malloc_r+0x2c>
 8007dae:	1cc4      	adds	r4, r0, #3
 8007db0:	f024 0403 	bic.w	r4, r4, #3
 8007db4:	42a0      	cmp	r0, r4
 8007db6:	d005      	beq.n	8007dc4 <_malloc_r+0xa8>
 8007db8:	1a21      	subs	r1, r4, r0
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f000 f808 	bl	8007dd0 <_sbrk_r>
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	d0cf      	beq.n	8007d64 <_malloc_r+0x48>
 8007dc4:	6025      	str	r5, [r4, #0]
 8007dc6:	e7db      	b.n	8007d80 <_malloc_r+0x64>
 8007dc8:	20000964 	.word	0x20000964
 8007dcc:	20000968 	.word	0x20000968

08007dd0 <_sbrk_r>:
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	4c05      	ldr	r4, [pc, #20]	; (8007dec <_sbrk_r+0x1c>)
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	4608      	mov	r0, r1
 8007dda:	6023      	str	r3, [r4, #0]
 8007ddc:	f7fe fe74 	bl	8006ac8 <_sbrk>
 8007de0:	1c43      	adds	r3, r0, #1
 8007de2:	d102      	bne.n	8007dea <_sbrk_r+0x1a>
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	b103      	cbz	r3, 8007dea <_sbrk_r+0x1a>
 8007de8:	602b      	str	r3, [r5, #0]
 8007dea:	bd38      	pop	{r3, r4, r5, pc}
 8007dec:	2000195c 	.word	0x2000195c

08007df0 <strcat>:
 8007df0:	4603      	mov	r3, r0
 8007df2:	b510      	push	{r4, lr}
 8007df4:	781a      	ldrb	r2, [r3, #0]
 8007df6:	1c5c      	adds	r4, r3, #1
 8007df8:	b93a      	cbnz	r2, 8007e0a <strcat+0x1a>
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e00:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e04:	2a00      	cmp	r2, #0
 8007e06:	d1f9      	bne.n	8007dfc <strcat+0xc>
 8007e08:	bd10      	pop	{r4, pc}
 8007e0a:	4623      	mov	r3, r4
 8007e0c:	e7f2      	b.n	8007df4 <strcat+0x4>

08007e0e <strncmp>:
 8007e0e:	b510      	push	{r4, lr}
 8007e10:	b16a      	cbz	r2, 8007e2e <strncmp+0x20>
 8007e12:	3901      	subs	r1, #1
 8007e14:	1884      	adds	r4, r0, r2
 8007e16:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007e1a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d103      	bne.n	8007e2a <strncmp+0x1c>
 8007e22:	42a0      	cmp	r0, r4
 8007e24:	d001      	beq.n	8007e2a <strncmp+0x1c>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1f5      	bne.n	8007e16 <strncmp+0x8>
 8007e2a:	1a98      	subs	r0, r3, r2
 8007e2c:	bd10      	pop	{r4, pc}
 8007e2e:	4610      	mov	r0, r2
 8007e30:	e7fc      	b.n	8007e2c <strncmp+0x1e>

08007e32 <strncpy>:
 8007e32:	b570      	push	{r4, r5, r6, lr}
 8007e34:	4604      	mov	r4, r0
 8007e36:	3901      	subs	r1, #1
 8007e38:	b902      	cbnz	r2, 8007e3c <strncpy+0xa>
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	4623      	mov	r3, r4
 8007e3e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8007e42:	1e56      	subs	r6, r2, #1
 8007e44:	f803 5b01 	strb.w	r5, [r3], #1
 8007e48:	b92d      	cbnz	r5, 8007e56 <strncpy+0x24>
 8007e4a:	4414      	add	r4, r2
 8007e4c:	42a3      	cmp	r3, r4
 8007e4e:	d0f4      	beq.n	8007e3a <strncpy+0x8>
 8007e50:	f803 5b01 	strb.w	r5, [r3], #1
 8007e54:	e7fa      	b.n	8007e4c <strncpy+0x1a>
 8007e56:	461c      	mov	r4, r3
 8007e58:	4632      	mov	r2, r6
 8007e5a:	e7ed      	b.n	8007e38 <strncpy+0x6>

08007e5c <strtok>:
 8007e5c:	4b13      	ldr	r3, [pc, #76]	; (8007eac <strtok+0x50>)
 8007e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e62:	681d      	ldr	r5, [r3, #0]
 8007e64:	4606      	mov	r6, r0
 8007e66:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8007e68:	460f      	mov	r7, r1
 8007e6a:	b9b4      	cbnz	r4, 8007e9a <strtok+0x3e>
 8007e6c:	2050      	movs	r0, #80	; 0x50
 8007e6e:	f7ff fed7 	bl	8007c20 <malloc>
 8007e72:	65a8      	str	r0, [r5, #88]	; 0x58
 8007e74:	e9c0 4400 	strd	r4, r4, [r0]
 8007e78:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007e7c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007e80:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007e84:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007e88:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007e8c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007e90:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007e94:	6184      	str	r4, [r0, #24]
 8007e96:	7704      	strb	r4, [r0, #28]
 8007e98:	6244      	str	r4, [r0, #36]	; 0x24
 8007e9a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f000 b803 	b.w	8007eb0 <__strtok_r>
 8007eaa:	bf00      	nop
 8007eac:	20000204 	.word	0x20000204

08007eb0 <__strtok_r>:
 8007eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eb2:	b918      	cbnz	r0, 8007ebc <__strtok_r+0xc>
 8007eb4:	6810      	ldr	r0, [r2, #0]
 8007eb6:	b908      	cbnz	r0, 8007ebc <__strtok_r+0xc>
 8007eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eba:	4620      	mov	r0, r4
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	460f      	mov	r7, r1
 8007ec0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007ec4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007ec8:	b91e      	cbnz	r6, 8007ed2 <__strtok_r+0x22>
 8007eca:	b96d      	cbnz	r5, 8007ee8 <__strtok_r+0x38>
 8007ecc:	6015      	str	r5, [r2, #0]
 8007ece:	4628      	mov	r0, r5
 8007ed0:	e7f2      	b.n	8007eb8 <__strtok_r+0x8>
 8007ed2:	42b5      	cmp	r5, r6
 8007ed4:	d1f6      	bne.n	8007ec4 <__strtok_r+0x14>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1ef      	bne.n	8007eba <__strtok_r+0xa>
 8007eda:	6014      	str	r4, [r2, #0]
 8007edc:	7003      	strb	r3, [r0, #0]
 8007ede:	e7eb      	b.n	8007eb8 <__strtok_r+0x8>
 8007ee0:	462b      	mov	r3, r5
 8007ee2:	e00d      	b.n	8007f00 <__strtok_r+0x50>
 8007ee4:	b926      	cbnz	r6, 8007ef0 <__strtok_r+0x40>
 8007ee6:	461c      	mov	r4, r3
 8007ee8:	4623      	mov	r3, r4
 8007eea:	460f      	mov	r7, r1
 8007eec:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007ef0:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007ef4:	42b5      	cmp	r5, r6
 8007ef6:	d1f5      	bne.n	8007ee4 <__strtok_r+0x34>
 8007ef8:	2d00      	cmp	r5, #0
 8007efa:	d0f1      	beq.n	8007ee0 <__strtok_r+0x30>
 8007efc:	2100      	movs	r1, #0
 8007efe:	7021      	strb	r1, [r4, #0]
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	e7d9      	b.n	8007eb8 <__strtok_r+0x8>

08007f04 <_strtol_l.isra.0>:
 8007f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f08:	4680      	mov	r8, r0
 8007f0a:	4689      	mov	r9, r1
 8007f0c:	4692      	mov	sl, r2
 8007f0e:	461e      	mov	r6, r3
 8007f10:	460f      	mov	r7, r1
 8007f12:	463d      	mov	r5, r7
 8007f14:	9808      	ldr	r0, [sp, #32]
 8007f16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f1a:	f000 f8bf 	bl	800809c <__locale_ctype_ptr_l>
 8007f1e:	4420      	add	r0, r4
 8007f20:	7843      	ldrb	r3, [r0, #1]
 8007f22:	f013 0308 	ands.w	r3, r3, #8
 8007f26:	d132      	bne.n	8007f8e <_strtol_l.isra.0+0x8a>
 8007f28:	2c2d      	cmp	r4, #45	; 0x2d
 8007f2a:	d132      	bne.n	8007f92 <_strtol_l.isra.0+0x8e>
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	787c      	ldrb	r4, [r7, #1]
 8007f30:	1cbd      	adds	r5, r7, #2
 8007f32:	2e00      	cmp	r6, #0
 8007f34:	d05d      	beq.n	8007ff2 <_strtol_l.isra.0+0xee>
 8007f36:	2e10      	cmp	r6, #16
 8007f38:	d109      	bne.n	8007f4e <_strtol_l.isra.0+0x4a>
 8007f3a:	2c30      	cmp	r4, #48	; 0x30
 8007f3c:	d107      	bne.n	8007f4e <_strtol_l.isra.0+0x4a>
 8007f3e:	782b      	ldrb	r3, [r5, #0]
 8007f40:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007f44:	2b58      	cmp	r3, #88	; 0x58
 8007f46:	d14f      	bne.n	8007fe8 <_strtol_l.isra.0+0xe4>
 8007f48:	2610      	movs	r6, #16
 8007f4a:	786c      	ldrb	r4, [r5, #1]
 8007f4c:	3502      	adds	r5, #2
 8007f4e:	2a00      	cmp	r2, #0
 8007f50:	bf14      	ite	ne
 8007f52:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007f56:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007f5a:	2700      	movs	r7, #0
 8007f5c:	fbb1 fcf6 	udiv	ip, r1, r6
 8007f60:	4638      	mov	r0, r7
 8007f62:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007f66:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007f6a:	2b09      	cmp	r3, #9
 8007f6c:	d817      	bhi.n	8007f9e <_strtol_l.isra.0+0x9a>
 8007f6e:	461c      	mov	r4, r3
 8007f70:	42a6      	cmp	r6, r4
 8007f72:	dd23      	ble.n	8007fbc <_strtol_l.isra.0+0xb8>
 8007f74:	1c7b      	adds	r3, r7, #1
 8007f76:	d007      	beq.n	8007f88 <_strtol_l.isra.0+0x84>
 8007f78:	4584      	cmp	ip, r0
 8007f7a:	d31c      	bcc.n	8007fb6 <_strtol_l.isra.0+0xb2>
 8007f7c:	d101      	bne.n	8007f82 <_strtol_l.isra.0+0x7e>
 8007f7e:	45a6      	cmp	lr, r4
 8007f80:	db19      	blt.n	8007fb6 <_strtol_l.isra.0+0xb2>
 8007f82:	2701      	movs	r7, #1
 8007f84:	fb00 4006 	mla	r0, r0, r6, r4
 8007f88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f8c:	e7eb      	b.n	8007f66 <_strtol_l.isra.0+0x62>
 8007f8e:	462f      	mov	r7, r5
 8007f90:	e7bf      	b.n	8007f12 <_strtol_l.isra.0+0xe>
 8007f92:	2c2b      	cmp	r4, #43	; 0x2b
 8007f94:	bf04      	itt	eq
 8007f96:	1cbd      	addeq	r5, r7, #2
 8007f98:	787c      	ldrbeq	r4, [r7, #1]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	e7c9      	b.n	8007f32 <_strtol_l.isra.0+0x2e>
 8007f9e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007fa2:	2b19      	cmp	r3, #25
 8007fa4:	d801      	bhi.n	8007faa <_strtol_l.isra.0+0xa6>
 8007fa6:	3c37      	subs	r4, #55	; 0x37
 8007fa8:	e7e2      	b.n	8007f70 <_strtol_l.isra.0+0x6c>
 8007faa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007fae:	2b19      	cmp	r3, #25
 8007fb0:	d804      	bhi.n	8007fbc <_strtol_l.isra.0+0xb8>
 8007fb2:	3c57      	subs	r4, #87	; 0x57
 8007fb4:	e7dc      	b.n	8007f70 <_strtol_l.isra.0+0x6c>
 8007fb6:	f04f 37ff 	mov.w	r7, #4294967295
 8007fba:	e7e5      	b.n	8007f88 <_strtol_l.isra.0+0x84>
 8007fbc:	1c7b      	adds	r3, r7, #1
 8007fbe:	d108      	bne.n	8007fd2 <_strtol_l.isra.0+0xce>
 8007fc0:	2322      	movs	r3, #34	; 0x22
 8007fc2:	4608      	mov	r0, r1
 8007fc4:	f8c8 3000 	str.w	r3, [r8]
 8007fc8:	f1ba 0f00 	cmp.w	sl, #0
 8007fcc:	d107      	bne.n	8007fde <_strtol_l.isra.0+0xda>
 8007fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd2:	b102      	cbz	r2, 8007fd6 <_strtol_l.isra.0+0xd2>
 8007fd4:	4240      	negs	r0, r0
 8007fd6:	f1ba 0f00 	cmp.w	sl, #0
 8007fda:	d0f8      	beq.n	8007fce <_strtol_l.isra.0+0xca>
 8007fdc:	b10f      	cbz	r7, 8007fe2 <_strtol_l.isra.0+0xde>
 8007fde:	f105 39ff 	add.w	r9, r5, #4294967295
 8007fe2:	f8ca 9000 	str.w	r9, [sl]
 8007fe6:	e7f2      	b.n	8007fce <_strtol_l.isra.0+0xca>
 8007fe8:	2430      	movs	r4, #48	; 0x30
 8007fea:	2e00      	cmp	r6, #0
 8007fec:	d1af      	bne.n	8007f4e <_strtol_l.isra.0+0x4a>
 8007fee:	2608      	movs	r6, #8
 8007ff0:	e7ad      	b.n	8007f4e <_strtol_l.isra.0+0x4a>
 8007ff2:	2c30      	cmp	r4, #48	; 0x30
 8007ff4:	d0a3      	beq.n	8007f3e <_strtol_l.isra.0+0x3a>
 8007ff6:	260a      	movs	r6, #10
 8007ff8:	e7a9      	b.n	8007f4e <_strtol_l.isra.0+0x4a>
	...

08007ffc <strtol>:
 8007ffc:	4b08      	ldr	r3, [pc, #32]	; (8008020 <strtol+0x24>)
 8007ffe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008000:	681c      	ldr	r4, [r3, #0]
 8008002:	4d08      	ldr	r5, [pc, #32]	; (8008024 <strtol+0x28>)
 8008004:	6a23      	ldr	r3, [r4, #32]
 8008006:	2b00      	cmp	r3, #0
 8008008:	bf08      	it	eq
 800800a:	462b      	moveq	r3, r5
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	4613      	mov	r3, r2
 8008010:	460a      	mov	r2, r1
 8008012:	4601      	mov	r1, r0
 8008014:	4620      	mov	r0, r4
 8008016:	f7ff ff75 	bl	8007f04 <_strtol_l.isra.0>
 800801a:	b003      	add	sp, #12
 800801c:	bd30      	pop	{r4, r5, pc}
 800801e:	bf00      	nop
 8008020:	20000204 	.word	0x20000204
 8008024:	20000268 	.word	0x20000268

08008028 <_vsniprintf_r>:
 8008028:	b530      	push	{r4, r5, lr}
 800802a:	1e14      	subs	r4, r2, #0
 800802c:	4605      	mov	r5, r0
 800802e:	b09b      	sub	sp, #108	; 0x6c
 8008030:	4618      	mov	r0, r3
 8008032:	da05      	bge.n	8008040 <_vsniprintf_r+0x18>
 8008034:	238b      	movs	r3, #139	; 0x8b
 8008036:	f04f 30ff 	mov.w	r0, #4294967295
 800803a:	602b      	str	r3, [r5, #0]
 800803c:	b01b      	add	sp, #108	; 0x6c
 800803e:	bd30      	pop	{r4, r5, pc}
 8008040:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008044:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008048:	bf0c      	ite	eq
 800804a:	4623      	moveq	r3, r4
 800804c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008050:	9302      	str	r3, [sp, #8]
 8008052:	9305      	str	r3, [sp, #20]
 8008054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008058:	9100      	str	r1, [sp, #0]
 800805a:	9104      	str	r1, [sp, #16]
 800805c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008060:	4602      	mov	r2, r0
 8008062:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008064:	4669      	mov	r1, sp
 8008066:	4628      	mov	r0, r5
 8008068:	f000 f88a 	bl	8008180 <_svfiprintf_r>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	bfbc      	itt	lt
 8008070:	238b      	movlt	r3, #139	; 0x8b
 8008072:	602b      	strlt	r3, [r5, #0]
 8008074:	2c00      	cmp	r4, #0
 8008076:	d0e1      	beq.n	800803c <_vsniprintf_r+0x14>
 8008078:	2200      	movs	r2, #0
 800807a:	9b00      	ldr	r3, [sp, #0]
 800807c:	701a      	strb	r2, [r3, #0]
 800807e:	e7dd      	b.n	800803c <_vsniprintf_r+0x14>

08008080 <vsniprintf>:
 8008080:	b507      	push	{r0, r1, r2, lr}
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	4613      	mov	r3, r2
 8008086:	460a      	mov	r2, r1
 8008088:	4601      	mov	r1, r0
 800808a:	4803      	ldr	r0, [pc, #12]	; (8008098 <vsniprintf+0x18>)
 800808c:	6800      	ldr	r0, [r0, #0]
 800808e:	f7ff ffcb 	bl	8008028 <_vsniprintf_r>
 8008092:	b003      	add	sp, #12
 8008094:	f85d fb04 	ldr.w	pc, [sp], #4
 8008098:	20000204 	.word	0x20000204

0800809c <__locale_ctype_ptr_l>:
 800809c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80080a0:	4770      	bx	lr

080080a2 <__ascii_mbtowc>:
 80080a2:	b082      	sub	sp, #8
 80080a4:	b901      	cbnz	r1, 80080a8 <__ascii_mbtowc+0x6>
 80080a6:	a901      	add	r1, sp, #4
 80080a8:	b142      	cbz	r2, 80080bc <__ascii_mbtowc+0x1a>
 80080aa:	b14b      	cbz	r3, 80080c0 <__ascii_mbtowc+0x1e>
 80080ac:	7813      	ldrb	r3, [r2, #0]
 80080ae:	600b      	str	r3, [r1, #0]
 80080b0:	7812      	ldrb	r2, [r2, #0]
 80080b2:	1c10      	adds	r0, r2, #0
 80080b4:	bf18      	it	ne
 80080b6:	2001      	movne	r0, #1
 80080b8:	b002      	add	sp, #8
 80080ba:	4770      	bx	lr
 80080bc:	4610      	mov	r0, r2
 80080be:	e7fb      	b.n	80080b8 <__ascii_mbtowc+0x16>
 80080c0:	f06f 0001 	mvn.w	r0, #1
 80080c4:	e7f8      	b.n	80080b8 <__ascii_mbtowc+0x16>

080080c6 <__malloc_lock>:
 80080c6:	4770      	bx	lr

080080c8 <__malloc_unlock>:
 80080c8:	4770      	bx	lr

080080ca <__ssputs_r>:
 80080ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080ce:	688e      	ldr	r6, [r1, #8]
 80080d0:	4682      	mov	sl, r0
 80080d2:	429e      	cmp	r6, r3
 80080d4:	460c      	mov	r4, r1
 80080d6:	4690      	mov	r8, r2
 80080d8:	4699      	mov	r9, r3
 80080da:	d837      	bhi.n	800814c <__ssputs_r+0x82>
 80080dc:	898a      	ldrh	r2, [r1, #12]
 80080de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080e2:	d031      	beq.n	8008148 <__ssputs_r+0x7e>
 80080e4:	2302      	movs	r3, #2
 80080e6:	6825      	ldr	r5, [r4, #0]
 80080e8:	6909      	ldr	r1, [r1, #16]
 80080ea:	1a6f      	subs	r7, r5, r1
 80080ec:	6965      	ldr	r5, [r4, #20]
 80080ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080f2:	fb95 f5f3 	sdiv	r5, r5, r3
 80080f6:	f109 0301 	add.w	r3, r9, #1
 80080fa:	443b      	add	r3, r7
 80080fc:	429d      	cmp	r5, r3
 80080fe:	bf38      	it	cc
 8008100:	461d      	movcc	r5, r3
 8008102:	0553      	lsls	r3, r2, #21
 8008104:	d530      	bpl.n	8008168 <__ssputs_r+0x9e>
 8008106:	4629      	mov	r1, r5
 8008108:	f7ff fe08 	bl	8007d1c <_malloc_r>
 800810c:	4606      	mov	r6, r0
 800810e:	b950      	cbnz	r0, 8008126 <__ssputs_r+0x5c>
 8008110:	230c      	movs	r3, #12
 8008112:	f04f 30ff 	mov.w	r0, #4294967295
 8008116:	f8ca 3000 	str.w	r3, [sl]
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008120:	81a3      	strh	r3, [r4, #12]
 8008122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008126:	463a      	mov	r2, r7
 8008128:	6921      	ldr	r1, [r4, #16]
 800812a:	f7ff fd89 	bl	8007c40 <memcpy>
 800812e:	89a3      	ldrh	r3, [r4, #12]
 8008130:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008138:	81a3      	strh	r3, [r4, #12]
 800813a:	6126      	str	r6, [r4, #16]
 800813c:	443e      	add	r6, r7
 800813e:	6026      	str	r6, [r4, #0]
 8008140:	464e      	mov	r6, r9
 8008142:	6165      	str	r5, [r4, #20]
 8008144:	1bed      	subs	r5, r5, r7
 8008146:	60a5      	str	r5, [r4, #8]
 8008148:	454e      	cmp	r6, r9
 800814a:	d900      	bls.n	800814e <__ssputs_r+0x84>
 800814c:	464e      	mov	r6, r9
 800814e:	4632      	mov	r2, r6
 8008150:	4641      	mov	r1, r8
 8008152:	6820      	ldr	r0, [r4, #0]
 8008154:	f000 faaf 	bl	80086b6 <memmove>
 8008158:	68a3      	ldr	r3, [r4, #8]
 800815a:	2000      	movs	r0, #0
 800815c:	1b9b      	subs	r3, r3, r6
 800815e:	60a3      	str	r3, [r4, #8]
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	441e      	add	r6, r3
 8008164:	6026      	str	r6, [r4, #0]
 8008166:	e7dc      	b.n	8008122 <__ssputs_r+0x58>
 8008168:	462a      	mov	r2, r5
 800816a:	f000 fabd 	bl	80086e8 <_realloc_r>
 800816e:	4606      	mov	r6, r0
 8008170:	2800      	cmp	r0, #0
 8008172:	d1e2      	bne.n	800813a <__ssputs_r+0x70>
 8008174:	6921      	ldr	r1, [r4, #16]
 8008176:	4650      	mov	r0, sl
 8008178:	f7ff fd84 	bl	8007c84 <_free_r>
 800817c:	e7c8      	b.n	8008110 <__ssputs_r+0x46>
	...

08008180 <_svfiprintf_r>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	461d      	mov	r5, r3
 8008186:	898b      	ldrh	r3, [r1, #12]
 8008188:	b09d      	sub	sp, #116	; 0x74
 800818a:	061f      	lsls	r7, r3, #24
 800818c:	4680      	mov	r8, r0
 800818e:	460c      	mov	r4, r1
 8008190:	4616      	mov	r6, r2
 8008192:	d50f      	bpl.n	80081b4 <_svfiprintf_r+0x34>
 8008194:	690b      	ldr	r3, [r1, #16]
 8008196:	b96b      	cbnz	r3, 80081b4 <_svfiprintf_r+0x34>
 8008198:	2140      	movs	r1, #64	; 0x40
 800819a:	f7ff fdbf 	bl	8007d1c <_malloc_r>
 800819e:	6020      	str	r0, [r4, #0]
 80081a0:	6120      	str	r0, [r4, #16]
 80081a2:	b928      	cbnz	r0, 80081b0 <_svfiprintf_r+0x30>
 80081a4:	230c      	movs	r3, #12
 80081a6:	f8c8 3000 	str.w	r3, [r8]
 80081aa:	f04f 30ff 	mov.w	r0, #4294967295
 80081ae:	e0c8      	b.n	8008342 <_svfiprintf_r+0x1c2>
 80081b0:	2340      	movs	r3, #64	; 0x40
 80081b2:	6163      	str	r3, [r4, #20]
 80081b4:	2300      	movs	r3, #0
 80081b6:	9309      	str	r3, [sp, #36]	; 0x24
 80081b8:	2320      	movs	r3, #32
 80081ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081be:	2330      	movs	r3, #48	; 0x30
 80081c0:	f04f 0b01 	mov.w	fp, #1
 80081c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081c8:	9503      	str	r5, [sp, #12]
 80081ca:	4637      	mov	r7, r6
 80081cc:	463d      	mov	r5, r7
 80081ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80081d2:	b10b      	cbz	r3, 80081d8 <_svfiprintf_r+0x58>
 80081d4:	2b25      	cmp	r3, #37	; 0x25
 80081d6:	d13e      	bne.n	8008256 <_svfiprintf_r+0xd6>
 80081d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80081dc:	d00b      	beq.n	80081f6 <_svfiprintf_r+0x76>
 80081de:	4653      	mov	r3, sl
 80081e0:	4632      	mov	r2, r6
 80081e2:	4621      	mov	r1, r4
 80081e4:	4640      	mov	r0, r8
 80081e6:	f7ff ff70 	bl	80080ca <__ssputs_r>
 80081ea:	3001      	adds	r0, #1
 80081ec:	f000 80a4 	beq.w	8008338 <_svfiprintf_r+0x1b8>
 80081f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f2:	4453      	add	r3, sl
 80081f4:	9309      	str	r3, [sp, #36]	; 0x24
 80081f6:	783b      	ldrb	r3, [r7, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 809d 	beq.w	8008338 <_svfiprintf_r+0x1b8>
 80081fe:	2300      	movs	r3, #0
 8008200:	f04f 32ff 	mov.w	r2, #4294967295
 8008204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008208:	9304      	str	r3, [sp, #16]
 800820a:	9307      	str	r3, [sp, #28]
 800820c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008210:	931a      	str	r3, [sp, #104]	; 0x68
 8008212:	462f      	mov	r7, r5
 8008214:	2205      	movs	r2, #5
 8008216:	f817 1b01 	ldrb.w	r1, [r7], #1
 800821a:	4850      	ldr	r0, [pc, #320]	; (800835c <_svfiprintf_r+0x1dc>)
 800821c:	f000 fa3d 	bl	800869a <memchr>
 8008220:	9b04      	ldr	r3, [sp, #16]
 8008222:	b9d0      	cbnz	r0, 800825a <_svfiprintf_r+0xda>
 8008224:	06d9      	lsls	r1, r3, #27
 8008226:	bf44      	itt	mi
 8008228:	2220      	movmi	r2, #32
 800822a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800822e:	071a      	lsls	r2, r3, #28
 8008230:	bf44      	itt	mi
 8008232:	222b      	movmi	r2, #43	; 0x2b
 8008234:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008238:	782a      	ldrb	r2, [r5, #0]
 800823a:	2a2a      	cmp	r2, #42	; 0x2a
 800823c:	d015      	beq.n	800826a <_svfiprintf_r+0xea>
 800823e:	462f      	mov	r7, r5
 8008240:	2000      	movs	r0, #0
 8008242:	250a      	movs	r5, #10
 8008244:	9a07      	ldr	r2, [sp, #28]
 8008246:	4639      	mov	r1, r7
 8008248:	f811 3b01 	ldrb.w	r3, [r1], #1
 800824c:	3b30      	subs	r3, #48	; 0x30
 800824e:	2b09      	cmp	r3, #9
 8008250:	d94d      	bls.n	80082ee <_svfiprintf_r+0x16e>
 8008252:	b1b8      	cbz	r0, 8008284 <_svfiprintf_r+0x104>
 8008254:	e00f      	b.n	8008276 <_svfiprintf_r+0xf6>
 8008256:	462f      	mov	r7, r5
 8008258:	e7b8      	b.n	80081cc <_svfiprintf_r+0x4c>
 800825a:	4a40      	ldr	r2, [pc, #256]	; (800835c <_svfiprintf_r+0x1dc>)
 800825c:	463d      	mov	r5, r7
 800825e:	1a80      	subs	r0, r0, r2
 8008260:	fa0b f000 	lsl.w	r0, fp, r0
 8008264:	4318      	orrs	r0, r3
 8008266:	9004      	str	r0, [sp, #16]
 8008268:	e7d3      	b.n	8008212 <_svfiprintf_r+0x92>
 800826a:	9a03      	ldr	r2, [sp, #12]
 800826c:	1d11      	adds	r1, r2, #4
 800826e:	6812      	ldr	r2, [r2, #0]
 8008270:	9103      	str	r1, [sp, #12]
 8008272:	2a00      	cmp	r2, #0
 8008274:	db01      	blt.n	800827a <_svfiprintf_r+0xfa>
 8008276:	9207      	str	r2, [sp, #28]
 8008278:	e004      	b.n	8008284 <_svfiprintf_r+0x104>
 800827a:	4252      	negs	r2, r2
 800827c:	f043 0302 	orr.w	r3, r3, #2
 8008280:	9207      	str	r2, [sp, #28]
 8008282:	9304      	str	r3, [sp, #16]
 8008284:	783b      	ldrb	r3, [r7, #0]
 8008286:	2b2e      	cmp	r3, #46	; 0x2e
 8008288:	d10c      	bne.n	80082a4 <_svfiprintf_r+0x124>
 800828a:	787b      	ldrb	r3, [r7, #1]
 800828c:	2b2a      	cmp	r3, #42	; 0x2a
 800828e:	d133      	bne.n	80082f8 <_svfiprintf_r+0x178>
 8008290:	9b03      	ldr	r3, [sp, #12]
 8008292:	3702      	adds	r7, #2
 8008294:	1d1a      	adds	r2, r3, #4
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	9203      	str	r2, [sp, #12]
 800829a:	2b00      	cmp	r3, #0
 800829c:	bfb8      	it	lt
 800829e:	f04f 33ff 	movlt.w	r3, #4294967295
 80082a2:	9305      	str	r3, [sp, #20]
 80082a4:	4d2e      	ldr	r5, [pc, #184]	; (8008360 <_svfiprintf_r+0x1e0>)
 80082a6:	2203      	movs	r2, #3
 80082a8:	7839      	ldrb	r1, [r7, #0]
 80082aa:	4628      	mov	r0, r5
 80082ac:	f000 f9f5 	bl	800869a <memchr>
 80082b0:	b138      	cbz	r0, 80082c2 <_svfiprintf_r+0x142>
 80082b2:	2340      	movs	r3, #64	; 0x40
 80082b4:	1b40      	subs	r0, r0, r5
 80082b6:	fa03 f000 	lsl.w	r0, r3, r0
 80082ba:	9b04      	ldr	r3, [sp, #16]
 80082bc:	3701      	adds	r7, #1
 80082be:	4303      	orrs	r3, r0
 80082c0:	9304      	str	r3, [sp, #16]
 80082c2:	7839      	ldrb	r1, [r7, #0]
 80082c4:	2206      	movs	r2, #6
 80082c6:	4827      	ldr	r0, [pc, #156]	; (8008364 <_svfiprintf_r+0x1e4>)
 80082c8:	1c7e      	adds	r6, r7, #1
 80082ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082ce:	f000 f9e4 	bl	800869a <memchr>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d038      	beq.n	8008348 <_svfiprintf_r+0x1c8>
 80082d6:	4b24      	ldr	r3, [pc, #144]	; (8008368 <_svfiprintf_r+0x1e8>)
 80082d8:	bb13      	cbnz	r3, 8008320 <_svfiprintf_r+0x1a0>
 80082da:	9b03      	ldr	r3, [sp, #12]
 80082dc:	3307      	adds	r3, #7
 80082de:	f023 0307 	bic.w	r3, r3, #7
 80082e2:	3308      	adds	r3, #8
 80082e4:	9303      	str	r3, [sp, #12]
 80082e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082e8:	444b      	add	r3, r9
 80082ea:	9309      	str	r3, [sp, #36]	; 0x24
 80082ec:	e76d      	b.n	80081ca <_svfiprintf_r+0x4a>
 80082ee:	fb05 3202 	mla	r2, r5, r2, r3
 80082f2:	2001      	movs	r0, #1
 80082f4:	460f      	mov	r7, r1
 80082f6:	e7a6      	b.n	8008246 <_svfiprintf_r+0xc6>
 80082f8:	2300      	movs	r3, #0
 80082fa:	250a      	movs	r5, #10
 80082fc:	4619      	mov	r1, r3
 80082fe:	3701      	adds	r7, #1
 8008300:	9305      	str	r3, [sp, #20]
 8008302:	4638      	mov	r0, r7
 8008304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008308:	3a30      	subs	r2, #48	; 0x30
 800830a:	2a09      	cmp	r2, #9
 800830c:	d903      	bls.n	8008316 <_svfiprintf_r+0x196>
 800830e:	2b00      	cmp	r3, #0
 8008310:	d0c8      	beq.n	80082a4 <_svfiprintf_r+0x124>
 8008312:	9105      	str	r1, [sp, #20]
 8008314:	e7c6      	b.n	80082a4 <_svfiprintf_r+0x124>
 8008316:	fb05 2101 	mla	r1, r5, r1, r2
 800831a:	2301      	movs	r3, #1
 800831c:	4607      	mov	r7, r0
 800831e:	e7f0      	b.n	8008302 <_svfiprintf_r+0x182>
 8008320:	ab03      	add	r3, sp, #12
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	4622      	mov	r2, r4
 8008326:	4b11      	ldr	r3, [pc, #68]	; (800836c <_svfiprintf_r+0x1ec>)
 8008328:	a904      	add	r1, sp, #16
 800832a:	4640      	mov	r0, r8
 800832c:	f3af 8000 	nop.w
 8008330:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008334:	4681      	mov	r9, r0
 8008336:	d1d6      	bne.n	80082e6 <_svfiprintf_r+0x166>
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	065b      	lsls	r3, r3, #25
 800833c:	f53f af35 	bmi.w	80081aa <_svfiprintf_r+0x2a>
 8008340:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008342:	b01d      	add	sp, #116	; 0x74
 8008344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008348:	ab03      	add	r3, sp, #12
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	4622      	mov	r2, r4
 800834e:	4b07      	ldr	r3, [pc, #28]	; (800836c <_svfiprintf_r+0x1ec>)
 8008350:	a904      	add	r1, sp, #16
 8008352:	4640      	mov	r0, r8
 8008354:	f000 f882 	bl	800845c <_printf_i>
 8008358:	e7ea      	b.n	8008330 <_svfiprintf_r+0x1b0>
 800835a:	bf00      	nop
 800835c:	0800aa42 	.word	0x0800aa42
 8008360:	0800aa48 	.word	0x0800aa48
 8008364:	0800aa4c 	.word	0x0800aa4c
 8008368:	00000000 	.word	0x00000000
 800836c:	080080cb 	.word	0x080080cb

08008370 <_printf_common>:
 8008370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008374:	4691      	mov	r9, r2
 8008376:	461f      	mov	r7, r3
 8008378:	688a      	ldr	r2, [r1, #8]
 800837a:	690b      	ldr	r3, [r1, #16]
 800837c:	4606      	mov	r6, r0
 800837e:	4293      	cmp	r3, r2
 8008380:	bfb8      	it	lt
 8008382:	4613      	movlt	r3, r2
 8008384:	f8c9 3000 	str.w	r3, [r9]
 8008388:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800838c:	460c      	mov	r4, r1
 800838e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008392:	b112      	cbz	r2, 800839a <_printf_common+0x2a>
 8008394:	3301      	adds	r3, #1
 8008396:	f8c9 3000 	str.w	r3, [r9]
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	0699      	lsls	r1, r3, #26
 800839e:	bf42      	ittt	mi
 80083a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80083a4:	3302      	addmi	r3, #2
 80083a6:	f8c9 3000 	strmi.w	r3, [r9]
 80083aa:	6825      	ldr	r5, [r4, #0]
 80083ac:	f015 0506 	ands.w	r5, r5, #6
 80083b0:	d107      	bne.n	80083c2 <_printf_common+0x52>
 80083b2:	f104 0a19 	add.w	sl, r4, #25
 80083b6:	68e3      	ldr	r3, [r4, #12]
 80083b8:	f8d9 2000 	ldr.w	r2, [r9]
 80083bc:	1a9b      	subs	r3, r3, r2
 80083be:	42ab      	cmp	r3, r5
 80083c0:	dc29      	bgt.n	8008416 <_printf_common+0xa6>
 80083c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80083c6:	6822      	ldr	r2, [r4, #0]
 80083c8:	3300      	adds	r3, #0
 80083ca:	bf18      	it	ne
 80083cc:	2301      	movne	r3, #1
 80083ce:	0692      	lsls	r2, r2, #26
 80083d0:	d42e      	bmi.n	8008430 <_printf_common+0xc0>
 80083d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083d6:	4639      	mov	r1, r7
 80083d8:	4630      	mov	r0, r6
 80083da:	47c0      	blx	r8
 80083dc:	3001      	adds	r0, #1
 80083de:	d021      	beq.n	8008424 <_printf_common+0xb4>
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	68e5      	ldr	r5, [r4, #12]
 80083e4:	f003 0306 	and.w	r3, r3, #6
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	bf18      	it	ne
 80083ec:	2500      	movne	r5, #0
 80083ee:	f8d9 2000 	ldr.w	r2, [r9]
 80083f2:	f04f 0900 	mov.w	r9, #0
 80083f6:	bf08      	it	eq
 80083f8:	1aad      	subeq	r5, r5, r2
 80083fa:	68a3      	ldr	r3, [r4, #8]
 80083fc:	6922      	ldr	r2, [r4, #16]
 80083fe:	bf08      	it	eq
 8008400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008404:	4293      	cmp	r3, r2
 8008406:	bfc4      	itt	gt
 8008408:	1a9b      	subgt	r3, r3, r2
 800840a:	18ed      	addgt	r5, r5, r3
 800840c:	341a      	adds	r4, #26
 800840e:	454d      	cmp	r5, r9
 8008410:	d11a      	bne.n	8008448 <_printf_common+0xd8>
 8008412:	2000      	movs	r0, #0
 8008414:	e008      	b.n	8008428 <_printf_common+0xb8>
 8008416:	2301      	movs	r3, #1
 8008418:	4652      	mov	r2, sl
 800841a:	4639      	mov	r1, r7
 800841c:	4630      	mov	r0, r6
 800841e:	47c0      	blx	r8
 8008420:	3001      	adds	r0, #1
 8008422:	d103      	bne.n	800842c <_printf_common+0xbc>
 8008424:	f04f 30ff 	mov.w	r0, #4294967295
 8008428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842c:	3501      	adds	r5, #1
 800842e:	e7c2      	b.n	80083b6 <_printf_common+0x46>
 8008430:	2030      	movs	r0, #48	; 0x30
 8008432:	18e1      	adds	r1, r4, r3
 8008434:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800843e:	4422      	add	r2, r4
 8008440:	3302      	adds	r3, #2
 8008442:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008446:	e7c4      	b.n	80083d2 <_printf_common+0x62>
 8008448:	2301      	movs	r3, #1
 800844a:	4622      	mov	r2, r4
 800844c:	4639      	mov	r1, r7
 800844e:	4630      	mov	r0, r6
 8008450:	47c0      	blx	r8
 8008452:	3001      	adds	r0, #1
 8008454:	d0e6      	beq.n	8008424 <_printf_common+0xb4>
 8008456:	f109 0901 	add.w	r9, r9, #1
 800845a:	e7d8      	b.n	800840e <_printf_common+0x9e>

0800845c <_printf_i>:
 800845c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008460:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008464:	460c      	mov	r4, r1
 8008466:	7e09      	ldrb	r1, [r1, #24]
 8008468:	b085      	sub	sp, #20
 800846a:	296e      	cmp	r1, #110	; 0x6e
 800846c:	4617      	mov	r7, r2
 800846e:	4606      	mov	r6, r0
 8008470:	4698      	mov	r8, r3
 8008472:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008474:	f000 80b3 	beq.w	80085de <_printf_i+0x182>
 8008478:	d822      	bhi.n	80084c0 <_printf_i+0x64>
 800847a:	2963      	cmp	r1, #99	; 0x63
 800847c:	d036      	beq.n	80084ec <_printf_i+0x90>
 800847e:	d80a      	bhi.n	8008496 <_printf_i+0x3a>
 8008480:	2900      	cmp	r1, #0
 8008482:	f000 80b9 	beq.w	80085f8 <_printf_i+0x19c>
 8008486:	2958      	cmp	r1, #88	; 0x58
 8008488:	f000 8083 	beq.w	8008592 <_printf_i+0x136>
 800848c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008490:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008494:	e032      	b.n	80084fc <_printf_i+0xa0>
 8008496:	2964      	cmp	r1, #100	; 0x64
 8008498:	d001      	beq.n	800849e <_printf_i+0x42>
 800849a:	2969      	cmp	r1, #105	; 0x69
 800849c:	d1f6      	bne.n	800848c <_printf_i+0x30>
 800849e:	6820      	ldr	r0, [r4, #0]
 80084a0:	6813      	ldr	r3, [r2, #0]
 80084a2:	0605      	lsls	r5, r0, #24
 80084a4:	f103 0104 	add.w	r1, r3, #4
 80084a8:	d52a      	bpl.n	8008500 <_printf_i+0xa4>
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6011      	str	r1, [r2, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	da03      	bge.n	80084ba <_printf_i+0x5e>
 80084b2:	222d      	movs	r2, #45	; 0x2d
 80084b4:	425b      	negs	r3, r3
 80084b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80084ba:	486f      	ldr	r0, [pc, #444]	; (8008678 <_printf_i+0x21c>)
 80084bc:	220a      	movs	r2, #10
 80084be:	e039      	b.n	8008534 <_printf_i+0xd8>
 80084c0:	2973      	cmp	r1, #115	; 0x73
 80084c2:	f000 809d 	beq.w	8008600 <_printf_i+0x1a4>
 80084c6:	d808      	bhi.n	80084da <_printf_i+0x7e>
 80084c8:	296f      	cmp	r1, #111	; 0x6f
 80084ca:	d020      	beq.n	800850e <_printf_i+0xb2>
 80084cc:	2970      	cmp	r1, #112	; 0x70
 80084ce:	d1dd      	bne.n	800848c <_printf_i+0x30>
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	f043 0320 	orr.w	r3, r3, #32
 80084d6:	6023      	str	r3, [r4, #0]
 80084d8:	e003      	b.n	80084e2 <_printf_i+0x86>
 80084da:	2975      	cmp	r1, #117	; 0x75
 80084dc:	d017      	beq.n	800850e <_printf_i+0xb2>
 80084de:	2978      	cmp	r1, #120	; 0x78
 80084e0:	d1d4      	bne.n	800848c <_printf_i+0x30>
 80084e2:	2378      	movs	r3, #120	; 0x78
 80084e4:	4865      	ldr	r0, [pc, #404]	; (800867c <_printf_i+0x220>)
 80084e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084ea:	e055      	b.n	8008598 <_printf_i+0x13c>
 80084ec:	6813      	ldr	r3, [r2, #0]
 80084ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f2:	1d19      	adds	r1, r3, #4
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6011      	str	r1, [r2, #0]
 80084f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084fc:	2301      	movs	r3, #1
 80084fe:	e08c      	b.n	800861a <_printf_i+0x1be>
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008506:	6011      	str	r1, [r2, #0]
 8008508:	bf18      	it	ne
 800850a:	b21b      	sxthne	r3, r3
 800850c:	e7cf      	b.n	80084ae <_printf_i+0x52>
 800850e:	6813      	ldr	r3, [r2, #0]
 8008510:	6825      	ldr	r5, [r4, #0]
 8008512:	1d18      	adds	r0, r3, #4
 8008514:	6010      	str	r0, [r2, #0]
 8008516:	0628      	lsls	r0, r5, #24
 8008518:	d501      	bpl.n	800851e <_printf_i+0xc2>
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	e002      	b.n	8008524 <_printf_i+0xc8>
 800851e:	0668      	lsls	r0, r5, #25
 8008520:	d5fb      	bpl.n	800851a <_printf_i+0xbe>
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	296f      	cmp	r1, #111	; 0x6f
 8008526:	bf14      	ite	ne
 8008528:	220a      	movne	r2, #10
 800852a:	2208      	moveq	r2, #8
 800852c:	4852      	ldr	r0, [pc, #328]	; (8008678 <_printf_i+0x21c>)
 800852e:	2100      	movs	r1, #0
 8008530:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008534:	6865      	ldr	r5, [r4, #4]
 8008536:	2d00      	cmp	r5, #0
 8008538:	60a5      	str	r5, [r4, #8]
 800853a:	f2c0 8095 	blt.w	8008668 <_printf_i+0x20c>
 800853e:	6821      	ldr	r1, [r4, #0]
 8008540:	f021 0104 	bic.w	r1, r1, #4
 8008544:	6021      	str	r1, [r4, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d13d      	bne.n	80085c6 <_printf_i+0x16a>
 800854a:	2d00      	cmp	r5, #0
 800854c:	f040 808e 	bne.w	800866c <_printf_i+0x210>
 8008550:	4665      	mov	r5, ip
 8008552:	2a08      	cmp	r2, #8
 8008554:	d10b      	bne.n	800856e <_printf_i+0x112>
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	07db      	lsls	r3, r3, #31
 800855a:	d508      	bpl.n	800856e <_printf_i+0x112>
 800855c:	6923      	ldr	r3, [r4, #16]
 800855e:	6862      	ldr	r2, [r4, #4]
 8008560:	429a      	cmp	r2, r3
 8008562:	bfde      	ittt	le
 8008564:	2330      	movle	r3, #48	; 0x30
 8008566:	f805 3c01 	strble.w	r3, [r5, #-1]
 800856a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800856e:	ebac 0305 	sub.w	r3, ip, r5
 8008572:	6123      	str	r3, [r4, #16]
 8008574:	f8cd 8000 	str.w	r8, [sp]
 8008578:	463b      	mov	r3, r7
 800857a:	aa03      	add	r2, sp, #12
 800857c:	4621      	mov	r1, r4
 800857e:	4630      	mov	r0, r6
 8008580:	f7ff fef6 	bl	8008370 <_printf_common>
 8008584:	3001      	adds	r0, #1
 8008586:	d14d      	bne.n	8008624 <_printf_i+0x1c8>
 8008588:	f04f 30ff 	mov.w	r0, #4294967295
 800858c:	b005      	add	sp, #20
 800858e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008592:	4839      	ldr	r0, [pc, #228]	; (8008678 <_printf_i+0x21c>)
 8008594:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008598:	6813      	ldr	r3, [r2, #0]
 800859a:	6821      	ldr	r1, [r4, #0]
 800859c:	1d1d      	adds	r5, r3, #4
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6015      	str	r5, [r2, #0]
 80085a2:	060a      	lsls	r2, r1, #24
 80085a4:	d50b      	bpl.n	80085be <_printf_i+0x162>
 80085a6:	07ca      	lsls	r2, r1, #31
 80085a8:	bf44      	itt	mi
 80085aa:	f041 0120 	orrmi.w	r1, r1, #32
 80085ae:	6021      	strmi	r1, [r4, #0]
 80085b0:	b91b      	cbnz	r3, 80085ba <_printf_i+0x15e>
 80085b2:	6822      	ldr	r2, [r4, #0]
 80085b4:	f022 0220 	bic.w	r2, r2, #32
 80085b8:	6022      	str	r2, [r4, #0]
 80085ba:	2210      	movs	r2, #16
 80085bc:	e7b7      	b.n	800852e <_printf_i+0xd2>
 80085be:	064d      	lsls	r5, r1, #25
 80085c0:	bf48      	it	mi
 80085c2:	b29b      	uxthmi	r3, r3
 80085c4:	e7ef      	b.n	80085a6 <_printf_i+0x14a>
 80085c6:	4665      	mov	r5, ip
 80085c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80085cc:	fb02 3311 	mls	r3, r2, r1, r3
 80085d0:	5cc3      	ldrb	r3, [r0, r3]
 80085d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80085d6:	460b      	mov	r3, r1
 80085d8:	2900      	cmp	r1, #0
 80085da:	d1f5      	bne.n	80085c8 <_printf_i+0x16c>
 80085dc:	e7b9      	b.n	8008552 <_printf_i+0xf6>
 80085de:	6813      	ldr	r3, [r2, #0]
 80085e0:	6825      	ldr	r5, [r4, #0]
 80085e2:	1d18      	adds	r0, r3, #4
 80085e4:	6961      	ldr	r1, [r4, #20]
 80085e6:	6010      	str	r0, [r2, #0]
 80085e8:	0628      	lsls	r0, r5, #24
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	d501      	bpl.n	80085f2 <_printf_i+0x196>
 80085ee:	6019      	str	r1, [r3, #0]
 80085f0:	e002      	b.n	80085f8 <_printf_i+0x19c>
 80085f2:	066a      	lsls	r2, r5, #25
 80085f4:	d5fb      	bpl.n	80085ee <_printf_i+0x192>
 80085f6:	8019      	strh	r1, [r3, #0]
 80085f8:	2300      	movs	r3, #0
 80085fa:	4665      	mov	r5, ip
 80085fc:	6123      	str	r3, [r4, #16]
 80085fe:	e7b9      	b.n	8008574 <_printf_i+0x118>
 8008600:	6813      	ldr	r3, [r2, #0]
 8008602:	1d19      	adds	r1, r3, #4
 8008604:	6011      	str	r1, [r2, #0]
 8008606:	681d      	ldr	r5, [r3, #0]
 8008608:	6862      	ldr	r2, [r4, #4]
 800860a:	2100      	movs	r1, #0
 800860c:	4628      	mov	r0, r5
 800860e:	f000 f844 	bl	800869a <memchr>
 8008612:	b108      	cbz	r0, 8008618 <_printf_i+0x1bc>
 8008614:	1b40      	subs	r0, r0, r5
 8008616:	6060      	str	r0, [r4, #4]
 8008618:	6863      	ldr	r3, [r4, #4]
 800861a:	6123      	str	r3, [r4, #16]
 800861c:	2300      	movs	r3, #0
 800861e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008622:	e7a7      	b.n	8008574 <_printf_i+0x118>
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	462a      	mov	r2, r5
 8008628:	4639      	mov	r1, r7
 800862a:	4630      	mov	r0, r6
 800862c:	47c0      	blx	r8
 800862e:	3001      	adds	r0, #1
 8008630:	d0aa      	beq.n	8008588 <_printf_i+0x12c>
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	079b      	lsls	r3, r3, #30
 8008636:	d413      	bmi.n	8008660 <_printf_i+0x204>
 8008638:	68e0      	ldr	r0, [r4, #12]
 800863a:	9b03      	ldr	r3, [sp, #12]
 800863c:	4298      	cmp	r0, r3
 800863e:	bfb8      	it	lt
 8008640:	4618      	movlt	r0, r3
 8008642:	e7a3      	b.n	800858c <_printf_i+0x130>
 8008644:	2301      	movs	r3, #1
 8008646:	464a      	mov	r2, r9
 8008648:	4639      	mov	r1, r7
 800864a:	4630      	mov	r0, r6
 800864c:	47c0      	blx	r8
 800864e:	3001      	adds	r0, #1
 8008650:	d09a      	beq.n	8008588 <_printf_i+0x12c>
 8008652:	3501      	adds	r5, #1
 8008654:	68e3      	ldr	r3, [r4, #12]
 8008656:	9a03      	ldr	r2, [sp, #12]
 8008658:	1a9b      	subs	r3, r3, r2
 800865a:	42ab      	cmp	r3, r5
 800865c:	dcf2      	bgt.n	8008644 <_printf_i+0x1e8>
 800865e:	e7eb      	b.n	8008638 <_printf_i+0x1dc>
 8008660:	2500      	movs	r5, #0
 8008662:	f104 0919 	add.w	r9, r4, #25
 8008666:	e7f5      	b.n	8008654 <_printf_i+0x1f8>
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1ac      	bne.n	80085c6 <_printf_i+0x16a>
 800866c:	7803      	ldrb	r3, [r0, #0]
 800866e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008672:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008676:	e76c      	b.n	8008552 <_printf_i+0xf6>
 8008678:	0800aa53 	.word	0x0800aa53
 800867c:	0800aa64 	.word	0x0800aa64

08008680 <__ascii_wctomb>:
 8008680:	b149      	cbz	r1, 8008696 <__ascii_wctomb+0x16>
 8008682:	2aff      	cmp	r2, #255	; 0xff
 8008684:	bf8b      	itete	hi
 8008686:	238a      	movhi	r3, #138	; 0x8a
 8008688:	700a      	strbls	r2, [r1, #0]
 800868a:	6003      	strhi	r3, [r0, #0]
 800868c:	2001      	movls	r0, #1
 800868e:	bf88      	it	hi
 8008690:	f04f 30ff 	movhi.w	r0, #4294967295
 8008694:	4770      	bx	lr
 8008696:	4608      	mov	r0, r1
 8008698:	4770      	bx	lr

0800869a <memchr>:
 800869a:	b510      	push	{r4, lr}
 800869c:	b2c9      	uxtb	r1, r1
 800869e:	4402      	add	r2, r0
 80086a0:	4290      	cmp	r0, r2
 80086a2:	4603      	mov	r3, r0
 80086a4:	d101      	bne.n	80086aa <memchr+0x10>
 80086a6:	2300      	movs	r3, #0
 80086a8:	e003      	b.n	80086b2 <memchr+0x18>
 80086aa:	781c      	ldrb	r4, [r3, #0]
 80086ac:	3001      	adds	r0, #1
 80086ae:	428c      	cmp	r4, r1
 80086b0:	d1f6      	bne.n	80086a0 <memchr+0x6>
 80086b2:	4618      	mov	r0, r3
 80086b4:	bd10      	pop	{r4, pc}

080086b6 <memmove>:
 80086b6:	4288      	cmp	r0, r1
 80086b8:	b510      	push	{r4, lr}
 80086ba:	eb01 0302 	add.w	r3, r1, r2
 80086be:	d807      	bhi.n	80086d0 <memmove+0x1a>
 80086c0:	1e42      	subs	r2, r0, #1
 80086c2:	4299      	cmp	r1, r3
 80086c4:	d00a      	beq.n	80086dc <memmove+0x26>
 80086c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80086ce:	e7f8      	b.n	80086c2 <memmove+0xc>
 80086d0:	4283      	cmp	r3, r0
 80086d2:	d9f5      	bls.n	80086c0 <memmove+0xa>
 80086d4:	1881      	adds	r1, r0, r2
 80086d6:	1ad2      	subs	r2, r2, r3
 80086d8:	42d3      	cmn	r3, r2
 80086da:	d100      	bne.n	80086de <memmove+0x28>
 80086dc:	bd10      	pop	{r4, pc}
 80086de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80086e6:	e7f7      	b.n	80086d8 <memmove+0x22>

080086e8 <_realloc_r>:
 80086e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ea:	4607      	mov	r7, r0
 80086ec:	4614      	mov	r4, r2
 80086ee:	460e      	mov	r6, r1
 80086f0:	b921      	cbnz	r1, 80086fc <_realloc_r+0x14>
 80086f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086f6:	4611      	mov	r1, r2
 80086f8:	f7ff bb10 	b.w	8007d1c <_malloc_r>
 80086fc:	b922      	cbnz	r2, 8008708 <_realloc_r+0x20>
 80086fe:	f7ff fac1 	bl	8007c84 <_free_r>
 8008702:	4625      	mov	r5, r4
 8008704:	4628      	mov	r0, r5
 8008706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008708:	f000 f814 	bl	8008734 <_malloc_usable_size_r>
 800870c:	42a0      	cmp	r0, r4
 800870e:	d20f      	bcs.n	8008730 <_realloc_r+0x48>
 8008710:	4621      	mov	r1, r4
 8008712:	4638      	mov	r0, r7
 8008714:	f7ff fb02 	bl	8007d1c <_malloc_r>
 8008718:	4605      	mov	r5, r0
 800871a:	2800      	cmp	r0, #0
 800871c:	d0f2      	beq.n	8008704 <_realloc_r+0x1c>
 800871e:	4631      	mov	r1, r6
 8008720:	4622      	mov	r2, r4
 8008722:	f7ff fa8d 	bl	8007c40 <memcpy>
 8008726:	4631      	mov	r1, r6
 8008728:	4638      	mov	r0, r7
 800872a:	f7ff faab 	bl	8007c84 <_free_r>
 800872e:	e7e9      	b.n	8008704 <_realloc_r+0x1c>
 8008730:	4635      	mov	r5, r6
 8008732:	e7e7      	b.n	8008704 <_realloc_r+0x1c>

08008734 <_malloc_usable_size_r>:
 8008734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008738:	1f18      	subs	r0, r3, #4
 800873a:	2b00      	cmp	r3, #0
 800873c:	bfbc      	itt	lt
 800873e:	580b      	ldrlt	r3, [r1, r0]
 8008740:	18c0      	addlt	r0, r0, r3
 8008742:	4770      	bx	lr

08008744 <sin>:
 8008744:	b530      	push	{r4, r5, lr}
 8008746:	4a1a      	ldr	r2, [pc, #104]	; (80087b0 <sin+0x6c>)
 8008748:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800874c:	4293      	cmp	r3, r2
 800874e:	b087      	sub	sp, #28
 8008750:	dc06      	bgt.n	8008760 <sin+0x1c>
 8008752:	2300      	movs	r3, #0
 8008754:	2200      	movs	r2, #0
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	2300      	movs	r3, #0
 800875a:	f000 fe25 	bl	80093a8 <__kernel_sin>
 800875e:	e006      	b.n	800876e <sin+0x2a>
 8008760:	4a14      	ldr	r2, [pc, #80]	; (80087b4 <sin+0x70>)
 8008762:	4293      	cmp	r3, r2
 8008764:	dd05      	ble.n	8008772 <sin+0x2e>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	f7f7 fcfd 	bl	8000168 <__aeabi_dsub>
 800876e:	b007      	add	sp, #28
 8008770:	bd30      	pop	{r4, r5, pc}
 8008772:	aa02      	add	r2, sp, #8
 8008774:	f000 f820 	bl	80087b8 <__ieee754_rem_pio2>
 8008778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800877c:	f000 0403 	and.w	r4, r0, #3
 8008780:	2c01      	cmp	r4, #1
 8008782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008786:	d005      	beq.n	8008794 <sin+0x50>
 8008788:	2c02      	cmp	r4, #2
 800878a:	d006      	beq.n	800879a <sin+0x56>
 800878c:	b964      	cbnz	r4, 80087a8 <sin+0x64>
 800878e:	2401      	movs	r4, #1
 8008790:	9400      	str	r4, [sp, #0]
 8008792:	e7e2      	b.n	800875a <sin+0x16>
 8008794:	f000 fa00 	bl	8008b98 <__kernel_cos>
 8008798:	e7e9      	b.n	800876e <sin+0x2a>
 800879a:	2401      	movs	r4, #1
 800879c:	9400      	str	r4, [sp, #0]
 800879e:	f000 fe03 	bl	80093a8 <__kernel_sin>
 80087a2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80087a6:	e7e2      	b.n	800876e <sin+0x2a>
 80087a8:	f000 f9f6 	bl	8008b98 <__kernel_cos>
 80087ac:	e7f9      	b.n	80087a2 <sin+0x5e>
 80087ae:	bf00      	nop
 80087b0:	3fe921fb 	.word	0x3fe921fb
 80087b4:	7fefffff 	.word	0x7fefffff

080087b8 <__ieee754_rem_pio2>:
 80087b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	4614      	mov	r4, r2
 80087be:	4ac2      	ldr	r2, [pc, #776]	; (8008ac8 <__ieee754_rem_pio2+0x310>)
 80087c0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80087c4:	4592      	cmp	sl, r2
 80087c6:	b08d      	sub	sp, #52	; 0x34
 80087c8:	468b      	mov	fp, r1
 80087ca:	dc07      	bgt.n	80087dc <__ieee754_rem_pio2+0x24>
 80087cc:	2200      	movs	r2, #0
 80087ce:	2300      	movs	r3, #0
 80087d0:	e9c4 0100 	strd	r0, r1, [r4]
 80087d4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80087d8:	2500      	movs	r5, #0
 80087da:	e023      	b.n	8008824 <__ieee754_rem_pio2+0x6c>
 80087dc:	4abb      	ldr	r2, [pc, #748]	; (8008acc <__ieee754_rem_pio2+0x314>)
 80087de:	4592      	cmp	sl, r2
 80087e0:	dc71      	bgt.n	80088c6 <__ieee754_rem_pio2+0x10e>
 80087e2:	a3ab      	add	r3, pc, #684	; (adr r3, 8008a90 <__ieee754_rem_pio2+0x2d8>)
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	2900      	cmp	r1, #0
 80087ea:	4db9      	ldr	r5, [pc, #740]	; (8008ad0 <__ieee754_rem_pio2+0x318>)
 80087ec:	dd36      	ble.n	800885c <__ieee754_rem_pio2+0xa4>
 80087ee:	f7f7 fcbb 	bl	8000168 <__aeabi_dsub>
 80087f2:	45aa      	cmp	sl, r5
 80087f4:	4606      	mov	r6, r0
 80087f6:	460f      	mov	r7, r1
 80087f8:	d018      	beq.n	800882c <__ieee754_rem_pio2+0x74>
 80087fa:	a3a7      	add	r3, pc, #668	; (adr r3, 8008a98 <__ieee754_rem_pio2+0x2e0>)
 80087fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008800:	f7f7 fcb2 	bl	8000168 <__aeabi_dsub>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4630      	mov	r0, r6
 800880a:	e9c4 2300 	strd	r2, r3, [r4]
 800880e:	4639      	mov	r1, r7
 8008810:	f7f7 fcaa 	bl	8000168 <__aeabi_dsub>
 8008814:	a3a0      	add	r3, pc, #640	; (adr r3, 8008a98 <__ieee754_rem_pio2+0x2e0>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	f7f7 fca5 	bl	8000168 <__aeabi_dsub>
 800881e:	2501      	movs	r5, #1
 8008820:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008824:	4628      	mov	r0, r5
 8008826:	b00d      	add	sp, #52	; 0x34
 8008828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882c:	a39c      	add	r3, pc, #624	; (adr r3, 8008aa0 <__ieee754_rem_pio2+0x2e8>)
 800882e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008832:	f7f7 fc99 	bl	8000168 <__aeabi_dsub>
 8008836:	a39c      	add	r3, pc, #624	; (adr r3, 8008aa8 <__ieee754_rem_pio2+0x2f0>)
 8008838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883c:	4606      	mov	r6, r0
 800883e:	460f      	mov	r7, r1
 8008840:	f7f7 fc92 	bl	8000168 <__aeabi_dsub>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	4630      	mov	r0, r6
 800884a:	e9c4 2300 	strd	r2, r3, [r4]
 800884e:	4639      	mov	r1, r7
 8008850:	f7f7 fc8a 	bl	8000168 <__aeabi_dsub>
 8008854:	a394      	add	r3, pc, #592	; (adr r3, 8008aa8 <__ieee754_rem_pio2+0x2f0>)
 8008856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885a:	e7de      	b.n	800881a <__ieee754_rem_pio2+0x62>
 800885c:	f7f7 fc86 	bl	800016c <__adddf3>
 8008860:	45aa      	cmp	sl, r5
 8008862:	4606      	mov	r6, r0
 8008864:	460f      	mov	r7, r1
 8008866:	d016      	beq.n	8008896 <__ieee754_rem_pio2+0xde>
 8008868:	a38b      	add	r3, pc, #556	; (adr r3, 8008a98 <__ieee754_rem_pio2+0x2e0>)
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	f7f7 fc7d 	bl	800016c <__adddf3>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	4630      	mov	r0, r6
 8008878:	e9c4 2300 	strd	r2, r3, [r4]
 800887c:	4639      	mov	r1, r7
 800887e:	f7f7 fc73 	bl	8000168 <__aeabi_dsub>
 8008882:	a385      	add	r3, pc, #532	; (adr r3, 8008a98 <__ieee754_rem_pio2+0x2e0>)
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	f7f7 fc70 	bl	800016c <__adddf3>
 800888c:	f04f 35ff 	mov.w	r5, #4294967295
 8008890:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008894:	e7c6      	b.n	8008824 <__ieee754_rem_pio2+0x6c>
 8008896:	a382      	add	r3, pc, #520	; (adr r3, 8008aa0 <__ieee754_rem_pio2+0x2e8>)
 8008898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889c:	f7f7 fc66 	bl	800016c <__adddf3>
 80088a0:	a381      	add	r3, pc, #516	; (adr r3, 8008aa8 <__ieee754_rem_pio2+0x2f0>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	4606      	mov	r6, r0
 80088a8:	460f      	mov	r7, r1
 80088aa:	f7f7 fc5f 	bl	800016c <__adddf3>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	4630      	mov	r0, r6
 80088b4:	e9c4 2300 	strd	r2, r3, [r4]
 80088b8:	4639      	mov	r1, r7
 80088ba:	f7f7 fc55 	bl	8000168 <__aeabi_dsub>
 80088be:	a37a      	add	r3, pc, #488	; (adr r3, 8008aa8 <__ieee754_rem_pio2+0x2f0>)
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	e7e0      	b.n	8008888 <__ieee754_rem_pio2+0xd0>
 80088c6:	4a83      	ldr	r2, [pc, #524]	; (8008ad4 <__ieee754_rem_pio2+0x31c>)
 80088c8:	4592      	cmp	sl, r2
 80088ca:	f300 80d2 	bgt.w	8008a72 <__ieee754_rem_pio2+0x2ba>
 80088ce:	f000 fe21 	bl	8009514 <fabs>
 80088d2:	a377      	add	r3, pc, #476	; (adr r3, 8008ab0 <__ieee754_rem_pio2+0x2f8>)
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	4606      	mov	r6, r0
 80088da:	460f      	mov	r7, r1
 80088dc:	f7f7 fdfc 	bl	80004d8 <__aeabi_dmul>
 80088e0:	2200      	movs	r2, #0
 80088e2:	4b7d      	ldr	r3, [pc, #500]	; (8008ad8 <__ieee754_rem_pio2+0x320>)
 80088e4:	f7f7 fc42 	bl	800016c <__adddf3>
 80088e8:	f7f8 f890 	bl	8000a0c <__aeabi_d2iz>
 80088ec:	4605      	mov	r5, r0
 80088ee:	f7f7 fd89 	bl	8000404 <__aeabi_i2d>
 80088f2:	a367      	add	r3, pc, #412	; (adr r3, 8008a90 <__ieee754_rem_pio2+0x2d8>)
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088fc:	f7f7 fdec 	bl	80004d8 <__aeabi_dmul>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4630      	mov	r0, r6
 8008906:	4639      	mov	r1, r7
 8008908:	f7f7 fc2e 	bl	8000168 <__aeabi_dsub>
 800890c:	a362      	add	r3, pc, #392	; (adr r3, 8008a98 <__ieee754_rem_pio2+0x2e0>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	4606      	mov	r6, r0
 8008914:	460f      	mov	r7, r1
 8008916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800891a:	f7f7 fddd 	bl	80004d8 <__aeabi_dmul>
 800891e:	2d1f      	cmp	r5, #31
 8008920:	4680      	mov	r8, r0
 8008922:	4689      	mov	r9, r1
 8008924:	dc0e      	bgt.n	8008944 <__ieee754_rem_pio2+0x18c>
 8008926:	4b6d      	ldr	r3, [pc, #436]	; (8008adc <__ieee754_rem_pio2+0x324>)
 8008928:	1e6a      	subs	r2, r5, #1
 800892a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892e:	4553      	cmp	r3, sl
 8008930:	d008      	beq.n	8008944 <__ieee754_rem_pio2+0x18c>
 8008932:	4642      	mov	r2, r8
 8008934:	464b      	mov	r3, r9
 8008936:	4630      	mov	r0, r6
 8008938:	4639      	mov	r1, r7
 800893a:	f7f7 fc15 	bl	8000168 <__aeabi_dsub>
 800893e:	e9c4 0100 	strd	r0, r1, [r4]
 8008942:	e011      	b.n	8008968 <__ieee754_rem_pio2+0x1b0>
 8008944:	464b      	mov	r3, r9
 8008946:	4642      	mov	r2, r8
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	f7f7 fc0c 	bl	8000168 <__aeabi_dsub>
 8008950:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008954:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008958:	ebaa 0303 	sub.w	r3, sl, r3
 800895c:	2b10      	cmp	r3, #16
 800895e:	dc1f      	bgt.n	80089a0 <__ieee754_rem_pio2+0x1e8>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	e9c4 2300 	strd	r2, r3, [r4]
 8008968:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800896c:	4630      	mov	r0, r6
 800896e:	4653      	mov	r3, sl
 8008970:	4639      	mov	r1, r7
 8008972:	f7f7 fbf9 	bl	8000168 <__aeabi_dsub>
 8008976:	4642      	mov	r2, r8
 8008978:	464b      	mov	r3, r9
 800897a:	f7f7 fbf5 	bl	8000168 <__aeabi_dsub>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	f1bb 0f00 	cmp.w	fp, #0
 8008986:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800898a:	f6bf af4b 	bge.w	8008824 <__ieee754_rem_pio2+0x6c>
 800898e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8008992:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8008996:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800899a:	60e1      	str	r1, [r4, #12]
 800899c:	426d      	negs	r5, r5
 800899e:	e741      	b.n	8008824 <__ieee754_rem_pio2+0x6c>
 80089a0:	a33f      	add	r3, pc, #252	; (adr r3, 8008aa0 <__ieee754_rem_pio2+0x2e8>)
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089aa:	f7f7 fd95 	bl	80004d8 <__aeabi_dmul>
 80089ae:	4680      	mov	r8, r0
 80089b0:	4689      	mov	r9, r1
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4630      	mov	r0, r6
 80089b8:	4639      	mov	r1, r7
 80089ba:	f7f7 fbd5 	bl	8000168 <__aeabi_dsub>
 80089be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4630      	mov	r0, r6
 80089c8:	4639      	mov	r1, r7
 80089ca:	f7f7 fbcd 	bl	8000168 <__aeabi_dsub>
 80089ce:	4642      	mov	r2, r8
 80089d0:	464b      	mov	r3, r9
 80089d2:	f7f7 fbc9 	bl	8000168 <__aeabi_dsub>
 80089d6:	a334      	add	r3, pc, #208	; (adr r3, 8008aa8 <__ieee754_rem_pio2+0x2f0>)
 80089d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089dc:	4606      	mov	r6, r0
 80089de:	460f      	mov	r7, r1
 80089e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089e4:	f7f7 fd78 	bl	80004d8 <__aeabi_dmul>
 80089e8:	4632      	mov	r2, r6
 80089ea:	463b      	mov	r3, r7
 80089ec:	f7f7 fbbc 	bl	8000168 <__aeabi_dsub>
 80089f0:	460b      	mov	r3, r1
 80089f2:	4602      	mov	r2, r0
 80089f4:	4680      	mov	r8, r0
 80089f6:	4689      	mov	r9, r1
 80089f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089fc:	f7f7 fbb4 	bl	8000168 <__aeabi_dsub>
 8008a00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a04:	ebaa 0a03 	sub.w	sl, sl, r3
 8008a08:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8008a0c:	dc06      	bgt.n	8008a1c <__ieee754_rem_pio2+0x264>
 8008a0e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	e9c4 2300 	strd	r2, r3, [r4]
 8008a1a:	e7a5      	b.n	8008968 <__ieee754_rem_pio2+0x1b0>
 8008a1c:	a326      	add	r3, pc, #152	; (adr r3, 8008ab8 <__ieee754_rem_pio2+0x300>)
 8008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a26:	f7f7 fd57 	bl	80004d8 <__aeabi_dmul>
 8008a2a:	4680      	mov	r8, r0
 8008a2c:	4689      	mov	r9, r1
 8008a2e:	4602      	mov	r2, r0
 8008a30:	460b      	mov	r3, r1
 8008a32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a36:	f7f7 fb97 	bl	8000168 <__aeabi_dsub>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	4606      	mov	r6, r0
 8008a40:	460f      	mov	r7, r1
 8008a42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a46:	f7f7 fb8f 	bl	8000168 <__aeabi_dsub>
 8008a4a:	4642      	mov	r2, r8
 8008a4c:	464b      	mov	r3, r9
 8008a4e:	f7f7 fb8b 	bl	8000168 <__aeabi_dsub>
 8008a52:	a31b      	add	r3, pc, #108	; (adr r3, 8008ac0 <__ieee754_rem_pio2+0x308>)
 8008a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a58:	4680      	mov	r8, r0
 8008a5a:	4689      	mov	r9, r1
 8008a5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a60:	f7f7 fd3a 	bl	80004d8 <__aeabi_dmul>
 8008a64:	4642      	mov	r2, r8
 8008a66:	464b      	mov	r3, r9
 8008a68:	f7f7 fb7e 	bl	8000168 <__aeabi_dsub>
 8008a6c:	4680      	mov	r8, r0
 8008a6e:	4689      	mov	r9, r1
 8008a70:	e75f      	b.n	8008932 <__ieee754_rem_pio2+0x17a>
 8008a72:	4a1b      	ldr	r2, [pc, #108]	; (8008ae0 <__ieee754_rem_pio2+0x328>)
 8008a74:	4592      	cmp	sl, r2
 8008a76:	dd35      	ble.n	8008ae4 <__ieee754_rem_pio2+0x32c>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	f7f7 fb74 	bl	8000168 <__aeabi_dsub>
 8008a80:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a84:	e9c4 0100 	strd	r0, r1, [r4]
 8008a88:	e6a6      	b.n	80087d8 <__ieee754_rem_pio2+0x20>
 8008a8a:	bf00      	nop
 8008a8c:	f3af 8000 	nop.w
 8008a90:	54400000 	.word	0x54400000
 8008a94:	3ff921fb 	.word	0x3ff921fb
 8008a98:	1a626331 	.word	0x1a626331
 8008a9c:	3dd0b461 	.word	0x3dd0b461
 8008aa0:	1a600000 	.word	0x1a600000
 8008aa4:	3dd0b461 	.word	0x3dd0b461
 8008aa8:	2e037073 	.word	0x2e037073
 8008aac:	3ba3198a 	.word	0x3ba3198a
 8008ab0:	6dc9c883 	.word	0x6dc9c883
 8008ab4:	3fe45f30 	.word	0x3fe45f30
 8008ab8:	2e000000 	.word	0x2e000000
 8008abc:	3ba3198a 	.word	0x3ba3198a
 8008ac0:	252049c1 	.word	0x252049c1
 8008ac4:	397b839a 	.word	0x397b839a
 8008ac8:	3fe921fb 	.word	0x3fe921fb
 8008acc:	4002d97b 	.word	0x4002d97b
 8008ad0:	3ff921fb 	.word	0x3ff921fb
 8008ad4:	413921fb 	.word	0x413921fb
 8008ad8:	3fe00000 	.word	0x3fe00000
 8008adc:	0800ab78 	.word	0x0800ab78
 8008ae0:	7fefffff 	.word	0x7fefffff
 8008ae4:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008ae8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008aec:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008af0:	460f      	mov	r7, r1
 8008af2:	4606      	mov	r6, r0
 8008af4:	f7f7 ff8a 	bl	8000a0c <__aeabi_d2iz>
 8008af8:	f7f7 fc84 	bl	8000404 <__aeabi_i2d>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4630      	mov	r0, r6
 8008b02:	4639      	mov	r1, r7
 8008b04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b08:	f7f7 fb2e 	bl	8000168 <__aeabi_dsub>
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	4b20      	ldr	r3, [pc, #128]	; (8008b90 <__ieee754_rem_pio2+0x3d8>)
 8008b10:	f7f7 fce2 	bl	80004d8 <__aeabi_dmul>
 8008b14:	460f      	mov	r7, r1
 8008b16:	4606      	mov	r6, r0
 8008b18:	f7f7 ff78 	bl	8000a0c <__aeabi_d2iz>
 8008b1c:	f7f7 fc72 	bl	8000404 <__aeabi_i2d>
 8008b20:	4602      	mov	r2, r0
 8008b22:	460b      	mov	r3, r1
 8008b24:	4630      	mov	r0, r6
 8008b26:	4639      	mov	r1, r7
 8008b28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b2c:	f7f7 fb1c 	bl	8000168 <__aeabi_dsub>
 8008b30:	2200      	movs	r2, #0
 8008b32:	4b17      	ldr	r3, [pc, #92]	; (8008b90 <__ieee754_rem_pio2+0x3d8>)
 8008b34:	f7f7 fcd0 	bl	80004d8 <__aeabi_dmul>
 8008b38:	f04f 0803 	mov.w	r8, #3
 8008b3c:	2600      	movs	r6, #0
 8008b3e:	2700      	movs	r7, #0
 8008b40:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008b44:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008b48:	4632      	mov	r2, r6
 8008b4a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008b4e:	463b      	mov	r3, r7
 8008b50:	f108 3aff 	add.w	sl, r8, #4294967295
 8008b54:	f7f7 ff28 	bl	80009a8 <__aeabi_dcmpeq>
 8008b58:	b9b8      	cbnz	r0, 8008b8a <__ieee754_rem_pio2+0x3d2>
 8008b5a:	4b0e      	ldr	r3, [pc, #56]	; (8008b94 <__ieee754_rem_pio2+0x3dc>)
 8008b5c:	462a      	mov	r2, r5
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	2302      	movs	r3, #2
 8008b62:	4621      	mov	r1, r4
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	a806      	add	r0, sp, #24
 8008b68:	4643      	mov	r3, r8
 8008b6a:	f000 f8d3 	bl	8008d14 <__kernel_rem_pio2>
 8008b6e:	f1bb 0f00 	cmp.w	fp, #0
 8008b72:	4605      	mov	r5, r0
 8008b74:	f6bf ae56 	bge.w	8008824 <__ieee754_rem_pio2+0x6c>
 8008b78:	6863      	ldr	r3, [r4, #4]
 8008b7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008b7e:	6063      	str	r3, [r4, #4]
 8008b80:	68e3      	ldr	r3, [r4, #12]
 8008b82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008b86:	60e3      	str	r3, [r4, #12]
 8008b88:	e708      	b.n	800899c <__ieee754_rem_pio2+0x1e4>
 8008b8a:	46d0      	mov	r8, sl
 8008b8c:	e7dc      	b.n	8008b48 <__ieee754_rem_pio2+0x390>
 8008b8e:	bf00      	nop
 8008b90:	41700000 	.word	0x41700000
 8008b94:	0800abf8 	.word	0x0800abf8

08008b98 <__kernel_cos>:
 8008b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008ba0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008ba4:	4680      	mov	r8, r0
 8008ba6:	460f      	mov	r7, r1
 8008ba8:	e9cd 2300 	strd	r2, r3, [sp]
 8008bac:	da04      	bge.n	8008bb8 <__kernel_cos+0x20>
 8008bae:	f7f7 ff2d 	bl	8000a0c <__aeabi_d2iz>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	f000 8086 	beq.w	8008cc4 <__kernel_cos+0x12c>
 8008bb8:	4642      	mov	r2, r8
 8008bba:	463b      	mov	r3, r7
 8008bbc:	4640      	mov	r0, r8
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	f7f7 fc8a 	bl	80004d8 <__aeabi_dmul>
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	4b4e      	ldr	r3, [pc, #312]	; (8008d00 <__kernel_cos+0x168>)
 8008bc8:	4604      	mov	r4, r0
 8008bca:	460d      	mov	r5, r1
 8008bcc:	f7f7 fc84 	bl	80004d8 <__aeabi_dmul>
 8008bd0:	a33f      	add	r3, pc, #252	; (adr r3, 8008cd0 <__kernel_cos+0x138>)
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	4682      	mov	sl, r0
 8008bd8:	468b      	mov	fp, r1
 8008bda:	4620      	mov	r0, r4
 8008bdc:	4629      	mov	r1, r5
 8008bde:	f7f7 fc7b 	bl	80004d8 <__aeabi_dmul>
 8008be2:	a33d      	add	r3, pc, #244	; (adr r3, 8008cd8 <__kernel_cos+0x140>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f7f7 fac0 	bl	800016c <__adddf3>
 8008bec:	4622      	mov	r2, r4
 8008bee:	462b      	mov	r3, r5
 8008bf0:	f7f7 fc72 	bl	80004d8 <__aeabi_dmul>
 8008bf4:	a33a      	add	r3, pc, #232	; (adr r3, 8008ce0 <__kernel_cos+0x148>)
 8008bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfa:	f7f7 fab5 	bl	8000168 <__aeabi_dsub>
 8008bfe:	4622      	mov	r2, r4
 8008c00:	462b      	mov	r3, r5
 8008c02:	f7f7 fc69 	bl	80004d8 <__aeabi_dmul>
 8008c06:	a338      	add	r3, pc, #224	; (adr r3, 8008ce8 <__kernel_cos+0x150>)
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	f7f7 faae 	bl	800016c <__adddf3>
 8008c10:	4622      	mov	r2, r4
 8008c12:	462b      	mov	r3, r5
 8008c14:	f7f7 fc60 	bl	80004d8 <__aeabi_dmul>
 8008c18:	a335      	add	r3, pc, #212	; (adr r3, 8008cf0 <__kernel_cos+0x158>)
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	f7f7 faa3 	bl	8000168 <__aeabi_dsub>
 8008c22:	4622      	mov	r2, r4
 8008c24:	462b      	mov	r3, r5
 8008c26:	f7f7 fc57 	bl	80004d8 <__aeabi_dmul>
 8008c2a:	a333      	add	r3, pc, #204	; (adr r3, 8008cf8 <__kernel_cos+0x160>)
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	f7f7 fa9c 	bl	800016c <__adddf3>
 8008c34:	4622      	mov	r2, r4
 8008c36:	462b      	mov	r3, r5
 8008c38:	f7f7 fc4e 	bl	80004d8 <__aeabi_dmul>
 8008c3c:	4622      	mov	r2, r4
 8008c3e:	462b      	mov	r3, r5
 8008c40:	f7f7 fc4a 	bl	80004d8 <__aeabi_dmul>
 8008c44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c48:	4604      	mov	r4, r0
 8008c4a:	460d      	mov	r5, r1
 8008c4c:	4640      	mov	r0, r8
 8008c4e:	4639      	mov	r1, r7
 8008c50:	f7f7 fc42 	bl	80004d8 <__aeabi_dmul>
 8008c54:	460b      	mov	r3, r1
 8008c56:	4602      	mov	r2, r0
 8008c58:	4629      	mov	r1, r5
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f7f7 fa84 	bl	8000168 <__aeabi_dsub>
 8008c60:	4b28      	ldr	r3, [pc, #160]	; (8008d04 <__kernel_cos+0x16c>)
 8008c62:	4680      	mov	r8, r0
 8008c64:	429e      	cmp	r6, r3
 8008c66:	4689      	mov	r9, r1
 8008c68:	dc0e      	bgt.n	8008c88 <__kernel_cos+0xf0>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4650      	mov	r0, sl
 8008c70:	4659      	mov	r1, fp
 8008c72:	f7f7 fa79 	bl	8000168 <__aeabi_dsub>
 8008c76:	4602      	mov	r2, r0
 8008c78:	2000      	movs	r0, #0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4922      	ldr	r1, [pc, #136]	; (8008d08 <__kernel_cos+0x170>)
 8008c7e:	f7f7 fa73 	bl	8000168 <__aeabi_dsub>
 8008c82:	b003      	add	sp, #12
 8008c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c88:	2400      	movs	r4, #0
 8008c8a:	4b20      	ldr	r3, [pc, #128]	; (8008d0c <__kernel_cos+0x174>)
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	429e      	cmp	r6, r3
 8008c90:	bfcc      	ite	gt
 8008c92:	4d1f      	ldrgt	r5, [pc, #124]	; (8008d10 <__kernel_cos+0x178>)
 8008c94:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008c98:	462b      	mov	r3, r5
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	491a      	ldr	r1, [pc, #104]	; (8008d08 <__kernel_cos+0x170>)
 8008c9e:	f7f7 fa63 	bl	8000168 <__aeabi_dsub>
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	4606      	mov	r6, r0
 8008ca6:	460f      	mov	r7, r1
 8008ca8:	462b      	mov	r3, r5
 8008caa:	4650      	mov	r0, sl
 8008cac:	4659      	mov	r1, fp
 8008cae:	f7f7 fa5b 	bl	8000168 <__aeabi_dsub>
 8008cb2:	4642      	mov	r2, r8
 8008cb4:	464b      	mov	r3, r9
 8008cb6:	f7f7 fa57 	bl	8000168 <__aeabi_dsub>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	4639      	mov	r1, r7
 8008cc2:	e7dc      	b.n	8008c7e <__kernel_cos+0xe6>
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	4910      	ldr	r1, [pc, #64]	; (8008d08 <__kernel_cos+0x170>)
 8008cc8:	e7db      	b.n	8008c82 <__kernel_cos+0xea>
 8008cca:	bf00      	nop
 8008ccc:	f3af 8000 	nop.w
 8008cd0:	be8838d4 	.word	0xbe8838d4
 8008cd4:	bda8fae9 	.word	0xbda8fae9
 8008cd8:	bdb4b1c4 	.word	0xbdb4b1c4
 8008cdc:	3e21ee9e 	.word	0x3e21ee9e
 8008ce0:	809c52ad 	.word	0x809c52ad
 8008ce4:	3e927e4f 	.word	0x3e927e4f
 8008ce8:	19cb1590 	.word	0x19cb1590
 8008cec:	3efa01a0 	.word	0x3efa01a0
 8008cf0:	16c15177 	.word	0x16c15177
 8008cf4:	3f56c16c 	.word	0x3f56c16c
 8008cf8:	5555554c 	.word	0x5555554c
 8008cfc:	3fa55555 	.word	0x3fa55555
 8008d00:	3fe00000 	.word	0x3fe00000
 8008d04:	3fd33332 	.word	0x3fd33332
 8008d08:	3ff00000 	.word	0x3ff00000
 8008d0c:	3fe90000 	.word	0x3fe90000
 8008d10:	3fd20000 	.word	0x3fd20000

08008d14 <__kernel_rem_pio2>:
 8008d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d18:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008d1c:	9307      	str	r3, [sp, #28]
 8008d1e:	9104      	str	r1, [sp, #16]
 8008d20:	4bbf      	ldr	r3, [pc, #764]	; (8009020 <__kernel_rem_pio2+0x30c>)
 8008d22:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008d24:	1ed4      	subs	r4, r2, #3
 8008d26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d2a:	2500      	movs	r5, #0
 8008d2c:	9302      	str	r3, [sp, #8]
 8008d2e:	9b07      	ldr	r3, [sp, #28]
 8008d30:	9008      	str	r0, [sp, #32]
 8008d32:	3b01      	subs	r3, #1
 8008d34:	9306      	str	r3, [sp, #24]
 8008d36:	2318      	movs	r3, #24
 8008d38:	fb94 f4f3 	sdiv	r4, r4, r3
 8008d3c:	f06f 0317 	mvn.w	r3, #23
 8008d40:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008d44:	fb04 3303 	mla	r3, r4, r3, r3
 8008d48:	eb03 0a02 	add.w	sl, r3, r2
 8008d4c:	9a06      	ldr	r2, [sp, #24]
 8008d4e:	9b02      	ldr	r3, [sp, #8]
 8008d50:	1aa7      	subs	r7, r4, r2
 8008d52:	eb03 0802 	add.w	r8, r3, r2
 8008d56:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008d58:	2200      	movs	r2, #0
 8008d5a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008d5e:	2300      	movs	r3, #0
 8008d60:	ae1e      	add	r6, sp, #120	; 0x78
 8008d62:	4545      	cmp	r5, r8
 8008d64:	dd14      	ble.n	8008d90 <__kernel_rem_pio2+0x7c>
 8008d66:	2600      	movs	r6, #0
 8008d68:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8008d6c:	9b02      	ldr	r3, [sp, #8]
 8008d6e:	429e      	cmp	r6, r3
 8008d70:	dc39      	bgt.n	8008de6 <__kernel_rem_pio2+0xd2>
 8008d72:	9b08      	ldr	r3, [sp, #32]
 8008d74:	f04f 0800 	mov.w	r8, #0
 8008d78:	3b08      	subs	r3, #8
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	9b07      	ldr	r3, [sp, #28]
 8008d7e:	f04f 0900 	mov.w	r9, #0
 8008d82:	199d      	adds	r5, r3, r6
 8008d84:	ab20      	add	r3, sp, #128	; 0x80
 8008d86:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008d8a:	9305      	str	r3, [sp, #20]
 8008d8c:	2700      	movs	r7, #0
 8008d8e:	e023      	b.n	8008dd8 <__kernel_rem_pio2+0xc4>
 8008d90:	42ef      	cmn	r7, r5
 8008d92:	d40b      	bmi.n	8008dac <__kernel_rem_pio2+0x98>
 8008d94:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008d98:	e9cd 2300 	strd	r2, r3, [sp]
 8008d9c:	f7f7 fb32 	bl	8000404 <__aeabi_i2d>
 8008da0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008da4:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8008da8:	3501      	adds	r5, #1
 8008daa:	e7da      	b.n	8008d62 <__kernel_rem_pio2+0x4e>
 8008dac:	4610      	mov	r0, r2
 8008dae:	4619      	mov	r1, r3
 8008db0:	e7f8      	b.n	8008da4 <__kernel_rem_pio2+0x90>
 8008db2:	9905      	ldr	r1, [sp, #20]
 8008db4:	9d00      	ldr	r5, [sp, #0]
 8008db6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008dba:	9105      	str	r1, [sp, #20]
 8008dbc:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8008dc0:	9500      	str	r5, [sp, #0]
 8008dc2:	f7f7 fb89 	bl	80004d8 <__aeabi_dmul>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4640      	mov	r0, r8
 8008dcc:	4649      	mov	r1, r9
 8008dce:	f7f7 f9cd 	bl	800016c <__adddf3>
 8008dd2:	4680      	mov	r8, r0
 8008dd4:	4689      	mov	r9, r1
 8008dd6:	3701      	adds	r7, #1
 8008dd8:	9b06      	ldr	r3, [sp, #24]
 8008dda:	429f      	cmp	r7, r3
 8008ddc:	dde9      	ble.n	8008db2 <__kernel_rem_pio2+0x9e>
 8008dde:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8008de2:	3601      	adds	r6, #1
 8008de4:	e7c2      	b.n	8008d6c <__kernel_rem_pio2+0x58>
 8008de6:	9b02      	ldr	r3, [sp, #8]
 8008de8:	aa0c      	add	r2, sp, #48	; 0x30
 8008dea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8008df0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008df2:	9f02      	ldr	r7, [sp, #8]
 8008df4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008df8:	930a      	str	r3, [sp, #40]	; 0x28
 8008dfa:	2600      	movs	r6, #0
 8008dfc:	ab98      	add	r3, sp, #608	; 0x260
 8008dfe:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8008e02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e06:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e0a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8008e0e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8008e12:	ab98      	add	r3, sp, #608	; 0x260
 8008e14:	445b      	add	r3, fp
 8008e16:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 8008e1a:	1bbb      	subs	r3, r7, r6
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	dc71      	bgt.n	8008f04 <__kernel_rem_pio2+0x1f0>
 8008e20:	4652      	mov	r2, sl
 8008e22:	4640      	mov	r0, r8
 8008e24:	4649      	mov	r1, r9
 8008e26:	f000 fbff 	bl	8009628 <scalbn>
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008e30:	4604      	mov	r4, r0
 8008e32:	460d      	mov	r5, r1
 8008e34:	f7f7 fb50 	bl	80004d8 <__aeabi_dmul>
 8008e38:	f000 fb72 	bl	8009520 <floor>
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	4b79      	ldr	r3, [pc, #484]	; (8009024 <__kernel_rem_pio2+0x310>)
 8008e40:	f7f7 fb4a 	bl	80004d8 <__aeabi_dmul>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4620      	mov	r0, r4
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	f7f7 f98c 	bl	8000168 <__aeabi_dsub>
 8008e50:	460d      	mov	r5, r1
 8008e52:	4604      	mov	r4, r0
 8008e54:	f7f7 fdda 	bl	8000a0c <__aeabi_d2iz>
 8008e58:	9005      	str	r0, [sp, #20]
 8008e5a:	f7f7 fad3 	bl	8000404 <__aeabi_i2d>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	4620      	mov	r0, r4
 8008e64:	4629      	mov	r1, r5
 8008e66:	f7f7 f97f 	bl	8000168 <__aeabi_dsub>
 8008e6a:	f1ba 0f00 	cmp.w	sl, #0
 8008e6e:	4680      	mov	r8, r0
 8008e70:	4689      	mov	r9, r1
 8008e72:	dd6c      	ble.n	8008f4e <__kernel_rem_pio2+0x23a>
 8008e74:	1e7a      	subs	r2, r7, #1
 8008e76:	ab0c      	add	r3, sp, #48	; 0x30
 8008e78:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008e7c:	f1ca 0118 	rsb	r1, sl, #24
 8008e80:	9c05      	ldr	r4, [sp, #20]
 8008e82:	fa40 f301 	asr.w	r3, r0, r1
 8008e86:	441c      	add	r4, r3
 8008e88:	408b      	lsls	r3, r1
 8008e8a:	1ac0      	subs	r0, r0, r3
 8008e8c:	ab0c      	add	r3, sp, #48	; 0x30
 8008e8e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008e92:	f1ca 0317 	rsb	r3, sl, #23
 8008e96:	9405      	str	r4, [sp, #20]
 8008e98:	fa40 f303 	asr.w	r3, r0, r3
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	9b00      	ldr	r3, [sp, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	dd62      	ble.n	8008f6a <__kernel_rem_pio2+0x256>
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008eaa:	4614      	mov	r4, r2
 8008eac:	9b05      	ldr	r3, [sp, #20]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	9305      	str	r3, [sp, #20]
 8008eb2:	4297      	cmp	r7, r2
 8008eb4:	f300 809f 	bgt.w	8008ff6 <__kernel_rem_pio2+0x2e2>
 8008eb8:	f1ba 0f00 	cmp.w	sl, #0
 8008ebc:	dd07      	ble.n	8008ece <__kernel_rem_pio2+0x1ba>
 8008ebe:	f1ba 0f01 	cmp.w	sl, #1
 8008ec2:	f000 80bb 	beq.w	800903c <__kernel_rem_pio2+0x328>
 8008ec6:	f1ba 0f02 	cmp.w	sl, #2
 8008eca:	f000 80c1 	beq.w	8009050 <__kernel_rem_pio2+0x33c>
 8008ece:	9b00      	ldr	r3, [sp, #0]
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d14a      	bne.n	8008f6a <__kernel_rem_pio2+0x256>
 8008ed4:	4642      	mov	r2, r8
 8008ed6:	464b      	mov	r3, r9
 8008ed8:	2000      	movs	r0, #0
 8008eda:	4953      	ldr	r1, [pc, #332]	; (8009028 <__kernel_rem_pio2+0x314>)
 8008edc:	f7f7 f944 	bl	8000168 <__aeabi_dsub>
 8008ee0:	4680      	mov	r8, r0
 8008ee2:	4689      	mov	r9, r1
 8008ee4:	2c00      	cmp	r4, #0
 8008ee6:	d040      	beq.n	8008f6a <__kernel_rem_pio2+0x256>
 8008ee8:	4652      	mov	r2, sl
 8008eea:	2000      	movs	r0, #0
 8008eec:	494e      	ldr	r1, [pc, #312]	; (8009028 <__kernel_rem_pio2+0x314>)
 8008eee:	f000 fb9b 	bl	8009628 <scalbn>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4640      	mov	r0, r8
 8008ef8:	4649      	mov	r1, r9
 8008efa:	f7f7 f935 	bl	8000168 <__aeabi_dsub>
 8008efe:	4680      	mov	r8, r0
 8008f00:	4689      	mov	r9, r1
 8008f02:	e032      	b.n	8008f6a <__kernel_rem_pio2+0x256>
 8008f04:	2200      	movs	r2, #0
 8008f06:	4b49      	ldr	r3, [pc, #292]	; (800902c <__kernel_rem_pio2+0x318>)
 8008f08:	4640      	mov	r0, r8
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	f7f7 fae4 	bl	80004d8 <__aeabi_dmul>
 8008f10:	f7f7 fd7c 	bl	8000a0c <__aeabi_d2iz>
 8008f14:	f7f7 fa76 	bl	8000404 <__aeabi_i2d>
 8008f18:	2200      	movs	r2, #0
 8008f1a:	4b45      	ldr	r3, [pc, #276]	; (8009030 <__kernel_rem_pio2+0x31c>)
 8008f1c:	e9cd 0100 	strd	r0, r1, [sp]
 8008f20:	f7f7 fada 	bl	80004d8 <__aeabi_dmul>
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	4640      	mov	r0, r8
 8008f2a:	4649      	mov	r1, r9
 8008f2c:	f7f7 f91c 	bl	8000168 <__aeabi_dsub>
 8008f30:	f7f7 fd6c 	bl	8000a0c <__aeabi_d2iz>
 8008f34:	ab0c      	add	r3, sp, #48	; 0x30
 8008f36:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008f3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008f3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f42:	f7f7 f913 	bl	800016c <__adddf3>
 8008f46:	3601      	adds	r6, #1
 8008f48:	4680      	mov	r8, r0
 8008f4a:	4689      	mov	r9, r1
 8008f4c:	e765      	b.n	8008e1a <__kernel_rem_pio2+0x106>
 8008f4e:	d105      	bne.n	8008f5c <__kernel_rem_pio2+0x248>
 8008f50:	1e7b      	subs	r3, r7, #1
 8008f52:	aa0c      	add	r2, sp, #48	; 0x30
 8008f54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008f58:	15c3      	asrs	r3, r0, #23
 8008f5a:	e79f      	b.n	8008e9c <__kernel_rem_pio2+0x188>
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	4b35      	ldr	r3, [pc, #212]	; (8009034 <__kernel_rem_pio2+0x320>)
 8008f60:	f7f7 fd40 	bl	80009e4 <__aeabi_dcmpge>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d143      	bne.n	8008ff0 <__kernel_rem_pio2+0x2dc>
 8008f68:	9000      	str	r0, [sp, #0]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	4640      	mov	r0, r8
 8008f70:	4649      	mov	r1, r9
 8008f72:	f7f7 fd19 	bl	80009a8 <__aeabi_dcmpeq>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	f000 80c3 	beq.w	8009102 <__kernel_rem_pio2+0x3ee>
 8008f7c:	1e7c      	subs	r4, r7, #1
 8008f7e:	4623      	mov	r3, r4
 8008f80:	2200      	movs	r2, #0
 8008f82:	9902      	ldr	r1, [sp, #8]
 8008f84:	428b      	cmp	r3, r1
 8008f86:	da6a      	bge.n	800905e <__kernel_rem_pio2+0x34a>
 8008f88:	2a00      	cmp	r2, #0
 8008f8a:	f000 8084 	beq.w	8009096 <__kernel_rem_pio2+0x382>
 8008f8e:	ab0c      	add	r3, sp, #48	; 0x30
 8008f90:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008f94:	f1aa 0a18 	sub.w	sl, sl, #24
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 80b0 	beq.w	80090fe <__kernel_rem_pio2+0x3ea>
 8008f9e:	4652      	mov	r2, sl
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	4921      	ldr	r1, [pc, #132]	; (8009028 <__kernel_rem_pio2+0x314>)
 8008fa4:	f000 fb40 	bl	8009628 <scalbn>
 8008fa8:	4625      	mov	r5, r4
 8008faa:	4606      	mov	r6, r0
 8008fac:	460f      	mov	r7, r1
 8008fae:	f04f 0a00 	mov.w	sl, #0
 8008fb2:	00e3      	lsls	r3, r4, #3
 8008fb4:	aa98      	add	r2, sp, #608	; 0x260
 8008fb6:	eb02 0803 	add.w	r8, r2, r3
 8008fba:	f8df b070 	ldr.w	fp, [pc, #112]	; 800902c <__kernel_rem_pio2+0x318>
 8008fbe:	9306      	str	r3, [sp, #24]
 8008fc0:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8008fc4:	2d00      	cmp	r5, #0
 8008fc6:	f280 80d2 	bge.w	800916e <__kernel_rem_pio2+0x45a>
 8008fca:	2500      	movs	r5, #0
 8008fcc:	9a06      	ldr	r2, [sp, #24]
 8008fce:	ab98      	add	r3, sp, #608	; 0x260
 8008fd0:	189e      	adds	r6, r3, r2
 8008fd2:	3ea8      	subs	r6, #168	; 0xa8
 8008fd4:	1b63      	subs	r3, r4, r5
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f2c0 80f9 	blt.w	80091ce <__kernel_rem_pio2+0x4ba>
 8008fdc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8009038 <__kernel_rem_pio2+0x324>
 8008fe0:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 8008fe4:	f04f 0a00 	mov.w	sl, #0
 8008fe8:	f04f 0b00 	mov.w	fp, #0
 8008fec:	2700      	movs	r7, #0
 8008fee:	e0e2      	b.n	80091b6 <__kernel_rem_pio2+0x4a2>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	e756      	b.n	8008ea4 <__kernel_rem_pio2+0x190>
 8008ff6:	ab0c      	add	r3, sp, #48	; 0x30
 8008ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffc:	b94c      	cbnz	r4, 8009012 <__kernel_rem_pio2+0x2fe>
 8008ffe:	b12b      	cbz	r3, 800900c <__kernel_rem_pio2+0x2f8>
 8009000:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009004:	a80c      	add	r0, sp, #48	; 0x30
 8009006:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800900a:	2301      	movs	r3, #1
 800900c:	3201      	adds	r2, #1
 800900e:	461c      	mov	r4, r3
 8009010:	e74f      	b.n	8008eb2 <__kernel_rem_pio2+0x19e>
 8009012:	1acb      	subs	r3, r1, r3
 8009014:	a80c      	add	r0, sp, #48	; 0x30
 8009016:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800901a:	4623      	mov	r3, r4
 800901c:	e7f6      	b.n	800900c <__kernel_rem_pio2+0x2f8>
 800901e:	bf00      	nop
 8009020:	0800ad40 	.word	0x0800ad40
 8009024:	40200000 	.word	0x40200000
 8009028:	3ff00000 	.word	0x3ff00000
 800902c:	3e700000 	.word	0x3e700000
 8009030:	41700000 	.word	0x41700000
 8009034:	3fe00000 	.word	0x3fe00000
 8009038:	0800acf8 	.word	0x0800acf8
 800903c:	1e7a      	subs	r2, r7, #1
 800903e:	ab0c      	add	r3, sp, #48	; 0x30
 8009040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009044:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009048:	a90c      	add	r1, sp, #48	; 0x30
 800904a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800904e:	e73e      	b.n	8008ece <__kernel_rem_pio2+0x1ba>
 8009050:	1e7a      	subs	r2, r7, #1
 8009052:	ab0c      	add	r3, sp, #48	; 0x30
 8009054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009058:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800905c:	e7f4      	b.n	8009048 <__kernel_rem_pio2+0x334>
 800905e:	a90c      	add	r1, sp, #48	; 0x30
 8009060:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009064:	3b01      	subs	r3, #1
 8009066:	430a      	orrs	r2, r1
 8009068:	e78b      	b.n	8008f82 <__kernel_rem_pio2+0x26e>
 800906a:	3401      	adds	r4, #1
 800906c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009070:	2a00      	cmp	r2, #0
 8009072:	d0fa      	beq.n	800906a <__kernel_rem_pio2+0x356>
 8009074:	ab98      	add	r3, sp, #608	; 0x260
 8009076:	449b      	add	fp, r3
 8009078:	9b07      	ldr	r3, [sp, #28]
 800907a:	1c7e      	adds	r6, r7, #1
 800907c:	19dd      	adds	r5, r3, r7
 800907e:	ab98      	add	r3, sp, #608	; 0x260
 8009080:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009084:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8009088:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800908c:	443c      	add	r4, r7
 800908e:	42b4      	cmp	r4, r6
 8009090:	da04      	bge.n	800909c <__kernel_rem_pio2+0x388>
 8009092:	4627      	mov	r7, r4
 8009094:	e6b1      	b.n	8008dfa <__kernel_rem_pio2+0xe6>
 8009096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009098:	2401      	movs	r4, #1
 800909a:	e7e7      	b.n	800906c <__kernel_rem_pio2+0x358>
 800909c:	f105 0308 	add.w	r3, r5, #8
 80090a0:	9309      	str	r3, [sp, #36]	; 0x24
 80090a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a4:	2700      	movs	r7, #0
 80090a6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80090aa:	f7f7 f9ab 	bl	8000404 <__aeabi_i2d>
 80090ae:	f04f 0800 	mov.w	r8, #0
 80090b2:	f04f 0900 	mov.w	r9, #0
 80090b6:	9b08      	ldr	r3, [sp, #32]
 80090b8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80090bc:	3b08      	subs	r3, #8
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	f105 0310 	add.w	r3, r5, #16
 80090c4:	9305      	str	r3, [sp, #20]
 80090c6:	9b06      	ldr	r3, [sp, #24]
 80090c8:	429f      	cmp	r7, r3
 80090ca:	dd04      	ble.n	80090d6 <__kernel_rem_pio2+0x3c2>
 80090cc:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 80090d0:	3601      	adds	r6, #1
 80090d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80090d4:	e7db      	b.n	800908e <__kernel_rem_pio2+0x37a>
 80090d6:	9905      	ldr	r1, [sp, #20]
 80090d8:	9d00      	ldr	r5, [sp, #0]
 80090da:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80090de:	9105      	str	r1, [sp, #20]
 80090e0:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80090e4:	9500      	str	r5, [sp, #0]
 80090e6:	f7f7 f9f7 	bl	80004d8 <__aeabi_dmul>
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	4640      	mov	r0, r8
 80090f0:	4649      	mov	r1, r9
 80090f2:	f7f7 f83b 	bl	800016c <__adddf3>
 80090f6:	3701      	adds	r7, #1
 80090f8:	4680      	mov	r8, r0
 80090fa:	4689      	mov	r9, r1
 80090fc:	e7e3      	b.n	80090c6 <__kernel_rem_pio2+0x3b2>
 80090fe:	3c01      	subs	r4, #1
 8009100:	e745      	b.n	8008f8e <__kernel_rem_pio2+0x27a>
 8009102:	f1ca 0200 	rsb	r2, sl, #0
 8009106:	4640      	mov	r0, r8
 8009108:	4649      	mov	r1, r9
 800910a:	f000 fa8d 	bl	8009628 <scalbn>
 800910e:	2200      	movs	r2, #0
 8009110:	4ba3      	ldr	r3, [pc, #652]	; (80093a0 <__kernel_rem_pio2+0x68c>)
 8009112:	4604      	mov	r4, r0
 8009114:	460d      	mov	r5, r1
 8009116:	f7f7 fc65 	bl	80009e4 <__aeabi_dcmpge>
 800911a:	b1f8      	cbz	r0, 800915c <__kernel_rem_pio2+0x448>
 800911c:	2200      	movs	r2, #0
 800911e:	4ba1      	ldr	r3, [pc, #644]	; (80093a4 <__kernel_rem_pio2+0x690>)
 8009120:	4620      	mov	r0, r4
 8009122:	4629      	mov	r1, r5
 8009124:	f7f7 f9d8 	bl	80004d8 <__aeabi_dmul>
 8009128:	f7f7 fc70 	bl	8000a0c <__aeabi_d2iz>
 800912c:	4606      	mov	r6, r0
 800912e:	f7f7 f969 	bl	8000404 <__aeabi_i2d>
 8009132:	2200      	movs	r2, #0
 8009134:	4b9a      	ldr	r3, [pc, #616]	; (80093a0 <__kernel_rem_pio2+0x68c>)
 8009136:	f7f7 f9cf 	bl	80004d8 <__aeabi_dmul>
 800913a:	460b      	mov	r3, r1
 800913c:	4602      	mov	r2, r0
 800913e:	4629      	mov	r1, r5
 8009140:	4620      	mov	r0, r4
 8009142:	f7f7 f811 	bl	8000168 <__aeabi_dsub>
 8009146:	f7f7 fc61 	bl	8000a0c <__aeabi_d2iz>
 800914a:	1c7c      	adds	r4, r7, #1
 800914c:	ab0c      	add	r3, sp, #48	; 0x30
 800914e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009152:	f10a 0a18 	add.w	sl, sl, #24
 8009156:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800915a:	e720      	b.n	8008f9e <__kernel_rem_pio2+0x28a>
 800915c:	4620      	mov	r0, r4
 800915e:	4629      	mov	r1, r5
 8009160:	f7f7 fc54 	bl	8000a0c <__aeabi_d2iz>
 8009164:	ab0c      	add	r3, sp, #48	; 0x30
 8009166:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800916a:	463c      	mov	r4, r7
 800916c:	e717      	b.n	8008f9e <__kernel_rem_pio2+0x28a>
 800916e:	ab0c      	add	r3, sp, #48	; 0x30
 8009170:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009174:	f7f7 f946 	bl	8000404 <__aeabi_i2d>
 8009178:	4632      	mov	r2, r6
 800917a:	463b      	mov	r3, r7
 800917c:	f7f7 f9ac 	bl	80004d8 <__aeabi_dmul>
 8009180:	4652      	mov	r2, sl
 8009182:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009186:	465b      	mov	r3, fp
 8009188:	4630      	mov	r0, r6
 800918a:	4639      	mov	r1, r7
 800918c:	f7f7 f9a4 	bl	80004d8 <__aeabi_dmul>
 8009190:	3d01      	subs	r5, #1
 8009192:	4606      	mov	r6, r0
 8009194:	460f      	mov	r7, r1
 8009196:	e715      	b.n	8008fc4 <__kernel_rem_pio2+0x2b0>
 8009198:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800919c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80091a0:	f7f7 f99a 	bl	80004d8 <__aeabi_dmul>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4650      	mov	r0, sl
 80091aa:	4659      	mov	r1, fp
 80091ac:	f7f6 ffde 	bl	800016c <__adddf3>
 80091b0:	4682      	mov	sl, r0
 80091b2:	468b      	mov	fp, r1
 80091b4:	3701      	adds	r7, #1
 80091b6:	9b02      	ldr	r3, [sp, #8]
 80091b8:	429f      	cmp	r7, r3
 80091ba:	dc01      	bgt.n	80091c0 <__kernel_rem_pio2+0x4ac>
 80091bc:	42bd      	cmp	r5, r7
 80091be:	daeb      	bge.n	8009198 <__kernel_rem_pio2+0x484>
 80091c0:	ab48      	add	r3, sp, #288	; 0x120
 80091c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80091c6:	e9c3 ab00 	strd	sl, fp, [r3]
 80091ca:	3501      	adds	r5, #1
 80091cc:	e702      	b.n	8008fd4 <__kernel_rem_pio2+0x2c0>
 80091ce:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d86c      	bhi.n	80092ae <__kernel_rem_pio2+0x59a>
 80091d4:	e8df f003 	tbb	[pc, r3]
 80091d8:	022f2f59 	.word	0x022f2f59
 80091dc:	9a06      	ldr	r2, [sp, #24]
 80091de:	ab48      	add	r3, sp, #288	; 0x120
 80091e0:	189d      	adds	r5, r3, r2
 80091e2:	46aa      	mov	sl, r5
 80091e4:	46a3      	mov	fp, r4
 80091e6:	f1bb 0f00 	cmp.w	fp, #0
 80091ea:	f300 8087 	bgt.w	80092fc <__kernel_rem_pio2+0x5e8>
 80091ee:	46a2      	mov	sl, r4
 80091f0:	f1ba 0f01 	cmp.w	sl, #1
 80091f4:	f300 809f 	bgt.w	8009336 <__kernel_rem_pio2+0x622>
 80091f8:	2700      	movs	r7, #0
 80091fa:	463e      	mov	r6, r7
 80091fc:	9d06      	ldr	r5, [sp, #24]
 80091fe:	ab48      	add	r3, sp, #288	; 0x120
 8009200:	3508      	adds	r5, #8
 8009202:	441d      	add	r5, r3
 8009204:	2c01      	cmp	r4, #1
 8009206:	f300 80b3 	bgt.w	8009370 <__kernel_rem_pio2+0x65c>
 800920a:	9b00      	ldr	r3, [sp, #0]
 800920c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800920e:	9849      	ldr	r0, [sp, #292]	; 0x124
 8009210:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 8009212:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8009214:	2b00      	cmp	r3, #0
 8009216:	f040 80b5 	bne.w	8009384 <__kernel_rem_pio2+0x670>
 800921a:	4603      	mov	r3, r0
 800921c:	462a      	mov	r2, r5
 800921e:	9804      	ldr	r0, [sp, #16]
 8009220:	e9c0 2300 	strd	r2, r3, [r0]
 8009224:	4622      	mov	r2, r4
 8009226:	460b      	mov	r3, r1
 8009228:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800922c:	463a      	mov	r2, r7
 800922e:	4633      	mov	r3, r6
 8009230:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009234:	e03b      	b.n	80092ae <__kernel_rem_pio2+0x59a>
 8009236:	f04f 0c00 	mov.w	ip, #0
 800923a:	4626      	mov	r6, r4
 800923c:	4667      	mov	r7, ip
 800923e:	9d06      	ldr	r5, [sp, #24]
 8009240:	ab48      	add	r3, sp, #288	; 0x120
 8009242:	3508      	adds	r5, #8
 8009244:	441d      	add	r5, r3
 8009246:	2e00      	cmp	r6, #0
 8009248:	da42      	bge.n	80092d0 <__kernel_rem_pio2+0x5bc>
 800924a:	9b00      	ldr	r3, [sp, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d049      	beq.n	80092e4 <__kernel_rem_pio2+0x5d0>
 8009250:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8009254:	4662      	mov	r2, ip
 8009256:	460b      	mov	r3, r1
 8009258:	9904      	ldr	r1, [sp, #16]
 800925a:	2601      	movs	r6, #1
 800925c:	e9c1 2300 	strd	r2, r3, [r1]
 8009260:	a948      	add	r1, sp, #288	; 0x120
 8009262:	463b      	mov	r3, r7
 8009264:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009268:	f7f6 ff7e 	bl	8000168 <__aeabi_dsub>
 800926c:	4684      	mov	ip, r0
 800926e:	460f      	mov	r7, r1
 8009270:	ad48      	add	r5, sp, #288	; 0x120
 8009272:	42b4      	cmp	r4, r6
 8009274:	da38      	bge.n	80092e8 <__kernel_rem_pio2+0x5d4>
 8009276:	9b00      	ldr	r3, [sp, #0]
 8009278:	b10b      	cbz	r3, 800927e <__kernel_rem_pio2+0x56a>
 800927a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800927e:	4662      	mov	r2, ip
 8009280:	463b      	mov	r3, r7
 8009282:	9904      	ldr	r1, [sp, #16]
 8009284:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009288:	e011      	b.n	80092ae <__kernel_rem_pio2+0x59a>
 800928a:	2700      	movs	r7, #0
 800928c:	463d      	mov	r5, r7
 800928e:	9b06      	ldr	r3, [sp, #24]
 8009290:	aa98      	add	r2, sp, #608	; 0x260
 8009292:	4413      	add	r3, r2
 8009294:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8009298:	2c00      	cmp	r4, #0
 800929a:	da0f      	bge.n	80092bc <__kernel_rem_pio2+0x5a8>
 800929c:	9b00      	ldr	r3, [sp, #0]
 800929e:	b10b      	cbz	r3, 80092a4 <__kernel_rem_pio2+0x590>
 80092a0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80092a4:	463a      	mov	r2, r7
 80092a6:	462b      	mov	r3, r5
 80092a8:	9904      	ldr	r1, [sp, #16]
 80092aa:	e9c1 2300 	strd	r2, r3, [r1]
 80092ae:	9b05      	ldr	r3, [sp, #20]
 80092b0:	f003 0007 	and.w	r0, r3, #7
 80092b4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80092b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092bc:	4638      	mov	r0, r7
 80092be:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80092c2:	4629      	mov	r1, r5
 80092c4:	f7f6 ff52 	bl	800016c <__adddf3>
 80092c8:	3c01      	subs	r4, #1
 80092ca:	4607      	mov	r7, r0
 80092cc:	460d      	mov	r5, r1
 80092ce:	e7e3      	b.n	8009298 <__kernel_rem_pio2+0x584>
 80092d0:	4660      	mov	r0, ip
 80092d2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80092d6:	4639      	mov	r1, r7
 80092d8:	f7f6 ff48 	bl	800016c <__adddf3>
 80092dc:	3e01      	subs	r6, #1
 80092de:	4684      	mov	ip, r0
 80092e0:	460f      	mov	r7, r1
 80092e2:	e7b0      	b.n	8009246 <__kernel_rem_pio2+0x532>
 80092e4:	4639      	mov	r1, r7
 80092e6:	e7b5      	b.n	8009254 <__kernel_rem_pio2+0x540>
 80092e8:	4660      	mov	r0, ip
 80092ea:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80092ee:	4639      	mov	r1, r7
 80092f0:	f7f6 ff3c 	bl	800016c <__adddf3>
 80092f4:	3601      	adds	r6, #1
 80092f6:	4684      	mov	ip, r0
 80092f8:	460f      	mov	r7, r1
 80092fa:	e7ba      	b.n	8009272 <__kernel_rem_pio2+0x55e>
 80092fc:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8009300:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8009304:	4640      	mov	r0, r8
 8009306:	4649      	mov	r1, r9
 8009308:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800930c:	f7f6 ff2e 	bl	800016c <__adddf3>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4606      	mov	r6, r0
 8009316:	460f      	mov	r7, r1
 8009318:	4640      	mov	r0, r8
 800931a:	4649      	mov	r1, r9
 800931c:	f7f6 ff24 	bl	8000168 <__aeabi_dsub>
 8009320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009324:	f7f6 ff22 	bl	800016c <__adddf3>
 8009328:	f10b 3bff 	add.w	fp, fp, #4294967295
 800932c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009330:	e9ca 6700 	strd	r6, r7, [sl]
 8009334:	e757      	b.n	80091e6 <__kernel_rem_pio2+0x4d2>
 8009336:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800933a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800933e:	4630      	mov	r0, r6
 8009340:	4639      	mov	r1, r7
 8009342:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009346:	f7f6 ff11 	bl	800016c <__adddf3>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	4680      	mov	r8, r0
 8009350:	4689      	mov	r9, r1
 8009352:	4630      	mov	r0, r6
 8009354:	4639      	mov	r1, r7
 8009356:	f7f6 ff07 	bl	8000168 <__aeabi_dsub>
 800935a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800935e:	f7f6 ff05 	bl	800016c <__adddf3>
 8009362:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009366:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800936a:	e9c5 8900 	strd	r8, r9, [r5]
 800936e:	e73f      	b.n	80091f0 <__kernel_rem_pio2+0x4dc>
 8009370:	4638      	mov	r0, r7
 8009372:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009376:	4631      	mov	r1, r6
 8009378:	f7f6 fef8 	bl	800016c <__adddf3>
 800937c:	3c01      	subs	r4, #1
 800937e:	4607      	mov	r7, r0
 8009380:	460e      	mov	r6, r1
 8009382:	e73f      	b.n	8009204 <__kernel_rem_pio2+0x4f0>
 8009384:	9b04      	ldr	r3, [sp, #16]
 8009386:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800938a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800938e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009392:	601d      	str	r5, [r3, #0]
 8009394:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8009398:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800939c:	615e      	str	r6, [r3, #20]
 800939e:	e786      	b.n	80092ae <__kernel_rem_pio2+0x59a>
 80093a0:	41700000 	.word	0x41700000
 80093a4:	3e700000 	.word	0x3e700000

080093a8 <__kernel_sin>:
 80093a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093ac:	b086      	sub	sp, #24
 80093ae:	e9cd 2300 	strd	r2, r3, [sp]
 80093b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093b6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80093ba:	4682      	mov	sl, r0
 80093bc:	460c      	mov	r4, r1
 80093be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80093c0:	da03      	bge.n	80093ca <__kernel_sin+0x22>
 80093c2:	f7f7 fb23 	bl	8000a0c <__aeabi_d2iz>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d050      	beq.n	800946c <__kernel_sin+0xc4>
 80093ca:	4652      	mov	r2, sl
 80093cc:	4623      	mov	r3, r4
 80093ce:	4650      	mov	r0, sl
 80093d0:	4621      	mov	r1, r4
 80093d2:	f7f7 f881 	bl	80004d8 <__aeabi_dmul>
 80093d6:	4606      	mov	r6, r0
 80093d8:	460f      	mov	r7, r1
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4650      	mov	r0, sl
 80093e0:	4621      	mov	r1, r4
 80093e2:	f7f7 f879 	bl	80004d8 <__aeabi_dmul>
 80093e6:	a33e      	add	r3, pc, #248	; (adr r3, 80094e0 <__kernel_sin+0x138>)
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	4680      	mov	r8, r0
 80093ee:	4689      	mov	r9, r1
 80093f0:	4630      	mov	r0, r6
 80093f2:	4639      	mov	r1, r7
 80093f4:	f7f7 f870 	bl	80004d8 <__aeabi_dmul>
 80093f8:	a33b      	add	r3, pc, #236	; (adr r3, 80094e8 <__kernel_sin+0x140>)
 80093fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fe:	f7f6 feb3 	bl	8000168 <__aeabi_dsub>
 8009402:	4632      	mov	r2, r6
 8009404:	463b      	mov	r3, r7
 8009406:	f7f7 f867 	bl	80004d8 <__aeabi_dmul>
 800940a:	a339      	add	r3, pc, #228	; (adr r3, 80094f0 <__kernel_sin+0x148>)
 800940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009410:	f7f6 feac 	bl	800016c <__adddf3>
 8009414:	4632      	mov	r2, r6
 8009416:	463b      	mov	r3, r7
 8009418:	f7f7 f85e 	bl	80004d8 <__aeabi_dmul>
 800941c:	a336      	add	r3, pc, #216	; (adr r3, 80094f8 <__kernel_sin+0x150>)
 800941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009422:	f7f6 fea1 	bl	8000168 <__aeabi_dsub>
 8009426:	4632      	mov	r2, r6
 8009428:	463b      	mov	r3, r7
 800942a:	f7f7 f855 	bl	80004d8 <__aeabi_dmul>
 800942e:	a334      	add	r3, pc, #208	; (adr r3, 8009500 <__kernel_sin+0x158>)
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	f7f6 fe9a 	bl	800016c <__adddf3>
 8009438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800943c:	b9dd      	cbnz	r5, 8009476 <__kernel_sin+0xce>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	4630      	mov	r0, r6
 8009444:	4639      	mov	r1, r7
 8009446:	f7f7 f847 	bl	80004d8 <__aeabi_dmul>
 800944a:	a32f      	add	r3, pc, #188	; (adr r3, 8009508 <__kernel_sin+0x160>)
 800944c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009450:	f7f6 fe8a 	bl	8000168 <__aeabi_dsub>
 8009454:	4642      	mov	r2, r8
 8009456:	464b      	mov	r3, r9
 8009458:	f7f7 f83e 	bl	80004d8 <__aeabi_dmul>
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	4650      	mov	r0, sl
 8009462:	4621      	mov	r1, r4
 8009464:	f7f6 fe82 	bl	800016c <__adddf3>
 8009468:	4682      	mov	sl, r0
 800946a:	460c      	mov	r4, r1
 800946c:	4650      	mov	r0, sl
 800946e:	4621      	mov	r1, r4
 8009470:	b006      	add	sp, #24
 8009472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009476:	2200      	movs	r2, #0
 8009478:	e9dd 0100 	ldrd	r0, r1, [sp]
 800947c:	4b24      	ldr	r3, [pc, #144]	; (8009510 <__kernel_sin+0x168>)
 800947e:	f7f7 f82b 	bl	80004d8 <__aeabi_dmul>
 8009482:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800948a:	4640      	mov	r0, r8
 800948c:	4649      	mov	r1, r9
 800948e:	f7f7 f823 	bl	80004d8 <__aeabi_dmul>
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800949a:	f7f6 fe65 	bl	8000168 <__aeabi_dsub>
 800949e:	4632      	mov	r2, r6
 80094a0:	463b      	mov	r3, r7
 80094a2:	f7f7 f819 	bl	80004d8 <__aeabi_dmul>
 80094a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094aa:	f7f6 fe5d 	bl	8000168 <__aeabi_dsub>
 80094ae:	a316      	add	r3, pc, #88	; (adr r3, 8009508 <__kernel_sin+0x160>)
 80094b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b4:	4606      	mov	r6, r0
 80094b6:	460f      	mov	r7, r1
 80094b8:	4640      	mov	r0, r8
 80094ba:	4649      	mov	r1, r9
 80094bc:	f7f7 f80c 	bl	80004d8 <__aeabi_dmul>
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
 80094c4:	4630      	mov	r0, r6
 80094c6:	4639      	mov	r1, r7
 80094c8:	f7f6 fe50 	bl	800016c <__adddf3>
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	4650      	mov	r0, sl
 80094d2:	4621      	mov	r1, r4
 80094d4:	f7f6 fe48 	bl	8000168 <__aeabi_dsub>
 80094d8:	e7c6      	b.n	8009468 <__kernel_sin+0xc0>
 80094da:	bf00      	nop
 80094dc:	f3af 8000 	nop.w
 80094e0:	5acfd57c 	.word	0x5acfd57c
 80094e4:	3de5d93a 	.word	0x3de5d93a
 80094e8:	8a2b9ceb 	.word	0x8a2b9ceb
 80094ec:	3e5ae5e6 	.word	0x3e5ae5e6
 80094f0:	57b1fe7d 	.word	0x57b1fe7d
 80094f4:	3ec71de3 	.word	0x3ec71de3
 80094f8:	19c161d5 	.word	0x19c161d5
 80094fc:	3f2a01a0 	.word	0x3f2a01a0
 8009500:	1110f8a6 	.word	0x1110f8a6
 8009504:	3f811111 	.word	0x3f811111
 8009508:	55555549 	.word	0x55555549
 800950c:	3fc55555 	.word	0x3fc55555
 8009510:	3fe00000 	.word	0x3fe00000

08009514 <fabs>:
 8009514:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009518:	4619      	mov	r1, r3
 800951a:	4770      	bx	lr
 800951c:	0000      	movs	r0, r0
	...

08009520 <floor>:
 8009520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009524:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009528:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800952c:	2e13      	cmp	r6, #19
 800952e:	4607      	mov	r7, r0
 8009530:	460b      	mov	r3, r1
 8009532:	460c      	mov	r4, r1
 8009534:	4605      	mov	r5, r0
 8009536:	dc35      	bgt.n	80095a4 <floor+0x84>
 8009538:	2e00      	cmp	r6, #0
 800953a:	da16      	bge.n	800956a <floor+0x4a>
 800953c:	a336      	add	r3, pc, #216	; (adr r3, 8009618 <floor+0xf8>)
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	f7f6 fe13 	bl	800016c <__adddf3>
 8009546:	2200      	movs	r2, #0
 8009548:	2300      	movs	r3, #0
 800954a:	f7f7 fa55 	bl	80009f8 <__aeabi_dcmpgt>
 800954e:	b148      	cbz	r0, 8009564 <floor+0x44>
 8009550:	2c00      	cmp	r4, #0
 8009552:	da5b      	bge.n	800960c <floor+0xec>
 8009554:	2500      	movs	r5, #0
 8009556:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800955a:	4a31      	ldr	r2, [pc, #196]	; (8009620 <floor+0x100>)
 800955c:	433b      	orrs	r3, r7
 800955e:	42ab      	cmp	r3, r5
 8009560:	bf18      	it	ne
 8009562:	4614      	movne	r4, r2
 8009564:	4623      	mov	r3, r4
 8009566:	462f      	mov	r7, r5
 8009568:	e026      	b.n	80095b8 <floor+0x98>
 800956a:	4a2e      	ldr	r2, [pc, #184]	; (8009624 <floor+0x104>)
 800956c:	fa42 f806 	asr.w	r8, r2, r6
 8009570:	ea01 0208 	and.w	r2, r1, r8
 8009574:	4302      	orrs	r2, r0
 8009576:	d01f      	beq.n	80095b8 <floor+0x98>
 8009578:	a327      	add	r3, pc, #156	; (adr r3, 8009618 <floor+0xf8>)
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	f7f6 fdf5 	bl	800016c <__adddf3>
 8009582:	2200      	movs	r2, #0
 8009584:	2300      	movs	r3, #0
 8009586:	f7f7 fa37 	bl	80009f8 <__aeabi_dcmpgt>
 800958a:	2800      	cmp	r0, #0
 800958c:	d0ea      	beq.n	8009564 <floor+0x44>
 800958e:	2c00      	cmp	r4, #0
 8009590:	bfbe      	ittt	lt
 8009592:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009596:	fa43 f606 	asrlt.w	r6, r3, r6
 800959a:	19a4      	addlt	r4, r4, r6
 800959c:	ea24 0408 	bic.w	r4, r4, r8
 80095a0:	2500      	movs	r5, #0
 80095a2:	e7df      	b.n	8009564 <floor+0x44>
 80095a4:	2e33      	cmp	r6, #51	; 0x33
 80095a6:	dd0b      	ble.n	80095c0 <floor+0xa0>
 80095a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80095ac:	d104      	bne.n	80095b8 <floor+0x98>
 80095ae:	4602      	mov	r2, r0
 80095b0:	f7f6 fddc 	bl	800016c <__adddf3>
 80095b4:	4607      	mov	r7, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	4638      	mov	r0, r7
 80095ba:	4619      	mov	r1, r3
 80095bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095c0:	f04f 32ff 	mov.w	r2, #4294967295
 80095c4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80095c8:	fa22 f808 	lsr.w	r8, r2, r8
 80095cc:	ea18 0f00 	tst.w	r8, r0
 80095d0:	d0f2      	beq.n	80095b8 <floor+0x98>
 80095d2:	a311      	add	r3, pc, #68	; (adr r3, 8009618 <floor+0xf8>)
 80095d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d8:	f7f6 fdc8 	bl	800016c <__adddf3>
 80095dc:	2200      	movs	r2, #0
 80095de:	2300      	movs	r3, #0
 80095e0:	f7f7 fa0a 	bl	80009f8 <__aeabi_dcmpgt>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d0bd      	beq.n	8009564 <floor+0x44>
 80095e8:	2c00      	cmp	r4, #0
 80095ea:	da02      	bge.n	80095f2 <floor+0xd2>
 80095ec:	2e14      	cmp	r6, #20
 80095ee:	d103      	bne.n	80095f8 <floor+0xd8>
 80095f0:	3401      	adds	r4, #1
 80095f2:	ea25 0508 	bic.w	r5, r5, r8
 80095f6:	e7b5      	b.n	8009564 <floor+0x44>
 80095f8:	2301      	movs	r3, #1
 80095fa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80095fe:	fa03 f606 	lsl.w	r6, r3, r6
 8009602:	4435      	add	r5, r6
 8009604:	42bd      	cmp	r5, r7
 8009606:	bf38      	it	cc
 8009608:	18e4      	addcc	r4, r4, r3
 800960a:	e7f2      	b.n	80095f2 <floor+0xd2>
 800960c:	2500      	movs	r5, #0
 800960e:	462c      	mov	r4, r5
 8009610:	e7a8      	b.n	8009564 <floor+0x44>
 8009612:	bf00      	nop
 8009614:	f3af 8000 	nop.w
 8009618:	8800759c 	.word	0x8800759c
 800961c:	7e37e43c 	.word	0x7e37e43c
 8009620:	bff00000 	.word	0xbff00000
 8009624:	000fffff 	.word	0x000fffff

08009628 <scalbn>:
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962a:	4616      	mov	r6, r2
 800962c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009630:	4604      	mov	r4, r0
 8009632:	460d      	mov	r5, r1
 8009634:	460b      	mov	r3, r1
 8009636:	b982      	cbnz	r2, 800965a <scalbn+0x32>
 8009638:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800963c:	4303      	orrs	r3, r0
 800963e:	d034      	beq.n	80096aa <scalbn+0x82>
 8009640:	4b2d      	ldr	r3, [pc, #180]	; (80096f8 <scalbn+0xd0>)
 8009642:	2200      	movs	r2, #0
 8009644:	f7f6 ff48 	bl	80004d8 <__aeabi_dmul>
 8009648:	4b2c      	ldr	r3, [pc, #176]	; (80096fc <scalbn+0xd4>)
 800964a:	4604      	mov	r4, r0
 800964c:	429e      	cmp	r6, r3
 800964e:	460d      	mov	r5, r1
 8009650:	da0d      	bge.n	800966e <scalbn+0x46>
 8009652:	a325      	add	r3, pc, #148	; (adr r3, 80096e8 <scalbn+0xc0>)
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	e01c      	b.n	8009694 <scalbn+0x6c>
 800965a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800965e:	42ba      	cmp	r2, r7
 8009660:	d109      	bne.n	8009676 <scalbn+0x4e>
 8009662:	4602      	mov	r2, r0
 8009664:	f7f6 fd82 	bl	800016c <__adddf3>
 8009668:	4604      	mov	r4, r0
 800966a:	460d      	mov	r5, r1
 800966c:	e01d      	b.n	80096aa <scalbn+0x82>
 800966e:	460b      	mov	r3, r1
 8009670:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009674:	3a36      	subs	r2, #54	; 0x36
 8009676:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800967a:	4432      	add	r2, r6
 800967c:	428a      	cmp	r2, r1
 800967e:	dd0c      	ble.n	800969a <scalbn+0x72>
 8009680:	4622      	mov	r2, r4
 8009682:	462b      	mov	r3, r5
 8009684:	a11a      	add	r1, pc, #104	; (adr r1, 80096f0 <scalbn+0xc8>)
 8009686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800968a:	f000 f83b 	bl	8009704 <copysign>
 800968e:	a318      	add	r3, pc, #96	; (adr r3, 80096f0 <scalbn+0xc8>)
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	f7f6 ff20 	bl	80004d8 <__aeabi_dmul>
 8009698:	e7e6      	b.n	8009668 <scalbn+0x40>
 800969a:	2a00      	cmp	r2, #0
 800969c:	dd08      	ble.n	80096b0 <scalbn+0x88>
 800969e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80096a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80096a6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80096aa:	4620      	mov	r0, r4
 80096ac:	4629      	mov	r1, r5
 80096ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80096b4:	da0b      	bge.n	80096ce <scalbn+0xa6>
 80096b6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80096ba:	429e      	cmp	r6, r3
 80096bc:	4622      	mov	r2, r4
 80096be:	462b      	mov	r3, r5
 80096c0:	dce0      	bgt.n	8009684 <scalbn+0x5c>
 80096c2:	a109      	add	r1, pc, #36	; (adr r1, 80096e8 <scalbn+0xc0>)
 80096c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096c8:	f000 f81c 	bl	8009704 <copysign>
 80096cc:	e7c1      	b.n	8009652 <scalbn+0x2a>
 80096ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80096d2:	3236      	adds	r2, #54	; 0x36
 80096d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80096d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80096dc:	4620      	mov	r0, r4
 80096de:	4629      	mov	r1, r5
 80096e0:	2200      	movs	r2, #0
 80096e2:	4b07      	ldr	r3, [pc, #28]	; (8009700 <scalbn+0xd8>)
 80096e4:	e7d6      	b.n	8009694 <scalbn+0x6c>
 80096e6:	bf00      	nop
 80096e8:	c2f8f359 	.word	0xc2f8f359
 80096ec:	01a56e1f 	.word	0x01a56e1f
 80096f0:	8800759c 	.word	0x8800759c
 80096f4:	7e37e43c 	.word	0x7e37e43c
 80096f8:	43500000 	.word	0x43500000
 80096fc:	ffff3cb0 	.word	0xffff3cb0
 8009700:	3c900000 	.word	0x3c900000

08009704 <copysign>:
 8009704:	b530      	push	{r4, r5, lr}
 8009706:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800970a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800970e:	ea42 0503 	orr.w	r5, r2, r3
 8009712:	4629      	mov	r1, r5
 8009714:	bd30      	pop	{r4, r5, pc}
	...

08009718 <_init>:
 8009718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971a:	bf00      	nop
 800971c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971e:	bc08      	pop	{r3}
 8009720:	469e      	mov	lr, r3
 8009722:	4770      	bx	lr

08009724 <_fini>:
 8009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009726:	bf00      	nop
 8009728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800972a:	bc08      	pop	{r3}
 800972c:	469e      	mov	lr, r3
 800972e:	4770      	bx	lr
