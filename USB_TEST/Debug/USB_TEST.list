
USB_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071c4  080071c4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080071c4  080071c4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071c4  080071c4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071c4  080071c4  000171c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071c8  080071c8  000171c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080071cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e70  200001e0  080073ac  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001050  080073ac  00021050  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014700  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003323  00000000  00000000  00034909  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e58  00000000  00000000  00037c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc0  00000000  00000000  00038a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018588  00000000  00000000  00039748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000edcf  00000000  00000000  00051cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075e7b  00000000  00000000  00060a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d691a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004018  00000000  00000000  000d6998  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08007070 	.word	0x08007070

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08007070 	.word	0x08007070

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc69 	bl	8000a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f81d 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f965 	bl	8000428 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015e:	f000 f879 	bl	8000254 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000162:	f000 f8b5 	bl	80002d0 <MX_ADC2_Init>
  MX_IWDG_Init();
 8000166:	f000 f8f1 	bl	800034c <MX_IWDG_Init>
  MX_USART1_UART_Init();
 800016a:	f000 f909 	bl	8000380 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800016e:	f000 f931 	bl	80003d4 <MX_USART3_UART_Init>
  __HAL_RCC_USB_CLK_ENABLE();
 8000172:	4b07      	ldr	r3, [pc, #28]	; (8000190 <main+0x44>)
 8000174:	69db      	ldr	r3, [r3, #28]
 8000176:	4a06      	ldr	r2, [pc, #24]	; (8000190 <main+0x44>)
 8000178:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800017c:	61d3      	str	r3, [r2, #28]
 800017e:	4b04      	ldr	r3, [pc, #16]	; (8000190 <main+0x44>)
 8000180:	69db      	ldr	r3, [r3, #28]
 8000182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000186:	607b      	str	r3, [r7, #4]
 8000188:	687b      	ldr	r3, [r7, #4]
  MX_USB_DEVICE_Init();
 800018a:	f005 fb71 	bl	8005870 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800018e:	e7fe      	b.n	800018e <main+0x42>
 8000190:	40021000 	.word	0x40021000

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b094      	sub	sp, #80	; 0x50
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800019e:	2228      	movs	r2, #40	; 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f006 f824 	bl	80061f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	f107 0314 	add.w	r3, r7, #20
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	605a      	str	r2, [r3, #4]
 80001b2:	609a      	str	r2, [r3, #8]
 80001b4:	60da      	str	r2, [r3, #12]
 80001b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80001c4:	2309      	movs	r3, #9
 80001c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80001d6:	2301      	movs	r3, #1
 80001d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001da:	2302      	movs	r3, #2
 80001dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 f820 	bl	8002234 <HAL_RCC_OscConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80001fa:	f000 f9cb 	bl	8000594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fe:	230f      	movs	r3, #15
 8000200:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000202:	2302      	movs	r3, #2
 8000204:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800020a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000214:	f107 0314 	add.w	r3, r7, #20
 8000218:	2102      	movs	r1, #2
 800021a:	4618      	mov	r0, r3
 800021c:	f002 fa8a 	bl	8002734 <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000226:	f000 f9b5 	bl	8000594 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800022a:	2312      	movs	r3, #18
 800022c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800022e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000232:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000234:	2300      	movs	r3, #0
 8000236:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	4618      	mov	r0, r3
 800023c:	f002 fc16 	bl	8002a6c <HAL_RCCEx_PeriphCLKConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000246:	f000 f9a5 	bl	8000594 <Error_Handler>
  }
}
 800024a:	bf00      	nop
 800024c:	3750      	adds	r7, #80	; 0x50
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000264:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <MX_ADC1_Init+0x74>)
 8000266:	4a19      	ldr	r2, [pc, #100]	; (80002cc <MX_ADC1_Init+0x78>)
 8000268:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800026a:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <MX_ADC1_Init+0x74>)
 800026c:	2200      	movs	r2, #0
 800026e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <MX_ADC1_Init+0x74>)
 8000272:	2200      	movs	r2, #0
 8000274:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000276:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <MX_ADC1_Init+0x74>)
 8000278:	2200      	movs	r2, #0
 800027a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <MX_ADC1_Init+0x74>)
 800027e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000282:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000284:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <MX_ADC1_Init+0x74>)
 8000286:	2200      	movs	r2, #0
 8000288:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <MX_ADC1_Init+0x74>)
 800028c:	2201      	movs	r2, #1
 800028e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <MX_ADC1_Init+0x74>)
 8000292:	f000 fc2b 	bl	8000aec <HAL_ADC_Init>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800029c:	f000 f97a 	bl	8000594 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002a4:	2301      	movs	r3, #1
 80002a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	4619      	mov	r1, r3
 80002b0:	4805      	ldr	r0, [pc, #20]	; (80002c8 <MX_ADC1_Init+0x74>)
 80002b2:	f000 fcf3 	bl	8000c9c <HAL_ADC_ConfigChannel>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002bc:	f000 f96a 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002c0:	bf00      	nop
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	200004a8 	.word	0x200004a8
 80002cc:	40012400 	.word	0x40012400

080002d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80002e0:	4b18      	ldr	r3, [pc, #96]	; (8000344 <MX_ADC2_Init+0x74>)
 80002e2:	4a19      	ldr	r2, [pc, #100]	; (8000348 <MX_ADC2_Init+0x78>)
 80002e4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002e6:	4b17      	ldr	r3, [pc, #92]	; (8000344 <MX_ADC2_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80002ec:	4b15      	ldr	r3, [pc, #84]	; (8000344 <MX_ADC2_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80002f2:	4b14      	ldr	r3, [pc, #80]	; (8000344 <MX_ADC2_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <MX_ADC2_Init+0x74>)
 80002fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002fe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000300:	4b10      	ldr	r3, [pc, #64]	; (8000344 <MX_ADC2_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000306:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_ADC2_Init+0x74>)
 8000308:	2201      	movs	r2, #1
 800030a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <MX_ADC2_Init+0x74>)
 800030e:	f000 fbed 	bl	8000aec <HAL_ADC_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000318:	f000 f93c 	bl	8000594 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800031c:	2304      	movs	r3, #4
 800031e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000320:	2301      	movs	r3, #1
 8000322:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	4619      	mov	r1, r3
 800032c:	4805      	ldr	r0, [pc, #20]	; (8000344 <MX_ADC2_Init+0x74>)
 800032e:	f000 fcb5 	bl	8000c9c <HAL_ADC_ConfigChannel>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000338:	f000 f92c 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800033c:	bf00      	nop
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	2000046c 	.word	0x2000046c
 8000348:	40012800 	.word	0x40012800

0800034c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_IWDG_Init+0x2c>)
 8000352:	4a0a      	ldr	r2, [pc, #40]	; (800037c <MX_IWDG_Init+0x30>)
 8000354:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_IWDG_Init+0x2c>)
 8000358:	2200      	movs	r2, #0
 800035a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_IWDG_Init+0x2c>)
 800035e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000362:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_IWDG_Init+0x2c>)
 8000366:	f001 f84b 	bl	8001400 <HAL_IWDG_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000370:	f000 f910 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	2000049c 	.word	0x2000049c
 800037c:	40003000 	.word	0x40003000

08000380 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000384:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 8000386:	4a12      	ldr	r2, [pc, #72]	; (80003d0 <MX_USART1_UART_Init+0x50>)
 8000388:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 800038c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000390:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 80003b8:	f002 fc5b 	bl	8002c72 <HAL_HalfDuplex_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003c2:	f000 f8e7 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	200004d8 	.word	0x200004d8
 80003d0:	40013800 	.word	0x40013800

080003d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <MX_USART3_UART_Init+0x4c>)
 80003da:	4a12      	ldr	r2, [pc, #72]	; (8000424 <MX_USART3_UART_Init+0x50>)
 80003dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80003de:	4b10      	ldr	r3, [pc, #64]	; (8000420 <MX_USART3_UART_Init+0x4c>)
 80003e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <MX_USART3_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <MX_USART3_UART_Init+0x4c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <MX_USART3_UART_Init+0x4c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <MX_USART3_UART_Init+0x4c>)
 80003fa:	220c      	movs	r2, #12
 80003fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003fe:	4b08      	ldr	r3, [pc, #32]	; (8000420 <MX_USART3_UART_Init+0x4c>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_USART3_UART_Init+0x4c>)
 8000406:	2200      	movs	r2, #0
 8000408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800040a:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_USART3_UART_Init+0x4c>)
 800040c:	f002 fbe4 	bl	8002bd8 <HAL_UART_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000416:	f000 f8bd 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	2000042c 	.word	0x2000042c
 8000424:	40004800 	.word	0x40004800

08000428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b08a      	sub	sp, #40	; 0x28
 800042c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	f107 0314 	add.w	r3, r7, #20
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043c:	4b50      	ldr	r3, [pc, #320]	; (8000580 <MX_GPIO_Init+0x158>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a4f      	ldr	r2, [pc, #316]	; (8000580 <MX_GPIO_Init+0x158>)
 8000442:	f043 0310 	orr.w	r3, r3, #16
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b4d      	ldr	r3, [pc, #308]	; (8000580 <MX_GPIO_Init+0x158>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0310 	and.w	r3, r3, #16
 8000450:	613b      	str	r3, [r7, #16]
 8000452:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000454:	4b4a      	ldr	r3, [pc, #296]	; (8000580 <MX_GPIO_Init+0x158>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a49      	ldr	r2, [pc, #292]	; (8000580 <MX_GPIO_Init+0x158>)
 800045a:	f043 0320 	orr.w	r3, r3, #32
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b47      	ldr	r3, [pc, #284]	; (8000580 <MX_GPIO_Init+0x158>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0320 	and.w	r3, r3, #32
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	4b44      	ldr	r3, [pc, #272]	; (8000580 <MX_GPIO_Init+0x158>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a43      	ldr	r2, [pc, #268]	; (8000580 <MX_GPIO_Init+0x158>)
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b41      	ldr	r3, [pc, #260]	; (8000580 <MX_GPIO_Init+0x158>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0304 	and.w	r3, r3, #4
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000484:	4b3e      	ldr	r3, [pc, #248]	; (8000580 <MX_GPIO_Init+0x158>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a3d      	ldr	r2, [pc, #244]	; (8000580 <MX_GPIO_Init+0x158>)
 800048a:	f043 0308 	orr.w	r3, r3, #8
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b3b      	ldr	r3, [pc, #236]	; (8000580 <MX_GPIO_Init+0x158>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0308 	and.w	r3, r3, #8
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	2180      	movs	r1, #128	; 0x80
 80004a0:	4838      	ldr	r0, [pc, #224]	; (8000584 <MX_GPIO_Init+0x15c>)
 80004a2:	f000 ff95 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin MODE_0_Pin MODE_1_Pin */
  GPIO_InitStruct.Pin = LED_Pin|MODE_0_Pin|MODE_1_Pin;
 80004a6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80004aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	4619      	mov	r1, r3
 80004ba:	4833      	ldr	r0, [pc, #204]	; (8000588 <MX_GPIO_Init+0x160>)
 80004bc:	f000 fe2e 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : CH1_R_Pin CH1_G_Pin CH1_B_Pin CH2_R_Pin 
                           CH2_G_Pin CH3_R_Pin CH3_G_Pin CH3_B_Pin */
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
 80004c0:	f240 73ce 	movw	r3, #1998	; 0x7ce
 80004c4:	617b      	str	r3, [r7, #20]
                          |CH2_G_Pin|CH3_R_Pin|CH3_G_Pin|CH3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c6:	2302      	movs	r3, #2
 80004c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	2302      	movs	r3, #2
 80004cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	4619      	mov	r1, r3
 80004d4:	482d      	ldr	r0, [pc, #180]	; (800058c <MX_GPIO_Init+0x164>)
 80004d6:	f000 fe21 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_Pin ADDR_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|ADDR_0_Pin;
 80004da:	f248 0320 	movw	r3, #32800	; 0x8020
 80004de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	4619      	mov	r1, r3
 80004ee:	4827      	ldr	r0, [pc, #156]	; (800058c <MX_GPIO_Init+0x164>)
 80004f0:	f000 fe14 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : CH2_B_Pin CH2_W_Pin */
  GPIO_InitStruct.Pin = CH2_B_Pin|CH2_W_Pin;
 80004f4:	2303      	movs	r3, #3
 80004f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f8:	2302      	movs	r3, #2
 80004fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	2302      	movs	r3, #2
 80004fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	4619      	mov	r1, r3
 8000506:	481f      	ldr	r0, [pc, #124]	; (8000584 <MX_GPIO_Init+0x15c>)
 8000508:	f000 fe08 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR_5_Pin ADDR_6_Pin ADDR_7_Pin ADDR_1_Pin 
                           ADDR_2_Pin ADDR_3_Pin ADDR_4_Pin */
  GPIO_InitStruct.Pin = ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_1_Pin 
 800050c:	f247 3318 	movw	r3, #29464	; 0x7318
 8000510:	617b      	str	r3, [r7, #20]
                          |ADDR_2_Pin|ADDR_3_Pin|ADDR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000512:	2300      	movs	r3, #0
 8000514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	4619      	mov	r1, r3
 8000520:	4818      	ldr	r0, [pc, #96]	; (8000584 <MX_GPIO_Init+0x15c>)
 8000522:	f000 fdfb 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : WS8212_CH2_Pin WS8212_CH1_Pin */
  GPIO_InitStruct.Pin = WS8212_CH2_Pin|WS8212_CH1_Pin;
 8000526:	f248 0320 	movw	r3, #32800	; 0x8020
 800052a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052c:	2302      	movs	r3, #2
 800052e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000530:	2303      	movs	r3, #3
 8000532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	4619      	mov	r1, r3
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <MX_GPIO_Init+0x15c>)
 800053c:	f000 fdee 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DIR_Pin */
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2302      	movs	r3, #2
 800054e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_GPIO_Init+0x15c>)
 8000558:	f000 fde0 	bl	800111c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_GPIO_Init+0x168>)
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
 8000562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000564:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
 800056a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
 8000572:	4a07      	ldr	r2, [pc, #28]	; (8000590 <MX_GPIO_Init+0x168>)
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	6053      	str	r3, [r2, #4]

}
 8000578:	bf00      	nop
 800057a:	3728      	adds	r7, #40	; 0x28
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	40010c00 	.word	0x40010c00
 8000588:	40011000 	.word	0x40011000
 800058c:	40010800 	.word	0x40010800
 8000590:	40010000 	.word	0x40010000

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <HAL_MspInit+0x5c>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a14      	ldr	r2, [pc, #80]	; (80005fc <HAL_MspInit+0x5c>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6193      	str	r3, [r2, #24]
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_MspInit+0x5c>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <HAL_MspInit+0x5c>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_MspInit+0x5c>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c8:	61d3      	str	r3, [r2, #28]
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <HAL_MspInit+0x5c>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_MspInit+0x60>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <HAL_MspInit+0x60>)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010000 	.word	0x40010000

08000604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0318 	add.w	r3, r7, #24
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <HAL_ADC_MspInit+0xbc>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d122      	bne.n	800066a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a26      	ldr	r2, [pc, #152]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 800062a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = ANALOG_0_Pin;
 8000654:	2301      	movs	r3, #1
 8000656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000658:	2303      	movs	r3, #3
 800065a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ANALOG_0_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 0318 	add.w	r3, r7, #24
 8000660:	4619      	mov	r1, r3
 8000662:	4819      	ldr	r0, [pc, #100]	; (80006c8 <HAL_ADC_MspInit+0xc4>)
 8000664:	f000 fd5a 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000668:	e026      	b.n	80006b8 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a17      	ldr	r2, [pc, #92]	; (80006cc <HAL_ADC_MspInit+0xc8>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d121      	bne.n	80006b8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 800067a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 80006a4:	2310      	movs	r3, #16
 80006a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a8:	2303      	movs	r3, #3
 80006aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 0318 	add.w	r3, r7, #24
 80006b0:	4619      	mov	r1, r3
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <HAL_ADC_MspInit+0xc4>)
 80006b4:	f000 fd32 	bl	800111c <HAL_GPIO_Init>
}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40012400 	.word	0x40012400
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010800 	.word	0x40010800
 80006cc:	40012800 	.word	0x40012800

080006d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08c      	sub	sp, #48	; 0x30
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a38      	ldr	r2, [pc, #224]	; (80007cc <HAL_UART_MspInit+0xfc>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d132      	bne.n	8000756 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006f0:	4b37      	ldr	r3, [pc, #220]	; (80007d0 <HAL_UART_MspInit+0x100>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a36      	ldr	r2, [pc, #216]	; (80007d0 <HAL_UART_MspInit+0x100>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <HAL_UART_MspInit+0x100>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <HAL_UART_MspInit+0x100>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a30      	ldr	r2, [pc, #192]	; (80007d0 <HAL_UART_MspInit+0x100>)
 800070e:	f043 0308 	orr.w	r3, r3, #8
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <HAL_UART_MspInit+0x100>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0308 	and.w	r3, r3, #8
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = RS485_RXTX_Pin;
 8000720:	2340      	movs	r3, #64	; 0x40
 8000722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000724:	2312      	movs	r3, #18
 8000726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4828      	ldr	r0, [pc, #160]	; (80007d4 <HAL_UART_MspInit+0x104>)
 8000734:	f000 fcf2 	bl	800111c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000738:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <HAL_UART_MspInit+0x108>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800073e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000740:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800074e:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <HAL_UART_MspInit+0x108>)
 8000750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000752:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000754:	e036      	b.n	80007c4 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a20      	ldr	r2, [pc, #128]	; (80007dc <HAL_UART_MspInit+0x10c>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d131      	bne.n	80007c4 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <HAL_UART_MspInit+0x100>)
 8000762:	69db      	ldr	r3, [r3, #28]
 8000764:	4a1a      	ldr	r2, [pc, #104]	; (80007d0 <HAL_UART_MspInit+0x100>)
 8000766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800076a:	61d3      	str	r3, [r2, #28]
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <HAL_UART_MspInit+0x100>)
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_UART_MspInit+0x100>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <HAL_UART_MspInit+0x100>)
 800077e:	f043 0308 	orr.w	r3, r3, #8
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_UART_MspInit+0x100>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0308 	and.w	r3, r3, #8
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS232_TX_Pin;
 8000790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <HAL_UART_MspInit+0x104>)
 80007a6:	f000 fcb9 	bl	800111c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS232_RX_Pin;
 80007aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <HAL_UART_MspInit+0x104>)
 80007c0:	f000 fcac 	bl	800111c <HAL_GPIO_Init>
}
 80007c4:	bf00      	nop
 80007c6:	3730      	adds	r7, #48	; 0x30
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40013800 	.word	0x40013800
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010c00 	.word	0x40010c00
 80007d8:	40010000 	.word	0x40010000
 80007dc:	40004800 	.word	0x40004800

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <HardFault_Handler+0x4>

080007f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <MemManage_Handler+0x4>

080007f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <BusFault_Handler+0x4>

080007fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <UsageFault_Handler+0x4>

08000804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082c:	f000 f942 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000838:	4802      	ldr	r0, [pc, #8]	; (8000844 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800083a:	f000 ff21 	bl	8001680 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000de0 	.word	0x20000de0

08000848 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	e00a      	b.n	8000870 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800085a:	f3af 8000 	nop.w
 800085e:	4601      	mov	r1, r0
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	60ba      	str	r2, [r7, #8]
 8000866:	b2ca      	uxtb	r2, r1
 8000868:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	3301      	adds	r3, #1
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	429a      	cmp	r2, r3
 8000876:	dbf0      	blt.n	800085a <_read+0x12>
	}

return len;
 8000878:	687b      	ldr	r3, [r7, #4]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b086      	sub	sp, #24
 8000886:	af00      	add	r7, sp, #0
 8000888:	60f8      	str	r0, [r7, #12]
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	e009      	b.n	80008a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	1c5a      	adds	r2, r3, #1
 8000898:	60ba      	str	r2, [r7, #8]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	3301      	adds	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	dbf1      	blt.n	8000894 <_write+0x12>
	}
	return len;
 80008b0:	687b      	ldr	r3, [r7, #4]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <_close>:

int _close(int file)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
	return -1;
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008e0:	605a      	str	r2, [r3, #4]
	return 0;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr

080008ee <_isatty>:

int _isatty(int file)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
	return 1;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000902:	b480      	push	{r7}
 8000904:	b085      	sub	sp, #20
 8000906:	af00      	add	r7, sp, #0
 8000908:	60f8      	str	r0, [r7, #12]
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
	return 0;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
	...

0800091c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <_sbrk+0x50>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d102      	bne.n	8000932 <_sbrk+0x16>
		heap_end = &end;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <_sbrk+0x50>)
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <_sbrk+0x54>)
 8000930:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <_sbrk+0x50>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <_sbrk+0x50>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	466a      	mov	r2, sp
 8000942:	4293      	cmp	r3, r2
 8000944:	d907      	bls.n	8000956 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000946:	f005 fc29 	bl	800619c <__errno>
 800094a:	4602      	mov	r2, r0
 800094c:	230c      	movs	r3, #12
 800094e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
 8000954:	e006      	b.n	8000964 <_sbrk+0x48>
	}

	heap_end += incr;
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <_sbrk+0x50>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	4a03      	ldr	r2, [pc, #12]	; (800096c <_sbrk+0x50>)
 8000960:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000962:	68fb      	ldr	r3, [r7, #12]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200001fc 	.word	0x200001fc
 8000970:	20001050 	.word	0x20001050

08000974 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <SystemInit+0x5c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <SystemInit+0x5c>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <SystemInit+0x5c>)
 8000986:	685a      	ldr	r2, [r3, #4]
 8000988:	4911      	ldr	r1, [pc, #68]	; (80009d0 <SystemInit+0x5c>)
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <SystemInit+0x60>)
 800098c:	4013      	ands	r3, r2
 800098e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <SystemInit+0x5c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <SystemInit+0x5c>)
 8000996:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800099a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800099e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <SystemInit+0x5c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <SystemInit+0x5c>)
 80009a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <SystemInit+0x5c>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <SystemInit+0x5c>)
 80009b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80009b6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SystemInit+0x5c>)
 80009ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80009be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <SystemInit+0x64>)
 80009c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	40021000 	.word	0x40021000
 80009d4:	f8ff0000 	.word	0xf8ff0000
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009de:	e003      	b.n	80009e8 <LoopCopyDataInit>

080009e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009e6:	3104      	adds	r1, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009e8:	480a      	ldr	r0, [pc, #40]	; (8000a14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009f0:	d3f6      	bcc.n	80009e0 <CopyDataInit>
  ldr r2, =_sbss
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009f4:	e002      	b.n	80009fc <LoopFillZerobss>

080009f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009f8:	f842 3b04 	str.w	r3, [r2], #4

080009fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a00:	d3f9      	bcc.n	80009f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a02:	f7ff ffb7 	bl	8000974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a06:	f005 fbcf 	bl	80061a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0a:	f7ff fb9f 	bl	800014c <main>
  bx lr
 8000a0e:	4770      	bx	lr
  ldr r3, =_sidata
 8000a10:	080071cc 	.word	0x080071cc
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a18:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8000a1c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000a20:	20001050 	.word	0x20001050

08000a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC1_2_IRQHandler>
	...

08000a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_Init+0x28>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_Init+0x28>)
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 fb2d 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff fdac 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40022000 	.word	0x40022000

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fb45 	bl	8001102 <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 fb0d 	bl	80010ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x1c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a03      	ldr	r2, [pc, #12]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000518 	.word	0x20000518

08000ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <HAL_GetTick+0x10>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000518 	.word	0x20000518

08000aec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e0be      	b.n	8000c8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d109      	bne.n	8000b30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff fd6a 	bl	8000604 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 f9ab 	bl	8000e8c <ADC_ConversionStop_Disable>
 8000b36:	4603      	mov	r3, r0
 8000b38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3e:	f003 0310 	and.w	r3, r3, #16
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f040 8099 	bne.w	8000c7a <HAL_ADC_Init+0x18e>
 8000b48:	7dfb      	ldrb	r3, [r7, #23]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f040 8095 	bne.w	8000c7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b58:	f023 0302 	bic.w	r3, r3, #2
 8000b5c:	f043 0202 	orr.w	r2, r3, #2
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	7b1b      	ldrb	r3, [r3, #12]
 8000b72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b84:	d003      	beq.n	8000b8e <HAL_ADC_Init+0xa2>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d102      	bne.n	8000b94 <HAL_ADC_Init+0xa8>
 8000b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b92:	e000      	b.n	8000b96 <HAL_ADC_Init+0xaa>
 8000b94:	2300      	movs	r3, #0
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	7d1b      	ldrb	r3, [r3, #20]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d119      	bne.n	8000bd8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7b1b      	ldrb	r3, [r3, #12]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d109      	bne.n	8000bc0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	035a      	lsls	r2, r3, #13
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e00b      	b.n	8000bd8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc4:	f043 0220 	orr.w	r2, r3, #32
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd0:	f043 0201 	orr.w	r2, r3, #1
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	430a      	orrs	r2, r1
 8000bea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <HAL_ADC_Init+0x1a8>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	68b9      	ldr	r1, [r7, #8]
 8000bfc:	430b      	orrs	r3, r1
 8000bfe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c08:	d003      	beq.n	8000c12 <HAL_ADC_Init+0x126>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d104      	bne.n	8000c1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	051b      	lsls	r3, r3, #20
 8000c1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_ADC_Init+0x1ac>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d10b      	bne.n	8000c58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4a:	f023 0303 	bic.w	r3, r3, #3
 8000c4e:	f043 0201 	orr.w	r2, r3, #1
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c56:	e018      	b.n	8000c8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5c:	f023 0312 	bic.w	r3, r3, #18
 8000c60:	f043 0210 	orr.w	r2, r3, #16
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6c:	f043 0201 	orr.w	r2, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c78:	e007      	b.n	8000c8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7e:	f043 0210 	orr.w	r2, r3, #16
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	ffe1f7fd 	.word	0xffe1f7fd
 8000c98:	ff1f0efe 	.word	0xff1f0efe

08000c9c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d101      	bne.n	8000cbc <HAL_ADC_ConfigChannel+0x20>
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e0dc      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x1da>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b06      	cmp	r3, #6
 8000cca:	d81c      	bhi.n	8000d06 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	3b05      	subs	r3, #5
 8000cde:	221f      	movs	r2, #31
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	4019      	ands	r1, r3
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	3b05      	subs	r3, #5
 8000cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	635a      	str	r2, [r3, #52]	; 0x34
 8000d04:	e03c      	b.n	8000d80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b0c      	cmp	r3, #12
 8000d0c:	d81c      	bhi.n	8000d48 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	3b23      	subs	r3, #35	; 0x23
 8000d20:	221f      	movs	r2, #31
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	4019      	ands	r1, r3
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	6818      	ldr	r0, [r3, #0]
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	3b23      	subs	r3, #35	; 0x23
 8000d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	631a      	str	r2, [r3, #48]	; 0x30
 8000d46:	e01b      	b.n	8000d80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	3b41      	subs	r3, #65	; 0x41
 8000d5a:	221f      	movs	r2, #31
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	4019      	ands	r1, r3
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	3b41      	subs	r3, #65	; 0x41
 8000d74:	fa00 f203 	lsl.w	r2, r0, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b09      	cmp	r3, #9
 8000d86:	d91c      	bls.n	8000dc2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68d9      	ldr	r1, [r3, #12]
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	3b1e      	subs	r3, #30
 8000d9a:	2207      	movs	r2, #7
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	4019      	ands	r1, r3
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	6898      	ldr	r0, [r3, #8]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	3b1e      	subs	r3, #30
 8000db4:	fa00 f203 	lsl.w	r2, r0, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	e019      	b.n	8000df6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6919      	ldr	r1, [r3, #16]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	4413      	add	r3, r2
 8000dd2:	2207      	movs	r2, #7
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	4019      	ands	r1, r3
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	6898      	ldr	r0, [r3, #8]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4613      	mov	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	fa00 f203 	lsl.w	r2, r0, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	430a      	orrs	r2, r1
 8000df4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b10      	cmp	r3, #16
 8000dfc:	d003      	beq.n	8000e06 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e02:	2b11      	cmp	r3, #17
 8000e04:	d132      	bne.n	8000e6c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d125      	bne.n	8000e5c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d126      	bne.n	8000e6c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e2c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b10      	cmp	r3, #16
 8000e34:	d11a      	bne.n	8000e6c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e40:	0c9a      	lsrs	r2, r3, #18
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e4c:	e002      	b.n	8000e54 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f9      	bne.n	8000e4e <HAL_ADC_ConfigChannel+0x1b2>
 8000e5a:	e007      	b.n	8000e6c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e60:	f043 0220 	orr.w	r2, r3, #32
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	40012400 	.word	0x40012400
 8000e84:	20000000 	.word	0x20000000
 8000e88:	431bde83 	.word	0x431bde83

08000e8c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d127      	bne.n	8000ef6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0201 	bic.w	r2, r2, #1
 8000eb4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eb6:	f7ff fe0f 	bl	8000ad8 <HAL_GetTick>
 8000eba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ebc:	e014      	b.n	8000ee8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ebe:	f7ff fe0b 	bl	8000ad8 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d90d      	bls.n	8000ee8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed0:	f043 0210 	orr.w	r2, r3, #16
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000edc:	f043 0201 	orr.w	r2, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e007      	b.n	8000ef8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d0e3      	beq.n	8000ebe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4906      	ldr	r1, [pc, #24]	; (8000f98 <__NVIC_EnableIRQ+0x34>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff90 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff2d 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff42 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff90 	bl	8000ff0 <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5f 	bl	8000f9c <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff35 	bl	8000f64 <__NVIC_EnableIRQ>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffa2 	bl	8001054 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800111c:	b480      	push	{r7}
 800111e:	b08b      	sub	sp, #44	; 0x2c
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112e:	e127      	b.n	8001380 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001130:	2201      	movs	r2, #1
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	69fa      	ldr	r2, [r7, #28]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	429a      	cmp	r2, r3
 800114a:	f040 8116 	bne.w	800137a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b12      	cmp	r3, #18
 8001154:	d034      	beq.n	80011c0 <HAL_GPIO_Init+0xa4>
 8001156:	2b12      	cmp	r3, #18
 8001158:	d80d      	bhi.n	8001176 <HAL_GPIO_Init+0x5a>
 800115a:	2b02      	cmp	r3, #2
 800115c:	d02b      	beq.n	80011b6 <HAL_GPIO_Init+0x9a>
 800115e:	2b02      	cmp	r3, #2
 8001160:	d804      	bhi.n	800116c <HAL_GPIO_Init+0x50>
 8001162:	2b00      	cmp	r3, #0
 8001164:	d031      	beq.n	80011ca <HAL_GPIO_Init+0xae>
 8001166:	2b01      	cmp	r3, #1
 8001168:	d01c      	beq.n	80011a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800116a:	e048      	b.n	80011fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800116c:	2b03      	cmp	r3, #3
 800116e:	d043      	beq.n	80011f8 <HAL_GPIO_Init+0xdc>
 8001170:	2b11      	cmp	r3, #17
 8001172:	d01b      	beq.n	80011ac <HAL_GPIO_Init+0x90>
          break;
 8001174:	e043      	b.n	80011fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001176:	4a89      	ldr	r2, [pc, #548]	; (800139c <HAL_GPIO_Init+0x280>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d026      	beq.n	80011ca <HAL_GPIO_Init+0xae>
 800117c:	4a87      	ldr	r2, [pc, #540]	; (800139c <HAL_GPIO_Init+0x280>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d806      	bhi.n	8001190 <HAL_GPIO_Init+0x74>
 8001182:	4a87      	ldr	r2, [pc, #540]	; (80013a0 <HAL_GPIO_Init+0x284>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d020      	beq.n	80011ca <HAL_GPIO_Init+0xae>
 8001188:	4a86      	ldr	r2, [pc, #536]	; (80013a4 <HAL_GPIO_Init+0x288>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01d      	beq.n	80011ca <HAL_GPIO_Init+0xae>
          break;
 800118e:	e036      	b.n	80011fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001190:	4a85      	ldr	r2, [pc, #532]	; (80013a8 <HAL_GPIO_Init+0x28c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0xae>
 8001196:	4a85      	ldr	r2, [pc, #532]	; (80013ac <HAL_GPIO_Init+0x290>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d016      	beq.n	80011ca <HAL_GPIO_Init+0xae>
 800119c:	4a84      	ldr	r2, [pc, #528]	; (80013b0 <HAL_GPIO_Init+0x294>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0xae>
          break;
 80011a2:	e02c      	b.n	80011fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	623b      	str	r3, [r7, #32]
          break;
 80011aa:	e028      	b.n	80011fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	3304      	adds	r3, #4
 80011b2:	623b      	str	r3, [r7, #32]
          break;
 80011b4:	e023      	b.n	80011fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	3308      	adds	r3, #8
 80011bc:	623b      	str	r3, [r7, #32]
          break;
 80011be:	e01e      	b.n	80011fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	330c      	adds	r3, #12
 80011c6:	623b      	str	r3, [r7, #32]
          break;
 80011c8:	e019      	b.n	80011fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d102      	bne.n	80011d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011d2:	2304      	movs	r3, #4
 80011d4:	623b      	str	r3, [r7, #32]
          break;
 80011d6:	e012      	b.n	80011fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d105      	bne.n	80011ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e0:	2308      	movs	r3, #8
 80011e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	611a      	str	r2, [r3, #16]
          break;
 80011ea:	e008      	b.n	80011fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011ec:	2308      	movs	r3, #8
 80011ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	615a      	str	r2, [r3, #20]
          break;
 80011f6:	e002      	b.n	80011fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
          break;
 80011fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2bff      	cmp	r3, #255	; 0xff
 8001202:	d801      	bhi.n	8001208 <HAL_GPIO_Init+0xec>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	e001      	b.n	800120c <HAL_GPIO_Init+0xf0>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3304      	adds	r3, #4
 800120c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2bff      	cmp	r3, #255	; 0xff
 8001212:	d802      	bhi.n	800121a <HAL_GPIO_Init+0xfe>
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x104>
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	3b08      	subs	r3, #8
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	210f      	movs	r1, #15
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	401a      	ands	r2, r3
 8001232:	6a39      	ldr	r1, [r7, #32]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	431a      	orrs	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 8096 	beq.w	800137a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800124e:	4b59      	ldr	r3, [pc, #356]	; (80013b4 <HAL_GPIO_Init+0x298>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4a58      	ldr	r2, [pc, #352]	; (80013b4 <HAL_GPIO_Init+0x298>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6193      	str	r3, [r2, #24]
 800125a:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <HAL_GPIO_Init+0x298>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001266:	4a54      	ldr	r2, [pc, #336]	; (80013b8 <HAL_GPIO_Init+0x29c>)
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3302      	adds	r3, #2
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4013      	ands	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4b      	ldr	r2, [pc, #300]	; (80013bc <HAL_GPIO_Init+0x2a0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0x19e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4a      	ldr	r2, [pc, #296]	; (80013c0 <HAL_GPIO_Init+0x2a4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00d      	beq.n	80012b6 <HAL_GPIO_Init+0x19a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a49      	ldr	r2, [pc, #292]	; (80013c4 <HAL_GPIO_Init+0x2a8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x196>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a48      	ldr	r2, [pc, #288]	; (80013c8 <HAL_GPIO_Init+0x2ac>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_GPIO_Init+0x192>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x1a0>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x1a0>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x1a0>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x1a0>
 80012ba:	2300      	movs	r3, #0
 80012bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012be:	f002 0203 	and.w	r2, r2, #3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012cc:	493a      	ldr	r1, [pc, #232]	; (80013b8 <HAL_GPIO_Init+0x29c>)
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012e6:	4b39      	ldr	r3, [pc, #228]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4938      	ldr	r1, [pc, #224]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
 80012f2:	e006      	b.n	8001302 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012f4:	4b35      	ldr	r3, [pc, #212]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	4933      	ldr	r1, [pc, #204]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 80012fe:	4013      	ands	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d006      	beq.n	800131c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800130e:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	492e      	ldr	r1, [pc, #184]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	604b      	str	r3, [r1, #4]
 800131a:	e006      	b.n	800132a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	43db      	mvns	r3, r3
 8001324:	4929      	ldr	r1, [pc, #164]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001326:	4013      	ands	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	4924      	ldr	r1, [pc, #144]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	608b      	str	r3, [r1, #8]
 8001342:	e006      	b.n	8001352 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	43db      	mvns	r3, r3
 800134c:	491f      	ldr	r1, [pc, #124]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 800134e:	4013      	ands	r3, r2
 8001350:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	491a      	ldr	r1, [pc, #104]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	60cb      	str	r3, [r1, #12]
 800136a:	e006      	b.n	800137a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	43db      	mvns	r3, r3
 8001374:	4915      	ldr	r1, [pc, #84]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001376:	4013      	ands	r3, r2
 8001378:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	3301      	adds	r3, #1
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	fa22 f303 	lsr.w	r3, r2, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	f47f aed0 	bne.w	8001130 <HAL_GPIO_Init+0x14>
  }
}
 8001390:	bf00      	nop
 8001392:	372c      	adds	r7, #44	; 0x2c
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	10210000 	.word	0x10210000
 80013a0:	10110000 	.word	0x10110000
 80013a4:	10120000 	.word	0x10120000
 80013a8:	10310000 	.word	0x10310000
 80013ac:	10320000 	.word	0x10320000
 80013b0:	10220000 	.word	0x10220000
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010000 	.word	0x40010000
 80013bc:	40010800 	.word	0x40010800
 80013c0:	40010c00 	.word	0x40010c00
 80013c4:	40011000 	.word	0x40011000
 80013c8:	40011400 	.word	0x40011400
 80013cc:	40010400 	.word	0x40010400

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013ec:	e003      	b.n	80013f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	611a      	str	r2, [r3, #16]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e02b      	b.n	800146a <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800141a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f245 5255 	movw	r2, #21845	; 0x5555
 8001424:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6852      	ldr	r2, [r2, #4]
 800142e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6892      	ldr	r2, [r2, #8]
 8001438:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800143a:	f7ff fb4d 	bl	8000ad8 <HAL_GetTick>
 800143e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 8001440:	e008      	b.n	8001454 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001442:	f7ff fb49 	bl	8000ad8 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b30      	cmp	r3, #48	; 0x30
 800144e:	d901      	bls.n	8001454 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e00a      	b.n	800146a <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f1      	bne.n	8001442 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001466:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001472:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001474:	b08b      	sub	sp, #44	; 0x2c
 8001476:	af06      	add	r7, sp, #24
 8001478:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0d3      	b.n	800162c <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d106      	bne.n	800149e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f004 fbe1 	bl	8005c60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2203      	movs	r2, #3
 80014a2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 fd37 	bl	8002f1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	687e      	ldr	r6, [r7, #4]
 80014b8:	466d      	mov	r5, sp
 80014ba:	f106 0410 	add.w	r4, r6, #16
 80014be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	602b      	str	r3, [r5, #0]
 80014c6:	1d33      	adds	r3, r6, #4
 80014c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ca:	6838      	ldr	r0, [r7, #0]
 80014cc:	f001 fd00 	bl	8002ed0 <USB_CoreInit>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2202      	movs	r2, #2
 80014da:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e0a4      	b.n	800162c <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 fd34 	bl	8002f56 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	e035      	b.n	8001560 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	015b      	lsls	r3, r3, #5
 80014fa:	4413      	add	r3, r2
 80014fc:	3329      	adds	r3, #41	; 0x29
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	015b      	lsls	r3, r3, #5
 8001508:	4413      	add	r3, r2
 800150a:	3328      	adds	r3, #40	; 0x28
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	b291      	uxth	r1, r2
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	015b      	lsls	r3, r3, #5
 800151a:	4413      	add	r3, r2
 800151c:	3336      	adds	r3, #54	; 0x36
 800151e:	460a      	mov	r2, r1
 8001520:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	015b      	lsls	r3, r3, #5
 8001528:	4413      	add	r3, r2
 800152a:	332b      	adds	r3, #43	; 0x2b
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	015b      	lsls	r3, r3, #5
 8001536:	4413      	add	r3, r2
 8001538:	3338      	adds	r3, #56	; 0x38
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	015b      	lsls	r3, r3, #5
 8001544:	4413      	add	r3, r2
 8001546:	333c      	adds	r3, #60	; 0x3c
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	3302      	adds	r3, #2
 8001552:	015b      	lsls	r3, r3, #5
 8001554:	4413      	add	r3, r2
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	3301      	adds	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	429a      	cmp	r2, r3
 8001568:	d3c4      	bcc.n	80014f4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	e031      	b.n	80015d4 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	015b      	lsls	r3, r3, #5
 8001576:	4413      	add	r3, r2
 8001578:	f203 1329 	addw	r3, r3, #297	; 0x129
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	015b      	lsls	r3, r3, #5
 8001586:	4413      	add	r3, r2
 8001588:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	015b      	lsls	r3, r3, #5
 8001596:	4413      	add	r3, r2
 8001598:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	015b      	lsls	r3, r3, #5
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	015b      	lsls	r3, r3, #5
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	330a      	adds	r3, #10
 80015c6:	015b      	lsls	r3, r3, #5
 80015c8:	4413      	add	r3, r2
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	3301      	adds	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d3c8      	bcc.n	8001570 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	687e      	ldr	r6, [r7, #4]
 80015e6:	466d      	mov	r5, sp
 80015e8:	f106 0410 	add.w	r4, r6, #16
 80015ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f0:	6823      	ldr	r3, [r4, #0]
 80015f2:	602b      	str	r3, [r5, #0]
 80015f4:	1d33      	adds	r3, r6, #4
 80015f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f8:	6838      	ldr	r0, [r7, #0]
 80015fa:	f001 fcb8 	bl	8002f6e <USB_DevInit>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2202      	movs	r2, #2
 8001608:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e00d      	b.n	800162c <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f002 fcf6 	bl	8004016 <USB_DevDisconnect>

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001634 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_PCD_Start+0x16>
 8001646:	2302      	movs	r3, #2
 8001648:	e016      	b.n	8001678 <HAL_PCD_Start+0x44>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001652:	2101      	movs	r1, #1
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f004 fd6a 	bl	800612e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f002 fccf 	bl	8004002 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f001 fc41 	bl	8002ef0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f002 fccc 	bl	800402a <USB_ReadInterrupts>
 8001692:	4603      	mov	r3, r0
 8001694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800169c:	d102      	bne.n	80016a4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 faf2 	bl	8001c88 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 fcbe 	bl	800402a <USB_ReadInterrupts>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b8:	d112      	bne.n	80016e0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016cc:	b292      	uxth	r2, r2
 80016ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f004 fb39 	bl	8005d4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80016d8:	2100      	movs	r1, #0
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f8de 	bl	800189c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fca0 	bl	800402a <USB_ReadInterrupts>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016f4:	d10b      	bne.n	800170e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016fe:	b29a      	uxth	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001708:	b292      	uxth	r2, r2
 800170a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fc89 	bl	800402a <USB_ReadInterrupts>
 8001718:	4603      	mov	r3, r0
 800171a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800171e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001722:	d10b      	bne.n	800173c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800172c:	b29a      	uxth	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001736:	b292      	uxth	r2, r2
 8001738:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f002 fc72 	bl	800402a <USB_ReadInterrupts>
 8001746:	4603      	mov	r3, r0
 8001748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001750:	d126      	bne.n	80017a0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800175a:	b29a      	uxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0204 	bic.w	r2, r2, #4
 8001764:	b292      	uxth	r2, r2
 8001766:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001772:	b29a      	uxth	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0208 	bic.w	r2, r2, #8
 800177c:	b292      	uxth	r2, r2
 800177e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f004 fb1a 	bl	8005dbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001790:	b29a      	uxth	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800179a:	b292      	uxth	r2, r2
 800179c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f002 fc40 	bl	800402a <USB_ReadInterrupts>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017b4:	d13d      	bne.n	8001832 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0208 	orr.w	r2, r2, #8
 80017c8:	b292      	uxth	r2, r2
 80017ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017e0:	b292      	uxth	r2, r2
 80017e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f042 0204 	orr.w	r2, r2, #4
 80017f8:	b292      	uxth	r2, r2
 80017fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f002 fc11 	bl	800402a <USB_ReadInterrupts>
 8001808:	4603      	mov	r3, r0
 800180a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001812:	d10b      	bne.n	800182c <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800181c:	b29a      	uxth	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001826:	b292      	uxth	r2, r2
 8001828:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f004 faab 	bl	8005d88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f002 fbf7 	bl	800402a <USB_ReadInterrupts>
 800183c:	4603      	mov	r3, r0
 800183e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001846:	d10e      	bne.n	8001866 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001850:	b29a      	uxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800185a:	b292      	uxth	r2, r2
 800185c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f004 fa64 	bl	8005d2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f002 fbdd 	bl	800402a <USB_ReadInterrupts>
 8001870:	4603      	mov	r3, r0
 8001872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800187a:	d10b      	bne.n	8001894 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001884:	b29a      	uxth	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800188e:	b292      	uxth	r2, r2
 8001890:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_PCD_SetAddress+0x1a>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e013      	b.n	80018de <HAL_PCD_SetAddress+0x42>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	78fa      	ldrb	r2, [r7, #3]
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 fb84 	bl	8003fdc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	4608      	mov	r0, r1
 80018f0:	4611      	mov	r1, r2
 80018f2:	461a      	mov	r2, r3
 80018f4:	4603      	mov	r3, r0
 80018f6:	70fb      	strb	r3, [r7, #3]
 80018f8:	460b      	mov	r3, r1
 80018fa:	803b      	strh	r3, [r7, #0]
 80018fc:	4613      	mov	r3, r2
 80018fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001908:	2b00      	cmp	r3, #0
 800190a:	da0b      	bge.n	8001924 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	015b      	lsls	r3, r3, #5
 8001914:	3328      	adds	r3, #40	; 0x28
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2201      	movs	r2, #1
 8001920:	705a      	strb	r2, [r3, #1]
 8001922:	e00b      	b.n	800193c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	015b      	lsls	r3, r3, #5
 800192c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	b2da      	uxtb	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001948:	883a      	ldrh	r2, [r7, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	78ba      	ldrb	r2, [r7, #2]
 8001952:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	785b      	ldrb	r3, [r3, #1]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d004      	beq.n	8001966 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001966:	78bb      	ldrb	r3, [r7, #2]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d102      	bne.n	8001972 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_PCD_EP_Open+0x9a>
 800197c:	2302      	movs	r3, #2
 800197e:	e00e      	b.n	800199e <HAL_PCD_EP_Open+0xb8>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68f9      	ldr	r1, [r7, #12]
 800198e:	4618      	mov	r0, r3
 8001990:	f001 fb12 	bl	8002fb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800199c:	7afb      	ldrb	r3, [r7, #11]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da0b      	bge.n	80019d2 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	015b      	lsls	r3, r3, #5
 80019c2:	3328      	adds	r3, #40	; 0x28
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2201      	movs	r2, #1
 80019ce:	705a      	strb	r2, [r3, #1]
 80019d0:	e00b      	b.n	80019ea <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	015b      	lsls	r3, r3, #5
 80019da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_PCD_EP_Close+0x5e>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e00e      	b.n	8001a22 <HAL_PCD_EP_Close+0x7c>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68f9      	ldr	r1, [r7, #12]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f001 fdbe 	bl	8003594 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	460b      	mov	r3, r1
 8001a38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a3a:	7afb      	ldrb	r3, [r7, #11]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	015b      	lsls	r3, r3, #5
 8001a42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4413      	add	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2200      	movs	r2, #0
 8001a62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a64:	7afb      	ldrb	r3, [r7, #11]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a70:	7afb      	ldrb	r3, [r7, #11]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6979      	ldr	r1, [r7, #20]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f001 ff1d 	bl	80038c0 <USB_EPStartXfer>
 8001a86:	e005      	b.n	8001a94 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6979      	ldr	r1, [r7, #20]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f001 ff16 	bl	80038c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	330a      	adds	r3, #10
 8001ab4:	015b      	lsls	r3, r3, #5
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3304      	adds	r3, #4
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad6:	7afb      	ldrb	r3, [r7, #11]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	015b      	lsls	r3, r3, #5
 8001ade:	3328      	adds	r3, #40	; 0x28
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2201      	movs	r2, #1
 8001afc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001afe:	7afb      	ldrb	r3, [r7, #11]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b0a:	7afb      	ldrb	r3, [r7, #11]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d106      	bne.n	8001b22 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6979      	ldr	r1, [r7, #20]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 fed0 	bl	80038c0 <USB_EPStartXfer>
 8001b20:	e005      	b.n	8001b2e <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6979      	ldr	r1, [r7, #20]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f001 fec9 	bl	80038c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	f003 0207 	and.w	r2, r3, #7
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d901      	bls.n	8001b56 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e046      	b.n	8001be4 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	da0b      	bge.n	8001b76 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	015b      	lsls	r3, r3, #5
 8001b66:	3328      	adds	r3, #40	; 0x28
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2201      	movs	r2, #1
 8001b72:	705a      	strb	r2, [r3, #1]
 8001b74:	e009      	b.n	8001b8a <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	015b      	lsls	r3, r3, #5
 8001b7a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_PCD_EP_SetStall+0x72>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e01c      	b.n	8001be4 <HAL_PCD_EP_SetStall+0xac>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68f9      	ldr	r1, [r7, #12]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 f939 	bl	8003e30 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bbe:	78fb      	ldrb	r3, [r7, #3]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d108      	bne.n	8001bda <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	f002 fa37 	bl	8004048 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	f003 020f 	and.w	r2, r3, #15
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d901      	bls.n	8001c0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e03a      	b.n	8001c80 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	da0b      	bge.n	8001c2a <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	015b      	lsls	r3, r3, #5
 8001c1a:	3328      	adds	r3, #40	; 0x28
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	705a      	strb	r2, [r3, #1]
 8001c28:	e00b      	b.n	8001c42 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	015b      	lsls	r3, r3, #5
 8001c32:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_PCD_EP_ClrStall+0x76>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e00e      	b.n	8001c80 <HAL_PCD_EP_ClrStall+0x94>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68f9      	ldr	r1, [r7, #12]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f002 f91f 	bl	8003eb4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c90:	e282      	b.n	8002198 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c9c:	8afb      	ldrh	r3, [r7, #22]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001ca6:	7d7b      	ldrb	r3, [r7, #21]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f040 8142 	bne.w	8001f32 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001cae:	8afb      	ldrh	r3, [r7, #22]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d151      	bne.n	8001d5c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc8:	b29c      	uxth	r4, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3328      	adds	r3, #40	; 0x28
 8001cde:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	441a      	add	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f003 ffef 	bl	8005d00 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8234 	beq.w	8002198 <PCD_EP_ISR_Handler+0x510>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f040 822f 	bne.w	8002198 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	b292      	uxth	r2, r2
 8001d4e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d5a:	e21d      	b.n	8002198 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d62:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d6c:	8a7b      	ldrh	r3, [r7, #18]
 8001d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d033      	beq.n	8001dde <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	3306      	adds	r3, #6
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	f002 f996 	bl	80040e6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	b29c      	uxth	r4, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001dd2:	b292      	uxth	r2, r2
 8001dd4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f003 ff68 	bl	8005cac <HAL_PCD_SetupStageCallback>
 8001ddc:	e1dc      	b.n	8002198 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f280 81d8 	bge.w	8002198 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001df4:	4013      	ands	r3, r2
 8001df6:	b29c      	uxth	r4, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001e00:	b292      	uxth	r2, r2
 8001e02:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	3306      	adds	r3, #6
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d019      	beq.n	8001e6c <PCD_EP_ISR_Handler+0x1e4>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d015      	beq.n	8001e6c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6959      	ldr	r1, [r3, #20]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	f002 f948 	bl	80040e6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	441a      	add	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e64:	2100      	movs	r1, #0
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f003 ff32 	bl	8005cd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	461c      	mov	r4, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	441c      	add	r4, r3
 8001e7e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001e82:	461c      	mov	r4, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10e      	bne.n	8001eaa <PCD_EP_ISR_Handler+0x222>
 8001e8c:	8823      	ldrh	r3, [r4, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	8023      	strh	r3, [r4, #0]
 8001e98:	8823      	ldrh	r3, [r4, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	8023      	strh	r3, [r4, #0]
 8001ea8:	e02d      	b.n	8001f06 <PCD_EP_ISR_Handler+0x27e>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b3e      	cmp	r3, #62	; 0x3e
 8001eb0:	d812      	bhi.n	8001ed8 <PCD_EP_ISR_Handler+0x250>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	085b      	lsrs	r3, r3, #1
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <PCD_EP_ISR_Handler+0x244>
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	61bb      	str	r3, [r7, #24]
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	029b      	lsls	r3, r3, #10
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	8023      	strh	r3, [r4, #0]
 8001ed6:	e016      	b.n	8001f06 <PCD_EP_ISR_Handler+0x27e>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	095b      	lsrs	r3, r3, #5
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <PCD_EP_ISR_Handler+0x26a>
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	029b      	lsls	r3, r3, #10
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f16:	b29c      	uxth	r4, r3
 8001f18:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001f1c:	b29c      	uxth	r4, r3
 8001f1e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001f22:	b29c      	uxth	r4, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4ba2      	ldr	r3, [pc, #648]	; (80021b4 <PCD_EP_ISR_Handler+0x52c>)
 8001f2a:	4323      	orrs	r3, r4
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	8013      	strh	r3, [r2, #0]
 8001f30:	e132      	b.n	8002198 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	7d7b      	ldrb	r3, [r7, #21]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f280 80d1 	bge.w	80020ee <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	7d7b      	ldrb	r3, [r7, #21]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f60:	4013      	ands	r3, r2
 8001f62:	b29c      	uxth	r4, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	7d7b      	ldrb	r3, [r7, #21]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001f74:	b292      	uxth	r2, r2
 8001f76:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f78:	7d7b      	ldrb	r3, [r7, #21]
 8001f7a:	015b      	lsls	r3, r3, #5
 8001f7c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	7b1b      	ldrb	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d121      	bne.n	8001fd2 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3306      	adds	r3, #6
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001fb8:	8bfb      	ldrh	r3, [r7, #30]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d072      	beq.n	80020a4 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6959      	ldr	r1, [r3, #20]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	88da      	ldrh	r2, [r3, #6]
 8001fca:	8bfb      	ldrh	r3, [r7, #30]
 8001fcc:	f002 f88b 	bl	80040e6 <USB_ReadPMA>
 8001fd0:	e068      	b.n	80020a4 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d021      	beq.n	8002030 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	3302      	adds	r3, #2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002014:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002016:	8bfb      	ldrh	r3, [r7, #30]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d02a      	beq.n	8002072 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6959      	ldr	r1, [r3, #20]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	891a      	ldrh	r2, [r3, #8]
 8002028:	8bfb      	ldrh	r3, [r7, #30]
 800202a:	f002 f85c 	bl	80040e6 <USB_ReadPMA>
 800202e:	e020      	b.n	8002072 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	3306      	adds	r3, #6
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	4413      	add	r3, r2
 800204e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002058:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800205a:	8bfb      	ldrh	r3, [r7, #30]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6959      	ldr	r1, [r3, #20]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	895a      	ldrh	r2, [r3, #10]
 800206c:	8bfb      	ldrh	r3, [r7, #30]
 800206e:	f002 f83a 	bl	80040e6 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208c:	b29c      	uxth	r4, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	441a      	add	r2, r3
 800209c:	4b46      	ldr	r3, [pc, #280]	; (80021b8 <PCD_EP_ISR_Handler+0x530>)
 800209e:	4323      	orrs	r3, r4
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	69da      	ldr	r2, [r3, #28]
 80020a8:	8bfb      	ldrh	r3, [r7, #30]
 80020aa:	441a      	add	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	695a      	ldr	r2, [r3, #20]
 80020b4:	8bfb      	ldrh	r3, [r7, #30]
 80020b6:	441a      	add	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d004      	beq.n	80020ce <PCD_EP_ISR_Handler+0x446>
 80020c4:	8bfa      	ldrh	r2, [r7, #30]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d206      	bcs.n	80020dc <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	4619      	mov	r1, r3
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f003 fdfb 	bl	8005cd0 <HAL_PCD_DataOutStageCallback>
 80020da:	e008      	b.n	80020ee <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	7819      	ldrb	r1, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff fc9e 	bl	8001a2a <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80020ee:	8a7b      	ldrh	r3, [r7, #18]
 80020f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d04f      	beq.n	8002198 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80020f8:	7d7b      	ldrb	r3, [r7, #21]
 80020fa:	015b      	lsls	r3, r3, #5
 80020fc:	3328      	adds	r3, #40	; 0x28
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	7d7b      	ldrb	r3, [r7, #21]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211c:	b29c      	uxth	r4, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	7d7b      	ldrb	r3, [r7, #21]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	441a      	add	r2, r3
 800212a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800212e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002132:	b29b      	uxth	r3, r3
 8002134:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800213e:	b29b      	uxth	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	3302      	adds	r3, #2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	4413      	add	r3, r2
 8002154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	441a      	add	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d106      	bne.n	8002186 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4619      	mov	r1, r3
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f003 fdbe 	bl	8005d00 <HAL_PCD_DataInStageCallback>
 8002184:	e008      	b.n	8002198 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	7819      	ldrb	r1, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fc97 	bl	8001ac6 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f6ff ad74 	blt.w	8001c92 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3724      	adds	r7, #36	; 0x24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}
 80021b4:	ffff8080 	.word	0xffff8080
 80021b8:	ffff80c0 	.word	0xffff80c0

080021bc <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	817b      	strh	r3, [r7, #10]
 80021ca:	4613      	mov	r3, r2
 80021cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80021ce:	897b      	ldrh	r3, [r7, #10]
 80021d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d008      	beq.n	80021ec <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021da:	897b      	ldrh	r3, [r7, #10]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	015b      	lsls	r3, r3, #5
 80021e2:	3328      	adds	r3, #40	; 0x28
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4413      	add	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	e006      	b.n	80021fa <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021ec:	897b      	ldrh	r3, [r7, #10]
 80021ee:	015b      	lsls	r3, r3, #5
 80021f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4413      	add	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80021fa:	893b      	ldrh	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d107      	bne.n	8002210 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2200      	movs	r2, #0
 8002204:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	b29a      	uxth	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	80da      	strh	r2, [r3, #6]
 800220e:	e00b      	b.n	8002228 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2201      	movs	r2, #1
 8002214:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	b29a      	uxth	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	0c1b      	lsrs	r3, r3, #16
 8002222:	b29a      	uxth	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	371c      	adds	r7, #28
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e26c      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8087 	beq.w	8002362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002254:	4b92      	ldr	r3, [pc, #584]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b04      	cmp	r3, #4
 800225e:	d00c      	beq.n	800227a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002260:	4b8f      	ldr	r3, [pc, #572]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b08      	cmp	r3, #8
 800226a:	d112      	bne.n	8002292 <HAL_RCC_OscConfig+0x5e>
 800226c:	4b8c      	ldr	r3, [pc, #560]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002278:	d10b      	bne.n	8002292 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227a:	4b89      	ldr	r3, [pc, #548]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d06c      	beq.n	8002360 <HAL_RCC_OscConfig+0x12c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d168      	bne.n	8002360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e246      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x76>
 800229c:	4b80      	ldr	r3, [pc, #512]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a7f      	ldr	r2, [pc, #508]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	e02e      	b.n	8002308 <HAL_RCC_OscConfig+0xd4>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x98>
 80022b2:	4b7b      	ldr	r3, [pc, #492]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a7a      	ldr	r2, [pc, #488]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b78      	ldr	r3, [pc, #480]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a77      	ldr	r2, [pc, #476]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e01d      	b.n	8002308 <HAL_RCC_OscConfig+0xd4>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0xbc>
 80022d6:	4b72      	ldr	r3, [pc, #456]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a71      	ldr	r2, [pc, #452]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b6f      	ldr	r3, [pc, #444]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6e      	ldr	r2, [pc, #440]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0xd4>
 80022f0:	4b6b      	ldr	r3, [pc, #428]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a6a      	ldr	r2, [pc, #424]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a67      	ldr	r2, [pc, #412]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002306:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7fe fbe2 	bl	8000ad8 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe fbde 	bl	8000ad8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e1fa      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b5d      	ldr	r3, [pc, #372]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0xe4>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7fe fbce 	bl	8000ad8 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002340:	f7fe fbca 	bl	8000ad8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	; 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e1e6      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	4b53      	ldr	r3, [pc, #332]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x10c>
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d063      	beq.n	8002436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800236e:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800237a:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b08      	cmp	r3, #8
 8002384:	d11c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x18c>
 8002386:	4b46      	ldr	r3, [pc, #280]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d116      	bne.n	80023c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_RCC_OscConfig+0x176>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e1ba      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4939      	ldr	r1, [pc, #228]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	e03a      	b.n	8002436 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c8:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7fe fb83 	bl	8000ad8 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d6:	f7fe fb7f 	bl	8000ad8 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e19b      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4927      	ldr	r1, [pc, #156]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240a:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe fb62 	bl	8000ad8 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002418:	f7fe fb5e 	bl	8000ad8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e17a      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d03a      	beq.n	80024b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d019      	beq.n	800247e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <HAL_RCC_OscConfig+0x274>)
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002450:	f7fe fb42 	bl	8000ad8 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002458:	f7fe fb3e 	bl	8000ad8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e15a      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002476:	2001      	movs	r0, #1
 8002478:	f000 fada 	bl	8002a30 <RCC_Delay>
 800247c:	e01c      	b.n	80024b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_RCC_OscConfig+0x274>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002484:	f7fe fb28 	bl	8000ad8 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248a:	e00f      	b.n	80024ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248c:	f7fe fb24 	bl	8000ad8 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d908      	bls.n	80024ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e140      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	42420000 	.word	0x42420000
 80024a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ac:	4b9e      	ldr	r3, [pc, #632]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1e9      	bne.n	800248c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80a6 	beq.w	8002612 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ca:	4b97      	ldr	r3, [pc, #604]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10d      	bne.n	80024f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	4b94      	ldr	r3, [pc, #592]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a93      	ldr	r2, [pc, #588]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	61d3      	str	r3, [r2, #28]
 80024e2:	4b91      	ldr	r3, [pc, #580]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b8e      	ldr	r3, [pc, #568]	; (800272c <HAL_RCC_OscConfig+0x4f8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d118      	bne.n	8002530 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fe:	4b8b      	ldr	r3, [pc, #556]	; (800272c <HAL_RCC_OscConfig+0x4f8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a8a      	ldr	r2, [pc, #552]	; (800272c <HAL_RCC_OscConfig+0x4f8>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250a:	f7fe fae5 	bl	8000ad8 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002512:	f7fe fae1 	bl	8000ad8 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b64      	cmp	r3, #100	; 0x64
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0fd      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	4b81      	ldr	r3, [pc, #516]	; (800272c <HAL_RCC_OscConfig+0x4f8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x312>
 8002538:	4b7b      	ldr	r3, [pc, #492]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4a7a      	ldr	r2, [pc, #488]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6213      	str	r3, [r2, #32]
 8002544:	e02d      	b.n	80025a2 <HAL_RCC_OscConfig+0x36e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x334>
 800254e:	4b76      	ldr	r3, [pc, #472]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a75      	ldr	r2, [pc, #468]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4b73      	ldr	r3, [pc, #460]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a72      	ldr	r2, [pc, #456]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6213      	str	r3, [r2, #32]
 8002566:	e01c      	b.n	80025a2 <HAL_RCC_OscConfig+0x36e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b05      	cmp	r3, #5
 800256e:	d10c      	bne.n	800258a <HAL_RCC_OscConfig+0x356>
 8002570:	4b6d      	ldr	r3, [pc, #436]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a6c      	ldr	r2, [pc, #432]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	4b6a      	ldr	r3, [pc, #424]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	4a69      	ldr	r2, [pc, #420]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6213      	str	r3, [r2, #32]
 8002588:	e00b      	b.n	80025a2 <HAL_RCC_OscConfig+0x36e>
 800258a:	4b67      	ldr	r3, [pc, #412]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a66      	ldr	r2, [pc, #408]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	4b64      	ldr	r3, [pc, #400]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a63      	ldr	r2, [pc, #396]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d015      	beq.n	80025d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025aa:	f7fe fa95 	bl	8000ad8 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7fe fa91 	bl	8000ad8 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e0ab      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	4b57      	ldr	r3, [pc, #348]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0ee      	beq.n	80025b2 <HAL_RCC_OscConfig+0x37e>
 80025d4:	e014      	b.n	8002600 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d6:	f7fe fa7f 	bl	8000ad8 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7fe fa7b 	bl	8000ad8 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e095      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f4:	4b4c      	ldr	r3, [pc, #304]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ee      	bne.n	80025de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d105      	bne.n	8002612 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002606:	4b48      	ldr	r3, [pc, #288]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4a47      	ldr	r2, [pc, #284]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800260c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002610:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8081 	beq.w	800271e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261c:	4b42      	ldr	r3, [pc, #264]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b08      	cmp	r3, #8
 8002626:	d061      	beq.n	80026ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d146      	bne.n	80026be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002630:	4b3f      	ldr	r3, [pc, #252]	; (8002730 <HAL_RCC_OscConfig+0x4fc>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7fe fa4f 	bl	8000ad8 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7fe fa4b 	bl	8000ad8 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e067      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002650:	4b35      	ldr	r3, [pc, #212]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002664:	d108      	bne.n	8002678 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002666:	4b30      	ldr	r3, [pc, #192]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	492d      	ldr	r1, [pc, #180]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002678:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a19      	ldr	r1, [r3, #32]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	430b      	orrs	r3, r1
 800268a:	4927      	ldr	r1, [pc, #156]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002690:	4b27      	ldr	r3, [pc, #156]	; (8002730 <HAL_RCC_OscConfig+0x4fc>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7fe fa1f 	bl	8000ad8 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe fa1b 	bl	8000ad8 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e037      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b0:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x46a>
 80026bc:	e02f      	b.n	800271e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <HAL_RCC_OscConfig+0x4fc>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe fa08 	bl	8000ad8 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe fa04 	bl	8000ad8 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e020      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026de:	4b12      	ldr	r3, [pc, #72]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x498>
 80026ea:	e018      	b.n	800271e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e013      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	429a      	cmp	r2, r3
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	40007000 	.word	0x40007000
 8002730:	42420060 	.word	0x42420060

08002734 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0d0      	b.n	80028ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d910      	bls.n	8002778 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b67      	ldr	r3, [pc, #412]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 0207 	bic.w	r2, r3, #7
 800275e:	4965      	ldr	r1, [pc, #404]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b63      	ldr	r3, [pc, #396]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0b8      	b.n	80028ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d020      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002790:	4b59      	ldr	r3, [pc, #356]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a58      	ldr	r2, [pc, #352]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800279a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a8:	4b53      	ldr	r3, [pc, #332]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a52      	ldr	r2, [pc, #328]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b4:	4b50      	ldr	r3, [pc, #320]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	494d      	ldr	r1, [pc, #308]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d040      	beq.n	8002854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	4b47      	ldr	r3, [pc, #284]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d115      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e07f      	b.n	80028ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f2:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e073      	b.n	80028ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002802:	4b3d      	ldr	r3, [pc, #244]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06b      	b.n	80028ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002812:	4b39      	ldr	r3, [pc, #228]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f023 0203 	bic.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4936      	ldr	r1, [pc, #216]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002824:	f7fe f958 	bl	8000ad8 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	e00a      	b.n	8002842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282c:	f7fe f954 	bl	8000ad8 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e053      	b.n	80028ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	4b2d      	ldr	r3, [pc, #180]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 020c 	and.w	r2, r3, #12
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	429a      	cmp	r2, r3
 8002852:	d1eb      	bne.n	800282c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002854:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d210      	bcs.n	8002884 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 0207 	bic.w	r2, r3, #7
 800286a:	4922      	ldr	r1, [pc, #136]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e032      	b.n	80028ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4916      	ldr	r1, [pc, #88]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	490e      	ldr	r1, [pc, #56]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028c2:	f000 f821 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 80028c6:	4601      	mov	r1, r0
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <HAL_RCC_ClockConfig+0x1c8>)
 80028d4:	5cd3      	ldrb	r3, [r2, r3]
 80028d6:	fa21 f303 	lsr.w	r3, r1, r3
 80028da:	4a09      	ldr	r2, [pc, #36]	; (8002900 <HAL_RCC_ClockConfig+0x1cc>)
 80028dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_RCC_ClockConfig+0x1d0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe f8b6 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40022000 	.word	0x40022000
 80028f8:	40021000 	.word	0x40021000
 80028fc:	08007114 	.word	0x08007114
 8002900:	20000000 	.word	0x20000000
 8002904:	20000004 	.word	0x20000004

08002908 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002908:	b490      	push	{r4, r7}
 800290a:	b08a      	sub	sp, #40	; 0x28
 800290c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800290e:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002910:	1d3c      	adds	r4, r7, #4
 8002912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002918:	4b28      	ldr	r3, [pc, #160]	; (80029bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	2300      	movs	r3, #0
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b04      	cmp	r3, #4
 8002940:	d002      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x40>
 8002942:	2b08      	cmp	r3, #8
 8002944:	d003      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x46>
 8002946:	e02d      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002948:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800294a:	623b      	str	r3, [r7, #32]
      break;
 800294c:	e02d      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	0c9b      	lsrs	r3, r3, #18
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800295a:	4413      	add	r3, r2
 800295c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002960:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d013      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	0c5b      	lsrs	r3, r3, #17
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800297a:	4413      	add	r3, r2
 800297c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002980:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002986:	fb02 f203 	mul.w	r2, r2, r3
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
 8002992:	e004      	b.n	800299e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	4a0c      	ldr	r2, [pc, #48]	; (80029c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002998:	fb02 f303 	mul.w	r3, r2, r3
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	623b      	str	r3, [r7, #32]
      break;
 80029a2:	e002      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029a4:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029a6:	623b      	str	r3, [r7, #32]
      break;
 80029a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029aa:	6a3b      	ldr	r3, [r7, #32]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3728      	adds	r7, #40	; 0x28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc90      	pop	{r4, r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	08007088 	.word	0x08007088
 80029bc:	08007098 	.word	0x08007098
 80029c0:	40021000 	.word	0x40021000
 80029c4:	007a1200 	.word	0x007a1200
 80029c8:	003d0900 	.word	0x003d0900

080029cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d0:	4b02      	ldr	r3, [pc, #8]	; (80029dc <HAL_RCC_GetHCLKFreq+0x10>)
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	20000000 	.word	0x20000000

080029e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029e4:	f7ff fff2 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 80029e8:	4601      	mov	r1, r0
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4a03      	ldr	r2, [pc, #12]	; (8002a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f6:	5cd3      	ldrb	r3, [r2, r3]
 80029f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000
 8002a04:	08007124 	.word	0x08007124

08002a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a0c:	f7ff ffde 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8002a10:	4601      	mov	r1, r0
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	0adb      	lsrs	r3, r3, #11
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	4a03      	ldr	r2, [pc, #12]	; (8002a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1e:	5cd3      	ldrb	r3, [r2, r3]
 8002a20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	08007124 	.word	0x08007124

08002a30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <RCC_Delay+0x34>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <RCC_Delay+0x38>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	0a5b      	lsrs	r3, r3, #9
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a4c:	bf00      	nop
  }
  while (Delay --);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1e5a      	subs	r2, r3, #1
 8002a52:	60fa      	str	r2, [r7, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f9      	bne.n	8002a4c <RCC_Delay+0x1c>
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000000 	.word	0x20000000
 8002a68:	10624dd3 	.word	0x10624dd3

08002a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d07d      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8c:	4b4f      	ldr	r3, [pc, #316]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10d      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a98:	4b4c      	ldr	r3, [pc, #304]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	4a4b      	ldr	r2, [pc, #300]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	61d3      	str	r3, [r2, #28]
 8002aa4:	4b49      	ldr	r3, [pc, #292]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	4b46      	ldr	r3, [pc, #280]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d118      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a42      	ldr	r2, [pc, #264]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002acc:	f7fe f804 	bl	8000ad8 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad4:	f7fe f800 	bl	8000ad8 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	; 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e06d      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae6:	4b3a      	ldr	r3, [pc, #232]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002af2:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d02e      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d027      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b10:	4b2e      	ldr	r3, [pc, #184]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b1a:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b20:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b26:	4a29      	ldr	r2, [pc, #164]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d014      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7fd ffcf 	bl	8000ad8 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fd ffcb 	bl	8000ad8 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e036      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ee      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4917      	ldr	r1, [pc, #92]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d105      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b78:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b90:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	490b      	ldr	r1, [pc, #44]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	4904      	ldr	r1, [pc, #16]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	42420440 	.word	0x42420440

08002bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e03f      	b.n	8002c6a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fd fd66 	bl	80006d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2224      	movs	r2, #36	; 0x24
 8002c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f87d 	bl	8002d1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e047      	b.n	8002d14 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d106      	bne.n	8002c9e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7fd fd19 	bl	80006d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2224      	movs	r2, #36	; 0x24
 8002ca2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cb4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f830 	bl	8002d1c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002cda:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0208 	orr.w	r2, r2, #8
 8002cea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cfa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d56:	f023 030c 	bic.w	r3, r3, #12
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	68f9      	ldr	r1, [r7, #12]
 8002d60:	430b      	orrs	r3, r1
 8002d62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a52      	ldr	r2, [pc, #328]	; (8002ec8 <UART_SetConfig+0x1ac>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d14e      	bne.n	8002e22 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d84:	f7ff fe40 	bl	8002a08 <HAL_RCC_GetPCLK2Freq>
 8002d88:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	009a      	lsls	r2, r3, #2
 8002d94:	441a      	add	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	4a4a      	ldr	r2, [pc, #296]	; (8002ecc <UART_SetConfig+0x1b0>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	0119      	lsls	r1, r3, #4
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	009a      	lsls	r2, r3, #2
 8002db4:	441a      	add	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dc0:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <UART_SetConfig+0x1b0>)
 8002dc2:	fba3 0302 	umull	r0, r3, r3, r2
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2064      	movs	r0, #100	; 0x64
 8002dca:	fb00 f303 	mul.w	r3, r0, r3
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	3332      	adds	r3, #50	; 0x32
 8002dd4:	4a3d      	ldr	r2, [pc, #244]	; (8002ecc <UART_SetConfig+0x1b0>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de0:	4419      	add	r1, r3
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	009a      	lsls	r2, r3, #2
 8002dec:	441a      	add	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002df8:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <UART_SetConfig+0x1b0>)
 8002dfa:	fba3 0302 	umull	r0, r3, r3, r2
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	2064      	movs	r0, #100	; 0x64
 8002e02:	fb00 f303 	mul.w	r3, r0, r3
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	3332      	adds	r3, #50	; 0x32
 8002e0c:	4a2f      	ldr	r2, [pc, #188]	; (8002ecc <UART_SetConfig+0x1b0>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	f003 020f 	and.w	r2, r3, #15
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	440a      	add	r2, r1
 8002e1e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002e20:	e04d      	b.n	8002ebe <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e22:	f7ff fddd 	bl	80029e0 <HAL_RCC_GetPCLK1Freq>
 8002e26:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	009a      	lsls	r2, r3, #2
 8002e32:	441a      	add	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3e:	4a23      	ldr	r2, [pc, #140]	; (8002ecc <UART_SetConfig+0x1b0>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	0119      	lsls	r1, r3, #4
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	009a      	lsls	r2, r3, #2
 8002e52:	441a      	add	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <UART_SetConfig+0x1b0>)
 8002e60:	fba3 0302 	umull	r0, r3, r3, r2
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	2064      	movs	r0, #100	; 0x64
 8002e68:	fb00 f303 	mul.w	r3, r0, r3
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	3332      	adds	r3, #50	; 0x32
 8002e72:	4a16      	ldr	r2, [pc, #88]	; (8002ecc <UART_SetConfig+0x1b0>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	095b      	lsrs	r3, r3, #5
 8002e7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e7e:	4419      	add	r1, r3
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009a      	lsls	r2, r3, #2
 8002e8a:	441a      	add	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <UART_SetConfig+0x1b0>)
 8002e98:	fba3 0302 	umull	r0, r3, r3, r2
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	2064      	movs	r0, #100	; 0x64
 8002ea0:	fb00 f303 	mul.w	r3, r0, r3
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	3332      	adds	r3, #50	; 0x32
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <UART_SetConfig+0x1b0>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	095b      	lsrs	r3, r3, #5
 8002eb2:	f003 020f 	and.w	r2, r3, #15
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	440a      	add	r2, r1
 8002ebc:	609a      	str	r2, [r3, #8]
}
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	51eb851f 	.word	0x51eb851f

08002ed0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	f107 0014 	add.w	r0, r7, #20
 8002ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	b004      	add	sp, #16
 8002eee:	4770      	bx	lr

08002ef0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002ef8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002efc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	89fb      	ldrh	r3, [r7, #14]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr

08002f1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002f26:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002f2a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	b21a      	sxth	r2, r3
 8002f36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	b21b      	sxth	r3, r3
 8002f3e:	4013      	ands	r3, r2
 8002f40:	b21b      	sxth	r3, r3
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr

08002f6e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002f6e:	b084      	sub	sp, #16
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	f107 0014 	add.w	r0, r7, #20
 8002f7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff ffa5 	bl	8002ef0 <USB_EnableGlobalInt>

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fb2:	b004      	add	sp, #16
 8002fb4:	4770      	bx	lr
	...

08002fb8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002fb8:	b490      	push	{r4, r7}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fdc:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	78db      	ldrb	r3, [r3, #3]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d819      	bhi.n	800301a <USB_ActivateEndpoint+0x62>
 8002fe6:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <USB_ActivateEndpoint+0x34>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	08002ffd 	.word	0x08002ffd
 8002ff0:	08003011 	.word	0x08003011
 8002ff4:	08003021 	.word	0x08003021
 8002ff8:	08003007 	.word	0x08003007
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002ffc:	89bb      	ldrh	r3, [r7, #12]
 8002ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003002:	81bb      	strh	r3, [r7, #12]
      break;
 8003004:	e00d      	b.n	8003022 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003006:	89bb      	ldrh	r3, [r7, #12]
 8003008:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800300c:	81bb      	strh	r3, [r7, #12]
      break;
 800300e:	e008      	b.n	8003022 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003010:	89bb      	ldrh	r3, [r7, #12]
 8003012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003016:	81bb      	strh	r3, [r7, #12]
      break;
 8003018:	e003      	b.n	8003022 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
      break;
 800301e:	e000      	b.n	8003022 <USB_ActivateEndpoint+0x6a>
      break;
 8003020:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	441a      	add	r2, r3
 800302c:	89bb      	ldrh	r3, [r7, #12]
 800302e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800303a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303e:	b29b      	uxth	r3, r3
 8003040:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003058:	b29a      	uxth	r2, r3
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	4313      	orrs	r3, r2
 8003062:	b29c      	uxth	r4, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	441a      	add	r2, r3
 800306e:	4b8a      	ldr	r3, [pc, #552]	; (8003298 <USB_ActivateEndpoint+0x2e0>)
 8003070:	4323      	orrs	r3, r4
 8003072:	b29b      	uxth	r3, r3
 8003074:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	7b1b      	ldrb	r3, [r3, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 8112 	bne.w	80032a4 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	785b      	ldrb	r3, [r3, #1]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d067      	beq.n	8003158 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003088:	687c      	ldr	r4, [r7, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003090:	b29b      	uxth	r3, r3
 8003092:	441c      	add	r4, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	4423      	add	r3, r4
 800309c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030a0:	461c      	mov	r4, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	88db      	ldrh	r3, [r3, #6]
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29c      	uxth	r4, r3
 80030be:	4623      	mov	r3, r4
 80030c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d014      	beq.n	80030f2 <USB_ActivateEndpoint+0x13a>
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	b29c      	uxth	r4, r3
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	441a      	add	r2, r3
 80030ea:	4b6c      	ldr	r3, [pc, #432]	; (800329c <USB_ActivateEndpoint+0x2e4>)
 80030ec:	4323      	orrs	r3, r4
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	78db      	ldrb	r3, [r3, #3]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d018      	beq.n	800312c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800310c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003110:	b29c      	uxth	r4, r3
 8003112:	f084 0320 	eor.w	r3, r4, #32
 8003116:	b29c      	uxth	r4, r3
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	441a      	add	r2, r3
 8003122:	4b5d      	ldr	r3, [pc, #372]	; (8003298 <USB_ActivateEndpoint+0x2e0>)
 8003124:	4323      	orrs	r3, r4
 8003126:	b29b      	uxth	r3, r3
 8003128:	8013      	strh	r3, [r2, #0]
 800312a:	e22b      	b.n	8003584 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	b29b      	uxth	r3, r3
 800313a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003142:	b29c      	uxth	r4, r3
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	441a      	add	r2, r3
 800314e:	4b52      	ldr	r3, [pc, #328]	; (8003298 <USB_ActivateEndpoint+0x2e0>)
 8003150:	4323      	orrs	r3, r4
 8003152:	b29b      	uxth	r3, r3
 8003154:	8013      	strh	r3, [r2, #0]
 8003156:	e215      	b.n	8003584 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003158:	687c      	ldr	r4, [r7, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003160:	b29b      	uxth	r3, r3
 8003162:	441c      	add	r4, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	4423      	add	r3, r4
 800316c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003170:	461c      	mov	r4, r3
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	88db      	ldrh	r3, [r3, #6]
 8003176:	085b      	lsrs	r3, r3, #1
 8003178:	b29b      	uxth	r3, r3
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	b29b      	uxth	r3, r3
 800317e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003180:	687c      	ldr	r4, [r7, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003188:	b29b      	uxth	r3, r3
 800318a:	441c      	add	r4, r3
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	4423      	add	r3, r4
 8003194:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003198:	461c      	mov	r4, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10e      	bne.n	80031c0 <USB_ActivateEndpoint+0x208>
 80031a2:	8823      	ldrh	r3, [r4, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	8023      	strh	r3, [r4, #0]
 80031ae:	8823      	ldrh	r3, [r4, #0]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	8023      	strh	r3, [r4, #0]
 80031be:	e02d      	b.n	800321c <USB_ActivateEndpoint+0x264>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b3e      	cmp	r3, #62	; 0x3e
 80031c6:	d812      	bhi.n	80031ee <USB_ActivateEndpoint+0x236>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <USB_ActivateEndpoint+0x22a>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	3301      	adds	r3, #1
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	029b      	lsls	r3, r3, #10
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	8023      	strh	r3, [r4, #0]
 80031ec:	e016      	b.n	800321c <USB_ActivateEndpoint+0x264>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d102      	bne.n	8003208 <USB_ActivateEndpoint+0x250>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	3b01      	subs	r3, #1
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	b29b      	uxth	r3, r3
 800320c:	029b      	lsls	r3, r3, #10
 800320e:	b29b      	uxth	r3, r3
 8003210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003218:	b29b      	uxth	r3, r3
 800321a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29c      	uxth	r4, r3
 800322a:	4623      	mov	r3, r4
 800322c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d014      	beq.n	800325e <USB_ActivateEndpoint+0x2a6>
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	b29c      	uxth	r4, r3
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <USB_ActivateEndpoint+0x2e8>)
 8003258:	4323      	orrs	r3, r4
 800325a:	b29b      	uxth	r3, r3
 800325c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	b29b      	uxth	r3, r3
 800326c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003274:	b29c      	uxth	r4, r3
 8003276:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800327a:	b29c      	uxth	r4, r3
 800327c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003280:	b29c      	uxth	r4, r3
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	441a      	add	r2, r3
 800328c:	4b02      	ldr	r3, [pc, #8]	; (8003298 <USB_ActivateEndpoint+0x2e0>)
 800328e:	4323      	orrs	r3, r4
 8003290:	b29b      	uxth	r3, r3
 8003292:	8013      	strh	r3, [r2, #0]
 8003294:	e176      	b.n	8003584 <USB_ActivateEndpoint+0x5cc>
 8003296:	bf00      	nop
 8003298:	ffff8080 	.word	0xffff8080
 800329c:	ffff80c0 	.word	0xffff80c0
 80032a0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	b29c      	uxth	r4, r3
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	441a      	add	r2, r3
 80032c6:	4b96      	ldr	r3, [pc, #600]	; (8003520 <USB_ActivateEndpoint+0x568>)
 80032c8:	4323      	orrs	r3, r4
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80032ce:	687c      	ldr	r4, [r7, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	441c      	add	r4, r3
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	4423      	add	r3, r4
 80032e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032e6:	461c      	mov	r4, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	891b      	ldrh	r3, [r3, #8]
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	8023      	strh	r3, [r4, #0]
 80032f6:	687c      	ldr	r4, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fe:	b29b      	uxth	r3, r3
 8003300:	441c      	add	r4, r3
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	4423      	add	r3, r4
 800330a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800330e:	461c      	mov	r4, r3
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	895b      	ldrh	r3, [r3, #10]
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	b29b      	uxth	r3, r3
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	b29b      	uxth	r3, r3
 800331c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	785b      	ldrb	r3, [r3, #1]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 8088 	bne.w	8003438 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29c      	uxth	r4, r3
 8003336:	4623      	mov	r3, r4
 8003338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d014      	beq.n	800336a <USB_ActivateEndpoint+0x3b2>
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003356:	b29c      	uxth	r4, r3
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	441a      	add	r2, r3
 8003362:	4b70      	ldr	r3, [pc, #448]	; (8003524 <USB_ActivateEndpoint+0x56c>)
 8003364:	4323      	orrs	r3, r4
 8003366:	b29b      	uxth	r3, r3
 8003368:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b29c      	uxth	r4, r3
 8003378:	4623      	mov	r3, r4
 800337a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d014      	beq.n	80033ac <USB_ActivateEndpoint+0x3f4>
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003398:	b29c      	uxth	r4, r3
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	441a      	add	r2, r3
 80033a4:	4b60      	ldr	r3, [pc, #384]	; (8003528 <USB_ActivateEndpoint+0x570>)
 80033a6:	4323      	orrs	r3, r4
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c2:	b29c      	uxth	r4, r3
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	441a      	add	r2, r3
 80033ce:	4b56      	ldr	r3, [pc, #344]	; (8003528 <USB_ActivateEndpoint+0x570>)
 80033d0:	4323      	orrs	r3, r4
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ec:	b29c      	uxth	r4, r3
 80033ee:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80033f2:	b29c      	uxth	r4, r3
 80033f4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80033f8:	b29c      	uxth	r4, r3
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	441a      	add	r2, r3
 8003404:	4b49      	ldr	r3, [pc, #292]	; (800352c <USB_ActivateEndpoint+0x574>)
 8003406:	4323      	orrs	r3, r4
 8003408:	b29b      	uxth	r3, r3
 800340a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003422:	b29c      	uxth	r4, r3
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	441a      	add	r2, r3
 800342e:	4b3f      	ldr	r3, [pc, #252]	; (800352c <USB_ActivateEndpoint+0x574>)
 8003430:	4323      	orrs	r3, r4
 8003432:	b29b      	uxth	r3, r3
 8003434:	8013      	strh	r3, [r2, #0]
 8003436:	e0a5      	b.n	8003584 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	b29c      	uxth	r4, r3
 8003446:	4623      	mov	r3, r4
 8003448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d014      	beq.n	800347a <USB_ActivateEndpoint+0x4c2>
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	b29b      	uxth	r3, r3
 800345e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003466:	b29c      	uxth	r4, r3
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	441a      	add	r2, r3
 8003472:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <USB_ActivateEndpoint+0x56c>)
 8003474:	4323      	orrs	r3, r4
 8003476:	b29b      	uxth	r3, r3
 8003478:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29c      	uxth	r4, r3
 8003488:	4623      	mov	r3, r4
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d014      	beq.n	80034bc <USB_ActivateEndpoint+0x504>
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a8:	b29c      	uxth	r4, r3
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	441a      	add	r2, r3
 80034b4:	4b1c      	ldr	r3, [pc, #112]	; (8003528 <USB_ActivateEndpoint+0x570>)
 80034b6:	4323      	orrs	r3, r4
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d2:	b29c      	uxth	r4, r3
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	441a      	add	r2, r3
 80034de:	4b11      	ldr	r3, [pc, #68]	; (8003524 <USB_ActivateEndpoint+0x56c>)
 80034e0:	4323      	orrs	r3, r4
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	78db      	ldrb	r3, [r3, #3]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d020      	beq.n	8003530 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003504:	b29c      	uxth	r4, r3
 8003506:	f084 0320 	eor.w	r3, r4, #32
 800350a:	b29c      	uxth	r4, r3
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	441a      	add	r2, r3
 8003516:	4b05      	ldr	r3, [pc, #20]	; (800352c <USB_ActivateEndpoint+0x574>)
 8003518:	4323      	orrs	r3, r4
 800351a:	b29b      	uxth	r3, r3
 800351c:	8013      	strh	r3, [r2, #0]
 800351e:	e01c      	b.n	800355a <USB_ActivateEndpoint+0x5a2>
 8003520:	ffff8180 	.word	0xffff8180
 8003524:	ffffc080 	.word	0xffffc080
 8003528:	ffff80c0 	.word	0xffff80c0
 800352c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003546:	b29c      	uxth	r4, r3
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	441a      	add	r2, r3
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <USB_ActivateEndpoint+0x5d8>)
 8003554:	4323      	orrs	r3, r4
 8003556:	b29b      	uxth	r3, r3
 8003558:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800356c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003570:	b29c      	uxth	r4, r3
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	441a      	add	r2, r3
 800357c:	4b04      	ldr	r3, [pc, #16]	; (8003590 <USB_ActivateEndpoint+0x5d8>)
 800357e:	4323      	orrs	r3, r4
 8003580:	b29b      	uxth	r3, r3
 8003582:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bc90      	pop	{r4, r7}
 800358e:	4770      	bx	lr
 8003590:	ffff8080 	.word	0xffff8080

08003594 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003594:	b490      	push	{r4, r7}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	7b1b      	ldrb	r3, [r3, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d171      	bne.n	800368a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	785b      	ldrb	r3, [r3, #1]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d036      	beq.n	800361c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	b29c      	uxth	r4, r3
 80035bc:	4623      	mov	r3, r4
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d014      	beq.n	80035f0 <USB_DeactivateEndpoint+0x5c>
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035dc:	b29c      	uxth	r4, r3
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	441a      	add	r2, r3
 80035e8:	4b6b      	ldr	r3, [pc, #428]	; (8003798 <USB_DeactivateEndpoint+0x204>)
 80035ea:	4323      	orrs	r3, r4
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003606:	b29c      	uxth	r4, r3
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	441a      	add	r2, r3
 8003612:	4b62      	ldr	r3, [pc, #392]	; (800379c <USB_DeactivateEndpoint+0x208>)
 8003614:	4323      	orrs	r3, r4
 8003616:	b29b      	uxth	r3, r3
 8003618:	8013      	strh	r3, [r2, #0]
 800361a:	e144      	b.n	80038a6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b29c      	uxth	r4, r3
 800362a:	4623      	mov	r3, r4
 800362c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d014      	beq.n	800365e <USB_DeactivateEndpoint+0xca>
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	b29c      	uxth	r4, r3
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	441a      	add	r2, r3
 8003656:	4b52      	ldr	r3, [pc, #328]	; (80037a0 <USB_DeactivateEndpoint+0x20c>)
 8003658:	4323      	orrs	r3, r4
 800365a:	b29b      	uxth	r3, r3
 800365c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	b29b      	uxth	r3, r3
 800366c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003674:	b29c      	uxth	r4, r3
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	441a      	add	r2, r3
 8003680:	4b46      	ldr	r3, [pc, #280]	; (800379c <USB_DeactivateEndpoint+0x208>)
 8003682:	4323      	orrs	r3, r4
 8003684:	b29b      	uxth	r3, r3
 8003686:	8013      	strh	r3, [r2, #0]
 8003688:	e10d      	b.n	80038a6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	785b      	ldrb	r3, [r3, #1]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f040 8088 	bne.w	80037a4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b29c      	uxth	r4, r3
 80036a2:	4623      	mov	r3, r4
 80036a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d014      	beq.n	80036d6 <USB_DeactivateEndpoint+0x142>
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	b29c      	uxth	r4, r3
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	441a      	add	r2, r3
 80036ce:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <USB_DeactivateEndpoint+0x20c>)
 80036d0:	4323      	orrs	r3, r4
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	b29c      	uxth	r4, r3
 80036e4:	4623      	mov	r3, r4
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d014      	beq.n	8003718 <USB_DeactivateEndpoint+0x184>
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003704:	b29c      	uxth	r4, r3
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	441a      	add	r2, r3
 8003710:	4b21      	ldr	r3, [pc, #132]	; (8003798 <USB_DeactivateEndpoint+0x204>)
 8003712:	4323      	orrs	r3, r4
 8003714:	b29b      	uxth	r3, r3
 8003716:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	b29b      	uxth	r3, r3
 8003726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	b29c      	uxth	r4, r3
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	441a      	add	r2, r3
 800373a:	4b17      	ldr	r3, [pc, #92]	; (8003798 <USB_DeactivateEndpoint+0x204>)
 800373c:	4323      	orrs	r3, r4
 800373e:	b29b      	uxth	r3, r3
 8003740:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	b29b      	uxth	r3, r3
 8003750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003758:	b29c      	uxth	r4, r3
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	441a      	add	r2, r3
 8003764:	4b0d      	ldr	r3, [pc, #52]	; (800379c <USB_DeactivateEndpoint+0x208>)
 8003766:	4323      	orrs	r3, r4
 8003768:	b29b      	uxth	r3, r3
 800376a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	b29b      	uxth	r3, r3
 800377a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003782:	b29c      	uxth	r4, r3
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	441a      	add	r2, r3
 800378e:	4b03      	ldr	r3, [pc, #12]	; (800379c <USB_DeactivateEndpoint+0x208>)
 8003790:	4323      	orrs	r3, r4
 8003792:	b29b      	uxth	r3, r3
 8003794:	8013      	strh	r3, [r2, #0]
 8003796:	e086      	b.n	80038a6 <USB_DeactivateEndpoint+0x312>
 8003798:	ffff80c0 	.word	0xffff80c0
 800379c:	ffff8080 	.word	0xffff8080
 80037a0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	b29c      	uxth	r4, r3
 80037b2:	4623      	mov	r3, r4
 80037b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d014      	beq.n	80037e6 <USB_DeactivateEndpoint+0x252>
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d2:	b29c      	uxth	r4, r3
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	441a      	add	r2, r3
 80037de:	4b35      	ldr	r3, [pc, #212]	; (80038b4 <USB_DeactivateEndpoint+0x320>)
 80037e0:	4323      	orrs	r3, r4
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29c      	uxth	r4, r3
 80037f4:	4623      	mov	r3, r4
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d014      	beq.n	8003828 <USB_DeactivateEndpoint+0x294>
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003814:	b29c      	uxth	r4, r3
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	441a      	add	r2, r3
 8003820:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <USB_DeactivateEndpoint+0x324>)
 8003822:	4323      	orrs	r3, r4
 8003824:	b29b      	uxth	r3, r3
 8003826:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	b29b      	uxth	r3, r3
 8003836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800383a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383e:	b29c      	uxth	r4, r3
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	441a      	add	r2, r3
 800384a:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <USB_DeactivateEndpoint+0x320>)
 800384c:	4323      	orrs	r3, r4
 800384e:	b29b      	uxth	r3, r3
 8003850:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	b29b      	uxth	r3, r3
 8003860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003868:	b29c      	uxth	r4, r3
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	441a      	add	r2, r3
 8003874:	4b11      	ldr	r3, [pc, #68]	; (80038bc <USB_DeactivateEndpoint+0x328>)
 8003876:	4323      	orrs	r3, r4
 8003878:	b29b      	uxth	r3, r3
 800387a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	b29c      	uxth	r4, r3
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	441a      	add	r2, r3
 800389e:	4b07      	ldr	r3, [pc, #28]	; (80038bc <USB_DeactivateEndpoint+0x328>)
 80038a0:	4323      	orrs	r3, r4
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc90      	pop	{r4, r7}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	ffffc080 	.word	0xffffc080
 80038b8:	ffff80c0 	.word	0xffff80c0
 80038bc:	ffff8080 	.word	0xffff8080

080038c0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b08d      	sub	sp, #52	; 0x34
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	785b      	ldrb	r3, [r3, #1]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	f040 8160 	bne.w	8003b94 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	699a      	ldr	r2, [r3, #24]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d909      	bls.n	80038f4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	1ad2      	subs	r2, r2, r3
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	619a      	str	r2, [r3, #24]
 80038f2:	e005      	b.n	8003900 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2200      	movs	r2, #0
 80038fe:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	7b1b      	ldrb	r3, [r3, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d119      	bne.n	800393c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6959      	ldr	r1, [r3, #20]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	88da      	ldrh	r2, [r3, #6]
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	b29b      	uxth	r3, r3
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fba2 	bl	800405e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800391a:	687c      	ldr	r4, [r7, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003922:	b29b      	uxth	r3, r3
 8003924:	441c      	add	r4, r3
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	4423      	add	r3, r4
 800392e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003932:	461c      	mov	r4, r3
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	b29b      	uxth	r3, r3
 8003938:	8023      	strh	r3, [r4, #0]
 800393a:	e10f      	b.n	8003b5c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d065      	beq.n	8003a1e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003952:	687c      	ldr	r4, [r7, #4]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d148      	bne.n	80039ee <USB_EPStartXfer+0x12e>
 800395c:	687c      	ldr	r4, [r7, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003964:	b29b      	uxth	r3, r3
 8003966:	441c      	add	r4, r3
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	4423      	add	r3, r4
 8003970:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003974:	461c      	mov	r4, r3
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10e      	bne.n	800399a <USB_EPStartXfer+0xda>
 800397c:	8823      	ldrh	r3, [r4, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003984:	b29b      	uxth	r3, r3
 8003986:	8023      	strh	r3, [r4, #0]
 8003988:	8823      	ldrh	r3, [r4, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003994:	b29b      	uxth	r3, r3
 8003996:	8023      	strh	r3, [r4, #0]
 8003998:	e03d      	b.n	8003a16 <USB_EPStartXfer+0x156>
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	2b3e      	cmp	r3, #62	; 0x3e
 800399e:	d810      	bhi.n	80039c2 <USB_EPStartXfer+0x102>
 80039a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <USB_EPStartXfer+0xf6>
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	3301      	adds	r3, #1
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	029b      	lsls	r3, r3, #10
 80039bc:	b29b      	uxth	r3, r3
 80039be:	8023      	strh	r3, [r4, #0]
 80039c0:	e029      	b.n	8003a16 <USB_EPStartXfer+0x156>
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
 80039c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d102      	bne.n	80039d8 <USB_EPStartXfer+0x118>
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	3b01      	subs	r3, #1
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	b29b      	uxth	r3, r3
 80039dc:	029b      	lsls	r3, r3, #10
 80039de:	b29b      	uxth	r3, r3
 80039e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	8023      	strh	r3, [r4, #0]
 80039ec:	e013      	b.n	8003a16 <USB_EPStartXfer+0x156>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	785b      	ldrb	r3, [r3, #1]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d10f      	bne.n	8003a16 <USB_EPStartXfer+0x156>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	441c      	add	r4, r3
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	4423      	add	r3, r4
 8003a08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	895b      	ldrh	r3, [r3, #10]
 8003a1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003a1c:	e063      	b.n	8003ae6 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	785b      	ldrb	r3, [r3, #1]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d148      	bne.n	8003ab8 <USB_EPStartXfer+0x1f8>
 8003a26:	687c      	ldr	r4, [r7, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	441c      	add	r4, r3
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	4423      	add	r3, r4
 8003a3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a3e:	461c      	mov	r4, r3
 8003a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10e      	bne.n	8003a64 <USB_EPStartXfer+0x1a4>
 8003a46:	8823      	ldrh	r3, [r4, #0]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	8023      	strh	r3, [r4, #0]
 8003a52:	8823      	ldrh	r3, [r4, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	8023      	strh	r3, [r4, #0]
 8003a62:	e03d      	b.n	8003ae0 <USB_EPStartXfer+0x220>
 8003a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a66:	2b3e      	cmp	r3, #62	; 0x3e
 8003a68:	d810      	bhi.n	8003a8c <USB_EPStartXfer+0x1cc>
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	623b      	str	r3, [r7, #32]
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <USB_EPStartXfer+0x1c0>
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	623b      	str	r3, [r7, #32]
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	029b      	lsls	r3, r3, #10
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	8023      	strh	r3, [r4, #0]
 8003a8a:	e029      	b.n	8003ae0 <USB_EPStartXfer+0x220>
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	623b      	str	r3, [r7, #32]
 8003a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d102      	bne.n	8003aa2 <USB_EPStartXfer+0x1e2>
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	623b      	str	r3, [r7, #32]
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	029b      	lsls	r3, r3, #10
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	8023      	strh	r3, [r4, #0]
 8003ab6:	e013      	b.n	8003ae0 <USB_EPStartXfer+0x220>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	785b      	ldrb	r3, [r3, #1]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10f      	bne.n	8003ae0 <USB_EPStartXfer+0x220>
 8003ac0:	687c      	ldr	r4, [r7, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	441c      	add	r4, r3
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	4423      	add	r3, r4
 8003ad4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ad8:	461c      	mov	r4, r3
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	891b      	ldrh	r3, [r3, #8]
 8003ae4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6959      	ldr	r1, [r3, #20]
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fab4 	bl	800405e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	785b      	ldrb	r3, [r3, #1]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d115      	bne.n	8003b2a <USB_EPStartXfer+0x26a>
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b14:	b29c      	uxth	r4, r3
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	441a      	add	r2, r3
 8003b20:	4b9a      	ldr	r3, [pc, #616]	; (8003d8c <USB_EPStartXfer+0x4cc>)
 8003b22:	4323      	orrs	r3, r4
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	8013      	strh	r3, [r2, #0]
 8003b28:	e018      	b.n	8003b5c <USB_EPStartXfer+0x29c>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	785b      	ldrb	r3, [r3, #1]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d114      	bne.n	8003b5c <USB_EPStartXfer+0x29c>
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b48:	b29c      	uxth	r4, r3
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	441a      	add	r2, r3
 8003b54:	4b8e      	ldr	r3, [pc, #568]	; (8003d90 <USB_EPStartXfer+0x4d0>)
 8003b56:	4323      	orrs	r3, r4
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b72:	b29c      	uxth	r4, r3
 8003b74:	f084 0310 	eor.w	r3, r4, #16
 8003b78:	b29c      	uxth	r4, r3
 8003b7a:	f084 0320 	eor.w	r3, r4, #32
 8003b7e:	b29c      	uxth	r4, r3
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	441a      	add	r2, r3
 8003b8a:	4b82      	ldr	r3, [pc, #520]	; (8003d94 <USB_EPStartXfer+0x4d4>)
 8003b8c:	4323      	orrs	r3, r4
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	8013      	strh	r3, [r2, #0]
 8003b92:	e146      	b.n	8003e22 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	699a      	ldr	r2, [r3, #24]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d909      	bls.n	8003bb4 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	1ad2      	subs	r2, r2, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	619a      	str	r2, [r3, #24]
 8003bb2:	e005      	b.n	8003bc0 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	7b1b      	ldrb	r3, [r3, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d148      	bne.n	8003c5a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003bc8:	687c      	ldr	r4, [r7, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	441c      	add	r4, r3
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	4423      	add	r3, r4
 8003bdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003be0:	461c      	mov	r4, r3
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10e      	bne.n	8003c06 <USB_EPStartXfer+0x346>
 8003be8:	8823      	ldrh	r3, [r4, #0]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	8023      	strh	r3, [r4, #0]
 8003bf4:	8823      	ldrh	r3, [r4, #0]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	8023      	strh	r3, [r4, #0]
 8003c04:	e0f2      	b.n	8003dec <USB_EPStartXfer+0x52c>
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	2b3e      	cmp	r3, #62	; 0x3e
 8003c0a:	d810      	bhi.n	8003c2e <USB_EPStartXfer+0x36e>
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <USB_EPStartXfer+0x362>
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	029b      	lsls	r3, r3, #10
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	8023      	strh	r3, [r4, #0]
 8003c2c:	e0de      	b.n	8003dec <USB_EPStartXfer+0x52c>
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d102      	bne.n	8003c44 <USB_EPStartXfer+0x384>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	61fb      	str	r3, [r7, #28]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	029b      	lsls	r3, r3, #10
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	8023      	strh	r3, [r4, #0]
 8003c58:	e0c8      	b.n	8003dec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	785b      	ldrb	r3, [r3, #1]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d148      	bne.n	8003cf4 <USB_EPStartXfer+0x434>
 8003c62:	687c      	ldr	r4, [r7, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	441c      	add	r4, r3
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	4423      	add	r3, r4
 8003c76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c7a:	461c      	mov	r4, r3
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10e      	bne.n	8003ca0 <USB_EPStartXfer+0x3e0>
 8003c82:	8823      	ldrh	r3, [r4, #0]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	8023      	strh	r3, [r4, #0]
 8003c8e:	8823      	ldrh	r3, [r4, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	8023      	strh	r3, [r4, #0]
 8003c9e:	e03d      	b.n	8003d1c <USB_EPStartXfer+0x45c>
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ca4:	d810      	bhi.n	8003cc8 <USB_EPStartXfer+0x408>
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <USB_EPStartXfer+0x3fc>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	029b      	lsls	r3, r3, #10
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	8023      	strh	r3, [r4, #0]
 8003cc6:	e029      	b.n	8003d1c <USB_EPStartXfer+0x45c>
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d102      	bne.n	8003cde <USB_EPStartXfer+0x41e>
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	029b      	lsls	r3, r3, #10
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	8023      	strh	r3, [r4, #0]
 8003cf2:	e013      	b.n	8003d1c <USB_EPStartXfer+0x45c>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	785b      	ldrb	r3, [r3, #1]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d10f      	bne.n	8003d1c <USB_EPStartXfer+0x45c>
 8003cfc:	687c      	ldr	r4, [r7, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	441c      	add	r4, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	4423      	add	r3, r4
 8003d10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d14:	461c      	mov	r4, r3
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	8023      	strh	r3, [r4, #0]
 8003d1c:	687c      	ldr	r4, [r7, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	785b      	ldrb	r3, [r3, #1]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d14e      	bne.n	8003dc4 <USB_EPStartXfer+0x504>
 8003d26:	687c      	ldr	r4, [r7, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	441c      	add	r4, r3
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	4423      	add	r3, r4
 8003d3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d3e:	461c      	mov	r4, r3
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10e      	bne.n	8003d64 <USB_EPStartXfer+0x4a4>
 8003d46:	8823      	ldrh	r3, [r4, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	8023      	strh	r3, [r4, #0]
 8003d52:	8823      	ldrh	r3, [r4, #0]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	8023      	strh	r3, [r4, #0]
 8003d62:	e043      	b.n	8003dec <USB_EPStartXfer+0x52c>
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	2b3e      	cmp	r3, #62	; 0x3e
 8003d68:	d816      	bhi.n	8003d98 <USB_EPStartXfer+0x4d8>
 8003d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <USB_EPStartXfer+0x4c0>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	029b      	lsls	r3, r3, #10
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	8023      	strh	r3, [r4, #0]
 8003d8a:	e02f      	b.n	8003dec <USB_EPStartXfer+0x52c>
 8003d8c:	ffff80c0 	.word	0xffff80c0
 8003d90:	ffffc080 	.word	0xffffc080
 8003d94:	ffff8080 	.word	0xffff8080
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	f003 031f 	and.w	r3, r3, #31
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d102      	bne.n	8003dae <USB_EPStartXfer+0x4ee>
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	029b      	lsls	r3, r3, #10
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	8023      	strh	r3, [r4, #0]
 8003dc2:	e013      	b.n	8003dec <USB_EPStartXfer+0x52c>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	785b      	ldrb	r3, [r3, #1]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d10f      	bne.n	8003dec <USB_EPStartXfer+0x52c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	441c      	add	r4, r3
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	4423      	add	r3, r4
 8003dde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e02:	b29c      	uxth	r4, r3
 8003e04:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003e08:	b29c      	uxth	r4, r3
 8003e0a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003e0e:	b29c      	uxth	r4, r3
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	441a      	add	r2, r3
 8003e1a:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <USB_EPStartXfer+0x56c>)
 8003e1c:	4323      	orrs	r3, r4
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3734      	adds	r7, #52	; 0x34
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd90      	pop	{r4, r7, pc}
 8003e2c:	ffff8080 	.word	0xffff8080

08003e30 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e30:	b490      	push	{r4, r7}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	785b      	ldrb	r3, [r3, #1]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d018      	beq.n	8003e74 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e58:	b29c      	uxth	r4, r3
 8003e5a:	f084 0310 	eor.w	r3, r4, #16
 8003e5e:	b29c      	uxth	r4, r3
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	441a      	add	r2, r3
 8003e6a:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <USB_EPSetStall+0x80>)
 8003e6c:	4323      	orrs	r3, r4
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	8013      	strh	r3, [r2, #0]
 8003e72:	e017      	b.n	8003ea4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8a:	b29c      	uxth	r4, r3
 8003e8c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003e90:	b29c      	uxth	r4, r3
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	441a      	add	r2, r3
 8003e9c:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <USB_EPSetStall+0x80>)
 8003e9e:	4323      	orrs	r3, r4
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc90      	pop	{r4, r7}
 8003eae:	4770      	bx	lr
 8003eb0:	ffff8080 	.word	0xffff8080

08003eb4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003eb4:	b490      	push	{r4, r7}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	7b1b      	ldrb	r3, [r3, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d17d      	bne.n	8003fc2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	785b      	ldrb	r3, [r3, #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d03d      	beq.n	8003f4a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	b29c      	uxth	r4, r3
 8003edc:	4623      	mov	r3, r4
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d014      	beq.n	8003f10 <USB_EPClearStall+0x5c>
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efc:	b29c      	uxth	r4, r3
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	441a      	add	r2, r3
 8003f08:	4b31      	ldr	r3, [pc, #196]	; (8003fd0 <USB_EPClearStall+0x11c>)
 8003f0a:	4323      	orrs	r3, r4
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	78db      	ldrb	r3, [r3, #3]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d054      	beq.n	8003fc2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f2e:	b29c      	uxth	r4, r3
 8003f30:	f084 0320 	eor.w	r3, r4, #32
 8003f34:	b29c      	uxth	r4, r3
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	441a      	add	r2, r3
 8003f40:	4b24      	ldr	r3, [pc, #144]	; (8003fd4 <USB_EPClearStall+0x120>)
 8003f42:	4323      	orrs	r3, r4
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	8013      	strh	r3, [r2, #0]
 8003f48:	e03b      	b.n	8003fc2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29c      	uxth	r4, r3
 8003f58:	4623      	mov	r3, r4
 8003f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d014      	beq.n	8003f8c <USB_EPClearStall+0xd8>
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f78:	b29c      	uxth	r4, r3
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <USB_EPClearStall+0x124>)
 8003f86:	4323      	orrs	r3, r4
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	b29c      	uxth	r4, r3
 8003fa4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003fa8:	b29c      	uxth	r4, r3
 8003faa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003fae:	b29c      	uxth	r4, r3
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <USB_EPClearStall+0x120>)
 8003fbc:	4323      	orrs	r3, r4
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc90      	pop	{r4, r7}
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	ffff80c0 	.word	0xffff80c0
 8003fd4:	ffff8080 	.word	0xffff8080
 8003fd8:	ffffc080 	.word	0xffffc080

08003fdc <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d103      	bne.n	8003ff6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2280      	movs	r2, #128	; 0x80
 8003ff2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr

0800402a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800402a:	b480      	push	{r7}
 800402c:	b085      	sub	sp, #20
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004038:	b29b      	uxth	r3, r3
 800403a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800403c:	68fb      	ldr	r3, [r7, #12]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr

0800405e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800405e:	b480      	push	{r7}
 8004060:	b08d      	sub	sp, #52	; 0x34
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	4611      	mov	r1, r2
 800406a:	461a      	mov	r2, r3
 800406c:	460b      	mov	r3, r1
 800406e:	80fb      	strh	r3, [r7, #6]
 8004070:	4613      	mov	r3, r2
 8004072:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004074:	88bb      	ldrh	r3, [r7, #4]
 8004076:	3301      	adds	r3, #1
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004084:	88fb      	ldrh	r3, [r7, #6]
 8004086:	005a      	lsls	r2, r3, #1
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004096:	e01e      	b.n	80040d6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	3301      	adds	r3, #1
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	021b      	lsls	r3, r3, #8
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	3302      	adds	r3, #2
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	3302      	adds	r3, #2
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	3301      	adds	r3, #1
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	3b01      	subs	r3, #1
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1dd      	bne.n	8004098 <USB_WritePMA+0x3a>
  }
}
 80040dc:	bf00      	nop
 80040de:	3734      	adds	r7, #52	; 0x34
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b08b      	sub	sp, #44	; 0x2c
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	4611      	mov	r1, r2
 80040f2:	461a      	mov	r2, r3
 80040f4:	460b      	mov	r3, r1
 80040f6:	80fb      	strh	r3, [r7, #6]
 80040f8:	4613      	mov	r3, r2
 80040fa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80040fc:	88bb      	ldrh	r3, [r7, #4]
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	b29b      	uxth	r3, r3
 8004102:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	005a      	lsls	r2, r3, #1
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004118:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
 800411e:	e01b      	b.n	8004158 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	b29b      	uxth	r3, r3
 8004126:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	3302      	adds	r3, #2
 800412c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	b2da      	uxtb	r2, r3
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	3301      	adds	r3, #1
 800413a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	b2da      	uxtb	r2, r3
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	3301      	adds	r3, #1
 800414a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	3302      	adds	r3, #2
 8004150:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	3b01      	subs	r3, #1
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e0      	bne.n	8004120 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800415e:	88bb      	ldrh	r3, [r7, #4]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	701a      	strb	r2, [r3, #0]
  }
}
 800417a:	bf00      	nop
 800417c:	372c      	adds	r7, #44	; 0x2c
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	7c1b      	ldrb	r3, [r3, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d115      	bne.n	80041c8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800419c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041a0:	2202      	movs	r2, #2
 80041a2:	2181      	movs	r1, #129	; 0x81
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f001 fe8c 	bl	8005ec2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80041b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041b4:	2202      	movs	r2, #2
 80041b6:	2101      	movs	r1, #1
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f001 fe82 	bl	8005ec2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80041c6:	e012      	b.n	80041ee <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80041c8:	2340      	movs	r3, #64	; 0x40
 80041ca:	2202      	movs	r2, #2
 80041cc:	2181      	movs	r1, #129	; 0x81
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f001 fe77 	bl	8005ec2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80041da:	2340      	movs	r3, #64	; 0x40
 80041dc:	2202      	movs	r2, #2
 80041de:	2101      	movs	r1, #1
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f001 fe6e 	bl	8005ec2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80041ee:	2308      	movs	r3, #8
 80041f0:	2203      	movs	r2, #3
 80041f2:	2182      	movs	r1, #130	; 0x82
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f001 fe64 	bl	8005ec2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004200:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004204:	f001 ff7e 	bl	8006104 <USBD_static_malloc>
 8004208:	4602      	mov	r2, r0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d102      	bne.n	8004220 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800421a:	2301      	movs	r3, #1
 800421c:	73fb      	strb	r3, [r7, #15]
 800421e:	e026      	b.n	800426e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004226:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2200      	movs	r2, #0
 8004236:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2200      	movs	r2, #0
 800423e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	7c1b      	ldrb	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004254:	2101      	movs	r1, #1
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f001 ff1d 	bl	8006096 <USBD_LL_PrepareReceive>
 800425c:	e007      	b.n	800426e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004264:	2340      	movs	r3, #64	; 0x40
 8004266:	2101      	movs	r1, #1
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f001 ff14 	bl	8006096 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800426e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004288:	2181      	movs	r1, #129	; 0x81
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f001 fe3f 	bl	8005f0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004296:	2101      	movs	r1, #1
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f001 fe38 	bl	8005f0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80042a6:	2182      	movs	r1, #130	; 0x82
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f001 fe30 	bl	8005f0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00e      	beq.n	80042dc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042ce:	4618      	mov	r0, r3
 80042d0:	f001 ff24 	bl	800611c <USBD_static_free>
    pdev->pClassData = NULL;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042f6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800430c:	2b00      	cmp	r3, #0
 800430e:	d039      	beq.n	8004384 <USBD_CDC_Setup+0x9e>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d17c      	bne.n	800440e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	88db      	ldrh	r3, [r3, #6]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d029      	beq.n	8004370 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b25b      	sxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	da11      	bge.n	800434a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004332:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	88d2      	ldrh	r2, [r2, #6]
 8004338:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800433a:	6939      	ldr	r1, [r7, #16]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	88db      	ldrh	r3, [r3, #6]
 8004340:	461a      	mov	r2, r3
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f001 fa10 	bl	8005768 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004348:	e068      	b.n	800441c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	785a      	ldrb	r2, [r3, #1]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	88db      	ldrh	r3, [r3, #6]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004360:	6939      	ldr	r1, [r7, #16]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	88db      	ldrh	r3, [r3, #6]
 8004366:	461a      	mov	r2, r3
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f001 fa2b 	bl	80057c4 <USBD_CtlPrepareRx>
      break;
 800436e:	e055      	b.n	800441c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	7850      	ldrb	r0, [r2, #1]
 800437c:	2200      	movs	r2, #0
 800437e:	6839      	ldr	r1, [r7, #0]
 8004380:	4798      	blx	r3
      break;
 8004382:	e04b      	b.n	800441c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	785b      	ldrb	r3, [r3, #1]
 8004388:	2b0a      	cmp	r3, #10
 800438a:	d017      	beq.n	80043bc <USBD_CDC_Setup+0xd6>
 800438c:	2b0b      	cmp	r3, #11
 800438e:	d029      	beq.n	80043e4 <USBD_CDC_Setup+0xfe>
 8004390:	2b00      	cmp	r3, #0
 8004392:	d133      	bne.n	80043fc <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800439a:	2b03      	cmp	r3, #3
 800439c:	d107      	bne.n	80043ae <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800439e:	f107 030c 	add.w	r3, r7, #12
 80043a2:	2202      	movs	r2, #2
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f001 f9de 	bl	8005768 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80043ac:	e02e      	b.n	800440c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80043ae:	6839      	ldr	r1, [r7, #0]
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f001 f96f 	bl	8005694 <USBD_CtlError>
            ret = USBD_FAIL;
 80043b6:	2302      	movs	r3, #2
 80043b8:	75fb      	strb	r3, [r7, #23]
          break;
 80043ba:	e027      	b.n	800440c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d107      	bne.n	80043d6 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80043c6:	f107 030f 	add.w	r3, r7, #15
 80043ca:	2201      	movs	r2, #1
 80043cc:	4619      	mov	r1, r3
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f001 f9ca 	bl	8005768 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80043d4:	e01a      	b.n	800440c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80043d6:	6839      	ldr	r1, [r7, #0]
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f001 f95b 	bl	8005694 <USBD_CtlError>
            ret = USBD_FAIL;
 80043de:	2302      	movs	r3, #2
 80043e0:	75fb      	strb	r3, [r7, #23]
          break;
 80043e2:	e013      	b.n	800440c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d00d      	beq.n	800440a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80043ee:	6839      	ldr	r1, [r7, #0]
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f001 f94f 	bl	8005694 <USBD_CtlError>
            ret = USBD_FAIL;
 80043f6:	2302      	movs	r3, #2
 80043f8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80043fa:	e006      	b.n	800440a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80043fc:	6839      	ldr	r1, [r7, #0]
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f001 f948 	bl	8005694 <USBD_CtlError>
          ret = USBD_FAIL;
 8004404:	2302      	movs	r3, #2
 8004406:	75fb      	strb	r3, [r7, #23]
          break;
 8004408:	e000      	b.n	800440c <USBD_CDC_Setup+0x126>
          break;
 800440a:	bf00      	nop
      }
      break;
 800440c:	e006      	b.n	800441c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800440e:	6839      	ldr	r1, [r7, #0]
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f001 f93f 	bl	8005694 <USBD_CtlError>
      ret = USBD_FAIL;
 8004416:	2302      	movs	r3, #2
 8004418:	75fb      	strb	r3, [r7, #23]
      break;
 800441a:	bf00      	nop
  }

  return ret;
 800441c:	7dfb      	ldrb	r3, [r7, #23]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	460b      	mov	r3, r1
 8004430:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004438:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004440:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d037      	beq.n	80044bc <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800444c:	78fa      	ldrb	r2, [r7, #3]
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	331c      	adds	r3, #28
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d026      	beq.n	80044b0 <USBD_CDC_DataIn+0x8a>
 8004462:	78fa      	ldrb	r2, [r7, #3]
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	331c      	adds	r3, #28
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	0152      	lsls	r2, r2, #5
 800447a:	440a      	add	r2, r1
 800447c:	3238      	adds	r2, #56	; 0x38
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	fbb3 f1f2 	udiv	r1, r3, r2
 8004484:	fb02 f201 	mul.w	r2, r2, r1
 8004488:	1a9b      	subs	r3, r3, r2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d110      	bne.n	80044b0 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	331c      	adds	r3, #28
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80044a2:	78f9      	ldrb	r1, [r7, #3]
 80044a4:	2300      	movs	r3, #0
 80044a6:	2200      	movs	r2, #0
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f001 fdd1 	bl	8006050 <USBD_LL_Transmit>
 80044ae:	e003      	b.n	80044b8 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	e000      	b.n	80044be <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80044bc:	2302      	movs	r3, #2
  }
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	4619      	mov	r1, r3
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f001 fdfc 	bl	80060dc <USBD_LL_GetRxDataSize>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00d      	beq.n	8004512 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800450a:	4611      	mov	r1, r2
 800450c:	4798      	blx	r3

    return USBD_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	e000      	b.n	8004514 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004512:	2302      	movs	r3, #2
  }
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800452a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004532:	2b00      	cmp	r3, #0
 8004534:	d015      	beq.n	8004562 <USBD_CDC_EP0_RxReady+0x46>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800453c:	2bff      	cmp	r3, #255	; 0xff
 800453e:	d010      	beq.n	8004562 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800454e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004556:	b292      	uxth	r2, r2
 8004558:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	22ff      	movs	r2, #255	; 0xff
 800455e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2243      	movs	r2, #67	; 0x43
 8004578:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800457a:	4b03      	ldr	r3, [pc, #12]	; (8004588 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	20000094 	.word	0x20000094

0800458c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2243      	movs	r2, #67	; 0x43
 8004598:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800459a:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	20000050 	.word	0x20000050

080045ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2243      	movs	r2, #67	; 0x43
 80045b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80045ba:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	200000d8 	.word	0x200000d8

080045cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	220a      	movs	r2, #10
 80045d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80045da:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	2000000c 	.word	0x2000000c

080045ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80045f6:	2302      	movs	r3, #2
 80045f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr

08004618 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	4613      	mov	r3, r2
 8004624:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800462c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004636:	88fa      	ldrh	r2, [r7, #6]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	371c      	adds	r7, #28
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800464a:	b480      	push	{r7}
 800464c:	b085      	sub	sp, #20
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800465a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800467e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d01c      	beq.n	80046c4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004690:	2b00      	cmp	r3, #0
 8004692:	d115      	bne.n	80046c0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2181      	movs	r1, #129	; 0x81
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f001 fcca 	bl	8006050 <USBD_LL_Transmit>

      return USBD_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	e002      	b.n	80046c6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80046c4:	2302      	movs	r3, #2
  }
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d017      	beq.n	8004718 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	7c1b      	ldrb	r3, [r3, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d109      	bne.n	8004704 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046fa:	2101      	movs	r1, #1
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f001 fcca 	bl	8006096 <USBD_LL_PrepareReceive>
 8004702:	e007      	b.n	8004714 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800470a:	2340      	movs	r3, #64	; 0x40
 800470c:	2101      	movs	r1, #1
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f001 fcc1 	bl	8006096 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	e000      	b.n	800471a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004718:	2302      	movs	r3, #2
  }
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8004738:	4814      	ldr	r0, [pc, #80]	; (800478c <USBD_Init+0x68>)
 800473a:	f001 fd61 	bl	8006200 <iprintf>
 800473e:	4814      	ldr	r0, [pc, #80]	; (8004790 <USBD_Init+0x6c>)
 8004740:	f001 fd5e 	bl	8006200 <iprintf>
 8004744:	200a      	movs	r0, #10
 8004746:	f001 fd73 	bl	8006230 <putchar>
#endif
    return USBD_FAIL;
 800474a:	2302      	movs	r3, #2
 800474c:	e01a      	b.n	8004784 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	79fa      	ldrb	r2, [r7, #7]
 800477a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f001 fb2b 	bl	8005dd8 <USBD_LL_Init>

  return USBD_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	0800709c 	.word	0x0800709c
 8004790:	080070a4 	.word	0x080070a4

08004794 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d006      	beq.n	80047b6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	73fb      	strb	r3, [r7, #15]
 80047b4:	e00a      	b.n	80047cc <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80047b6:	4808      	ldr	r0, [pc, #32]	; (80047d8 <USBD_RegisterClass+0x44>)
 80047b8:	f001 fd22 	bl	8006200 <iprintf>
 80047bc:	4807      	ldr	r0, [pc, #28]	; (80047dc <USBD_RegisterClass+0x48>)
 80047be:	f001 fd1f 	bl	8006200 <iprintf>
 80047c2:	200a      	movs	r0, #10
 80047c4:	f001 fd34 	bl	8006230 <putchar>
#endif
    status = USBD_FAIL;
 80047c8:	2302      	movs	r3, #2
 80047ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	0800709c 	.word	0x0800709c
 80047dc:	080070bc 	.word	0x080070bc

080047e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f001 fb4f 	bl	8005e8c <USBD_LL_Start>

  return USBD_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004818:	2302      	movs	r3, #2
 800481a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00c      	beq.n	8004840 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	78fa      	ldrb	r2, [r7, #3]
 8004830:	4611      	mov	r1, r2
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	4798      	blx	r3
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	4611      	mov	r1, r2
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	4798      	blx	r3

  return USBD_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004880:	6839      	ldr	r1, [r7, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f000 feca 	bl	800561c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004896:	461a      	mov	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d00c      	beq.n	80048c6 <USBD_LL_SetupStage+0x56>
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d302      	bcc.n	80048b6 <USBD_LL_SetupStage+0x46>
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d010      	beq.n	80048d6 <USBD_LL_SetupStage+0x66>
 80048b4:	e017      	b.n	80048e6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80048bc:	4619      	mov	r1, r3
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f9ca 	bl	8004c58 <USBD_StdDevReq>
      break;
 80048c4:	e01a      	b.n	80048fc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80048cc:	4619      	mov	r1, r3
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fa2c 	bl	8004d2c <USBD_StdItfReq>
      break;
 80048d4:	e012      	b.n	80048fc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fa6a 	bl	8004db8 <USBD_StdEPReq>
      break;
 80048e4:	e00a      	b.n	80048fc <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f001 fb29 	bl	8005f4c <USBD_LL_StallEP>
      break;
 80048fa:	bf00      	nop
  }

  return USBD_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b086      	sub	sp, #24
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	460b      	mov	r3, r1
 8004910:	607a      	str	r2, [r7, #4]
 8004912:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004914:	7afb      	ldrb	r3, [r7, #11]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d14b      	bne.n	80049b2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004920:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004928:	2b03      	cmp	r3, #3
 800492a:	d134      	bne.n	8004996 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	429a      	cmp	r2, r3
 8004936:	d919      	bls.n	800496c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	1ad2      	subs	r2, r2, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800494e:	429a      	cmp	r2, r3
 8004950:	d203      	bcs.n	800495a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004956:	b29b      	uxth	r3, r3
 8004958:	e002      	b.n	8004960 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800495e:	b29b      	uxth	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 ff4b 	bl	8005800 <USBD_CtlContinueRx>
 800496a:	e038      	b.n	80049de <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800497e:	2b03      	cmp	r3, #3
 8004980:	d105      	bne.n	800498e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 ff48 	bl	8005824 <USBD_CtlSendStatus>
 8004994:	e023      	b.n	80049de <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800499c:	2b05      	cmp	r3, #5
 800499e:	d11e      	bne.n	80049de <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80049a8:	2100      	movs	r1, #0
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f001 face 	bl	8005f4c <USBD_LL_StallEP>
 80049b0:	e015      	b.n	80049de <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d108      	bne.n	80049da <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	7afa      	ldrb	r2, [r7, #11]
 80049d2:	4611      	mov	r1, r2
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	4798      	blx	r3
 80049d8:	e001      	b.n	80049de <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80049da:	2302      	movs	r3, #2
 80049dc:	e000      	b.n	80049e0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	460b      	mov	r3, r1
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80049f6:	7afb      	ldrb	r3, [r7, #11]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d17f      	bne.n	8004afc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3314      	adds	r3, #20
 8004a00:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d15c      	bne.n	8004ac6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d915      	bls.n	8004a44 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	1ad2      	subs	r2, r2, r3
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 feb5 	bl	80057a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a36:	2300      	movs	r3, #0
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f001 fb2a 	bl	8006096 <USBD_LL_PrepareReceive>
 8004a42:	e04e      	b.n	8004ae2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	6912      	ldr	r2, [r2, #16]
 8004a4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a50:	fb02 f201 	mul.w	r2, r2, r1
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d11c      	bne.n	8004a94 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d316      	bcc.n	8004a94 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d20f      	bcs.n	8004a94 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004a74:	2200      	movs	r2, #0
 8004a76:	2100      	movs	r1, #0
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fe91 	bl	80057a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a86:	2300      	movs	r3, #0
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f001 fb02 	bl	8006096 <USBD_LL_PrepareReceive>
 8004a92:	e026      	b.n	8004ae2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d105      	bne.n	8004ab6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004ab6:	2180      	movs	r1, #128	; 0x80
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f001 fa47 	bl	8005f4c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 fec3 	bl	800584a <USBD_CtlReceiveStatus>
 8004ac4:	e00d      	b.n	8004ae2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d004      	beq.n	8004ada <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d103      	bne.n	8004ae2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004ada:	2180      	movs	r1, #128	; 0x80
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f001 fa35 	bl	8005f4c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d11d      	bne.n	8004b28 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff fe83 	bl	80047f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004afa:	e015      	b.n	8004b28 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00d      	beq.n	8004b24 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d108      	bne.n	8004b24 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	7afa      	ldrb	r2, [r7, #11]
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	4798      	blx	r3
 8004b22:	e001      	b.n	8004b28 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004b24:	2302      	movs	r3, #2
 8004b26:	e000      	b.n	8004b2a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b3a:	2340      	movs	r3, #64	; 0x40
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2100      	movs	r1, #0
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f001 f9be 	bl	8005ec2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2240      	movs	r2, #64	; 0x40
 8004b52:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b56:	2340      	movs	r3, #64	; 0x40
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2180      	movs	r1, #128	; 0x80
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f001 f9b0 	bl	8005ec2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2240      	movs	r2, #64	; 0x40
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6852      	ldr	r2, [r2, #4]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	4798      	blx	r3
  }

  return USBD_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	78fa      	ldrb	r2, [r7, #3]
 8004bc4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2204      	movs	r2, #4
 8004bea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr

08004bfa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d105      	bne.n	8004c18 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d10b      	bne.n	8004c4e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d004      	beq.n	8004c7c <USBD_StdDevReq+0x24>
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d002      	beq.n	8004c7c <USBD_StdDevReq+0x24>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d008      	beq.n	8004c8c <USBD_StdDevReq+0x34>
 8004c7a:	e04c      	b.n	8004d16 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	6839      	ldr	r1, [r7, #0]
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	4798      	blx	r3
      break;
 8004c8a:	e049      	b.n	8004d20 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	785b      	ldrb	r3, [r3, #1]
 8004c90:	2b09      	cmp	r3, #9
 8004c92:	d83a      	bhi.n	8004d0a <USBD_StdDevReq+0xb2>
 8004c94:	a201      	add	r2, pc, #4	; (adr r2, 8004c9c <USBD_StdDevReq+0x44>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004ced 	.word	0x08004ced
 8004ca0:	08004d01 	.word	0x08004d01
 8004ca4:	08004d0b 	.word	0x08004d0b
 8004ca8:	08004cf7 	.word	0x08004cf7
 8004cac:	08004d0b 	.word	0x08004d0b
 8004cb0:	08004ccf 	.word	0x08004ccf
 8004cb4:	08004cc5 	.word	0x08004cc5
 8004cb8:	08004d0b 	.word	0x08004d0b
 8004cbc:	08004ce3 	.word	0x08004ce3
 8004cc0:	08004cd9 	.word	0x08004cd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004cc4:	6839      	ldr	r1, [r7, #0]
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f9d4 	bl	8005074 <USBD_GetDescriptor>
          break;
 8004ccc:	e022      	b.n	8004d14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004cce:	6839      	ldr	r1, [r7, #0]
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fb37 	bl	8005344 <USBD_SetAddress>
          break;
 8004cd6:	e01d      	b.n	8004d14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004cd8:	6839      	ldr	r1, [r7, #0]
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fb74 	bl	80053c8 <USBD_SetConfig>
          break;
 8004ce0:	e018      	b.n	8004d14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004ce2:	6839      	ldr	r1, [r7, #0]
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fbfd 	bl	80054e4 <USBD_GetConfig>
          break;
 8004cea:	e013      	b.n	8004d14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004cec:	6839      	ldr	r1, [r7, #0]
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fc2c 	bl	800554c <USBD_GetStatus>
          break;
 8004cf4:	e00e      	b.n	8004d14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004cf6:	6839      	ldr	r1, [r7, #0]
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fc5a 	bl	80055b2 <USBD_SetFeature>
          break;
 8004cfe:	e009      	b.n	8004d14 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004d00:	6839      	ldr	r1, [r7, #0]
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fc69 	bl	80055da <USBD_ClrFeature>
          break;
 8004d08:	e004      	b.n	8004d14 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004d0a:	6839      	ldr	r1, [r7, #0]
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fcc1 	bl	8005694 <USBD_CtlError>
          break;
 8004d12:	bf00      	nop
      }
      break;
 8004d14:	e004      	b.n	8004d20 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004d16:	6839      	ldr	r1, [r7, #0]
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fcbb 	bl	8005694 <USBD_CtlError>
      break;
 8004d1e:	bf00      	nop
  }

  return ret;
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop

08004d2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d003      	beq.n	8004d4e <USBD_StdItfReq+0x22>
 8004d46:	2b40      	cmp	r3, #64	; 0x40
 8004d48:	d001      	beq.n	8004d4e <USBD_StdItfReq+0x22>
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d12a      	bne.n	8004da4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d54:	3b01      	subs	r3, #1
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d81d      	bhi.n	8004d96 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	889b      	ldrh	r3, [r3, #4]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d813      	bhi.n	8004d8c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	6839      	ldr	r1, [r7, #0]
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	4798      	blx	r3
 8004d72:	4603      	mov	r3, r0
 8004d74:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	88db      	ldrh	r3, [r3, #6]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d110      	bne.n	8004da0 <USBD_StdItfReq+0x74>
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10d      	bne.n	8004da0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fd4d 	bl	8005824 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004d8a:	e009      	b.n	8004da0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fc80 	bl	8005694 <USBD_CtlError>
          break;
 8004d94:	e004      	b.n	8004da0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8004d96:	6839      	ldr	r1, [r7, #0]
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fc7b 	bl	8005694 <USBD_CtlError>
          break;
 8004d9e:	e000      	b.n	8004da2 <USBD_StdItfReq+0x76>
          break;
 8004da0:	bf00      	nop
      }
      break;
 8004da2:	e004      	b.n	8004dae <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004da4:	6839      	ldr	r1, [r7, #0]
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fc74 	bl	8005694 <USBD_CtlError>
      break;
 8004dac:	bf00      	nop
  }

  return USBD_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	889b      	ldrh	r3, [r3, #4]
 8004dca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d004      	beq.n	8004de2 <USBD_StdEPReq+0x2a>
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d002      	beq.n	8004de2 <USBD_StdEPReq+0x2a>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <USBD_StdEPReq+0x3a>
 8004de0:	e13d      	b.n	800505e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	6839      	ldr	r1, [r7, #0]
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	4798      	blx	r3
      break;
 8004df0:	e13a      	b.n	8005068 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d10a      	bne.n	8004e14 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	6839      	ldr	r1, [r7, #0]
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	4798      	blx	r3
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	e12a      	b.n	800506a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d03e      	beq.n	8004e9a <USBD_StdEPReq+0xe2>
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d002      	beq.n	8004e26 <USBD_StdEPReq+0x6e>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d070      	beq.n	8004f06 <USBD_StdEPReq+0x14e>
 8004e24:	e115      	b.n	8005052 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d002      	beq.n	8004e36 <USBD_StdEPReq+0x7e>
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d015      	beq.n	8004e60 <USBD_StdEPReq+0xa8>
 8004e34:	e02b      	b.n	8004e8e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e36:	7bbb      	ldrb	r3, [r7, #14]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00c      	beq.n	8004e56 <USBD_StdEPReq+0x9e>
 8004e3c:	7bbb      	ldrb	r3, [r7, #14]
 8004e3e:	2b80      	cmp	r3, #128	; 0x80
 8004e40:	d009      	beq.n	8004e56 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004e42:	7bbb      	ldrb	r3, [r7, #14]
 8004e44:	4619      	mov	r1, r3
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f001 f880 	bl	8005f4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004e4c:	2180      	movs	r1, #128	; 0x80
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f001 f87c 	bl	8005f4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004e54:	e020      	b.n	8004e98 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004e56:	6839      	ldr	r1, [r7, #0]
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fc1b 	bl	8005694 <USBD_CtlError>
              break;
 8004e5e:	e01b      	b.n	8004e98 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	885b      	ldrh	r3, [r3, #2]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10e      	bne.n	8004e86 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004e68:	7bbb      	ldrb	r3, [r7, #14]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <USBD_StdEPReq+0xce>
 8004e6e:	7bbb      	ldrb	r3, [r7, #14]
 8004e70:	2b80      	cmp	r3, #128	; 0x80
 8004e72:	d008      	beq.n	8004e86 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	88db      	ldrh	r3, [r3, #6]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d104      	bne.n	8004e86 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004e7c:	7bbb      	ldrb	r3, [r7, #14]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f001 f863 	bl	8005f4c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fccc 	bl	8005824 <USBD_CtlSendStatus>

              break;
 8004e8c:	e004      	b.n	8004e98 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004e8e:	6839      	ldr	r1, [r7, #0]
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fbff 	bl	8005694 <USBD_CtlError>
              break;
 8004e96:	bf00      	nop
          }
          break;
 8004e98:	e0e0      	b.n	800505c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d002      	beq.n	8004eaa <USBD_StdEPReq+0xf2>
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d015      	beq.n	8004ed4 <USBD_StdEPReq+0x11c>
 8004ea8:	e026      	b.n	8004ef8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004eaa:	7bbb      	ldrb	r3, [r7, #14]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00c      	beq.n	8004eca <USBD_StdEPReq+0x112>
 8004eb0:	7bbb      	ldrb	r3, [r7, #14]
 8004eb2:	2b80      	cmp	r3, #128	; 0x80
 8004eb4:	d009      	beq.n	8004eca <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004eb6:	7bbb      	ldrb	r3, [r7, #14]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f001 f846 	bl	8005f4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004ec0:	2180      	movs	r1, #128	; 0x80
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f001 f842 	bl	8005f4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004ec8:	e01c      	b.n	8004f04 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8004eca:	6839      	ldr	r1, [r7, #0]
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fbe1 	bl	8005694 <USBD_CtlError>
              break;
 8004ed2:	e017      	b.n	8004f04 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	885b      	ldrh	r3, [r3, #2]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d112      	bne.n	8004f02 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004edc:	7bbb      	ldrb	r3, [r7, #14]
 8004ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d004      	beq.n	8004ef0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004ee6:	7bbb      	ldrb	r3, [r7, #14]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f001 f84d 	bl	8005f8a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fc97 	bl	8005824 <USBD_CtlSendStatus>
              }
              break;
 8004ef6:	e004      	b.n	8004f02 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004ef8:	6839      	ldr	r1, [r7, #0]
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fbca 	bl	8005694 <USBD_CtlError>
              break;
 8004f00:	e000      	b.n	8004f04 <USBD_StdEPReq+0x14c>
              break;
 8004f02:	bf00      	nop
          }
          break;
 8004f04:	e0aa      	b.n	800505c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d002      	beq.n	8004f16 <USBD_StdEPReq+0x15e>
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d032      	beq.n	8004f7a <USBD_StdEPReq+0x1c2>
 8004f14:	e097      	b.n	8005046 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f16:	7bbb      	ldrb	r3, [r7, #14]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <USBD_StdEPReq+0x174>
 8004f1c:	7bbb      	ldrb	r3, [r7, #14]
 8004f1e:	2b80      	cmp	r3, #128	; 0x80
 8004f20:	d004      	beq.n	8004f2c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fbb5 	bl	8005694 <USBD_CtlError>
                break;
 8004f2a:	e091      	b.n	8005050 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	da0b      	bge.n	8004f4c <USBD_StdEPReq+0x194>
 8004f34:	7bbb      	ldrb	r3, [r7, #14]
 8004f36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	3310      	adds	r3, #16
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	4413      	add	r3, r2
 8004f48:	3304      	adds	r3, #4
 8004f4a:	e00b      	b.n	8004f64 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004f4c:	7bbb      	ldrb	r3, [r7, #14]
 8004f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4413      	add	r3, r2
 8004f62:	3304      	adds	r3, #4
 8004f64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	4619      	mov	r1, r3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fbf8 	bl	8005768 <USBD_CtlSendData>
              break;
 8004f78:	e06a      	b.n	8005050 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004f7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	da11      	bge.n	8004fa6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004f82:	7bbb      	ldrb	r3, [r7, #14]
 8004f84:	f003 020f 	and.w	r2, r3, #15
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	3318      	adds	r3, #24
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d117      	bne.n	8004fcc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004f9c:	6839      	ldr	r1, [r7, #0]
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fb78 	bl	8005694 <USBD_CtlError>
                  break;
 8004fa4:	e054      	b.n	8005050 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004fa6:	7bbb      	ldrb	r3, [r7, #14]
 8004fa8:	f003 020f 	and.w	r2, r3, #15
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d104      	bne.n	8004fcc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004fc2:	6839      	ldr	r1, [r7, #0]
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fb65 	bl	8005694 <USBD_CtlError>
                  break;
 8004fca:	e041      	b.n	8005050 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004fcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	da0b      	bge.n	8004fec <USBD_StdEPReq+0x234>
 8004fd4:	7bbb      	ldrb	r3, [r7, #14]
 8004fd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	3310      	adds	r3, #16
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	3304      	adds	r3, #4
 8004fea:	e00b      	b.n	8005004 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004fec:	7bbb      	ldrb	r3, [r7, #14]
 8004fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	4413      	add	r3, r2
 8005002:	3304      	adds	r3, #4
 8005004:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005006:	7bbb      	ldrb	r3, [r7, #14]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <USBD_StdEPReq+0x25a>
 800500c:	7bbb      	ldrb	r3, [r7, #14]
 800500e:	2b80      	cmp	r3, #128	; 0x80
 8005010:	d103      	bne.n	800501a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	e00e      	b.n	8005038 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800501a:	7bbb      	ldrb	r3, [r7, #14]
 800501c:	4619      	mov	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 ffd2 	bl	8005fc8 <USBD_LL_IsStallEP>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2201      	movs	r2, #1
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	e002      	b.n	8005038 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2202      	movs	r2, #2
 800503c:	4619      	mov	r1, r3
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fb92 	bl	8005768 <USBD_CtlSendData>
              break;
 8005044:	e004      	b.n	8005050 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005046:	6839      	ldr	r1, [r7, #0]
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fb23 	bl	8005694 <USBD_CtlError>
              break;
 800504e:	bf00      	nop
          }
          break;
 8005050:	e004      	b.n	800505c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005052:	6839      	ldr	r1, [r7, #0]
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fb1d 	bl	8005694 <USBD_CtlError>
          break;
 800505a:	bf00      	nop
      }
      break;
 800505c:	e004      	b.n	8005068 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800505e:	6839      	ldr	r1, [r7, #0]
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fb17 	bl	8005694 <USBD_CtlError>
      break;
 8005066:	bf00      	nop
  }

  return ret;
 8005068:	7bfb      	ldrb	r3, [r7, #15]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	885b      	ldrh	r3, [r3, #2]
 800508e:	0a1b      	lsrs	r3, r3, #8
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	2b06      	cmp	r3, #6
 8005096:	f200 8128 	bhi.w	80052ea <USBD_GetDescriptor+0x276>
 800509a:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <USBD_GetDescriptor+0x2c>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	080050bd 	.word	0x080050bd
 80050a4:	080050d5 	.word	0x080050d5
 80050a8:	08005115 	.word	0x08005115
 80050ac:	080052eb 	.word	0x080052eb
 80050b0:	080052eb 	.word	0x080052eb
 80050b4:	0800528b 	.word	0x0800528b
 80050b8:	080052b7 	.word	0x080052b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	7c12      	ldrb	r2, [r2, #16]
 80050c8:	f107 0108 	add.w	r1, r7, #8
 80050cc:	4610      	mov	r0, r2
 80050ce:	4798      	blx	r3
 80050d0:	60f8      	str	r0, [r7, #12]
      break;
 80050d2:	e112      	b.n	80052fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	7c1b      	ldrb	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10d      	bne.n	80050f8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	f107 0208 	add.w	r2, r7, #8
 80050e8:	4610      	mov	r0, r2
 80050ea:	4798      	blx	r3
 80050ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3301      	adds	r3, #1
 80050f2:	2202      	movs	r2, #2
 80050f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80050f6:	e100      	b.n	80052fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	f107 0208 	add.w	r2, r7, #8
 8005104:	4610      	mov	r0, r2
 8005106:	4798      	blx	r3
 8005108:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3301      	adds	r3, #1
 800510e:	2202      	movs	r2, #2
 8005110:	701a      	strb	r2, [r3, #0]
      break;
 8005112:	e0f2      	b.n	80052fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	885b      	ldrh	r3, [r3, #2]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b05      	cmp	r3, #5
 800511c:	f200 80ac 	bhi.w	8005278 <USBD_GetDescriptor+0x204>
 8005120:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <USBD_GetDescriptor+0xb4>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	08005141 	.word	0x08005141
 800512c:	08005175 	.word	0x08005175
 8005130:	080051a9 	.word	0x080051a9
 8005134:	080051dd 	.word	0x080051dd
 8005138:	08005211 	.word	0x08005211
 800513c:	08005245 	.word	0x08005245
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00b      	beq.n	8005164 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	7c12      	ldrb	r2, [r2, #16]
 8005158:	f107 0108 	add.w	r1, r7, #8
 800515c:	4610      	mov	r0, r2
 800515e:	4798      	blx	r3
 8005160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005162:	e091      	b.n	8005288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fa94 	bl	8005694 <USBD_CtlError>
            err++;
 800516c:	7afb      	ldrb	r3, [r7, #11]
 800516e:	3301      	adds	r3, #1
 8005170:	72fb      	strb	r3, [r7, #11]
          break;
 8005172:	e089      	b.n	8005288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00b      	beq.n	8005198 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	7c12      	ldrb	r2, [r2, #16]
 800518c:	f107 0108 	add.w	r1, r7, #8
 8005190:	4610      	mov	r0, r2
 8005192:	4798      	blx	r3
 8005194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005196:	e077      	b.n	8005288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005198:	6839      	ldr	r1, [r7, #0]
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fa7a 	bl	8005694 <USBD_CtlError>
            err++;
 80051a0:	7afb      	ldrb	r3, [r7, #11]
 80051a2:	3301      	adds	r3, #1
 80051a4:	72fb      	strb	r3, [r7, #11]
          break;
 80051a6:	e06f      	b.n	8005288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	7c12      	ldrb	r2, [r2, #16]
 80051c0:	f107 0108 	add.w	r1, r7, #8
 80051c4:	4610      	mov	r0, r2
 80051c6:	4798      	blx	r3
 80051c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80051ca:	e05d      	b.n	8005288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fa60 	bl	8005694 <USBD_CtlError>
            err++;
 80051d4:	7afb      	ldrb	r3, [r7, #11]
 80051d6:	3301      	adds	r3, #1
 80051d8:	72fb      	strb	r3, [r7, #11]
          break;
 80051da:	e055      	b.n	8005288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00b      	beq.n	8005200 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	7c12      	ldrb	r2, [r2, #16]
 80051f4:	f107 0108 	add.w	r1, r7, #8
 80051f8:	4610      	mov	r0, r2
 80051fa:	4798      	blx	r3
 80051fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80051fe:	e043      	b.n	8005288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005200:	6839      	ldr	r1, [r7, #0]
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fa46 	bl	8005694 <USBD_CtlError>
            err++;
 8005208:	7afb      	ldrb	r3, [r7, #11]
 800520a:	3301      	adds	r3, #1
 800520c:	72fb      	strb	r3, [r7, #11]
          break;
 800520e:	e03b      	b.n	8005288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00b      	beq.n	8005234 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	7c12      	ldrb	r2, [r2, #16]
 8005228:	f107 0108 	add.w	r1, r7, #8
 800522c:	4610      	mov	r0, r2
 800522e:	4798      	blx	r3
 8005230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005232:	e029      	b.n	8005288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005234:	6839      	ldr	r1, [r7, #0]
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fa2c 	bl	8005694 <USBD_CtlError>
            err++;
 800523c:	7afb      	ldrb	r3, [r7, #11]
 800523e:	3301      	adds	r3, #1
 8005240:	72fb      	strb	r3, [r7, #11]
          break;
 8005242:	e021      	b.n	8005288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00b      	beq.n	8005268 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	7c12      	ldrb	r2, [r2, #16]
 800525c:	f107 0108 	add.w	r1, r7, #8
 8005260:	4610      	mov	r0, r2
 8005262:	4798      	blx	r3
 8005264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005266:	e00f      	b.n	8005288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005268:	6839      	ldr	r1, [r7, #0]
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fa12 	bl	8005694 <USBD_CtlError>
            err++;
 8005270:	7afb      	ldrb	r3, [r7, #11]
 8005272:	3301      	adds	r3, #1
 8005274:	72fb      	strb	r3, [r7, #11]
          break;
 8005276:	e007      	b.n	8005288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fa0a 	bl	8005694 <USBD_CtlError>
          err++;
 8005280:	7afb      	ldrb	r3, [r7, #11]
 8005282:	3301      	adds	r3, #1
 8005284:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005286:	e038      	b.n	80052fa <USBD_GetDescriptor+0x286>
 8005288:	e037      	b.n	80052fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	7c1b      	ldrb	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d109      	bne.n	80052a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529a:	f107 0208 	add.w	r2, r7, #8
 800529e:	4610      	mov	r0, r2
 80052a0:	4798      	blx	r3
 80052a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80052a4:	e029      	b.n	80052fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80052a6:	6839      	ldr	r1, [r7, #0]
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f9f3 	bl	8005694 <USBD_CtlError>
        err++;
 80052ae:	7afb      	ldrb	r3, [r7, #11]
 80052b0:	3301      	adds	r3, #1
 80052b2:	72fb      	strb	r3, [r7, #11]
      break;
 80052b4:	e021      	b.n	80052fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	7c1b      	ldrb	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10d      	bne.n	80052da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	f107 0208 	add.w	r2, r7, #8
 80052ca:	4610      	mov	r0, r2
 80052cc:	4798      	blx	r3
 80052ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3301      	adds	r3, #1
 80052d4:	2207      	movs	r2, #7
 80052d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80052d8:	e00f      	b.n	80052fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80052da:	6839      	ldr	r1, [r7, #0]
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f9d9 	bl	8005694 <USBD_CtlError>
        err++;
 80052e2:	7afb      	ldrb	r3, [r7, #11]
 80052e4:	3301      	adds	r3, #1
 80052e6:	72fb      	strb	r3, [r7, #11]
      break;
 80052e8:	e007      	b.n	80052fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80052ea:	6839      	ldr	r1, [r7, #0]
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f9d1 	bl	8005694 <USBD_CtlError>
      err++;
 80052f2:	7afb      	ldrb	r3, [r7, #11]
 80052f4:	3301      	adds	r3, #1
 80052f6:	72fb      	strb	r3, [r7, #11]
      break;
 80052f8:	bf00      	nop
  }

  if (err != 0U)
 80052fa:	7afb      	ldrb	r3, [r7, #11]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d11c      	bne.n	800533a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005300:	893b      	ldrh	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d011      	beq.n	800532a <USBD_GetDescriptor+0x2b6>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	88db      	ldrh	r3, [r3, #6]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00d      	beq.n	800532a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	88da      	ldrh	r2, [r3, #6]
 8005312:	893b      	ldrh	r3, [r7, #8]
 8005314:	4293      	cmp	r3, r2
 8005316:	bf28      	it	cs
 8005318:	4613      	movcs	r3, r2
 800531a:	b29b      	uxth	r3, r3
 800531c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800531e:	893b      	ldrh	r3, [r7, #8]
 8005320:	461a      	mov	r2, r3
 8005322:	68f9      	ldr	r1, [r7, #12]
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fa1f 	bl	8005768 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	88db      	ldrh	r3, [r3, #6]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fa76 	bl	8005824 <USBD_CtlSendStatus>
 8005338:	e000      	b.n	800533c <USBD_GetDescriptor+0x2c8>
    return;
 800533a:	bf00      	nop
    }
  }
}
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop

08005344 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	889b      	ldrh	r3, [r3, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d130      	bne.n	80053b8 <USBD_SetAddress+0x74>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	88db      	ldrh	r3, [r3, #6]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d12c      	bne.n	80053b8 <USBD_SetAddress+0x74>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	885b      	ldrh	r3, [r3, #2]
 8005362:	2b7f      	cmp	r3, #127	; 0x7f
 8005364:	d828      	bhi.n	80053b8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	885b      	ldrh	r3, [r3, #2]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005370:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005378:	2b03      	cmp	r3, #3
 800537a:	d104      	bne.n	8005386 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800537c:	6839      	ldr	r1, [r7, #0]
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f988 	bl	8005694 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005384:	e01c      	b.n	80053c0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	7bfa      	ldrb	r2, [r7, #15]
 800538a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fe3d 	bl	8006012 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fa43 	bl	8005824 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d004      	beq.n	80053ae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ac:	e008      	b.n	80053c0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053b6:	e003      	b.n	80053c0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f96a 	bl	8005694 <USBD_CtlError>
  }
}
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	885b      	ldrh	r3, [r3, #2]
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	4b41      	ldr	r3, [pc, #260]	; (80054e0 <USBD_SetConfig+0x118>)
 80053da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80053dc:	4b40      	ldr	r3, [pc, #256]	; (80054e0 <USBD_SetConfig+0x118>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d904      	bls.n	80053ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f954 	bl	8005694 <USBD_CtlError>
 80053ec:	e075      	b.n	80054da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d002      	beq.n	80053fe <USBD_SetConfig+0x36>
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d023      	beq.n	8005444 <USBD_SetConfig+0x7c>
 80053fc:	e062      	b.n	80054c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80053fe:	4b38      	ldr	r3, [pc, #224]	; (80054e0 <USBD_SetConfig+0x118>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d01a      	beq.n	800543c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005406:	4b36      	ldr	r3, [pc, #216]	; (80054e0 <USBD_SetConfig+0x118>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2203      	movs	r2, #3
 8005414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005418:	4b31      	ldr	r3, [pc, #196]	; (80054e0 <USBD_SetConfig+0x118>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	4619      	mov	r1, r3
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff f9f4 	bl	800480c <USBD_SetClassConfig>
 8005424:	4603      	mov	r3, r0
 8005426:	2b02      	cmp	r3, #2
 8005428:	d104      	bne.n	8005434 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f931 	bl	8005694 <USBD_CtlError>
            return;
 8005432:	e052      	b.n	80054da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f9f5 	bl	8005824 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800543a:	e04e      	b.n	80054da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f9f1 	bl	8005824 <USBD_CtlSendStatus>
        break;
 8005442:	e04a      	b.n	80054da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005444:	4b26      	ldr	r3, [pc, #152]	; (80054e0 <USBD_SetConfig+0x118>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d112      	bne.n	8005472 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005454:	4b22      	ldr	r3, [pc, #136]	; (80054e0 <USBD_SetConfig+0x118>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800545e:	4b20      	ldr	r3, [pc, #128]	; (80054e0 <USBD_SetConfig+0x118>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff f9f0 	bl	800484a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f9da 	bl	8005824 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005470:	e033      	b.n	80054da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005472:	4b1b      	ldr	r3, [pc, #108]	; (80054e0 <USBD_SetConfig+0x118>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d01d      	beq.n	80054bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff f9de 	bl	800484a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800548e:	4b14      	ldr	r3, [pc, #80]	; (80054e0 <USBD_SetConfig+0x118>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005498:	4b11      	ldr	r3, [pc, #68]	; (80054e0 <USBD_SetConfig+0x118>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff f9b4 	bl	800480c <USBD_SetClassConfig>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d104      	bne.n	80054b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80054aa:	6839      	ldr	r1, [r7, #0]
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f8f1 	bl	8005694 <USBD_CtlError>
            return;
 80054b2:	e012      	b.n	80054da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f9b5 	bl	8005824 <USBD_CtlSendStatus>
        break;
 80054ba:	e00e      	b.n	80054da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f9b1 	bl	8005824 <USBD_CtlSendStatus>
        break;
 80054c2:	e00a      	b.n	80054da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80054c4:	6839      	ldr	r1, [r7, #0]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f8e4 	bl	8005694 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80054cc:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <USBD_SetConfig+0x118>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	4619      	mov	r1, r3
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff f9b9 	bl	800484a <USBD_ClrClassConfig>
        break;
 80054d8:	bf00      	nop
    }
  }
}
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20000200 	.word	0x20000200

080054e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	88db      	ldrh	r3, [r3, #6]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d004      	beq.n	8005500 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80054f6:	6839      	ldr	r1, [r7, #0]
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f8cb 	bl	8005694 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80054fe:	e021      	b.n	8005544 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005506:	2b01      	cmp	r3, #1
 8005508:	db17      	blt.n	800553a <USBD_GetConfig+0x56>
 800550a:	2b02      	cmp	r3, #2
 800550c:	dd02      	ble.n	8005514 <USBD_GetConfig+0x30>
 800550e:	2b03      	cmp	r3, #3
 8005510:	d00b      	beq.n	800552a <USBD_GetConfig+0x46>
 8005512:	e012      	b.n	800553a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3308      	adds	r3, #8
 800551e:	2201      	movs	r2, #1
 8005520:	4619      	mov	r1, r3
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f920 	bl	8005768 <USBD_CtlSendData>
        break;
 8005528:	e00c      	b.n	8005544 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3304      	adds	r3, #4
 800552e:	2201      	movs	r2, #1
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f918 	bl	8005768 <USBD_CtlSendData>
        break;
 8005538:	e004      	b.n	8005544 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f8a9 	bl	8005694 <USBD_CtlError>
        break;
 8005542:	bf00      	nop
}
 8005544:	bf00      	nop
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800555c:	3b01      	subs	r3, #1
 800555e:	2b02      	cmp	r3, #2
 8005560:	d81e      	bhi.n	80055a0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	88db      	ldrh	r3, [r3, #6]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d004      	beq.n	8005574 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f891 	bl	8005694 <USBD_CtlError>
        break;
 8005572:	e01a      	b.n	80055aa <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d005      	beq.n	8005590 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f043 0202 	orr.w	r2, r3, #2
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	330c      	adds	r3, #12
 8005594:	2202      	movs	r2, #2
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f8e5 	bl	8005768 <USBD_CtlSendData>
      break;
 800559e:	e004      	b.n	80055aa <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f876 	bl	8005694 <USBD_CtlError>
      break;
 80055a8:	bf00      	nop
  }
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	885b      	ldrh	r3, [r3, #2]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d106      	bne.n	80055d2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f929 	bl	8005824 <USBD_CtlSendStatus>
  }
}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055ea:	3b01      	subs	r3, #1
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d80b      	bhi.n	8005608 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	885b      	ldrh	r3, [r3, #2]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d10c      	bne.n	8005612 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f90f 	bl	8005824 <USBD_CtlSendStatus>
      }
      break;
 8005606:	e004      	b.n	8005612 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f842 	bl	8005694 <USBD_CtlError>
      break;
 8005610:	e000      	b.n	8005614 <USBD_ClrFeature+0x3a>
      break;
 8005612:	bf00      	nop
  }
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781a      	ldrb	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	785a      	ldrb	r2, [r3, #1]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	3302      	adds	r3, #2
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	b29a      	uxth	r2, r3
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	3303      	adds	r3, #3
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	b29b      	uxth	r3, r3
 800564a:	4413      	add	r3, r2
 800564c:	b29a      	uxth	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	3304      	adds	r3, #4
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	b29a      	uxth	r2, r3
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	3305      	adds	r3, #5
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	b29b      	uxth	r3, r3
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	b29b      	uxth	r3, r3
 8005666:	4413      	add	r3, r2
 8005668:	b29a      	uxth	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	3306      	adds	r3, #6
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	b29a      	uxth	r2, r3
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	3307      	adds	r3, #7
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	b29b      	uxth	r3, r3
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	b29b      	uxth	r3, r3
 8005682:	4413      	add	r3, r2
 8005684:	b29a      	uxth	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	80da      	strh	r2, [r3, #6]

}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr

08005694 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800569e:	2180      	movs	r1, #128	; 0x80
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fc53 	bl	8005f4c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80056a6:	2100      	movs	r1, #0
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fc4f 	bl	8005f4c <USBD_LL_StallEP>
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b086      	sub	sp, #24
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d032      	beq.n	8005732 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 f834 	bl	800573a <USBD_GetLen>
 80056d2:	4603      	mov	r3, r0
 80056d4:	3301      	adds	r3, #1
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	75fa      	strb	r2, [r7, #23]
 80056e6:	461a      	mov	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4413      	add	r3, r2
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	7812      	ldrb	r2, [r2, #0]
 80056f0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	75fa      	strb	r2, [r7, #23]
 80056f8:	461a      	mov	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	4413      	add	r3, r2
 80056fe:	2203      	movs	r2, #3
 8005700:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005702:	e012      	b.n	800572a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	60fa      	str	r2, [r7, #12]
 800570a:	7dfa      	ldrb	r2, [r7, #23]
 800570c:	1c51      	adds	r1, r2, #1
 800570e:	75f9      	strb	r1, [r7, #23]
 8005710:	4611      	mov	r1, r2
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	440a      	add	r2, r1
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800571a:	7dfb      	ldrb	r3, [r7, #23]
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	75fa      	strb	r2, [r7, #23]
 8005720:	461a      	mov	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	4413      	add	r3, r2
 8005726:	2200      	movs	r2, #0
 8005728:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e8      	bne.n	8005704 <USBD_GetString+0x4e>
    }
  }
}
 8005732:	bf00      	nop
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005746:	e005      	b.n	8005754 <USBD_GetLen+0x1a>
  {
    len++;
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	3301      	adds	r3, #1
 800574c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3301      	adds	r3, #1
 8005752:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f5      	bne.n	8005748 <USBD_GetLen+0xe>
  }

  return len;
 800575c:	7bfb      	ldrb	r3, [r7, #15]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr

08005768 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2202      	movs	r2, #2
 800577a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800577e:	88fa      	ldrh	r2, [r7, #6]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005784:	88fa      	ldrh	r2, [r7, #6]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	2100      	movs	r1, #0
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 fc5d 	bl	8006050 <USBD_LL_Transmit>

  return USBD_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	4613      	mov	r3, r2
 80057ac:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80057ae:	88fb      	ldrh	r3, [r7, #6]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	2100      	movs	r1, #0
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 fc4b 	bl	8006050 <USBD_LL_Transmit>

  return USBD_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	4613      	mov	r3, r2
 80057d0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2203      	movs	r2, #3
 80057d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80057da:	88fa      	ldrh	r2, [r7, #6]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80057e2:	88fa      	ldrh	r2, [r7, #6]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	2100      	movs	r1, #0
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 fc50 	bl	8006096 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	4613      	mov	r3, r2
 800580c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	2100      	movs	r1, #0
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 fc3e 	bl	8006096 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2204      	movs	r2, #4
 8005830:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005834:	2300      	movs	r3, #0
 8005836:	2200      	movs	r2, #0
 8005838:	2100      	movs	r1, #0
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fc08 	bl	8006050 <USBD_LL_Transmit>

  return USBD_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2205      	movs	r2, #5
 8005856:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800585a:	2300      	movs	r3, #0
 800585c:	2200      	movs	r2, #0
 800585e:	2100      	movs	r1, #0
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fc18 	bl	8006096 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005874:	2200      	movs	r2, #0
 8005876:	4912      	ldr	r1, [pc, #72]	; (80058c0 <MX_USB_DEVICE_Init+0x50>)
 8005878:	4812      	ldr	r0, [pc, #72]	; (80058c4 <MX_USB_DEVICE_Init+0x54>)
 800587a:	f7fe ff53 	bl	8004724 <USBD_Init>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005884:	f7fa fe86 	bl	8000594 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005888:	490f      	ldr	r1, [pc, #60]	; (80058c8 <MX_USB_DEVICE_Init+0x58>)
 800588a:	480e      	ldr	r0, [pc, #56]	; (80058c4 <MX_USB_DEVICE_Init+0x54>)
 800588c:	f7fe ff82 	bl	8004794 <USBD_RegisterClass>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005896:	f7fa fe7d 	bl	8000594 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800589a:	490c      	ldr	r1, [pc, #48]	; (80058cc <MX_USB_DEVICE_Init+0x5c>)
 800589c:	4809      	ldr	r0, [pc, #36]	; (80058c4 <MX_USB_DEVICE_Init+0x54>)
 800589e:	f7fe fea5 	bl	80045ec <USBD_CDC_RegisterInterface>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80058a8:	f7fa fe74 	bl	8000594 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80058ac:	4805      	ldr	r0, [pc, #20]	; (80058c4 <MX_USB_DEVICE_Init+0x54>)
 80058ae:	f7fe ff97 	bl	80047e0 <USBD_Start>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80058b8:	f7fa fe6c 	bl	8000594 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80058bc:	bf00      	nop
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	2000012c 	.word	0x2000012c
 80058c4:	2000051c 	.word	0x2000051c
 80058c8:	20000018 	.word	0x20000018
 80058cc:	2000011c 	.word	0x2000011c

080058d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80058d4:	2200      	movs	r2, #0
 80058d6:	4905      	ldr	r1, [pc, #20]	; (80058ec <CDC_Init_FS+0x1c>)
 80058d8:	4805      	ldr	r0, [pc, #20]	; (80058f0 <CDC_Init_FS+0x20>)
 80058da:	f7fe fe9d 	bl	8004618 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80058de:	4905      	ldr	r1, [pc, #20]	; (80058f4 <CDC_Init_FS+0x24>)
 80058e0:	4803      	ldr	r0, [pc, #12]	; (80058f0 <CDC_Init_FS+0x20>)
 80058e2:	f7fe feb2 	bl	800464a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80058e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	200009e0 	.word	0x200009e0
 80058f0:	2000051c 	.word	0x2000051c
 80058f4:	200007e0 	.word	0x200007e0

080058f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80058fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80058fe:	4618      	mov	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr
	...

08005908 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	6039      	str	r1, [r7, #0]
 8005912:	71fb      	strb	r3, [r7, #7]
 8005914:	4613      	mov	r3, r2
 8005916:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	2b23      	cmp	r3, #35	; 0x23
 800591c:	d84a      	bhi.n	80059b4 <CDC_Control_FS+0xac>
 800591e:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <CDC_Control_FS+0x1c>)
 8005920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005924:	080059b5 	.word	0x080059b5
 8005928:	080059b5 	.word	0x080059b5
 800592c:	080059b5 	.word	0x080059b5
 8005930:	080059b5 	.word	0x080059b5
 8005934:	080059b5 	.word	0x080059b5
 8005938:	080059b5 	.word	0x080059b5
 800593c:	080059b5 	.word	0x080059b5
 8005940:	080059b5 	.word	0x080059b5
 8005944:	080059b5 	.word	0x080059b5
 8005948:	080059b5 	.word	0x080059b5
 800594c:	080059b5 	.word	0x080059b5
 8005950:	080059b5 	.word	0x080059b5
 8005954:	080059b5 	.word	0x080059b5
 8005958:	080059b5 	.word	0x080059b5
 800595c:	080059b5 	.word	0x080059b5
 8005960:	080059b5 	.word	0x080059b5
 8005964:	080059b5 	.word	0x080059b5
 8005968:	080059b5 	.word	0x080059b5
 800596c:	080059b5 	.word	0x080059b5
 8005970:	080059b5 	.word	0x080059b5
 8005974:	080059b5 	.word	0x080059b5
 8005978:	080059b5 	.word	0x080059b5
 800597c:	080059b5 	.word	0x080059b5
 8005980:	080059b5 	.word	0x080059b5
 8005984:	080059b5 	.word	0x080059b5
 8005988:	080059b5 	.word	0x080059b5
 800598c:	080059b5 	.word	0x080059b5
 8005990:	080059b5 	.word	0x080059b5
 8005994:	080059b5 	.word	0x080059b5
 8005998:	080059b5 	.word	0x080059b5
 800599c:	080059b5 	.word	0x080059b5
 80059a0:	080059b5 	.word	0x080059b5
 80059a4:	080059b5 	.word	0x080059b5
 80059a8:	080059b5 	.word	0x080059b5
 80059ac:	080059b5 	.word	0x080059b5
 80059b0:	080059b5 	.word	0x080059b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80059b4:	bf00      	nop
  }

  return (USBD_OK);
 80059b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop

080059c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f80e 	bl	80059f8 <CDC_Transmit_FS>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	4805      	ldr	r0, [pc, #20]	; (80059f4 <CDC_Receive_FS+0x30>)
 80059e0:	f7fe fe33 	bl	800464a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80059e4:	4803      	ldr	r0, [pc, #12]	; (80059f4 <CDC_Receive_FS+0x30>)
 80059e6:	f7fe fe72 	bl	80046ce <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80059ea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	2000051c 	.word	0x2000051c

080059f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005a08:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <CDC_Transmit_FS+0x48>)
 8005a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e00b      	b.n	8005a36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005a1e:	887b      	ldrh	r3, [r7, #2]
 8005a20:	461a      	mov	r2, r3
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	4806      	ldr	r0, [pc, #24]	; (8005a40 <CDC_Transmit_FS+0x48>)
 8005a26:	f7fe fdf7 	bl	8004618 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005a2a:	4805      	ldr	r0, [pc, #20]	; (8005a40 <CDC_Transmit_FS+0x48>)
 8005a2c:	f7fe fe20 	bl	8004670 <USBD_CDC_TransmitPacket>
 8005a30:	4603      	mov	r3, r0
 8005a32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	2000051c 	.word	0x2000051c

08005a44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	6039      	str	r1, [r7, #0]
 8005a4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2212      	movs	r2, #18
 8005a54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005a56:	4b03      	ldr	r3, [pc, #12]	; (8005a64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bc80      	pop	{r7}
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20000148 	.word	0x20000148

08005a68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	6039      	str	r1, [r7, #0]
 8005a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2204      	movs	r2, #4
 8005a78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005a7a:	4b03      	ldr	r3, [pc, #12]	; (8005a88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bc80      	pop	{r7}
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	2000015c 	.word	0x2000015c

08005a8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	6039      	str	r1, [r7, #0]
 8005a96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d105      	bne.n	8005aaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	4907      	ldr	r1, [pc, #28]	; (8005ac0 <USBD_FS_ProductStrDescriptor+0x34>)
 8005aa2:	4808      	ldr	r0, [pc, #32]	; (8005ac4 <USBD_FS_ProductStrDescriptor+0x38>)
 8005aa4:	f7ff fe07 	bl	80056b6 <USBD_GetString>
 8005aa8:	e004      	b.n	8005ab4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	4904      	ldr	r1, [pc, #16]	; (8005ac0 <USBD_FS_ProductStrDescriptor+0x34>)
 8005aae:	4805      	ldr	r0, [pc, #20]	; (8005ac4 <USBD_FS_ProductStrDescriptor+0x38>)
 8005ab0:	f7ff fe01 	bl	80056b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ab4:	4b02      	ldr	r3, [pc, #8]	; (8005ac0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000be0 	.word	0x20000be0
 8005ac4:	080070d4 	.word	0x080070d4

08005ac8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	6039      	str	r1, [r7, #0]
 8005ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	4904      	ldr	r1, [pc, #16]	; (8005ae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005ad8:	4804      	ldr	r0, [pc, #16]	; (8005aec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005ada:	f7ff fdec 	bl	80056b6 <USBD_GetString>
  return USBD_StrDesc;
 8005ade:	4b02      	ldr	r3, [pc, #8]	; (8005ae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000be0 	.word	0x20000be0
 8005aec:	080070e4 	.word	0x080070e4

08005af0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	6039      	str	r1, [r7, #0]
 8005afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	221a      	movs	r2, #26
 8005b00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005b02:	f000 f843 	bl	8005b8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005b06:	4b02      	ldr	r3, [pc, #8]	; (8005b10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20000160 	.word	0x20000160

08005b14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	6039      	str	r1, [r7, #0]
 8005b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d105      	bne.n	8005b32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	4907      	ldr	r1, [pc, #28]	; (8005b48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005b2a:	4808      	ldr	r0, [pc, #32]	; (8005b4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005b2c:	f7ff fdc3 	bl	80056b6 <USBD_GetString>
 8005b30:	e004      	b.n	8005b3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	4904      	ldr	r1, [pc, #16]	; (8005b48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005b36:	4805      	ldr	r0, [pc, #20]	; (8005b4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005b38:	f7ff fdbd 	bl	80056b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005b3c:	4b02      	ldr	r3, [pc, #8]	; (8005b48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000be0 	.word	0x20000be0
 8005b4c:	080070f8 	.word	0x080070f8

08005b50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	4603      	mov	r3, r0
 8005b58:	6039      	str	r1, [r7, #0]
 8005b5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005b5c:	79fb      	ldrb	r3, [r7, #7]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d105      	bne.n	8005b6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	4907      	ldr	r1, [pc, #28]	; (8005b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005b66:	4808      	ldr	r0, [pc, #32]	; (8005b88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005b68:	f7ff fda5 	bl	80056b6 <USBD_GetString>
 8005b6c:	e004      	b.n	8005b78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	4904      	ldr	r1, [pc, #16]	; (8005b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005b72:	4805      	ldr	r0, [pc, #20]	; (8005b88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005b74:	f7ff fd9f 	bl	80056b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005b78:	4b02      	ldr	r3, [pc, #8]	; (8005b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000be0 	.word	0x20000be0
 8005b88:	08007104 	.word	0x08007104

08005b8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005b92:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <Get_SerialNum+0x44>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005b98:	4b0e      	ldr	r3, [pc, #56]	; (8005bd4 <Get_SerialNum+0x48>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <Get_SerialNum+0x4c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4413      	add	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005bb2:	2208      	movs	r2, #8
 8005bb4:	4909      	ldr	r1, [pc, #36]	; (8005bdc <Get_SerialNum+0x50>)
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 f814 	bl	8005be4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	4908      	ldr	r1, [pc, #32]	; (8005be0 <Get_SerialNum+0x54>)
 8005bc0:	68b8      	ldr	r0, [r7, #8]
 8005bc2:	f000 f80f 	bl	8005be4 <IntToUnicode>
  }
}
 8005bc6:	bf00      	nop
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	1ffff7e8 	.word	0x1ffff7e8
 8005bd4:	1ffff7ec 	.word	0x1ffff7ec
 8005bd8:	1ffff7f0 	.word	0x1ffff7f0
 8005bdc:	20000162 	.word	0x20000162
 8005be0:	20000172 	.word	0x20000172

08005be4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	75fb      	strb	r3, [r7, #23]
 8005bfa:	e027      	b.n	8005c4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	0f1b      	lsrs	r3, r3, #28
 8005c00:	2b09      	cmp	r3, #9
 8005c02:	d80b      	bhi.n	8005c1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	0f1b      	lsrs	r3, r3, #28
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	4619      	mov	r1, r3
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	440b      	add	r3, r1
 8005c14:	3230      	adds	r2, #48	; 0x30
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	e00a      	b.n	8005c32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	0f1b      	lsrs	r3, r3, #28
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	4619      	mov	r1, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	440b      	add	r3, r1
 8005c2c:	3237      	adds	r2, #55	; 0x37
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	4413      	add	r3, r2
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	75fb      	strb	r3, [r7, #23]
 8005c4c:	7dfa      	ldrb	r2, [r7, #23]
 8005c4e:	79fb      	ldrb	r3, [r7, #7]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d3d3      	bcc.n	8005bfc <IntToUnicode+0x18>
  }
}
 8005c54:	bf00      	nop
 8005c56:	371c      	adds	r7, #28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bc80      	pop	{r7}
 8005c5c:	4770      	bx	lr
	...

08005c60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a0d      	ldr	r2, [pc, #52]	; (8005ca4 <HAL_PCD_MspInit+0x44>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d113      	bne.n	8005c9a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005c72:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <HAL_PCD_MspInit+0x48>)
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	4a0c      	ldr	r2, [pc, #48]	; (8005ca8 <HAL_PCD_MspInit+0x48>)
 8005c78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c7c:	61d3      	str	r3, [r2, #28]
 8005c7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <HAL_PCD_MspInit+0x48>)
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	2014      	movs	r0, #20
 8005c90:	f7fb fa0d 	bl	80010ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005c94:	2014      	movs	r0, #20
 8005c96:	f7fb fa26 	bl	80010e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005c9a:	bf00      	nop
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40005c00 	.word	0x40005c00
 8005ca8:	40021000 	.word	0x40021000

08005cac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	f7fe fdd4 	bl	8004870 <USBD_LL_SetupStage>
}
 8005cc8:	bf00      	nop
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8005ce2:	78fb      	ldrb	r3, [r7, #3]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	015b      	lsls	r3, r3, #5
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	f7fe fe07 	bl	8004906 <USBD_LL_DataOutStage>
}
 8005cf8:	bf00      	nop
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8005d12:	78fb      	ldrb	r3, [r7, #3]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	015b      	lsls	r3, r3, #5
 8005d18:	4413      	add	r3, r2
 8005d1a:	333c      	adds	r3, #60	; 0x3c
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	4619      	mov	r1, r3
 8005d22:	f7fe fe61 	bl	80049e8 <USBD_LL_DataInStage>
}
 8005d26:	bf00      	nop
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fe ff71 	bl	8004c24 <USBD_LL_SOF>
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005d52:	2301      	movs	r3, #1
 8005d54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d001      	beq.n	8005d62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005d5e:	f7fa fc19 	bl	8000594 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005d68:	7bfa      	ldrb	r2, [r7, #15]
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fe ff21 	bl	8004bb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fe feda 	bl	8004b32 <USBD_LL_Reset>
}
 8005d7e:	bf00      	nop
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fe ff1b 	bl	8004bd2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005da4:	4b04      	ldr	r3, [pc, #16]	; (8005db8 <HAL_PCD_SuspendCallback+0x30>)
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	4a03      	ldr	r2, [pc, #12]	; (8005db8 <HAL_PCD_SuspendCallback+0x30>)
 8005daa:	f043 0306 	orr.w	r3, r3, #6
 8005dae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005db0:	bf00      	nop
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	e000ed00 	.word	0xe000ed00

08005dbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe ff15 	bl	8004bfa <USBD_LL_Resume>
}
 8005dd0:	bf00      	nop
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8005de0:	4a28      	ldr	r2, [pc, #160]	; (8005e84 <USBD_LL_Init+0xac>)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a26      	ldr	r2, [pc, #152]	; (8005e84 <USBD_LL_Init+0xac>)
 8005dec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8005df0:	4b24      	ldr	r3, [pc, #144]	; (8005e84 <USBD_LL_Init+0xac>)
 8005df2:	4a25      	ldr	r2, [pc, #148]	; (8005e88 <USBD_LL_Init+0xb0>)
 8005df4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005df6:	4b23      	ldr	r3, [pc, #140]	; (8005e84 <USBD_LL_Init+0xac>)
 8005df8:	2208      	movs	r2, #8
 8005dfa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005dfc:	4b21      	ldr	r3, [pc, #132]	; (8005e84 <USBD_LL_Init+0xac>)
 8005dfe:	2202      	movs	r2, #2
 8005e00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005e02:	4b20      	ldr	r3, [pc, #128]	; (8005e84 <USBD_LL_Init+0xac>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005e08:	4b1e      	ldr	r3, [pc, #120]	; (8005e84 <USBD_LL_Init+0xac>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005e0e:	4b1d      	ldr	r3, [pc, #116]	; (8005e84 <USBD_LL_Init+0xac>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005e14:	481b      	ldr	r0, [pc, #108]	; (8005e84 <USBD_LL_Init+0xac>)
 8005e16:	f7fb fb2c 	bl	8001472 <HAL_PCD_Init>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8005e20:	f7fa fbb8 	bl	8000594 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005e2a:	2318      	movs	r3, #24
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2100      	movs	r1, #0
 8005e30:	f7fc f9c4 	bl	80021bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005e3a:	2358      	movs	r3, #88	; 0x58
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2180      	movs	r1, #128	; 0x80
 8005e40:	f7fc f9bc 	bl	80021bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005e4a:	23c0      	movs	r3, #192	; 0xc0
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2181      	movs	r1, #129	; 0x81
 8005e50:	f7fc f9b4 	bl	80021bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005e5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2101      	movs	r1, #1
 8005e62:	f7fc f9ab 	bl	80021bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e70:	2200      	movs	r2, #0
 8005e72:	2182      	movs	r1, #130	; 0x82
 8005e74:	f7fc f9a2 	bl	80021bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000de0 	.word	0x20000de0
 8005e88:	40005c00 	.word	0x40005c00

08005e8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fb fbc6 	bl	8001634 <HAL_PCD_Start>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 f948 	bl	8006144 <USBD_Get_USB_Status>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005eb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	4608      	mov	r0, r1
 8005ecc:	4611      	mov	r1, r2
 8005ece:	461a      	mov	r2, r3
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	70fb      	strb	r3, [r7, #3]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70bb      	strb	r3, [r7, #2]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005eea:	78bb      	ldrb	r3, [r7, #2]
 8005eec:	883a      	ldrh	r2, [r7, #0]
 8005eee:	78f9      	ldrb	r1, [r7, #3]
 8005ef0:	f7fb fcf9 	bl	80018e6 <HAL_PCD_EP_Open>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 f922 	bl	8006144 <USBD_Get_USB_Status>
 8005f00:	4603      	mov	r3, r0
 8005f02:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8005f04:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	460b      	mov	r3, r1
 8005f18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f28:	78fa      	ldrb	r2, [r7, #3]
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fb fd3a 	bl	80019a6 <HAL_PCD_EP_Close>
 8005f32:	4603      	mov	r3, r0
 8005f34:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 f903 	bl	8006144 <USBD_Get_USB_Status>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005f42:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	4611      	mov	r1, r2
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fb fde4 	bl	8001b38 <HAL_PCD_EP_SetStall>
 8005f70:	4603      	mov	r3, r0
 8005f72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 f8e4 	bl	8006144 <USBD_Get_USB_Status>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	460b      	mov	r3, r1
 8005f94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fa4:	78fa      	ldrb	r2, [r7, #3]
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fb fe1f 	bl	8001bec <HAL_PCD_EP_ClrStall>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 f8c5 	bl	8006144 <USBD_Get_USB_Status>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8005fbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fda:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	da08      	bge.n	8005ff6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	015b      	lsls	r3, r3, #5
 8005fee:	4413      	add	r3, r2
 8005ff0:	332a      	adds	r3, #42	; 0x2a
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	e008      	b.n	8006008 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	015b      	lsls	r3, r3, #5
 8006000:	4413      	add	r3, r2
 8006002:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006006:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	bc80      	pop	{r7}
 8006010:	4770      	bx	lr

08006012 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	460b      	mov	r3, r1
 800601c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800602c:	78fa      	ldrb	r2, [r7, #3]
 800602e:	4611      	mov	r1, r2
 8006030:	4618      	mov	r0, r3
 8006032:	f7fb fc33 	bl	800189c <HAL_PCD_SetAddress>
 8006036:	4603      	mov	r3, r0
 8006038:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	4618      	mov	r0, r3
 800603e:	f000 f881 	bl	8006144 <USBD_Get_USB_Status>
 8006042:	4603      	mov	r3, r0
 8006044:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006046:	7bbb      	ldrb	r3, [r7, #14]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	461a      	mov	r2, r3
 800605c:	460b      	mov	r3, r1
 800605e:	72fb      	strb	r3, [r7, #11]
 8006060:	4613      	mov	r3, r2
 8006062:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006072:	893b      	ldrh	r3, [r7, #8]
 8006074:	7af9      	ldrb	r1, [r7, #11]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	f7fb fd25 	bl	8001ac6 <HAL_PCD_EP_Transmit>
 800607c:	4603      	mov	r3, r0
 800607e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006080:	7dfb      	ldrb	r3, [r7, #23]
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f85e 	bl	8006144 <USBD_Get_USB_Status>
 8006088:	4603      	mov	r3, r0
 800608a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800608c:	7dbb      	ldrb	r3, [r7, #22]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b086      	sub	sp, #24
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	461a      	mov	r2, r3
 80060a2:	460b      	mov	r3, r1
 80060a4:	72fb      	strb	r3, [r7, #11]
 80060a6:	4613      	mov	r3, r2
 80060a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80060b8:	893b      	ldrh	r3, [r7, #8]
 80060ba:	7af9      	ldrb	r1, [r7, #11]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	f7fb fcb4 	bl	8001a2a <HAL_PCD_EP_Receive>
 80060c2:	4603      	mov	r3, r0
 80060c4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f83b 	bl	8006144 <USBD_Get_USB_Status>
 80060ce:	4603      	mov	r3, r0
 80060d0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80060d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060ee:	78fa      	ldrb	r2, [r7, #3]
 80060f0:	4611      	mov	r1, r2
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fb fcd3 	bl	8001a9e <HAL_PCD_EP_GetRxCount>
 80060f8:	4603      	mov	r3, r0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800610c:	4b02      	ldr	r3, [pc, #8]	; (8006118 <USBD_static_malloc+0x14>)
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr
 8006118:	20000204 	.word	0x20000204

0800611c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]

}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	bc80      	pop	{r7}
 800612c:	4770      	bx	lr

0800612e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	460b      	mov	r3, r1
 8006138:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr

08006144 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	4603      	mov	r3, r0
 800614c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006152:	79fb      	ldrb	r3, [r7, #7]
 8006154:	2b03      	cmp	r3, #3
 8006156:	d817      	bhi.n	8006188 <USBD_Get_USB_Status+0x44>
 8006158:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <USBD_Get_USB_Status+0x1c>)
 800615a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615e:	bf00      	nop
 8006160:	08006171 	.word	0x08006171
 8006164:	08006177 	.word	0x08006177
 8006168:	0800617d 	.word	0x0800617d
 800616c:	08006183 	.word	0x08006183
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	73fb      	strb	r3, [r7, #15]
    break;
 8006174:	e00b      	b.n	800618e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006176:	2302      	movs	r3, #2
 8006178:	73fb      	strb	r3, [r7, #15]
    break;
 800617a:	e008      	b.n	800618e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800617c:	2301      	movs	r3, #1
 800617e:	73fb      	strb	r3, [r7, #15]
    break;
 8006180:	e005      	b.n	800618e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006182:	2302      	movs	r3, #2
 8006184:	73fb      	strb	r3, [r7, #15]
    break;
 8006186:	e002      	b.n	800618e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006188:	2302      	movs	r3, #2
 800618a:	73fb      	strb	r3, [r7, #15]
    break;
 800618c:	bf00      	nop
  }
  return usb_status;
 800618e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	bc80      	pop	{r7}
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop

0800619c <__errno>:
 800619c:	4b01      	ldr	r3, [pc, #4]	; (80061a4 <__errno+0x8>)
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	2000017c 	.word	0x2000017c

080061a8 <__libc_init_array>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	2500      	movs	r5, #0
 80061ac:	4e0c      	ldr	r6, [pc, #48]	; (80061e0 <__libc_init_array+0x38>)
 80061ae:	4c0d      	ldr	r4, [pc, #52]	; (80061e4 <__libc_init_array+0x3c>)
 80061b0:	1ba4      	subs	r4, r4, r6
 80061b2:	10a4      	asrs	r4, r4, #2
 80061b4:	42a5      	cmp	r5, r4
 80061b6:	d109      	bne.n	80061cc <__libc_init_array+0x24>
 80061b8:	f000 ff5a 	bl	8007070 <_init>
 80061bc:	2500      	movs	r5, #0
 80061be:	4e0a      	ldr	r6, [pc, #40]	; (80061e8 <__libc_init_array+0x40>)
 80061c0:	4c0a      	ldr	r4, [pc, #40]	; (80061ec <__libc_init_array+0x44>)
 80061c2:	1ba4      	subs	r4, r4, r6
 80061c4:	10a4      	asrs	r4, r4, #2
 80061c6:	42a5      	cmp	r5, r4
 80061c8:	d105      	bne.n	80061d6 <__libc_init_array+0x2e>
 80061ca:	bd70      	pop	{r4, r5, r6, pc}
 80061cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061d0:	4798      	blx	r3
 80061d2:	3501      	adds	r5, #1
 80061d4:	e7ee      	b.n	80061b4 <__libc_init_array+0xc>
 80061d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061da:	4798      	blx	r3
 80061dc:	3501      	adds	r5, #1
 80061de:	e7f2      	b.n	80061c6 <__libc_init_array+0x1e>
 80061e0:	080071c4 	.word	0x080071c4
 80061e4:	080071c4 	.word	0x080071c4
 80061e8:	080071c4 	.word	0x080071c4
 80061ec:	080071c8 	.word	0x080071c8

080061f0 <memset>:
 80061f0:	4603      	mov	r3, r0
 80061f2:	4402      	add	r2, r0
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d100      	bne.n	80061fa <memset+0xa>
 80061f8:	4770      	bx	lr
 80061fa:	f803 1b01 	strb.w	r1, [r3], #1
 80061fe:	e7f9      	b.n	80061f4 <memset+0x4>

08006200 <iprintf>:
 8006200:	b40f      	push	{r0, r1, r2, r3}
 8006202:	4b0a      	ldr	r3, [pc, #40]	; (800622c <iprintf+0x2c>)
 8006204:	b513      	push	{r0, r1, r4, lr}
 8006206:	681c      	ldr	r4, [r3, #0]
 8006208:	b124      	cbz	r4, 8006214 <iprintf+0x14>
 800620a:	69a3      	ldr	r3, [r4, #24]
 800620c:	b913      	cbnz	r3, 8006214 <iprintf+0x14>
 800620e:	4620      	mov	r0, r4
 8006210:	f000 f862 	bl	80062d8 <__sinit>
 8006214:	ab05      	add	r3, sp, #20
 8006216:	9a04      	ldr	r2, [sp, #16]
 8006218:	68a1      	ldr	r1, [r4, #8]
 800621a:	4620      	mov	r0, r4
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	f000 f967 	bl	80064f0 <_vfiprintf_r>
 8006222:	b002      	add	sp, #8
 8006224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006228:	b004      	add	sp, #16
 800622a:	4770      	bx	lr
 800622c:	2000017c 	.word	0x2000017c

08006230 <putchar>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4b08      	ldr	r3, [pc, #32]	; (8006254 <putchar+0x24>)
 8006234:	4605      	mov	r5, r0
 8006236:	681c      	ldr	r4, [r3, #0]
 8006238:	b124      	cbz	r4, 8006244 <putchar+0x14>
 800623a:	69a3      	ldr	r3, [r4, #24]
 800623c:	b913      	cbnz	r3, 8006244 <putchar+0x14>
 800623e:	4620      	mov	r0, r4
 8006240:	f000 f84a 	bl	80062d8 <__sinit>
 8006244:	68a2      	ldr	r2, [r4, #8]
 8006246:	4629      	mov	r1, r5
 8006248:	4620      	mov	r0, r4
 800624a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800624e:	f000 bbed 	b.w	8006a2c <_putc_r>
 8006252:	bf00      	nop
 8006254:	2000017c 	.word	0x2000017c

08006258 <std>:
 8006258:	2300      	movs	r3, #0
 800625a:	b510      	push	{r4, lr}
 800625c:	4604      	mov	r4, r0
 800625e:	e9c0 3300 	strd	r3, r3, [r0]
 8006262:	6083      	str	r3, [r0, #8]
 8006264:	8181      	strh	r1, [r0, #12]
 8006266:	6643      	str	r3, [r0, #100]	; 0x64
 8006268:	81c2      	strh	r2, [r0, #14]
 800626a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800626e:	6183      	str	r3, [r0, #24]
 8006270:	4619      	mov	r1, r3
 8006272:	2208      	movs	r2, #8
 8006274:	305c      	adds	r0, #92	; 0x5c
 8006276:	f7ff ffbb 	bl	80061f0 <memset>
 800627a:	4b05      	ldr	r3, [pc, #20]	; (8006290 <std+0x38>)
 800627c:	6224      	str	r4, [r4, #32]
 800627e:	6263      	str	r3, [r4, #36]	; 0x24
 8006280:	4b04      	ldr	r3, [pc, #16]	; (8006294 <std+0x3c>)
 8006282:	62a3      	str	r3, [r4, #40]	; 0x28
 8006284:	4b04      	ldr	r3, [pc, #16]	; (8006298 <std+0x40>)
 8006286:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006288:	4b04      	ldr	r3, [pc, #16]	; (800629c <std+0x44>)
 800628a:	6323      	str	r3, [r4, #48]	; 0x30
 800628c:	bd10      	pop	{r4, pc}
 800628e:	bf00      	nop
 8006290:	08006ab9 	.word	0x08006ab9
 8006294:	08006adb 	.word	0x08006adb
 8006298:	08006b13 	.word	0x08006b13
 800629c:	08006b37 	.word	0x08006b37

080062a0 <_cleanup_r>:
 80062a0:	4901      	ldr	r1, [pc, #4]	; (80062a8 <_cleanup_r+0x8>)
 80062a2:	f000 b885 	b.w	80063b0 <_fwalk_reent>
 80062a6:	bf00      	nop
 80062a8:	08006e11 	.word	0x08006e11

080062ac <__sfmoreglue>:
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	2568      	movs	r5, #104	; 0x68
 80062b0:	1e4a      	subs	r2, r1, #1
 80062b2:	4355      	muls	r5, r2
 80062b4:	460e      	mov	r6, r1
 80062b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80062ba:	f000 f897 	bl	80063ec <_malloc_r>
 80062be:	4604      	mov	r4, r0
 80062c0:	b140      	cbz	r0, 80062d4 <__sfmoreglue+0x28>
 80062c2:	2100      	movs	r1, #0
 80062c4:	e9c0 1600 	strd	r1, r6, [r0]
 80062c8:	300c      	adds	r0, #12
 80062ca:	60a0      	str	r0, [r4, #8]
 80062cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062d0:	f7ff ff8e 	bl	80061f0 <memset>
 80062d4:	4620      	mov	r0, r4
 80062d6:	bd70      	pop	{r4, r5, r6, pc}

080062d8 <__sinit>:
 80062d8:	6983      	ldr	r3, [r0, #24]
 80062da:	b510      	push	{r4, lr}
 80062dc:	4604      	mov	r4, r0
 80062de:	bb33      	cbnz	r3, 800632e <__sinit+0x56>
 80062e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80062e4:	6503      	str	r3, [r0, #80]	; 0x50
 80062e6:	4b12      	ldr	r3, [pc, #72]	; (8006330 <__sinit+0x58>)
 80062e8:	4a12      	ldr	r2, [pc, #72]	; (8006334 <__sinit+0x5c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6282      	str	r2, [r0, #40]	; 0x28
 80062ee:	4298      	cmp	r0, r3
 80062f0:	bf04      	itt	eq
 80062f2:	2301      	moveq	r3, #1
 80062f4:	6183      	streq	r3, [r0, #24]
 80062f6:	f000 f81f 	bl	8006338 <__sfp>
 80062fa:	6060      	str	r0, [r4, #4]
 80062fc:	4620      	mov	r0, r4
 80062fe:	f000 f81b 	bl	8006338 <__sfp>
 8006302:	60a0      	str	r0, [r4, #8]
 8006304:	4620      	mov	r0, r4
 8006306:	f000 f817 	bl	8006338 <__sfp>
 800630a:	2200      	movs	r2, #0
 800630c:	60e0      	str	r0, [r4, #12]
 800630e:	2104      	movs	r1, #4
 8006310:	6860      	ldr	r0, [r4, #4]
 8006312:	f7ff ffa1 	bl	8006258 <std>
 8006316:	2201      	movs	r2, #1
 8006318:	2109      	movs	r1, #9
 800631a:	68a0      	ldr	r0, [r4, #8]
 800631c:	f7ff ff9c 	bl	8006258 <std>
 8006320:	2202      	movs	r2, #2
 8006322:	2112      	movs	r1, #18
 8006324:	68e0      	ldr	r0, [r4, #12]
 8006326:	f7ff ff97 	bl	8006258 <std>
 800632a:	2301      	movs	r3, #1
 800632c:	61a3      	str	r3, [r4, #24]
 800632e:	bd10      	pop	{r4, pc}
 8006330:	0800712c 	.word	0x0800712c
 8006334:	080062a1 	.word	0x080062a1

08006338 <__sfp>:
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633a:	4b1b      	ldr	r3, [pc, #108]	; (80063a8 <__sfp+0x70>)
 800633c:	4607      	mov	r7, r0
 800633e:	681e      	ldr	r6, [r3, #0]
 8006340:	69b3      	ldr	r3, [r6, #24]
 8006342:	b913      	cbnz	r3, 800634a <__sfp+0x12>
 8006344:	4630      	mov	r0, r6
 8006346:	f7ff ffc7 	bl	80062d8 <__sinit>
 800634a:	3648      	adds	r6, #72	; 0x48
 800634c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006350:	3b01      	subs	r3, #1
 8006352:	d503      	bpl.n	800635c <__sfp+0x24>
 8006354:	6833      	ldr	r3, [r6, #0]
 8006356:	b133      	cbz	r3, 8006366 <__sfp+0x2e>
 8006358:	6836      	ldr	r6, [r6, #0]
 800635a:	e7f7      	b.n	800634c <__sfp+0x14>
 800635c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006360:	b16d      	cbz	r5, 800637e <__sfp+0x46>
 8006362:	3468      	adds	r4, #104	; 0x68
 8006364:	e7f4      	b.n	8006350 <__sfp+0x18>
 8006366:	2104      	movs	r1, #4
 8006368:	4638      	mov	r0, r7
 800636a:	f7ff ff9f 	bl	80062ac <__sfmoreglue>
 800636e:	6030      	str	r0, [r6, #0]
 8006370:	2800      	cmp	r0, #0
 8006372:	d1f1      	bne.n	8006358 <__sfp+0x20>
 8006374:	230c      	movs	r3, #12
 8006376:	4604      	mov	r4, r0
 8006378:	603b      	str	r3, [r7, #0]
 800637a:	4620      	mov	r0, r4
 800637c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800637e:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <__sfp+0x74>)
 8006380:	6665      	str	r5, [r4, #100]	; 0x64
 8006382:	e9c4 5500 	strd	r5, r5, [r4]
 8006386:	60a5      	str	r5, [r4, #8]
 8006388:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800638c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006390:	2208      	movs	r2, #8
 8006392:	4629      	mov	r1, r5
 8006394:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006398:	f7ff ff2a 	bl	80061f0 <memset>
 800639c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80063a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80063a4:	e7e9      	b.n	800637a <__sfp+0x42>
 80063a6:	bf00      	nop
 80063a8:	0800712c 	.word	0x0800712c
 80063ac:	ffff0001 	.word	0xffff0001

080063b0 <_fwalk_reent>:
 80063b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063b4:	4680      	mov	r8, r0
 80063b6:	4689      	mov	r9, r1
 80063b8:	2600      	movs	r6, #0
 80063ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063be:	b914      	cbnz	r4, 80063c6 <_fwalk_reent+0x16>
 80063c0:	4630      	mov	r0, r6
 80063c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80063ca:	3f01      	subs	r7, #1
 80063cc:	d501      	bpl.n	80063d2 <_fwalk_reent+0x22>
 80063ce:	6824      	ldr	r4, [r4, #0]
 80063d0:	e7f5      	b.n	80063be <_fwalk_reent+0xe>
 80063d2:	89ab      	ldrh	r3, [r5, #12]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d907      	bls.n	80063e8 <_fwalk_reent+0x38>
 80063d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063dc:	3301      	adds	r3, #1
 80063de:	d003      	beq.n	80063e8 <_fwalk_reent+0x38>
 80063e0:	4629      	mov	r1, r5
 80063e2:	4640      	mov	r0, r8
 80063e4:	47c8      	blx	r9
 80063e6:	4306      	orrs	r6, r0
 80063e8:	3568      	adds	r5, #104	; 0x68
 80063ea:	e7ee      	b.n	80063ca <_fwalk_reent+0x1a>

080063ec <_malloc_r>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	1ccd      	adds	r5, r1, #3
 80063f0:	f025 0503 	bic.w	r5, r5, #3
 80063f4:	3508      	adds	r5, #8
 80063f6:	2d0c      	cmp	r5, #12
 80063f8:	bf38      	it	cc
 80063fa:	250c      	movcc	r5, #12
 80063fc:	2d00      	cmp	r5, #0
 80063fe:	4606      	mov	r6, r0
 8006400:	db01      	blt.n	8006406 <_malloc_r+0x1a>
 8006402:	42a9      	cmp	r1, r5
 8006404:	d903      	bls.n	800640e <_malloc_r+0x22>
 8006406:	230c      	movs	r3, #12
 8006408:	6033      	str	r3, [r6, #0]
 800640a:	2000      	movs	r0, #0
 800640c:	bd70      	pop	{r4, r5, r6, pc}
 800640e:	f000 fdad 	bl	8006f6c <__malloc_lock>
 8006412:	4a21      	ldr	r2, [pc, #132]	; (8006498 <_malloc_r+0xac>)
 8006414:	6814      	ldr	r4, [r2, #0]
 8006416:	4621      	mov	r1, r4
 8006418:	b991      	cbnz	r1, 8006440 <_malloc_r+0x54>
 800641a:	4c20      	ldr	r4, [pc, #128]	; (800649c <_malloc_r+0xb0>)
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	b91b      	cbnz	r3, 8006428 <_malloc_r+0x3c>
 8006420:	4630      	mov	r0, r6
 8006422:	f000 fb39 	bl	8006a98 <_sbrk_r>
 8006426:	6020      	str	r0, [r4, #0]
 8006428:	4629      	mov	r1, r5
 800642a:	4630      	mov	r0, r6
 800642c:	f000 fb34 	bl	8006a98 <_sbrk_r>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d124      	bne.n	800647e <_malloc_r+0x92>
 8006434:	230c      	movs	r3, #12
 8006436:	4630      	mov	r0, r6
 8006438:	6033      	str	r3, [r6, #0]
 800643a:	f000 fd98 	bl	8006f6e <__malloc_unlock>
 800643e:	e7e4      	b.n	800640a <_malloc_r+0x1e>
 8006440:	680b      	ldr	r3, [r1, #0]
 8006442:	1b5b      	subs	r3, r3, r5
 8006444:	d418      	bmi.n	8006478 <_malloc_r+0x8c>
 8006446:	2b0b      	cmp	r3, #11
 8006448:	d90f      	bls.n	800646a <_malloc_r+0x7e>
 800644a:	600b      	str	r3, [r1, #0]
 800644c:	18cc      	adds	r4, r1, r3
 800644e:	50cd      	str	r5, [r1, r3]
 8006450:	4630      	mov	r0, r6
 8006452:	f000 fd8c 	bl	8006f6e <__malloc_unlock>
 8006456:	f104 000b 	add.w	r0, r4, #11
 800645a:	1d23      	adds	r3, r4, #4
 800645c:	f020 0007 	bic.w	r0, r0, #7
 8006460:	1ac3      	subs	r3, r0, r3
 8006462:	d0d3      	beq.n	800640c <_malloc_r+0x20>
 8006464:	425a      	negs	r2, r3
 8006466:	50e2      	str	r2, [r4, r3]
 8006468:	e7d0      	b.n	800640c <_malloc_r+0x20>
 800646a:	684b      	ldr	r3, [r1, #4]
 800646c:	428c      	cmp	r4, r1
 800646e:	bf16      	itet	ne
 8006470:	6063      	strne	r3, [r4, #4]
 8006472:	6013      	streq	r3, [r2, #0]
 8006474:	460c      	movne	r4, r1
 8006476:	e7eb      	b.n	8006450 <_malloc_r+0x64>
 8006478:	460c      	mov	r4, r1
 800647a:	6849      	ldr	r1, [r1, #4]
 800647c:	e7cc      	b.n	8006418 <_malloc_r+0x2c>
 800647e:	1cc4      	adds	r4, r0, #3
 8006480:	f024 0403 	bic.w	r4, r4, #3
 8006484:	42a0      	cmp	r0, r4
 8006486:	d005      	beq.n	8006494 <_malloc_r+0xa8>
 8006488:	1a21      	subs	r1, r4, r0
 800648a:	4630      	mov	r0, r6
 800648c:	f000 fb04 	bl	8006a98 <_sbrk_r>
 8006490:	3001      	adds	r0, #1
 8006492:	d0cf      	beq.n	8006434 <_malloc_r+0x48>
 8006494:	6025      	str	r5, [r4, #0]
 8006496:	e7db      	b.n	8006450 <_malloc_r+0x64>
 8006498:	20000424 	.word	0x20000424
 800649c:	20000428 	.word	0x20000428

080064a0 <__sfputc_r>:
 80064a0:	6893      	ldr	r3, [r2, #8]
 80064a2:	b410      	push	{r4}
 80064a4:	3b01      	subs	r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	6093      	str	r3, [r2, #8]
 80064aa:	da07      	bge.n	80064bc <__sfputc_r+0x1c>
 80064ac:	6994      	ldr	r4, [r2, #24]
 80064ae:	42a3      	cmp	r3, r4
 80064b0:	db01      	blt.n	80064b6 <__sfputc_r+0x16>
 80064b2:	290a      	cmp	r1, #10
 80064b4:	d102      	bne.n	80064bc <__sfputc_r+0x1c>
 80064b6:	bc10      	pop	{r4}
 80064b8:	f000 bb42 	b.w	8006b40 <__swbuf_r>
 80064bc:	6813      	ldr	r3, [r2, #0]
 80064be:	1c58      	adds	r0, r3, #1
 80064c0:	6010      	str	r0, [r2, #0]
 80064c2:	7019      	strb	r1, [r3, #0]
 80064c4:	4608      	mov	r0, r1
 80064c6:	bc10      	pop	{r4}
 80064c8:	4770      	bx	lr

080064ca <__sfputs_r>:
 80064ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064cc:	4606      	mov	r6, r0
 80064ce:	460f      	mov	r7, r1
 80064d0:	4614      	mov	r4, r2
 80064d2:	18d5      	adds	r5, r2, r3
 80064d4:	42ac      	cmp	r4, r5
 80064d6:	d101      	bne.n	80064dc <__sfputs_r+0x12>
 80064d8:	2000      	movs	r0, #0
 80064da:	e007      	b.n	80064ec <__sfputs_r+0x22>
 80064dc:	463a      	mov	r2, r7
 80064de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064e2:	4630      	mov	r0, r6
 80064e4:	f7ff ffdc 	bl	80064a0 <__sfputc_r>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d1f3      	bne.n	80064d4 <__sfputs_r+0xa>
 80064ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064f0 <_vfiprintf_r>:
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	460c      	mov	r4, r1
 80064f6:	b09d      	sub	sp, #116	; 0x74
 80064f8:	4617      	mov	r7, r2
 80064fa:	461d      	mov	r5, r3
 80064fc:	4606      	mov	r6, r0
 80064fe:	b118      	cbz	r0, 8006508 <_vfiprintf_r+0x18>
 8006500:	6983      	ldr	r3, [r0, #24]
 8006502:	b90b      	cbnz	r3, 8006508 <_vfiprintf_r+0x18>
 8006504:	f7ff fee8 	bl	80062d8 <__sinit>
 8006508:	4b7c      	ldr	r3, [pc, #496]	; (80066fc <_vfiprintf_r+0x20c>)
 800650a:	429c      	cmp	r4, r3
 800650c:	d158      	bne.n	80065c0 <_vfiprintf_r+0xd0>
 800650e:	6874      	ldr	r4, [r6, #4]
 8006510:	89a3      	ldrh	r3, [r4, #12]
 8006512:	0718      	lsls	r0, r3, #28
 8006514:	d55e      	bpl.n	80065d4 <_vfiprintf_r+0xe4>
 8006516:	6923      	ldr	r3, [r4, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d05b      	beq.n	80065d4 <_vfiprintf_r+0xe4>
 800651c:	2300      	movs	r3, #0
 800651e:	9309      	str	r3, [sp, #36]	; 0x24
 8006520:	2320      	movs	r3, #32
 8006522:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006526:	2330      	movs	r3, #48	; 0x30
 8006528:	f04f 0b01 	mov.w	fp, #1
 800652c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006530:	9503      	str	r5, [sp, #12]
 8006532:	46b8      	mov	r8, r7
 8006534:	4645      	mov	r5, r8
 8006536:	f815 3b01 	ldrb.w	r3, [r5], #1
 800653a:	b10b      	cbz	r3, 8006540 <_vfiprintf_r+0x50>
 800653c:	2b25      	cmp	r3, #37	; 0x25
 800653e:	d154      	bne.n	80065ea <_vfiprintf_r+0xfa>
 8006540:	ebb8 0a07 	subs.w	sl, r8, r7
 8006544:	d00b      	beq.n	800655e <_vfiprintf_r+0x6e>
 8006546:	4653      	mov	r3, sl
 8006548:	463a      	mov	r2, r7
 800654a:	4621      	mov	r1, r4
 800654c:	4630      	mov	r0, r6
 800654e:	f7ff ffbc 	bl	80064ca <__sfputs_r>
 8006552:	3001      	adds	r0, #1
 8006554:	f000 80c2 	beq.w	80066dc <_vfiprintf_r+0x1ec>
 8006558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800655a:	4453      	add	r3, sl
 800655c:	9309      	str	r3, [sp, #36]	; 0x24
 800655e:	f898 3000 	ldrb.w	r3, [r8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 80ba 	beq.w	80066dc <_vfiprintf_r+0x1ec>
 8006568:	2300      	movs	r3, #0
 800656a:	f04f 32ff 	mov.w	r2, #4294967295
 800656e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006572:	9304      	str	r3, [sp, #16]
 8006574:	9307      	str	r3, [sp, #28]
 8006576:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800657a:	931a      	str	r3, [sp, #104]	; 0x68
 800657c:	46a8      	mov	r8, r5
 800657e:	2205      	movs	r2, #5
 8006580:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006584:	485e      	ldr	r0, [pc, #376]	; (8006700 <_vfiprintf_r+0x210>)
 8006586:	f000 fce3 	bl	8006f50 <memchr>
 800658a:	9b04      	ldr	r3, [sp, #16]
 800658c:	bb78      	cbnz	r0, 80065ee <_vfiprintf_r+0xfe>
 800658e:	06d9      	lsls	r1, r3, #27
 8006590:	bf44      	itt	mi
 8006592:	2220      	movmi	r2, #32
 8006594:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006598:	071a      	lsls	r2, r3, #28
 800659a:	bf44      	itt	mi
 800659c:	222b      	movmi	r2, #43	; 0x2b
 800659e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065a2:	782a      	ldrb	r2, [r5, #0]
 80065a4:	2a2a      	cmp	r2, #42	; 0x2a
 80065a6:	d02a      	beq.n	80065fe <_vfiprintf_r+0x10e>
 80065a8:	46a8      	mov	r8, r5
 80065aa:	2000      	movs	r0, #0
 80065ac:	250a      	movs	r5, #10
 80065ae:	9a07      	ldr	r2, [sp, #28]
 80065b0:	4641      	mov	r1, r8
 80065b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065b6:	3b30      	subs	r3, #48	; 0x30
 80065b8:	2b09      	cmp	r3, #9
 80065ba:	d969      	bls.n	8006690 <_vfiprintf_r+0x1a0>
 80065bc:	b360      	cbz	r0, 8006618 <_vfiprintf_r+0x128>
 80065be:	e024      	b.n	800660a <_vfiprintf_r+0x11a>
 80065c0:	4b50      	ldr	r3, [pc, #320]	; (8006704 <_vfiprintf_r+0x214>)
 80065c2:	429c      	cmp	r4, r3
 80065c4:	d101      	bne.n	80065ca <_vfiprintf_r+0xda>
 80065c6:	68b4      	ldr	r4, [r6, #8]
 80065c8:	e7a2      	b.n	8006510 <_vfiprintf_r+0x20>
 80065ca:	4b4f      	ldr	r3, [pc, #316]	; (8006708 <_vfiprintf_r+0x218>)
 80065cc:	429c      	cmp	r4, r3
 80065ce:	bf08      	it	eq
 80065d0:	68f4      	ldreq	r4, [r6, #12]
 80065d2:	e79d      	b.n	8006510 <_vfiprintf_r+0x20>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4630      	mov	r0, r6
 80065d8:	f000 fb16 	bl	8006c08 <__swsetup_r>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d09d      	beq.n	800651c <_vfiprintf_r+0x2c>
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295
 80065e4:	b01d      	add	sp, #116	; 0x74
 80065e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ea:	46a8      	mov	r8, r5
 80065ec:	e7a2      	b.n	8006534 <_vfiprintf_r+0x44>
 80065ee:	4a44      	ldr	r2, [pc, #272]	; (8006700 <_vfiprintf_r+0x210>)
 80065f0:	4645      	mov	r5, r8
 80065f2:	1a80      	subs	r0, r0, r2
 80065f4:	fa0b f000 	lsl.w	r0, fp, r0
 80065f8:	4318      	orrs	r0, r3
 80065fa:	9004      	str	r0, [sp, #16]
 80065fc:	e7be      	b.n	800657c <_vfiprintf_r+0x8c>
 80065fe:	9a03      	ldr	r2, [sp, #12]
 8006600:	1d11      	adds	r1, r2, #4
 8006602:	6812      	ldr	r2, [r2, #0]
 8006604:	9103      	str	r1, [sp, #12]
 8006606:	2a00      	cmp	r2, #0
 8006608:	db01      	blt.n	800660e <_vfiprintf_r+0x11e>
 800660a:	9207      	str	r2, [sp, #28]
 800660c:	e004      	b.n	8006618 <_vfiprintf_r+0x128>
 800660e:	4252      	negs	r2, r2
 8006610:	f043 0302 	orr.w	r3, r3, #2
 8006614:	9207      	str	r2, [sp, #28]
 8006616:	9304      	str	r3, [sp, #16]
 8006618:	f898 3000 	ldrb.w	r3, [r8]
 800661c:	2b2e      	cmp	r3, #46	; 0x2e
 800661e:	d10e      	bne.n	800663e <_vfiprintf_r+0x14e>
 8006620:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006624:	2b2a      	cmp	r3, #42	; 0x2a
 8006626:	d138      	bne.n	800669a <_vfiprintf_r+0x1aa>
 8006628:	9b03      	ldr	r3, [sp, #12]
 800662a:	f108 0802 	add.w	r8, r8, #2
 800662e:	1d1a      	adds	r2, r3, #4
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	9203      	str	r2, [sp, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	bfb8      	it	lt
 8006638:	f04f 33ff 	movlt.w	r3, #4294967295
 800663c:	9305      	str	r3, [sp, #20]
 800663e:	4d33      	ldr	r5, [pc, #204]	; (800670c <_vfiprintf_r+0x21c>)
 8006640:	2203      	movs	r2, #3
 8006642:	f898 1000 	ldrb.w	r1, [r8]
 8006646:	4628      	mov	r0, r5
 8006648:	f000 fc82 	bl	8006f50 <memchr>
 800664c:	b140      	cbz	r0, 8006660 <_vfiprintf_r+0x170>
 800664e:	2340      	movs	r3, #64	; 0x40
 8006650:	1b40      	subs	r0, r0, r5
 8006652:	fa03 f000 	lsl.w	r0, r3, r0
 8006656:	9b04      	ldr	r3, [sp, #16]
 8006658:	f108 0801 	add.w	r8, r8, #1
 800665c:	4303      	orrs	r3, r0
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	f898 1000 	ldrb.w	r1, [r8]
 8006664:	2206      	movs	r2, #6
 8006666:	482a      	ldr	r0, [pc, #168]	; (8006710 <_vfiprintf_r+0x220>)
 8006668:	f108 0701 	add.w	r7, r8, #1
 800666c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006670:	f000 fc6e 	bl	8006f50 <memchr>
 8006674:	2800      	cmp	r0, #0
 8006676:	d037      	beq.n	80066e8 <_vfiprintf_r+0x1f8>
 8006678:	4b26      	ldr	r3, [pc, #152]	; (8006714 <_vfiprintf_r+0x224>)
 800667a:	bb1b      	cbnz	r3, 80066c4 <_vfiprintf_r+0x1d4>
 800667c:	9b03      	ldr	r3, [sp, #12]
 800667e:	3307      	adds	r3, #7
 8006680:	f023 0307 	bic.w	r3, r3, #7
 8006684:	3308      	adds	r3, #8
 8006686:	9303      	str	r3, [sp, #12]
 8006688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800668a:	444b      	add	r3, r9
 800668c:	9309      	str	r3, [sp, #36]	; 0x24
 800668e:	e750      	b.n	8006532 <_vfiprintf_r+0x42>
 8006690:	fb05 3202 	mla	r2, r5, r2, r3
 8006694:	2001      	movs	r0, #1
 8006696:	4688      	mov	r8, r1
 8006698:	e78a      	b.n	80065b0 <_vfiprintf_r+0xc0>
 800669a:	2300      	movs	r3, #0
 800669c:	250a      	movs	r5, #10
 800669e:	4619      	mov	r1, r3
 80066a0:	f108 0801 	add.w	r8, r8, #1
 80066a4:	9305      	str	r3, [sp, #20]
 80066a6:	4640      	mov	r0, r8
 80066a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066ac:	3a30      	subs	r2, #48	; 0x30
 80066ae:	2a09      	cmp	r2, #9
 80066b0:	d903      	bls.n	80066ba <_vfiprintf_r+0x1ca>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0c3      	beq.n	800663e <_vfiprintf_r+0x14e>
 80066b6:	9105      	str	r1, [sp, #20]
 80066b8:	e7c1      	b.n	800663e <_vfiprintf_r+0x14e>
 80066ba:	fb05 2101 	mla	r1, r5, r1, r2
 80066be:	2301      	movs	r3, #1
 80066c0:	4680      	mov	r8, r0
 80066c2:	e7f0      	b.n	80066a6 <_vfiprintf_r+0x1b6>
 80066c4:	ab03      	add	r3, sp, #12
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	4622      	mov	r2, r4
 80066ca:	4b13      	ldr	r3, [pc, #76]	; (8006718 <_vfiprintf_r+0x228>)
 80066cc:	a904      	add	r1, sp, #16
 80066ce:	4630      	mov	r0, r6
 80066d0:	f3af 8000 	nop.w
 80066d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066d8:	4681      	mov	r9, r0
 80066da:	d1d5      	bne.n	8006688 <_vfiprintf_r+0x198>
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	065b      	lsls	r3, r3, #25
 80066e0:	f53f af7e 	bmi.w	80065e0 <_vfiprintf_r+0xf0>
 80066e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066e6:	e77d      	b.n	80065e4 <_vfiprintf_r+0xf4>
 80066e8:	ab03      	add	r3, sp, #12
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	4622      	mov	r2, r4
 80066ee:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <_vfiprintf_r+0x228>)
 80066f0:	a904      	add	r1, sp, #16
 80066f2:	4630      	mov	r0, r6
 80066f4:	f000 f888 	bl	8006808 <_printf_i>
 80066f8:	e7ec      	b.n	80066d4 <_vfiprintf_r+0x1e4>
 80066fa:	bf00      	nop
 80066fc:	08007150 	.word	0x08007150
 8006700:	08007190 	.word	0x08007190
 8006704:	08007170 	.word	0x08007170
 8006708:	08007130 	.word	0x08007130
 800670c:	08007196 	.word	0x08007196
 8006710:	0800719a 	.word	0x0800719a
 8006714:	00000000 	.word	0x00000000
 8006718:	080064cb 	.word	0x080064cb

0800671c <_printf_common>:
 800671c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006720:	4691      	mov	r9, r2
 8006722:	461f      	mov	r7, r3
 8006724:	688a      	ldr	r2, [r1, #8]
 8006726:	690b      	ldr	r3, [r1, #16]
 8006728:	4606      	mov	r6, r0
 800672a:	4293      	cmp	r3, r2
 800672c:	bfb8      	it	lt
 800672e:	4613      	movlt	r3, r2
 8006730:	f8c9 3000 	str.w	r3, [r9]
 8006734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006738:	460c      	mov	r4, r1
 800673a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800673e:	b112      	cbz	r2, 8006746 <_printf_common+0x2a>
 8006740:	3301      	adds	r3, #1
 8006742:	f8c9 3000 	str.w	r3, [r9]
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	0699      	lsls	r1, r3, #26
 800674a:	bf42      	ittt	mi
 800674c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006750:	3302      	addmi	r3, #2
 8006752:	f8c9 3000 	strmi.w	r3, [r9]
 8006756:	6825      	ldr	r5, [r4, #0]
 8006758:	f015 0506 	ands.w	r5, r5, #6
 800675c:	d107      	bne.n	800676e <_printf_common+0x52>
 800675e:	f104 0a19 	add.w	sl, r4, #25
 8006762:	68e3      	ldr	r3, [r4, #12]
 8006764:	f8d9 2000 	ldr.w	r2, [r9]
 8006768:	1a9b      	subs	r3, r3, r2
 800676a:	42ab      	cmp	r3, r5
 800676c:	dc29      	bgt.n	80067c2 <_printf_common+0xa6>
 800676e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006772:	6822      	ldr	r2, [r4, #0]
 8006774:	3300      	adds	r3, #0
 8006776:	bf18      	it	ne
 8006778:	2301      	movne	r3, #1
 800677a:	0692      	lsls	r2, r2, #26
 800677c:	d42e      	bmi.n	80067dc <_printf_common+0xc0>
 800677e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006782:	4639      	mov	r1, r7
 8006784:	4630      	mov	r0, r6
 8006786:	47c0      	blx	r8
 8006788:	3001      	adds	r0, #1
 800678a:	d021      	beq.n	80067d0 <_printf_common+0xb4>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	68e5      	ldr	r5, [r4, #12]
 8006790:	f003 0306 	and.w	r3, r3, #6
 8006794:	2b04      	cmp	r3, #4
 8006796:	bf18      	it	ne
 8006798:	2500      	movne	r5, #0
 800679a:	f8d9 2000 	ldr.w	r2, [r9]
 800679e:	f04f 0900 	mov.w	r9, #0
 80067a2:	bf08      	it	eq
 80067a4:	1aad      	subeq	r5, r5, r2
 80067a6:	68a3      	ldr	r3, [r4, #8]
 80067a8:	6922      	ldr	r2, [r4, #16]
 80067aa:	bf08      	it	eq
 80067ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067b0:	4293      	cmp	r3, r2
 80067b2:	bfc4      	itt	gt
 80067b4:	1a9b      	subgt	r3, r3, r2
 80067b6:	18ed      	addgt	r5, r5, r3
 80067b8:	341a      	adds	r4, #26
 80067ba:	454d      	cmp	r5, r9
 80067bc:	d11a      	bne.n	80067f4 <_printf_common+0xd8>
 80067be:	2000      	movs	r0, #0
 80067c0:	e008      	b.n	80067d4 <_printf_common+0xb8>
 80067c2:	2301      	movs	r3, #1
 80067c4:	4652      	mov	r2, sl
 80067c6:	4639      	mov	r1, r7
 80067c8:	4630      	mov	r0, r6
 80067ca:	47c0      	blx	r8
 80067cc:	3001      	adds	r0, #1
 80067ce:	d103      	bne.n	80067d8 <_printf_common+0xbc>
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d8:	3501      	adds	r5, #1
 80067da:	e7c2      	b.n	8006762 <_printf_common+0x46>
 80067dc:	2030      	movs	r0, #48	; 0x30
 80067de:	18e1      	adds	r1, r4, r3
 80067e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067ea:	4422      	add	r2, r4
 80067ec:	3302      	adds	r3, #2
 80067ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067f2:	e7c4      	b.n	800677e <_printf_common+0x62>
 80067f4:	2301      	movs	r3, #1
 80067f6:	4622      	mov	r2, r4
 80067f8:	4639      	mov	r1, r7
 80067fa:	4630      	mov	r0, r6
 80067fc:	47c0      	blx	r8
 80067fe:	3001      	adds	r0, #1
 8006800:	d0e6      	beq.n	80067d0 <_printf_common+0xb4>
 8006802:	f109 0901 	add.w	r9, r9, #1
 8006806:	e7d8      	b.n	80067ba <_printf_common+0x9e>

08006808 <_printf_i>:
 8006808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800680c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006810:	460c      	mov	r4, r1
 8006812:	7e09      	ldrb	r1, [r1, #24]
 8006814:	b085      	sub	sp, #20
 8006816:	296e      	cmp	r1, #110	; 0x6e
 8006818:	4617      	mov	r7, r2
 800681a:	4606      	mov	r6, r0
 800681c:	4698      	mov	r8, r3
 800681e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006820:	f000 80b3 	beq.w	800698a <_printf_i+0x182>
 8006824:	d822      	bhi.n	800686c <_printf_i+0x64>
 8006826:	2963      	cmp	r1, #99	; 0x63
 8006828:	d036      	beq.n	8006898 <_printf_i+0x90>
 800682a:	d80a      	bhi.n	8006842 <_printf_i+0x3a>
 800682c:	2900      	cmp	r1, #0
 800682e:	f000 80b9 	beq.w	80069a4 <_printf_i+0x19c>
 8006832:	2958      	cmp	r1, #88	; 0x58
 8006834:	f000 8083 	beq.w	800693e <_printf_i+0x136>
 8006838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800683c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006840:	e032      	b.n	80068a8 <_printf_i+0xa0>
 8006842:	2964      	cmp	r1, #100	; 0x64
 8006844:	d001      	beq.n	800684a <_printf_i+0x42>
 8006846:	2969      	cmp	r1, #105	; 0x69
 8006848:	d1f6      	bne.n	8006838 <_printf_i+0x30>
 800684a:	6820      	ldr	r0, [r4, #0]
 800684c:	6813      	ldr	r3, [r2, #0]
 800684e:	0605      	lsls	r5, r0, #24
 8006850:	f103 0104 	add.w	r1, r3, #4
 8006854:	d52a      	bpl.n	80068ac <_printf_i+0xa4>
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6011      	str	r1, [r2, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	da03      	bge.n	8006866 <_printf_i+0x5e>
 800685e:	222d      	movs	r2, #45	; 0x2d
 8006860:	425b      	negs	r3, r3
 8006862:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006866:	486f      	ldr	r0, [pc, #444]	; (8006a24 <_printf_i+0x21c>)
 8006868:	220a      	movs	r2, #10
 800686a:	e039      	b.n	80068e0 <_printf_i+0xd8>
 800686c:	2973      	cmp	r1, #115	; 0x73
 800686e:	f000 809d 	beq.w	80069ac <_printf_i+0x1a4>
 8006872:	d808      	bhi.n	8006886 <_printf_i+0x7e>
 8006874:	296f      	cmp	r1, #111	; 0x6f
 8006876:	d020      	beq.n	80068ba <_printf_i+0xb2>
 8006878:	2970      	cmp	r1, #112	; 0x70
 800687a:	d1dd      	bne.n	8006838 <_printf_i+0x30>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	f043 0320 	orr.w	r3, r3, #32
 8006882:	6023      	str	r3, [r4, #0]
 8006884:	e003      	b.n	800688e <_printf_i+0x86>
 8006886:	2975      	cmp	r1, #117	; 0x75
 8006888:	d017      	beq.n	80068ba <_printf_i+0xb2>
 800688a:	2978      	cmp	r1, #120	; 0x78
 800688c:	d1d4      	bne.n	8006838 <_printf_i+0x30>
 800688e:	2378      	movs	r3, #120	; 0x78
 8006890:	4865      	ldr	r0, [pc, #404]	; (8006a28 <_printf_i+0x220>)
 8006892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006896:	e055      	b.n	8006944 <_printf_i+0x13c>
 8006898:	6813      	ldr	r3, [r2, #0]
 800689a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800689e:	1d19      	adds	r1, r3, #4
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6011      	str	r1, [r2, #0]
 80068a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068a8:	2301      	movs	r3, #1
 80068aa:	e08c      	b.n	80069c6 <_printf_i+0x1be>
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068b2:	6011      	str	r1, [r2, #0]
 80068b4:	bf18      	it	ne
 80068b6:	b21b      	sxthne	r3, r3
 80068b8:	e7cf      	b.n	800685a <_printf_i+0x52>
 80068ba:	6813      	ldr	r3, [r2, #0]
 80068bc:	6825      	ldr	r5, [r4, #0]
 80068be:	1d18      	adds	r0, r3, #4
 80068c0:	6010      	str	r0, [r2, #0]
 80068c2:	0628      	lsls	r0, r5, #24
 80068c4:	d501      	bpl.n	80068ca <_printf_i+0xc2>
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	e002      	b.n	80068d0 <_printf_i+0xc8>
 80068ca:	0668      	lsls	r0, r5, #25
 80068cc:	d5fb      	bpl.n	80068c6 <_printf_i+0xbe>
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	296f      	cmp	r1, #111	; 0x6f
 80068d2:	bf14      	ite	ne
 80068d4:	220a      	movne	r2, #10
 80068d6:	2208      	moveq	r2, #8
 80068d8:	4852      	ldr	r0, [pc, #328]	; (8006a24 <_printf_i+0x21c>)
 80068da:	2100      	movs	r1, #0
 80068dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068e0:	6865      	ldr	r5, [r4, #4]
 80068e2:	2d00      	cmp	r5, #0
 80068e4:	60a5      	str	r5, [r4, #8]
 80068e6:	f2c0 8095 	blt.w	8006a14 <_printf_i+0x20c>
 80068ea:	6821      	ldr	r1, [r4, #0]
 80068ec:	f021 0104 	bic.w	r1, r1, #4
 80068f0:	6021      	str	r1, [r4, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d13d      	bne.n	8006972 <_printf_i+0x16a>
 80068f6:	2d00      	cmp	r5, #0
 80068f8:	f040 808e 	bne.w	8006a18 <_printf_i+0x210>
 80068fc:	4665      	mov	r5, ip
 80068fe:	2a08      	cmp	r2, #8
 8006900:	d10b      	bne.n	800691a <_printf_i+0x112>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	07db      	lsls	r3, r3, #31
 8006906:	d508      	bpl.n	800691a <_printf_i+0x112>
 8006908:	6923      	ldr	r3, [r4, #16]
 800690a:	6862      	ldr	r2, [r4, #4]
 800690c:	429a      	cmp	r2, r3
 800690e:	bfde      	ittt	le
 8006910:	2330      	movle	r3, #48	; 0x30
 8006912:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006916:	f105 35ff 	addle.w	r5, r5, #4294967295
 800691a:	ebac 0305 	sub.w	r3, ip, r5
 800691e:	6123      	str	r3, [r4, #16]
 8006920:	f8cd 8000 	str.w	r8, [sp]
 8006924:	463b      	mov	r3, r7
 8006926:	aa03      	add	r2, sp, #12
 8006928:	4621      	mov	r1, r4
 800692a:	4630      	mov	r0, r6
 800692c:	f7ff fef6 	bl	800671c <_printf_common>
 8006930:	3001      	adds	r0, #1
 8006932:	d14d      	bne.n	80069d0 <_printf_i+0x1c8>
 8006934:	f04f 30ff 	mov.w	r0, #4294967295
 8006938:	b005      	add	sp, #20
 800693a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800693e:	4839      	ldr	r0, [pc, #228]	; (8006a24 <_printf_i+0x21c>)
 8006940:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006944:	6813      	ldr	r3, [r2, #0]
 8006946:	6821      	ldr	r1, [r4, #0]
 8006948:	1d1d      	adds	r5, r3, #4
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6015      	str	r5, [r2, #0]
 800694e:	060a      	lsls	r2, r1, #24
 8006950:	d50b      	bpl.n	800696a <_printf_i+0x162>
 8006952:	07ca      	lsls	r2, r1, #31
 8006954:	bf44      	itt	mi
 8006956:	f041 0120 	orrmi.w	r1, r1, #32
 800695a:	6021      	strmi	r1, [r4, #0]
 800695c:	b91b      	cbnz	r3, 8006966 <_printf_i+0x15e>
 800695e:	6822      	ldr	r2, [r4, #0]
 8006960:	f022 0220 	bic.w	r2, r2, #32
 8006964:	6022      	str	r2, [r4, #0]
 8006966:	2210      	movs	r2, #16
 8006968:	e7b7      	b.n	80068da <_printf_i+0xd2>
 800696a:	064d      	lsls	r5, r1, #25
 800696c:	bf48      	it	mi
 800696e:	b29b      	uxthmi	r3, r3
 8006970:	e7ef      	b.n	8006952 <_printf_i+0x14a>
 8006972:	4665      	mov	r5, ip
 8006974:	fbb3 f1f2 	udiv	r1, r3, r2
 8006978:	fb02 3311 	mls	r3, r2, r1, r3
 800697c:	5cc3      	ldrb	r3, [r0, r3]
 800697e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006982:	460b      	mov	r3, r1
 8006984:	2900      	cmp	r1, #0
 8006986:	d1f5      	bne.n	8006974 <_printf_i+0x16c>
 8006988:	e7b9      	b.n	80068fe <_printf_i+0xf6>
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	6825      	ldr	r5, [r4, #0]
 800698e:	1d18      	adds	r0, r3, #4
 8006990:	6961      	ldr	r1, [r4, #20]
 8006992:	6010      	str	r0, [r2, #0]
 8006994:	0628      	lsls	r0, r5, #24
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	d501      	bpl.n	800699e <_printf_i+0x196>
 800699a:	6019      	str	r1, [r3, #0]
 800699c:	e002      	b.n	80069a4 <_printf_i+0x19c>
 800699e:	066a      	lsls	r2, r5, #25
 80069a0:	d5fb      	bpl.n	800699a <_printf_i+0x192>
 80069a2:	8019      	strh	r1, [r3, #0]
 80069a4:	2300      	movs	r3, #0
 80069a6:	4665      	mov	r5, ip
 80069a8:	6123      	str	r3, [r4, #16]
 80069aa:	e7b9      	b.n	8006920 <_printf_i+0x118>
 80069ac:	6813      	ldr	r3, [r2, #0]
 80069ae:	1d19      	adds	r1, r3, #4
 80069b0:	6011      	str	r1, [r2, #0]
 80069b2:	681d      	ldr	r5, [r3, #0]
 80069b4:	6862      	ldr	r2, [r4, #4]
 80069b6:	2100      	movs	r1, #0
 80069b8:	4628      	mov	r0, r5
 80069ba:	f000 fac9 	bl	8006f50 <memchr>
 80069be:	b108      	cbz	r0, 80069c4 <_printf_i+0x1bc>
 80069c0:	1b40      	subs	r0, r0, r5
 80069c2:	6060      	str	r0, [r4, #4]
 80069c4:	6863      	ldr	r3, [r4, #4]
 80069c6:	6123      	str	r3, [r4, #16]
 80069c8:	2300      	movs	r3, #0
 80069ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ce:	e7a7      	b.n	8006920 <_printf_i+0x118>
 80069d0:	6923      	ldr	r3, [r4, #16]
 80069d2:	462a      	mov	r2, r5
 80069d4:	4639      	mov	r1, r7
 80069d6:	4630      	mov	r0, r6
 80069d8:	47c0      	blx	r8
 80069da:	3001      	adds	r0, #1
 80069dc:	d0aa      	beq.n	8006934 <_printf_i+0x12c>
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	079b      	lsls	r3, r3, #30
 80069e2:	d413      	bmi.n	8006a0c <_printf_i+0x204>
 80069e4:	68e0      	ldr	r0, [r4, #12]
 80069e6:	9b03      	ldr	r3, [sp, #12]
 80069e8:	4298      	cmp	r0, r3
 80069ea:	bfb8      	it	lt
 80069ec:	4618      	movlt	r0, r3
 80069ee:	e7a3      	b.n	8006938 <_printf_i+0x130>
 80069f0:	2301      	movs	r3, #1
 80069f2:	464a      	mov	r2, r9
 80069f4:	4639      	mov	r1, r7
 80069f6:	4630      	mov	r0, r6
 80069f8:	47c0      	blx	r8
 80069fa:	3001      	adds	r0, #1
 80069fc:	d09a      	beq.n	8006934 <_printf_i+0x12c>
 80069fe:	3501      	adds	r5, #1
 8006a00:	68e3      	ldr	r3, [r4, #12]
 8006a02:	9a03      	ldr	r2, [sp, #12]
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	42ab      	cmp	r3, r5
 8006a08:	dcf2      	bgt.n	80069f0 <_printf_i+0x1e8>
 8006a0a:	e7eb      	b.n	80069e4 <_printf_i+0x1dc>
 8006a0c:	2500      	movs	r5, #0
 8006a0e:	f104 0919 	add.w	r9, r4, #25
 8006a12:	e7f5      	b.n	8006a00 <_printf_i+0x1f8>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1ac      	bne.n	8006972 <_printf_i+0x16a>
 8006a18:	7803      	ldrb	r3, [r0, #0]
 8006a1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a22:	e76c      	b.n	80068fe <_printf_i+0xf6>
 8006a24:	080071a1 	.word	0x080071a1
 8006a28:	080071b2 	.word	0x080071b2

08006a2c <_putc_r>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	460d      	mov	r5, r1
 8006a30:	4614      	mov	r4, r2
 8006a32:	4606      	mov	r6, r0
 8006a34:	b118      	cbz	r0, 8006a3e <_putc_r+0x12>
 8006a36:	6983      	ldr	r3, [r0, #24]
 8006a38:	b90b      	cbnz	r3, 8006a3e <_putc_r+0x12>
 8006a3a:	f7ff fc4d 	bl	80062d8 <__sinit>
 8006a3e:	4b13      	ldr	r3, [pc, #76]	; (8006a8c <_putc_r+0x60>)
 8006a40:	429c      	cmp	r4, r3
 8006a42:	d112      	bne.n	8006a6a <_putc_r+0x3e>
 8006a44:	6874      	ldr	r4, [r6, #4]
 8006a46:	68a3      	ldr	r3, [r4, #8]
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	60a3      	str	r3, [r4, #8]
 8006a4e:	da16      	bge.n	8006a7e <_putc_r+0x52>
 8006a50:	69a2      	ldr	r2, [r4, #24]
 8006a52:	4293      	cmp	r3, r2
 8006a54:	db02      	blt.n	8006a5c <_putc_r+0x30>
 8006a56:	b2eb      	uxtb	r3, r5
 8006a58:	2b0a      	cmp	r3, #10
 8006a5a:	d110      	bne.n	8006a7e <_putc_r+0x52>
 8006a5c:	4622      	mov	r2, r4
 8006a5e:	4629      	mov	r1, r5
 8006a60:	4630      	mov	r0, r6
 8006a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a66:	f000 b86b 	b.w	8006b40 <__swbuf_r>
 8006a6a:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <_putc_r+0x64>)
 8006a6c:	429c      	cmp	r4, r3
 8006a6e:	d101      	bne.n	8006a74 <_putc_r+0x48>
 8006a70:	68b4      	ldr	r4, [r6, #8]
 8006a72:	e7e8      	b.n	8006a46 <_putc_r+0x1a>
 8006a74:	4b07      	ldr	r3, [pc, #28]	; (8006a94 <_putc_r+0x68>)
 8006a76:	429c      	cmp	r4, r3
 8006a78:	bf08      	it	eq
 8006a7a:	68f4      	ldreq	r4, [r6, #12]
 8006a7c:	e7e3      	b.n	8006a46 <_putc_r+0x1a>
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	b2e8      	uxtb	r0, r5
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	6022      	str	r2, [r4, #0]
 8006a86:	701d      	strb	r5, [r3, #0]
 8006a88:	bd70      	pop	{r4, r5, r6, pc}
 8006a8a:	bf00      	nop
 8006a8c:	08007150 	.word	0x08007150
 8006a90:	08007170 	.word	0x08007170
 8006a94:	08007130 	.word	0x08007130

08006a98 <_sbrk_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	4c05      	ldr	r4, [pc, #20]	; (8006ab4 <_sbrk_r+0x1c>)
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	4608      	mov	r0, r1
 8006aa2:	6023      	str	r3, [r4, #0]
 8006aa4:	f7f9 ff3a 	bl	800091c <_sbrk>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d102      	bne.n	8006ab2 <_sbrk_r+0x1a>
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	b103      	cbz	r3, 8006ab2 <_sbrk_r+0x1a>
 8006ab0:	602b      	str	r3, [r5, #0]
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	2000104c 	.word	0x2000104c

08006ab8 <__sread>:
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	460c      	mov	r4, r1
 8006abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac0:	f000 faa2 	bl	8007008 <_read_r>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	bfab      	itete	ge
 8006ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006aca:	89a3      	ldrhlt	r3, [r4, #12]
 8006acc:	181b      	addge	r3, r3, r0
 8006ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ad2:	bfac      	ite	ge
 8006ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ad6:	81a3      	strhlt	r3, [r4, #12]
 8006ad8:	bd10      	pop	{r4, pc}

08006ada <__swrite>:
 8006ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ade:	461f      	mov	r7, r3
 8006ae0:	898b      	ldrh	r3, [r1, #12]
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	05db      	lsls	r3, r3, #23
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	4616      	mov	r6, r2
 8006aea:	d505      	bpl.n	8006af8 <__swrite+0x1e>
 8006aec:	2302      	movs	r3, #2
 8006aee:	2200      	movs	r2, #0
 8006af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af4:	f000 f9b6 	bl	8006e64 <_lseek_r>
 8006af8:	89a3      	ldrh	r3, [r4, #12]
 8006afa:	4632      	mov	r2, r6
 8006afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b00:	81a3      	strh	r3, [r4, #12]
 8006b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b06:	463b      	mov	r3, r7
 8006b08:	4628      	mov	r0, r5
 8006b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0e:	f000 b869 	b.w	8006be4 <_write_r>

08006b12 <__sseek>:
 8006b12:	b510      	push	{r4, lr}
 8006b14:	460c      	mov	r4, r1
 8006b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b1a:	f000 f9a3 	bl	8006e64 <_lseek_r>
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	bf15      	itete	ne
 8006b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b2e:	81a3      	strheq	r3, [r4, #12]
 8006b30:	bf18      	it	ne
 8006b32:	81a3      	strhne	r3, [r4, #12]
 8006b34:	bd10      	pop	{r4, pc}

08006b36 <__sclose>:
 8006b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b3a:	f000 b8d3 	b.w	8006ce4 <_close_r>
	...

08006b40 <__swbuf_r>:
 8006b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b42:	460e      	mov	r6, r1
 8006b44:	4614      	mov	r4, r2
 8006b46:	4605      	mov	r5, r0
 8006b48:	b118      	cbz	r0, 8006b52 <__swbuf_r+0x12>
 8006b4a:	6983      	ldr	r3, [r0, #24]
 8006b4c:	b90b      	cbnz	r3, 8006b52 <__swbuf_r+0x12>
 8006b4e:	f7ff fbc3 	bl	80062d8 <__sinit>
 8006b52:	4b21      	ldr	r3, [pc, #132]	; (8006bd8 <__swbuf_r+0x98>)
 8006b54:	429c      	cmp	r4, r3
 8006b56:	d12a      	bne.n	8006bae <__swbuf_r+0x6e>
 8006b58:	686c      	ldr	r4, [r5, #4]
 8006b5a:	69a3      	ldr	r3, [r4, #24]
 8006b5c:	60a3      	str	r3, [r4, #8]
 8006b5e:	89a3      	ldrh	r3, [r4, #12]
 8006b60:	071a      	lsls	r2, r3, #28
 8006b62:	d52e      	bpl.n	8006bc2 <__swbuf_r+0x82>
 8006b64:	6923      	ldr	r3, [r4, #16]
 8006b66:	b363      	cbz	r3, 8006bc2 <__swbuf_r+0x82>
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	6820      	ldr	r0, [r4, #0]
 8006b6c:	b2f6      	uxtb	r6, r6
 8006b6e:	1ac0      	subs	r0, r0, r3
 8006b70:	6963      	ldr	r3, [r4, #20]
 8006b72:	4637      	mov	r7, r6
 8006b74:	4283      	cmp	r3, r0
 8006b76:	dc04      	bgt.n	8006b82 <__swbuf_r+0x42>
 8006b78:	4621      	mov	r1, r4
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f000 f948 	bl	8006e10 <_fflush_r>
 8006b80:	bb28      	cbnz	r0, 8006bce <__swbuf_r+0x8e>
 8006b82:	68a3      	ldr	r3, [r4, #8]
 8006b84:	3001      	adds	r0, #1
 8006b86:	3b01      	subs	r3, #1
 8006b88:	60a3      	str	r3, [r4, #8]
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	6022      	str	r2, [r4, #0]
 8006b90:	701e      	strb	r6, [r3, #0]
 8006b92:	6963      	ldr	r3, [r4, #20]
 8006b94:	4283      	cmp	r3, r0
 8006b96:	d004      	beq.n	8006ba2 <__swbuf_r+0x62>
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	07db      	lsls	r3, r3, #31
 8006b9c:	d519      	bpl.n	8006bd2 <__swbuf_r+0x92>
 8006b9e:	2e0a      	cmp	r6, #10
 8006ba0:	d117      	bne.n	8006bd2 <__swbuf_r+0x92>
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f000 f933 	bl	8006e10 <_fflush_r>
 8006baa:	b190      	cbz	r0, 8006bd2 <__swbuf_r+0x92>
 8006bac:	e00f      	b.n	8006bce <__swbuf_r+0x8e>
 8006bae:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <__swbuf_r+0x9c>)
 8006bb0:	429c      	cmp	r4, r3
 8006bb2:	d101      	bne.n	8006bb8 <__swbuf_r+0x78>
 8006bb4:	68ac      	ldr	r4, [r5, #8]
 8006bb6:	e7d0      	b.n	8006b5a <__swbuf_r+0x1a>
 8006bb8:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <__swbuf_r+0xa0>)
 8006bba:	429c      	cmp	r4, r3
 8006bbc:	bf08      	it	eq
 8006bbe:	68ec      	ldreq	r4, [r5, #12]
 8006bc0:	e7cb      	b.n	8006b5a <__swbuf_r+0x1a>
 8006bc2:	4621      	mov	r1, r4
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	f000 f81f 	bl	8006c08 <__swsetup_r>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d0cc      	beq.n	8006b68 <__swbuf_r+0x28>
 8006bce:	f04f 37ff 	mov.w	r7, #4294967295
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	08007150 	.word	0x08007150
 8006bdc:	08007170 	.word	0x08007170
 8006be0:	08007130 	.word	0x08007130

08006be4 <_write_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4605      	mov	r5, r0
 8006be8:	4608      	mov	r0, r1
 8006bea:	4611      	mov	r1, r2
 8006bec:	2200      	movs	r2, #0
 8006bee:	4c05      	ldr	r4, [pc, #20]	; (8006c04 <_write_r+0x20>)
 8006bf0:	6022      	str	r2, [r4, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f7f9 fe45 	bl	8000882 <_write>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d102      	bne.n	8006c02 <_write_r+0x1e>
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	b103      	cbz	r3, 8006c02 <_write_r+0x1e>
 8006c00:	602b      	str	r3, [r5, #0]
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	2000104c 	.word	0x2000104c

08006c08 <__swsetup_r>:
 8006c08:	4b32      	ldr	r3, [pc, #200]	; (8006cd4 <__swsetup_r+0xcc>)
 8006c0a:	b570      	push	{r4, r5, r6, lr}
 8006c0c:	681d      	ldr	r5, [r3, #0]
 8006c0e:	4606      	mov	r6, r0
 8006c10:	460c      	mov	r4, r1
 8006c12:	b125      	cbz	r5, 8006c1e <__swsetup_r+0x16>
 8006c14:	69ab      	ldr	r3, [r5, #24]
 8006c16:	b913      	cbnz	r3, 8006c1e <__swsetup_r+0x16>
 8006c18:	4628      	mov	r0, r5
 8006c1a:	f7ff fb5d 	bl	80062d8 <__sinit>
 8006c1e:	4b2e      	ldr	r3, [pc, #184]	; (8006cd8 <__swsetup_r+0xd0>)
 8006c20:	429c      	cmp	r4, r3
 8006c22:	d10f      	bne.n	8006c44 <__swsetup_r+0x3c>
 8006c24:	686c      	ldr	r4, [r5, #4]
 8006c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	0715      	lsls	r5, r2, #28
 8006c2e:	d42c      	bmi.n	8006c8a <__swsetup_r+0x82>
 8006c30:	06d0      	lsls	r0, r2, #27
 8006c32:	d411      	bmi.n	8006c58 <__swsetup_r+0x50>
 8006c34:	2209      	movs	r2, #9
 8006c36:	6032      	str	r2, [r6, #0]
 8006c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c3c:	81a3      	strh	r3, [r4, #12]
 8006c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c42:	e03e      	b.n	8006cc2 <__swsetup_r+0xba>
 8006c44:	4b25      	ldr	r3, [pc, #148]	; (8006cdc <__swsetup_r+0xd4>)
 8006c46:	429c      	cmp	r4, r3
 8006c48:	d101      	bne.n	8006c4e <__swsetup_r+0x46>
 8006c4a:	68ac      	ldr	r4, [r5, #8]
 8006c4c:	e7eb      	b.n	8006c26 <__swsetup_r+0x1e>
 8006c4e:	4b24      	ldr	r3, [pc, #144]	; (8006ce0 <__swsetup_r+0xd8>)
 8006c50:	429c      	cmp	r4, r3
 8006c52:	bf08      	it	eq
 8006c54:	68ec      	ldreq	r4, [r5, #12]
 8006c56:	e7e6      	b.n	8006c26 <__swsetup_r+0x1e>
 8006c58:	0751      	lsls	r1, r2, #29
 8006c5a:	d512      	bpl.n	8006c82 <__swsetup_r+0x7a>
 8006c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c5e:	b141      	cbz	r1, 8006c72 <__swsetup_r+0x6a>
 8006c60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c64:	4299      	cmp	r1, r3
 8006c66:	d002      	beq.n	8006c6e <__swsetup_r+0x66>
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f000 f981 	bl	8006f70 <_free_r>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	6363      	str	r3, [r4, #52]	; 0x34
 8006c72:	89a3      	ldrh	r3, [r4, #12]
 8006c74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c78:	81a3      	strh	r3, [r4, #12]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	6063      	str	r3, [r4, #4]
 8006c7e:	6923      	ldr	r3, [r4, #16]
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	f043 0308 	orr.w	r3, r3, #8
 8006c88:	81a3      	strh	r3, [r4, #12]
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	b94b      	cbnz	r3, 8006ca2 <__swsetup_r+0x9a>
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c98:	d003      	beq.n	8006ca2 <__swsetup_r+0x9a>
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	f000 f917 	bl	8006ed0 <__smakebuf_r>
 8006ca2:	89a2      	ldrh	r2, [r4, #12]
 8006ca4:	f012 0301 	ands.w	r3, r2, #1
 8006ca8:	d00c      	beq.n	8006cc4 <__swsetup_r+0xbc>
 8006caa:	2300      	movs	r3, #0
 8006cac:	60a3      	str	r3, [r4, #8]
 8006cae:	6963      	ldr	r3, [r4, #20]
 8006cb0:	425b      	negs	r3, r3
 8006cb2:	61a3      	str	r3, [r4, #24]
 8006cb4:	6923      	ldr	r3, [r4, #16]
 8006cb6:	b953      	cbnz	r3, 8006cce <__swsetup_r+0xc6>
 8006cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cbc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006cc0:	d1ba      	bne.n	8006c38 <__swsetup_r+0x30>
 8006cc2:	bd70      	pop	{r4, r5, r6, pc}
 8006cc4:	0792      	lsls	r2, r2, #30
 8006cc6:	bf58      	it	pl
 8006cc8:	6963      	ldrpl	r3, [r4, #20]
 8006cca:	60a3      	str	r3, [r4, #8]
 8006ccc:	e7f2      	b.n	8006cb4 <__swsetup_r+0xac>
 8006cce:	2000      	movs	r0, #0
 8006cd0:	e7f7      	b.n	8006cc2 <__swsetup_r+0xba>
 8006cd2:	bf00      	nop
 8006cd4:	2000017c 	.word	0x2000017c
 8006cd8:	08007150 	.word	0x08007150
 8006cdc:	08007170 	.word	0x08007170
 8006ce0:	08007130 	.word	0x08007130

08006ce4 <_close_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4c05      	ldr	r4, [pc, #20]	; (8006d00 <_close_r+0x1c>)
 8006cea:	4605      	mov	r5, r0
 8006cec:	4608      	mov	r0, r1
 8006cee:	6023      	str	r3, [r4, #0]
 8006cf0:	f7f9 fde3 	bl	80008ba <_close>
 8006cf4:	1c43      	adds	r3, r0, #1
 8006cf6:	d102      	bne.n	8006cfe <_close_r+0x1a>
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	b103      	cbz	r3, 8006cfe <_close_r+0x1a>
 8006cfc:	602b      	str	r3, [r5, #0]
 8006cfe:	bd38      	pop	{r3, r4, r5, pc}
 8006d00:	2000104c 	.word	0x2000104c

08006d04 <__sflush_r>:
 8006d04:	898a      	ldrh	r2, [r1, #12]
 8006d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	0710      	lsls	r0, r2, #28
 8006d0e:	460c      	mov	r4, r1
 8006d10:	d458      	bmi.n	8006dc4 <__sflush_r+0xc0>
 8006d12:	684b      	ldr	r3, [r1, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	dc05      	bgt.n	8006d24 <__sflush_r+0x20>
 8006d18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	dc02      	bgt.n	8006d24 <__sflush_r+0x20>
 8006d1e:	2000      	movs	r0, #0
 8006d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d26:	2e00      	cmp	r6, #0
 8006d28:	d0f9      	beq.n	8006d1e <__sflush_r+0x1a>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d30:	682f      	ldr	r7, [r5, #0]
 8006d32:	6a21      	ldr	r1, [r4, #32]
 8006d34:	602b      	str	r3, [r5, #0]
 8006d36:	d032      	beq.n	8006d9e <__sflush_r+0x9a>
 8006d38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d3a:	89a3      	ldrh	r3, [r4, #12]
 8006d3c:	075a      	lsls	r2, r3, #29
 8006d3e:	d505      	bpl.n	8006d4c <__sflush_r+0x48>
 8006d40:	6863      	ldr	r3, [r4, #4]
 8006d42:	1ac0      	subs	r0, r0, r3
 8006d44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d46:	b10b      	cbz	r3, 8006d4c <__sflush_r+0x48>
 8006d48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d4a:	1ac0      	subs	r0, r0, r3
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4602      	mov	r2, r0
 8006d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d52:	6a21      	ldr	r1, [r4, #32]
 8006d54:	4628      	mov	r0, r5
 8006d56:	47b0      	blx	r6
 8006d58:	1c43      	adds	r3, r0, #1
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	d106      	bne.n	8006d6c <__sflush_r+0x68>
 8006d5e:	6829      	ldr	r1, [r5, #0]
 8006d60:	291d      	cmp	r1, #29
 8006d62:	d848      	bhi.n	8006df6 <__sflush_r+0xf2>
 8006d64:	4a29      	ldr	r2, [pc, #164]	; (8006e0c <__sflush_r+0x108>)
 8006d66:	40ca      	lsrs	r2, r1
 8006d68:	07d6      	lsls	r6, r2, #31
 8006d6a:	d544      	bpl.n	8006df6 <__sflush_r+0xf2>
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	6062      	str	r2, [r4, #4]
 8006d70:	6922      	ldr	r2, [r4, #16]
 8006d72:	04d9      	lsls	r1, r3, #19
 8006d74:	6022      	str	r2, [r4, #0]
 8006d76:	d504      	bpl.n	8006d82 <__sflush_r+0x7e>
 8006d78:	1c42      	adds	r2, r0, #1
 8006d7a:	d101      	bne.n	8006d80 <__sflush_r+0x7c>
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	b903      	cbnz	r3, 8006d82 <__sflush_r+0x7e>
 8006d80:	6560      	str	r0, [r4, #84]	; 0x54
 8006d82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d84:	602f      	str	r7, [r5, #0]
 8006d86:	2900      	cmp	r1, #0
 8006d88:	d0c9      	beq.n	8006d1e <__sflush_r+0x1a>
 8006d8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d8e:	4299      	cmp	r1, r3
 8006d90:	d002      	beq.n	8006d98 <__sflush_r+0x94>
 8006d92:	4628      	mov	r0, r5
 8006d94:	f000 f8ec 	bl	8006f70 <_free_r>
 8006d98:	2000      	movs	r0, #0
 8006d9a:	6360      	str	r0, [r4, #52]	; 0x34
 8006d9c:	e7c0      	b.n	8006d20 <__sflush_r+0x1c>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	4628      	mov	r0, r5
 8006da2:	47b0      	blx	r6
 8006da4:	1c41      	adds	r1, r0, #1
 8006da6:	d1c8      	bne.n	8006d3a <__sflush_r+0x36>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0c5      	beq.n	8006d3a <__sflush_r+0x36>
 8006dae:	2b1d      	cmp	r3, #29
 8006db0:	d001      	beq.n	8006db6 <__sflush_r+0xb2>
 8006db2:	2b16      	cmp	r3, #22
 8006db4:	d101      	bne.n	8006dba <__sflush_r+0xb6>
 8006db6:	602f      	str	r7, [r5, #0]
 8006db8:	e7b1      	b.n	8006d1e <__sflush_r+0x1a>
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc0:	81a3      	strh	r3, [r4, #12]
 8006dc2:	e7ad      	b.n	8006d20 <__sflush_r+0x1c>
 8006dc4:	690f      	ldr	r7, [r1, #16]
 8006dc6:	2f00      	cmp	r7, #0
 8006dc8:	d0a9      	beq.n	8006d1e <__sflush_r+0x1a>
 8006dca:	0793      	lsls	r3, r2, #30
 8006dcc:	bf18      	it	ne
 8006dce:	2300      	movne	r3, #0
 8006dd0:	680e      	ldr	r6, [r1, #0]
 8006dd2:	bf08      	it	eq
 8006dd4:	694b      	ldreq	r3, [r1, #20]
 8006dd6:	eba6 0807 	sub.w	r8, r6, r7
 8006dda:	600f      	str	r7, [r1, #0]
 8006ddc:	608b      	str	r3, [r1, #8]
 8006dde:	f1b8 0f00 	cmp.w	r8, #0
 8006de2:	dd9c      	ble.n	8006d1e <__sflush_r+0x1a>
 8006de4:	4643      	mov	r3, r8
 8006de6:	463a      	mov	r2, r7
 8006de8:	6a21      	ldr	r1, [r4, #32]
 8006dea:	4628      	mov	r0, r5
 8006dec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dee:	47b0      	blx	r6
 8006df0:	2800      	cmp	r0, #0
 8006df2:	dc06      	bgt.n	8006e02 <__sflush_r+0xfe>
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dfa:	81a3      	strh	r3, [r4, #12]
 8006dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006e00:	e78e      	b.n	8006d20 <__sflush_r+0x1c>
 8006e02:	4407      	add	r7, r0
 8006e04:	eba8 0800 	sub.w	r8, r8, r0
 8006e08:	e7e9      	b.n	8006dde <__sflush_r+0xda>
 8006e0a:	bf00      	nop
 8006e0c:	20400001 	.word	0x20400001

08006e10 <_fflush_r>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	690b      	ldr	r3, [r1, #16]
 8006e14:	4605      	mov	r5, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	b1db      	cbz	r3, 8006e52 <_fflush_r+0x42>
 8006e1a:	b118      	cbz	r0, 8006e24 <_fflush_r+0x14>
 8006e1c:	6983      	ldr	r3, [r0, #24]
 8006e1e:	b90b      	cbnz	r3, 8006e24 <_fflush_r+0x14>
 8006e20:	f7ff fa5a 	bl	80062d8 <__sinit>
 8006e24:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <_fflush_r+0x48>)
 8006e26:	429c      	cmp	r4, r3
 8006e28:	d109      	bne.n	8006e3e <_fflush_r+0x2e>
 8006e2a:	686c      	ldr	r4, [r5, #4]
 8006e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e30:	b17b      	cbz	r3, 8006e52 <_fflush_r+0x42>
 8006e32:	4621      	mov	r1, r4
 8006e34:	4628      	mov	r0, r5
 8006e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e3a:	f7ff bf63 	b.w	8006d04 <__sflush_r>
 8006e3e:	4b07      	ldr	r3, [pc, #28]	; (8006e5c <_fflush_r+0x4c>)
 8006e40:	429c      	cmp	r4, r3
 8006e42:	d101      	bne.n	8006e48 <_fflush_r+0x38>
 8006e44:	68ac      	ldr	r4, [r5, #8]
 8006e46:	e7f1      	b.n	8006e2c <_fflush_r+0x1c>
 8006e48:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <_fflush_r+0x50>)
 8006e4a:	429c      	cmp	r4, r3
 8006e4c:	bf08      	it	eq
 8006e4e:	68ec      	ldreq	r4, [r5, #12]
 8006e50:	e7ec      	b.n	8006e2c <_fflush_r+0x1c>
 8006e52:	2000      	movs	r0, #0
 8006e54:	bd38      	pop	{r3, r4, r5, pc}
 8006e56:	bf00      	nop
 8006e58:	08007150 	.word	0x08007150
 8006e5c:	08007170 	.word	0x08007170
 8006e60:	08007130 	.word	0x08007130

08006e64 <_lseek_r>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	4605      	mov	r5, r0
 8006e68:	4608      	mov	r0, r1
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4c05      	ldr	r4, [pc, #20]	; (8006e84 <_lseek_r+0x20>)
 8006e70:	6022      	str	r2, [r4, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	f7f9 fd45 	bl	8000902 <_lseek>
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	d102      	bne.n	8006e82 <_lseek_r+0x1e>
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	b103      	cbz	r3, 8006e82 <_lseek_r+0x1e>
 8006e80:	602b      	str	r3, [r5, #0]
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	2000104c 	.word	0x2000104c

08006e88 <__swhatbuf_r>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	460e      	mov	r6, r1
 8006e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e90:	b096      	sub	sp, #88	; 0x58
 8006e92:	2900      	cmp	r1, #0
 8006e94:	4614      	mov	r4, r2
 8006e96:	461d      	mov	r5, r3
 8006e98:	da07      	bge.n	8006eaa <__swhatbuf_r+0x22>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	602b      	str	r3, [r5, #0]
 8006e9e:	89b3      	ldrh	r3, [r6, #12]
 8006ea0:	061a      	lsls	r2, r3, #24
 8006ea2:	d410      	bmi.n	8006ec6 <__swhatbuf_r+0x3e>
 8006ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ea8:	e00e      	b.n	8006ec8 <__swhatbuf_r+0x40>
 8006eaa:	466a      	mov	r2, sp
 8006eac:	f000 f8be 	bl	800702c <_fstat_r>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	dbf2      	blt.n	8006e9a <__swhatbuf_r+0x12>
 8006eb4:	9a01      	ldr	r2, [sp, #4]
 8006eb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006eba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ebe:	425a      	negs	r2, r3
 8006ec0:	415a      	adcs	r2, r3
 8006ec2:	602a      	str	r2, [r5, #0]
 8006ec4:	e7ee      	b.n	8006ea4 <__swhatbuf_r+0x1c>
 8006ec6:	2340      	movs	r3, #64	; 0x40
 8006ec8:	2000      	movs	r0, #0
 8006eca:	6023      	str	r3, [r4, #0]
 8006ecc:	b016      	add	sp, #88	; 0x58
 8006ece:	bd70      	pop	{r4, r5, r6, pc}

08006ed0 <__smakebuf_r>:
 8006ed0:	898b      	ldrh	r3, [r1, #12]
 8006ed2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ed4:	079d      	lsls	r5, r3, #30
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	460c      	mov	r4, r1
 8006eda:	d507      	bpl.n	8006eec <__smakebuf_r+0x1c>
 8006edc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	6123      	str	r3, [r4, #16]
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	6163      	str	r3, [r4, #20]
 8006ee8:	b002      	add	sp, #8
 8006eea:	bd70      	pop	{r4, r5, r6, pc}
 8006eec:	ab01      	add	r3, sp, #4
 8006eee:	466a      	mov	r2, sp
 8006ef0:	f7ff ffca 	bl	8006e88 <__swhatbuf_r>
 8006ef4:	9900      	ldr	r1, [sp, #0]
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f7ff fa77 	bl	80063ec <_malloc_r>
 8006efe:	b948      	cbnz	r0, 8006f14 <__smakebuf_r+0x44>
 8006f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f04:	059a      	lsls	r2, r3, #22
 8006f06:	d4ef      	bmi.n	8006ee8 <__smakebuf_r+0x18>
 8006f08:	f023 0303 	bic.w	r3, r3, #3
 8006f0c:	f043 0302 	orr.w	r3, r3, #2
 8006f10:	81a3      	strh	r3, [r4, #12]
 8006f12:	e7e3      	b.n	8006edc <__smakebuf_r+0xc>
 8006f14:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <__smakebuf_r+0x7c>)
 8006f16:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f18:	89a3      	ldrh	r3, [r4, #12]
 8006f1a:	6020      	str	r0, [r4, #0]
 8006f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	9b00      	ldr	r3, [sp, #0]
 8006f24:	6120      	str	r0, [r4, #16]
 8006f26:	6163      	str	r3, [r4, #20]
 8006f28:	9b01      	ldr	r3, [sp, #4]
 8006f2a:	b15b      	cbz	r3, 8006f44 <__smakebuf_r+0x74>
 8006f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f30:	4630      	mov	r0, r6
 8006f32:	f000 f88d 	bl	8007050 <_isatty_r>
 8006f36:	b128      	cbz	r0, 8006f44 <__smakebuf_r+0x74>
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	f023 0303 	bic.w	r3, r3, #3
 8006f3e:	f043 0301 	orr.w	r3, r3, #1
 8006f42:	81a3      	strh	r3, [r4, #12]
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	431d      	orrs	r5, r3
 8006f48:	81a5      	strh	r5, [r4, #12]
 8006f4a:	e7cd      	b.n	8006ee8 <__smakebuf_r+0x18>
 8006f4c:	080062a1 	.word	0x080062a1

08006f50 <memchr>:
 8006f50:	b510      	push	{r4, lr}
 8006f52:	b2c9      	uxtb	r1, r1
 8006f54:	4402      	add	r2, r0
 8006f56:	4290      	cmp	r0, r2
 8006f58:	4603      	mov	r3, r0
 8006f5a:	d101      	bne.n	8006f60 <memchr+0x10>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	e003      	b.n	8006f68 <memchr+0x18>
 8006f60:	781c      	ldrb	r4, [r3, #0]
 8006f62:	3001      	adds	r0, #1
 8006f64:	428c      	cmp	r4, r1
 8006f66:	d1f6      	bne.n	8006f56 <memchr+0x6>
 8006f68:	4618      	mov	r0, r3
 8006f6a:	bd10      	pop	{r4, pc}

08006f6c <__malloc_lock>:
 8006f6c:	4770      	bx	lr

08006f6e <__malloc_unlock>:
 8006f6e:	4770      	bx	lr

08006f70 <_free_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4605      	mov	r5, r0
 8006f74:	2900      	cmp	r1, #0
 8006f76:	d043      	beq.n	8007000 <_free_r+0x90>
 8006f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f7c:	1f0c      	subs	r4, r1, #4
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bfb8      	it	lt
 8006f82:	18e4      	addlt	r4, r4, r3
 8006f84:	f7ff fff2 	bl	8006f6c <__malloc_lock>
 8006f88:	4a1e      	ldr	r2, [pc, #120]	; (8007004 <_free_r+0x94>)
 8006f8a:	6813      	ldr	r3, [r2, #0]
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	b933      	cbnz	r3, 8006f9e <_free_r+0x2e>
 8006f90:	6063      	str	r3, [r4, #4]
 8006f92:	6014      	str	r4, [r2, #0]
 8006f94:	4628      	mov	r0, r5
 8006f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f9a:	f7ff bfe8 	b.w	8006f6e <__malloc_unlock>
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	d90b      	bls.n	8006fba <_free_r+0x4a>
 8006fa2:	6821      	ldr	r1, [r4, #0]
 8006fa4:	1862      	adds	r2, r4, r1
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	bf01      	itttt	eq
 8006faa:	681a      	ldreq	r2, [r3, #0]
 8006fac:	685b      	ldreq	r3, [r3, #4]
 8006fae:	1852      	addeq	r2, r2, r1
 8006fb0:	6022      	streq	r2, [r4, #0]
 8006fb2:	6063      	str	r3, [r4, #4]
 8006fb4:	6004      	str	r4, [r0, #0]
 8006fb6:	e7ed      	b.n	8006f94 <_free_r+0x24>
 8006fb8:	4613      	mov	r3, r2
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	b10a      	cbz	r2, 8006fc2 <_free_r+0x52>
 8006fbe:	42a2      	cmp	r2, r4
 8006fc0:	d9fa      	bls.n	8006fb8 <_free_r+0x48>
 8006fc2:	6819      	ldr	r1, [r3, #0]
 8006fc4:	1858      	adds	r0, r3, r1
 8006fc6:	42a0      	cmp	r0, r4
 8006fc8:	d10b      	bne.n	8006fe2 <_free_r+0x72>
 8006fca:	6820      	ldr	r0, [r4, #0]
 8006fcc:	4401      	add	r1, r0
 8006fce:	1858      	adds	r0, r3, r1
 8006fd0:	4282      	cmp	r2, r0
 8006fd2:	6019      	str	r1, [r3, #0]
 8006fd4:	d1de      	bne.n	8006f94 <_free_r+0x24>
 8006fd6:	6810      	ldr	r0, [r2, #0]
 8006fd8:	6852      	ldr	r2, [r2, #4]
 8006fda:	4401      	add	r1, r0
 8006fdc:	6019      	str	r1, [r3, #0]
 8006fde:	605a      	str	r2, [r3, #4]
 8006fe0:	e7d8      	b.n	8006f94 <_free_r+0x24>
 8006fe2:	d902      	bls.n	8006fea <_free_r+0x7a>
 8006fe4:	230c      	movs	r3, #12
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	e7d4      	b.n	8006f94 <_free_r+0x24>
 8006fea:	6820      	ldr	r0, [r4, #0]
 8006fec:	1821      	adds	r1, r4, r0
 8006fee:	428a      	cmp	r2, r1
 8006ff0:	bf01      	itttt	eq
 8006ff2:	6811      	ldreq	r1, [r2, #0]
 8006ff4:	6852      	ldreq	r2, [r2, #4]
 8006ff6:	1809      	addeq	r1, r1, r0
 8006ff8:	6021      	streq	r1, [r4, #0]
 8006ffa:	6062      	str	r2, [r4, #4]
 8006ffc:	605c      	str	r4, [r3, #4]
 8006ffe:	e7c9      	b.n	8006f94 <_free_r+0x24>
 8007000:	bd38      	pop	{r3, r4, r5, pc}
 8007002:	bf00      	nop
 8007004:	20000424 	.word	0x20000424

08007008 <_read_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4605      	mov	r5, r0
 800700c:	4608      	mov	r0, r1
 800700e:	4611      	mov	r1, r2
 8007010:	2200      	movs	r2, #0
 8007012:	4c05      	ldr	r4, [pc, #20]	; (8007028 <_read_r+0x20>)
 8007014:	6022      	str	r2, [r4, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	f7f9 fc16 	bl	8000848 <_read>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d102      	bne.n	8007026 <_read_r+0x1e>
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	b103      	cbz	r3, 8007026 <_read_r+0x1e>
 8007024:	602b      	str	r3, [r5, #0]
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	2000104c 	.word	0x2000104c

0800702c <_fstat_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	2300      	movs	r3, #0
 8007030:	4c06      	ldr	r4, [pc, #24]	; (800704c <_fstat_r+0x20>)
 8007032:	4605      	mov	r5, r0
 8007034:	4608      	mov	r0, r1
 8007036:	4611      	mov	r1, r2
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	f7f9 fc49 	bl	80008d0 <_fstat>
 800703e:	1c43      	adds	r3, r0, #1
 8007040:	d102      	bne.n	8007048 <_fstat_r+0x1c>
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	b103      	cbz	r3, 8007048 <_fstat_r+0x1c>
 8007046:	602b      	str	r3, [r5, #0]
 8007048:	bd38      	pop	{r3, r4, r5, pc}
 800704a:	bf00      	nop
 800704c:	2000104c 	.word	0x2000104c

08007050 <_isatty_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	2300      	movs	r3, #0
 8007054:	4c05      	ldr	r4, [pc, #20]	; (800706c <_isatty_r+0x1c>)
 8007056:	4605      	mov	r5, r0
 8007058:	4608      	mov	r0, r1
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	f7f9 fc47 	bl	80008ee <_isatty>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d102      	bne.n	800706a <_isatty_r+0x1a>
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	b103      	cbz	r3, 800706a <_isatty_r+0x1a>
 8007068:	602b      	str	r3, [r5, #0]
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	2000104c 	.word	0x2000104c

08007070 <_init>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	bf00      	nop
 8007074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007076:	bc08      	pop	{r3}
 8007078:	469e      	mov	lr, r3
 800707a:	4770      	bx	lr

0800707c <_fini>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	bf00      	nop
 8007080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007082:	bc08      	pop	{r3}
 8007084:	469e      	mov	lr, r3
 8007086:	4770      	bx	lr
