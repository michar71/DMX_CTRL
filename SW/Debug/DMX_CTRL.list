
DMX_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b860  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001918  0800b970  0800b970  0001b970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d288  0800d288  0001d288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d28c  0800d28c  0001d28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000274  20000000  0800d290  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b10  20000278  0800d504  00020278  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000d88  0800d504  00020d88  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
  9 .debug_info   00039991  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000782e  00000000  00000000  00059c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011ffc  00000000  00000000  0006145c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001ba0  00000000  00000000  00073458  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001b00  00000000  00000000  00074ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001cff7  00000000  00000000  00076af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001fb94  00000000  00000000  00093aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00082125  00000000  00000000  000b3683  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  001357a8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005490  00000000  00000000  00135824  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b958 	.word	0x0800b958

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	0800b958 	.word	0x0800b958

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b510      	push	{r4, lr}
 800115e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_InitTick+0x40>)
 8001162:	7818      	ldrb	r0, [r3, #0]
 8001164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001168:	fbb3 f3f0 	udiv	r3, r3, r0
 800116c:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <HAL_InitTick+0x44>)
 800116e:	6810      	ldr	r0, [r2, #0]
 8001170:	fbb0 f0f3 	udiv	r0, r0, r3
 8001174:	f000 fb22 	bl	80017bc <HAL_SYSTICK_Config>
 8001178:	b968      	cbnz	r0, 8001196 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	2c0f      	cmp	r4, #15
 800117c:	d901      	bls.n	8001182 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800117e:	2001      	movs	r0, #1
 8001180:	e00a      	b.n	8001198 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001182:	2200      	movs	r2, #0
 8001184:	4621      	mov	r1, r4
 8001186:	f04f 30ff 	mov.w	r0, #4294967295
 800118a:	f000 fad5 	bl	8001738 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_InitTick+0x48>)
 8001190:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001192:	2000      	movs	r0, #0
 8001194:	e000      	b.n	8001198 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001196:	2001      	movs	r0, #1
}
 8001198:	bd10      	pop	{r4, pc}
 800119a:	bf00      	nop
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000078 	.word	0x20000078
 80011a4:	20000004 	.word	0x20000004

080011a8 <HAL_Init>:
{
 80011a8:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011aa:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_Init+0x20>)
 80011ac:	6813      	ldr	r3, [r2, #0]
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 faad 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff ffce 	bl	800115c <HAL_InitTick>
  HAL_MspInit();
 80011c0:	f006 fa4a 	bl	8007658 <HAL_MspInit>
}
 80011c4:	2000      	movs	r0, #0
 80011c6:	bd08      	pop	{r3, pc}
 80011c8:	40022000 	.word	0x40022000

080011cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011cc:	4a03      	ldr	r2, [pc, #12]	; (80011dc <HAL_IncTick+0x10>)
 80011ce:	6811      	ldr	r1, [r2, #0]
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_IncTick+0x14>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	440b      	add	r3, r1
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	2000062c 	.word	0x2000062c
 80011e0:	20000000 	.word	0x20000000

080011e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011e4:	4b01      	ldr	r3, [pc, #4]	; (80011ec <HAL_GetTick+0x8>)
 80011e6:	6818      	ldr	r0, [r3, #0]
}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	2000062c 	.word	0x2000062c

080011f0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011f0:	6803      	ldr	r3, [r0, #0]
 80011f2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80011f4:	4770      	bx	lr

080011f6 <HAL_ADC_LevelOutOfWindowCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80011f6:	4770      	bx	lr

080011f8 <HAL_ADC_IRQHandler>:
{
 80011f8:	b510      	push	{r4, lr}
 80011fa:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80011fc:	6803      	ldr	r3, [r0, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	f012 0f20 	tst.w	r2, #32
 8001204:	d018      	beq.n	8001238 <HAL_ADC_IRQHandler+0x40>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	f012 0f02 	tst.w	r2, #2
 800120c:	d014      	beq.n	8001238 <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800120e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001210:	f012 0f10 	tst.w	r2, #16
 8001214:	d103      	bne.n	800121e <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001216:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800121c:	6282      	str	r2, [r0, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001224:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001228:	d038      	beq.n	800129c <HAL_ADC_IRQHandler+0xa4>
      HAL_ADC_ConvCpltCallback(hadc);
 800122a:	4620      	mov	r0, r4
 800122c:	f006 fbd0 	bl	80079d0 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	f06f 0212 	mvn.w	r2, #18
 8001236:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001240:	d022      	beq.n	8001288 <HAL_ADC_IRQHandler+0x90>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	f012 0f04 	tst.w	r2, #4
 8001248:	d01e      	beq.n	8001288 <HAL_ADC_IRQHandler+0x90>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800124a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800124c:	f012 0f10 	tst.w	r2, #16
 8001250:	d103      	bne.n	800125a <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001252:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001258:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8001260:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8001264:	d031      	beq.n	80012ca <HAL_ADC_IRQHandler+0xd2>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001266:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001268:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800126c:	d105      	bne.n	800127a <HAL_ADC_IRQHandler+0x82>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001274:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001278:	d024      	beq.n	80012c4 <HAL_ADC_IRQHandler+0xcc>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800127a:	4620      	mov	r0, r4
 800127c:	f000 fa48 	bl	8001710 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	f06f 020c 	mvn.w	r2, #12
 8001286:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001290:	d003      	beq.n	800129a <HAL_ADC_IRQHandler+0xa2>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f013 0f01 	tst.w	r3, #1
 8001298:	d128      	bne.n	80012ec <HAL_ADC_IRQHandler+0xf4>
}
 800129a:	bd10      	pop	{r4, pc}
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800129c:	7b22      	ldrb	r2, [r4, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800129e:	2a00      	cmp	r2, #0
 80012a0:	d1c3      	bne.n	800122a <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	f022 0220 	bic.w	r2, r2, #32
 80012a8:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012b0:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012b4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80012b8:	d1b7      	bne.n	800122a <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80012c2:	e7b2      	b.n	800122a <HAL_ADC_IRQHandler+0x32>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80012c4:	7b22      	ldrb	r2, [r4, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d1d7      	bne.n	800127a <HAL_ADC_IRQHandler+0x82>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012d0:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012d8:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012e0:	d1cb      	bne.n	800127a <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80012ea:	e7c6      	b.n	800127a <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f2:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012f4:	4620      	mov	r0, r4
 80012f6:	f7ff ff7e 	bl	80011f6 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	f06f 0201 	mvn.w	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
}
 8001302:	e7ca      	b.n	800129a <HAL_ADC_IRQHandler+0xa2>

08001304 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001304:	b430      	push	{r4, r5}
 8001306:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800130c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001310:	2b01      	cmp	r3, #1
 8001312:	f000 808b 	beq.w	800142c <HAL_ADC_ConfigChannel+0x128>
 8001316:	4602      	mov	r2, r0
 8001318:	2301      	movs	r3, #1
 800131a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800131e:	684b      	ldr	r3, [r1, #4]
 8001320:	2b06      	cmp	r3, #6
 8001322:	d829      	bhi.n	8001378 <HAL_ADC_ConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001324:	6805      	ldr	r5, [r0, #0]
 8001326:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001328:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800132c:	3b05      	subs	r3, #5
 800132e:	241f      	movs	r4, #31
 8001330:	409c      	lsls	r4, r3
 8001332:	ea20 0004 	bic.w	r0, r0, r4
 8001336:	680c      	ldr	r4, [r1, #0]
 8001338:	fa04 f303 	lsl.w	r3, r4, r3
 800133c:	4303      	orrs	r3, r0
 800133e:	636b      	str	r3, [r5, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001340:	680b      	ldr	r3, [r1, #0]
 8001342:	2b09      	cmp	r3, #9
 8001344:	d938      	bls.n	80013b8 <HAL_ADC_ConfigChannel+0xb4>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001346:	6815      	ldr	r5, [r2, #0]
 8001348:	68e8      	ldr	r0, [r5, #12]
 800134a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800134e:	3b1e      	subs	r3, #30
 8001350:	2407      	movs	r4, #7
 8001352:	409c      	lsls	r4, r3
 8001354:	ea20 0004 	bic.w	r0, r0, r4
 8001358:	688c      	ldr	r4, [r1, #8]
 800135a:	fa04 f303 	lsl.w	r3, r4, r3
 800135e:	4303      	orrs	r3, r0
 8001360:	60eb      	str	r3, [r5, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001362:	680b      	ldr	r3, [r1, #0]
 8001364:	3b10      	subs	r3, #16
 8001366:	2b01      	cmp	r3, #1
 8001368:	d934      	bls.n	80013d4 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800136a:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800136c:	2300      	movs	r3, #0
 800136e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001372:	b002      	add	sp, #8
 8001374:	bc30      	pop	{r4, r5}
 8001376:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8001378:	2b0c      	cmp	r3, #12
 800137a:	d80e      	bhi.n	800139a <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800137c:	6805      	ldr	r5, [r0, #0]
 800137e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001380:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001384:	3b23      	subs	r3, #35	; 0x23
 8001386:	241f      	movs	r4, #31
 8001388:	409c      	lsls	r4, r3
 800138a:	ea20 0004 	bic.w	r0, r0, r4
 800138e:	680c      	ldr	r4, [r1, #0]
 8001390:	fa04 f303 	lsl.w	r3, r4, r3
 8001394:	4303      	orrs	r3, r0
 8001396:	632b      	str	r3, [r5, #48]	; 0x30
 8001398:	e7d2      	b.n	8001340 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800139a:	6805      	ldr	r5, [r0, #0]
 800139c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800139e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013a2:	3b41      	subs	r3, #65	; 0x41
 80013a4:	241f      	movs	r4, #31
 80013a6:	409c      	lsls	r4, r3
 80013a8:	ea20 0004 	bic.w	r0, r0, r4
 80013ac:	680c      	ldr	r4, [r1, #0]
 80013ae:	fa04 f303 	lsl.w	r3, r4, r3
 80013b2:	4303      	orrs	r3, r0
 80013b4:	62eb      	str	r3, [r5, #44]	; 0x2c
 80013b6:	e7c3      	b.n	8001340 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013b8:	6815      	ldr	r5, [r2, #0]
 80013ba:	6928      	ldr	r0, [r5, #16]
 80013bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80013c0:	2407      	movs	r4, #7
 80013c2:	409c      	lsls	r4, r3
 80013c4:	ea20 0004 	bic.w	r0, r0, r4
 80013c8:	688c      	ldr	r4, [r1, #8]
 80013ca:	fa04 f303 	lsl.w	r3, r4, r3
 80013ce:	4303      	orrs	r3, r0
 80013d0:	612b      	str	r3, [r5, #16]
 80013d2:	e7c6      	b.n	8001362 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80013d4:	6813      	ldr	r3, [r2, #0]
 80013d6:	4816      	ldr	r0, [pc, #88]	; (8001430 <HAL_ADC_ConfigChannel+0x12c>)
 80013d8:	4283      	cmp	r3, r0
 80013da:	d005      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80013de:	f043 0320 	orr.w	r3, r3, #32
 80013e2:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
 80013e6:	e7c1      	b.n	800136c <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013e8:	6898      	ldr	r0, [r3, #8]
 80013ea:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80013ee:	d11b      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013f0:	6898      	ldr	r0, [r3, #8]
 80013f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80013f6:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013f8:	680b      	ldr	r3, [r1, #0]
 80013fa:	2b10      	cmp	r3, #16
 80013fc:	d001      	beq.n	8001402 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013fe:	2000      	movs	r0, #0
 8001400:	e7b4      	b.n	800136c <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_ADC_ConfigChannel+0x130>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	490c      	ldr	r1, [pc, #48]	; (8001438 <HAL_ADC_ConfigChannel+0x134>)
 8001408:	fba1 1303 	umull	r1, r3, r1, r3
 800140c:	0c9b      	lsrs	r3, r3, #18
 800140e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001412:	0059      	lsls	r1, r3, #1
 8001414:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001416:	e002      	b.n	800141e <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 8001418:	9b01      	ldr	r3, [sp, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800141e:	9b01      	ldr	r3, [sp, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f9      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001424:	2000      	movs	r0, #0
 8001426:	e7a1      	b.n	800136c <HAL_ADC_ConfigChannel+0x68>
 8001428:	2000      	movs	r0, #0
 800142a:	e79f      	b.n	800136c <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 800142c:	2002      	movs	r0, #2
 800142e:	e7a0      	b.n	8001372 <HAL_ADC_ConfigChannel+0x6e>
 8001430:	40012400 	.word	0x40012400
 8001434:	20000078 	.word	0x20000078
 8001438:	431bde83 	.word	0x431bde83

0800143c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800143c:	b530      	push	{r4, r5, lr}
 800143e:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001444:	6803      	ldr	r3, [r0, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	f012 0f01 	tst.w	r2, #1
 800144c:	d12e      	bne.n	80014ac <ADC_Enable+0x70>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	f042 0201 	orr.w	r2, r2, #1
 8001454:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <ADC_Enable+0x78>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <ADC_Enable+0x7c>)
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	0c9b      	lsrs	r3, r3, #18
 8001462:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001464:	e002      	b.n	800146c <ADC_Enable+0x30>
    {
      wait_loop_index--;
 8001466:	9b01      	ldr	r3, [sp, #4]
 8001468:	3b01      	subs	r3, #1
 800146a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800146c:	9b01      	ldr	r3, [sp, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f9      	bne.n	8001466 <ADC_Enable+0x2a>
 8001472:	4604      	mov	r4, r0
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001474:	f7ff feb6 	bl	80011e4 <HAL_GetTick>
 8001478:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f013 0f01 	tst.w	r3, #1
 8001482:	d111      	bne.n	80014a8 <ADC_Enable+0x6c>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001484:	f7ff feae 	bl	80011e4 <HAL_GetTick>
 8001488:	1b40      	subs	r0, r0, r5
 800148a:	2802      	cmp	r0, #2
 800148c:	d9f5      	bls.n	800147a <ADC_Enable+0x3e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800148e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001490:	f043 0310 	orr.w	r3, r3, #16
 8001494:	62a3      	str	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	62e3      	str	r3, [r4, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800149e:	2300      	movs	r3, #0
 80014a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      
        return HAL_ERROR;
 80014a4:	2001      	movs	r0, #1
 80014a6:	e002      	b.n	80014ae <ADC_Enable+0x72>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014a8:	2000      	movs	r0, #0
 80014aa:	e000      	b.n	80014ae <ADC_Enable+0x72>
 80014ac:	2000      	movs	r0, #0
}
 80014ae:	b003      	add	sp, #12
 80014b0:	bd30      	pop	{r4, r5, pc}
 80014b2:	bf00      	nop
 80014b4:	20000078 	.word	0x20000078
 80014b8:	431bde83 	.word	0x431bde83

080014bc <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 80014bc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d06f      	beq.n	80015a4 <HAL_ADC_Start_IT+0xe8>
{
 80014c4:	b510      	push	{r4, lr}
 80014c6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80014c8:	2301      	movs	r3, #1
 80014ca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80014ce:	f7ff ffb5 	bl	800143c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80014d2:	4602      	mov	r2, r0
 80014d4:	2800      	cmp	r0, #0
 80014d6:	d160      	bne.n	800159a <HAL_ADC_Start_IT+0xde>
    ADC_STATE_CLR_SET(hadc->State,
 80014d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	4930      	ldr	r1, [pc, #192]	; (80015ac <HAL_ADC_Start_IT+0xf0>)
 80014ec:	428b      	cmp	r3, r1
 80014ee:	d02c      	beq.n	800154a <HAL_ADC_Start_IT+0x8e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80014f2:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 80014f6:	62a1      	str	r1, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014f8:	6859      	ldr	r1, [r3, #4]
 80014fa:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80014fe:	d005      	beq.n	800150c <HAL_ADC_Start_IT+0x50>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001500:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001502:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001506:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800150a:	62a1      	str	r1, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800150c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800150e:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 8001512:	d030      	beq.n	8001576 <HAL_ADC_Start_IT+0xba>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001514:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001516:	f021 0106 	bic.w	r1, r1, #6
 800151a:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800151c:	2100      	movs	r1, #0
 800151e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001522:	f06f 0102 	mvn.w	r1, #2
 8001526:	6019      	str	r1, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001528:	6821      	ldr	r1, [r4, #0]
 800152a:	684b      	ldr	r3, [r1, #4]
 800152c:	f043 0320 	orr.w	r3, r3, #32
 8001530:	604b      	str	r3, [r1, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	6899      	ldr	r1, [r3, #8]
 8001536:	f401 2160 	and.w	r1, r1, #917504	; 0xe0000
 800153a:	f5b1 2f60 	cmp.w	r1, #917504	; 0xe0000
 800153e:	d01d      	beq.n	800157c <HAL_ADC_Start_IT+0xc0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001540:	6899      	ldr	r1, [r3, #8]
 8001542:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001546:	6099      	str	r1, [r3, #8]
 8001548:	e02a      	b.n	80015a0 <HAL_ADC_Start_IT+0xe4>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800154a:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800154e:	6849      	ldr	r1, [r1, #4]
 8001550:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8001554:	d0cc      	beq.n	80014f0 <HAL_ADC_Start_IT+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001556:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001558:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800155c:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800155e:	4914      	ldr	r1, [pc, #80]	; (80015b0 <HAL_ADC_Start_IT+0xf4>)
 8001560:	6849      	ldr	r1, [r1, #4]
 8001562:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8001566:	d0d1      	beq.n	800150c <HAL_ADC_Start_IT+0x50>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001568:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800156a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800156e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001572:	62a1      	str	r1, [r4, #40]	; 0x28
 8001574:	e7ca      	b.n	800150c <HAL_ADC_Start_IT+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8001576:	2100      	movs	r1, #0
 8001578:	62e1      	str	r1, [r4, #44]	; 0x2c
 800157a:	e7cf      	b.n	800151c <HAL_ADC_Start_IT+0x60>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800157c:	490b      	ldr	r1, [pc, #44]	; (80015ac <HAL_ADC_Start_IT+0xf0>)
 800157e:	428b      	cmp	r3, r1
 8001580:	d004      	beq.n	800158c <HAL_ADC_Start_IT+0xd0>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001582:	6899      	ldr	r1, [r3, #8]
 8001584:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 8001588:	6099      	str	r1, [r3, #8]
 800158a:	e009      	b.n	80015a0 <HAL_ADC_Start_IT+0xe4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800158c:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8001590:	6849      	ldr	r1, [r1, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001592:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8001596:	d1d3      	bne.n	8001540 <HAL_ADC_Start_IT+0x84>
 8001598:	e7f3      	b.n	8001582 <HAL_ADC_Start_IT+0xc6>
    __HAL_UNLOCK(hadc);
 800159a:	2300      	movs	r3, #0
 800159c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80015a0:	4610      	mov	r0, r2
 80015a2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80015a4:	2202      	movs	r2, #2
}
 80015a6:	4610      	mov	r0, r2
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40012800 	.word	0x40012800
 80015b0:	40012400 	.word	0x40012400

080015b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80015b4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015b6:	6803      	ldr	r3, [r0, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	f012 0f01 	tst.w	r2, #1
 80015be:	d101      	bne.n	80015c4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015c0:	2000      	movs	r0, #0
}
 80015c2:	bd38      	pop	{r3, r4, r5, pc}
 80015c4:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	f022 0201 	bic.w	r2, r2, #1
 80015cc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80015ce:	f7ff fe09 	bl	80011e4 <HAL_GetTick>
 80015d2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f013 0f01 	tst.w	r3, #1
 80015dc:	d00e      	beq.n	80015fc <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015de:	f7ff fe01 	bl	80011e4 <HAL_GetTick>
 80015e2:	1b40      	subs	r0, r0, r5
 80015e4:	2802      	cmp	r0, #2
 80015e6:	d9f5      	bls.n	80015d4 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 80015f8:	2001      	movs	r0, #1
 80015fa:	e7e2      	b.n	80015c2 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80015fc:	2000      	movs	r0, #0
 80015fe:	e7e0      	b.n	80015c2 <ADC_ConversionStop_Disable+0xe>

08001600 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001600:	2800      	cmp	r0, #0
 8001602:	d07f      	beq.n	8001704 <HAL_ADC_Init+0x104>
{
 8001604:	b538      	push	{r3, r4, r5, lr}
 8001606:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001608:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800160a:	2b00      	cmp	r3, #0
 800160c:	d033      	beq.n	8001676 <HAL_ADC_Init+0x76>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800160e:	4620      	mov	r0, r4
 8001610:	f7ff ffd0 	bl	80015b4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001614:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001616:	f013 0310 	ands.w	r3, r3, #16
 800161a:	d16d      	bne.n	80016f8 <HAL_ADC_Init+0xf8>
 800161c:	2800      	cmp	r0, #0
 800161e:	d16b      	bne.n	80016f8 <HAL_ADC_Init+0xf8>
    ADC_STATE_CLR_SET(hadc->State,
 8001620:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001622:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001626:	f022 0202 	bic.w	r2, r2, #2
 800162a:	f042 0202 	orr.w	r2, r2, #2
 800162e:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001630:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001632:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001634:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001636:	7b25      	ldrb	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001638:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800163c:	68a1      	ldr	r1, [r4, #8]
 800163e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001642:	d021      	beq.n	8001688 <HAL_ADC_Init+0x88>
 8001644:	2901      	cmp	r1, #1
 8001646:	d01c      	beq.n	8001682 <HAL_ADC_Init+0x82>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001648:	7d21      	ldrb	r1, [r4, #20]
 800164a:	2901      	cmp	r1, #1
 800164c:	d01f      	beq.n	800168e <HAL_ADC_Init+0x8e>
      MODIFY_REG(hadc->Instance->CR1,
 800164e:	6825      	ldr	r5, [r4, #0]
 8001650:	6869      	ldr	r1, [r5, #4]
 8001652:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8001656:	430b      	orrs	r3, r1
 8001658:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800165a:	6821      	ldr	r1, [r4, #0]
 800165c:	688d      	ldr	r5, [r1, #8]
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <HAL_ADC_Init+0x108>)
 8001660:	402b      	ands	r3, r5
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001666:	68a3      	ldr	r3, [r4, #8]
 8001668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800166c:	d020      	beq.n	80016b0 <HAL_ADC_Init+0xb0>
 800166e:	2b01      	cmp	r3, #1
 8001670:	d01e      	beq.n	80016b0 <HAL_ADC_Init+0xb0>
  uint32_t tmp_sqr1 = 0U;
 8001672:	2100      	movs	r1, #0
 8001674:	e01f      	b.n	80016b6 <HAL_ADC_Init+0xb6>
    ADC_CLEAR_ERRORCODE(hadc);
 8001676:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001678:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800167c:	f006 f80e 	bl	800769c <HAL_ADC_MspInit>
 8001680:	e7c5      	b.n	800160e <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001686:	e7df      	b.n	8001648 <HAL_ADC_Init+0x48>
 8001688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168c:	e7dc      	b.n	8001648 <HAL_ADC_Init+0x48>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800168e:	b935      	cbnz	r5, 800169e <HAL_ADC_Init+0x9e>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001690:	69a1      	ldr	r1, [r4, #24]
 8001692:	3901      	subs	r1, #1
 8001694:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8001698:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800169c:	e7d7      	b.n	800164e <HAL_ADC_Init+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800169e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80016a0:	f041 0120 	orr.w	r1, r1, #32
 80016a4:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80016a8:	f041 0101 	orr.w	r1, r1, #1
 80016ac:	62e1      	str	r1, [r4, #44]	; 0x2c
 80016ae:	e7ce      	b.n	800164e <HAL_ADC_Init+0x4e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016b0:	6923      	ldr	r3, [r4, #16]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80016b6:	6825      	ldr	r5, [r4, #0]
 80016b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80016ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80016be:	430b      	orrs	r3, r1
 80016c0:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	6899      	ldr	r1, [r3, #8]
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_ADC_Init+0x10c>)
 80016c8:	400b      	ands	r3, r1
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d00b      	beq.n	80016e6 <HAL_ADC_Init+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 80016ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016d0:	f023 0312 	bic.w	r3, r3, #18
 80016d4:	f043 0310 	orr.w	r3, r3, #16
 80016d8:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 80016e2:	2001      	movs	r0, #1
 80016e4:	e00d      	b.n	8001702 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 80016e6:	2300      	movs	r3, #0
 80016e8:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80016ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016ec:	f023 0303 	bic.w	r3, r3, #3
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80016f6:	e004      	b.n	8001702 <HAL_ADC_Init+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016fa:	f043 0310 	orr.w	r3, r3, #16
 80016fe:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001700:	2001      	movs	r0, #1
}
 8001702:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001704:	2001      	movs	r0, #1
}
 8001706:	4770      	bx	lr
 8001708:	ffe1f7fd 	.word	0xffe1f7fd
 800170c:	ff1f0efe 	.word	0xff1f0efe

08001710 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001710:	4770      	bx	lr
	...

08001714 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001716:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001718:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800171c:	041b      	lsls	r3, r3, #16
 800171e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001720:	0200      	lsls	r0, r0, #8
 8001722:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001726:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001728:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800172c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001730:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001738:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_NVIC_SetPriority+0x60>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001742:	f1c3 0407 	rsb	r4, r3, #7
 8001746:	2c04      	cmp	r4, #4
 8001748:	bf28      	it	cs
 800174a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174c:	1d1d      	adds	r5, r3, #4
 800174e:	2d06      	cmp	r5, #6
 8001750:	d918      	bls.n	8001784 <HAL_NVIC_SetPriority+0x4c>
 8001752:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 35ff 	mov.w	r5, #4294967295
 8001758:	fa05 f404 	lsl.w	r4, r5, r4
 800175c:	ea21 0104 	bic.w	r1, r1, r4
 8001760:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001762:	fa05 f303 	lsl.w	r3, r5, r3
 8001766:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800176c:	2800      	cmp	r0, #0
 800176e:	db0b      	blt.n	8001788 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001770:	0109      	lsls	r1, r1, #4
 8001772:	b2c9      	uxtb	r1, r1
 8001774:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001778:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800177c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001780:	bc30      	pop	{r4, r5}
 8001782:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001784:	2300      	movs	r3, #0
 8001786:	e7e5      	b.n	8001754 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	f000 000f 	and.w	r0, r0, #15
 800178c:	0109      	lsls	r1, r1, #4
 800178e:	b2c9      	uxtb	r1, r1
 8001790:	4b02      	ldr	r3, [pc, #8]	; (800179c <HAL_NVIC_SetPriority+0x64>)
 8001792:	5419      	strb	r1, [r3, r0]
 8001794:	e7f4      	b.n	8001780 <HAL_NVIC_SetPriority+0x48>
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00
 800179c:	e000ed14 	.word	0xe000ed14

080017a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80017a0:	2800      	cmp	r0, #0
 80017a2:	db07      	blt.n	80017b4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a4:	f000 021f 	and.w	r2, r0, #31
 80017a8:	0940      	lsrs	r0, r0, #5
 80017aa:	2301      	movs	r3, #1
 80017ac:	4093      	lsls	r3, r2
 80017ae:	4a02      	ldr	r2, [pc, #8]	; (80017b8 <HAL_NVIC_EnableIRQ+0x18>)
 80017b0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000e100 	.word	0xe000e100

080017bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017bc:	3801      	subs	r0, #1
 80017be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80017c2:	d20a      	bcs.n	80017da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_SYSTICK_Config+0x24>)
 80017c6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c8:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <HAL_SYSTICK_Config+0x28>)
 80017ca:	21f0      	movs	r1, #240	; 0xf0
 80017cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d0:	2000      	movs	r0, #0
 80017d2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d4:	2207      	movs	r2, #7
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e8:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017ea:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80017ec:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80017ee:	2401      	movs	r4, #1
 80017f0:	40b4      	lsls	r4, r6
 80017f2:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017f4:	6804      	ldr	r4, [r0, #0]
 80017f6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017f8:	6843      	ldr	r3, [r0, #4]
 80017fa:	2b10      	cmp	r3, #16
 80017fc:	d005      	beq.n	800180a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80017fe:	6803      	ldr	r3, [r0, #0]
 8001800:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001802:	6803      	ldr	r3, [r0, #0]
 8001804:	60da      	str	r2, [r3, #12]
  }
}
 8001806:	bc70      	pop	{r4, r5, r6}
 8001808:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800180a:	6803      	ldr	r3, [r0, #0]
 800180c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800180e:	6803      	ldr	r3, [r0, #0]
 8001810:	60d9      	str	r1, [r3, #12]
 8001812:	e7f8      	b.n	8001806 <DMA_SetConfig+0x1e>

08001814 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001814:	b360      	cbz	r0, 8001870 <HAL_DMA_Init+0x5c>
{
 8001816:	b410      	push	{r4}
 8001818:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800181a:	6801      	ldr	r1, [r0, #0]
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_DMA_Init+0x60>)
 800181e:	440b      	add	r3, r1
 8001820:	4815      	ldr	r0, [pc, #84]	; (8001878 <HAL_DMA_Init+0x64>)
 8001822:	fba0 0303 	umull	r0, r3, r0, r3
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_DMA_Init+0x68>)
 800182e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8001830:	2302      	movs	r3, #2
 8001832:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001836:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001838:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 800183c:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001840:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001842:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 8001844:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001846:	68d4      	ldr	r4, [r2, #12]
 8001848:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184a:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184e:	6954      	ldr	r4, [r2, #20]
 8001850:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001852:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001854:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001856:	69d4      	ldr	r4, [r2, #28]
 8001858:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800185a:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 800185c:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185e:	2000      	movs	r0, #0
 8001860:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001862:	2301      	movs	r3, #1
 8001864:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001868:	f882 0020 	strb.w	r0, [r2, #32]
}
 800186c:	bc10      	pop	{r4}
 800186e:	4770      	bx	lr
    return HAL_ERROR;
 8001870:	2001      	movs	r0, #1
}
 8001872:	4770      	bx	lr
 8001874:	bffdfff8 	.word	0xbffdfff8
 8001878:	cccccccd 	.word	0xcccccccd
 800187c:	40020000 	.word	0x40020000

08001880 <HAL_DMA_Start_IT>:
{
 8001880:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8001882:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001886:	2c01      	cmp	r4, #1
 8001888:	d032      	beq.n	80018f0 <HAL_DMA_Start_IT+0x70>
 800188a:	2401      	movs	r4, #1
 800188c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001890:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001894:	2c01      	cmp	r4, #1
 8001896:	d004      	beq.n	80018a2 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001898:	2300      	movs	r3, #0
 800189a:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 800189e:	2002      	movs	r0, #2
}
 80018a0:	bd38      	pop	{r3, r4, r5, pc}
 80018a2:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 80018a4:	2002      	movs	r0, #2
 80018a6:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018aa:	2000      	movs	r0, #0
 80018ac:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80018ae:	6825      	ldr	r5, [r4, #0]
 80018b0:	6828      	ldr	r0, [r5, #0]
 80018b2:	f020 0001 	bic.w	r0, r0, #1
 80018b6:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018b8:	4620      	mov	r0, r4
 80018ba:	f7ff ff95 	bl	80017e8 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 80018be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018c0:	b15b      	cbz	r3, 80018da <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c2:	6822      	ldr	r2, [r4, #0]
 80018c4:	6813      	ldr	r3, [r2, #0]
 80018c6:	f043 030e 	orr.w	r3, r3, #14
 80018ca:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80018cc:	6822      	ldr	r2, [r4, #0]
 80018ce:	6813      	ldr	r3, [r2, #0]
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018d6:	2000      	movs	r0, #0
 80018d8:	e7e2      	b.n	80018a0 <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018da:	6822      	ldr	r2, [r4, #0]
 80018dc:	6813      	ldr	r3, [r2, #0]
 80018de:	f023 0304 	bic.w	r3, r3, #4
 80018e2:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018e4:	6822      	ldr	r2, [r4, #0]
 80018e6:	6813      	ldr	r3, [r2, #0]
 80018e8:	f043 030a 	orr.w	r3, r3, #10
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e7ed      	b.n	80018cc <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 80018f0:	2002      	movs	r0, #2
 80018f2:	e7d5      	b.n	80018a0 <HAL_DMA_Start_IT+0x20>

080018f4 <HAL_DMA_Abort_IT>:
{  
 80018f4:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018f6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d003      	beq.n	8001906 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fe:	2304      	movs	r3, #4
 8001900:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001902:	2001      	movs	r0, #1
}
 8001904:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001906:	6802      	ldr	r2, [r0, #0]
 8001908:	6813      	ldr	r3, [r2, #0]
 800190a:	f023 030e 	bic.w	r3, r3, #14
 800190e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001910:	6802      	ldr	r2, [r0, #0]
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800191a:	6803      	ldr	r3, [r0, #0]
 800191c:	4a19      	ldr	r2, [pc, #100]	; (8001984 <HAL_DMA_Abort_IT+0x90>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d014      	beq.n	800194c <HAL_DMA_Abort_IT+0x58>
 8001922:	3214      	adds	r2, #20
 8001924:	4293      	cmp	r3, r2
 8001926:	d01f      	beq.n	8001968 <HAL_DMA_Abort_IT+0x74>
 8001928:	3214      	adds	r2, #20
 800192a:	4293      	cmp	r3, r2
 800192c:	d01e      	beq.n	800196c <HAL_DMA_Abort_IT+0x78>
 800192e:	3214      	adds	r2, #20
 8001930:	4293      	cmp	r3, r2
 8001932:	d01e      	beq.n	8001972 <HAL_DMA_Abort_IT+0x7e>
 8001934:	3214      	adds	r2, #20
 8001936:	4293      	cmp	r3, r2
 8001938:	d01e      	beq.n	8001978 <HAL_DMA_Abort_IT+0x84>
 800193a:	3214      	adds	r2, #20
 800193c:	4293      	cmp	r3, r2
 800193e:	d002      	beq.n	8001946 <HAL_DMA_Abort_IT+0x52>
 8001940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001944:	e003      	b.n	800194e <HAL_DMA_Abort_IT+0x5a>
 8001946:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800194a:	e000      	b.n	800194e <HAL_DMA_Abort_IT+0x5a>
 800194c:	2201      	movs	r2, #1
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <HAL_DMA_Abort_IT+0x94>)
 8001950:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001952:	2301      	movs	r3, #1
 8001954:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001958:	2300      	movs	r3, #0
 800195a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800195e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001960:	b16b      	cbz	r3, 800197e <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8001962:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001964:	2000      	movs	r0, #0
 8001966:	e7cd      	b.n	8001904 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001968:	2210      	movs	r2, #16
 800196a:	e7f0      	b.n	800194e <HAL_DMA_Abort_IT+0x5a>
 800196c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001970:	e7ed      	b.n	800194e <HAL_DMA_Abort_IT+0x5a>
 8001972:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001976:	e7ea      	b.n	800194e <HAL_DMA_Abort_IT+0x5a>
 8001978:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800197c:	e7e7      	b.n	800194e <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800197e:	2000      	movs	r0, #0
 8001980:	e7c0      	b.n	8001904 <HAL_DMA_Abort_IT+0x10>
 8001982:	bf00      	nop
 8001984:	40020008 	.word	0x40020008
 8001988:	40020000 	.word	0x40020000

0800198c <HAL_DMA_IRQHandler>:
{
 800198c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800198e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001990:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001992:	6804      	ldr	r4, [r0, #0]
 8001994:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001996:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001998:	2304      	movs	r3, #4
 800199a:	408b      	lsls	r3, r1
 800199c:	4213      	tst	r3, r2
 800199e:	d035      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x80>
 80019a0:	f015 0f04 	tst.w	r5, #4
 80019a4:	d032      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	f013 0f20 	tst.w	r3, #32
 80019ac:	d103      	bne.n	80019b6 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019b6:	6803      	ldr	r3, [r0, #0]
 80019b8:	4a43      	ldr	r2, [pc, #268]	; (8001ac8 <HAL_DMA_IRQHandler+0x13c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d014      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x5c>
 80019be:	3214      	adds	r2, #20
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d018      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x6a>
 80019c4:	3214      	adds	r2, #20
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d017      	beq.n	80019fa <HAL_DMA_IRQHandler+0x6e>
 80019ca:	3214      	adds	r2, #20
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d017      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x74>
 80019d0:	3214      	adds	r2, #20
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d017      	beq.n	8001a06 <HAL_DMA_IRQHandler+0x7a>
 80019d6:	3214      	adds	r2, #20
 80019d8:	4293      	cmp	r3, r2
 80019da:	d002      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x56>
 80019dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019e0:	e003      	b.n	80019ea <HAL_DMA_IRQHandler+0x5e>
 80019e2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80019e6:	e000      	b.n	80019ea <HAL_DMA_IRQHandler+0x5e>
 80019e8:	2204      	movs	r2, #4
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_DMA_IRQHandler+0x140>)
 80019ec:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80019ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019f0:	b103      	cbz	r3, 80019f4 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 80019f2:	4798      	blx	r3
}
 80019f4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	e7f7      	b.n	80019ea <HAL_DMA_IRQHandler+0x5e>
 80019fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fe:	e7f4      	b.n	80019ea <HAL_DMA_IRQHandler+0x5e>
 8001a00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a04:	e7f1      	b.n	80019ea <HAL_DMA_IRQHandler+0x5e>
 8001a06:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a0a:	e7ee      	b.n	80019ea <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	408b      	lsls	r3, r1
 8001a10:	4213      	tst	r3, r2
 8001a12:	d03c      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x102>
 8001a14:	f015 0f02 	tst.w	r5, #2
 8001a18:	d039      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	f013 0f20 	tst.w	r3, #32
 8001a20:	d106      	bne.n	8001a30 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	f023 030a 	bic.w	r3, r3, #10
 8001a28:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a30:	6803      	ldr	r3, [r0, #0]
 8001a32:	4a25      	ldr	r2, [pc, #148]	; (8001ac8 <HAL_DMA_IRQHandler+0x13c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d014      	beq.n	8001a62 <HAL_DMA_IRQHandler+0xd6>
 8001a38:	3214      	adds	r2, #20
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01c      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xec>
 8001a3e:	3214      	adds	r2, #20
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d01b      	beq.n	8001a7c <HAL_DMA_IRQHandler+0xf0>
 8001a44:	3214      	adds	r2, #20
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d01b      	beq.n	8001a82 <HAL_DMA_IRQHandler+0xf6>
 8001a4a:	3214      	adds	r2, #20
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d01b      	beq.n	8001a88 <HAL_DMA_IRQHandler+0xfc>
 8001a50:	3214      	adds	r2, #20
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d002      	beq.n	8001a5c <HAL_DMA_IRQHandler+0xd0>
 8001a56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5a:	e003      	b.n	8001a64 <HAL_DMA_IRQHandler+0xd8>
 8001a5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a60:	e000      	b.n	8001a64 <HAL_DMA_IRQHandler+0xd8>
 8001a62:	2202      	movs	r2, #2
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_DMA_IRQHandler+0x140>)
 8001a66:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001a6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0bf      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8001a74:	4798      	blx	r3
 8001a76:	e7bd      	b.n	80019f4 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a78:	2220      	movs	r2, #32
 8001a7a:	e7f3      	b.n	8001a64 <HAL_DMA_IRQHandler+0xd8>
 8001a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a80:	e7f0      	b.n	8001a64 <HAL_DMA_IRQHandler+0xd8>
 8001a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a86:	e7ed      	b.n	8001a64 <HAL_DMA_IRQHandler+0xd8>
 8001a88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a8c:	e7ea      	b.n	8001a64 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a8e:	2308      	movs	r3, #8
 8001a90:	fa03 f101 	lsl.w	r1, r3, r1
 8001a94:	4211      	tst	r1, r2
 8001a96:	d0ad      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x68>
 8001a98:	f015 0f08 	tst.w	r5, #8
 8001a9c:	d0aa      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	f023 030e 	bic.w	r3, r3, #14
 8001aa4:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001aa6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001aa8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001aaa:	2301      	movs	r3, #1
 8001aac:	fa03 f202 	lsl.w	r2, r3, r2
 8001ab0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ab2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001ab4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001abe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d097      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8001ac4:	4798      	blx	r3
  return;
 8001ac6:	e795      	b.n	80019f4 <HAL_DMA_IRQHandler+0x68>
 8001ac8:	40020008 	.word	0x40020008
 8001acc:	40020000 	.word	0x40020000

08001ad0 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <FLASH_Program_HalfWord+0x14>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001ad6:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <FLASH_Program_HalfWord+0x18>)
 8001ad8:	6913      	ldr	r3, [r2, #16]
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001ae0:	8001      	strh	r1, [r0, #0]
}
 8001ae2:	4770      	bx	lr
 8001ae4:	20000630 	.word	0x20000630
 8001ae8:	40022000 	.word	0x40022000

08001aec <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <FLASH_SetErrorCode+0x6c>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f013 0f10 	tst.w	r3, #16
 8001af4:	d027      	beq.n	8001b46 <FLASH_SetErrorCode+0x5a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001af6:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <FLASH_SetErrorCode+0x70>)
 8001af8:	69d3      	ldr	r3, [r2, #28]
 8001afa:	f043 0302 	orr.w	r3, r3, #2
 8001afe:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001b00:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001b02:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <FLASH_SetErrorCode+0x6c>)
 8001b04:	68d2      	ldr	r2, [r2, #12]
 8001b06:	f012 0f04 	tst.w	r2, #4
 8001b0a:	d006      	beq.n	8001b1a <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001b0c:	4913      	ldr	r1, [pc, #76]	; (8001b5c <FLASH_SetErrorCode+0x70>)
 8001b0e:	69ca      	ldr	r2, [r1, #28]
 8001b10:	f042 0201 	orr.w	r2, r2, #1
 8001b14:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001b16:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <FLASH_SetErrorCode+0x6c>)
 8001b1c:	69d2      	ldr	r2, [r2, #28]
 8001b1e:	f012 0f01 	tst.w	r2, #1
 8001b22:	d009      	beq.n	8001b38 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001b24:	490d      	ldr	r1, [pc, #52]	; (8001b5c <FLASH_SetErrorCode+0x70>)
 8001b26:	69ca      	ldr	r2, [r1, #28]
 8001b28:	f042 0204 	orr.w	r2, r2, #4
 8001b2c:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b2e:	490a      	ldr	r1, [pc, #40]	; (8001b58 <FLASH_SetErrorCode+0x6c>)
 8001b30:	69ca      	ldr	r2, [r1, #28]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001b38:	f240 1201 	movw	r2, #257	; 0x101
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d004      	beq.n	8001b4a <FLASH_SetErrorCode+0x5e>
 8001b40:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <FLASH_SetErrorCode+0x6c>)
 8001b42:	60d3      	str	r3, [r2, #12]
}  
 8001b44:	4770      	bx	lr
  uint32_t flags = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e7db      	b.n	8001b02 <FLASH_SetErrorCode+0x16>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001b4a:	4a03      	ldr	r2, [pc, #12]	; (8001b58 <FLASH_SetErrorCode+0x6c>)
 8001b4c:	69d3      	ldr	r3, [r2, #28]
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	61d3      	str	r3, [r2, #28]
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40022000 	.word	0x40022000
 8001b5c:	20000630 	.word	0x20000630

08001b60 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_FLASH_Unlock+0x2c>)
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b68:	d00d      	beq.n	8001b86 <HAL_FLASH_Unlock+0x26>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_FLASH_Unlock+0x2c>)
 8001b6c:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_FLASH_Unlock+0x30>)
 8001b6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001b70:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001b74:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b7c:	d001      	beq.n	8001b82 <HAL_FLASH_Unlock+0x22>
      status = HAL_ERROR;
 8001b7e:	2001      	movs	r0, #1
}
 8001b80:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8001b82:	2000      	movs	r0, #0
 8001b84:	4770      	bx	lr
 8001b86:	2000      	movs	r0, #0
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40022000 	.word	0x40022000
 8001b90:	45670123 	.word	0x45670123

08001b94 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001b94:	4a03      	ldr	r2, [pc, #12]	; (8001ba4 <HAL_FLASH_Lock+0x10>)
 8001b96:	6913      	ldr	r3, [r2, #16]
 8001b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9c:	6113      	str	r3, [r2, #16]
}
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40022000 	.word	0x40022000

08001ba8 <FLASH_WaitForLastOperation>:
{
 8001ba8:	b538      	push	{r3, r4, r5, lr}
 8001baa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff fb1a 	bl	80011e4 <HAL_GetTick>
 8001bb0:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <FLASH_WaitForLastOperation+0x68>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f013 0f01 	tst.w	r3, #1
 8001bba:	d00a      	beq.n	8001bd2 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8001bbc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001bc0:	d0f7      	beq.n	8001bb2 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001bc2:	b30c      	cbz	r4, 8001c08 <FLASH_WaitForLastOperation+0x60>
 8001bc4:	f7ff fb0e 	bl	80011e4 <HAL_GetTick>
 8001bc8:	1b40      	subs	r0, r0, r5
 8001bca:	42a0      	cmp	r0, r4
 8001bcc:	d9f1      	bls.n	8001bb2 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8001bce:	2003      	movs	r0, #3
 8001bd0:	e019      	b.n	8001c06 <FLASH_WaitForLastOperation+0x5e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <FLASH_WaitForLastOperation+0x68>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f013 0f20 	tst.w	r3, #32
 8001bda:	d002      	beq.n	8001be2 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <FLASH_WaitForLastOperation+0x68>)
 8001bde:	2220      	movs	r2, #32
 8001be0:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <FLASH_WaitForLastOperation+0x68>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f013 0f10 	tst.w	r3, #16
 8001bea:	d109      	bne.n	8001c00 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <FLASH_WaitForLastOperation+0x68>)
 8001bee:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001bf0:	f013 0f01 	tst.w	r3, #1
 8001bf4:	d104      	bne.n	8001c00 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <FLASH_WaitForLastOperation+0x68>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001bfa:	f013 0f04 	tst.w	r3, #4
 8001bfe:	d005      	beq.n	8001c0c <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 8001c00:	f7ff ff74 	bl	8001aec <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c04:	2001      	movs	r0, #1
}
 8001c06:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 8001c08:	2003      	movs	r0, #3
 8001c0a:	e7fc      	b.n	8001c06 <FLASH_WaitForLastOperation+0x5e>
  return HAL_OK;
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	e7fa      	b.n	8001c06 <FLASH_WaitForLastOperation+0x5e>
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_FLASH_Program>:
{
 8001c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8001c18:	4c23      	ldr	r4, [pc, #140]	; (8001ca8 <HAL_FLASH_Program+0x94>)
 8001c1a:	7e24      	ldrb	r4, [r4, #24]
 8001c1c:	2c01      	cmp	r4, #1
 8001c1e:	d041      	beq.n	8001ca4 <HAL_FLASH_Program+0x90>
 8001c20:	461e      	mov	r6, r3
 8001c22:	4690      	mov	r8, r2
 8001c24:	460f      	mov	r7, r1
 8001c26:	4604      	mov	r4, r0
 8001c28:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <HAL_FLASH_Program+0x94>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c32:	f7ff ffb9 	bl	8001ba8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001c36:	4603      	mov	r3, r0
 8001c38:	bb70      	cbnz	r0, 8001c98 <HAL_FLASH_Program+0x84>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001c3a:	2c01      	cmp	r4, #1
 8001c3c:	d029      	beq.n	8001c92 <HAL_FLASH_Program+0x7e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001c3e:	2c02      	cmp	r4, #2
 8001c40:	d024      	beq.n	8001c8c <HAL_FLASH_Program+0x78>
      nbiterations = 4U;
 8001c42:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8001c46:	2400      	movs	r4, #0
 8001c48:	454c      	cmp	r4, r9
 8001c4a:	d225      	bcs.n	8001c98 <HAL_FLASH_Program+0x84>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001c4c:	0121      	lsls	r1, r4, #4
 8001c4e:	f1c1 0220 	rsb	r2, r1, #32
 8001c52:	f1a1 0320 	sub.w	r3, r1, #32
 8001c56:	fa28 f101 	lsr.w	r1, r8, r1
 8001c5a:	fa06 f202 	lsl.w	r2, r6, r2
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	fa26 f303 	lsr.w	r3, r6, r3
 8001c64:	4319      	orrs	r1, r3
 8001c66:	b289      	uxth	r1, r1
 8001c68:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8001c6c:	f7ff ff30 	bl	8001ad0 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c74:	f7ff ff98 	bl	8001ba8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_FLASH_Program+0x98>)
 8001c7a:	691d      	ldr	r5, [r3, #16]
 8001c7c:	f025 0501 	bic.w	r5, r5, #1
 8001c80:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8001c82:	4603      	mov	r3, r0
 8001c84:	b940      	cbnz	r0, 8001c98 <HAL_FLASH_Program+0x84>
    for (index = 0U; index < nbiterations; index++)
 8001c86:	3401      	adds	r4, #1
 8001c88:	b2e4      	uxtb	r4, r4
 8001c8a:	e7dd      	b.n	8001c48 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 8001c8c:	f04f 0902 	mov.w	r9, #2
 8001c90:	e7d9      	b.n	8001c46 <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 8001c92:	f04f 0901 	mov.w	r9, #1
 8001c96:	e7d6      	b.n	8001c46 <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 8001c98:	4a03      	ldr	r2, [pc, #12]	; (8001ca8 <HAL_FLASH_Program+0x94>)
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	7611      	strb	r1, [r2, #24]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e7fa      	b.n	8001c9e <HAL_FLASH_Program+0x8a>
 8001ca8:	20000630 	.word	0x20000630
 8001cac:	40022000 	.word	0x40022000

08001cb0 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <FLASH_MassErase+0x1c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <FLASH_MassErase+0x20>)
 8001cb8:	691a      	ldr	r2, [r3, #16]
 8001cba:	f042 0204 	orr.w	r2, r2, #4
 8001cbe:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cc6:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000630 	.word	0x20000630
 8001cd0:	40022000 	.word	0x40022000

08001cd4 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <FLASH_PageErase+0x1c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <FLASH_PageErase+0x20>)
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	f042 0202 	orr.w	r2, r2, #2
 8001ce2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001ce4:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cec:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001cee:	4770      	bx	lr
 8001cf0:	20000630 	.word	0x20000630
 8001cf4:	40022000 	.word	0x40022000

08001cf8 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8001cf8:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_FLASHEx_Erase+0x9c>)
 8001cfa:	7e1b      	ldrb	r3, [r3, #24]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d046      	beq.n	8001d8e <HAL_FLASHEx_Erase+0x96>
{
 8001d00:	b570      	push	{r4, r5, r6, lr}
 8001d02:	460e      	mov	r6, r1
 8001d04:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8001d06:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_FLASHEx_Erase+0x9c>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d0c:	6803      	ldr	r3, [r0, #0]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d020      	beq.n	8001d54 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d16:	f7ff ff47 	bl	8001ba8 <FLASH_WaitForLastOperation>
 8001d1a:	bb90      	cbnz	r0, 8001d82 <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d20:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8001d22:	68a5      	ldr	r5, [r4, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d24:	2201      	movs	r2, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001d26:	68e1      	ldr	r1, [r4, #12]
 8001d28:	68a3      	ldr	r3, [r4, #8]
 8001d2a:	eb03 2381 	add.w	r3, r3, r1, lsl #10
        for(address = pEraseInit->PageAddress;
 8001d2e:	42ab      	cmp	r3, r5
 8001d30:	d928      	bls.n	8001d84 <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 8001d32:	4628      	mov	r0, r5
 8001d34:	f7ff ffce 	bl	8001cd4 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d3c:	f7ff ff34 	bl	8001ba8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001d40:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <HAL_FLASHEx_Erase+0xa0>)
 8001d42:	6913      	ldr	r3, [r2, #16]
 8001d44:	f023 0302 	bic.w	r3, r3, #2
 8001d48:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	b9b8      	cbnz	r0, 8001d7e <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 8001d4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d52:	e7e8      	b.n	8001d26 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d58:	f7ff ff26 	bl	8001ba8 <FLASH_WaitForLastOperation>
 8001d5c:	b108      	cbz	r0, 8001d62 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d5e:	2201      	movs	r2, #1
 8001d60:	e010      	b.n	8001d84 <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 8001d62:	2001      	movs	r0, #1
 8001d64:	f7ff ffa4 	bl	8001cb0 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d6c:	f7ff ff1c 	bl	8001ba8 <FLASH_WaitForLastOperation>
 8001d70:	4602      	mov	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001d72:	4909      	ldr	r1, [pc, #36]	; (8001d98 <HAL_FLASHEx_Erase+0xa0>)
 8001d74:	690b      	ldr	r3, [r1, #16]
 8001d76:	f023 0304 	bic.w	r3, r3, #4
 8001d7a:	610b      	str	r3, [r1, #16]
 8001d7c:	e002      	b.n	8001d84 <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 8001d7e:	6035      	str	r5, [r6, #0]
            break;
 8001d80:	e000      	b.n	8001d84 <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d82:	2201      	movs	r2, #1
  __HAL_UNLOCK(&pFlash);
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_FLASHEx_Erase+0x9c>)
 8001d86:	2100      	movs	r1, #0
 8001d88:	7619      	strb	r1, [r3, #24]
}
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8001d8e:	2202      	movs	r2, #2
}
 8001d90:	4610      	mov	r0, r2
 8001d92:	4770      	bx	lr
 8001d94:	20000630 	.word	0x20000630
 8001d98:	40022000 	.word	0x40022000

08001d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d9c:	b4f0      	push	{r4, r5, r6, r7}
 8001d9e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001da0:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8001da2:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da4:	e0a2      	b.n	8001eec <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001da6:	2d00      	cmp	r5, #0
 8001da8:	d05a      	beq.n	8001e60 <HAL_GPIO_Init+0xc4>
 8001daa:	2d01      	cmp	r5, #1
 8001dac:	d100      	bne.n	8001db0 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dae:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001db0:	2bff      	cmp	r3, #255	; 0xff
 8001db2:	d869      	bhi.n	8001e88 <HAL_GPIO_Init+0xec>
 8001db4:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001db6:	2bff      	cmp	r3, #255	; 0xff
 8001db8:	d869      	bhi.n	8001e8e <HAL_GPIO_Init+0xf2>
 8001dba:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dbc:	f8dc 4000 	ldr.w	r4, [ip]
 8001dc0:	270f      	movs	r7, #15
 8001dc2:	40af      	lsls	r7, r5
 8001dc4:	ea24 0407 	bic.w	r4, r4, r7
 8001dc8:	fa06 f505 	lsl.w	r5, r6, r5
 8001dcc:	432c      	orrs	r4, r5
 8001dce:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd2:	684c      	ldr	r4, [r1, #4]
 8001dd4:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001dd8:	f000 8087 	beq.w	8001eea <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ddc:	4c5f      	ldr	r4, [pc, #380]	; (8001f5c <HAL_GPIO_Init+0x1c0>)
 8001dde:	69a5      	ldr	r5, [r4, #24]
 8001de0:	f045 0501 	orr.w	r5, r5, #1
 8001de4:	61a5      	str	r5, [r4, #24]
 8001de6:	69a4      	ldr	r4, [r4, #24]
 8001de8:	f004 0401 	and.w	r4, r4, #1
 8001dec:	9401      	str	r4, [sp, #4]
 8001dee:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001df0:	0895      	lsrs	r5, r2, #2
 8001df2:	1caf      	adds	r7, r5, #2
 8001df4:	4c5a      	ldr	r4, [pc, #360]	; (8001f60 <HAL_GPIO_Init+0x1c4>)
 8001df6:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dfa:	f002 0703 	and.w	r7, r2, #3
 8001dfe:	00bf      	lsls	r7, r7, #2
 8001e00:	f04f 0c0f 	mov.w	ip, #15
 8001e04:	fa0c fc07 	lsl.w	ip, ip, r7
 8001e08:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e0c:	4c55      	ldr	r4, [pc, #340]	; (8001f64 <HAL_GPIO_Init+0x1c8>)
 8001e0e:	42a0      	cmp	r0, r4
 8001e10:	d043      	beq.n	8001e9a <HAL_GPIO_Init+0xfe>
 8001e12:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e16:	42a0      	cmp	r0, r4
 8001e18:	f000 8081 	beq.w	8001f1e <HAL_GPIO_Init+0x182>
 8001e1c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e20:	42a0      	cmp	r0, r4
 8001e22:	d07e      	beq.n	8001f22 <HAL_GPIO_Init+0x186>
 8001e24:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e28:	42a0      	cmp	r0, r4
 8001e2a:	d034      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001e2c:	2404      	movs	r4, #4
 8001e2e:	e035      	b.n	8001e9c <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 8001e30:	4f4d      	ldr	r7, [pc, #308]	; (8001f68 <HAL_GPIO_Init+0x1cc>)
 8001e32:	42bd      	cmp	r5, r7
 8001e34:	d014      	beq.n	8001e60 <HAL_GPIO_Init+0xc4>
 8001e36:	d90b      	bls.n	8001e50 <HAL_GPIO_Init+0xb4>
 8001e38:	4f4c      	ldr	r7, [pc, #304]	; (8001f6c <HAL_GPIO_Init+0x1d0>)
 8001e3a:	42bd      	cmp	r5, r7
 8001e3c:	d010      	beq.n	8001e60 <HAL_GPIO_Init+0xc4>
 8001e3e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001e42:	42bd      	cmp	r5, r7
 8001e44:	d00c      	beq.n	8001e60 <HAL_GPIO_Init+0xc4>
 8001e46:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001e4a:	42bd      	cmp	r5, r7
 8001e4c:	d1b0      	bne.n	8001db0 <HAL_GPIO_Init+0x14>
 8001e4e:	e007      	b.n	8001e60 <HAL_GPIO_Init+0xc4>
 8001e50:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001e54:	42bd      	cmp	r5, r7
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0xc4>
 8001e58:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001e5c:	42bd      	cmp	r5, r7
 8001e5e:	d1a7      	bne.n	8001db0 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e60:	688d      	ldr	r5, [r1, #8]
 8001e62:	b17d      	cbz	r5, 8001e84 <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e64:	2d01      	cmp	r5, #1
 8001e66:	d008      	beq.n	8001e7a <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 8001e68:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e6a:	2608      	movs	r6, #8
 8001e6c:	e7a0      	b.n	8001db0 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e6e:	68ce      	ldr	r6, [r1, #12]
 8001e70:	3608      	adds	r6, #8
          break;
 8001e72:	e79d      	b.n	8001db0 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e74:	68ce      	ldr	r6, [r1, #12]
 8001e76:	360c      	adds	r6, #12
          break;
 8001e78:	e79a      	b.n	8001db0 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8001e7a:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e7c:	2608      	movs	r6, #8
 8001e7e:	e797      	b.n	8001db0 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e80:	2600      	movs	r6, #0
 8001e82:	e795      	b.n	8001db0 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e84:	2604      	movs	r6, #4
 8001e86:	e793      	b.n	8001db0 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e88:	f100 0c04 	add.w	ip, r0, #4
 8001e8c:	e793      	b.n	8001db6 <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e8e:	f1a2 0508 	sub.w	r5, r2, #8
 8001e92:	00ad      	lsls	r5, r5, #2
 8001e94:	e792      	b.n	8001dbc <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e96:	2403      	movs	r4, #3
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x100>
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	40bc      	lsls	r4, r7
 8001e9e:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8001ea2:	3502      	adds	r5, #2
 8001ea4:	4f2e      	ldr	r7, [pc, #184]	; (8001f60 <HAL_GPIO_Init+0x1c4>)
 8001ea6:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eaa:	684c      	ldr	r4, [r1, #4]
 8001eac:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8001eb0:	d039      	beq.n	8001f26 <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eb2:	4d2f      	ldr	r5, [pc, #188]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001eb4:	682c      	ldr	r4, [r5, #0]
 8001eb6:	431c      	orrs	r4, r3
 8001eb8:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eba:	684c      	ldr	r4, [r1, #4]
 8001ebc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8001ec0:	d037      	beq.n	8001f32 <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ec2:	4d2b      	ldr	r5, [pc, #172]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001ec4:	686c      	ldr	r4, [r5, #4]
 8001ec6:	431c      	orrs	r4, r3
 8001ec8:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eca:	684c      	ldr	r4, [r1, #4]
 8001ecc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 8001ed0:	d035      	beq.n	8001f3e <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ed2:	4d27      	ldr	r5, [pc, #156]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001ed4:	68ac      	ldr	r4, [r5, #8]
 8001ed6:	431c      	orrs	r4, r3
 8001ed8:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eda:	684c      	ldr	r4, [r1, #4]
 8001edc:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 8001ee0:	d033      	beq.n	8001f4a <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ee2:	4d23      	ldr	r5, [pc, #140]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001ee4:	68ec      	ldr	r4, [r5, #12]
 8001ee6:	4323      	orrs	r3, r4
 8001ee8:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8001eea:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eec:	680b      	ldr	r3, [r1, #0]
 8001eee:	fa33 f402 	lsrs.w	r4, r3, r2
 8001ef2:	d030      	beq.n	8001f56 <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 8001ef4:	2401      	movs	r4, #1
 8001ef6:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef8:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 8001efa:	429c      	cmp	r4, r3
 8001efc:	d1f5      	bne.n	8001eea <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 8001efe:	684d      	ldr	r5, [r1, #4]
 8001f00:	2d12      	cmp	r5, #18
 8001f02:	d0b7      	beq.n	8001e74 <HAL_GPIO_Init+0xd8>
 8001f04:	d894      	bhi.n	8001e30 <HAL_GPIO_Init+0x94>
 8001f06:	2d02      	cmp	r5, #2
 8001f08:	d0b1      	beq.n	8001e6e <HAL_GPIO_Init+0xd2>
 8001f0a:	f67f af4c 	bls.w	8001da6 <HAL_GPIO_Init+0xa>
 8001f0e:	2d03      	cmp	r5, #3
 8001f10:	d0b6      	beq.n	8001e80 <HAL_GPIO_Init+0xe4>
 8001f12:	2d11      	cmp	r5, #17
 8001f14:	f47f af4c 	bne.w	8001db0 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f18:	68ce      	ldr	r6, [r1, #12]
 8001f1a:	3604      	adds	r6, #4
          break;
 8001f1c:	e748      	b.n	8001db0 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f1e:	2401      	movs	r4, #1
 8001f20:	e7bc      	b.n	8001e9c <HAL_GPIO_Init+0x100>
 8001f22:	2402      	movs	r4, #2
 8001f24:	e7ba      	b.n	8001e9c <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f26:	4d12      	ldr	r5, [pc, #72]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001f28:	682c      	ldr	r4, [r5, #0]
 8001f2a:	ea24 0403 	bic.w	r4, r4, r3
 8001f2e:	602c      	str	r4, [r5, #0]
 8001f30:	e7c3      	b.n	8001eba <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f32:	4d0f      	ldr	r5, [pc, #60]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001f34:	686c      	ldr	r4, [r5, #4]
 8001f36:	ea24 0403 	bic.w	r4, r4, r3
 8001f3a:	606c      	str	r4, [r5, #4]
 8001f3c:	e7c5      	b.n	8001eca <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f3e:	4d0c      	ldr	r5, [pc, #48]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001f40:	68ac      	ldr	r4, [r5, #8]
 8001f42:	ea24 0403 	bic.w	r4, r4, r3
 8001f46:	60ac      	str	r4, [r5, #8]
 8001f48:	e7c7      	b.n	8001eda <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f4a:	4d09      	ldr	r5, [pc, #36]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001f4c:	68ec      	ldr	r4, [r5, #12]
 8001f4e:	ea24 0303 	bic.w	r3, r4, r3
 8001f52:	60eb      	str	r3, [r5, #12]
 8001f54:	e7c9      	b.n	8001eea <HAL_GPIO_Init+0x14e>
  }
}
 8001f56:	b002      	add	sp, #8
 8001f58:	bcf0      	pop	{r4, r5, r6, r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010000 	.word	0x40010000
 8001f64:	40010800 	.word	0x40010800
 8001f68:	10210000 	.word	0x10210000
 8001f6c:	10310000 	.word	0x10310000
 8001f70:	40010400 	.word	0x40010400

08001f74 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f74:	6883      	ldr	r3, [r0, #8]
 8001f76:	4219      	tst	r1, r3
 8001f78:	d101      	bne.n	8001f7e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f7a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001f7c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8001f7e:	2001      	movs	r0, #1
 8001f80:	4770      	bx	lr

08001f82 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f82:	b912      	cbnz	r2, 8001f8a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f84:	0409      	lsls	r1, r1, #16
 8001f86:	6101      	str	r1, [r0, #16]
  }
}
 8001f88:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001f8a:	6101      	str	r1, [r0, #16]
 8001f8c:	4770      	bx	lr

08001f8e <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001f8e:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d00d      	beq.n	8001fb2 <HAL_PCD_SetAddress+0x24>
{
 8001f96:	b510      	push	{r4, lr}
 8001f98:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8001fa0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fa4:	6800      	ldr	r0, [r0, #0]
 8001fa6:	f002 f8ca 	bl	800413e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8001fb0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001fb2:	2002      	movs	r0, #2
}
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001fb6:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fb8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001fbc:	d123      	bne.n	8002006 <HAL_PCD_EP_Open+0x50>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fbe:	f001 0507 	and.w	r5, r1, #7
 8001fc2:	016d      	lsls	r5, r5, #5
 8001fc4:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8001fc8:	4404      	add	r4, r0
    ep->is_in = 0U;
 8001fca:	4405      	add	r5, r0
 8001fcc:	2600      	movs	r6, #0
 8001fce:	f885 6129 	strb.w	r6, [r5, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd2:	f001 0107 	and.w	r1, r1, #7
 8001fd6:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 8001fd8:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 8001fda:	70e3      	strb	r3, [r4, #3]

  if (ep->is_in != 0U)
 8001fdc:	7862      	ldrb	r2, [r4, #1]
 8001fde:	b102      	cbz	r2, 8001fe2 <HAL_PCD_EP_Open+0x2c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fe0:	81e1      	strh	r1, [r4, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d01a      	beq.n	800201c <HAL_PCD_EP_Open+0x66>
  {
    ep->data_pid_start = 0U;
  }

  __HAL_LOCK(hpcd);
 8001fe6:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d019      	beq.n	8002022 <HAL_PCD_EP_Open+0x6c>
 8001fee:	4605      	mov	r5, r0
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	6800      	ldr	r0, [r0, #0]
 8001ffa:	f001 fe76 	bl	8003cea <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f885 0228 	strb.w	r0, [r5, #552]	; 0x228

  return ret;
}
 8002004:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002006:	f001 0507 	and.w	r5, r1, #7
 800200a:	016d      	lsls	r5, r5, #5
 800200c:	f105 0428 	add.w	r4, r5, #40	; 0x28
 8002010:	4404      	add	r4, r0
    ep->is_in = 1U;
 8002012:	4405      	add	r5, r0
 8002014:	2601      	movs	r6, #1
 8002016:	f885 6029 	strb.w	r6, [r5, #41]	; 0x29
 800201a:	e7da      	b.n	8001fd2 <HAL_PCD_EP_Open+0x1c>
    ep->data_pid_start = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	7123      	strb	r3, [r4, #4]
 8002020:	e7e1      	b.n	8001fe6 <HAL_PCD_EP_Open+0x30>
  __HAL_LOCK(hpcd);
 8002022:	2002      	movs	r0, #2
 8002024:	e7ee      	b.n	8002004 <HAL_PCD_EP_Open+0x4e>

08002026 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002026:	b570      	push	{r4, r5, r6, lr}
 8002028:	f001 0507 	and.w	r5, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800202c:	016c      	lsls	r4, r5, #5
 800202e:	f504 7194 	add.w	r1, r4, #296	; 0x128
 8002032:	4401      	add	r1, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002034:	4404      	add	r4, r0
 8002036:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 800203a:	f105 020a 	add.w	r2, r5, #10
 800203e:	0152      	lsls	r2, r2, #5
 8002040:	1886      	adds	r6, r0, r2
 8002042:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	6073      	str	r3, [r6, #4]
  ep->is_in = 0U;
 8002048:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
  ep->num = ep_addr & EP_ADDR_MSK;
 800204c:	f884 5128 	strb.w	r5, [r4, #296]	; 0x128

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002050:	b125      	cbz	r5, 800205c <HAL_PCD_EP_Receive+0x36>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002052:	6800      	ldr	r0, [r0, #0]
 8002054:	f002 f893 	bl	800417e <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8002058:	2000      	movs	r0, #0
 800205a:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800205c:	6800      	ldr	r0, [r0, #0]
 800205e:	f002 f88e 	bl	800417e <USB_EPStartXfer>
 8002062:	e7f9      	b.n	8002058 <HAL_PCD_EP_Receive+0x32>

08002064 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002064:	b570      	push	{r4, r5, r6, lr}
 8002066:	f001 0507 	and.w	r5, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800206a:	016c      	lsls	r4, r5, #5
 800206c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8002070:	4401      	add	r1, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002072:	4404      	add	r4, r0
 8002074:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 8002076:	1caa      	adds	r2, r5, #2
 8002078:	0152      	lsls	r2, r2, #5
 800207a:	1886      	adds	r6, r0, r2
 800207c:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	6073      	str	r3, [r6, #4]
  ep->is_in = 1U;
 8002082:	2301      	movs	r3, #1
 8002084:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8002088:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800208c:	b125      	cbz	r5, 8002098 <HAL_PCD_EP_Transmit+0x34>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800208e:	6800      	ldr	r0, [r0, #0]
 8002090:	f002 f875 	bl	800417e <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8002094:	2000      	movs	r0, #0
 8002096:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002098:	6800      	ldr	r0, [r0, #0]
 800209a:	f002 f870 	bl	800417e <USB_EPStartXfer>
 800209e:	e7f9      	b.n	8002094 <HAL_PCD_EP_Transmit+0x30>

080020a0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a2:	4604      	mov	r4, r0
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020a4:	6820      	ldr	r0, [r4, #0]
 80020a6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80020aa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80020ae:	f000 81ad 	beq.w	800240c <PCD_EP_ISR_Handler+0x36c>
  {
    wIstr = hpcd->Instance->ISTR;
 80020b2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80020b6:	b29b      	uxth	r3, r3
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 80020b8:	f013 050f 	ands.w	r5, r3, #15
 80020bc:	f040 80cd 	bne.w	800225a <PCD_EP_ISR_Handler+0x1ba>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80020c0:	f013 0f10 	tst.w	r3, #16
 80020c4:	d058      	beq.n	8002178 <PCD_EP_ISR_Handler+0xd8>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80020c6:	8803      	ldrh	r3, [r0, #0]
 80020c8:	b29b      	uxth	r3, r3

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80020ca:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80020ce:	f040 8089 	bne.w	80021e4 <PCD_EP_ISR_Handler+0x144>
#else
          HAL_PCD_SetupStageCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020d2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80020d6:	d0e5      	beq.n	80020a4 <PCD_EP_ISR_Handler+0x4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020d8:	8803      	ldrh	r3, [r0, #0]
 80020da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020de:	051b      	lsls	r3, r3, #20
 80020e0:	0d1b      	lsrs	r3, r3, #20
 80020e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e6:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020e8:	6820      	ldr	r0, [r4, #0]
 80020ea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80020ee:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 80020f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80020f6:	3306      	adds	r3, #6
 80020f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80020fc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002104:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002108:	b18b      	cbz	r3, 800212e <PCD_EP_ISR_Handler+0x8e>
 800210a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800210e:	b171      	cbz	r1, 800212e <PCD_EP_ISR_Handler+0x8e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002110:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8002114:	f002 f9c3 	bl	800449e <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8002118:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 800211c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8002120:	4413      	add	r3, r2
 8002122:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002126:	2100      	movs	r1, #0
 8002128:	4620      	mov	r0, r4
 800212a:	f005 fd70 	bl	8007c0e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002134:	4413      	add	r3, r2
 8002136:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800213a:	2a00      	cmp	r2, #0
 800213c:	d174      	bne.n	8002228 <PCD_EP_ISR_Handler+0x188>
 800213e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002142:	b292      	uxth	r2, r2
 8002144:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002148:	b292      	uxth	r2, r2
 800214a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800214e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002156:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800215a:	6822      	ldr	r2, [r4, #0]
 800215c:	8813      	ldrh	r3, [r2, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002168:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800216c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002174:	8013      	strh	r3, [r2, #0]
 8002176:	e795      	b.n	80020a4 <PCD_EP_ISR_Handler+0x4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002178:	8803      	ldrh	r3, [r0, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800218c:	b29b      	uxth	r3, r3
 800218e:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002190:	6822      	ldr	r2, [r4, #0]
 8002192:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002196:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800219a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800219e:	3302      	adds	r3, #2
 80021a0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80021a4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80021a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ac:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80021ae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80021b0:	4413      	add	r3, r2
 80021b2:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021b4:	2100      	movs	r1, #0
 80021b6:	4620      	mov	r0, r4
 80021b8:	f005 fd33 	bl	8007c22 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021bc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f43f af6f 	beq.w	80020a4 <PCD_EP_ISR_Handler+0x4>
 80021c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f47f af6b 	bne.w	80020a4 <PCD_EP_ISR_Handler+0x4>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021ce:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80021d2:	6822      	ldr	r2, [r4, #0]
 80021d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d8:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80021e2:	e75f      	b.n	80020a4 <PCD_EP_ISR_Handler+0x4>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021e4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80021e8:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 80021ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80021f0:	3306      	adds	r3, #6
 80021f2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80021f6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80021fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021fe:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002202:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8002206:	f504 710c 	add.w	r1, r4, #560	; 0x230
 800220a:	f002 f948 	bl	800449e <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800220e:	6822      	ldr	r2, [r4, #0]
 8002210:	8813      	ldrh	r3, [r2, #0]
 8002212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002216:	051b      	lsls	r3, r3, #20
 8002218:	0d1b      	lsrs	r3, r3, #20
 800221a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002220:	4620      	mov	r0, r4
 8002222:	f005 fcec 	bl	8007bfe <HAL_PCD_SetupStageCallback>
 8002226:	e73d      	b.n	80020a4 <PCD_EP_ISR_Handler+0x4>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002228:	2a3e      	cmp	r2, #62	; 0x3e
 800222a:	d809      	bhi.n	8002240 <PCD_EP_ISR_Handler+0x1a0>
 800222c:	0851      	lsrs	r1, r2, #1
 800222e:	f012 0f01 	tst.w	r2, #1
 8002232:	d000      	beq.n	8002236 <PCD_EP_ISR_Handler+0x196>
 8002234:	3101      	adds	r1, #1
 8002236:	0289      	lsls	r1, r1, #10
 8002238:	b289      	uxth	r1, r1
 800223a:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 800223e:	e78c      	b.n	800215a <PCD_EP_ISR_Handler+0xba>
 8002240:	0951      	lsrs	r1, r2, #5
 8002242:	f012 0f1f 	tst.w	r2, #31
 8002246:	d100      	bne.n	800224a <PCD_EP_ISR_Handler+0x1aa>
 8002248:	3901      	subs	r1, #1
 800224a:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 800224e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002252:	b292      	uxth	r2, r2
 8002254:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002258:	e77f      	b.n	800215a <PCD_EP_ISR_Handler+0xba>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800225a:	f830 6025 	ldrh.w	r6, [r0, r5, lsl #2]
 800225e:	b2b6      	uxth	r6, r6
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002260:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8002264:	d133      	bne.n	80022ce <PCD_EP_ISR_Handler+0x22e>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002266:	f016 0f80 	tst.w	r6, #128	; 0x80
 800226a:	f43f af1b 	beq.w	80020a4 <PCD_EP_ISR_Handler+0x4>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800226e:	6822      	ldr	r2, [r4, #0]
 8002270:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8002274:	b29b      	uxth	r3, r3
 8002276:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800227a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002286:	b29b      	uxth	r3, r3
 8002288:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800228c:	6822      	ldr	r2, [r4, #0]
 800228e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002292:	eb04 1045 	add.w	r0, r4, r5, lsl #5
 8002296:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 800229a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800229e:	3302      	adds	r3, #2
 80022a0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80022a4:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 80022a8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80022ac:	1cab      	adds	r3, r5, #2
 80022ae:	015b      	lsls	r3, r3, #5
 80022b0:	18e1      	adds	r1, r4, r3
 80022b2:	604a      	str	r2, [r1, #4]
        ep->xfer_buff += ep->xfer_count;
 80022b4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80022b6:	440a      	add	r2, r1
 80022b8:	63c2      	str	r2, [r0, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80022ba:	58e3      	ldr	r3, [r4, r3]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f040 809d 	bne.w	80023fc <PCD_EP_ISR_Handler+0x35c>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022c2:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 80022c6:	4620      	mov	r0, r4
 80022c8:	f005 fcab 	bl	8007c22 <HAL_PCD_DataInStageCallback>
 80022cc:	e6ea      	b.n	80020a4 <PCD_EP_ISR_Handler+0x4>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80022ce:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80022d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d6:	051b      	lsls	r3, r3, #20
 80022d8:	0d1b      	lsrs	r3, r3, #20
 80022da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022de:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80022e2:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80022e6:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80022ea:	b9d3      	cbnz	r3, 8002322 <PCD_EP_ISR_Handler+0x282>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022ec:	6820      	ldr	r0, [r4, #0]
 80022ee:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80022f2:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 80022f6:	f892 2128 	ldrb.w	r2, [r2, #296]	; 0x128
 80022fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80022fe:	3306      	adds	r3, #6
 8002300:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002304:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8002308:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 800230c:	b38f      	cbz	r7, 8002372 <PCD_EP_ISR_Handler+0x2d2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800230e:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8002312:	463b      	mov	r3, r7
 8002314:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8002318:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 800231c:	f002 f8bf 	bl	800449e <USB_ReadPMA>
 8002320:	e027      	b.n	8002372 <PCD_EP_ISR_Handler+0x2d2>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002322:	6820      	ldr	r0, [r4, #0]
 8002324:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8002328:	f893 2128 	ldrb.w	r2, [r3, #296]	; 0x128
 800232c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002330:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002334:	d043      	beq.n	80023be <PCD_EP_ISR_Handler+0x31e>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002336:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800233a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800233e:	3302      	adds	r3, #2
 8002340:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002344:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8002348:	f3c7 0709 	ubfx	r7, r7, #0, #10
            if (count != 0U)
 800234c:	bb6f      	cbnz	r7, 80023aa <PCD_EP_ISR_Handler+0x30a>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800234e:	6822      	ldr	r2, [r4, #0]
 8002350:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8002354:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8002358:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800235c:	b29b      	uxth	r3, r3
 800235e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800236e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count += count;
 8002372:	f105 030a 	add.w	r3, r5, #10
 8002376:	015b      	lsls	r3, r3, #5
 8002378:	18e1      	adds	r1, r4, r3
 800237a:	684a      	ldr	r2, [r1, #4]
 800237c:	443a      	add	r2, r7
 800237e:	604a      	str	r2, [r1, #4]
        ep->xfer_buff += count;
 8002380:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8002384:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
 8002388:	443a      	add	r2, r7
 800238a:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800238e:	58e3      	ldr	r3, [r4, r3]
 8002390:	b11b      	cbz	r3, 800239a <PCD_EP_ISR_Handler+0x2fa>
 8002392:	f8d1 1138 	ldr.w	r1, [r1, #312]	; 0x138
 8002396:	428f      	cmp	r7, r1
 8002398:	d228      	bcs.n	80023ec <PCD_EP_ISR_Handler+0x34c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800239a:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 800239e:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 80023a2:	4620      	mov	r0, r4
 80023a4:	f005 fc33 	bl	8007c0e <HAL_PCD_DataOutStageCallback>
 80023a8:	e75d      	b.n	8002266 <PCD_EP_ISR_Handler+0x1c6>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023aa:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 80023ae:	463b      	mov	r3, r7
 80023b0:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
 80023b4:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80023b8:	f002 f871 	bl	800449e <USB_ReadPMA>
 80023bc:	e7c7      	b.n	800234e <PCD_EP_ISR_Handler+0x2ae>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023be:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80023c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80023c6:	3306      	adds	r3, #6
 80023c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80023cc:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 80023d0:	f3c7 0709 	ubfx	r7, r7, #0, #10
            if (count != 0U)
 80023d4:	2f00      	cmp	r7, #0
 80023d6:	d0ba      	beq.n	800234e <PCD_EP_ISR_Handler+0x2ae>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023d8:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 80023dc:	463b      	mov	r3, r7
 80023de:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 80023e2:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80023e6:	f002 f85a 	bl	800449e <USB_ReadPMA>
 80023ea:	e7b0      	b.n	800234e <PCD_EP_ISR_Handler+0x2ae>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80023ec:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 80023f0:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 80023f4:	4620      	mov	r0, r4
 80023f6:	f7ff fe16 	bl	8002026 <HAL_PCD_EP_Receive>
 80023fa:	e734      	b.n	8002266 <PCD_EP_ISR_Handler+0x1c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80023fc:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8002400:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002404:	4620      	mov	r0, r4
 8002406:	f7ff fe2d 	bl	8002064 <HAL_PCD_EP_Transmit>
 800240a:	e64b      	b.n	80020a4 <PCD_EP_ISR_Handler+0x4>
        }
      }
    }
  }
  return HAL_OK;
}
 800240c:	2000      	movs	r0, #0
 800240e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002410 <HAL_PCD_IRQHandler>:
{
 8002410:	b510      	push	{r4, lr}
 8002412:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002414:	6800      	ldr	r0, [r0, #0]
 8002416:	f001 fe98 	bl	800414a <USB_ReadInterrupts>
 800241a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800241e:	d145      	bne.n	80024ac <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002420:	6820      	ldr	r0, [r4, #0]
 8002422:	f001 fe92 	bl	800414a <USB_ReadInterrupts>
 8002426:	f410 6f80 	tst.w	r0, #1024	; 0x400
 800242a:	d143      	bne.n	80024b4 <HAL_PCD_IRQHandler+0xa4>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800242c:	6820      	ldr	r0, [r4, #0]
 800242e:	f001 fe8c 	bl	800414a <USB_ReadInterrupts>
 8002432:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8002436:	d008      	beq.n	800244a <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002438:	6822      	ldr	r2, [r4, #0]
 800243a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800243e:	b29b      	uxth	r3, r3
 8002440:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002444:	b29b      	uxth	r3, r3
 8002446:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800244a:	6820      	ldr	r0, [r4, #0]
 800244c:	f001 fe7d 	bl	800414a <USB_ReadInterrupts>
 8002450:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8002454:	d008      	beq.n	8002468 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002456:	6822      	ldr	r2, [r4, #0]
 8002458:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800245c:	b29b      	uxth	r3, r3
 800245e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002462:	b29b      	uxth	r3, r3
 8002464:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002468:	6820      	ldr	r0, [r4, #0]
 800246a:	f001 fe6e 	bl	800414a <USB_ReadInterrupts>
 800246e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8002472:	d130      	bne.n	80024d6 <HAL_PCD_IRQHandler+0xc6>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002474:	6820      	ldr	r0, [r4, #0]
 8002476:	f001 fe68 	bl	800414a <USB_ReadInterrupts>
 800247a:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800247e:	d149      	bne.n	8002514 <HAL_PCD_IRQHandler+0x104>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002480:	6820      	ldr	r0, [r4, #0]
 8002482:	f001 fe62 	bl	800414a <USB_ReadInterrupts>
 8002486:	f410 7f00 	tst.w	r0, #512	; 0x200
 800248a:	d16d      	bne.n	8002568 <HAL_PCD_IRQHandler+0x158>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800248c:	6820      	ldr	r0, [r4, #0]
 800248e:	f001 fe5c 	bl	800414a <USB_ReadInterrupts>
 8002492:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002496:	d008      	beq.n	80024aa <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002498:	6822      	ldr	r2, [r4, #0]
 800249a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800249e:	b29b      	uxth	r3, r3
 80024a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80024aa:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 80024ac:	4620      	mov	r0, r4
 80024ae:	f7ff fdf7 	bl	80020a0 <PCD_EP_ISR_Handler>
 80024b2:	e7b5      	b.n	8002420 <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80024b4:	6822      	ldr	r2, [r4, #0]
 80024b6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80024c6:	4620      	mov	r0, r4
 80024c8:	f005 fbba 	bl	8007c40 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80024cc:	2100      	movs	r1, #0
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7ff fd5d 	bl	8001f8e <HAL_PCD_SetAddress>
 80024d4:	e7aa      	b.n	800242c <HAL_PCD_IRQHandler+0x1c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80024d6:	6822      	ldr	r2, [r4, #0]
 80024d8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f023 0304 	bic.w	r3, r3, #4
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80024e8:	6822      	ldr	r2, [r4, #0]
 80024ea:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	f023 0308 	bic.w	r3, r3, #8
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80024fa:	4620      	mov	r0, r4
 80024fc:	f005 fbc2 	bl	8007c84 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002500:	6822      	ldr	r2, [r4, #0]
 8002502:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002506:	b29b      	uxth	r3, r3
 8002508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800250c:	b29b      	uxth	r3, r3
 800250e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8002512:	e7af      	b.n	8002474 <HAL_PCD_IRQHandler+0x64>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002514:	6822      	ldr	r2, [r4, #0]
 8002516:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800251a:	f043 0308 	orr.w	r3, r3, #8
 800251e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002522:	6822      	ldr	r2, [r4, #0]
 8002524:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002528:	b29b      	uxth	r3, r3
 800252a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800252e:	b29b      	uxth	r3, r3
 8002530:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002534:	6822      	ldr	r2, [r4, #0]
 8002536:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002542:	6820      	ldr	r0, [r4, #0]
 8002544:	f001 fe01 	bl	800414a <USB_ReadInterrupts>
 8002548:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800254c:	d008      	beq.n	8002560 <HAL_PCD_IRQHandler+0x150>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800254e:	6822      	ldr	r2, [r4, #0]
 8002550:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002554:	b29b      	uxth	r3, r3
 8002556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800255a:	b29b      	uxth	r3, r3
 800255c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8002560:	4620      	mov	r0, r4
 8002562:	f005 fb7f 	bl	8007c64 <HAL_PCD_SuspendCallback>
 8002566:	e78b      	b.n	8002480 <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002568:	6822      	ldr	r2, [r4, #0]
 800256a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800256e:	b29b      	uxth	r3, r3
 8002570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002574:	b29b      	uxth	r3, r3
 8002576:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800257a:	4620      	mov	r0, r4
 800257c:	f005 fb5a 	bl	8007c34 <HAL_PCD_SOFCallback>
 8002580:	e784      	b.n	800248c <HAL_PCD_IRQHandler+0x7c>

08002582 <HAL_PCD_EP_SetStall>:
{
 8002582:	b538      	push	{r3, r4, r5, lr}
 8002584:	f001 0507 	and.w	r5, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002588:	6843      	ldr	r3, [r0, #4]
 800258a:	429d      	cmp	r5, r3
 800258c:	d82c      	bhi.n	80025e8 <HAL_PCD_EP_SetStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 800258e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002592:	d11a      	bne.n	80025ca <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 8002594:	014b      	lsls	r3, r1, #5
 8002596:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800259a:	4401      	add	r1, r0
    ep->is_in = 0U;
 800259c:	4403      	add	r3, r0
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
  ep->is_stall = 1U;
 80025a4:	2301      	movs	r3, #1
 80025a6:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025a8:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80025aa:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d01c      	beq.n	80025ec <HAL_PCD_EP_SetStall+0x6a>
 80025b2:	4604      	mov	r4, r0
 80025b4:	2301      	movs	r3, #1
 80025b6:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025ba:	6800      	ldr	r0, [r0, #0]
 80025bc:	f001 fd49 	bl	8004052 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025c0:	b165      	cbz	r5, 80025dc <HAL_PCD_EP_SetStall+0x5a>
  __HAL_UNLOCK(hpcd);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 80025c8:	e00f      	b.n	80025ea <HAL_PCD_EP_SetStall+0x68>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ca:	016b      	lsls	r3, r5, #5
 80025cc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80025d0:	4401      	add	r1, r0
    ep->is_in = 1U;
 80025d2:	4403      	add	r3, r0
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80025da:	e7e3      	b.n	80025a4 <HAL_PCD_EP_SetStall+0x22>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80025dc:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80025e0:	6820      	ldr	r0, [r4, #0]
 80025e2:	f001 fdb5 	bl	8004150 <USB_EP0_OutStart>
 80025e6:	e7ec      	b.n	80025c2 <HAL_PCD_EP_SetStall+0x40>
    return HAL_ERROR;
 80025e8:	2001      	movs	r0, #1
}
 80025ea:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80025ec:	2002      	movs	r0, #2
 80025ee:	e7fc      	b.n	80025ea <HAL_PCD_EP_SetStall+0x68>

080025f0 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025f0:	f001 020f 	and.w	r2, r1, #15
 80025f4:	6843      	ldr	r3, [r0, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d82d      	bhi.n	8002656 <HAL_PCD_EP_ClrStall+0x66>
{
 80025fa:	b510      	push	{r4, lr}
  if ((0x80U & ep_addr) == 0x80U)
 80025fc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002600:	d11e      	bne.n	8002640 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002602:	f001 0307 	and.w	r3, r1, #7
 8002606:	015b      	lsls	r3, r3, #5
 8002608:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800260c:	4402      	add	r2, r0
    ep->is_in = 0U;
 800260e:	4403      	add	r3, r0
 8002610:	2400      	movs	r4, #0
 8002612:	f883 4129 	strb.w	r4, [r3, #297]	; 0x129
  ep->is_stall = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	7093      	strb	r3, [r2, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800261a:	f001 0307 	and.w	r3, r1, #7
 800261e:	7013      	strb	r3, [r2, #0]
  __HAL_LOCK(hpcd);
 8002620:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8002624:	2b01      	cmp	r3, #1
 8002626:	d018      	beq.n	800265a <HAL_PCD_EP_ClrStall+0x6a>
 8002628:	4604      	mov	r4, r0
 800262a:	2301      	movs	r3, #1
 800262c:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002630:	4611      	mov	r1, r2
 8002632:	6800      	ldr	r0, [r0, #0]
 8002634:	f001 fd32 	bl	800409c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002638:	2000      	movs	r0, #0
 800263a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 800263e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002640:	f001 0307 	and.w	r3, r1, #7
 8002644:	015b      	lsls	r3, r3, #5
 8002646:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800264a:	4402      	add	r2, r0
    ep->is_in = 1U;
 800264c:	4403      	add	r3, r0
 800264e:	2401      	movs	r4, #1
 8002650:	f883 4029 	strb.w	r4, [r3, #41]	; 0x29
 8002654:	e7df      	b.n	8002616 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 8002656:	2001      	movs	r0, #1
}
 8002658:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800265a:	2002      	movs	r0, #2
 800265c:	e7ef      	b.n	800263e <HAL_PCD_EP_ClrStall+0x4e>
	...

08002660 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002660:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <RCC_Delay+0x24>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a08      	ldr	r2, [pc, #32]	; (8002688 <RCC_Delay+0x28>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	0a5b      	lsrs	r3, r3, #9
 800266e:	fb00 f003 	mul.w	r0, r0, r3
 8002672:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8002674:	bf00      	nop
  }
  while (Delay --);
 8002676:	9b01      	ldr	r3, [sp, #4]
 8002678:	1e5a      	subs	r2, r3, #1
 800267a:	9201      	str	r2, [sp, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f9      	bne.n	8002674 <RCC_Delay+0x14>
}
 8002680:	b002      	add	sp, #8
 8002682:	4770      	bx	lr
 8002684:	20000078 	.word	0x20000078
 8002688:	10624dd3 	.word	0x10624dd3

0800268c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800268c:	2800      	cmp	r0, #0
 800268e:	f000 81f5 	beq.w	8002a7c <HAL_RCC_OscConfig+0x3f0>
{
 8002692:	b570      	push	{r4, r5, r6, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002698:	6803      	ldr	r3, [r0, #0]
 800269a:	f013 0f01 	tst.w	r3, #1
 800269e:	d02c      	beq.n	80026fa <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026a0:	4bab      	ldr	r3, [pc, #684]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026ac:	4ba8      	ldr	r3, [pc, #672]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d012      	beq.n	80026de <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b8:	6863      	ldr	r3, [r4, #4]
 80026ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026be:	d041      	beq.n	8002744 <HAL_RCC_OscConfig+0xb8>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d155      	bne.n	8002770 <HAL_RCC_OscConfig+0xe4>
 80026c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026c8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e037      	b.n	800274e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026de:	4b9c      	ldr	r3, [pc, #624]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80026e6:	d0e7      	beq.n	80026b8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	4b99      	ldr	r3, [pc, #612]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80026f0:	d003      	beq.n	80026fa <HAL_RCC_OscConfig+0x6e>
 80026f2:	6863      	ldr	r3, [r4, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 81c3 	beq.w	8002a80 <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	f013 0f02 	tst.w	r3, #2
 8002700:	d076      	beq.n	80027f0 <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002702:	4b93      	ldr	r3, [pc, #588]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f013 0f0c 	tst.w	r3, #12
 800270a:	d05f      	beq.n	80027cc <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800270c:	4b90      	ldr	r3, [pc, #576]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d054      	beq.n	80027c2 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002718:	6923      	ldr	r3, [r4, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 808a 	beq.w	8002834 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8002720:	4b8c      	ldr	r3, [pc, #560]	; (8002954 <HAL_RCC_OscConfig+0x2c8>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002726:	f7fe fd5d 	bl	80011e4 <HAL_GetTick>
 800272a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	4b88      	ldr	r3, [pc, #544]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f013 0f02 	tst.w	r3, #2
 8002734:	d175      	bne.n	8002822 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002736:	f7fe fd55 	bl	80011e4 <HAL_GetTick>
 800273a:	1b40      	subs	r0, r0, r5
 800273c:	2802      	cmp	r0, #2
 800273e:	d9f5      	bls.n	800272c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8002740:	2003      	movs	r0, #3
 8002742:	e1a0      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	4a82      	ldr	r2, [pc, #520]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 8002746:	6813      	ldr	r3, [r2, #0]
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800274e:	6863      	ldr	r3, [r4, #4]
 8002750:	b343      	cbz	r3, 80027a4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8002752:	f7fe fd47 	bl	80011e4 <HAL_GetTick>
 8002756:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002758:	4b7d      	ldr	r3, [pc, #500]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002760:	d1cb      	bne.n	80026fa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002762:	f7fe fd3f 	bl	80011e4 <HAL_GetTick>
 8002766:	1b40      	subs	r0, r0, r5
 8002768:	2864      	cmp	r0, #100	; 0x64
 800276a:	d9f5      	bls.n	8002758 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800276c:	2003      	movs	r0, #3
 800276e:	e18a      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002774:	d009      	beq.n	800278a <HAL_RCC_OscConfig+0xfe>
 8002776:	4b76      	ldr	r3, [pc, #472]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e7e1      	b.n	800274e <HAL_RCC_OscConfig+0xc2>
 800278a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800278e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e7d4      	b.n	800274e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80027a4:	f7fe fd1e 	bl	80011e4 <HAL_GetTick>
 80027a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	4b69      	ldr	r3, [pc, #420]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027b2:	d0a2      	beq.n	80026fa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b4:	f7fe fd16 	bl	80011e4 <HAL_GetTick>
 80027b8:	1b40      	subs	r0, r0, r5
 80027ba:	2864      	cmp	r0, #100	; 0x64
 80027bc:	d9f5      	bls.n	80027aa <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80027be:	2003      	movs	r0, #3
 80027c0:	e161      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027c2:	4b63      	ldr	r3, [pc, #396]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80027ca:	d1a5      	bne.n	8002718 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027cc:	4b60      	ldr	r3, [pc, #384]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f013 0f02 	tst.w	r3, #2
 80027d4:	d004      	beq.n	80027e0 <HAL_RCC_OscConfig+0x154>
 80027d6:	6923      	ldr	r3, [r4, #16]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 80027dc:	2001      	movs	r0, #1
 80027de:	e152      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	4a5b      	ldr	r2, [pc, #364]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 80027e2:	6813      	ldr	r3, [r2, #0]
 80027e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80027e8:	6961      	ldr	r1, [r4, #20]
 80027ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027ee:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	f013 0f08 	tst.w	r3, #8
 80027f6:	d032      	beq.n	800285e <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f8:	69a3      	ldr	r3, [r4, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d05b      	beq.n	80028b6 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80027fe:	4b56      	ldr	r3, [pc, #344]	; (8002958 <HAL_RCC_OscConfig+0x2cc>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002804:	f7fe fcee 	bl	80011e4 <HAL_GetTick>
 8002808:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	4b51      	ldr	r3, [pc, #324]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	f013 0f02 	tst.w	r3, #2
 8002812:	d121      	bne.n	8002858 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002814:	f7fe fce6 	bl	80011e4 <HAL_GetTick>
 8002818:	1b40      	subs	r0, r0, r5
 800281a:	2802      	cmp	r0, #2
 800281c:	d9f5      	bls.n	800280a <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 800281e:	2003      	movs	r0, #3
 8002820:	e131      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002822:	4a4b      	ldr	r2, [pc, #300]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 8002824:	6813      	ldr	r3, [r2, #0]
 8002826:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800282a:	6961      	ldr	r1, [r4, #20]
 800282c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e7dd      	b.n	80027f0 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8002834:	4b47      	ldr	r3, [pc, #284]	; (8002954 <HAL_RCC_OscConfig+0x2c8>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800283a:	f7fe fcd3 	bl	80011e4 <HAL_GetTick>
 800283e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002840:	4b43      	ldr	r3, [pc, #268]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f013 0f02 	tst.w	r3, #2
 8002848:	d0d2      	beq.n	80027f0 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284a:	f7fe fccb 	bl	80011e4 <HAL_GetTick>
 800284e:	1b40      	subs	r0, r0, r5
 8002850:	2802      	cmp	r0, #2
 8002852:	d9f5      	bls.n	8002840 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002854:	2003      	movs	r0, #3
 8002856:	e116      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 8002858:	2001      	movs	r0, #1
 800285a:	f7ff ff01 	bl	8002660 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	f013 0f04 	tst.w	r3, #4
 8002864:	f000 8098 	beq.w	8002998 <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002868:	4b39      	ldr	r3, [pc, #228]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002870:	d133      	bne.n	80028da <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002872:	4b37      	ldr	r3, [pc, #220]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800287a:	61da      	str	r2, [r3, #28]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002886:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	4b34      	ldr	r3, [pc, #208]	; (800295c <HAL_RCC_OscConfig+0x2d0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002890:	d025      	beq.n	80028de <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002892:	68e3      	ldr	r3, [r4, #12]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d036      	beq.n	8002906 <HAL_RCC_OscConfig+0x27a>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d14c      	bne.n	8002936 <HAL_RCC_OscConfig+0x2aa>
 800289c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80028a4:	6a1a      	ldr	r2, [r3, #32]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	621a      	str	r2, [r3, #32]
 80028ac:	6a1a      	ldr	r2, [r3, #32]
 80028ae:	f022 0204 	bic.w	r2, r2, #4
 80028b2:	621a      	str	r2, [r3, #32]
 80028b4:	e02c      	b.n	8002910 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 80028b6:	4b28      	ldr	r3, [pc, #160]	; (8002958 <HAL_RCC_OscConfig+0x2cc>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80028bc:	f7fe fc92 	bl	80011e4 <HAL_GetTick>
 80028c0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	f013 0f02 	tst.w	r3, #2
 80028ca:	d0c8      	beq.n	800285e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028cc:	f7fe fc8a 	bl	80011e4 <HAL_GetTick>
 80028d0:	1b40      	subs	r0, r0, r5
 80028d2:	2802      	cmp	r0, #2
 80028d4:	d9f5      	bls.n	80028c2 <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 80028d6:	2003      	movs	r0, #3
 80028d8:	e0d5      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 80028da:	2500      	movs	r5, #0
 80028dc:	e7d4      	b.n	8002888 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028de:	4a1f      	ldr	r2, [pc, #124]	; (800295c <HAL_RCC_OscConfig+0x2d0>)
 80028e0:	6813      	ldr	r3, [r2, #0]
 80028e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80028e8:	f7fe fc7c 	bl	80011e4 <HAL_GetTick>
 80028ec:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_RCC_OscConfig+0x2d0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80028f6:	d1cc      	bne.n	8002892 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f8:	f7fe fc74 	bl	80011e4 <HAL_GetTick>
 80028fc:	1b80      	subs	r0, r0, r6
 80028fe:	2864      	cmp	r0, #100	; 0x64
 8002900:	d9f5      	bls.n	80028ee <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 8002902:	2003      	movs	r0, #3
 8002904:	e0bf      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002906:	4a12      	ldr	r2, [pc, #72]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 8002908:	6a13      	ldr	r3, [r2, #32]
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002910:	68e3      	ldr	r3, [r4, #12]
 8002912:	b37b      	cbz	r3, 8002974 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 8002914:	f7fe fc66 	bl	80011e4 <HAL_GetTick>
 8002918:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f013 0f02 	tst.w	r3, #2
 8002922:	d138      	bne.n	8002996 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7fe fc5e 	bl	80011e4 <HAL_GetTick>
 8002928:	1b80      	subs	r0, r0, r6
 800292a:	f241 3388 	movw	r3, #5000	; 0x1388
 800292e:	4298      	cmp	r0, r3
 8002930:	d9f3      	bls.n	800291a <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 8002932:	2003      	movs	r0, #3
 8002934:	e0a7      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002936:	2b05      	cmp	r3, #5
 8002938:	d012      	beq.n	8002960 <HAL_RCC_OscConfig+0x2d4>
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_OscConfig+0x2c4>)
 800293c:	6a1a      	ldr	r2, [r3, #32]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	621a      	str	r2, [r3, #32]
 8002944:	6a1a      	ldr	r2, [r3, #32]
 8002946:	f022 0204 	bic.w	r2, r2, #4
 800294a:	621a      	str	r2, [r3, #32]
 800294c:	e7e0      	b.n	8002910 <HAL_RCC_OscConfig+0x284>
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	42420000 	.word	0x42420000
 8002958:	42420480 	.word	0x42420480
 800295c:	40007000 	.word	0x40007000
 8002960:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <HAL_RCC_OscConfig+0x408>)
 8002962:	6a1a      	ldr	r2, [r3, #32]
 8002964:	f042 0204 	orr.w	r2, r2, #4
 8002968:	621a      	str	r2, [r3, #32]
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	621a      	str	r2, [r3, #32]
 8002972:	e7cd      	b.n	8002910 <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 8002974:	f7fe fc36 	bl	80011e4 <HAL_GetTick>
 8002978:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297a:	4b46      	ldr	r3, [pc, #280]	; (8002a94 <HAL_RCC_OscConfig+0x408>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	f013 0f02 	tst.w	r3, #2
 8002982:	d008      	beq.n	8002996 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7fe fc2e 	bl	80011e4 <HAL_GetTick>
 8002988:	1b80      	subs	r0, r0, r6
 800298a:	f241 3388 	movw	r3, #5000	; 0x1388
 800298e:	4298      	cmp	r0, r3
 8002990:	d9f3      	bls.n	800297a <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 8002992:	2003      	movs	r0, #3
 8002994:	e077      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 8002996:	b9e5      	cbnz	r5, 80029d2 <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002998:	69e3      	ldr	r3, [r4, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d072      	beq.n	8002a84 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800299e:	4a3d      	ldr	r2, [pc, #244]	; (8002a94 <HAL_RCC_OscConfig+0x408>)
 80029a0:	6852      	ldr	r2, [r2, #4]
 80029a2:	f002 020c 	and.w	r2, r2, #12
 80029a6:	2a08      	cmp	r2, #8
 80029a8:	d056      	beq.n	8002a58 <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d017      	beq.n	80029de <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 80029ae:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <HAL_RCC_OscConfig+0x40c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029b4:	f7fe fc16 	bl	80011e4 <HAL_GetTick>
 80029b8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ba:	4b36      	ldr	r3, [pc, #216]	; (8002a94 <HAL_RCC_OscConfig+0x408>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029c2:	d047      	beq.n	8002a54 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fc0e 	bl	80011e4 <HAL_GetTick>
 80029c8:	1b00      	subs	r0, r0, r4
 80029ca:	2802      	cmp	r0, #2
 80029cc:	d9f5      	bls.n	80029ba <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 80029ce:	2003      	movs	r0, #3
 80029d0:	e059      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d2:	4a30      	ldr	r2, [pc, #192]	; (8002a94 <HAL_RCC_OscConfig+0x408>)
 80029d4:	69d3      	ldr	r3, [r2, #28]
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029da:	61d3      	str	r3, [r2, #28]
 80029dc:	e7dc      	b.n	8002998 <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <HAL_RCC_OscConfig+0x40c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029e4:	f7fe fbfe 	bl	80011e4 <HAL_GetTick>
 80029e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ea:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <HAL_RCC_OscConfig+0x408>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029f2:	d006      	beq.n	8002a02 <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe fbf6 	bl	80011e4 <HAL_GetTick>
 80029f8:	1b40      	subs	r0, r0, r5
 80029fa:	2802      	cmp	r0, #2
 80029fc:	d9f5      	bls.n	80029ea <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80029fe:	2003      	movs	r0, #3
 8002a00:	e041      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a02:	6a23      	ldr	r3, [r4, #32]
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a08:	d01a      	beq.n	8002a40 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a0a:	4922      	ldr	r1, [pc, #136]	; (8002a94 <HAL_RCC_OscConfig+0x408>)
 8002a0c:	684b      	ldr	r3, [r1, #4]
 8002a0e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002a12:	6a22      	ldr	r2, [r4, #32]
 8002a14:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002a16:	4302      	orrs	r2, r0
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <HAL_RCC_OscConfig+0x40c>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a22:	f7fe fbdf 	bl	80011e4 <HAL_GetTick>
 8002a26:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a28:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <HAL_RCC_OscConfig+0x408>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a30:	d10e      	bne.n	8002a50 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe fbd7 	bl	80011e4 <HAL_GetTick>
 8002a36:	1b00      	subs	r0, r0, r4
 8002a38:	2802      	cmp	r0, #2
 8002a3a:	d9f5      	bls.n	8002a28 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	e022      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a40:	4a14      	ldr	r2, [pc, #80]	; (8002a94 <HAL_RCC_OscConfig+0x408>)
 8002a42:	6853      	ldr	r3, [r2, #4]
 8002a44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a48:	68a1      	ldr	r1, [r4, #8]
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	6053      	str	r3, [r2, #4]
 8002a4e:	e7dc      	b.n	8002a0a <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 8002a50:	2000      	movs	r0, #0
 8002a52:	e018      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
 8002a54:	2000      	movs	r0, #0
 8002a56:	e016      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d016      	beq.n	8002a8a <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_RCC_OscConfig+0x408>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a60:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002a64:	6a22      	ldr	r2, [r4, #32]
 8002a66:	4291      	cmp	r1, r2
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	e00b      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a6e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a72:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 8002a78:	2001      	movs	r0, #1
 8002a7a:	e004      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 8002a7c:	2001      	movs	r0, #1
}
 8002a7e:	4770      	bx	lr
        return HAL_ERROR;
 8002a80:	2001      	movs	r0, #1
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8002a84:	2000      	movs	r0, #0
}
 8002a86:	b002      	add	sp, #8
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	e7fb      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8002a8e:	2000      	movs	r0, #0
 8002a90:	e7f9      	b.n	8002a86 <HAL_RCC_OscConfig+0x3fa>
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	42420060 	.word	0x42420060

08002a9c <HAL_RCC_GetSysClockFreq>:
{
 8002a9c:	b410      	push	{r4}
 8002a9e:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aa0:	4c16      	ldr	r4, [pc, #88]	; (8002afc <HAL_RCC_GetSysClockFreq+0x60>)
 8002aa2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002aa6:	f10d 0c18 	add.w	ip, sp, #24
 8002aaa:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002aae:	8a23      	ldrh	r3, [r4, #16]
 8002ab0:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x64>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002ab8:	f003 020c 	and.w	r2, r3, #12
 8002abc:	2a08      	cmp	r2, #8
 8002abe:	d11a      	bne.n	8002af6 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ac0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002ac4:	4462      	add	r2, ip
 8002ac6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002ace:	d105      	bne.n	8002adc <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ad0:	480c      	ldr	r0, [pc, #48]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x68>)
 8002ad2:	fb00 f002 	mul.w	r0, r0, r2
}
 8002ad6:	b007      	add	sp, #28
 8002ad8:	bc10      	pop	{r4}
 8002ada:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x64>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002ae4:	4463      	add	r3, ip
 8002ae6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aea:	4807      	ldr	r0, [pc, #28]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002aec:	fb00 f002 	mul.w	r0, r0, r2
 8002af0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002af4:	e7ef      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8002af6:	4804      	ldr	r0, [pc, #16]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8002af8:	e7ed      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002afa:	bf00      	nop
 8002afc:	0800b970 	.word	0x0800b970
 8002b00:	40021000 	.word	0x40021000
 8002b04:	003d0900 	.word	0x003d0900
 8002b08:	007a1200 	.word	0x007a1200

08002b0c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	f000 80a3 	beq.w	8002c58 <HAL_RCC_ClockConfig+0x14c>
{
 8002b12:	b570      	push	{r4, r5, r6, lr}
 8002b14:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b16:	4b52      	ldr	r3, [pc, #328]	; (8002c60 <HAL_RCC_ClockConfig+0x154>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	428b      	cmp	r3, r1
 8002b20:	d20c      	bcs.n	8002b3c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4a4f      	ldr	r2, [pc, #316]	; (8002c60 <HAL_RCC_ClockConfig+0x154>)
 8002b24:	6813      	ldr	r3, [r2, #0]
 8002b26:	f023 0307 	bic.w	r3, r3, #7
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	6813      	ldr	r3, [r2, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	428b      	cmp	r3, r1
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8002b38:	2001      	movs	r0, #1
}
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	f013 0f02 	tst.w	r3, #2
 8002b42:	d017      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	f013 0f04 	tst.w	r3, #4
 8002b48:	d004      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b4a:	4a46      	ldr	r2, [pc, #280]	; (8002c64 <HAL_RCC_ClockConfig+0x158>)
 8002b4c:	6853      	ldr	r3, [r2, #4]
 8002b4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b52:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	f013 0f08 	tst.w	r3, #8
 8002b5a:	d004      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b5c:	4a41      	ldr	r2, [pc, #260]	; (8002c64 <HAL_RCC_ClockConfig+0x158>)
 8002b5e:	6853      	ldr	r3, [r2, #4]
 8002b60:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b64:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b66:	4a3f      	ldr	r2, [pc, #252]	; (8002c64 <HAL_RCC_ClockConfig+0x158>)
 8002b68:	6853      	ldr	r3, [r2, #4]
 8002b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b6e:	68a0      	ldr	r0, [r4, #8]
 8002b70:	4303      	orrs	r3, r0
 8002b72:	6053      	str	r3, [r2, #4]
 8002b74:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	f013 0f01 	tst.w	r3, #1
 8002b7c:	d031      	beq.n	8002be2 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	6863      	ldr	r3, [r4, #4]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d020      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d025      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	4a36      	ldr	r2, [pc, #216]	; (8002c64 <HAL_RCC_ClockConfig+0x158>)
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	f012 0f02 	tst.w	r2, #2
 8002b90:	d064      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4934      	ldr	r1, [pc, #208]	; (8002c64 <HAL_RCC_ClockConfig+0x158>)
 8002b94:	684a      	ldr	r2, [r1, #4]
 8002b96:	f022 0203 	bic.w	r2, r2, #3
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002b9e:	f7fe fb21 	bl	80011e4 <HAL_GetTick>
 8002ba2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba4:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <HAL_RCC_ClockConfig+0x158>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	6862      	ldr	r2, [r4, #4]
 8002bae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002bb2:	d016      	beq.n	8002be2 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb4:	f7fe fb16 	bl	80011e4 <HAL_GetTick>
 8002bb8:	1b80      	subs	r0, r0, r6
 8002bba:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bbe:	4298      	cmp	r0, r3
 8002bc0:	d9f0      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8002bc2:	2003      	movs	r0, #3
 8002bc4:	e7b9      	b.n	8002b3a <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc6:	4a27      	ldr	r2, [pc, #156]	; (8002c64 <HAL_RCC_ClockConfig+0x158>)
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002bce:	d1e0      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	e7b2      	b.n	8002b3a <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd4:	4a23      	ldr	r2, [pc, #140]	; (8002c64 <HAL_RCC_ClockConfig+0x158>)
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002bdc:	d1d9      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002bde:	2001      	movs	r0, #1
 8002be0:	e7ab      	b.n	8002b3a <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be2:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_RCC_ClockConfig+0x154>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	42ab      	cmp	r3, r5
 8002bec:	d90c      	bls.n	8002c08 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4a1c      	ldr	r2, [pc, #112]	; (8002c60 <HAL_RCC_ClockConfig+0x154>)
 8002bf0:	6813      	ldr	r3, [r2, #0]
 8002bf2:	f023 0307 	bic.w	r3, r3, #7
 8002bf6:	432b      	orrs	r3, r5
 8002bf8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	6813      	ldr	r3, [r2, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	42ab      	cmp	r3, r5
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 8002c04:	2001      	movs	r0, #1
 8002c06:	e798      	b.n	8002b3a <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	f013 0f04 	tst.w	r3, #4
 8002c0e:	d006      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c10:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <HAL_RCC_ClockConfig+0x158>)
 8002c12:	6853      	ldr	r3, [r2, #4]
 8002c14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c18:	68e1      	ldr	r1, [r4, #12]
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	f013 0f08 	tst.w	r3, #8
 8002c24:	d007      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c26:	4a0f      	ldr	r2, [pc, #60]	; (8002c64 <HAL_RCC_ClockConfig+0x158>)
 8002c28:	6853      	ldr	r3, [r2, #4]
 8002c2a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002c2e:	6921      	ldr	r1, [r4, #16]
 8002c30:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c34:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c36:	f7ff ff31 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <HAL_RCC_ClockConfig+0x158>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c42:	4a09      	ldr	r2, [pc, #36]	; (8002c68 <HAL_RCC_ClockConfig+0x15c>)
 8002c44:	5cd3      	ldrb	r3, [r2, r3]
 8002c46:	40d8      	lsrs	r0, r3
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <HAL_RCC_ClockConfig+0x160>)
 8002c4a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HAL_RCC_ClockConfig+0x164>)
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	f7fe fa84 	bl	800115c <HAL_InitTick>
  return HAL_OK;
 8002c54:	2000      	movs	r0, #0
 8002c56:	e770      	b.n	8002b3a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002c58:	2001      	movs	r0, #1
}
 8002c5a:	4770      	bx	lr
        return HAL_ERROR;
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	e76c      	b.n	8002b3a <HAL_RCC_ClockConfig+0x2e>
 8002c60:	40022000 	.word	0x40022000
 8002c64:	40021000 	.word	0x40021000
 8002c68:	0800ca04 	.word	0x0800ca04
 8002c6c:	20000078 	.word	0x20000078
 8002c70:	20000004 	.word	0x20000004

08002c74 <HAL_RCC_GetHCLKFreq>:
}
 8002c74:	4b01      	ldr	r3, [pc, #4]	; (8002c7c <HAL_RCC_GetHCLKFreq+0x8>)
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000078 	.word	0x20000078

08002c80 <HAL_RCC_GetPCLK1Freq>:
{
 8002c80:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c82:	f7ff fff7 	bl	8002c74 <HAL_RCC_GetHCLKFreq>
 8002c86:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002c8e:	4a03      	ldr	r2, [pc, #12]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002c90:	5cd3      	ldrb	r3, [r2, r3]
}
 8002c92:	40d8      	lsrs	r0, r3
 8002c94:	bd08      	pop	{r3, pc}
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	0800ca14 	.word	0x0800ca14

08002ca0 <HAL_RCC_GetPCLK2Freq>:
{
 8002ca0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ca2:	f7ff ffe7 	bl	8002c74 <HAL_RCC_GetHCLKFreq>
 8002ca6:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002cae:	4a03      	ldr	r2, [pc, #12]	; (8002cbc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002cb0:	5cd3      	ldrb	r3, [r2, r3]
}
 8002cb2:	40d8      	lsrs	r0, r3
 8002cb4:	bd08      	pop	{r3, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	0800ca14 	.word	0x0800ca14

08002cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cc6:	6803      	ldr	r3, [r0, #0]
 8002cc8:	f013 0f01 	tst.w	r3, #1
 8002ccc:	d034      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cce:	4b3e      	ldr	r3, [pc, #248]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002cd6:	d148      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd8:	4b3b      	ldr	r3, [pc, #236]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ce0:	61da      	str	r2, [r3, #28]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002cec:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cee:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002cf6:	d03a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cf8:	4b33      	ldr	r3, [pc, #204]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cfc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002d00:	d011      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8002d02:	6862      	ldr	r2, [r4, #4]
 8002d04:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d00c      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d0c:	4a2e      	ldr	r2, [pc, #184]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002d0e:	6a13      	ldr	r3, [r2, #32]
 8002d10:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d14:	492e      	ldr	r1, [pc, #184]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002d16:	2601      	movs	r6, #1
 8002d18:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d1a:	2600      	movs	r6, #0
 8002d1c:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d1e:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d20:	f013 0f01 	tst.w	r3, #1
 8002d24:	d137      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d26:	4a28      	ldr	r2, [pc, #160]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002d28:	6a13      	ldr	r3, [r2, #32]
 8002d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2e:	6861      	ldr	r1, [r4, #4]
 8002d30:	430b      	orrs	r3, r1
 8002d32:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d34:	2d00      	cmp	r5, #0
 8002d36:	d13f      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	f013 0f02 	tst.w	r3, #2
 8002d3e:	d006      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d40:	4a21      	ldr	r2, [pc, #132]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002d42:	6853      	ldr	r3, [r2, #4]
 8002d44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d48:	68a1      	ldr	r1, [r4, #8]
 8002d4a:	430b      	orrs	r3, r1
 8002d4c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	f013 0f10 	tst.w	r3, #16
 8002d54:	d035      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d56:	4a1c      	ldr	r2, [pc, #112]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002d58:	6853      	ldr	r3, [r2, #4]
 8002d5a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002d5e:	68e1      	ldr	r1, [r4, #12]
 8002d60:	430b      	orrs	r3, r1
 8002d62:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d64:	2000      	movs	r0, #0
}
 8002d66:	b002      	add	sp, #8
 8002d68:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002d6a:	2500      	movs	r5, #0
 8002d6c:	e7bf      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d6e:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002d70:	6813      	ldr	r3, [r2, #0]
 8002d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d76:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002d78:	f7fe fa34 	bl	80011e4 <HAL_GetTick>
 8002d7c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7e:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d86:	d1b7      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d88:	f7fe fa2c 	bl	80011e4 <HAL_GetTick>
 8002d8c:	1b80      	subs	r0, r0, r6
 8002d8e:	2864      	cmp	r0, #100	; 0x64
 8002d90:	d9f5      	bls.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8002d92:	2003      	movs	r0, #3
 8002d94:	e7e7      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 8002d96:	f7fe fa25 	bl	80011e4 <HAL_GetTick>
 8002d9a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f013 0f02 	tst.w	r3, #2
 8002da4:	d1bf      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da6:	f7fe fa1d 	bl	80011e4 <HAL_GetTick>
 8002daa:	1b80      	subs	r0, r0, r6
 8002dac:	f241 3388 	movw	r3, #5000	; 0x1388
 8002db0:	4298      	cmp	r0, r3
 8002db2:	d9f3      	bls.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 8002db4:	2003      	movs	r0, #3
 8002db6:	e7d6      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db8:	69d3      	ldr	r3, [r2, #28]
 8002dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	61d3      	str	r3, [r2, #28]
 8002dc0:	e7ba      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	e7cf      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	42420440 	.word	0x42420440

08002dd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd6:	4605      	mov	r5, r0
 8002dd8:	460f      	mov	r7, r1
 8002dda:	4616      	mov	r6, r2
 8002ddc:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dde:	682b      	ldr	r3, [r5, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	ea37 0303 	bics.w	r3, r7, r3
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	42b3      	cmp	r3, r6
 8002dee:	d037      	beq.n	8002e60 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002df0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002df4:	d0f3      	beq.n	8002dde <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002df6:	f7fe f9f5 	bl	80011e4 <HAL_GetTick>
 8002dfa:	9b06      	ldr	r3, [sp, #24]
 8002dfc:	1ac0      	subs	r0, r0, r3
 8002dfe:	42a0      	cmp	r0, r4
 8002e00:	d201      	bcs.n	8002e06 <SPI_WaitFlagStateUntilTimeout+0x32>
 8002e02:	2c00      	cmp	r4, #0
 8002e04:	d1eb      	bne.n	8002dde <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e06:	682a      	ldr	r2, [r5, #0]
 8002e08:	6853      	ldr	r3, [r2, #4]
 8002e0a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002e0e:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e10:	686b      	ldr	r3, [r5, #4]
 8002e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e16:	d00b      	beq.n	8002e30 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e18:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1e:	d014      	beq.n	8002e4a <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e20:	2301      	movs	r3, #1
 8002e22:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e26:	2300      	movs	r3, #0
 8002e28:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e2c:	2003      	movs	r0, #3
 8002e2e:	e018      	b.n	8002e62 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e30:	68ab      	ldr	r3, [r5, #8]
 8002e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e36:	d002      	beq.n	8002e3e <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3c:	d1ec      	bne.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8002e3e:	682a      	ldr	r2, [r5, #0]
 8002e40:	6813      	ldr	r3, [r2, #0]
 8002e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	e7e6      	b.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8002e4a:	682a      	ldr	r2, [r5, #0]
 8002e4c:	6813      	ldr	r3, [r2, #0]
 8002e4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	682a      	ldr	r2, [r5, #0]
 8002e56:	6813      	ldr	r3, [r2, #0]
 8002e58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e7df      	b.n	8002e20 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8002e60:	2000      	movs	r0, #0
}
 8002e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b510      	push	{r4, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6a:	9200      	str	r2, [sp, #0]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2180      	movs	r1, #128	; 0x80
 8002e72:	f7ff ffaf 	bl	8002dd4 <SPI_WaitFlagStateUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	b910      	cbnz	r0, 8002e80 <SPI_EndRxTxTransaction+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	b002      	add	sp, #8
 8002e7e:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e82:	f043 0320 	orr.w	r3, r3, #32
 8002e86:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e7f6      	b.n	8002e7a <SPI_EndRxTxTransaction+0x16>

08002e8c <HAL_SPI_MspInit>:
}
 8002e8c:	4770      	bx	lr

08002e8e <HAL_SPI_Init>:
  if (hspi == NULL)
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	d039      	beq.n	8002f06 <HAL_SPI_Init+0x78>
{
 8002e92:	b510      	push	{r4, lr}
 8002e94:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e9a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d02c      	beq.n	8002efc <HAL_SPI_Init+0x6e>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002ea8:	6822      	ldr	r2, [r4, #0]
 8002eaa:	6813      	ldr	r3, [r2, #0]
 8002eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eb0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002eb2:	6863      	ldr	r3, [r4, #4]
 8002eb4:	68a2      	ldr	r2, [r4, #8]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	68e2      	ldr	r2, [r4, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	6922      	ldr	r2, [r4, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	6962      	ldr	r2, [r4, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	69a2      	ldr	r2, [r4, #24]
 8002ec6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	69e2      	ldr	r2, [r4, #28]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	6a22      	ldr	r2, [r4, #32]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002ed6:	6822      	ldr	r2, [r4, #0]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002edc:	8b63      	ldrh	r3, [r4, #26]
 8002ede:	6822      	ldr	r2, [r4, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ee6:	6822      	ldr	r2, [r4, #0]
 8002ee8:	69d3      	ldr	r3, [r2, #28]
 8002eea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eee:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002efa:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002efc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002f00:	f7ff ffc4 	bl	8002e8c <HAL_SPI_MspInit>
 8002f04:	e7cd      	b.n	8002ea2 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8002f06:	2001      	movs	r0, #1
}
 8002f08:	4770      	bx	lr

08002f0a <HAL_SPI_Transmit>:
{
 8002f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f0e:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8002f10:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8002f14:	2c01      	cmp	r4, #1
 8002f16:	f000 80c3 	beq.w	80030a0 <HAL_SPI_Transmit+0x196>
 8002f1a:	461d      	mov	r5, r3
 8002f1c:	4617      	mov	r7, r2
 8002f1e:	4688      	mov	r8, r1
 8002f20:	4604      	mov	r4, r0
 8002f22:	2301      	movs	r3, #1
 8002f24:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002f28:	f7fe f95c 	bl	80011e4 <HAL_GetTick>
 8002f2c:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002f2e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d009      	beq.n	8002f4c <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8002f38:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f40:	2300      	movs	r3, #0
 8002f42:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002f46:	b002      	add	sp, #8
 8002f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8002f4c:	f1b8 0f00 	cmp.w	r8, #0
 8002f50:	f000 8098 	beq.w	8003084 <HAL_SPI_Transmit+0x17a>
 8002f54:	2f00      	cmp	r7, #0
 8002f56:	f000 8097 	beq.w	8003088 <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f64:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f68:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f6a:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f6c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f6e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f70:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f72:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f74:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f76:	68a3      	ldr	r3, [r4, #8]
 8002f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f7c:	d01c      	beq.n	8002fb8 <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002f86:	d103      	bne.n	8002f90 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f8e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f90:	68e3      	ldr	r3, [r4, #12]
 8002f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f96:	d015      	beq.n	8002fc4 <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f98:	6863      	ldr	r3, [r4, #4]
 8002f9a:	b10b      	cbz	r3, 8002fa0 <HAL_SPI_Transmit+0x96>
 8002f9c:	2f01      	cmp	r7, #1
 8002f9e:	d149      	bne.n	8003034 <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fa0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	7812      	ldrb	r2, [r2, #0]
 8002fa6:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fa8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002faa:	3301      	adds	r3, #1
 8002fac:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002fae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002fb6:	e03d      	b.n	8003034 <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 8002fb8:	6822      	ldr	r2, [r4, #0]
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e7dc      	b.n	8002f7e <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc4:	6863      	ldr	r3, [r4, #4]
 8002fc6:	b10b      	cbz	r3, 8002fcc <HAL_SPI_Transmit+0xc2>
 8002fc8:	2f01      	cmp	r7, #1
 8002fca:	d115      	bne.n	8002ff8 <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fcc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	8812      	ldrh	r2, [r2, #0]
 8002fd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002fda:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002fe2:	e009      	b.n	8002ff8 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe4:	f7fe f8fe 	bl	80011e4 <HAL_GetTick>
 8002fe8:	1b80      	subs	r0, r0, r6
 8002fea:	42a8      	cmp	r0, r5
 8002fec:	d302      	bcc.n	8002ff4 <HAL_SPI_Transmit+0xea>
 8002fee:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002ff2:	d14b      	bne.n	800308c <HAL_SPI_Transmit+0x182>
 8002ff4:	2d00      	cmp	r5, #0
 8002ff6:	d04b      	beq.n	8003090 <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 8002ff8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d02c      	beq.n	800305a <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	f012 0f02 	tst.w	r2, #2
 8003008:	d0ec      	beq.n	8002fe4 <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800300a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800300c:	8812      	ldrh	r2, [r2, #0]
 800300e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003010:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003012:	3302      	adds	r3, #2
 8003014:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003016:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003018:	3b01      	subs	r3, #1
 800301a:	b29b      	uxth	r3, r3
 800301c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800301e:	e7eb      	b.n	8002ff8 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fe f8e0 	bl	80011e4 <HAL_GetTick>
 8003024:	1b80      	subs	r0, r0, r6
 8003026:	42a8      	cmp	r0, r5
 8003028:	d302      	bcc.n	8003030 <HAL_SPI_Transmit+0x126>
 800302a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800302e:	d131      	bne.n	8003094 <HAL_SPI_Transmit+0x18a>
 8003030:	2d00      	cmp	r5, #0
 8003032:	d031      	beq.n	8003098 <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 8003034:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003036:	b29b      	uxth	r3, r3
 8003038:	b17b      	cbz	r3, 800305a <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	f012 0f02 	tst.w	r2, #2
 8003042:	d0ed      	beq.n	8003020 <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003044:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003046:	7812      	ldrb	r2, [r2, #0]
 8003048:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800304a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800304c:	3301      	adds	r3, #1
 800304e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003050:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003052:	3b01      	subs	r3, #1
 8003054:	b29b      	uxth	r3, r3
 8003056:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003058:	e7ec      	b.n	8003034 <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800305a:	4632      	mov	r2, r6
 800305c:	4629      	mov	r1, r5
 800305e:	4620      	mov	r0, r4
 8003060:	f7ff ff00 	bl	8002e64 <SPI_EndRxTxTransaction>
 8003064:	b108      	cbz	r0, 800306a <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003066:	2320      	movs	r3, #32
 8003068:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800306a:	68a3      	ldr	r3, [r4, #8]
 800306c:	b933      	cbnz	r3, 800307c <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	9201      	str	r2, [sp, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800307c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800307e:	b96b      	cbnz	r3, 800309c <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003080:	2000      	movs	r0, #0
 8003082:	e75a      	b.n	8002f3a <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8003084:	2001      	movs	r0, #1
 8003086:	e758      	b.n	8002f3a <HAL_SPI_Transmit+0x30>
 8003088:	2001      	movs	r0, #1
 800308a:	e756      	b.n	8002f3a <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 800308c:	2003      	movs	r0, #3
 800308e:	e754      	b.n	8002f3a <HAL_SPI_Transmit+0x30>
 8003090:	2003      	movs	r0, #3
 8003092:	e752      	b.n	8002f3a <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8003094:	2003      	movs	r0, #3
 8003096:	e750      	b.n	8002f3a <HAL_SPI_Transmit+0x30>
 8003098:	2003      	movs	r0, #3
 800309a:	e74e      	b.n	8002f3a <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 800309c:	2001      	movs	r0, #1
 800309e:	e74c      	b.n	8002f3a <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80030a0:	2002      	movs	r0, #2
 80030a2:	e750      	b.n	8002f46 <HAL_SPI_Transmit+0x3c>

080030a4 <HAL_SPI_Transmit_DMA>:
  __HAL_LOCK(hspi);
 80030a4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d05f      	beq.n	800316c <HAL_SPI_Transmit_DMA+0xc8>
{
 80030ac:	b510      	push	{r4, lr}
 80030ae:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80030b0:	2301      	movs	r3, #1
 80030b2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 80030b6:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d005      	beq.n	80030cc <HAL_SPI_Transmit_DMA+0x28>
    errorcode = HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 80030c2:	2200      	movs	r2, #0
 80030c4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	bd10      	pop	{r4, pc}
  if ((pData == NULL) || (Size == 0U))
 80030cc:	2900      	cmp	r1, #0
 80030ce:	d049      	beq.n	8003164 <HAL_SPI_Transmit_DMA+0xc0>
 80030d0:	2a00      	cmp	r2, #0
 80030d2:	d049      	beq.n	8003168 <HAL_SPI_Transmit_DMA+0xc4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030d4:	2303      	movs	r3, #3
 80030d6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030da:	2300      	movs	r3, #0
 80030dc:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030de:	6301      	str	r1, [r0, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030e0:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030e2:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030e4:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxISR       = NULL;
 80030e6:	6443      	str	r3, [r0, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030e8:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030ea:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030ec:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ee:	6883      	ldr	r3, [r0, #8]
 80030f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f4:	d01c      	beq.n	8003130 <HAL_SPI_Transmit_DMA+0x8c>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80030f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80030f8:	4a1e      	ldr	r2, [pc, #120]	; (8003174 <HAL_SPI_Transmit_DMA+0xd0>)
 80030fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80030fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80030fe:	4a1e      	ldr	r2, [pc, #120]	; (8003178 <HAL_SPI_Transmit_DMA+0xd4>)
 8003100:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003102:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003104:	4a1d      	ldr	r2, [pc, #116]	; (800317c <HAL_SPI_Transmit_DMA+0xd8>)
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback = NULL;
 8003108:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800310a:	2200      	movs	r2, #0
 800310c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800310e:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 8003110:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003112:	320c      	adds	r2, #12
 8003114:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003116:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003118:	f7fe fbb2 	bl	8001880 <HAL_DMA_Start_IT>
 800311c:	4603      	mov	r3, r0
 800311e:	b168      	cbz	r0, 800313c <HAL_SPI_Transmit_DMA+0x98>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003120:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003122:	f043 0310 	orr.w	r3, r3, #16
 8003126:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8003128:	2301      	movs	r3, #1
 800312a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 800312e:	e7c8      	b.n	80030c2 <HAL_SPI_Transmit_DMA+0x1e>
    SPI_1LINE_TX(hspi);
 8003130:	6802      	ldr	r2, [r0, #0]
 8003132:	6813      	ldr	r3, [r2, #0]
 8003134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e7dc      	b.n	80030f6 <HAL_SPI_Transmit_DMA+0x52>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800313c:	6822      	ldr	r2, [r4, #0]
 800313e:	6811      	ldr	r1, [r2, #0]
 8003140:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003144:	d103      	bne.n	800314e <HAL_SPI_Transmit_DMA+0xaa>
    __HAL_SPI_ENABLE(hspi);
 8003146:	6811      	ldr	r1, [r2, #0]
 8003148:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800314c:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800314e:	6821      	ldr	r1, [r4, #0]
 8003150:	684a      	ldr	r2, [r1, #4]
 8003152:	f042 0220 	orr.w	r2, r2, #32
 8003156:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003158:	6821      	ldr	r1, [r4, #0]
 800315a:	684a      	ldr	r2, [r1, #4]
 800315c:	f042 0202 	orr.w	r2, r2, #2
 8003160:	604a      	str	r2, [r1, #4]
 8003162:	e7ae      	b.n	80030c2 <HAL_SPI_Transmit_DMA+0x1e>
    errorcode = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e7ac      	b.n	80030c2 <HAL_SPI_Transmit_DMA+0x1e>
 8003168:	2301      	movs	r3, #1
 800316a:	e7aa      	b.n	80030c2 <HAL_SPI_Transmit_DMA+0x1e>
  __HAL_LOCK(hspi);
 800316c:	2302      	movs	r3, #2
}
 800316e:	4618      	mov	r0, r3
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	08003185 	.word	0x08003185
 8003178:	080031b3 	.word	0x080031b3
 800317c:	08003191 	.word	0x08003191

08003180 <HAL_SPI_TxCpltCallback>:
}
 8003180:	4770      	bx	lr

08003182 <HAL_SPI_TxHalfCpltCallback>:
}
 8003182:	4770      	bx	lr

08003184 <SPI_DMAHalfTransmitCplt>:
{
 8003184:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003186:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003188:	f7ff fffb 	bl	8003182 <HAL_SPI_TxHalfCpltCallback>
}
 800318c:	bd08      	pop	{r3, pc}

0800318e <HAL_SPI_ErrorCallback>:
}
 800318e:	4770      	bx	lr

08003190 <SPI_DMAError>:
{
 8003190:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003192:	6a40      	ldr	r0, [r0, #36]	; 0x24
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003194:	6802      	ldr	r2, [r0, #0]
 8003196:	6853      	ldr	r3, [r2, #4]
 8003198:	f023 0303 	bic.w	r3, r3, #3
 800319c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800319e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80031a0:	f043 0310 	orr.w	r3, r3, #16
 80031a4:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 80031ac:	f7ff ffef 	bl	800318e <HAL_SPI_ErrorCallback>
}
 80031b0:	bd08      	pop	{r3, pc}

080031b2 <SPI_DMATransmitCplt>:
{
 80031b2:	b530      	push	{r4, r5, lr}
 80031b4:	b083      	sub	sp, #12
 80031b6:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80031b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 80031ba:	f7fe f813 	bl	80011e4 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80031be:	682b      	ldr	r3, [r5, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f013 0f20 	tst.w	r3, #32
 80031c6:	d123      	bne.n	8003210 <SPI_DMATransmitCplt+0x5e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80031c8:	6822      	ldr	r2, [r4, #0]
 80031ca:	6853      	ldr	r3, [r2, #4]
 80031cc:	f023 0320 	bic.w	r3, r3, #32
 80031d0:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80031d2:	6822      	ldr	r2, [r4, #0]
 80031d4:	6853      	ldr	r3, [r2, #4]
 80031d6:	f023 0302 	bic.w	r3, r3, #2
 80031da:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80031dc:	4602      	mov	r2, r0
 80031de:	2164      	movs	r1, #100	; 0x64
 80031e0:	4620      	mov	r0, r4
 80031e2:	f7ff fe3f 	bl	8002e64 <SPI_EndRxTxTransaction>
 80031e6:	b118      	cbz	r0, 80031f0 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80031ea:	f043 0320 	orr.w	r3, r3, #32
 80031ee:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031f0:	68a3      	ldr	r3, [r4, #8]
 80031f2:	b933      	cbnz	r3, 8003202 <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	9201      	str	r2, [sp, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003206:	2301      	movs	r3, #1
 8003208:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800320c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800320e:	b923      	cbnz	r3, 800321a <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 8003210:	4620      	mov	r0, r4
 8003212:	f7ff ffb5 	bl	8003180 <HAL_SPI_TxCpltCallback>
}
 8003216:	b003      	add	sp, #12
 8003218:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800321a:	4620      	mov	r0, r4
 800321c:	f7ff ffb7 	bl	800318e <HAL_SPI_ErrorCallback>
      return;
 8003220:	e7f9      	b.n	8003216 <SPI_DMATransmitCplt+0x64>
	...

08003224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003224:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003226:	6a03      	ldr	r3, [r0, #32]
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003230:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003232:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003234:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003238:	680d      	ldr	r5, [r1, #0]
 800323a:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800323e:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003242:	688b      	ldr	r3, [r1, #8]
 8003244:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003246:	4d0d      	ldr	r5, [pc, #52]	; (800327c <TIM_OC1_SetConfig+0x58>)
 8003248:	42a8      	cmp	r0, r5
 800324a:	d009      	beq.n	8003260 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324c:	4d0b      	ldr	r5, [pc, #44]	; (800327c <TIM_OC1_SetConfig+0x58>)
 800324e:	42a8      	cmp	r0, r5
 8003250:	d00d      	beq.n	800326e <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003252:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003254:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003256:	684a      	ldr	r2, [r1, #4]
 8003258:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325a:	6203      	str	r3, [r0, #32]
}
 800325c:	bc70      	pop	{r4, r5, r6}
 800325e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003260:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003264:	68cc      	ldr	r4, [r1, #12]
 8003266:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8003268:	f023 0304 	bic.w	r3, r3, #4
 800326c:	e7ee      	b.n	800324c <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800326e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003272:	694c      	ldr	r4, [r1, #20]
 8003274:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8003276:	698a      	ldr	r2, [r1, #24]
 8003278:	4322      	orrs	r2, r4
 800327a:	e7ea      	b.n	8003252 <TIM_OC1_SetConfig+0x2e>
 800327c:	40012c00 	.word	0x40012c00

08003280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003280:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003282:	6a03      	ldr	r3, [r0, #32]
 8003284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003288:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800328c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800328e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003290:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003294:	680d      	ldr	r5, [r1, #0]
 8003296:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800329c:	688d      	ldr	r5, [r1, #8]
 800329e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032a2:	4d0f      	ldr	r5, [pc, #60]	; (80032e0 <TIM_OC3_SetConfig+0x60>)
 80032a4:	42a8      	cmp	r0, r5
 80032a6:	d009      	beq.n	80032bc <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a8:	4d0d      	ldr	r5, [pc, #52]	; (80032e0 <TIM_OC3_SetConfig+0x60>)
 80032aa:	42a8      	cmp	r0, r5
 80032ac:	d00e      	beq.n	80032cc <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ae:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032b0:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032b2:	684a      	ldr	r2, [r1, #4]
 80032b4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b6:	6203      	str	r3, [r0, #32]
}
 80032b8:	bc30      	pop	{r4, r5}
 80032ba:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80032bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032c0:	68cd      	ldr	r5, [r1, #12]
 80032c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80032c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ca:	e7ed      	b.n	80032a8 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032cc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032d0:	694d      	ldr	r5, [r1, #20]
 80032d2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032d6:	698d      	ldr	r5, [r1, #24]
 80032d8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80032dc:	e7e7      	b.n	80032ae <TIM_OC3_SetConfig+0x2e>
 80032de:	bf00      	nop
 80032e0:	40012c00 	.word	0x40012c00

080032e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032e4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032e6:	6a03      	ldr	r3, [r0, #32]
 80032e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032f2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032f4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f8:	680d      	ldr	r5, [r1, #0]
 80032fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003302:	688d      	ldr	r5, [r1, #8]
 8003304:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003308:	4d07      	ldr	r5, [pc, #28]	; (8003328 <TIM_OC4_SetConfig+0x44>)
 800330a:	42a8      	cmp	r0, r5
 800330c:	d006      	beq.n	800331c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800330e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003310:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003312:	684a      	ldr	r2, [r1, #4]
 8003314:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003316:	6203      	str	r3, [r0, #32]
}
 8003318:	bc30      	pop	{r4, r5}
 800331a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 800331c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003320:	694d      	ldr	r5, [r1, #20]
 8003322:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003326:	e7f2      	b.n	800330e <TIM_OC4_SetConfig+0x2a>
 8003328:	40012c00 	.word	0x40012c00

0800332c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800332c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800332e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003330:	6a04      	ldr	r4, [r0, #32]
 8003332:	f024 0401 	bic.w	r4, r4, #1
 8003336:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003338:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800333a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800333e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003342:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003346:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003348:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800334a:	6203      	str	r3, [r0, #32]
}
 800334c:	bc10      	pop	{r4}
 800334e:	4770      	bx	lr

08003350 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003350:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003352:	6a03      	ldr	r3, [r0, #32]
 8003354:	f023 0310 	bic.w	r3, r3, #16
 8003358:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800335a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800335c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800335e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003362:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003366:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800336a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800336e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003370:	6203      	str	r3, [r0, #32]
}
 8003372:	bc10      	pop	{r4}
 8003374:	4770      	bx	lr

08003376 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003376:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800337c:	4319      	orrs	r1, r3
 800337e:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003382:	6081      	str	r1, [r0, #8]
}
 8003384:	4770      	bx	lr

08003386 <HAL_TIM_Base_MspInit>:
}
 8003386:	4770      	bx	lr

08003388 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8003388:	2302      	movs	r3, #2
 800338a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800338e:	6802      	ldr	r2, [r0, #0]
 8003390:	6893      	ldr	r3, [r2, #8]
 8003392:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003396:	2b06      	cmp	r3, #6
 8003398:	d003      	beq.n	80033a2 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 800339a:	6813      	ldr	r3, [r2, #0]
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80033a8:	2000      	movs	r0, #0
 80033aa:	4770      	bx	lr

080033ac <HAL_TIM_PWM_MspInit>:
}
 80033ac:	4770      	bx	lr
	...

080033b0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80033b0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b2:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <TIM_Base_SetConfig+0x70>)
 80033b4:	4290      	cmp	r0, r2
 80033b6:	d00a      	beq.n	80033ce <TIM_Base_SetConfig+0x1e>
 80033b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033bc:	d007      	beq.n	80033ce <TIM_Base_SetConfig+0x1e>
 80033be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80033c2:	4290      	cmp	r0, r2
 80033c4:	d003      	beq.n	80033ce <TIM_Base_SetConfig+0x1e>
 80033c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033ca:	4290      	cmp	r0, r2
 80033cc:	d103      	bne.n	80033d6 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80033d2:	684a      	ldr	r2, [r1, #4]
 80033d4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d6:	4a12      	ldr	r2, [pc, #72]	; (8003420 <TIM_Base_SetConfig+0x70>)
 80033d8:	4290      	cmp	r0, r2
 80033da:	d00a      	beq.n	80033f2 <TIM_Base_SetConfig+0x42>
 80033dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033e0:	d007      	beq.n	80033f2 <TIM_Base_SetConfig+0x42>
 80033e2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80033e6:	4290      	cmp	r0, r2
 80033e8:	d003      	beq.n	80033f2 <TIM_Base_SetConfig+0x42>
 80033ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033ee:	4290      	cmp	r0, r2
 80033f0:	d103      	bne.n	80033fa <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80033f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033f6:	68ca      	ldr	r2, [r1, #12]
 80033f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033fe:	694a      	ldr	r2, [r1, #20]
 8003400:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003402:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003404:	688b      	ldr	r3, [r1, #8]
 8003406:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003408:	680b      	ldr	r3, [r1, #0]
 800340a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <TIM_Base_SetConfig+0x70>)
 800340e:	4298      	cmp	r0, r3
 8003410:	d002      	beq.n	8003418 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8003412:	2301      	movs	r3, #1
 8003414:	6143      	str	r3, [r0, #20]
}
 8003416:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003418:	690b      	ldr	r3, [r1, #16]
 800341a:	6303      	str	r3, [r0, #48]	; 0x30
 800341c:	e7f9      	b.n	8003412 <TIM_Base_SetConfig+0x62>
 800341e:	bf00      	nop
 8003420:	40012c00 	.word	0x40012c00

08003424 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003424:	b1a8      	cbz	r0, 8003452 <HAL_TIM_Base_Init+0x2e>
{
 8003426:	b510      	push	{r4, lr}
 8003428:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800342a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800342e:	b15b      	cbz	r3, 8003448 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003430:	2302      	movs	r3, #2
 8003432:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003436:	1d21      	adds	r1, r4, #4
 8003438:	6820      	ldr	r0, [r4, #0]
 800343a:	f7ff ffb9 	bl	80033b0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800343e:	2301      	movs	r3, #1
 8003440:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003444:	2000      	movs	r0, #0
}
 8003446:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003448:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800344c:	f7ff ff9b 	bl	8003386 <HAL_TIM_Base_MspInit>
 8003450:	e7ee      	b.n	8003430 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003452:	2001      	movs	r0, #1
}
 8003454:	4770      	bx	lr

08003456 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003456:	b1a8      	cbz	r0, 8003484 <HAL_TIM_PWM_Init+0x2e>
{
 8003458:	b510      	push	{r4, lr}
 800345a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800345c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003460:	b15b      	cbz	r3, 800347a <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003462:	2302      	movs	r3, #2
 8003464:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003468:	1d21      	adds	r1, r4, #4
 800346a:	6820      	ldr	r0, [r4, #0]
 800346c:	f7ff ffa0 	bl	80033b0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003470:	2301      	movs	r3, #1
 8003472:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003476:	2000      	movs	r0, #0
}
 8003478:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800347a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800347e:	f7ff ff95 	bl	80033ac <HAL_TIM_PWM_MspInit>
 8003482:	e7ee      	b.n	8003462 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003484:	2001      	movs	r0, #1
}
 8003486:	4770      	bx	lr

08003488 <TIM_OC2_SetConfig>:
{
 8003488:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800348a:	6a03      	ldr	r3, [r0, #32]
 800348c:	f023 0310 	bic.w	r3, r3, #16
 8003490:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003492:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003494:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003496:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003498:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800349c:	680d      	ldr	r5, [r1, #0]
 800349e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80034a2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034a6:	688d      	ldr	r5, [r1, #8]
 80034a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034ac:	4d0e      	ldr	r5, [pc, #56]	; (80034e8 <TIM_OC2_SetConfig+0x60>)
 80034ae:	42a8      	cmp	r0, r5
 80034b0:	d009      	beq.n	80034c6 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b2:	4d0d      	ldr	r5, [pc, #52]	; (80034e8 <TIM_OC2_SetConfig+0x60>)
 80034b4:	42a8      	cmp	r0, r5
 80034b6:	d00e      	beq.n	80034d6 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 80034b8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80034ba:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80034bc:	684a      	ldr	r2, [r1, #4]
 80034be:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80034c0:	6203      	str	r3, [r0, #32]
}
 80034c2:	bc30      	pop	{r4, r5}
 80034c4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80034c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034ca:	68cd      	ldr	r5, [r1, #12]
 80034cc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80034d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d4:	e7ed      	b.n	80034b2 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034d6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034da:	694d      	ldr	r5, [r1, #20]
 80034dc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034e0:	698d      	ldr	r5, [r1, #24]
 80034e2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80034e6:	e7e7      	b.n	80034b8 <TIM_OC2_SetConfig+0x30>
 80034e8:	40012c00 	.word	0x40012c00

080034ec <HAL_TIM_PWM_ConfigChannel>:
{
 80034ec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80034ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d066      	beq.n	80035c4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80034f6:	460d      	mov	r5, r1
 80034f8:	4604      	mov	r4, r0
 80034fa:	2301      	movs	r3, #1
 80034fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	2302      	movs	r3, #2
 8003502:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003506:	2a0c      	cmp	r2, #12
 8003508:	d81a      	bhi.n	8003540 <HAL_TIM_PWM_ConfigChannel+0x54>
 800350a:	e8df f002 	tbb	[pc, r2]
 800350e:	1907      	.short	0x1907
 8003510:	19201919 	.word	0x19201919
 8003514:	19341919 	.word	0x19341919
 8003518:	1919      	.short	0x1919
 800351a:	47          	.byte	0x47
 800351b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800351c:	6800      	ldr	r0, [r0, #0]
 800351e:	f7ff fe81 	bl	8003224 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003522:	6822      	ldr	r2, [r4, #0]
 8003524:	6993      	ldr	r3, [r2, #24]
 8003526:	f043 0308 	orr.w	r3, r3, #8
 800352a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800352c:	6822      	ldr	r2, [r4, #0]
 800352e:	6993      	ldr	r3, [r2, #24]
 8003530:	f023 0304 	bic.w	r3, r3, #4
 8003534:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003536:	6822      	ldr	r2, [r4, #0]
 8003538:	6993      	ldr	r3, [r2, #24]
 800353a:	6929      	ldr	r1, [r5, #16]
 800353c:	430b      	orrs	r3, r1
 800353e:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003540:	2301      	movs	r3, #1
 8003542:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003546:	2000      	movs	r0, #0
 8003548:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800354c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800354e:	6800      	ldr	r0, [r0, #0]
 8003550:	f7ff ff9a 	bl	8003488 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003554:	6822      	ldr	r2, [r4, #0]
 8003556:	6993      	ldr	r3, [r2, #24]
 8003558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800355c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800355e:	6822      	ldr	r2, [r4, #0]
 8003560:	6993      	ldr	r3, [r2, #24]
 8003562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003566:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003568:	6822      	ldr	r2, [r4, #0]
 800356a:	6993      	ldr	r3, [r2, #24]
 800356c:	6929      	ldr	r1, [r5, #16]
 800356e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003572:	6193      	str	r3, [r2, #24]
      break;
 8003574:	e7e4      	b.n	8003540 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003576:	6800      	ldr	r0, [r0, #0]
 8003578:	f7ff fe82 	bl	8003280 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800357c:	6822      	ldr	r2, [r4, #0]
 800357e:	69d3      	ldr	r3, [r2, #28]
 8003580:	f043 0308 	orr.w	r3, r3, #8
 8003584:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003586:	6822      	ldr	r2, [r4, #0]
 8003588:	69d3      	ldr	r3, [r2, #28]
 800358a:	f023 0304 	bic.w	r3, r3, #4
 800358e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003590:	6822      	ldr	r2, [r4, #0]
 8003592:	69d3      	ldr	r3, [r2, #28]
 8003594:	6929      	ldr	r1, [r5, #16]
 8003596:	430b      	orrs	r3, r1
 8003598:	61d3      	str	r3, [r2, #28]
      break;
 800359a:	e7d1      	b.n	8003540 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800359c:	6800      	ldr	r0, [r0, #0]
 800359e:	f7ff fea1 	bl	80032e4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035a2:	6822      	ldr	r2, [r4, #0]
 80035a4:	69d3      	ldr	r3, [r2, #28]
 80035a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035aa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035ac:	6822      	ldr	r2, [r4, #0]
 80035ae:	69d3      	ldr	r3, [r2, #28]
 80035b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035b4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035b6:	6822      	ldr	r2, [r4, #0]
 80035b8:	69d3      	ldr	r3, [r2, #28]
 80035ba:	6929      	ldr	r1, [r5, #16]
 80035bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80035c0:	61d3      	str	r3, [r2, #28]
      break;
 80035c2:	e7bd      	b.n	8003540 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 80035c4:	2002      	movs	r0, #2
 80035c6:	e7c1      	b.n	800354c <HAL_TIM_PWM_ConfigChannel+0x60>

080035c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035c8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035ca:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035cc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035d0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80035d4:	430b      	orrs	r3, r1
 80035d6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d8:	6083      	str	r3, [r0, #8]
}
 80035da:	bc10      	pop	{r4}
 80035dc:	4770      	bx	lr

080035de <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80035de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d066      	beq.n	80036b4 <HAL_TIM_ConfigClockSource+0xd6>
{
 80035e6:	b510      	push	{r4, lr}
 80035e8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80035ea:	2301      	movs	r3, #1
 80035ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80035f0:	2302      	movs	r3, #2
 80035f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80035f6:	6802      	ldr	r2, [r0, #0]
 80035f8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003602:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003604:	680b      	ldr	r3, [r1, #0]
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d04a      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0xc2>
 800360a:	d913      	bls.n	8003634 <HAL_TIM_ConfigClockSource+0x56>
 800360c:	2b60      	cmp	r3, #96	; 0x60
 800360e:	d03d      	beq.n	800368c <HAL_TIM_ConfigClockSource+0xae>
 8003610:	d91e      	bls.n	8003650 <HAL_TIM_ConfigClockSource+0x72>
 8003612:	2b70      	cmp	r3, #112	; 0x70
 8003614:	d028      	beq.n	8003668 <HAL_TIM_ConfigClockSource+0x8a>
 8003616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361a:	d130      	bne.n	800367e <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800361c:	68cb      	ldr	r3, [r1, #12]
 800361e:	684a      	ldr	r2, [r1, #4]
 8003620:	6889      	ldr	r1, [r1, #8]
 8003622:	6800      	ldr	r0, [r0, #0]
 8003624:	f7ff ffd0 	bl	80035c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003628:	6822      	ldr	r2, [r4, #0]
 800362a:	6893      	ldr	r3, [r2, #8]
 800362c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003630:	6093      	str	r3, [r2, #8]
      break;
 8003632:	e024      	b.n	800367e <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8003634:	2b10      	cmp	r3, #16
 8003636:	d006      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0x68>
 8003638:	d904      	bls.n	8003644 <HAL_TIM_ConfigClockSource+0x66>
 800363a:	2b20      	cmp	r3, #32
 800363c:	d003      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0x68>
 800363e:	2b30      	cmp	r3, #48	; 0x30
 8003640:	d001      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0x68>
 8003642:	e01c      	b.n	800367e <HAL_TIM_ConfigClockSource+0xa0>
 8003644:	b9db      	cbnz	r3, 800367e <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003646:	4619      	mov	r1, r3
 8003648:	6820      	ldr	r0, [r4, #0]
 800364a:	f7ff fe94 	bl	8003376 <TIM_ITRx_SetConfig>
      break;
 800364e:	e016      	b.n	800367e <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8003650:	2b50      	cmp	r3, #80	; 0x50
 8003652:	d114      	bne.n	800367e <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003654:	68ca      	ldr	r2, [r1, #12]
 8003656:	6849      	ldr	r1, [r1, #4]
 8003658:	6800      	ldr	r0, [r0, #0]
 800365a:	f7ff fe67 	bl	800332c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800365e:	2150      	movs	r1, #80	; 0x50
 8003660:	6820      	ldr	r0, [r4, #0]
 8003662:	f7ff fe88 	bl	8003376 <TIM_ITRx_SetConfig>
      break;
 8003666:	e00a      	b.n	800367e <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8003668:	68cb      	ldr	r3, [r1, #12]
 800366a:	684a      	ldr	r2, [r1, #4]
 800366c:	6889      	ldr	r1, [r1, #8]
 800366e:	6800      	ldr	r0, [r0, #0]
 8003670:	f7ff ffaa 	bl	80035c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003674:	6822      	ldr	r2, [r4, #0]
 8003676:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003678:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800367c:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800367e:	2301      	movs	r3, #1
 8003680:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003684:	2000      	movs	r0, #0
 8003686:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800368a:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800368c:	68ca      	ldr	r2, [r1, #12]
 800368e:	6849      	ldr	r1, [r1, #4]
 8003690:	6800      	ldr	r0, [r0, #0]
 8003692:	f7ff fe5d 	bl	8003350 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003696:	2160      	movs	r1, #96	; 0x60
 8003698:	6820      	ldr	r0, [r4, #0]
 800369a:	f7ff fe6c 	bl	8003376 <TIM_ITRx_SetConfig>
      break;
 800369e:	e7ee      	b.n	800367e <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a0:	68ca      	ldr	r2, [r1, #12]
 80036a2:	6849      	ldr	r1, [r1, #4]
 80036a4:	6800      	ldr	r0, [r0, #0]
 80036a6:	f7ff fe41 	bl	800332c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036aa:	2140      	movs	r1, #64	; 0x40
 80036ac:	6820      	ldr	r0, [r4, #0]
 80036ae:	f7ff fe62 	bl	8003376 <TIM_ITRx_SetConfig>
      break;
 80036b2:	e7e4      	b.n	800367e <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 80036b4:	2002      	movs	r0, #2
}
 80036b6:	4770      	bx	lr

080036b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036b8:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036ba:	f001 011f 	and.w	r1, r1, #31
 80036be:	2301      	movs	r3, #1
 80036c0:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036c4:	6a03      	ldr	r3, [r0, #32]
 80036c6:	ea23 0304 	bic.w	r3, r3, r4
 80036ca:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036cc:	6a03      	ldr	r3, [r0, #32]
 80036ce:	408a      	lsls	r2, r1
 80036d0:	4313      	orrs	r3, r2
 80036d2:	6203      	str	r3, [r0, #32]
}
 80036d4:	bc10      	pop	{r4}
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIM_PWM_Start>:
{
 80036d8:	b510      	push	{r4, lr}
 80036da:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036dc:	2201      	movs	r2, #1
 80036de:	6800      	ldr	r0, [r0, #0]
 80036e0:	f7ff ffea 	bl	80036b8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <HAL_TIM_PWM_Start+0x38>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00b      	beq.n	8003704 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ec:	6822      	ldr	r2, [r4, #0]
 80036ee:	6893      	ldr	r3, [r2, #8]
 80036f0:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f4:	2b06      	cmp	r3, #6
 80036f6:	d003      	beq.n	8003700 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 80036f8:	6813      	ldr	r3, [r2, #0]
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6013      	str	r3, [r2, #0]
}
 8003700:	2000      	movs	r0, #0
 8003702:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8003704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
 800370c:	e7ee      	b.n	80036ec <HAL_TIM_PWM_Start+0x14>
 800370e:	bf00      	nop
 8003710:	40012c00 	.word	0x40012c00

08003714 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003714:	6802      	ldr	r2, [r0, #0]
 8003716:	68d3      	ldr	r3, [r2, #12]
 8003718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800371c:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371e:	6802      	ldr	r2, [r0, #0]
 8003720:	6953      	ldr	r3, [r2, #20]
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003728:	2320      	movs	r3, #32
 800372a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800372e:	4770      	bx	lr

08003730 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003730:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b21      	cmp	r3, #33	; 0x21
 8003738:	d12a      	bne.n	8003790 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800373a:	6883      	ldr	r3, [r0, #8]
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003740:	d016      	beq.n	8003770 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003742:	6a03      	ldr	r3, [r0, #32]
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	6202      	str	r2, [r0, #32]
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	6803      	ldr	r3, [r0, #0]
 800374c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800374e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003750:	3b01      	subs	r3, #1
 8003752:	b29b      	uxth	r3, r3
 8003754:	84c3      	strh	r3, [r0, #38]	; 0x26
 8003756:	b9eb      	cbnz	r3, 8003794 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003758:	6802      	ldr	r2, [r0, #0]
 800375a:	68d3      	ldr	r3, [r2, #12]
 800375c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003760:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003762:	6802      	ldr	r2, [r0, #0]
 8003764:	68d3      	ldr	r3, [r2, #12]
 8003766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800376a:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 800376c:	2000      	movs	r0, #0
 800376e:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003770:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	6802      	ldr	r2, [r0, #0]
 8003776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377a:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800377c:	6903      	ldr	r3, [r0, #16]
 800377e:	b91b      	cbnz	r3, 8003788 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8003780:	6a03      	ldr	r3, [r0, #32]
 8003782:	3302      	adds	r3, #2
 8003784:	6203      	str	r3, [r0, #32]
 8003786:	e7e2      	b.n	800374e <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8003788:	6a03      	ldr	r3, [r0, #32]
 800378a:	3301      	adds	r3, #1
 800378c:	6203      	str	r3, [r0, #32]
 800378e:	e7de      	b.n	800374e <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2002      	movs	r0, #2
 8003792:	4770      	bx	lr
    return HAL_OK;
 8003794:	2000      	movs	r0, #0
  }
}
 8003796:	4770      	bx	lr

08003798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800379c:	6802      	ldr	r2, [r0, #0]
 800379e:	6913      	ldr	r3, [r2, #16]
 80037a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037a4:	68c1      	ldr	r1, [r0, #12]
 80037a6:	430b      	orrs	r3, r1
 80037a8:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037aa:	6883      	ldr	r3, [r0, #8]
 80037ac:	6902      	ldr	r2, [r0, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	6942      	ldr	r2, [r0, #20]
 80037b2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80037b4:	6801      	ldr	r1, [r0, #0]
 80037b6:	68cb      	ldr	r3, [r1, #12]
 80037b8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037bc:	f023 030c 	bic.w	r3, r3, #12
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037c4:	6802      	ldr	r2, [r0, #0]
 80037c6:	6953      	ldr	r3, [r2, #20]
 80037c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037cc:	6981      	ldr	r1, [r0, #24]
 80037ce:	430b      	orrs	r3, r1
 80037d0:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80037d2:	6802      	ldr	r2, [r0, #0]
 80037d4:	4b21      	ldr	r3, [pc, #132]	; (800385c <UART_SetConfig+0xc4>)
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d01f      	beq.n	800381a <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037da:	f7ff fa51 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80037e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80037e6:	6863      	ldr	r3, [r4, #4]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80037ee:	4d1c      	ldr	r5, [pc, #112]	; (8003860 <UART_SetConfig+0xc8>)
 80037f0:	fba5 3200 	umull	r3, r2, r5, r0
 80037f4:	0951      	lsrs	r1, r2, #5
 80037f6:	2264      	movs	r2, #100	; 0x64
 80037f8:	fb02 0211 	mls	r2, r2, r1, r0
 80037fc:	0113      	lsls	r3, r2, #4
 80037fe:	3332      	adds	r3, #50	; 0x32
 8003800:	fba5 2303 	umull	r2, r3, r5, r3
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800380a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	6821      	ldr	r1, [r4, #0]
 8003814:	4413      	add	r3, r2
 8003816:	608b      	str	r3, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8003818:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800381a:	f7ff fa41 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800381e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003822:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003826:	6863      	ldr	r3, [r4, #4]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	fbb0 f0f3 	udiv	r0, r0, r3
 800382e:	4d0c      	ldr	r5, [pc, #48]	; (8003860 <UART_SetConfig+0xc8>)
 8003830:	fba5 3200 	umull	r3, r2, r5, r0
 8003834:	0951      	lsrs	r1, r2, #5
 8003836:	2264      	movs	r2, #100	; 0x64
 8003838:	fb02 0211 	mls	r2, r2, r1, r0
 800383c:	0113      	lsls	r3, r2, #4
 800383e:	3332      	adds	r3, #50	; 0x32
 8003840:	fba5 2303 	umull	r2, r3, r5, r3
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800384a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	6821      	ldr	r1, [r4, #0]
 8003854:	4413      	add	r3, r2
 8003856:	608b      	str	r3, [r1, #8]
 8003858:	e7de      	b.n	8003818 <UART_SetConfig+0x80>
 800385a:	bf00      	nop
 800385c:	40013800 	.word	0x40013800
 8003860:	51eb851f 	.word	0x51eb851f

08003864 <UART_WaitOnFlagUntilTimeout>:
{
 8003864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003868:	4605      	mov	r5, r0
 800386a:	460f      	mov	r7, r1
 800386c:	4616      	mov	r6, r2
 800386e:	4698      	mov	r8, r3
 8003870:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003872:	682b      	ldr	r3, [r5, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	ea37 0303 	bics.w	r3, r7, r3
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	42b3      	cmp	r3, r6
 8003882:	d11d      	bne.n	80038c0 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8003884:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003888:	d0f3      	beq.n	8003872 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800388a:	b12c      	cbz	r4, 8003898 <UART_WaitOnFlagUntilTimeout+0x34>
 800388c:	f7fd fcaa 	bl	80011e4 <HAL_GetTick>
 8003890:	eba0 0008 	sub.w	r0, r0, r8
 8003894:	42a0      	cmp	r0, r4
 8003896:	d9ec      	bls.n	8003872 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003898:	682a      	ldr	r2, [r5, #0]
 800389a:	68d3      	ldr	r3, [r2, #12]
 800389c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038a0:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a2:	682a      	ldr	r2, [r5, #0]
 80038a4:	6953      	ldr	r3, [r2, #20]
 80038a6:	f023 0301 	bic.w	r3, r3, #1
 80038aa:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80038ac:	2320      	movs	r3, #32
 80038ae:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80038b2:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80038b6:	2300      	movs	r3, #0
 80038b8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80038bc:	2003      	movs	r0, #3
 80038be:	e000      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 80038c0:	2000      	movs	r0, #0
}
 80038c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080038c6 <HAL_UART_Init>:
  if (huart == NULL)
 80038c6:	b358      	cbz	r0, 8003920 <HAL_UART_Init+0x5a>
{
 80038c8:	b510      	push	{r4, lr}
 80038ca:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80038cc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80038d0:	b30b      	cbz	r3, 8003916 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80038d2:	2324      	movs	r3, #36	; 0x24
 80038d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80038d8:	6822      	ldr	r2, [r4, #0]
 80038da:	68d3      	ldr	r3, [r2, #12]
 80038dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038e0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80038e2:	4620      	mov	r0, r4
 80038e4:	f7ff ff58 	bl	8003798 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e8:	6822      	ldr	r2, [r4, #0]
 80038ea:	6913      	ldr	r3, [r2, #16]
 80038ec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80038f0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f2:	6822      	ldr	r2, [r4, #0]
 80038f4:	6953      	ldr	r3, [r2, #20]
 80038f6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80038fa:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80038fc:	6822      	ldr	r2, [r4, #0]
 80038fe:	68d3      	ldr	r3, [r2, #12]
 8003900:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003904:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003906:	2000      	movs	r0, #0
 8003908:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800390a:	2320      	movs	r3, #32
 800390c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003910:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003914:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003916:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800391a:	f003 ff11 	bl	8007740 <HAL_UART_MspInit>
 800391e:	e7d8      	b.n	80038d2 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003920:	2001      	movs	r0, #1
}
 8003922:	4770      	bx	lr

08003924 <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 8003924:	2800      	cmp	r0, #0
 8003926:	d030      	beq.n	800398a <HAL_HalfDuplex_Init+0x66>
{
 8003928:	b510      	push	{r4, lr}
 800392a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800392c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003930:	b333      	cbz	r3, 8003980 <HAL_HalfDuplex_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003932:	2324      	movs	r3, #36	; 0x24
 8003934:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003938:	6822      	ldr	r2, [r4, #0]
 800393a:	68d3      	ldr	r3, [r2, #12]
 800393c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003940:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003942:	4620      	mov	r0, r4
 8003944:	f7ff ff28 	bl	8003798 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003948:	6822      	ldr	r2, [r4, #0]
 800394a:	6913      	ldr	r3, [r2, #16]
 800394c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003950:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003952:	6822      	ldr	r2, [r4, #0]
 8003954:	6953      	ldr	r3, [r2, #20]
 8003956:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800395a:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800395c:	6822      	ldr	r2, [r4, #0]
 800395e:	6953      	ldr	r3, [r2, #20]
 8003960:	f043 0308 	orr.w	r3, r3, #8
 8003964:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003966:	6822      	ldr	r2, [r4, #0]
 8003968:	68d3      	ldr	r3, [r2, #12]
 800396a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800396e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003970:	2000      	movs	r0, #0
 8003972:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003974:	2320      	movs	r3, #32
 8003976:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800397a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800397e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003980:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003984:	f003 fedc 	bl	8007740 <HAL_UART_MspInit>
 8003988:	e7d3      	b.n	8003932 <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 800398a:	2001      	movs	r0, #1
}
 800398c:	4770      	bx	lr

0800398e <HAL_UART_Transmit>:
{
 800398e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003996:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b20      	cmp	r3, #32
 800399e:	d155      	bne.n	8003a4c <HAL_UART_Transmit+0xbe>
 80039a0:	4604      	mov	r4, r0
 80039a2:	460d      	mov	r5, r1
 80039a4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80039a6:	2900      	cmp	r1, #0
 80039a8:	d055      	beq.n	8003a56 <HAL_UART_Transmit+0xc8>
 80039aa:	2a00      	cmp	r2, #0
 80039ac:	d055      	beq.n	8003a5a <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80039ae:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d053      	beq.n	8003a5e <HAL_UART_Transmit+0xd0>
 80039b6:	2301      	movs	r3, #1
 80039b8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039bc:	2300      	movs	r3, #0
 80039be:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c0:	2321      	movs	r3, #33	; 0x21
 80039c2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80039c6:	f7fd fc0d 	bl	80011e4 <HAL_GetTick>
 80039ca:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80039cc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80039d0:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039d4:	e010      	b.n	80039f8 <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d6:	9600      	str	r6, [sp, #0]
 80039d8:	463b      	mov	r3, r7
 80039da:	2200      	movs	r2, #0
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	4620      	mov	r0, r4
 80039e0:	f7ff ff40 	bl	8003864 <UART_WaitOnFlagUntilTimeout>
 80039e4:	2800      	cmp	r0, #0
 80039e6:	d13c      	bne.n	8003a62 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80039e8:	882b      	ldrh	r3, [r5, #0]
 80039ea:	6822      	ldr	r2, [r4, #0]
 80039ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f0:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80039f2:	6923      	ldr	r3, [r4, #16]
 80039f4:	b9c3      	cbnz	r3, 8003a28 <HAL_UART_Transmit+0x9a>
          pData += 2U;
 80039f6:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 80039f8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	b1b3      	cbz	r3, 8003a2c <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 80039fe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a06:	68a3      	ldr	r3, [r4, #8]
 8003a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0c:	d0e3      	beq.n	80039d6 <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0e:	9600      	str	r6, [sp, #0]
 8003a10:	463b      	mov	r3, r7
 8003a12:	2200      	movs	r2, #0
 8003a14:	2180      	movs	r1, #128	; 0x80
 8003a16:	4620      	mov	r0, r4
 8003a18:	f7ff ff24 	bl	8003864 <UART_WaitOnFlagUntilTimeout>
 8003a1c:	bb18      	cbnz	r0, 8003a66 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a1e:	782a      	ldrb	r2, [r5, #0]
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	605a      	str	r2, [r3, #4]
 8003a24:	3501      	adds	r5, #1
 8003a26:	e7e7      	b.n	80039f8 <HAL_UART_Transmit+0x6a>
          pData += 1U;
 8003a28:	3501      	adds	r5, #1
 8003a2a:	e7e5      	b.n	80039f8 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a2c:	9600      	str	r6, [sp, #0]
 8003a2e:	463b      	mov	r3, r7
 8003a30:	2200      	movs	r2, #0
 8003a32:	2140      	movs	r1, #64	; 0x40
 8003a34:	4620      	mov	r0, r4
 8003a36:	f7ff ff15 	bl	8003864 <UART_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	b9a8      	cbnz	r0, 8003a6a <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8003a44:	2200      	movs	r2, #0
 8003a46:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8003a4a:	e000      	b.n	8003a4e <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	b002      	add	sp, #8
 8003a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e7f9      	b.n	8003a4e <HAL_UART_Transmit+0xc0>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e7f7      	b.n	8003a4e <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e7f5      	b.n	8003a4e <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e7f3      	b.n	8003a4e <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e7f1      	b.n	8003a4e <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e7ef      	b.n	8003a4e <HAL_UART_Transmit+0xc0>

08003a6e <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a6e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d120      	bne.n	8003aba <HAL_UART_Receive_IT+0x4c>
    if ((pData == NULL) || (Size == 0U))
 8003a78:	b309      	cbz	r1, 8003abe <HAL_UART_Receive_IT+0x50>
 8003a7a:	b312      	cbz	r2, 8003ac2 <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 8003a7c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d020      	beq.n	8003ac6 <HAL_UART_Receive_IT+0x58>
    huart->pRxBuffPtr = pData;
 8003a84:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8003a86:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a88:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a8e:	2222      	movs	r2, #34	; 0x22
 8003a90:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8003a94:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a98:	6801      	ldr	r1, [r0, #0]
 8003a9a:	68ca      	ldr	r2, [r1, #12]
 8003a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa0:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003aa2:	6801      	ldr	r1, [r0, #0]
 8003aa4:	694a      	ldr	r2, [r1, #20]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003aac:	6801      	ldr	r1, [r0, #0]
 8003aae:	68ca      	ldr	r2, [r1, #12]
 8003ab0:	f042 0220 	orr.w	r2, r2, #32
 8003ab4:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	4770      	bx	lr
    return HAL_BUSY;
 8003aba:	2002      	movs	r0, #2
 8003abc:	4770      	bx	lr
      return HAL_ERROR;
 8003abe:	2001      	movs	r0, #1
 8003ac0:	4770      	bx	lr
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	4770      	bx	lr
    __HAL_LOCK(huart);
 8003ac6:	2002      	movs	r0, #2
}
 8003ac8:	4770      	bx	lr

08003aca <HAL_UART_TxCpltCallback>:
}
 8003aca:	4770      	bx	lr

08003acc <UART_EndTransmit_IT>:
{
 8003acc:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ace:	6801      	ldr	r1, [r0, #0]
 8003ad0:	68cb      	ldr	r3, [r1, #12]
 8003ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad6:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003ad8:	2320      	movs	r3, #32
 8003ada:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003ade:	f7ff fff4 	bl	8003aca <HAL_UART_TxCpltCallback>
}
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	bd08      	pop	{r3, pc}

08003ae6 <UART_Receive_IT>:
{
 8003ae6:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ae8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b22      	cmp	r3, #34	; 0x22
 8003af0:	d145      	bne.n	8003b7e <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003af2:	6883      	ldr	r3, [r0, #8]
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af8:	d00e      	beq.n	8003b18 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003afa:	6903      	ldr	r3, [r0, #16]
 8003afc:	bb03      	cbnz	r3, 8003b40 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003afe:	6803      	ldr	r3, [r0, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003b04:	1c59      	adds	r1, r3, #1
 8003b06:	6281      	str	r1, [r0, #40]	; 0x28
 8003b08:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8003b0a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003b12:	b1f3      	cbz	r3, 8003b52 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8003b14:	2000      	movs	r0, #0
 8003b16:	e033      	b.n	8003b80 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003b18:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b1a:	6903      	ldr	r3, [r0, #16]
 8003b1c:	b943      	cbnz	r3, 8003b30 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b1e:	6803      	ldr	r3, [r0, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b26:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8003b28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003b2a:	3302      	adds	r3, #2
 8003b2c:	6283      	str	r3, [r0, #40]	; 0x28
 8003b2e:	e7ec      	b.n	8003b0a <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003b30:	6803      	ldr	r3, [r0, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8003b38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	6283      	str	r3, [r0, #40]	; 0x28
 8003b3e:	e7e4      	b.n	8003b0a <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b40:	6803      	ldr	r3, [r0, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003b46:	1c51      	adds	r1, r2, #1
 8003b48:	6281      	str	r1, [r0, #40]	; 0x28
 8003b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b4e:	7013      	strb	r3, [r2, #0]
 8003b50:	e7db      	b.n	8003b0a <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b52:	6802      	ldr	r2, [r0, #0]
 8003b54:	68d3      	ldr	r3, [r2, #12]
 8003b56:	f023 0320 	bic.w	r3, r3, #32
 8003b5a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b5c:	6802      	ldr	r2, [r0, #0]
 8003b5e:	68d3      	ldr	r3, [r2, #12]
 8003b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b64:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b66:	6802      	ldr	r2, [r0, #0]
 8003b68:	6953      	ldr	r3, [r2, #20]
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003b70:	2320      	movs	r3, #32
 8003b72:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003b76:	f001 f9e3 	bl	8004f40 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	e000      	b.n	8003b80 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8003b7e:	2002      	movs	r0, #2
}
 8003b80:	bd08      	pop	{r3, pc}

08003b82 <HAL_UART_ErrorCallback>:
}
 8003b82:	4770      	bx	lr

08003b84 <HAL_UART_IRQHandler>:
{
 8003b84:	b510      	push	{r4, lr}
 8003b86:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b88:	6802      	ldr	r2, [r0, #0]
 8003b8a:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b8c:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b8e:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8003b90:	f013 000f 	ands.w	r0, r3, #15
 8003b94:	d105      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b96:	f013 0f20 	tst.w	r3, #32
 8003b9a:	d002      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x1e>
 8003b9c:	f011 0f20 	tst.w	r1, #32
 8003ba0:	d153      	bne.n	8003c4a <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d067      	beq.n	8003c76 <HAL_UART_IRQHandler+0xf2>
 8003ba6:	f012 0201 	ands.w	r2, r2, #1
 8003baa:	d102      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x2e>
 8003bac:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003bb0:	d061      	beq.n	8003c76 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bb2:	f013 0f01 	tst.w	r3, #1
 8003bb6:	d006      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x42>
 8003bb8:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003bbc:	d003      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bbe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003bc0:	f040 0001 	orr.w	r0, r0, #1
 8003bc4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bc6:	f013 0f04 	tst.w	r3, #4
 8003bca:	d004      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x52>
 8003bcc:	b11a      	cbz	r2, 8003bd6 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003bd0:	f040 0002 	orr.w	r0, r0, #2
 8003bd4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bd6:	f013 0f02 	tst.w	r3, #2
 8003bda:	d004      	beq.n	8003be6 <HAL_UART_IRQHandler+0x62>
 8003bdc:	b11a      	cbz	r2, 8003be6 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bde:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003be0:	f040 0004 	orr.w	r0, r0, #4
 8003be4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003be6:	f013 0f08 	tst.w	r3, #8
 8003bea:	d004      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x72>
 8003bec:	b11a      	cbz	r2, 8003bf6 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003bf0:	f042 0208 	orr.w	r2, r2, #8
 8003bf4:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bf6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003bf8:	2a00      	cmp	r2, #0
 8003bfa:	d048      	beq.n	8003c8e <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bfc:	f013 0f20 	tst.w	r3, #32
 8003c00:	d002      	beq.n	8003c08 <HAL_UART_IRQHandler+0x84>
 8003c02:	f011 0f20 	tst.w	r1, #32
 8003c06:	d124      	bne.n	8003c52 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c10:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003c12:	f012 0f08 	tst.w	r2, #8
 8003c16:	d100      	bne.n	8003c1a <HAL_UART_IRQHandler+0x96>
 8003c18:	b33b      	cbz	r3, 8003c6a <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7ff fd7a 	bl	8003714 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003c28:	d01b      	beq.n	8003c62 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2a:	695a      	ldr	r2, [r3, #20]
 8003c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c30:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003c32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c34:	b18b      	cbz	r3, 8003c5a <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c36:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <HAL_UART_IRQHandler+0x11c>)
 8003c38:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003c3c:	f7fd fe5a 	bl	80018f4 <HAL_DMA_Abort_IT>
 8003c40:	b328      	cbz	r0, 8003c8e <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c42:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003c44:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c46:	4798      	blx	r3
 8003c48:	e021      	b.n	8003c8e <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f7ff ff4b 	bl	8003ae6 <UART_Receive_IT>
      return;
 8003c50:	e01d      	b.n	8003c8e <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8003c52:	4620      	mov	r0, r4
 8003c54:	f7ff ff47 	bl	8003ae6 <UART_Receive_IT>
 8003c58:	e7d6      	b.n	8003c08 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f7ff ff91 	bl	8003b82 <HAL_UART_ErrorCallback>
 8003c60:	e015      	b.n	8003c8e <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8003c62:	4620      	mov	r0, r4
 8003c64:	f7ff ff8d 	bl	8003b82 <HAL_UART_ErrorCallback>
 8003c68:	e011      	b.n	8003c8e <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f7ff ff89 	bl	8003b82 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003c74:	e00b      	b.n	8003c8e <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c76:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003c7a:	d002      	beq.n	8003c82 <HAL_UART_IRQHandler+0xfe>
 8003c7c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003c80:	d106      	bne.n	8003c90 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c82:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c86:	d002      	beq.n	8003c8e <HAL_UART_IRQHandler+0x10a>
 8003c88:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003c8c:	d104      	bne.n	8003c98 <HAL_UART_IRQHandler+0x114>
}
 8003c8e:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8003c90:	4620      	mov	r0, r4
 8003c92:	f7ff fd4d 	bl	8003730 <UART_Transmit_IT>
    return;
 8003c96:	e7fa      	b.n	8003c8e <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f7ff ff17 	bl	8003acc <UART_EndTransmit_IT>
    return;
 8003c9e:	e7f6      	b.n	8003c8e <HAL_UART_IRQHandler+0x10a>
 8003ca0:	08003ca5 	.word	0x08003ca5

08003ca4 <UART_DMAAbortOnError>:
{
 8003ca4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ca6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cac:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003cae:	f7ff ff68 	bl	8003b82 <HAL_UART_ErrorCallback>
}
 8003cb2:	bd08      	pop	{r3, pc}

08003cb4 <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 8003cb4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d014      	beq.n	8003ce6 <HAL_HalfDuplex_EnableReceiver+0x32>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  huart->gState = HAL_UART_STATE_BUSY;
 8003cc2:	2324      	movs	r3, #36	; 0x24
 8003cc4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpreg = huart->Instance->CR1;
 8003cc8:	6802      	ldr	r2, [r0, #0]
 8003cca:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8003ccc:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_RE;
 8003cd0:	f043 0304 	orr.w	r3, r3, #4
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003cd4:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003cd6:	2320      	movs	r3, #32
 8003cd8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	4770      	bx	lr
  __HAL_LOCK(huart);
 8003ce6:	2002      	movs	r0, #2
}
 8003ce8:	4770      	bx	lr

08003cea <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003cea:	b430      	push	{r4, r5}
 8003cec:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003cee:	780c      	ldrb	r4, [r1, #0]
 8003cf0:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8003cf4:	b292      	uxth	r2, r2
 8003cf6:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8003cfa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cfe:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8003d00:	78c8      	ldrb	r0, [r1, #3]
 8003d02:	2803      	cmp	r0, #3
 8003d04:	d85a      	bhi.n	8003dbc <USB_ActivateEndpoint+0xd2>
 8003d06:	e8df f000 	tbb	[pc, r0]
 8003d0a:	554d      	.short	0x554d
 8003d0c:	5102      	.short	0x5102
  HAL_StatusTypeDef ret = HAL_OK;
 8003d0e:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003d10:	f248 0580 	movw	r5, #32896	; 0x8080
 8003d14:	432a      	orrs	r2, r5
 8003d16:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003d1a:	780c      	ldrb	r4, [r1, #0]
 8003d1c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003d20:	b292      	uxth	r2, r2
 8003d22:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d2a:	4322      	orrs	r2, r4
 8003d2c:	432a      	orrs	r2, r5
 8003d2e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 8003d32:	7b0a      	ldrb	r2, [r1, #12]
 8003d34:	2a00      	cmp	r2, #0
 8003d36:	f040 80b1 	bne.w	8003e9c <USB_ActivateEndpoint+0x1b2>
  {
    if (ep->is_in != 0U)
 8003d3a:	784a      	ldrb	r2, [r1, #1]
 8003d3c:	2a00      	cmp	r2, #0
 8003d3e:	d04e      	beq.n	8003dde <USB_ActivateEndpoint+0xf4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d40:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003d44:	441a      	add	r2, r3
 8003d46:	780c      	ldrb	r4, [r1, #0]
 8003d48:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003d4c:	88cc      	ldrh	r4, [r1, #6]
 8003d4e:	0864      	lsrs	r4, r4, #1
 8003d50:	0064      	lsls	r4, r4, #1
 8003d52:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d56:	780c      	ldrb	r4, [r1, #0]
 8003d58:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003d5c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d60:	d00c      	beq.n	8003d7c <USB_ActivateEndpoint+0x92>
 8003d62:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003d66:	b292      	uxth	r2, r2
 8003d68:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d74:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003d78:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003d7c:	78ca      	ldrb	r2, [r1, #3]
 8003d7e:	2a01      	cmp	r2, #1
 8003d80:	d01e      	beq.n	8003dc0 <USB_ActivateEndpoint+0xd6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d82:	7809      	ldrb	r1, [r1, #0]
 8003d84:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003d88:	b292      	uxth	r2, r2
 8003d8a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d92:	f082 0220 	eor.w	r2, r2, #32
 8003d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d9e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003da2:	e060      	b.n	8003e66 <USB_ActivateEndpoint+0x17c>
      wEpRegVal |= USB_EP_CONTROL;
 8003da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8003da8:	2000      	movs	r0, #0
      break;
 8003daa:	e7b1      	b.n	8003d10 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003dac:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8003db0:	2000      	movs	r0, #0
      break;
 8003db2:	e7ad      	b.n	8003d10 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003db4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8003db8:	2000      	movs	r0, #0
      break;
 8003dba:	e7a9      	b.n	8003d10 <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	e7a7      	b.n	8003d10 <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dc0:	7809      	ldrb	r1, [r1, #0]
 8003dc2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003dc6:	b292      	uxth	r2, r2
 8003dc8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dd8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003ddc:	e043      	b.n	8003e66 <USB_ActivateEndpoint+0x17c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003dde:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003de2:	441a      	add	r2, r3
 8003de4:	780c      	ldrb	r4, [r1, #0]
 8003de6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003dea:	88cc      	ldrh	r4, [r1, #6]
 8003dec:	0864      	lsrs	r4, r4, #1
 8003dee:	0064      	lsls	r4, r4, #1
 8003df0:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003df4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003df8:	441a      	add	r2, r3
 8003dfa:	780c      	ldrb	r4, [r1, #0]
 8003dfc:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003e00:	690c      	ldr	r4, [r1, #16]
 8003e02:	bb94      	cbnz	r4, 8003e6a <USB_ActivateEndpoint+0x180>
 8003e04:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8003e08:	b2a4      	uxth	r4, r4
 8003e0a:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8003e0e:	b2a4      	uxth	r4, r4
 8003e10:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8003e14:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8003e18:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003e1c:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e20:	780c      	ldrb	r4, [r1, #0]
 8003e22:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003e26:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003e2a:	d00c      	beq.n	8003e46 <USB_ActivateEndpoint+0x15c>
 8003e2c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003e30:	b292      	uxth	r2, r2
 8003e32:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003e36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e3a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003e3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e42:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e46:	7809      	ldrb	r1, [r1, #0]
 8003e48:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003e4c:	b292      	uxth	r2, r2
 8003e4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e56:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e62:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8003e66:	bc30      	pop	{r4, r5}
 8003e68:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e6a:	2c3e      	cmp	r4, #62	; 0x3e
 8003e6c:	d809      	bhi.n	8003e82 <USB_ActivateEndpoint+0x198>
 8003e6e:	0865      	lsrs	r5, r4, #1
 8003e70:	f014 0f01 	tst.w	r4, #1
 8003e74:	d000      	beq.n	8003e78 <USB_ActivateEndpoint+0x18e>
 8003e76:	3501      	adds	r5, #1
 8003e78:	02ad      	lsls	r5, r5, #10
 8003e7a:	b2ad      	uxth	r5, r5
 8003e7c:	f8a2 540c 	strh.w	r5, [r2, #1036]	; 0x40c
 8003e80:	e7ce      	b.n	8003e20 <USB_ActivateEndpoint+0x136>
 8003e82:	0965      	lsrs	r5, r4, #5
 8003e84:	f014 0f1f 	tst.w	r4, #31
 8003e88:	d100      	bne.n	8003e8c <USB_ActivateEndpoint+0x1a2>
 8003e8a:	3d01      	subs	r5, #1
 8003e8c:	ea6f 64c5 	mvn.w	r4, r5, lsl #27
 8003e90:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003e94:	b2a4      	uxth	r4, r4
 8003e96:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8003e9a:	e7c1      	b.n	8003e20 <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003e9c:	780c      	ldrb	r4, [r1, #0]
 8003e9e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003ea2:	b292      	uxth	r2, r2
 8003ea4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003ea8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003eac:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003eb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003eb4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003eb8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003ebc:	441a      	add	r2, r3
 8003ebe:	780c      	ldrb	r4, [r1, #0]
 8003ec0:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003ec4:	890c      	ldrh	r4, [r1, #8]
 8003ec6:	0864      	lsrs	r4, r4, #1
 8003ec8:	0064      	lsls	r4, r4, #1
 8003eca:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 8003ece:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003ed2:	441a      	add	r2, r3
 8003ed4:	780c      	ldrb	r4, [r1, #0]
 8003ed6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003eda:	894c      	ldrh	r4, [r1, #10]
 8003edc:	0864      	lsrs	r4, r4, #1
 8003ede:	0064      	lsls	r4, r4, #1
 8003ee0:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
    if (ep->is_in == 0U)
 8003ee4:	784a      	ldrb	r2, [r1, #1]
 8003ee6:	2a00      	cmp	r2, #0
 8003ee8:	d14e      	bne.n	8003f88 <USB_ActivateEndpoint+0x29e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003eea:	780c      	ldrb	r4, [r1, #0]
 8003eec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003ef0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003ef4:	d00c      	beq.n	8003f10 <USB_ActivateEndpoint+0x226>
 8003ef6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003efa:	b292      	uxth	r2, r2
 8003efc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003f00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f04:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003f08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f0c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f10:	780c      	ldrb	r4, [r1, #0]
 8003f12:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003f16:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003f1a:	d00c      	beq.n	8003f36 <USB_ActivateEndpoint+0x24c>
 8003f1c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003f20:	b292      	uxth	r2, r2
 8003f22:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003f26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f2e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003f32:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003f36:	780c      	ldrb	r4, [r1, #0]
 8003f38:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003f3c:	b292      	uxth	r2, r2
 8003f3e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003f42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f4a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003f4e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f52:	780d      	ldrb	r5, [r1, #0]
 8003f54:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8003f58:	b292      	uxth	r2, r2
 8003f5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f62:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003f66:	f248 0480 	movw	r4, #32896	; 0x8080
 8003f6a:	4322      	orrs	r2, r4
 8003f6c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f70:	7809      	ldrb	r1, [r1, #0]
 8003f72:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003f76:	b292      	uxth	r2, r2
 8003f78:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f80:	4322      	orrs	r2, r4
 8003f82:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003f86:	e76e      	b.n	8003e66 <USB_ActivateEndpoint+0x17c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f88:	780c      	ldrb	r4, [r1, #0]
 8003f8a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003f8e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003f92:	d00c      	beq.n	8003fae <USB_ActivateEndpoint+0x2c4>
 8003f94:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003f98:	b292      	uxth	r2, r2
 8003f9a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003f9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fa2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003fa6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003faa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fae:	780c      	ldrb	r4, [r1, #0]
 8003fb0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003fb4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003fb8:	d00c      	beq.n	8003fd4 <USB_ActivateEndpoint+0x2ea>
 8003fba:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003fbe:	b292      	uxth	r2, r2
 8003fc0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003fc4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fcc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003fd0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003fd4:	780c      	ldrb	r4, [r1, #0]
 8003fd6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003fda:	b292      	uxth	r2, r2
 8003fdc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003fe0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fe4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003fe8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fec:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8003ff0:	78ca      	ldrb	r2, [r1, #3]
 8003ff2:	2a01      	cmp	r2, #1
 8003ff4:	d01e      	beq.n	8004034 <USB_ActivateEndpoint+0x34a>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ff6:	780c      	ldrb	r4, [r1, #0]
 8003ff8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003ffc:	b292      	uxth	r2, r2
 8003ffe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004006:	f082 0220 	eor.w	r2, r2, #32
 800400a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800400e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004012:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004016:	7809      	ldrb	r1, [r1, #0]
 8004018:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800401c:	b292      	uxth	r2, r2
 800401e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004022:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800402a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800402e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004032:	e718      	b.n	8003e66 <USB_ActivateEndpoint+0x17c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004034:	780c      	ldrb	r4, [r1, #0]
 8004036:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800403a:	b292      	uxth	r2, r2
 800403c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004044:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004048:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800404c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8004050:	e7e1      	b.n	8004016 <USB_ActivateEndpoint+0x32c>

08004052 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8004052:	784b      	ldrb	r3, [r1, #1]
 8004054:	b98b      	cbnz	r3, 800407a <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004056:	780a      	ldrb	r2, [r1, #0]
 8004058:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800405c:	b29b      	uxth	r3, r3
 800405e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004066:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800406a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004072:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8004076:	2000      	movs	r0, #0
 8004078:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800407a:	780a      	ldrb	r2, [r1, #0]
 800407c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004080:	b29b      	uxth	r3, r3
 8004082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408a:	f083 0310 	eor.w	r3, r3, #16
 800408e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004096:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800409a:	e7ec      	b.n	8004076 <USB_EPSetStall+0x24>

0800409c <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800409c:	7b0b      	ldrb	r3, [r1, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d14b      	bne.n	800413a <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 80040a2:	784b      	ldrb	r3, [r1, #1]
 80040a4:	b333      	cbz	r3, 80040f4 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040a6:	780a      	ldrb	r2, [r1, #0]
 80040a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80040ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80040b0:	d00c      	beq.n	80040cc <USB_EPClearStall+0x30>
 80040b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80040cc:	78cb      	ldrb	r3, [r1, #3]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d033      	beq.n	800413a <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80040d2:	780a      	ldrb	r2, [r1, #0]
 80040d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e2:	f083 0320 	eor.w	r3, r3, #32
 80040e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80040f2:	e022      	b.n	800413a <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040f4:	780a      	ldrb	r2, [r1, #0]
 80040f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80040fa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80040fe:	d00c      	beq.n	800411a <USB_EPClearStall+0x7e>
 8004100:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004104:	b29b      	uxth	r3, r3
 8004106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800410a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004116:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800411a:	780a      	ldrb	r2, [r1, #0]
 800411c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004120:	b29b      	uxth	r3, r3
 8004122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800412e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004136:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800413a:	2000      	movs	r0, #0
 800413c:	4770      	bx	lr

0800413e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800413e:	b911      	cbnz	r1, 8004146 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8004146:	2000      	movs	r0, #0
 8004148:	4770      	bx	lr

0800414a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800414a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800414e:	4770      	bx	lr

08004150 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004150:	2000      	movs	r0, #0
 8004152:	4770      	bx	lr

08004154 <USB_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004154:	3301      	adds	r3, #1
 8004156:	085b      	lsrs	r3, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004158:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800415c:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8004160:	b163      	cbz	r3, 800417c <USB_WritePMA+0x28>
{
 8004162:	b410      	push	{r4}
  {
    temp1 = *pBuf;
 8004164:	780c      	ldrb	r4, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004166:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8004168:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 800416c:	f822 4b04 	strh.w	r4, [r2], #4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8004170:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8004172:	3b01      	subs	r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f5      	bne.n	8004164 <USB_WritePMA+0x10>
  }
}
 8004178:	bc10      	pop	{r4}
 800417a:	4770      	bx	lr
 800417c:	4770      	bx	lr

0800417e <USB_EPStartXfer>:
{
 800417e:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8004180:	784e      	ldrb	r6, [r1, #1]
 8004182:	2e01      	cmp	r6, #1
 8004184:	d033      	beq.n	80041ee <USB_EPStartXfer+0x70>
    if (ep->xfer_len > ep->maxpacket)
 8004186:	698a      	ldr	r2, [r1, #24]
 8004188:	690b      	ldr	r3, [r1, #16]
 800418a:	429a      	cmp	r2, r3
 800418c:	f240 80fc 	bls.w	8004388 <USB_EPStartXfer+0x20a>
      ep->xfer_len -= len;
 8004190:	1ad2      	subs	r2, r2, r3
 8004192:	618a      	str	r2, [r1, #24]
    if (ep->doublebuffer == 0U)
 8004194:	7b0a      	ldrb	r2, [r1, #12]
 8004196:	2a00      	cmp	r2, #0
 8004198:	f040 8113 	bne.w	80043c2 <USB_EPStartXfer+0x244>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800419c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80041a0:	4402      	add	r2, r0
 80041a2:	780c      	ldrb	r4, [r1, #0]
 80041a4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f040 80f1 	bne.w	8004390 <USB_EPStartXfer+0x212>
 80041ae:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 80041be:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 80041c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c6:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041ca:	780a      	ldrb	r2, [r1, #0]
 80041cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80041de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80041ea:	2000      	movs	r0, #0
 80041ec:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 80041ee:	698a      	ldr	r2, [r1, #24]
 80041f0:	690b      	ldr	r3, [r1, #16]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d922      	bls.n	800423c <USB_EPStartXfer+0xbe>
      ep->xfer_len -= len;
 80041f6:	1ad2      	subs	r2, r2, r3
 80041f8:	618a      	str	r2, [r1, #24]
 80041fa:	460c      	mov	r4, r1
 80041fc:	4605      	mov	r5, r0
    if (ep->doublebuffer == 0U)
 80041fe:	7b0a      	ldrb	r2, [r1, #12]
 8004200:	b302      	cbz	r2, 8004244 <USB_EPStartXfer+0xc6>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004202:	780a      	ldrb	r2, [r1, #0]
 8004204:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8004208:	f011 0f40 	tst.w	r1, #64	; 0x40
 800420c:	d072      	beq.n	80042f4 <USB_EPStartXfer+0x176>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800420e:	2e00      	cmp	r6, #0
 8004210:	d140      	bne.n	8004294 <USB_EPStartXfer+0x116>
 8004212:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8004216:	4401      	add	r1, r0
 8004218:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800421c:	bb0b      	cbnz	r3, 8004262 <USB_EPStartXfer+0xe4>
 800421e:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8004222:	b289      	uxth	r1, r1
 8004224:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8004228:	b289      	uxth	r1, r1
 800422a:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 800422e:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8004232:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004236:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 800423a:	e033      	b.n	80042a4 <USB_EPStartXfer+0x126>
      ep->xfer_len = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	618b      	str	r3, [r1, #24]
      len = ep->xfer_len;
 8004240:	4613      	mov	r3, r2
 8004242:	e7da      	b.n	80041fa <USB_EPStartXfer+0x7c>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004244:	b29e      	uxth	r6, r3
 8004246:	4633      	mov	r3, r6
 8004248:	88ca      	ldrh	r2, [r1, #6]
 800424a:	6949      	ldr	r1, [r1, #20]
 800424c:	f7ff ff82 	bl	8004154 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004250:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8004254:	442b      	add	r3, r5
 8004256:	7822      	ldrb	r2, [r4, #0]
 8004258:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800425c:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
 8004260:	e037      	b.n	80042d2 <USB_EPStartXfer+0x154>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004262:	2b3e      	cmp	r3, #62	; 0x3e
 8004264:	d809      	bhi.n	800427a <USB_EPStartXfer+0xfc>
 8004266:	0859      	lsrs	r1, r3, #1
 8004268:	f013 0f01 	tst.w	r3, #1
 800426c:	d000      	beq.n	8004270 <USB_EPStartXfer+0xf2>
 800426e:	3101      	adds	r1, #1
 8004270:	0289      	lsls	r1, r1, #10
 8004272:	b289      	uxth	r1, r1
 8004274:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8004278:	e014      	b.n	80042a4 <USB_EPStartXfer+0x126>
 800427a:	0959      	lsrs	r1, r3, #5
 800427c:	f013 0f1f 	tst.w	r3, #31
 8004280:	d100      	bne.n	8004284 <USB_EPStartXfer+0x106>
 8004282:	3901      	subs	r1, #1
 8004284:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8004288:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800428c:	b289      	uxth	r1, r1
 800428e:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8004292:	e007      	b.n	80042a4 <USB_EPStartXfer+0x126>
 8004294:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8004298:	4401      	add	r1, r0
 800429a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800429e:	b299      	uxth	r1, r3
 80042a0:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
        pmabuffer = ep->pmaaddr1;
 80042a4:	8962      	ldrh	r2, [r4, #10]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	6961      	ldr	r1, [r4, #20]
 80042aa:	4628      	mov	r0, r5
 80042ac:	f7ff ff52 	bl	8004154 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80042b0:	7863      	ldrb	r3, [r4, #1]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d157      	bne.n	8004366 <USB_EPStartXfer+0x1e8>
 80042b6:	7822      	ldrb	r2, [r4, #0]
 80042b8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042ce:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80042d2:	7822      	ldrb	r2, [r4, #0]
 80042d4:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80042e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ee:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80042f2:	e77a      	b.n	80041ea <USB_EPStartXfer+0x6c>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042f4:	bb6e      	cbnz	r6, 8004352 <USB_EPStartXfer+0x1d4>
 80042f6:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80042fa:	4401      	add	r1, r0
 80042fc:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8004300:	b973      	cbnz	r3, 8004320 <USB_EPStartXfer+0x1a2>
 8004302:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8004306:	b289      	uxth	r1, r1
 8004308:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800430c:	b289      	uxth	r1, r1
 800430e:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8004312:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8004316:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800431a:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 800431e:	e020      	b.n	8004362 <USB_EPStartXfer+0x1e4>
 8004320:	2b3e      	cmp	r3, #62	; 0x3e
 8004322:	d809      	bhi.n	8004338 <USB_EPStartXfer+0x1ba>
 8004324:	0859      	lsrs	r1, r3, #1
 8004326:	f013 0f01 	tst.w	r3, #1
 800432a:	d000      	beq.n	800432e <USB_EPStartXfer+0x1b0>
 800432c:	3101      	adds	r1, #1
 800432e:	0289      	lsls	r1, r1, #10
 8004330:	b289      	uxth	r1, r1
 8004332:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8004336:	e014      	b.n	8004362 <USB_EPStartXfer+0x1e4>
 8004338:	0959      	lsrs	r1, r3, #5
 800433a:	f013 0f1f 	tst.w	r3, #31
 800433e:	d100      	bne.n	8004342 <USB_EPStartXfer+0x1c4>
 8004340:	3901      	subs	r1, #1
 8004342:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8004346:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800434a:	b289      	uxth	r1, r1
 800434c:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8004350:	e007      	b.n	8004362 <USB_EPStartXfer+0x1e4>
 8004352:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8004356:	4401      	add	r1, r0
 8004358:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800435c:	b299      	uxth	r1, r3
 800435e:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8004362:	8922      	ldrh	r2, [r4, #8]
 8004364:	e79f      	b.n	80042a6 <USB_EPStartXfer+0x128>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004366:	2b01      	cmp	r3, #1
 8004368:	d1b3      	bne.n	80042d2 <USB_EPStartXfer+0x154>
 800436a:	7822      	ldrb	r2, [r4, #0]
 800436c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800437e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004382:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8004386:	e7a4      	b.n	80042d2 <USB_EPStartXfer+0x154>
      ep->xfer_len = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	618b      	str	r3, [r1, #24]
      len = ep->xfer_len;
 800438c:	4613      	mov	r3, r2
 800438e:	e701      	b.n	8004194 <USB_EPStartXfer+0x16>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004390:	2b3e      	cmp	r3, #62	; 0x3e
 8004392:	d809      	bhi.n	80043a8 <USB_EPStartXfer+0x22a>
 8004394:	085c      	lsrs	r4, r3, #1
 8004396:	f013 0f01 	tst.w	r3, #1
 800439a:	d000      	beq.n	800439e <USB_EPStartXfer+0x220>
 800439c:	3401      	adds	r4, #1
 800439e:	02a4      	lsls	r4, r4, #10
 80043a0:	b2a4      	uxth	r4, r4
 80043a2:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 80043a6:	e710      	b.n	80041ca <USB_EPStartXfer+0x4c>
 80043a8:	095c      	lsrs	r4, r3, #5
 80043aa:	f013 0f1f 	tst.w	r3, #31
 80043ae:	d100      	bne.n	80043b2 <USB_EPStartXfer+0x234>
 80043b0:	3c01      	subs	r4, #1
 80043b2:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 80043b6:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80043ba:	b2a4      	uxth	r4, r4
 80043bc:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 80043c0:	e703      	b.n	80041ca <USB_EPStartXfer+0x4c>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80043c2:	b9a6      	cbnz	r6, 80043ee <USB_EPStartXfer+0x270>
 80043c4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80043c8:	4402      	add	r2, r0
 80043ca:	780c      	ldrb	r4, [r1, #0]
 80043cc:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80043d0:	bb33      	cbnz	r3, 8004420 <USB_EPStartXfer+0x2a2>
 80043d2:	f8b2 4404 	ldrh.w	r4, [r2, #1028]	; 0x404
 80043d6:	b2a4      	uxth	r4, r4
 80043d8:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80043dc:	b2a4      	uxth	r4, r4
 80043de:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 80043e2:	f8b2 4404 	ldrh.w	r4, [r2, #1028]	; 0x404
 80043e6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80043ea:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 80043ee:	784a      	ldrb	r2, [r1, #1]
 80043f0:	2a00      	cmp	r2, #0
 80043f2:	d147      	bne.n	8004484 <USB_EPStartXfer+0x306>
 80043f4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80043f8:	4402      	add	r2, r0
 80043fa:	780c      	ldrb	r4, [r1, #0]
 80043fc:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004400:	bb3b      	cbnz	r3, 8004452 <USB_EPStartXfer+0x2d4>
 8004402:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8004406:	b29b      	uxth	r3, r3
 8004408:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800440c:	b29b      	uxth	r3, r3
 800440e:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8004412:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8004416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800441a:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 800441e:	e6d4      	b.n	80041ca <USB_EPStartXfer+0x4c>
 8004420:	2b3e      	cmp	r3, #62	; 0x3e
 8004422:	d809      	bhi.n	8004438 <USB_EPStartXfer+0x2ba>
 8004424:	085c      	lsrs	r4, r3, #1
 8004426:	f013 0f01 	tst.w	r3, #1
 800442a:	d000      	beq.n	800442e <USB_EPStartXfer+0x2b0>
 800442c:	3401      	adds	r4, #1
 800442e:	02a4      	lsls	r4, r4, #10
 8004430:	b2a4      	uxth	r4, r4
 8004432:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8004436:	e7da      	b.n	80043ee <USB_EPStartXfer+0x270>
 8004438:	095c      	lsrs	r4, r3, #5
 800443a:	f013 0f1f 	tst.w	r3, #31
 800443e:	d100      	bne.n	8004442 <USB_EPStartXfer+0x2c4>
 8004440:	3c01      	subs	r4, #1
 8004442:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8004446:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800444a:	b2a4      	uxth	r4, r4
 800444c:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8004450:	e7cd      	b.n	80043ee <USB_EPStartXfer+0x270>
 8004452:	2b3e      	cmp	r3, #62	; 0x3e
 8004454:	d809      	bhi.n	800446a <USB_EPStartXfer+0x2ec>
 8004456:	085c      	lsrs	r4, r3, #1
 8004458:	f013 0f01 	tst.w	r3, #1
 800445c:	d000      	beq.n	8004460 <USB_EPStartXfer+0x2e2>
 800445e:	3401      	adds	r4, #1
 8004460:	02a4      	lsls	r4, r4, #10
 8004462:	b2a4      	uxth	r4, r4
 8004464:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8004468:	e6af      	b.n	80041ca <USB_EPStartXfer+0x4c>
 800446a:	095c      	lsrs	r4, r3, #5
 800446c:	f013 0f1f 	tst.w	r3, #31
 8004470:	d100      	bne.n	8004474 <USB_EPStartXfer+0x2f6>
 8004472:	3c01      	subs	r4, #1
 8004474:	ea6f 63c4 	mvn.w	r3, r4, lsl #27
 8004478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800447c:	b29b      	uxth	r3, r3
 800447e:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8004482:	e6a2      	b.n	80041ca <USB_EPStartXfer+0x4c>
 8004484:	2a01      	cmp	r2, #1
 8004486:	f47f aea0 	bne.w	80041ca <USB_EPStartXfer+0x4c>
 800448a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800448e:	4402      	add	r2, r0
 8004490:	780c      	ldrb	r4, [r1, #0]
 8004492:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004496:	b29b      	uxth	r3, r3
 8004498:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 800449c:	e695      	b.n	80041ca <USB_EPStartXfer+0x4c>

0800449e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800449e:	b430      	push	{r4, r5}
  uint32_t n = (uint32_t)wNBytes >> 1;
 80044a0:	085d      	lsrs	r5, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80044a2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80044a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80044aa:	e007      	b.n	80044bc <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80044ac:	f832 4b04 	ldrh.w	r4, [r2], #4
 80044b0:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80044b2:	700c      	strb	r4, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80044b4:	0a24      	lsrs	r4, r4, #8
 80044b6:	704c      	strb	r4, [r1, #1]
    pBuf++;
 80044b8:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 80044ba:	3d01      	subs	r5, #1
 80044bc:	2d00      	cmp	r5, #0
 80044be:	d1f5      	bne.n	80044ac <USB_ReadPMA+0xe>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80044c0:	f013 0f01 	tst.w	r3, #1
 80044c4:	d001      	beq.n	80044ca <USB_ReadPMA+0x2c>
  {
    temp = *pdwVal;
 80044c6:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80044c8:	700b      	strb	r3, [r1, #0]
  }
}
 80044ca:	bc30      	pop	{r4, r5}
 80044cc:	4770      	bx	lr

080044ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80044ce:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80044d0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044d4:	b133      	cbz	r3, 80044e4 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4798      	blx	r3
 80044da:	b908      	cbnz	r0, 80044e0 <USBD_SetClassConfig+0x12>
    {
      ret = USBD_OK;
 80044dc:	2000      	movs	r0, #0
    }
  }

  return ret;
}
 80044de:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80044e0:	2002      	movs	r0, #2
 80044e2:	e7fc      	b.n	80044de <USBD_SetClassConfig+0x10>
 80044e4:	2002      	movs	r0, #2
 80044e6:	e7fa      	b.n	80044de <USBD_SetClassConfig+0x10>

080044e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80044e8:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80044ea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4798      	blx	r3

  return USBD_OK;
}
 80044f2:	2000      	movs	r0, #0
 80044f4:	bd08      	pop	{r3, pc}

080044f6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80044f6:	b538      	push	{r3, r4, r5, lr}
 80044f8:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80044fa:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 80044fe:	4628      	mov	r0, r5
 8004500:	f000 f92f 	bl	8004762 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004504:	2301      	movs	r3, #1
 8004506:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800450a:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800450e:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004512:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8004516:	f001 031f 	and.w	r3, r1, #31
 800451a:	2b01      	cmp	r3, #1
 800451c:	d00e      	beq.n	800453c <USBD_LL_SetupStage+0x46>
 800451e:	b13b      	cbz	r3, 8004530 <USBD_LL_SetupStage+0x3a>
 8004520:	2b02      	cmp	r3, #2
 8004522:	d010      	beq.n	8004546 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004524:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004528:	4620      	mov	r0, r4
 800452a:	f003 fbbc 	bl	8007ca6 <USBD_LL_StallEP>
      break;
 800452e:	e003      	b.n	8004538 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8004530:	4629      	mov	r1, r5
 8004532:	4620      	mov	r0, r4
 8004534:	f000 fac3 	bl	8004abe <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8004538:	2000      	movs	r0, #0
 800453a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800453c:	4629      	mov	r1, r5
 800453e:	4620      	mov	r0, r4
 8004540:	f000 faf1 	bl	8004b26 <USBD_StdItfReq>
      break;
 8004544:	e7f8      	b.n	8004538 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8004546:	4629      	mov	r1, r5
 8004548:	4620      	mov	r0, r4
 800454a:	f000 fb1c 	bl	8004b86 <USBD_StdEPReq>
      break;
 800454e:	e7f3      	b.n	8004538 <USBD_LL_SetupStage+0x42>

08004550 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004554:	bba1      	cbnz	r1, 80045c0 <USBD_LL_DataOutStage+0x70>
 8004556:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004558:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800455c:	2b03      	cmp	r3, #3
 800455e:	d003      	beq.n	8004568 <USBD_LL_DataOutStage+0x18>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004560:	2b05      	cmp	r3, #5
 8004562:	d024      	beq.n	80045ae <USBD_LL_DataOutStage+0x5e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004564:	2000      	movs	r0, #0
 8004566:	e037      	b.n	80045d8 <USBD_LL_DataOutStage+0x88>
      if (pep->rem_length > pep->maxpacket)
 8004568:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 800456c:	f8d4 2164 	ldr.w	r2, [r4, #356]	; 0x164
 8004570:	4293      	cmp	r3, r2
 8004572:	d90d      	bls.n	8004590 <USBD_LL_DataOutStage+0x40>
        pep->rem_length -= pep->maxpacket;
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800457a:	429a      	cmp	r2, r3
 800457c:	d906      	bls.n	800458c <USBD_LL_DataOutStage+0x3c>
 800457e:	b29a      	uxth	r2, r3
 8004580:	4601      	mov	r1, r0
 8004582:	4620      	mov	r0, r4
 8004584:	f000 fc1b 	bl	8004dbe <USBD_CtlContinueRx>
  return USBD_OK;
 8004588:	2000      	movs	r0, #0
 800458a:	e025      	b.n	80045d8 <USBD_LL_DataOutStage+0x88>
        USBD_CtlContinueRx(pdev, pdata,
 800458c:	b292      	uxth	r2, r2
 800458e:	e7f7      	b.n	8004580 <USBD_LL_DataOutStage+0x30>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004590:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	b12b      	cbz	r3, 80045a4 <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004598:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800459c:	2a03      	cmp	r2, #3
 800459e:	d101      	bne.n	80045a4 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 80045a0:	4620      	mov	r0, r4
 80045a2:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80045a4:	4620      	mov	r0, r4
 80045a6:	f000 fc12 	bl	8004dce <USBD_CtlSendStatus>
  return USBD_OK;
 80045aa:	2000      	movs	r0, #0
 80045ac:	e014      	b.n	80045d8 <USBD_LL_DataOutStage+0x88>
        pdev->ep0_state = USBD_EP0_IDLE;
 80045ae:	2500      	movs	r5, #0
 80045b0:	f8c4 5294 	str.w	r5, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80045b4:	4629      	mov	r1, r5
 80045b6:	4620      	mov	r0, r4
 80045b8:	f003 fb75 	bl	8007ca6 <USBD_LL_StallEP>
  return USBD_OK;
 80045bc:	4628      	mov	r0, r5
 80045be:	e00b      	b.n	80045d8 <USBD_LL_DataOutStage+0x88>
 80045c0:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataOut != NULL) &&
 80045c2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	b13b      	cbz	r3, 80045da <USBD_LL_DataOutStage+0x8a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045ca:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80045ce:	2903      	cmp	r1, #3
 80045d0:	d105      	bne.n	80045de <USBD_LL_DataOutStage+0x8e>
    pdev->pClass->DataOut(pdev, epnum);
 80045d2:	4611      	mov	r1, r2
 80045d4:	4798      	blx	r3
  return USBD_OK;
 80045d6:	2000      	movs	r0, #0
}
 80045d8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80045da:	2002      	movs	r0, #2
 80045dc:	e7fc      	b.n	80045d8 <USBD_LL_DataOutStage+0x88>
 80045de:	2002      	movs	r0, #2
 80045e0:	e7fa      	b.n	80045d8 <USBD_LL_DataOutStage+0x88>

080045e2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80045e2:	b510      	push	{r4, lr}
 80045e4:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80045e6:	2900      	cmp	r1, #0
 80045e8:	d153      	bne.n	8004692 <USBD_LL_DataInStage+0xb0>
 80045ea:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80045ec:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d00c      	beq.n	800460e <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d000      	beq.n	80045fa <USBD_LL_DataInStage+0x18>
 80045f8:	b91b      	cbnz	r3, 8004602 <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80045fa:	2180      	movs	r1, #128	; 0x80
 80045fc:	4620      	mov	r0, r4
 80045fe:	f003 fb52 	bl	8007ca6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004602:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004606:	2b01      	cmp	r3, #1
 8004608:	d03f      	beq.n	800468a <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800460a:	2000      	movs	r0, #0
 800460c:	e04d      	b.n	80046aa <USBD_LL_DataInStage+0xc8>
      if (pep->rem_length > pep->maxpacket)
 800460e:	6a23      	ldr	r3, [r4, #32]
 8004610:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004612:	4293      	cmp	r3, r2
 8004614:	d81d      	bhi.n	8004652 <USBD_LL_DataInStage+0x70>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004616:	69e1      	ldr	r1, [r4, #28]
 8004618:	fbb1 f3f2 	udiv	r3, r1, r2
 800461c:	fb02 1313 	mls	r3, r2, r3, r1
 8004620:	b92b      	cbnz	r3, 800462e <USBD_LL_DataInStage+0x4c>
 8004622:	428a      	cmp	r2, r1
 8004624:	d803      	bhi.n	800462e <USBD_LL_DataInStage+0x4c>
            (pep->total_length < pdev->ep0_data_len))
 8004626:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800462a:	4299      	cmp	r1, r3
 800462c:	d31f      	bcc.n	800466e <USBD_LL_DataInStage+0x8c>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800462e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	b12b      	cbz	r3, 8004642 <USBD_LL_DataInStage+0x60>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004636:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800463a:	2a03      	cmp	r2, #3
 800463c:	d101      	bne.n	8004642 <USBD_LL_DataInStage+0x60>
            pdev->pClass->EP0_TxSent(pdev);
 800463e:	4620      	mov	r0, r4
 8004640:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004642:	2180      	movs	r1, #128	; 0x80
 8004644:	4620      	mov	r0, r4
 8004646:	f003 fb2e 	bl	8007ca6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800464a:	4620      	mov	r0, r4
 800464c:	f000 fbca 	bl	8004de4 <USBD_CtlReceiveStatus>
 8004650:	e7d7      	b.n	8004602 <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 8004652:	1a9a      	subs	r2, r3, r2
 8004654:	6222      	str	r2, [r4, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004656:	b292      	uxth	r2, r2
 8004658:	4601      	mov	r1, r0
 800465a:	4620      	mov	r0, r4
 800465c:	f000 fba7 	bl	8004dae <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004660:	2300      	movs	r3, #0
 8004662:	461a      	mov	r2, r3
 8004664:	4619      	mov	r1, r3
 8004666:	4620      	mov	r0, r4
 8004668:	f003 fb50 	bl	8007d0c <USBD_LL_PrepareReceive>
 800466c:	e7c9      	b.n	8004602 <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800466e:	2200      	movs	r2, #0
 8004670:	4611      	mov	r1, r2
 8004672:	4620      	mov	r0, r4
 8004674:	f000 fb9b 	bl	8004dae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004678:	2100      	movs	r1, #0
 800467a:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800467e:	460b      	mov	r3, r1
 8004680:	460a      	mov	r2, r1
 8004682:	4620      	mov	r0, r4
 8004684:	f003 fb42 	bl	8007d0c <USBD_LL_PrepareReceive>
 8004688:	e7bb      	b.n	8004602 <USBD_LL_DataInStage+0x20>
      pdev->dev_test_mode = 0U;
 800468a:	2000      	movs	r0, #0
 800468c:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8004690:	e00b      	b.n	80046aa <USBD_LL_DataInStage+0xc8>
 8004692:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataIn != NULL) &&
 8004694:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	b13b      	cbz	r3, 80046ac <USBD_LL_DataInStage+0xca>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800469c:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80046a0:	2903      	cmp	r1, #3
 80046a2:	d105      	bne.n	80046b0 <USBD_LL_DataInStage+0xce>
    pdev->pClass->DataIn(pdev, epnum);
 80046a4:	4611      	mov	r1, r2
 80046a6:	4798      	blx	r3
  return USBD_OK;
 80046a8:	2000      	movs	r0, #0
}
 80046aa:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80046ac:	2002      	movs	r0, #2
 80046ae:	e7fc      	b.n	80046aa <USBD_LL_DataInStage+0xc8>
 80046b0:	2002      	movs	r0, #2
 80046b2:	e7fa      	b.n	80046aa <USBD_LL_DataInStage+0xc8>

080046b4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80046b8:	2340      	movs	r3, #64	; 0x40
 80046ba:	2200      	movs	r2, #0
 80046bc:	4611      	mov	r1, r2
 80046be:	f003 fae7 	bl	8007c90 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80046c2:	2501      	movs	r5, #1
 80046c4:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80046c8:	2640      	movs	r6, #64	; 0x40
 80046ca:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80046ce:	4633      	mov	r3, r6
 80046d0:	2200      	movs	r2, #0
 80046d2:	2180      	movs	r1, #128	; 0x80
 80046d4:	4620      	mov	r0, r4
 80046d6:	f003 fadb 	bl	8007c90 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80046da:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80046dc:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80046de:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80046e8:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80046ea:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 80046ee:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80046f2:	b12b      	cbz	r3, 8004700 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80046f4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2100      	movs	r1, #0
 80046fc:	4620      	mov	r0, r4
 80046fe:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004700:	2000      	movs	r0, #0
 8004702:	bd70      	pop	{r4, r5, r6, pc}

08004704 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004704:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004706:	2000      	movs	r0, #0
 8004708:	4770      	bx	lr

0800470a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800470a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800470e:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004712:	2304      	movs	r3, #4
 8004714:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004718:	2000      	movs	r0, #0
 800471a:	4770      	bx	lr

0800471c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800471c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004720:	2b04      	cmp	r3, #4
 8004722:	d001      	beq.n	8004728 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8004724:	2000      	movs	r0, #0
 8004726:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8004728:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800472c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8004730:	e7f8      	b.n	8004724 <USBD_LL_Resume+0x8>

08004732 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004732:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004734:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004738:	2b03      	cmp	r3, #3
 800473a:	d001      	beq.n	8004740 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800473c:	2000      	movs	r0, #0
 800473e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8004740:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f8      	beq.n	800473c <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 800474a:	4798      	blx	r3
 800474c:	e7f6      	b.n	800473c <USBD_LL_SOF+0xa>

0800474e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800474e:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004750:	884b      	ldrh	r3, [r1, #2]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d000      	beq.n	8004758 <USBD_SetFeature+0xa>
  {
    pdev->dev_remote_wakeup = 1U;
    USBD_CtlSendStatus(pdev);
  }
}
 8004756:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8004758:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800475c:	f000 fb37 	bl	8004dce <USBD_CtlSendStatus>
}
 8004760:	e7f9      	b.n	8004756 <USBD_SetFeature+0x8>

08004762 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 8004762:	780b      	ldrb	r3, [r1, #0]
 8004764:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004766:	784b      	ldrb	r3, [r1, #1]
 8004768:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800476a:	788b      	ldrb	r3, [r1, #2]
 800476c:	78ca      	ldrb	r2, [r1, #3]
 800476e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004772:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004774:	790b      	ldrb	r3, [r1, #4]
 8004776:	794a      	ldrb	r2, [r1, #5]
 8004778:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800477c:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800477e:	798b      	ldrb	r3, [r1, #6]
 8004780:	79ca      	ldrb	r2, [r1, #7]
 8004782:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004786:	80c3      	strh	r3, [r0, #6]

}
 8004788:	4770      	bx	lr

0800478a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800478a:	b510      	push	{r4, lr}
 800478c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800478e:	2180      	movs	r1, #128	; 0x80
 8004790:	f003 fa89 	bl	8007ca6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004794:	2100      	movs	r1, #0
 8004796:	4620      	mov	r0, r4
 8004798:	f003 fa85 	bl	8007ca6 <USBD_LL_StallEP>
}
 800479c:	bd10      	pop	{r4, pc}

0800479e <USBD_GetDescriptor>:
{
 800479e:	b530      	push	{r4, r5, lr}
 80047a0:	b083      	sub	sp, #12
 80047a2:	4605      	mov	r5, r0
 80047a4:	460c      	mov	r4, r1
  uint16_t len = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80047ac:	884a      	ldrh	r2, [r1, #2]
 80047ae:	0a13      	lsrs	r3, r2, #8
 80047b0:	3b01      	subs	r3, #1
 80047b2:	2b06      	cmp	r3, #6
 80047b4:	f200 80a4 	bhi.w	8004900 <USBD_GetDescriptor+0x162>
 80047b8:	e8df f003 	tbb	[pc, r3]
 80047bc:	a22c1804 	.word	0xa22c1804
 80047c0:	86a2      	.short	0x86a2
 80047c2:	93          	.byte	0x93
 80047c3:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80047c4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f10d 0106 	add.w	r1, sp, #6
 80047ce:	7c00      	ldrb	r0, [r0, #16]
 80047d0:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80047d2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80047d6:	b11a      	cbz	r2, 80047e0 <USBD_GetDescriptor+0x42>
 80047d8:	88e3      	ldrh	r3, [r4, #6]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f040 8094 	bne.w	8004908 <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 80047e0:	88e3      	ldrh	r3, [r4, #6]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 809a 	beq.w	800491c <USBD_GetDescriptor+0x17e>
}
 80047e8:	b003      	add	sp, #12
 80047ea:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80047ec:	7c03      	ldrb	r3, [r0, #16]
 80047ee:	b943      	cbnz	r3, 8004802 <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80047f0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	f10d 0006 	add.w	r0, sp, #6
 80047fa:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80047fc:	2302      	movs	r3, #2
 80047fe:	7043      	strb	r3, [r0, #1]
 8004800:	e7e7      	b.n	80047d2 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004802:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	f10d 0006 	add.w	r0, sp, #6
 800480c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800480e:	2302      	movs	r3, #2
 8004810:	7043      	strb	r3, [r0, #1]
 8004812:	e7de      	b.n	80047d2 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	2a05      	cmp	r2, #5
 8004818:	d852      	bhi.n	80048c0 <USBD_GetDescriptor+0x122>
 800481a:	e8df f002 	tbb	[pc, r2]
 800481e:	1003      	.short	0x1003
 8004820:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004824:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	b123      	cbz	r3, 8004836 <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800482c:	f10d 0106 	add.w	r1, sp, #6
 8004830:	7c00      	ldrb	r0, [r0, #16]
 8004832:	4798      	blx	r3
 8004834:	e7cd      	b.n	80047d2 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004836:	4621      	mov	r1, r4
 8004838:	f7ff ffa7 	bl	800478a <USBD_CtlError>
 800483c:	e7d4      	b.n	80047e8 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800483e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	b123      	cbz	r3, 8004850 <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004846:	f10d 0106 	add.w	r1, sp, #6
 800484a:	7c00      	ldrb	r0, [r0, #16]
 800484c:	4798      	blx	r3
 800484e:	e7c0      	b.n	80047d2 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004850:	4621      	mov	r1, r4
 8004852:	f7ff ff9a 	bl	800478a <USBD_CtlError>
 8004856:	e7c7      	b.n	80047e8 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004858:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	b123      	cbz	r3, 800486a <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004860:	f10d 0106 	add.w	r1, sp, #6
 8004864:	7c00      	ldrb	r0, [r0, #16]
 8004866:	4798      	blx	r3
 8004868:	e7b3      	b.n	80047d2 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800486a:	4621      	mov	r1, r4
 800486c:	f7ff ff8d 	bl	800478a <USBD_CtlError>
 8004870:	e7ba      	b.n	80047e8 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004872:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	b123      	cbz	r3, 8004884 <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800487a:	f10d 0106 	add.w	r1, sp, #6
 800487e:	7c00      	ldrb	r0, [r0, #16]
 8004880:	4798      	blx	r3
 8004882:	e7a6      	b.n	80047d2 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004884:	4621      	mov	r1, r4
 8004886:	f7ff ff80 	bl	800478a <USBD_CtlError>
 800488a:	e7ad      	b.n	80047e8 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800488c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	b123      	cbz	r3, 800489e <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004894:	f10d 0106 	add.w	r1, sp, #6
 8004898:	7c00      	ldrb	r0, [r0, #16]
 800489a:	4798      	blx	r3
 800489c:	e799      	b.n	80047d2 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800489e:	4621      	mov	r1, r4
 80048a0:	f7ff ff73 	bl	800478a <USBD_CtlError>
 80048a4:	e7a0      	b.n	80047e8 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80048a6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	b123      	cbz	r3, 80048b8 <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80048ae:	f10d 0106 	add.w	r1, sp, #6
 80048b2:	7c00      	ldrb	r0, [r0, #16]
 80048b4:	4798      	blx	r3
 80048b6:	e78c      	b.n	80047d2 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80048b8:	4621      	mov	r1, r4
 80048ba:	f7ff ff66 	bl	800478a <USBD_CtlError>
 80048be:	e793      	b.n	80047e8 <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 80048c0:	4621      	mov	r1, r4
 80048c2:	f7ff ff62 	bl	800478a <USBD_CtlError>
 80048c6:	e78f      	b.n	80047e8 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048c8:	7c03      	ldrb	r3, [r0, #16]
 80048ca:	b933      	cbnz	r3, 80048da <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80048cc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80048d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d2:	f10d 0006 	add.w	r0, sp, #6
 80048d6:	4798      	blx	r3
 80048d8:	e77b      	b.n	80047d2 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80048da:	4621      	mov	r1, r4
 80048dc:	f7ff ff55 	bl	800478a <USBD_CtlError>
 80048e0:	e782      	b.n	80047e8 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048e2:	7c03      	ldrb	r3, [r0, #16]
 80048e4:	b943      	cbnz	r3, 80048f8 <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80048e6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80048ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ec:	f10d 0006 	add.w	r0, sp, #6
 80048f0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80048f2:	2307      	movs	r3, #7
 80048f4:	7043      	strb	r3, [r0, #1]
 80048f6:	e76c      	b.n	80047d2 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80048f8:	4621      	mov	r1, r4
 80048fa:	f7ff ff46 	bl	800478a <USBD_CtlError>
 80048fe:	e773      	b.n	80047e8 <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 8004900:	4621      	mov	r1, r4
 8004902:	f7ff ff42 	bl	800478a <USBD_CtlError>
 8004906:	e76f      	b.n	80047e8 <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 8004908:	429a      	cmp	r2, r3
 800490a:	bf28      	it	cs
 800490c:	461a      	movcs	r2, r3
 800490e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004912:	4601      	mov	r1, r0
 8004914:	4628      	mov	r0, r5
 8004916:	f000 fa3d 	bl	8004d94 <USBD_CtlSendData>
 800491a:	e761      	b.n	80047e0 <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 800491c:	4628      	mov	r0, r5
 800491e:	f000 fa56 	bl	8004dce <USBD_CtlSendStatus>
 8004922:	e761      	b.n	80047e8 <USBD_GetDescriptor+0x4a>

08004924 <USBD_SetAddress>:
{
 8004924:	b538      	push	{r3, r4, r5, lr}
 8004926:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004928:	888b      	ldrh	r3, [r1, #4]
 800492a:	b9f3      	cbnz	r3, 800496a <USBD_SetAddress+0x46>
 800492c:	88cb      	ldrh	r3, [r1, #6]
 800492e:	b9e3      	cbnz	r3, 800496a <USBD_SetAddress+0x46>
 8004930:	884b      	ldrh	r3, [r1, #2]
 8004932:	2b7f      	cmp	r3, #127	; 0x7f
 8004934:	d819      	bhi.n	800496a <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004936:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800493a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800493e:	2b03      	cmp	r3, #3
 8004940:	d00c      	beq.n	800495c <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8004942:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004946:	4629      	mov	r1, r5
 8004948:	f003 f9d0 	bl	8007cec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800494c:	4620      	mov	r0, r4
 800494e:	f000 fa3e 	bl	8004dce <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004952:	b135      	cbz	r5, 8004962 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004954:	2302      	movs	r3, #2
 8004956:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800495a:	e009      	b.n	8004970 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 800495c:	f7ff ff15 	bl	800478a <USBD_CtlError>
 8004960:	e006      	b.n	8004970 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004962:	2301      	movs	r3, #1
 8004964:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004968:	e002      	b.n	8004970 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 800496a:	4620      	mov	r0, r4
 800496c:	f7ff ff0d 	bl	800478a <USBD_CtlError>
}
 8004970:	bd38      	pop	{r3, r4, r5, pc}
	...

08004974 <USBD_SetConfig>:
{
 8004974:	b538      	push	{r3, r4, r5, lr}
 8004976:	4604      	mov	r4, r0
 8004978:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 800497a:	7889      	ldrb	r1, [r1, #2]
 800497c:	4b28      	ldr	r3, [pc, #160]	; (8004a20 <USBD_SetConfig+0xac>)
 800497e:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004980:	2901      	cmp	r1, #1
 8004982:	d80e      	bhi.n	80049a2 <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 8004984:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004988:	2b02      	cmp	r3, #2
 800498a:	d00e      	beq.n	80049aa <USBD_SetConfig+0x36>
 800498c:	2b03      	cmp	r3, #3
 800498e:	d021      	beq.n	80049d4 <USBD_SetConfig+0x60>
        USBD_CtlError(pdev, req);
 8004990:	4629      	mov	r1, r5
 8004992:	f7ff fefa 	bl	800478a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004996:	4b22      	ldr	r3, [pc, #136]	; (8004a20 <USBD_SetConfig+0xac>)
 8004998:	7819      	ldrb	r1, [r3, #0]
 800499a:	4620      	mov	r0, r4
 800499c:	f7ff fda4 	bl	80044e8 <USBD_ClrClassConfig>
        break;
 80049a0:	e002      	b.n	80049a8 <USBD_SetConfig+0x34>
    USBD_CtlError(pdev, req);
 80049a2:	4629      	mov	r1, r5
 80049a4:	f7ff fef1 	bl	800478a <USBD_CtlError>
}
 80049a8:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 80049aa:	b181      	cbz	r1, 80049ce <USBD_SetConfig+0x5a>
          pdev->dev_config = cfgidx;
 80049ac:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80049ae:	2303      	movs	r3, #3
 80049b0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80049b4:	f7ff fd8b 	bl	80044ce <USBD_SetClassConfig>
 80049b8:	2802      	cmp	r0, #2
 80049ba:	d003      	beq.n	80049c4 <USBD_SetConfig+0x50>
          USBD_CtlSendStatus(pdev);
 80049bc:	4620      	mov	r0, r4
 80049be:	f000 fa06 	bl	8004dce <USBD_CtlSendStatus>
 80049c2:	e7f1      	b.n	80049a8 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 80049c4:	4629      	mov	r1, r5
 80049c6:	4620      	mov	r0, r4
 80049c8:	f7ff fedf 	bl	800478a <USBD_CtlError>
            return;
 80049cc:	e7ec      	b.n	80049a8 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 80049ce:	f000 f9fe 	bl	8004dce <USBD_CtlSendStatus>
 80049d2:	e7e9      	b.n	80049a8 <USBD_SetConfig+0x34>
        if (cfgidx == 0U)
 80049d4:	b189      	cbz	r1, 80049fa <USBD_SetConfig+0x86>
        else if (cfgidx != pdev->dev_config)
 80049d6:	6843      	ldr	r3, [r0, #4]
 80049d8:	4299      	cmp	r1, r3
 80049da:	d01d      	beq.n	8004a18 <USBD_SetConfig+0xa4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80049dc:	b2d9      	uxtb	r1, r3
 80049de:	f7ff fd83 	bl	80044e8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80049e2:	4b0f      	ldr	r3, [pc, #60]	; (8004a20 <USBD_SetConfig+0xac>)
 80049e4:	7819      	ldrb	r1, [r3, #0]
 80049e6:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80049e8:	4620      	mov	r0, r4
 80049ea:	f7ff fd70 	bl	80044ce <USBD_SetClassConfig>
 80049ee:	2802      	cmp	r0, #2
 80049f0:	d00d      	beq.n	8004a0e <USBD_SetConfig+0x9a>
          USBD_CtlSendStatus(pdev);
 80049f2:	4620      	mov	r0, r4
 80049f4:	f000 f9eb 	bl	8004dce <USBD_CtlSendStatus>
 80049f8:	e7d6      	b.n	80049a8 <USBD_SetConfig+0x34>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80049fa:	2302      	movs	r3, #2
 80049fc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004a00:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004a02:	f7ff fd71 	bl	80044e8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004a06:	4620      	mov	r0, r4
 8004a08:	f000 f9e1 	bl	8004dce <USBD_CtlSendStatus>
 8004a0c:	e7cc      	b.n	80049a8 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 8004a0e:	4629      	mov	r1, r5
 8004a10:	4620      	mov	r0, r4
 8004a12:	f7ff feba 	bl	800478a <USBD_CtlError>
            return;
 8004a16:	e7c7      	b.n	80049a8 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 8004a18:	f000 f9d9 	bl	8004dce <USBD_CtlSendStatus>
 8004a1c:	e7c4      	b.n	80049a8 <USBD_SetConfig+0x34>
 8004a1e:	bf00      	nop
 8004a20:	20000294 	.word	0x20000294

08004a24 <USBD_GetConfig>:
{
 8004a24:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8004a26:	88cb      	ldrh	r3, [r1, #6]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d10b      	bne.n	8004a44 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8004a2c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a30:	b19b      	cbz	r3, 8004a5a <USBD_GetConfig+0x36>
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d909      	bls.n	8004a4a <USBD_GetConfig+0x26>
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d10f      	bne.n	8004a5a <USBD_GetConfig+0x36>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	1d01      	adds	r1, r0, #4
 8004a3e:	f000 f9a9 	bl	8004d94 <USBD_CtlSendData>
        break;
 8004a42:	e001      	b.n	8004a48 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8004a44:	f7ff fea1 	bl	800478a <USBD_CtlError>
}
 8004a48:	bd08      	pop	{r3, pc}
        pdev->dev_default_config = 0U;
 8004a4a:	4601      	mov	r1, r0
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004a52:	2201      	movs	r2, #1
 8004a54:	f000 f99e 	bl	8004d94 <USBD_CtlSendData>
        break;
 8004a58:	e7f6      	b.n	8004a48 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 8004a5a:	f7ff fe96 	bl	800478a <USBD_CtlError>
}
 8004a5e:	e7f3      	b.n	8004a48 <USBD_GetConfig+0x24>

08004a60 <USBD_GetStatus>:
{
 8004a60:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004a62:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a66:	3b01      	subs	r3, #1
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d812      	bhi.n	8004a92 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8004a6c:	88cb      	ldrh	r3, [r1, #6]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d10c      	bne.n	8004a8c <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004a72:	2301      	movs	r3, #1
 8004a74:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8004a76:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004a7a:	b10b      	cbz	r3, 8004a80 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004a80:	2202      	movs	r2, #2
 8004a82:	f100 010c 	add.w	r1, r0, #12
 8004a86:	f000 f985 	bl	8004d94 <USBD_CtlSendData>
}
 8004a8a:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8004a8c:	f7ff fe7d 	bl	800478a <USBD_CtlError>
        break;
 8004a90:	e7fb      	b.n	8004a8a <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8004a92:	f7ff fe7a 	bl	800478a <USBD_CtlError>
}
 8004a96:	e7f8      	b.n	8004a8a <USBD_GetStatus+0x2a>

08004a98 <USBD_ClrFeature>:
{
 8004a98:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004a9a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d809      	bhi.n	8004ab8 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004aa4:	884b      	ldrh	r3, [r1, #2]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d000      	beq.n	8004aac <USBD_ClrFeature+0x14>
}
 8004aaa:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004ab2:	f000 f98c 	bl	8004dce <USBD_CtlSendStatus>
 8004ab6:	e7f8      	b.n	8004aaa <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8004ab8:	f7ff fe67 	bl	800478a <USBD_CtlError>
}
 8004abc:	e7f5      	b.n	8004aaa <USBD_ClrFeature+0x12>

08004abe <USBD_StdDevReq>:
{
 8004abe:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ac0:	780b      	ldrb	r3, [r1, #0]
 8004ac2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d005      	beq.n	8004ad6 <USBD_StdDevReq+0x18>
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d003      	beq.n	8004ad6 <USBD_StdDevReq+0x18>
 8004ace:	b143      	cbz	r3, 8004ae2 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 8004ad0:	f7ff fe5b 	bl	800478a <USBD_CtlError>
      break;
 8004ad4:	e003      	b.n	8004ade <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 8004ad6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	4798      	blx	r3
}
 8004ade:	2000      	movs	r0, #0
 8004ae0:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 8004ae2:	784b      	ldrb	r3, [r1, #1]
 8004ae4:	2b09      	cmp	r3, #9
 8004ae6:	d81b      	bhi.n	8004b20 <USBD_StdDevReq+0x62>
 8004ae8:	e8df f003 	tbb	[pc, r3]
 8004aec:	141a1711 	.word	0x141a1711
 8004af0:	1a05081a 	.word	0x1a05081a
 8004af4:	0b0e      	.short	0x0b0e
          USBD_GetDescriptor(pdev, req);
 8004af6:	f7ff fe52 	bl	800479e <USBD_GetDescriptor>
          break;
 8004afa:	e7f0      	b.n	8004ade <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 8004afc:	f7ff ff12 	bl	8004924 <USBD_SetAddress>
          break;
 8004b00:	e7ed      	b.n	8004ade <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 8004b02:	f7ff ff37 	bl	8004974 <USBD_SetConfig>
          break;
 8004b06:	e7ea      	b.n	8004ade <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 8004b08:	f7ff ff8c 	bl	8004a24 <USBD_GetConfig>
          break;
 8004b0c:	e7e7      	b.n	8004ade <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 8004b0e:	f7ff ffa7 	bl	8004a60 <USBD_GetStatus>
          break;
 8004b12:	e7e4      	b.n	8004ade <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 8004b14:	f7ff fe1b 	bl	800474e <USBD_SetFeature>
          break;
 8004b18:	e7e1      	b.n	8004ade <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 8004b1a:	f7ff ffbd 	bl	8004a98 <USBD_ClrFeature>
          break;
 8004b1e:	e7de      	b.n	8004ade <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 8004b20:	f7ff fe33 	bl	800478a <USBD_CtlError>
          break;
 8004b24:	e7db      	b.n	8004ade <USBD_StdDevReq+0x20>

08004b26 <USBD_StdItfReq>:
{
 8004b26:	b538      	push	{r3, r4, r5, lr}
 8004b28:	4605      	mov	r5, r0
 8004b2a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b2c:	780b      	ldrb	r3, [r1, #0]
 8004b2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d006      	beq.n	8004b44 <USBD_StdItfReq+0x1e>
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d004      	beq.n	8004b44 <USBD_StdItfReq+0x1e>
 8004b3a:	b11b      	cbz	r3, 8004b44 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8004b3c:	f7ff fe25 	bl	800478a <USBD_CtlError>
}
 8004b40:	2000      	movs	r0, #0
 8004b42:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8004b44:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d816      	bhi.n	8004b7c <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004b4e:	7923      	ldrb	r3, [r4, #4]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d80e      	bhi.n	8004b72 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004b54:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004b60:	88e3      	ldrh	r3, [r4, #6]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1ec      	bne.n	8004b40 <USBD_StdItfReq+0x1a>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d1ea      	bne.n	8004b40 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f000 f92f 	bl	8004dce <USBD_CtlSendStatus>
 8004b70:	e7e6      	b.n	8004b40 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8004b72:	4621      	mov	r1, r4
 8004b74:	4628      	mov	r0, r5
 8004b76:	f7ff fe08 	bl	800478a <USBD_CtlError>
 8004b7a:	e7e1      	b.n	8004b40 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	4628      	mov	r0, r5
 8004b80:	f7ff fe03 	bl	800478a <USBD_CtlError>
          break;
 8004b84:	e7dc      	b.n	8004b40 <USBD_StdItfReq+0x1a>

08004b86 <USBD_StdEPReq>:
{
 8004b86:	b538      	push	{r3, r4, r5, lr}
 8004b88:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8004b8a:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b8c:	780b      	ldrb	r3, [r1, #0]
 8004b8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d008      	beq.n	8004ba8 <USBD_StdEPReq+0x22>
 8004b96:	b2d0      	uxtb	r0, r2
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d005      	beq.n	8004ba8 <USBD_StdEPReq+0x22>
 8004b9c:	b15b      	cbz	r3, 8004bb6 <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f7ff fdf3 	bl	800478a <USBD_CtlError>
  return ret;
 8004ba4:	2000      	movs	r0, #0
      break;
 8004ba6:	e005      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
      pdev->pClass->Setup(pdev, req);
 8004ba8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	4620      	mov	r0, r4
 8004bb0:	4798      	blx	r3
  return ret;
 8004bb2:	2000      	movs	r0, #0
}
 8004bb4:	bd38      	pop	{r3, r4, r5, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d105      	bne.n	8004bc6 <USBD_StdEPReq+0x40>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004bba:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	4798      	blx	r3
        return ret;
 8004bc4:	e7f6      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
      switch (req->bRequest)
 8004bc6:	784b      	ldrb	r3, [r1, #1]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d032      	beq.n	8004c32 <USBD_StdEPReq+0xac>
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d05e      	beq.n	8004c8e <USBD_StdEPReq+0x108>
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	f040 80d8 	bne.w	8004d86 <USBD_StdEPReq+0x200>
          switch (pdev->dev_state)
 8004bd6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d006      	beq.n	8004bec <USBD_StdEPReq+0x66>
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d016      	beq.n	8004c10 <USBD_StdEPReq+0x8a>
              USBD_CtlError(pdev, req);
 8004be2:	4620      	mov	r0, r4
 8004be4:	f7ff fdd1 	bl	800478a <USBD_CtlError>
  return ret;
 8004be8:	2000      	movs	r0, #0
              break;
 8004bea:	e7e3      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004bec:	b108      	cbz	r0, 8004bf2 <USBD_StdEPReq+0x6c>
 8004bee:	2880      	cmp	r0, #128	; 0x80
 8004bf0:	d104      	bne.n	8004bfc <USBD_StdEPReq+0x76>
                USBD_CtlError(pdev, req);
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7ff fdc9 	bl	800478a <USBD_CtlError>
  return ret;
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	e7db      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
                USBD_LL_StallEP(pdev, ep_addr);
 8004bfc:	4601      	mov	r1, r0
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f003 f851 	bl	8007ca6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004c04:	2180      	movs	r1, #128	; 0x80
 8004c06:	4620      	mov	r0, r4
 8004c08:	f003 f84d 	bl	8007ca6 <USBD_LL_StallEP>
  return ret;
 8004c0c:	2000      	movs	r0, #0
                USBD_LL_StallEP(pdev, 0x80U);
 8004c0e:	e7d1      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004c10:	884b      	ldrh	r3, [r1, #2]
 8004c12:	b923      	cbnz	r3, 8004c1e <USBD_StdEPReq+0x98>
                if ((ep_addr != 0x00U) &&
 8004c14:	b118      	cbz	r0, 8004c1e <USBD_StdEPReq+0x98>
 8004c16:	2880      	cmp	r0, #128	; 0x80
 8004c18:	d001      	beq.n	8004c1e <USBD_StdEPReq+0x98>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004c1a:	88cb      	ldrh	r3, [r1, #6]
 8004c1c:	b123      	cbz	r3, 8004c28 <USBD_StdEPReq+0xa2>
              USBD_CtlSendStatus(pdev);
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f000 f8d5 	bl	8004dce <USBD_CtlSendStatus>
  return ret;
 8004c24:	2000      	movs	r0, #0
              break;
 8004c26:	e7c5      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
                  USBD_LL_StallEP(pdev, ep_addr);
 8004c28:	4601      	mov	r1, r0
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f003 f83b 	bl	8007ca6 <USBD_LL_StallEP>
 8004c30:	e7f5      	b.n	8004c1e <USBD_StdEPReq+0x98>
          switch (pdev->dev_state)
 8004c32:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d006      	beq.n	8004c48 <USBD_StdEPReq+0xc2>
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d016      	beq.n	8004c6c <USBD_StdEPReq+0xe6>
              USBD_CtlError(pdev, req);
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f7ff fda3 	bl	800478a <USBD_CtlError>
  return ret;
 8004c44:	2000      	movs	r0, #0
              break;
 8004c46:	e7b5      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c48:	b108      	cbz	r0, 8004c4e <USBD_StdEPReq+0xc8>
 8004c4a:	2880      	cmp	r0, #128	; 0x80
 8004c4c:	d104      	bne.n	8004c58 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f7ff fd9b 	bl	800478a <USBD_CtlError>
  return ret;
 8004c54:	2000      	movs	r0, #0
 8004c56:	e7ad      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
                USBD_LL_StallEP(pdev, ep_addr);
 8004c58:	4601      	mov	r1, r0
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f003 f823 	bl	8007ca6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004c60:	2180      	movs	r1, #128	; 0x80
 8004c62:	4620      	mov	r0, r4
 8004c64:	f003 f81f 	bl	8007ca6 <USBD_LL_StallEP>
  return ret;
 8004c68:	2000      	movs	r0, #0
                USBD_LL_StallEP(pdev, 0x80U);
 8004c6a:	e7a3      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004c6c:	884b      	ldrh	r3, [r1, #2]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f040 808e 	bne.w	8004d90 <USBD_StdEPReq+0x20a>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004c74:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004c78:	d104      	bne.n	8004c84 <USBD_StdEPReq+0xfe>
                USBD_CtlSendStatus(pdev);
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f000 f8a7 	bl	8004dce <USBD_CtlSendStatus>
  return ret;
 8004c80:	2000      	movs	r0, #0
 8004c82:	e797      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004c84:	4601      	mov	r1, r0
 8004c86:	4620      	mov	r0, r4
 8004c88:	f003 f815 	bl	8007cb6 <USBD_LL_ClearStallEP>
 8004c8c:	e7f5      	b.n	8004c7a <USBD_StdEPReq+0xf4>
          switch (pdev->dev_state)
 8004c8e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d006      	beq.n	8004ca4 <USBD_StdEPReq+0x11e>
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d02a      	beq.n	8004cf0 <USBD_StdEPReq+0x16a>
              USBD_CtlError(pdev, req);
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f7ff fd75 	bl	800478a <USBD_CtlError>
  return ret;
 8004ca0:	2000      	movs	r0, #0
              break;
 8004ca2:	e787      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ca4:	b108      	cbz	r0, 8004caa <USBD_StdEPReq+0x124>
 8004ca6:	2880      	cmp	r0, #128	; 0x80
 8004ca8:	d113      	bne.n	8004cd2 <USBD_StdEPReq+0x14c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004caa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004cae:	d115      	bne.n	8004cdc <USBD_StdEPReq+0x156>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004cb0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004cb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004cb8:	0083      	lsls	r3, r0, #2
 8004cba:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8004cbe:	4421      	add	r1, r4
 8004cc0:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8004cc2:	2500      	movs	r5, #0
 8004cc4:	600d      	str	r5, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f000 f863 	bl	8004d94 <USBD_CtlSendData>
  return ret;
 8004cce:	4628      	mov	r0, r5
              break;
 8004cd0:	e770      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
                USBD_CtlError(pdev, req);
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f7ff fd59 	bl	800478a <USBD_CtlError>
  return ret;
 8004cd8:	2000      	movs	r0, #0
                break;
 8004cda:	e76b      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004cdc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004ce0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004ce4:	0083      	lsls	r3, r0, #2
 8004ce6:	f103 0110 	add.w	r1, r3, #16
 8004cea:	4421      	add	r1, r4
 8004cec:	3104      	adds	r1, #4
 8004cee:	e7e8      	b.n	8004cc2 <USBD_StdEPReq+0x13c>
              if ((ep_addr & 0x80U) == 0x80U)
 8004cf0:	b252      	sxtb	r2, r2
 8004cf2:	2a00      	cmp	r2, #0
 8004cf4:	db1f      	blt.n	8004d36 <USBD_StdEPReq+0x1b0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004cf6:	f000 030f 	and.w	r3, r0, #15
 8004cfa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004cfe:	009d      	lsls	r5, r3, #2
 8004d00:	4425      	add	r5, r4
 8004d02:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
 8004d06:	b323      	cbz	r3, 8004d52 <USBD_StdEPReq+0x1cc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d08:	2a00      	cmp	r2, #0
 8004d0a:	db27      	blt.n	8004d5c <USBD_StdEPReq+0x1d6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004d0c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d10:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004d14:	0093      	lsls	r3, r2, #2
 8004d16:	f503 75a8 	add.w	r5, r3, #336	; 0x150
 8004d1a:	4425      	add	r5, r4
 8004d1c:	3504      	adds	r5, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004d1e:	b108      	cbz	r0, 8004d24 <USBD_StdEPReq+0x19e>
 8004d20:	2880      	cmp	r0, #128	; 0x80
 8004d22:	d125      	bne.n	8004d70 <USBD_StdEPReq+0x1ea>
                pep->status = 0x0000U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004d28:	2202      	movs	r2, #2
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f000 f831 	bl	8004d94 <USBD_CtlSendData>
  return ret;
 8004d32:	2000      	movs	r0, #0
              break;
 8004d34:	e73e      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004d36:	f000 030f 	and.w	r3, r0, #15
 8004d3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d3e:	009d      	lsls	r5, r3, #2
 8004d40:	4425      	add	r5, r4
 8004d42:	69ab      	ldr	r3, [r5, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1df      	bne.n	8004d08 <USBD_StdEPReq+0x182>
                  USBD_CtlError(pdev, req);
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f7ff fd1e 	bl	800478a <USBD_CtlError>
  return ret;
 8004d4e:	2000      	movs	r0, #0
                  break;
 8004d50:	e730      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
                  USBD_CtlError(pdev, req);
 8004d52:	4620      	mov	r0, r4
 8004d54:	f7ff fd19 	bl	800478a <USBD_CtlError>
  return ret;
 8004d58:	2000      	movs	r0, #0
                  break;
 8004d5a:	e72b      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d5c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8004d60:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004d64:	0093      	lsls	r3, r2, #2
 8004d66:	f103 0510 	add.w	r5, r3, #16
 8004d6a:	4425      	add	r5, r4
 8004d6c:	3504      	adds	r5, #4
 8004d6e:	e7d6      	b.n	8004d1e <USBD_StdEPReq+0x198>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004d70:	4601      	mov	r1, r0
 8004d72:	4620      	mov	r0, r4
 8004d74:	f002 ffa7 	bl	8007cc6 <USBD_LL_IsStallEP>
 8004d78:	b110      	cbz	r0, 8004d80 <USBD_StdEPReq+0x1fa>
                pep->status = 0x0001U;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	602b      	str	r3, [r5, #0]
 8004d7e:	e7d3      	b.n	8004d28 <USBD_StdEPReq+0x1a2>
                pep->status = 0x0000U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	602b      	str	r3, [r5, #0]
 8004d84:	e7d0      	b.n	8004d28 <USBD_StdEPReq+0x1a2>
          USBD_CtlError(pdev, req);
 8004d86:	4620      	mov	r0, r4
 8004d88:	f7ff fcff 	bl	800478a <USBD_CtlError>
  return ret;
 8004d8c:	2000      	movs	r0, #0
          break;
 8004d8e:	e711      	b.n	8004bb4 <USBD_StdEPReq+0x2e>
  return ret;
 8004d90:	2000      	movs	r0, #0
 8004d92:	e70f      	b.n	8004bb4 <USBD_StdEPReq+0x2e>

08004d94 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004d94:	b510      	push	{r4, lr}
 8004d96:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004d9e:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8004da0:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004da2:	460a      	mov	r2, r1
 8004da4:	2100      	movs	r1, #0
 8004da6:	f002 ffa9 	bl	8007cfc <USBD_LL_Transmit>

  return USBD_OK;
}
 8004daa:	2000      	movs	r0, #0
 8004dac:	bd10      	pop	{r4, pc}

08004dae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004dae:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004db0:	4613      	mov	r3, r2
 8004db2:	460a      	mov	r2, r1
 8004db4:	2100      	movs	r1, #0
 8004db6:	f002 ffa1 	bl	8007cfc <USBD_LL_Transmit>

  return USBD_OK;
}
 8004dba:	2000      	movs	r0, #0
 8004dbc:	bd08      	pop	{r3, pc}

08004dbe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004dbe:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	460a      	mov	r2, r1
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	f002 ffa1 	bl	8007d0c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004dca:	2000      	movs	r0, #0
 8004dcc:	bd08      	pop	{r3, pc}

08004dce <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004dce:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4619      	mov	r1, r3
 8004ddc:	f002 ff8e 	bl	8007cfc <USBD_LL_Transmit>

  return USBD_OK;
}
 8004de0:	2000      	movs	r0, #0
 8004de2:	bd08      	pop	{r3, pc}

08004de4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004de4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004de6:	2305      	movs	r3, #5
 8004de8:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004dec:	2300      	movs	r3, #0
 8004dee:	461a      	mov	r2, r3
 8004df0:	4619      	mov	r1, r3
 8004df2:	f002 ff8b 	bl	8007d0c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004df6:	2000      	movs	r0, #0
 8004df8:	bd08      	pop	{r3, pc}
	...

08004dfc <set_addr>:
	init_regs();
}

void set_addr(uint32_t addr)
{
	reg_addr = addr;
 8004dfc:	4b01      	ldr	r3, [pc, #4]	; (8004e04 <set_addr+0x8>)
 8004dfe:	6018      	str	r0, [r3, #0]
}
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000298 	.word	0x20000298

08004e08 <get_addr>:

uint32_t get_addr(void)
{
	return reg_addr;
}
 8004e08:	4b01      	ldr	r3, [pc, #4]	; (8004e10 <get_addr+0x8>)
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000298 	.word	0x20000298

08004e14 <get_mode>:

dmxmode_t get_mode(void)
{
	return dmx_mode;
}
 8004e14:	4b01      	ldr	r3, [pc, #4]	; (8004e1c <get_mode+0x8>)
 8004e16:	7818      	ldrb	r0, [r3, #0]
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000295 	.word	0x20000295

08004e20 <set_reg_length>:

void set_reg_length(uint32_t len)
{
	reg_len = len;
 8004e20:	4b01      	ldr	r3, [pc, #4]	; (8004e28 <set_reg_length+0x8>)
 8004e22:	6018      	str	r0, [r3, #0]
}
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	200002a0 	.word	0x200002a0

08004e2c <get_reg_length>:

uint32_t get_reg_length(void)
{
	return reg_len;
}
 8004e2c:	4b01      	ldr	r3, [pc, #4]	; (8004e34 <get_reg_length+0x8>)
 8004e2e:	6818      	ldr	r0, [r3, #0]
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	200002a0 	.word	0x200002a0

08004e38 <init_regs>:

void init_regs(void)
{
 8004e38:	b510      	push	{r4, lr}
	//allocate memory
	if (reg_data != NULL)
 8004e3a:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <init_regs+0x24>)
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	b108      	cbz	r0, 8004e44 <init_regs+0xc>
		free(reg_data);
 8004e40:	f004 f832 	bl	8008ea8 <free>

	reg_data = malloc(reg_len * sizeof(uint8_t));
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <init_regs+0x28>)
 8004e46:	681c      	ldr	r4, [r3, #0]
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f004 f825 	bl	8008e98 <malloc>
 8004e4e:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <init_regs+0x24>)
 8004e50:	6018      	str	r0, [r3, #0]
	memset(reg_data, 0,reg_len);
 8004e52:	4622      	mov	r2, r4
 8004e54:	2100      	movs	r1, #0
 8004e56:	f004 f83a 	bl	8008ece <memset>
}
 8004e5a:	bd10      	pop	{r4, pc}
 8004e5c:	2000029c 	.word	0x2000029c
 8004e60:	200002a0 	.word	0x200002a0

08004e64 <dmx512_init>:
{
 8004e64:	b510      	push	{r4, lr}
 8004e66:	4604      	mov	r4, r0
	set_addr(addr);
 8004e68:	4608      	mov	r0, r1
 8004e6a:	f7ff ffc7 	bl	8004dfc <set_addr>
	if ((mode & 0x01) != 0)
 8004e6e:	f014 0f01 	tst.w	r4, #1
 8004e72:	d002      	beq.n	8004e7a <dmx512_init+0x16>
		dmx_mode = DMX_MODE2;
 8004e74:	4b08      	ldr	r3, [pc, #32]	; (8004e98 <dmx512_init+0x34>)
 8004e76:	2201      	movs	r2, #1
 8004e78:	701a      	strb	r2, [r3, #0]
	switch (dmx_mode)
 8004e7a:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <dmx512_init+0x34>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d105      	bne.n	8004e8e <dmx512_init+0x2a>
			set_reg_length(DMX512_MODE2_LENGTH);
 8004e82:	201a      	movs	r0, #26
 8004e84:	f7ff ffcc 	bl	8004e20 <set_reg_length>
	init_regs();
 8004e88:	f7ff ffd6 	bl	8004e38 <init_regs>
}
 8004e8c:	bd10      	pop	{r4, pc}
			 set_reg_length(DMX512_MODE1_LENGTH);
 8004e8e:	200b      	movs	r0, #11
 8004e90:	f7ff ffc6 	bl	8004e20 <set_reg_length>
			break;
 8004e94:	e7f8      	b.n	8004e88 <dmx512_init+0x24>
 8004e96:	bf00      	nop
 8004e98:	20000295 	.word	0x20000295

08004e9c <set_reg>:

void set_reg(uint32_t reg, uint8_t val)
{
	if ((reg_data != NULL) && (reg<reg_len))
 8004e9c:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <set_reg+0x14>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	b123      	cbz	r3, 8004eac <set_reg+0x10>
 8004ea2:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <set_reg+0x18>)
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	4282      	cmp	r2, r0
 8004ea8:	d900      	bls.n	8004eac <set_reg+0x10>
	{
		reg_data[reg] = val;
 8004eaa:	5419      	strb	r1, [r3, r0]
	}
}
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	2000029c 	.word	0x2000029c
 8004eb4:	200002a0 	.word	0x200002a0

08004eb8 <get_reg>:

uint8_t get_reg(uint32_t reg)
{
	if ((reg_data != NULL) && (reg<reg_len))
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <get_reg+0x1c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	b12b      	cbz	r3, 8004eca <get_reg+0x12>
 8004ebe:	4a06      	ldr	r2, [pc, #24]	; (8004ed8 <get_reg+0x20>)
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	4282      	cmp	r2, r0
 8004ec4:	d903      	bls.n	8004ece <get_reg+0x16>
	{
		return reg_data[reg];
 8004ec6:	5c18      	ldrb	r0, [r3, r0]
 8004ec8:	4770      	bx	lr
	}
	else
	{
		return 0;
 8004eca:	2000      	movs	r0, #0
 8004ecc:	4770      	bx	lr
 8004ece:	2000      	movs	r0, #0
	}
}
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	2000029c 	.word	0x2000029c
 8004ed8:	200002a0 	.word	0x200002a0

08004edc <get_reg_name>:
}


const char* get_reg_name(uint32_t reg)
{
	if (reg<reg_len)
 8004edc:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <get_reg_name+0x14>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4283      	cmp	r3, r0
 8004ee2:	d903      	bls.n	8004eec <get_reg_name+0x10>
		return regnames[reg];
 8004ee4:	4b03      	ldr	r3, [pc, #12]	; (8004ef4 <get_reg_name+0x18>)
 8004ee6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004eea:	4770      	bx	lr
	else
		return 0;
 8004eec:	2000      	movs	r0, #0
}
 8004eee:	4770      	bx	lr
 8004ef0:	200002a0 	.word	0x200002a0
 8004ef4:	20000008 	.word	0x20000008

08004ef8 <USART1_IRQHandler>:
//END TODO
#endif

/* UART1 Interrupt Service Routine */
void USART1_IRQHandler(void)
{
 8004ef8:	b500      	push	{lr}
 8004efa:	b083      	sub	sp, #12
	//Get the received byte and clear Frame Error IRQ flag
	//On Framing Error restart Timer to search for a start condition
	if (__HAL_UART_GET_FLAG(&huart1,UART_FLAG_FE))
 8004efc:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <USART1_IRQHandler+0x30>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	f012 0f02 	tst.w	r2, #2
 8004f06:	d009      	beq.n	8004f1c <USART1_IRQHandler+0x24>
	{
		__HAL_UART_CLEAR_FEFLAG(&huart1);
 8004f08:	2200      	movs	r2, #0
 8004f0a:	9201      	str	r2, [sp, #4]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	9201      	str	r2, [sp, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	9301      	str	r3, [sp, #4]
 8004f14:	9b01      	ldr	r3, [sp, #4]
#ifdef USE_TIMER
		TIM_ITConfig(TIM1, TIM_IT_CC1, ENABLE);
#else
		start_flag = 1;
 8004f16:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <USART1_IRQHandler+0x34>)
 8004f18:	2201      	movs	r2, #1
 8004f1a:	701a      	strb	r2, [r3, #0]
#endif
	}
	HAL_UART_IRQHandler(&huart1);
 8004f1c:	4802      	ldr	r0, [pc, #8]	; (8004f28 <USART1_IRQHandler+0x30>)
 8004f1e:	f7fe fe31 	bl	8003b84 <HAL_UART_IRQHandler>
}
 8004f22:	b003      	add	sp, #12
 8004f24:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f28:	20000910 	.word	0x20000910
 8004f2c:	200002b4 	.word	0x200002b4

08004f30 <USART3_IRQHandler>:

#ifdef USE_UART_IRQ
/* UART3 Interrupt Service Routine */
void USART3_IRQHandler(void)
{
 8004f30:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&huart3);
 8004f32:	4802      	ldr	r0, [pc, #8]	; (8004f3c <USART3_IRQHandler+0xc>)
 8004f34:	f7fe fe26 	bl	8003b84 <HAL_UART_IRQHandler>
}
 8004f38:	bd08      	pop	{r3, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000834 	.word	0x20000834

08004f40 <HAL_UART_RxCpltCallback>:
#endif

//UART IRQ Triggered by incoming characters
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f40:	b510      	push	{r4, lr}
 8004f42:	b082      	sub	sp, #8
	volatile uint8_t rx_byte;

	if (huart->Instance == USART1)
 8004f44:	6803      	ldr	r3, [r0, #0]
 8004f46:	4a44      	ldr	r2, [pc, #272]	; (8005058 <HAL_UART_RxCpltCallback+0x118>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_UART_RxCpltCallback+0x16>

		//Get more data
		HAL_UART_Receive_IT(&huart1, &buffer, 1);
    }
#ifdef USE_UART_IRQ
	else if (huart->Instance == USART3)
 8004f4c:	4a43      	ldr	r2, [pc, #268]	; (800505c <HAL_UART_RxCpltCallback+0x11c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d06d      	beq.n	800502e <HAL_UART_RxCpltCallback+0xee>

		//Get more data
		HAL_UART_Receive_IT(&huart3, &buffer2, 1);
    }
#endif
}
 8004f52:	b002      	add	sp, #8
 8004f54:	bd10      	pop	{r4, pc}
		rx_byte = buffer;
 8004f56:	4b42      	ldr	r3, [pc, #264]	; (8005060 <HAL_UART_RxCpltCallback+0x120>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	f88d 3007 	strb.w	r3, [sp, #7]
		if (start_flag)
 8004f5e:	4b41      	ldr	r3, [pc, #260]	; (8005064 <HAL_UART_RxCpltCallback+0x124>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d035      	beq.n	8004fd2 <HAL_UART_RxCpltCallback+0x92>
			msg_cnt++;
 8004f66:	4a40      	ldr	r2, [pc, #256]	; (8005068 <HAL_UART_RxCpltCallback+0x128>)
 8004f68:	7813      	ldrb	r3, [r2, #0]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	7013      	strb	r3, [r2, #0]
			if (msg_cnt == 44)  //invert it only once every 44 packets = 1 sec...
 8004f70:	7813      	ldrb	r3, [r2, #0]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b2c      	cmp	r3, #44	; 0x2c
 8004f76:	d019      	beq.n	8004fac <HAL_UART_RxCpltCallback+0x6c>
			dmx_error = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	4a3c      	ldr	r2, [pc, #240]	; (800506c <HAL_UART_RxCpltCallback+0x12c>)
 8004f7c:	7013      	strb	r3, [r2, #0]
			byte_count = 0;
 8004f7e:	4a3c      	ldr	r2, [pc, #240]	; (8005070 <HAL_UART_RxCpltCallback+0x130>)
 8004f80:	8013      	strh	r3, [r2, #0]
			start_flag = 0;
 8004f82:	4a38      	ldr	r2, [pc, #224]	; (8005064 <HAL_UART_RxCpltCallback+0x124>)
 8004f84:	7013      	strb	r3, [r2, #0]
			last_packet_ms = HAL_GetTick();
 8004f86:	f7fc f92d 	bl	80011e4 <HAL_GetTick>
 8004f8a:	4b3a      	ldr	r3, [pc, #232]	; (8005074 <HAL_UART_RxCpltCallback+0x134>)
 8004f8c:	6018      	str	r0, [r3, #0]
			switch (rx_byte)
 8004f8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004f92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f96:	b1cb      	cbz	r3, 8004fcc <HAL_UART_RxCpltCallback+0x8c>
 8004f98:	2a17      	cmp	r2, #23
 8004f9a:	d02f      	beq.n	8004ffc <HAL_UART_RxCpltCallback+0xbc>
				dmx_error = 1;
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	4b33      	ldr	r3, [pc, #204]	; (800506c <HAL_UART_RxCpltCallback+0x12c>)
 8004fa0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, &buffer, 1);
 8004fa2:	492f      	ldr	r1, [pc, #188]	; (8005060 <HAL_UART_RxCpltCallback+0x120>)
 8004fa4:	4834      	ldr	r0, [pc, #208]	; (8005078 <HAL_UART_RxCpltCallback+0x138>)
 8004fa6:	f7fe fd62 	bl	8003a6e <HAL_UART_Receive_IT>
				return;
 8004faa:	e7d2      	b.n	8004f52 <HAL_UART_RxCpltCallback+0x12>
				msg_cnt = 0;
 8004fac:	4613      	mov	r3, r2
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
				led_status =!led_status;
 8004fb2:	4a32      	ldr	r2, [pc, #200]	; (800507c <HAL_UART_RxCpltCallback+0x13c>)
 8004fb4:	7813      	ldrb	r3, [r2, #0]
 8004fb6:	fab3 f383 	clz	r3, r3
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	7013      	strb	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 8004fbe:	7812      	ldrb	r2, [r2, #0]
 8004fc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fc4:	482e      	ldr	r0, [pc, #184]	; (8005080 <HAL_UART_RxCpltCallback+0x140>)
 8004fc6:	f7fc ffdc 	bl	8001f82 <HAL_GPIO_WritePin>
 8004fca:	e7d5      	b.n	8004f78 <HAL_UART_RxCpltCallback+0x38>
				packet_type = DATA_PACKET;
 8004fcc:	4b2d      	ldr	r3, [pc, #180]	; (8005084 <HAL_UART_RxCpltCallback+0x144>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	701a      	strb	r2, [r3, #0]
		if (packet_type == DATA_PACKET)
 8004fd2:	4b2c      	ldr	r3, [pc, #176]	; (8005084 <HAL_UART_RxCpltCallback+0x144>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	b933      	cbnz	r3, 8004fe6 <HAL_UART_RxCpltCallback+0xa6>
			if (byte_count >= start_addr && byte_count < start_addr + get_reg_length())
 8004fd8:	4b25      	ldr	r3, [pc, #148]	; (8005070 <HAL_UART_RxCpltCallback+0x130>)
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	4a2a      	ldr	r2, [pc, #168]	; (8005088 <HAL_UART_RxCpltCallback+0x148>)
 8004fe0:	6812      	ldr	r2, [r2, #0]
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d20e      	bcs.n	8005004 <HAL_UART_RxCpltCallback+0xc4>
		byte_count++;
 8004fe6:	4a22      	ldr	r2, [pc, #136]	; (8005070 <HAL_UART_RxCpltCallback+0x130>)
 8004fe8:	8813      	ldrh	r3, [r2, #0]
 8004fea:	3301      	adds	r3, #1
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	8013      	strh	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart1, &buffer, 1);
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	491b      	ldr	r1, [pc, #108]	; (8005060 <HAL_UART_RxCpltCallback+0x120>)
 8004ff4:	4820      	ldr	r0, [pc, #128]	; (8005078 <HAL_UART_RxCpltCallback+0x138>)
 8004ff6:	f7fe fd3a 	bl	8003a6e <HAL_UART_Receive_IT>
 8004ffa:	e7aa      	b.n	8004f52 <HAL_UART_RxCpltCallback+0x12>
				packet_type = TEST_PACKET;
 8004ffc:	4b21      	ldr	r3, [pc, #132]	; (8005084 <HAL_UART_RxCpltCallback+0x144>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	701a      	strb	r2, [r3, #0]
				break;
 8005002:	e7e6      	b.n	8004fd2 <HAL_UART_RxCpltCallback+0x92>
			if (byte_count >= start_addr && byte_count < start_addr + get_reg_length())
 8005004:	4b1a      	ldr	r3, [pc, #104]	; (8005070 <HAL_UART_RxCpltCallback+0x130>)
 8005006:	881c      	ldrh	r4, [r3, #0]
 8005008:	b2a4      	uxth	r4, r4
 800500a:	f7ff ff0f 	bl	8004e2c <get_reg_length>
 800500e:	4b1e      	ldr	r3, [pc, #120]	; (8005088 <HAL_UART_RxCpltCallback+0x148>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4418      	add	r0, r3
 8005014:	4284      	cmp	r4, r0
 8005016:	d2e6      	bcs.n	8004fe6 <HAL_UART_RxCpltCallback+0xa6>
				set_reg(byte_count - start_addr-1, rx_byte);
 8005018:	4b15      	ldr	r3, [pc, #84]	; (8005070 <HAL_UART_RxCpltCallback+0x130>)
 800501a:	8818      	ldrh	r0, [r3, #0]
 800501c:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <HAL_UART_RxCpltCallback+0x148>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	1ac0      	subs	r0, r0, r3
 8005022:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005026:	3801      	subs	r0, #1
 8005028:	f7ff ff38 	bl	8004e9c <set_reg>
 800502c:	e7db      	b.n	8004fe6 <HAL_UART_RxCpltCallback+0xa6>
		if (UART_mode_SERIAL)
 800502e:	4b17      	ldr	r3, [pc, #92]	; (800508c <HAL_UART_RxCpltCallback+0x14c>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	b153      	cbz	r3, 800504a <HAL_UART_RxCpltCallback+0x10a>
			ring_buffer_put(&rx_buff_dmx, &buffer2, 1);
 8005034:	2201      	movs	r2, #1
 8005036:	4916      	ldr	r1, [pc, #88]	; (8005090 <HAL_UART_RxCpltCallback+0x150>)
 8005038:	4816      	ldr	r0, [pc, #88]	; (8005094 <HAL_UART_RxCpltCallback+0x154>)
 800503a:	f001 fa30 	bl	800649e <ring_buffer_put>
		HAL_UART_Receive_IT(&huart3, &buffer2, 1);
 800503e:	2201      	movs	r2, #1
 8005040:	4913      	ldr	r1, [pc, #76]	; (8005090 <HAL_UART_RxCpltCallback+0x150>)
 8005042:	4815      	ldr	r0, [pc, #84]	; (8005098 <HAL_UART_RxCpltCallback+0x158>)
 8005044:	f7fe fd13 	bl	8003a6e <HAL_UART_Receive_IT>
 8005048:	e783      	b.n	8004f52 <HAL_UART_RxCpltCallback+0x12>
			ring_buffer_put(&rx_buff_shell, &buffer2, 1);
 800504a:	2201      	movs	r2, #1
 800504c:	4910      	ldr	r1, [pc, #64]	; (8005090 <HAL_UART_RxCpltCallback+0x150>)
 800504e:	4813      	ldr	r0, [pc, #76]	; (800509c <HAL_UART_RxCpltCallback+0x15c>)
 8005050:	f001 fa25 	bl	800649e <ring_buffer_put>
 8005054:	e7f3      	b.n	800503e <HAL_UART_RxCpltCallback+0xfe>
 8005056:	bf00      	nop
 8005058:	40013800 	.word	0x40013800
 800505c:	40004800 	.word	0x40004800
 8005060:	200002a4 	.word	0x200002a4
 8005064:	200002b4 	.word	0x200002b4
 8005068:	200002ad 	.word	0x200002ad
 800506c:	20000070 	.word	0x20000070
 8005070:	200002a6 	.word	0x200002a6
 8005074:	200002a8 	.word	0x200002a8
 8005078:	20000910 	.word	0x20000910
 800507c:	200002ac 	.word	0x200002ac
 8005080:	40011000 	.word	0x40011000
 8005084:	200002ae 	.word	0x200002ae
 8005088:	200002b0 	.word	0x200002b0
 800508c:	200002c4 	.word	0x200002c4
 8005090:	200002a5 	.word	0x200002a5
 8005094:	20000650 	.word	0x20000650
 8005098:	20000834 	.word	0x20000834
 800509c:	20000668 	.word	0x20000668

080050a0 <dmx512_setRx>:
}



void dmx512_setRx(void)
{
 80050a0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 80050a2:	2200      	movs	r2, #0
 80050a4:	2180      	movs	r1, #128	; 0x80
 80050a6:	4803      	ldr	r0, [pc, #12]	; (80050b4 <dmx512_setRx+0x14>)
 80050a8:	f7fc ff6b 	bl	8001f82 <HAL_GPIO_WritePin>
    HAL_HalfDuplex_EnableReceiver(&huart1);
 80050ac:	4802      	ldr	r0, [pc, #8]	; (80050b8 <dmx512_setRx+0x18>)
 80050ae:	f7fe fe01 	bl	8003cb4 <HAL_HalfDuplex_EnableReceiver>
}
 80050b2:	bd08      	pop	{r3, pc}
 80050b4:	40010c00 	.word	0x40010c00
 80050b8:	20000910 	.word	0x20000910

080050bc <dmx512_rec_enable>:
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_SET);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
}

void dmx512_rec_enable(uint8_t on)
{
 80050bc:	b508      	push	{r3, lr}
	if (on)
 80050be:	b930      	cbnz	r0, 80050ce <dmx512_rec_enable+0x12>
#endif
	}
	else
	{
		//Disable UART
		__HAL_UART_DISABLE(&huart1);
 80050c0:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <dmx512_rec_enable+0x2c>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68d3      	ldr	r3, [r2, #12]
 80050c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ca:	60d3      	str	r3, [r2, #12]
		//Disable Timer
#ifdef USE_TIMER
		TIM_ITConfig(dmx512_config.tim, TIM_IT_CC1, DISABLE);
#endif
	}
}
 80050cc:	bd08      	pop	{r3, pc}
		start_addr = get_addr();
 80050ce:	f7ff fe9b 	bl	8004e08 <get_addr>
 80050d2:	4b06      	ldr	r3, [pc, #24]	; (80050ec <dmx512_rec_enable+0x30>)
 80050d4:	6018      	str	r0, [r3, #0]
		dmx512_setRx();
 80050d6:	f7ff ffe3 	bl	80050a0 <dmx512_setRx>
    	HAL_UART_Receive_IT(&huart1, &buffer, 1);
 80050da:	2201      	movs	r2, #1
 80050dc:	4904      	ldr	r1, [pc, #16]	; (80050f0 <dmx512_rec_enable+0x34>)
 80050de:	4802      	ldr	r0, [pc, #8]	; (80050e8 <dmx512_rec_enable+0x2c>)
 80050e0:	f7fe fcc5 	bl	8003a6e <HAL_UART_Receive_IT>
 80050e4:	e7f2      	b.n	80050cc <dmx512_rec_enable+0x10>
 80050e6:	bf00      	nop
 80050e8:	20000910 	.word	0x20000910
 80050ec:	200002b0 	.word	0x200002b0
 80050f0:	200002a4 	.word	0x200002a4

080050f4 <dmx512_rec_init>:
{
 80050f4:	b508      	push	{r3, lr}
	dmx512_rec_enable(1);
 80050f6:	2001      	movs	r0, #1
 80050f8:	f7ff ffe0 	bl	80050bc <dmx512_rec_enable>
	HAL_UART_Receive_IT(&huart3, &buffer2, 1);
 80050fc:	2201      	movs	r2, #1
 80050fe:	4902      	ldr	r1, [pc, #8]	; (8005108 <dmx512_rec_init+0x14>)
 8005100:	4802      	ldr	r0, [pc, #8]	; (800510c <dmx512_rec_init+0x18>)
 8005102:	f7fe fcb4 	bl	8003a6e <HAL_UART_Receive_IT>
}
 8005106:	bd08      	pop	{r3, pc}
 8005108:	200002a5 	.word	0x200002a5
 800510c:	20000834 	.word	0x20000834

08005110 <EE_LL_Format>:
//##########################################################################################################
//##########################################################################################################


bool    EE_LL_Format(uint16_t startpage, uint16_t pages)
{
 8005110:	b530      	push	{r4, r5, lr}
 8005112:	b087      	sub	sp, #28
 8005114:	4604      	mov	r4, r0
 8005116:	460d      	mov	r5, r1
  uint32_t    error;
    HAL_FLASH_Unlock();
 8005118:	f7fc fd22 	bl	8001b60 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef  flashErase;
    flashErase.NbPages=pages;
 800511c:	9504      	str	r5, [sp, #16]
    flashErase.Banks = FLASH_BANK_1;
 800511e:	2301      	movs	r3, #1
 8005120:	9302      	str	r3, [sp, #8]
    flashErase.PageAddress = (ADDR_FLASH_PAGE_0|(_EEPROM_FLASH_PAGE_SIZE*startpage));
 8005122:	02a4      	lsls	r4, r4, #10
 8005124:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8005128:	9403      	str	r4, [sp, #12]
    flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 800512a:	2300      	movs	r3, #0
 800512c:	9301      	str	r3, [sp, #4]
    if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 800512e:	a905      	add	r1, sp, #20
 8005130:	a801      	add	r0, sp, #4
 8005132:	f7fc fde1 	bl	8001cf8 <HAL_FLASHEx_Erase>
 8005136:	b938      	cbnz	r0, 8005148 <EE_LL_Format+0x38>
    {
        HAL_FLASH_Lock();
 8005138:	f7fc fd2c 	bl	8001b94 <HAL_FLASH_Lock>
        if(error != 0xFFFFFFFF)
 800513c:	9b05      	ldr	r3, [sp, #20]
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d006      	beq.n	8005152 <EE_LL_Format+0x42>
            return false;
 8005144:	2000      	movs	r0, #0
 8005146:	e002      	b.n	800514e <EE_LL_Format+0x3e>
        else
            return true;
    }
    HAL_FLASH_Lock();
 8005148:	f7fc fd24 	bl	8001b94 <HAL_FLASH_Lock>
    return false;
 800514c:	2000      	movs	r0, #0
}
 800514e:	b007      	add	sp, #28
 8005150:	bd30      	pop	{r4, r5, pc}
            return true;
 8005152:	2001      	movs	r0, #1
 8005154:	e7fb      	b.n	800514e <EE_LL_Format+0x3e>

08005156 <EE_LL_Read>:

bool    EE_LL_Read(uint16_t startpage, uint16_t addr, uint16_t size, uint8_t* Data)
{
 8005156:	b430      	push	{r4, r5}
    for(uint16_t ii=addr;ii<size+addr;ii++)
 8005158:	460c      	mov	r4, r1
 800515a:	e007      	b.n	800516c <EE_LL_Read+0x16>
    {
        *Data =  (*(__IO uint8_t*)(ii+(ADDR_FLASH_PAGE_0|(_EEPROM_FLASH_PAGE_SIZE*startpage))));
 800515c:	0285      	lsls	r5, r0, #10
 800515e:	f045 6500 	orr.w	r5, r5, #134217728	; 0x8000000
 8005162:	5d65      	ldrb	r5, [r4, r5]
 8005164:	f803 5b01 	strb.w	r5, [r3], #1
    for(uint16_t ii=addr;ii<size+addr;ii++)
 8005168:	3401      	adds	r4, #1
 800516a:	b2a4      	uxth	r4, r4
 800516c:	1855      	adds	r5, r2, r1
 800516e:	42ac      	cmp	r4, r5
 8005170:	dbf4      	blt.n	800515c <EE_LL_Read+0x6>
        Data++;
    }
    return true;
}
 8005172:	2001      	movs	r0, #1
 8005174:	bc30      	pop	{r4, r5}
 8005176:	4770      	bx	lr

08005178 <EE_Format>:

//##########################################################################################################
//##########################################################################################################

bool	EE_Format()
{
 8005178:	b508      	push	{r3, lr}
  return EE_LL_Format(_EEPROM_USE_FLASH_PAGE,1);
 800517a:	2101      	movs	r1, #1
 800517c:	203f      	movs	r0, #63	; 0x3f
 800517e:	f7ff ffc7 	bl	8005110 <EE_LL_Format>
}
 8005182:	bd08      	pop	{r3, pc}

08005184 <EE_Reads>:
}

//##########################################################################################################
bool EE_Reads(uint16_t VirtualAddress,uint16_t HowMuchToRead,uint32_t* Data)
{
	if((VirtualAddress+HowMuchToRead) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 8005184:	4401      	add	r1, r0
 8005186:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800518a:	dd0b      	ble.n	80051a4 <EE_Reads+0x20>
		return false;
 800518c:	2000      	movs	r0, #0
	{
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
		Data++;
	}
	return true;
}
 800518e:	4770      	bx	lr
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8005190:	0083      	lsls	r3, r0, #2
 8005192:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8005196:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f842 3b04 	str.w	r3, [r2], #4
	for(uint16_t i=VirtualAddress ; i<HowMuchToRead+VirtualAddress ; i++)
 80051a0:	3001      	adds	r0, #1
 80051a2:	b280      	uxth	r0, r0
 80051a4:	4281      	cmp	r1, r0
 80051a6:	dcf3      	bgt.n	8005190 <EE_Reads+0xc>
	return true;
 80051a8:	2001      	movs	r0, #1
 80051aa:	4770      	bx	lr

080051ac <EE_Writes>:

//##########################################################################################################
bool 	EE_Writes(uint16_t VirtualAddress,uint16_t HowMuchToWrite,uint32_t* Data)
{
 80051ac:	b570      	push	{r4, r5, r6, lr}
	if((VirtualAddress+HowMuchToWrite) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 80051ae:	4401      	add	r1, r0
 80051b0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80051b4:	dd02      	ble.n	80051bc <EE_Writes+0x10>
		return false;
 80051b6:	2600      	movs	r6, #0
		}
		Data++;
	}
	HAL_FLASH_Lock();
	return true;
}
 80051b8:	4630      	mov	r0, r6
 80051ba:	bd70      	pop	{r4, r5, r6, pc}
 80051bc:	4615      	mov	r5, r2
	if(EE_Format()==false)
 80051be:	f7ff ffdb 	bl	8005178 <EE_Format>
 80051c2:	4606      	mov	r6, r0
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d0f7      	beq.n	80051b8 <EE_Writes+0xc>
	HAL_FLASH_Unlock();
 80051c8:	f7fc fcca 	bl	8001b60 <HAL_FLASH_Unlock>
	for(uint16_t	i=0 ; i<(_EEPROM_FLASH_PAGE_SIZE/4); i++)
 80051cc:	2400      	movs	r4, #0
 80051ce:	2cff      	cmp	r4, #255	; 0xff
 80051d0:	d812      	bhi.n	80051f8 <EE_Writes+0x4c>
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(i*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)*Data)!=HAL_OK)
 80051d2:	00a1      	lsls	r1, r4, #2
 80051d4:	682a      	ldr	r2, [r5, #0]
 80051d6:	2300      	movs	r3, #0
 80051d8:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80051dc:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 80051e0:	2002      	movs	r0, #2
 80051e2:	f7fc fd17 	bl	8001c14 <HAL_FLASH_Program>
 80051e6:	b918      	cbnz	r0, 80051f0 <EE_Writes+0x44>
		Data++;
 80051e8:	3504      	adds	r5, #4
	for(uint16_t	i=0 ; i<(_EEPROM_FLASH_PAGE_SIZE/4); i++)
 80051ea:	3401      	adds	r4, #1
 80051ec:	b2a4      	uxth	r4, r4
 80051ee:	e7ee      	b.n	80051ce <EE_Writes+0x22>
			HAL_FLASH_Lock();
 80051f0:	f7fc fcd0 	bl	8001b94 <HAL_FLASH_Lock>
			return false;
 80051f4:	2600      	movs	r6, #0
 80051f6:	e7df      	b.n	80051b8 <EE_Writes+0xc>
	HAL_FLASH_Lock();
 80051f8:	f7fc fccc 	bl	8001b94 <HAL_FLASH_Lock>
	return true;
 80051fc:	e7dc      	b.n	80051b8 <EE_Writes+0xc>
	...

08005200 <init_fx_list>:

//Point all pointers to the same "empty" FX
void init_fx_list(void)
{
	uint8_t cnt = 0;
	for(cnt = 0;cnt < MAX_FX;cnt++)
 8005200:	2300      	movs	r3, #0
 8005202:	e005      	b.n	8005210 <init_fx_list+0x10>
		pfx_list[cnt] = &param;
 8005204:	4a04      	ldr	r2, [pc, #16]	; (8005218 <init_fx_list+0x18>)
 8005206:	4905      	ldr	r1, [pc, #20]	; (800521c <init_fx_list+0x1c>)
 8005208:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(cnt = 0;cnt < MAX_FX;cnt++)
 800520c:	3301      	adds	r3, #1
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b3f      	cmp	r3, #63	; 0x3f
 8005212:	d9f7      	bls.n	8005204 <init_fx_list+0x4>
}
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	20000680 	.word	0x20000680
 800521c:	0800bac8 	.word	0x0800bac8

08005220 <register_fx>:

uint8_t register_fx(const s_fx_param* pfx_param, uint8_t fx_num)
{
 8005220:	b538      	push	{r3, r4, r5, lr}
	uint8_t fx_cnt = 1;
	//If FX = 0 we find the first empty slot and install it there
	if (fx_num == 0)
 8005222:	460d      	mov	r5, r1
 8005224:	b909      	cbnz	r1, 800522a <register_fx+0xa>
	uint8_t fx_cnt = 1;
 8005226:	2401      	movs	r4, #1
 8005228:	e003      	b.n	8005232 <register_fx+0x12>
 800522a:	460c      	mov	r4, r1
 800522c:	e00a      	b.n	8005244 <register_fx+0x24>
	{
		while ((pfx_list[fx_cnt]->fx_run_pointer != NULL) && (fx_cnt < MAX_FX-1))
		{
			fx_cnt++;
 800522e:	3401      	adds	r4, #1
 8005230:	b2e4      	uxtb	r4, r4
		while ((pfx_list[fx_cnt]->fx_run_pointer != NULL) && (fx_cnt < MAX_FX-1))
 8005232:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <register_fx+0x44>)
 8005234:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	b10b      	cbz	r3, 8005240 <register_fx+0x20>
 800523c:	2c3e      	cmp	r4, #62	; 0x3e
 800523e:	d9f6      	bls.n	800522e <register_fx+0xe>
		}

		//No slots available
		if (fx_cnt == MAX_FX-1)
 8005240:	2c3f      	cmp	r4, #63	; 0x3f
 8005242:	d009      	beq.n	8005258 <register_fx+0x38>
			return 0;
		}
		fx_num = fx_cnt;
	}

	pfx_list[fx_num] = pfx_param;
 8005244:	4b07      	ldr	r3, [pc, #28]	; (8005264 <register_fx+0x44>)
 8005246:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	print("ID:%d\t FX: %s",fx_num,pfx_param->fxname);
 800524a:	1cc2      	adds	r2, r0, #3
 800524c:	4621      	mov	r1, r4
 800524e:	4806      	ldr	r0, [pc, #24]	; (8005268 <register_fx+0x48>)
 8005250:	f001 fdd6 	bl	8006e00 <print>
	return fx_num;
}
 8005254:	4620      	mov	r0, r4
 8005256:	bd38      	pop	{r3, r4, r5, pc}
			print("FX Space full");
 8005258:	4804      	ldr	r0, [pc, #16]	; (800526c <register_fx+0x4c>)
 800525a:	f001 fdd1 	bl	8006e00 <print>
			return 0;
 800525e:	462c      	mov	r4, r5
 8005260:	e7f8      	b.n	8005254 <register_fx+0x34>
 8005262:	bf00      	nop
 8005264:	20000680 	.word	0x20000680
 8005268:	0800baec 	.word	0x0800baec
 800526c:	0800badc 	.word	0x0800badc

08005270 <fx_install>:
#include "fx_pwm_strip_engine.h"
#include "fx_poofer_ctrl.h"
#include "fx_incandescent_ctrl.h"

void fx_install(void)
{
 8005270:	b508      	push	{r3, lr}
	//REGISTER FX HERE !!!
    fx_pwm_running_light(0);
 8005272:	2000      	movs	r0, #0
 8005274:	f002 ff8c 	bl	8008190 <fx_pwm_running_light>
    fx_pwm_running_pulse_light(0);
 8005278:	2000      	movs	r0, #0
 800527a:	f002 ff91 	bl	80081a0 <fx_pwm_running_pulse_light>
    fx_pwm_pulsing_light(0);
 800527e:	2000      	movs	r0, #0
 8005280:	f002 ff04 	bl	800808c <fx_pwm_pulsing_light>
    fx_pwm_pulsing_pulse_light(0);
 8005284:	2000      	movs	r0, #0
 8005286:	f002 ff09 	bl	800809c <fx_pwm_pulsing_pulse_light>
    fx_strip_running_light(0);
 800528a:	2000      	movs	r0, #0
 800528c:	f003 faec 	bl	8008868 <fx_strip_running_light>
    fx_strip_rainbow(0);
 8005290:	2000      	movs	r0, #0
 8005292:	f003 fa3d 	bl	8008710 <fx_strip_rainbow>
    fx_strip_cylon(0);
 8005296:	2000      	movs	r0, #0
 8005298:	f003 f9bc 	bl	8008614 <fx_strip_cylon>
    fx_pwm_strip_engine(0);
 800529c:	2000      	movs	r0, #0
 800529e:	f003 f90b 	bl	80084b8 <fx_pwm_strip_engine>
    fx_pwm_poofer(0);
 80052a2:	2000      	movs	r0, #0
 80052a4:	f002 fe7e 	bl	8007fa4 <fx_pwm_poofer>
    fx_pwm_incandescent(0);
 80052a8:	2000      	movs	r0, #0
 80052aa:	f002 fe13 	bl	8007ed4 <fx_pwm_incandescent>
}
 80052ae:	bd08      	pop	{r3, pc}

080052b0 <install_fx>:

extern const s_fx_param* pfx_list[MAX_FX];
extern uint8_t fxcnt;

void install_fx(void)
{
 80052b0:	b508      	push	{r3, lr}
	fx_install();
 80052b2:	f7ff ffdd 	bl	8005270 <fx_install>
}
 80052b6:	bd08      	pop	{r3, pc}

080052b8 <start_fx>:
//Called to start a new effect. Return the effect that was actually enabled
uint8_t start_fx(uint8_t id)
{

	//Check if FX is installed (We assume at future calls to the routine that the pointer is valid...
	if ((NULL != pfx_list[id]->fx_run_pointer) || (id == 0))
 80052b8:	4b2b      	ldr	r3, [pc, #172]	; (8005368 <start_fx+0xb0>)
 80052ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d03d      	beq.n	8005340 <start_fx+0x88>
{
 80052c4:	b510      	push	{r4, lr}
 80052c6:	4604      	mov	r4, r0
	{
		//Call the last FX once with the END State
		if (current_fx_state != FX_DONE)
 80052c8:	4b28      	ldr	r3, [pc, #160]	; (800536c <start_fx+0xb4>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d016      	beq.n	80052fe <start_fx+0x46>
		{
			if (NULL != pfx_list[current_fx]->fx_run_pointer)
 80052d0:	4b27      	ldr	r3, [pc, #156]	; (8005370 <start_fx+0xb8>)
 80052d2:	781a      	ldrb	r2, [r3, #0]
 80052d4:	4b24      	ldr	r3, [pc, #144]	; (8005368 <start_fx+0xb0>)
 80052d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052da:	690b      	ldr	r3, [r1, #16]
 80052dc:	b11b      	cbz	r3, 80052e6 <start_fx+0x2e>
				pfx_list[current_fx]->fx_run_pointer(FX_END,pfx_list[current_fx]->duration,0);
 80052de:	2200      	movs	r2, #0
 80052e0:	68c9      	ldr	r1, [r1, #12]
 80052e2:	2002      	movs	r0, #2
 80052e4:	4798      	blx	r3
			print("Completed FX ID:%d FX: %s ",current_fx,pfx_list[current_fx]->fxname);
 80052e6:	4b22      	ldr	r3, [pc, #136]	; (8005370 <start_fx+0xb8>)
 80052e8:	7819      	ldrb	r1, [r3, #0]
 80052ea:	4b1f      	ldr	r3, [pc, #124]	; (8005368 <start_fx+0xb0>)
 80052ec:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80052f0:	3203      	adds	r2, #3
 80052f2:	4820      	ldr	r0, [pc, #128]	; (8005374 <start_fx+0xbc>)
 80052f4:	f001 fd84 	bl	8006e00 <print>
			current_fx_state = FX_DONE;
 80052f8:	4b1c      	ldr	r3, [pc, #112]	; (800536c <start_fx+0xb4>)
 80052fa:	2203      	movs	r2, #3
 80052fc:	701a      	strb	r2, [r3, #0]
		}
		//ID is valid, setup parameters
		fx_frame_count = 0;
 80052fe:	4b1e      	ldr	r3, [pc, #120]	; (8005378 <start_fx+0xc0>)
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
		last_fx = current_fx;
 8005304:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <start_fx+0xb8>)
 8005306:	7819      	ldrb	r1, [r3, #0]
 8005308:	4a1c      	ldr	r2, [pc, #112]	; (800537c <start_fx+0xc4>)
 800530a:	7011      	strb	r1, [r2, #0]
		current_fx = id;
 800530c:	701c      	strb	r4, [r3, #0]
		if (id == 0)
 800530e:	b34c      	cbz	r4, 8005364 <start_fx+0xac>
			return current_fx;

		//Call run routine once with INIT state
		if (FX_OK == pfx_list[current_fx]->fx_run_pointer(FX_INIT,0,pfx_list[current_fx]->duration))
 8005310:	4b15      	ldr	r3, [pc, #84]	; (8005368 <start_fx+0xb0>)
 8005312:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005316:	691c      	ldr	r4, [r3, #16]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	2100      	movs	r1, #0
 800531c:	4608      	mov	r0, r1
 800531e:	47a0      	blx	r4
 8005320:	b998      	cbnz	r0, 800534a <start_fx+0x92>
		{
			current_fx_state = FX_INIT;
 8005322:	4b12      	ldr	r3, [pc, #72]	; (800536c <start_fx+0xb4>)
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
			print("Started FX ID:%d FX: %s ",current_fx,pfx_list[current_fx]->fxname);
 8005328:	4b11      	ldr	r3, [pc, #68]	; (8005370 <start_fx+0xb8>)
 800532a:	7819      	ldrb	r1, [r3, #0]
 800532c:	4b0e      	ldr	r3, [pc, #56]	; (8005368 <start_fx+0xb0>)
 800532e:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8005332:	3203      	adds	r2, #3
 8005334:	4812      	ldr	r0, [pc, #72]	; (8005380 <start_fx+0xc8>)
 8005336:	f001 fd63 	bl	8006e00 <print>
			print("FX ID:%d FX: %s failed to start",current_fx,pfx_list[current_fx]->fxname);
			current_fx = last_fx;
		}
	}
	//return new ID
	return current_fx;
 800533a:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <start_fx+0xb8>)
 800533c:	7818      	ldrb	r0, [r3, #0]
}
 800533e:	bd10      	pop	{r4, pc}
	if ((NULL != pfx_list[id]->fx_run_pointer) || (id == 0))
 8005340:	2800      	cmp	r0, #0
 8005342:	d0bf      	beq.n	80052c4 <start_fx+0xc>
	return current_fx;
 8005344:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <start_fx+0xb8>)
 8005346:	7818      	ldrb	r0, [r3, #0]
}
 8005348:	4770      	bx	lr
			print("FX ID:%d FX: %s failed to start",current_fx,pfx_list[current_fx]->fxname);
 800534a:	4c09      	ldr	r4, [pc, #36]	; (8005370 <start_fx+0xb8>)
 800534c:	7821      	ldrb	r1, [r4, #0]
 800534e:	4b06      	ldr	r3, [pc, #24]	; (8005368 <start_fx+0xb0>)
 8005350:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8005354:	3203      	adds	r2, #3
 8005356:	480b      	ldr	r0, [pc, #44]	; (8005384 <start_fx+0xcc>)
 8005358:	f001 fd52 	bl	8006e00 <print>
			current_fx = last_fx;
 800535c:	4b07      	ldr	r3, [pc, #28]	; (800537c <start_fx+0xc4>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	7023      	strb	r3, [r4, #0]
 8005362:	e7ea      	b.n	800533a <start_fx+0x82>
			return current_fx;
 8005364:	4620      	mov	r0, r4
 8005366:	e7ea      	b.n	800533e <start_fx+0x86>
 8005368:	20000680 	.word	0x20000680
 800536c:	200002b6 	.word	0x200002b6
 8005370:	200002b5 	.word	0x200002b5
 8005374:	0800bafc 	.word	0x0800bafc
 8005378:	200002b8 	.word	0x200002b8
 800537c:	200002bc 	.word	0x200002bc
 8005380:	0800bb18 	.word	0x0800bb18
 8005384:	0800bb34 	.word	0x0800bb34

08005388 <fx_done>:


void fx_done(void)
{
 8005388:	b570      	push	{r4, r5, r6, lr}
	pfx_list[current_fx]->fx_run_pointer(FX_END,pfx_list[current_fx]->duration,0);
 800538a:	4c10      	ldr	r4, [pc, #64]	; (80053cc <fx_done+0x44>)
 800538c:	4d10      	ldr	r5, [pc, #64]	; (80053d0 <fx_done+0x48>)
 800538e:	782b      	ldrb	r3, [r5, #0]
 8005390:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005394:	691e      	ldr	r6, [r3, #16]
 8005396:	2200      	movs	r2, #0
 8005398:	68d9      	ldr	r1, [r3, #12]
 800539a:	2002      	movs	r0, #2
 800539c:	47b0      	blx	r6
	print("Completed FX ID:%d FX: %s ",current_fx,pfx_list[current_fx]->fxname);
 800539e:	7829      	ldrb	r1, [r5, #0]
 80053a0:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 80053a4:	3203      	adds	r2, #3
 80053a6:	480b      	ldr	r0, [pc, #44]	; (80053d4 <fx_done+0x4c>)
 80053a8:	f001 fd2a 	bl	8006e00 <print>
	current_fx_state = FX_DONE;
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <fx_done+0x50>)
 80053ae:	2203      	movs	r2, #3
 80053b0:	701a      	strb	r2, [r3, #0]
	if (pfx_list[current_fx]->next_fx != 0)
 80053b2:	782b      	ldrb	r3, [r5, #0]
 80053b4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80053b8:	7898      	ldrb	r0, [r3, #2]
 80053ba:	b920      	cbnz	r0, 80053c6 <fx_done+0x3e>
		start_fx(pfx_list[current_fx]->next_fx);
	}
	else
	{
		//Go back to last FX
		start_fx(last_fx);
 80053bc:	4b07      	ldr	r3, [pc, #28]	; (80053dc <fx_done+0x54>)
 80053be:	7818      	ldrb	r0, [r3, #0]
 80053c0:	f7ff ff7a 	bl	80052b8 <start_fx>
	}
	return;
}
 80053c4:	bd70      	pop	{r4, r5, r6, pc}
		start_fx(pfx_list[current_fx]->next_fx);
 80053c6:	f7ff ff77 	bl	80052b8 <start_fx>
 80053ca:	e7fb      	b.n	80053c4 <fx_done+0x3c>
 80053cc:	20000680 	.word	0x20000680
 80053d0:	200002b5 	.word	0x200002b5
 80053d4:	0800bafc 	.word	0x0800bafc
 80053d8:	200002b6 	.word	0x200002b6
 80053dc:	200002bc 	.word	0x200002bc

080053e0 <run_fx>:

//Called every frame
void run_fx(void)
{
	//No FX Active...
	if (current_fx == 0)
 80053e0:	4b1e      	ldr	r3, [pc, #120]	; (800545c <run_fx+0x7c>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d037      	beq.n	8005458 <run_fx+0x78>
{
 80053e8:	b510      	push	{r4, lr}
		return;

	//Check if FX Has expired
	if (pfx_list[current_fx]->mode == MODE_SINGLE_SHOT)
 80053ea:	4a1d      	ldr	r2, [pc, #116]	; (8005460 <run_fx+0x80>)
 80053ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f0:	785a      	ldrb	r2, [r3, #1]
 80053f2:	2a01      	cmp	r2, #1
 80053f4:	d016      	beq.n	8005424 <run_fx+0x44>
			fx_done();
			return;
		}
	}
	//Or needs to be looped...
	else if (pfx_list[current_fx]->mode == MODE_LOOP)
 80053f6:	2a02      	cmp	r2, #2
 80053f8:	d01c      	beq.n	8005434 <run_fx+0x54>
			current_fx_state = FX_INIT;
		}
	}

	//Call FX
	if (FX_COMPLETED == pfx_list[current_fx]->fx_run_pointer(FX_RUN,fx_frame_count,pfx_list[current_fx]->duration))
 80053fa:	4b18      	ldr	r3, [pc, #96]	; (800545c <run_fx+0x7c>)
 80053fc:	781a      	ldrb	r2, [r3, #0]
 80053fe:	4b18      	ldr	r3, [pc, #96]	; (8005460 <run_fx+0x80>)
 8005400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005404:	691c      	ldr	r4, [r3, #16]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	4b16      	ldr	r3, [pc, #88]	; (8005464 <run_fx+0x84>)
 800540a:	6819      	ldr	r1, [r3, #0]
 800540c:	2001      	movs	r0, #1
 800540e:	47a0      	blx	r4
 8005410:	2801      	cmp	r0, #1
 8005412:	d01e      	beq.n	8005452 <run_fx+0x72>
		//FX Self-ended...
		fx_done();
		return;
	}

	current_fx_state = FX_RUN;
 8005414:	4b14      	ldr	r3, [pc, #80]	; (8005468 <run_fx+0x88>)
 8005416:	2201      	movs	r2, #1
 8005418:	701a      	strb	r2, [r3, #0]
	fx_frame_count++;
 800541a:	4a12      	ldr	r2, [pc, #72]	; (8005464 <run_fx+0x84>)
 800541c:	6813      	ldr	r3, [r2, #0]
 800541e:	3301      	adds	r3, #1
 8005420:	6013      	str	r3, [r2, #0]
}
 8005422:	bd10      	pop	{r4, pc}
		if (pfx_list[current_fx]->duration == fx_frame_count)
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <run_fx+0x84>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d1e5      	bne.n	80053fa <run_fx+0x1a>
			fx_done();
 800542e:	f7ff ffab 	bl	8005388 <fx_done>
			return;
 8005432:	e7f6      	b.n	8005422 <run_fx+0x42>
		if (pfx_list[current_fx]->duration == fx_frame_count)
 8005434:	68d9      	ldr	r1, [r3, #12]
 8005436:	4a0b      	ldr	r2, [pc, #44]	; (8005464 <run_fx+0x84>)
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	4291      	cmp	r1, r2
 800543c:	d1dd      	bne.n	80053fa <run_fx+0x1a>
			fx_frame_count = 0;
 800543e:	2400      	movs	r4, #0
 8005440:	4a08      	ldr	r2, [pc, #32]	; (8005464 <run_fx+0x84>)
 8005442:	6014      	str	r4, [r2, #0]
			pfx_list[current_fx]->fx_run_pointer(FX_INIT,pfx_list[current_fx]->duration,0);
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	4622      	mov	r2, r4
 8005448:	4620      	mov	r0, r4
 800544a:	4798      	blx	r3
			current_fx_state = FX_INIT;
 800544c:	4b06      	ldr	r3, [pc, #24]	; (8005468 <run_fx+0x88>)
 800544e:	701c      	strb	r4, [r3, #0]
 8005450:	e7d3      	b.n	80053fa <run_fx+0x1a>
		fx_done();
 8005452:	f7ff ff99 	bl	8005388 <fx_done>
		return;
 8005456:	e7e4      	b.n	8005422 <run_fx+0x42>
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	200002b5 	.word	0x200002b5
 8005460:	20000680 	.word	0x20000680
 8005464:	200002b8 	.word	0x200002b8
 8005468:	200002b6 	.word	0x200002b6
 800546c:	00000000 	.word	0x00000000

08005470 <calc_gamma_val>:

#define GAMMA_TABLE_PAGE 126


uint8_t calc_gamma_val(int16_t gamma, uint8_t val)
{
 8005470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005472:	460d      	mov	r5, r1
	float gf = ((float)gamma/100.0);
 8005474:	f7fb fc12 	bl	8000c9c <__aeabi_i2f>
 8005478:	4921      	ldr	r1, [pc, #132]	; (8005500 <calc_gamma_val+0x90>)
 800547a:	f7fb fd17 	bl	8000eac <__aeabi_fdiv>
 800547e:	4604      	mov	r4, r0
	float res;

	res = 255.0 * pow(((float)val/255.0),(1.0/gf));
 8005480:	4628      	mov	r0, r5
 8005482:	f7fb fc07 	bl	8000c94 <__aeabi_ui2f>
 8005486:	f7fa ffcf 	bl	8000428 <__aeabi_f2d>
 800548a:	4606      	mov	r6, r0
 800548c:	460f      	mov	r7, r1
 800548e:	4620      	mov	r0, r4
 8005490:	f7fa ffca 	bl	8000428 <__aeabi_f2d>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	2000      	movs	r0, #0
 800549a:	491a      	ldr	r1, [pc, #104]	; (8005504 <calc_gamma_val+0x94>)
 800549c:	f7fb f946 	bl	800072c <__aeabi_ddiv>
 80054a0:	4604      	mov	r4, r0
 80054a2:	460d      	mov	r5, r1
 80054a4:	a314      	add	r3, pc, #80	; (adr r3, 80054f8 <calc_gamma_val+0x88>)
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	4630      	mov	r0, r6
 80054ac:	4639      	mov	r1, r7
 80054ae:	f7fb f93d 	bl	800072c <__aeabi_ddiv>
 80054b2:	4622      	mov	r2, r4
 80054b4:	462b      	mov	r3, r5
 80054b6:	f004 faf3 	bl	8009aa0 <pow>
 80054ba:	a30f      	add	r3, pc, #60	; (adr r3, 80054f8 <calc_gamma_val+0x88>)
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f7fb f80a 	bl	80004d8 <__aeabi_dmul>
 80054c4:	f7fb fae0 	bl	8000a88 <__aeabi_d2f>
	res = round(res);
 80054c8:	f7fa ffae 	bl	8000428 <__aeabi_f2d>
 80054cc:	f004 fa68 	bl	80099a0 <round>
 80054d0:	f7fb fada 	bl	8000a88 <__aeabi_d2f>
 80054d4:	4604      	mov	r4, r0
	if (res > 255.0)
 80054d6:	490c      	ldr	r1, [pc, #48]	; (8005508 <calc_gamma_val+0x98>)
 80054d8:	f7fb fdf0 	bl	80010bc <__aeabi_fcmpgt>
 80054dc:	b930      	cbnz	r0, 80054ec <calc_gamma_val+0x7c>
		res = 255.0;
	else if (res<0)
 80054de:	2100      	movs	r1, #0
 80054e0:	4620      	mov	r0, r4
 80054e2:	f7fb fdcd 	bl	8001080 <__aeabi_fcmplt>
 80054e6:	b110      	cbz	r0, 80054ee <calc_gamma_val+0x7e>
		res = 0;
 80054e8:	2400      	movs	r4, #0
 80054ea:	e000      	b.n	80054ee <calc_gamma_val+0x7e>
		res = 255.0;
 80054ec:	4c06      	ldr	r4, [pc, #24]	; (8005508 <calc_gamma_val+0x98>)
	return (uint8_t)res;
 80054ee:	4620      	mov	r0, r4
 80054f0:	f7fb fe14 	bl	800111c <__aeabi_f2uiz>
}
 80054f4:	b2c0      	uxtb	r0, r0
 80054f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054f8:	00000000 	.word	0x00000000
 80054fc:	406fe000 	.word	0x406fe000
 8005500:	42c80000 	.word	0x42c80000
 8005504:	3ff00000 	.word	0x3ff00000
 8005508:	437f0000 	.word	0x437f0000

0800550c <recalcGamma>:

bool recalcGamma(void)
{
 800550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005510:	b087      	sub	sp, #28

	//All 4 tables are recreated every time a gamma value changes
	//The tables are stored in Flash at page 126

    //First format page
    if(EE_LL_Format(GAMMA_TABLE_PAGE,1)==false)
 8005512:	2101      	movs	r1, #1
 8005514:	207e      	movs	r0, #126	; 0x7e
 8005516:	f7ff fdfb 	bl	8005110 <EE_LL_Format>
 800551a:	9004      	str	r0, [sp, #16]
 800551c:	b918      	cbnz	r0, 8005526 <recalcGamma+0x1a>
    	    }
    	}
    }
    HAL_FLASH_Lock();
    return true;
}
 800551e:	9804      	ldr	r0, [sp, #16]
 8005520:	b007      	add	sp, #28
 8005522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    HAL_FLASH_Unlock();
 8005526:	f7fc fb1b 	bl	8001b60 <HAL_FLASH_Unlock>
	int16_t gamma = 220;
 800552a:	23dc      	movs	r3, #220	; 0xdc
 800552c:	9301      	str	r3, [sp, #4]
    for (ii=0;ii<4;ii++)
 800552e:	2300      	movs	r3, #0
 8005530:	9305      	str	r3, [sp, #20]
 8005532:	9b05      	ldr	r3, [sp, #20]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d878      	bhi.n	800562a <recalcGamma+0x11e>
    	switch(ii)
 8005538:	9b05      	ldr	r3, [sp, #20]
 800553a:	4699      	mov	r9, r3
 800553c:	2b03      	cmp	r3, #3
 800553e:	d807      	bhi.n	8005550 <recalcGamma+0x44>
 8005540:	e8df f003 	tbb	[pc, r3]
 8005544:	645f5a02 	.word	0x645f5a02
    		gamma = settings.gamma_red;
 8005548:	4b39      	ldr	r3, [pc, #228]	; (8005630 <recalcGamma+0x124>)
 800554a:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800554e:	9301      	str	r3, [sp, #4]
    	index = 0;
 8005550:	f04f 0800 	mov.w	r8, #0
    	for (jj = 0; jj<64;jj++)  //We'll need to loop through with words....
 8005554:	4647      	mov	r7, r8
 8005556:	464e      	mov	r6, r9
 8005558:	4645      	mov	r5, r8
 800555a:	2f3f      	cmp	r7, #63	; 0x3f
 800555c:	d860      	bhi.n	8005620 <recalcGamma+0x114>
    	    pdata = ((uint64_t)calc_gamma_val(gamma, index)   << 24)
 800555e:	b2ec      	uxtb	r4, r5
 8005560:	4621      	mov	r1, r4
 8005562:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005566:	4640      	mov	r0, r8
 8005568:	f7ff ff82 	bl	8005470 <calc_gamma_val>
 800556c:	b2c0      	uxtb	r0, r0
 800556e:	ea4f 2b10 	mov.w	fp, r0, lsr #8
 8005572:	ea4f 6a00 	mov.w	sl, r0, lsl #24
    	          + ((uint64_t)calc_gamma_val(gamma, index+1) << 16)
 8005576:	1c61      	adds	r1, r4, #1
 8005578:	b2c9      	uxtb	r1, r1
 800557a:	f8cd 8004 	str.w	r8, [sp, #4]
 800557e:	4640      	mov	r0, r8
 8005580:	f7ff ff76 	bl	8005470 <calc_gamma_val>
 8005584:	b2c0      	uxtb	r0, r0
 8005586:	f04f 0900 	mov.w	r9, #0
 800558a:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800558e:	eb1a 0208 	adds.w	r2, sl, r8
 8005592:	eb4b 0309 	adc.w	r3, fp, r9
 8005596:	e9cd 2302 	strd	r2, r3, [sp, #8]
				  + ((uint64_t)calc_gamma_val(gamma, index+2) << 8)
 800559a:	1ca1      	adds	r1, r4, #2
 800559c:	b2c9      	uxtb	r1, r1
 800559e:	9801      	ldr	r0, [sp, #4]
 80055a0:	f7ff ff66 	bl	8005470 <calc_gamma_val>
 80055a4:	b2c0      	uxtb	r0, r0
 80055a6:	f04f 0900 	mov.w	r9, #0
 80055aa:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80055ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055b2:	eb12 0208 	adds.w	r2, r2, r8
 80055b6:	eb43 0309 	adc.w	r3, r3, r9
 80055ba:	4690      	mov	r8, r2
 80055bc:	4699      	mov	r9, r3
				  + ((uint64_t)calc_gamma_val(gamma, index+3));
 80055be:	1ce1      	adds	r1, r4, #3
 80055c0:	b2c9      	uxtb	r1, r1
 80055c2:	9801      	ldr	r0, [sp, #4]
 80055c4:	f7ff ff54 	bl	8005470 <calc_gamma_val>
 80055c8:	b2c3      	uxtb	r3, r0
 80055ca:	2400      	movs	r4, #0
    	    index = index + 4;
 80055cc:	3504      	adds	r5, #4
 80055ce:	b22d      	sxth	r5, r5
    	    waddr = (jj*4)+(ii*256)+(ADDR_FLASH_PAGE_0|(_EEPROM_FLASH_PAGE_SIZE*GAMMA_TABLE_PAGE));
 80055d0:	eb07 1186 	add.w	r1, r7, r6, lsl #6
 80055d4:	0089      	lsls	r1, r1, #2
    	    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,waddr,pdata)!=HAL_OK)
 80055d6:	eb13 0308 	adds.w	r3, r3, r8
 80055da:	eb44 0409 	adc.w	r4, r4, r9
 80055de:	461a      	mov	r2, r3
 80055e0:	4623      	mov	r3, r4
 80055e2:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80055e6:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 80055ea:	2002      	movs	r0, #2
 80055ec:	f7fc fb12 	bl	8001c14 <HAL_FLASH_Program>
 80055f0:	b988      	cbnz	r0, 8005616 <recalcGamma+0x10a>
    	for (jj = 0; jj<64;jj++)  //We'll need to loop through with words....
 80055f2:	3701      	adds	r7, #1
 80055f4:	b2ff      	uxtb	r7, r7
 80055f6:	e7b0      	b.n	800555a <recalcGamma+0x4e>
    		gamma = settings.gamma_green;
 80055f8:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <recalcGamma+0x124>)
 80055fa:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80055fe:	9301      	str	r3, [sp, #4]
    		break;
 8005600:	e7a6      	b.n	8005550 <recalcGamma+0x44>
    		gamma = settings.gamma_blue;
 8005602:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <recalcGamma+0x124>)
 8005604:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8005608:	9301      	str	r3, [sp, #4]
    		break;
 800560a:	e7a1      	b.n	8005550 <recalcGamma+0x44>
    		gamma = settings.gamma_strip;
 800560c:	4b08      	ldr	r3, [pc, #32]	; (8005630 <recalcGamma+0x124>)
 800560e:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8005612:	9301      	str	r3, [sp, #4]
    		break;
 8005614:	e79c      	b.n	8005550 <recalcGamma+0x44>
    	      HAL_FLASH_Lock();
 8005616:	f7fc fabd 	bl	8001b94 <HAL_FLASH_Lock>
    	      return false;
 800561a:	2300      	movs	r3, #0
 800561c:	9304      	str	r3, [sp, #16]
 800561e:	e77e      	b.n	800551e <recalcGamma+0x12>
    for (ii=0;ii<4;ii++)
 8005620:	9b05      	ldr	r3, [sp, #20]
 8005622:	3301      	adds	r3, #1
 8005624:	b2db      	uxtb	r3, r3
 8005626:	9305      	str	r3, [sp, #20]
 8005628:	e783      	b.n	8005532 <recalcGamma+0x26>
    HAL_FLASH_Lock();
 800562a:	f7fc fab3 	bl	8001b94 <HAL_FLASH_Lock>
    return true;
 800562e:	e776      	b.n	800551e <recalcGamma+0x12>
 8005630:	20000780 	.word	0x20000780

08005634 <getGamma>:

uint8_t getGamma(t_gammactrl ch,uint8_t val)
{
 8005634:	b500      	push	{lr}
 8005636:	b083      	sub	sp, #12
	uint8_t data;
	uint16_t addr = ((uint8_t)ch * 256) + val;
 8005638:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	EE_LL_Read(GAMMA_TABLE_PAGE, addr, 1, &data);
 800563c:	f10d 0307 	add.w	r3, sp, #7
 8005640:	2201      	movs	r2, #1
 8005642:	b289      	uxth	r1, r1
 8005644:	207e      	movs	r0, #126	; 0x7e
 8005646:	f7ff fd86 	bl	8005156 <EE_LL_Read>
	return data;
}
 800564a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800564e:	b003      	add	sp, #12
 8005650:	f85d fb04 	ldr.w	pc, [sp], #4

08005654 <get_mode_from_pins>:
#include <stm32f103xb.h>
#include <stm32f1xx.h>
#include <stm32f1xx_hal_gpio.h>

uint8_t get_mode_from_pins(void)
{
 8005654:	b510      	push	{r4, lr}
	uint8_t mode = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_0_GPIO_Port, MODE_0_Pin))
 8005656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800565a:	4808      	ldr	r0, [pc, #32]	; (800567c <get_mode_from_pins+0x28>)
 800565c:	f7fc fc8a 	bl	8001f74 <HAL_GPIO_ReadPin>
 8005660:	b150      	cbz	r0, 8005678 <get_mode_from_pins+0x24>
	uint8_t mode = 0;
 8005662:	2400      	movs	r4, #0
		mode = mode | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_1_GPIO_Port, MODE_1_Pin))
 8005664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005668:	4804      	ldr	r0, [pc, #16]	; (800567c <get_mode_from_pins+0x28>)
 800566a:	f7fc fc83 	bl	8001f74 <HAL_GPIO_ReadPin>
 800566e:	b908      	cbnz	r0, 8005674 <get_mode_from_pins+0x20>
		mode = mode | 0x02;
 8005670:	f044 0402 	orr.w	r4, r4, #2
	return mode;
}
 8005674:	4620      	mov	r0, r4
 8005676:	bd10      	pop	{r4, pc}
		mode = mode | 0x01;
 8005678:	2401      	movs	r4, #1
 800567a:	e7f3      	b.n	8005664 <get_mode_from_pins+0x10>
 800567c:	40011000 	.word	0x40011000

08005680 <get_addr_from_pins>:

uint8_t get_addr_from_pins(void)
{
 8005680:	b510      	push	{r4, lr}
	uint8_t addr = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_0_GPIO_Port, ADDR_0_Pin))
 8005682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005686:	481f      	ldr	r0, [pc, #124]	; (8005704 <get_addr_from_pins+0x84>)
 8005688:	f7fc fc74 	bl	8001f74 <HAL_GPIO_ReadPin>
 800568c:	b3c0      	cbz	r0, 8005700 <get_addr_from_pins+0x80>
	uint8_t addr = 0;
 800568e:	2400      	movs	r4, #0
		addr = addr | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_1_GPIO_Port, ADDR_1_Pin))
 8005690:	2108      	movs	r1, #8
 8005692:	481d      	ldr	r0, [pc, #116]	; (8005708 <get_addr_from_pins+0x88>)
 8005694:	f7fc fc6e 	bl	8001f74 <HAL_GPIO_ReadPin>
 8005698:	b908      	cbnz	r0, 800569e <get_addr_from_pins+0x1e>
		addr = addr | 0x02;
 800569a:	f044 0402 	orr.w	r4, r4, #2
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_2_GPIO_Port, ADDR_2_Pin))
 800569e:	2110      	movs	r1, #16
 80056a0:	4819      	ldr	r0, [pc, #100]	; (8005708 <get_addr_from_pins+0x88>)
 80056a2:	f7fc fc67 	bl	8001f74 <HAL_GPIO_ReadPin>
 80056a6:	b908      	cbnz	r0, 80056ac <get_addr_from_pins+0x2c>
		addr = addr | 0x04;
 80056a8:	f044 0404 	orr.w	r4, r4, #4
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_3_GPIO_Port, ADDR_3_Pin))
 80056ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056b0:	4815      	ldr	r0, [pc, #84]	; (8005708 <get_addr_from_pins+0x88>)
 80056b2:	f7fc fc5f 	bl	8001f74 <HAL_GPIO_ReadPin>
 80056b6:	b908      	cbnz	r0, 80056bc <get_addr_from_pins+0x3c>
		addr = addr | 0x08;
 80056b8:	f044 0408 	orr.w	r4, r4, #8
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_4_GPIO_Port, ADDR_4_Pin))
 80056bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056c0:	4811      	ldr	r0, [pc, #68]	; (8005708 <get_addr_from_pins+0x88>)
 80056c2:	f7fc fc57 	bl	8001f74 <HAL_GPIO_ReadPin>
 80056c6:	b908      	cbnz	r0, 80056cc <get_addr_from_pins+0x4c>
		addr = addr | 0x10;
 80056c8:	f044 0410 	orr.w	r4, r4, #16
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_5_GPIO_Port, ADDR_5_Pin))
 80056cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056d0:	480d      	ldr	r0, [pc, #52]	; (8005708 <get_addr_from_pins+0x88>)
 80056d2:	f7fc fc4f 	bl	8001f74 <HAL_GPIO_ReadPin>
 80056d6:	b908      	cbnz	r0, 80056dc <get_addr_from_pins+0x5c>
		addr = addr | 0x20;
 80056d8:	f044 0420 	orr.w	r4, r4, #32
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_6_GPIO_Port, ADDR_6_Pin))
 80056dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056e0:	4809      	ldr	r0, [pc, #36]	; (8005708 <get_addr_from_pins+0x88>)
 80056e2:	f7fc fc47 	bl	8001f74 <HAL_GPIO_ReadPin>
 80056e6:	b908      	cbnz	r0, 80056ec <get_addr_from_pins+0x6c>
		addr = addr | 0x40;
 80056e8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_7_GPIO_Port, ADDR_7_Pin))
 80056ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056f0:	4805      	ldr	r0, [pc, #20]	; (8005708 <get_addr_from_pins+0x88>)
 80056f2:	f7fc fc3f 	bl	8001f74 <HAL_GPIO_ReadPin>
 80056f6:	b908      	cbnz	r0, 80056fc <get_addr_from_pins+0x7c>
		addr = addr | 0x80;
 80056f8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	return addr;
}
 80056fc:	4620      	mov	r0, r4
 80056fe:	bd10      	pop	{r4, pc}
		addr = addr | 0x01;
 8005700:	2401      	movs	r4, #1
 8005702:	e7c5      	b.n	8005690 <get_addr_from_pins+0x10>
 8005704:	40010800 	.word	0x40010800
 8005708:	40010c00 	.word	0x40010c00

0800570c <check_button>:

uint8_t check_button(void)
{
 800570c:	b508      	push	{r3, lr}
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin))
 800570e:	2120      	movs	r1, #32
 8005710:	4803      	ldr	r0, [pc, #12]	; (8005720 <check_button+0x14>)
 8005712:	f7fc fc2f 	bl	8001f74 <HAL_GPIO_ReadPin>
 8005716:	b108      	cbz	r0, 800571c <check_button+0x10>
		return 1;

	return 0;
 8005718:	2000      	movs	r0, #0
}
 800571a:	bd08      	pop	{r3, pc}
		return 1;
 800571c:	2001      	movs	r0, #1
 800571e:	e7fc      	b.n	800571a <check_button+0xe>
 8005720:	40010800 	.word	0x40010800

08005724 <scale_value>:
//Scales the value to the output range and applies correction


//output = gammatable[((input - offset) * gain)]
uint16_t scale_value( uint8_t val,int16_t offset, int16_t gain, t_gammactrl gamma_ch)
{
 8005724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005728:	4607      	mov	r7, r0
 800572a:	4689      	mov	r9, r1
 800572c:	4614      	mov	r4, r2
 800572e:	4698      	mov	r8, r3
	int32_t res = 0;
	uint8_t gamma = 0;
	uint32_t maxpwm = getMaxPWM();
 8005730:	f000 fe92 	bl	8006458 <getMaxPWM>
 8005734:	4606      	mov	r6, r0
	//1) Scale input between 0 and max
	res = ((uint32_t)val * getMaxPWM())/(uint32_t)255;
 8005736:	f000 fe8f 	bl	8006458 <getMaxPWM>
 800573a:	fb00 f007 	mul.w	r0, r0, r7
 800573e:	4d18      	ldr	r5, [pc, #96]	; (80057a0 <scale_value+0x7c>)
 8005740:	fba5 3000 	umull	r3, r0, r5, r0
 8005744:	09c3      	lsrs	r3, r0, #7
	res = (res * (uint32_t)brightness_scale) /maxpwm;
 8005746:	4a17      	ldr	r2, [pc, #92]	; (80057a4 <scale_value+0x80>)
 8005748:	8810      	ldrh	r0, [r2, #0]
 800574a:	fb00 f003 	mul.w	r0, r0, r3
 800574e:	fbb0 f0f6 	udiv	r0, r0, r6

	//Subtract offset
	res = res - offset;

	//Apply Gain
	res = (int16_t) ((float)res * ((float)gain)/100);
 8005752:	eba0 0009 	sub.w	r0, r0, r9
 8005756:	f7fb faa1 	bl	8000c9c <__aeabi_i2f>
 800575a:	4681      	mov	r9, r0
 800575c:	4620      	mov	r0, r4
 800575e:	f7fb fa9d 	bl	8000c9c <__aeabi_i2f>
 8005762:	4601      	mov	r1, r0
 8005764:	4648      	mov	r0, r9
 8005766:	f7fb faed 	bl	8000d44 <__aeabi_fmul>
 800576a:	490f      	ldr	r1, [pc, #60]	; (80057a8 <scale_value+0x84>)
 800576c:	f7fb fb9e 	bl	8000eac <__aeabi_fdiv>
 8005770:	f7fb fcae 	bl	80010d0 <__aeabi_f2iz>
 8005774:	b204      	sxth	r4, r0

	//Gamma Curve
	//-----------

	//Get Gamma Value from Input
	gamma = getGamma(gamma_ch,val);
 8005776:	4639      	mov	r1, r7
 8005778:	4640      	mov	r0, r8
 800577a:	f7ff ff5b 	bl	8005634 <getGamma>

	//Apply as multiplier to output
	res = ((int16_t)gamma * res)/255;
 800577e:	fb04 f000 	mul.w	r0, r4, r0
 8005782:	fb85 3500 	smull	r3, r5, r5, r0
 8005786:	4405      	add	r5, r0
 8005788:	17c0      	asrs	r0, r0, #31


	//Limit output to valid range
	if (res<0)
 800578a:	ebd0 10e5 	rsbs	r0, r0, r5, asr #7
 800578e:	d405      	bmi.n	800579c <scale_value+0x78>
		res = 0;
	if (res > maxpwm)
 8005790:	42b0      	cmp	r0, r6
 8005792:	d900      	bls.n	8005796 <scale_value+0x72>
		res = maxpwm;
 8005794:	4630      	mov	r0, r6
	return res;
}
 8005796:	b280      	uxth	r0, r0
 8005798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = 0;
 800579c:	2000      	movs	r0, #0
 800579e:	e7f7      	b.n	8005790 <scale_value+0x6c>
 80057a0:	80808081 	.word	0x80808081
 80057a4:	200002be 	.word	0x200002be
 80057a8:	42c80000 	.word	0x42c80000

080057ac <update_pwm_lights>:

//Check what has changed and update Lights
//We only update parameters that have changed otherwise we might have waveform-artifacts...
void update_pwm_lights(uint8_t force)
{
 80057ac:	b538      	push	{r3, r4, r5, lr}
	if (blockupdate)
 80057ae:	4bac      	ldr	r3, [pc, #688]	; (8005a60 <update_pwm_lights+0x2b4>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <update_pwm_lights+0xa>
	{
		configPWM(PWM_CH3,CH_WHITE,scale_value(get_reg(CH3_WHITE),0,100,GAMMA_STRIP));  //TBD, no settings?
		reg_shadow[CH3_WHITE] = get_reg(CH3_WHITE);
	}

}
 80057b4:	bd38      	pop	{r3, r4, r5, pc}
 80057b6:	4604      	mov	r4, r0
	if ((reg_shadow[MAX_BRIGHTNESS])!= get_reg(MAX_BRIGHTNESS) || force)
 80057b8:	4baa      	ldr	r3, [pc, #680]	; (8005a64 <update_pwm_lights+0x2b8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	781d      	ldrb	r5, [r3, #0]
 80057be:	2000      	movs	r0, #0
 80057c0:	f7ff fb7a 	bl	8004eb8 <get_reg>
 80057c4:	4285      	cmp	r5, r0
 80057c6:	d100      	bne.n	80057ca <update_pwm_lights+0x1e>
 80057c8:	b1a4      	cbz	r4, 80057f4 <update_pwm_lights+0x48>
		brightness_scale = ((uint32_t)get_reg(MAX_BRIGHTNESS) * getMaxPWM())/(uint32_t)255;
 80057ca:	2000      	movs	r0, #0
 80057cc:	f7ff fb74 	bl	8004eb8 <get_reg>
 80057d0:	4604      	mov	r4, r0
 80057d2:	f000 fe41 	bl	8006458 <getMaxPWM>
 80057d6:	fb00 f004 	mul.w	r0, r0, r4
 80057da:	4ca3      	ldr	r4, [pc, #652]	; (8005a68 <update_pwm_lights+0x2bc>)
 80057dc:	fba4 3000 	umull	r3, r0, r4, r0
 80057e0:	09c0      	lsrs	r0, r0, #7
 80057e2:	4ba2      	ldr	r3, [pc, #648]	; (8005a6c <update_pwm_lights+0x2c0>)
 80057e4:	8018      	strh	r0, [r3, #0]
		reg_shadow[MAX_BRIGHTNESS] = get_reg(MAX_BRIGHTNESS);
 80057e6:	4b9f      	ldr	r3, [pc, #636]	; (8005a64 <update_pwm_lights+0x2b8>)
 80057e8:	681c      	ldr	r4, [r3, #0]
 80057ea:	2000      	movs	r0, #0
 80057ec:	f7ff fb64 	bl	8004eb8 <get_reg>
 80057f0:	7020      	strb	r0, [r4, #0]
		force = 1;
 80057f2:	2401      	movs	r4, #1
	if ((reg_shadow[CH1_RED])!= get_reg(CH1_RED) || force)
 80057f4:	4b9b      	ldr	r3, [pc, #620]	; (8005a64 <update_pwm_lights+0x2b8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	785d      	ldrb	r5, [r3, #1]
 80057fa:	2001      	movs	r0, #1
 80057fc:	f7ff fb5c 	bl	8004eb8 <get_reg>
 8005800:	4285      	cmp	r5, r0
 8005802:	d100      	bne.n	8005806 <update_pwm_lights+0x5a>
 8005804:	b1ac      	cbz	r4, 8005832 <update_pwm_lights+0x86>
		configPWM(PWM_CH1,CH_RED,scale_value(get_reg(CH1_RED),settings.offset_red,settings.gain_red,GAMMA_RED));
 8005806:	2001      	movs	r0, #1
 8005808:	f7ff fb56 	bl	8004eb8 <get_reg>
 800580c:	4998      	ldr	r1, [pc, #608]	; (8005a70 <update_pwm_lights+0x2c4>)
 800580e:	2300      	movs	r3, #0
 8005810:	f9b1 2048 	ldrsh.w	r2, [r1, #72]	; 0x48
 8005814:	f9b1 1046 	ldrsh.w	r1, [r1, #70]	; 0x46
 8005818:	f7ff ff84 	bl	8005724 <scale_value>
 800581c:	4602      	mov	r2, r0
 800581e:	2100      	movs	r1, #0
 8005820:	4608      	mov	r0, r1
 8005822:	f000 fdf1 	bl	8006408 <configPWM>
		reg_shadow[CH1_RED] = get_reg(CH1_RED);
 8005826:	4b8f      	ldr	r3, [pc, #572]	; (8005a64 <update_pwm_lights+0x2b8>)
 8005828:	681d      	ldr	r5, [r3, #0]
 800582a:	2001      	movs	r0, #1
 800582c:	f7ff fb44 	bl	8004eb8 <get_reg>
 8005830:	7068      	strb	r0, [r5, #1]
	if ((reg_shadow[CH1_GREEN])!= get_reg(CH1_GREEN) || force)
 8005832:	4b8c      	ldr	r3, [pc, #560]	; (8005a64 <update_pwm_lights+0x2b8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	789d      	ldrb	r5, [r3, #2]
 8005838:	2002      	movs	r0, #2
 800583a:	f7ff fb3d 	bl	8004eb8 <get_reg>
 800583e:	4285      	cmp	r5, r0
 8005840:	d100      	bne.n	8005844 <update_pwm_lights+0x98>
 8005842:	b1ac      	cbz	r4, 8005870 <update_pwm_lights+0xc4>
		configPWM(PWM_CH1,CH_GREEN,scale_value(get_reg(CH1_GREEN),settings.offset_green,settings.gain_green,GAMMA_GREEN));
 8005844:	2002      	movs	r0, #2
 8005846:	f7ff fb37 	bl	8004eb8 <get_reg>
 800584a:	4989      	ldr	r1, [pc, #548]	; (8005a70 <update_pwm_lights+0x2c4>)
 800584c:	2301      	movs	r3, #1
 800584e:	f9b1 204e 	ldrsh.w	r2, [r1, #78]	; 0x4e
 8005852:	f9b1 104c 	ldrsh.w	r1, [r1, #76]	; 0x4c
 8005856:	f7ff ff65 	bl	8005724 <scale_value>
 800585a:	4602      	mov	r2, r0
 800585c:	2101      	movs	r1, #1
 800585e:	2000      	movs	r0, #0
 8005860:	f000 fdd2 	bl	8006408 <configPWM>
		reg_shadow[CH1_GREEN] = get_reg(CH1_GREEN);
 8005864:	4b7f      	ldr	r3, [pc, #508]	; (8005a64 <update_pwm_lights+0x2b8>)
 8005866:	681d      	ldr	r5, [r3, #0]
 8005868:	2002      	movs	r0, #2
 800586a:	f7ff fb25 	bl	8004eb8 <get_reg>
 800586e:	70a8      	strb	r0, [r5, #2]
	if ((reg_shadow[CH1_BLUE])!= get_reg(CH1_BLUE) || force)
 8005870:	4b7c      	ldr	r3, [pc, #496]	; (8005a64 <update_pwm_lights+0x2b8>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	78dd      	ldrb	r5, [r3, #3]
 8005876:	2003      	movs	r0, #3
 8005878:	f7ff fb1e 	bl	8004eb8 <get_reg>
 800587c:	4285      	cmp	r5, r0
 800587e:	d100      	bne.n	8005882 <update_pwm_lights+0xd6>
 8005880:	b1ac      	cbz	r4, 80058ae <update_pwm_lights+0x102>
		configPWM(PWM_CH1,CH_BLUE,scale_value(get_reg(CH1_BLUE),settings.offset_blue,settings.gain_blue,GAMMA_BLUE));
 8005882:	2003      	movs	r0, #3
 8005884:	f7ff fb18 	bl	8004eb8 <get_reg>
 8005888:	4979      	ldr	r1, [pc, #484]	; (8005a70 <update_pwm_lights+0x2c4>)
 800588a:	2302      	movs	r3, #2
 800588c:	f9b1 2054 	ldrsh.w	r2, [r1, #84]	; 0x54
 8005890:	f9b1 1052 	ldrsh.w	r1, [r1, #82]	; 0x52
 8005894:	f7ff ff46 	bl	8005724 <scale_value>
 8005898:	4602      	mov	r2, r0
 800589a:	2102      	movs	r1, #2
 800589c:	2000      	movs	r0, #0
 800589e:	f000 fdb3 	bl	8006408 <configPWM>
		reg_shadow[CH1_BLUE] = get_reg(CH1_BLUE);
 80058a2:	4b70      	ldr	r3, [pc, #448]	; (8005a64 <update_pwm_lights+0x2b8>)
 80058a4:	681d      	ldr	r5, [r3, #0]
 80058a6:	2003      	movs	r0, #3
 80058a8:	f7ff fb06 	bl	8004eb8 <get_reg>
 80058ac:	70e8      	strb	r0, [r5, #3]
	if ((reg_shadow[CH2_RED])!= get_reg(CH2_RED) || force)
 80058ae:	4b6d      	ldr	r3, [pc, #436]	; (8005a64 <update_pwm_lights+0x2b8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	791d      	ldrb	r5, [r3, #4]
 80058b4:	2004      	movs	r0, #4
 80058b6:	f7ff faff 	bl	8004eb8 <get_reg>
 80058ba:	4285      	cmp	r5, r0
 80058bc:	d100      	bne.n	80058c0 <update_pwm_lights+0x114>
 80058be:	b1ac      	cbz	r4, 80058ec <update_pwm_lights+0x140>
		configPWM(PWM_CH2,CH_RED,scale_value(get_reg(CH2_RED),settings.offset_red,settings.gain_red,GAMMA_RED));
 80058c0:	2004      	movs	r0, #4
 80058c2:	f7ff faf9 	bl	8004eb8 <get_reg>
 80058c6:	496a      	ldr	r1, [pc, #424]	; (8005a70 <update_pwm_lights+0x2c4>)
 80058c8:	2300      	movs	r3, #0
 80058ca:	f9b1 2048 	ldrsh.w	r2, [r1, #72]	; 0x48
 80058ce:	f9b1 1046 	ldrsh.w	r1, [r1, #70]	; 0x46
 80058d2:	f7ff ff27 	bl	8005724 <scale_value>
 80058d6:	4602      	mov	r2, r0
 80058d8:	2100      	movs	r1, #0
 80058da:	2001      	movs	r0, #1
 80058dc:	f000 fd94 	bl	8006408 <configPWM>
		reg_shadow[CH2_RED] = get_reg(CH2_RED);
 80058e0:	4b60      	ldr	r3, [pc, #384]	; (8005a64 <update_pwm_lights+0x2b8>)
 80058e2:	681d      	ldr	r5, [r3, #0]
 80058e4:	2004      	movs	r0, #4
 80058e6:	f7ff fae7 	bl	8004eb8 <get_reg>
 80058ea:	7128      	strb	r0, [r5, #4]
	if ((reg_shadow[CH2_GREEN])!= get_reg(CH2_GREEN) || force)
 80058ec:	4b5d      	ldr	r3, [pc, #372]	; (8005a64 <update_pwm_lights+0x2b8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	795d      	ldrb	r5, [r3, #5]
 80058f2:	2005      	movs	r0, #5
 80058f4:	f7ff fae0 	bl	8004eb8 <get_reg>
 80058f8:	4285      	cmp	r5, r0
 80058fa:	d100      	bne.n	80058fe <update_pwm_lights+0x152>
 80058fc:	b1ac      	cbz	r4, 800592a <update_pwm_lights+0x17e>
		configPWM(PWM_CH2,CH_GREEN,scale_value(get_reg(CH2_GREEN),settings.offset_green,settings.gain_green,GAMMA_GREEN));
 80058fe:	2005      	movs	r0, #5
 8005900:	f7ff fada 	bl	8004eb8 <get_reg>
 8005904:	495a      	ldr	r1, [pc, #360]	; (8005a70 <update_pwm_lights+0x2c4>)
 8005906:	2301      	movs	r3, #1
 8005908:	f9b1 204e 	ldrsh.w	r2, [r1, #78]	; 0x4e
 800590c:	f9b1 104c 	ldrsh.w	r1, [r1, #76]	; 0x4c
 8005910:	f7ff ff08 	bl	8005724 <scale_value>
 8005914:	4602      	mov	r2, r0
 8005916:	2101      	movs	r1, #1
 8005918:	4608      	mov	r0, r1
 800591a:	f000 fd75 	bl	8006408 <configPWM>
		reg_shadow[CH2_GREEN] = get_reg(CH2_GREEN);
 800591e:	4b51      	ldr	r3, [pc, #324]	; (8005a64 <update_pwm_lights+0x2b8>)
 8005920:	681d      	ldr	r5, [r3, #0]
 8005922:	2005      	movs	r0, #5
 8005924:	f7ff fac8 	bl	8004eb8 <get_reg>
 8005928:	7168      	strb	r0, [r5, #5]
	if ((reg_shadow[CH2_BLUE])!= get_reg(CH2_BLUE) || force)
 800592a:	4b4e      	ldr	r3, [pc, #312]	; (8005a64 <update_pwm_lights+0x2b8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	799d      	ldrb	r5, [r3, #6]
 8005930:	2006      	movs	r0, #6
 8005932:	f7ff fac1 	bl	8004eb8 <get_reg>
 8005936:	4285      	cmp	r5, r0
 8005938:	d100      	bne.n	800593c <update_pwm_lights+0x190>
 800593a:	b1ac      	cbz	r4, 8005968 <update_pwm_lights+0x1bc>
		configPWM(PWM_CH2,CH_BLUE,scale_value(get_reg(CH2_BLUE),settings.offset_blue,settings.gain_blue,GAMMA_BLUE));
 800593c:	2006      	movs	r0, #6
 800593e:	f7ff fabb 	bl	8004eb8 <get_reg>
 8005942:	494b      	ldr	r1, [pc, #300]	; (8005a70 <update_pwm_lights+0x2c4>)
 8005944:	2302      	movs	r3, #2
 8005946:	f9b1 2054 	ldrsh.w	r2, [r1, #84]	; 0x54
 800594a:	f9b1 1052 	ldrsh.w	r1, [r1, #82]	; 0x52
 800594e:	f7ff fee9 	bl	8005724 <scale_value>
 8005952:	4602      	mov	r2, r0
 8005954:	2102      	movs	r1, #2
 8005956:	2001      	movs	r0, #1
 8005958:	f000 fd56 	bl	8006408 <configPWM>
		reg_shadow[CH2_BLUE] = get_reg(CH2_BLUE);
 800595c:	4b41      	ldr	r3, [pc, #260]	; (8005a64 <update_pwm_lights+0x2b8>)
 800595e:	681d      	ldr	r5, [r3, #0]
 8005960:	2006      	movs	r0, #6
 8005962:	f7ff faa9 	bl	8004eb8 <get_reg>
 8005966:	71a8      	strb	r0, [r5, #6]
	if ((reg_shadow[CH3_RED])!= get_reg(CH3_RED) || force)
 8005968:	4b3e      	ldr	r3, [pc, #248]	; (8005a64 <update_pwm_lights+0x2b8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	79dd      	ldrb	r5, [r3, #7]
 800596e:	2007      	movs	r0, #7
 8005970:	f7ff faa2 	bl	8004eb8 <get_reg>
 8005974:	4285      	cmp	r5, r0
 8005976:	d100      	bne.n	800597a <update_pwm_lights+0x1ce>
 8005978:	b1ac      	cbz	r4, 80059a6 <update_pwm_lights+0x1fa>
		configPWM(PWM_CH3,CH_RED,scale_value(get_reg(CH3_RED),settings.offset_red,settings.gain_red,GAMMA_RED));
 800597a:	2007      	movs	r0, #7
 800597c:	f7ff fa9c 	bl	8004eb8 <get_reg>
 8005980:	493b      	ldr	r1, [pc, #236]	; (8005a70 <update_pwm_lights+0x2c4>)
 8005982:	2300      	movs	r3, #0
 8005984:	f9b1 2048 	ldrsh.w	r2, [r1, #72]	; 0x48
 8005988:	f9b1 1046 	ldrsh.w	r1, [r1, #70]	; 0x46
 800598c:	f7ff feca 	bl	8005724 <scale_value>
 8005990:	4602      	mov	r2, r0
 8005992:	2100      	movs	r1, #0
 8005994:	2002      	movs	r0, #2
 8005996:	f000 fd37 	bl	8006408 <configPWM>
		reg_shadow[CH3_RED] = get_reg(CH3_RED);
 800599a:	4b32      	ldr	r3, [pc, #200]	; (8005a64 <update_pwm_lights+0x2b8>)
 800599c:	681d      	ldr	r5, [r3, #0]
 800599e:	2007      	movs	r0, #7
 80059a0:	f7ff fa8a 	bl	8004eb8 <get_reg>
 80059a4:	71e8      	strb	r0, [r5, #7]
	if ((reg_shadow[CH3_GREEN])!= get_reg(CH3_GREEN) || force)
 80059a6:	4b2f      	ldr	r3, [pc, #188]	; (8005a64 <update_pwm_lights+0x2b8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	7a1d      	ldrb	r5, [r3, #8]
 80059ac:	2008      	movs	r0, #8
 80059ae:	f7ff fa83 	bl	8004eb8 <get_reg>
 80059b2:	4285      	cmp	r5, r0
 80059b4:	d100      	bne.n	80059b8 <update_pwm_lights+0x20c>
 80059b6:	b1ac      	cbz	r4, 80059e4 <update_pwm_lights+0x238>
		configPWM(PWM_CH3,CH_GREEN,scale_value(get_reg(CH3_GREEN),settings.offset_green,settings.gain_green,GAMMA_GREEN));
 80059b8:	2008      	movs	r0, #8
 80059ba:	f7ff fa7d 	bl	8004eb8 <get_reg>
 80059be:	492c      	ldr	r1, [pc, #176]	; (8005a70 <update_pwm_lights+0x2c4>)
 80059c0:	2301      	movs	r3, #1
 80059c2:	f9b1 204e 	ldrsh.w	r2, [r1, #78]	; 0x4e
 80059c6:	f9b1 104c 	ldrsh.w	r1, [r1, #76]	; 0x4c
 80059ca:	f7ff feab 	bl	8005724 <scale_value>
 80059ce:	4602      	mov	r2, r0
 80059d0:	2101      	movs	r1, #1
 80059d2:	2002      	movs	r0, #2
 80059d4:	f000 fd18 	bl	8006408 <configPWM>
		reg_shadow[CH3_GREEN] = get_reg(CH3_GREEN);
 80059d8:	4b22      	ldr	r3, [pc, #136]	; (8005a64 <update_pwm_lights+0x2b8>)
 80059da:	681d      	ldr	r5, [r3, #0]
 80059dc:	2008      	movs	r0, #8
 80059de:	f7ff fa6b 	bl	8004eb8 <get_reg>
 80059e2:	7228      	strb	r0, [r5, #8]
	if ((reg_shadow[CH3_BLUE])!= get_reg(CH3_BLUE) || force)
 80059e4:	4b1f      	ldr	r3, [pc, #124]	; (8005a64 <update_pwm_lights+0x2b8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	7a5d      	ldrb	r5, [r3, #9]
 80059ea:	2009      	movs	r0, #9
 80059ec:	f7ff fa64 	bl	8004eb8 <get_reg>
 80059f0:	4285      	cmp	r5, r0
 80059f2:	d100      	bne.n	80059f6 <update_pwm_lights+0x24a>
 80059f4:	b1ac      	cbz	r4, 8005a22 <update_pwm_lights+0x276>
		configPWM(PWM_CH3,CH_BLUE,scale_value(get_reg(CH3_BLUE),settings.offset_blue,settings.gain_blue,GAMMA_BLUE));
 80059f6:	2009      	movs	r0, #9
 80059f8:	f7ff fa5e 	bl	8004eb8 <get_reg>
 80059fc:	491c      	ldr	r1, [pc, #112]	; (8005a70 <update_pwm_lights+0x2c4>)
 80059fe:	2302      	movs	r3, #2
 8005a00:	f9b1 2054 	ldrsh.w	r2, [r1, #84]	; 0x54
 8005a04:	f9b1 1052 	ldrsh.w	r1, [r1, #82]	; 0x52
 8005a08:	f7ff fe8c 	bl	8005724 <scale_value>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	2102      	movs	r1, #2
 8005a10:	4608      	mov	r0, r1
 8005a12:	f000 fcf9 	bl	8006408 <configPWM>
		reg_shadow[CH3_BLUE] = get_reg(CH3_BLUE);
 8005a16:	4b13      	ldr	r3, [pc, #76]	; (8005a64 <update_pwm_lights+0x2b8>)
 8005a18:	681d      	ldr	r5, [r3, #0]
 8005a1a:	2009      	movs	r0, #9
 8005a1c:	f7ff fa4c 	bl	8004eb8 <get_reg>
 8005a20:	7268      	strb	r0, [r5, #9]
	if ((reg_shadow[CH3_WHITE])!= get_reg(CH3_WHITE) || force)
 8005a22:	4b10      	ldr	r3, [pc, #64]	; (8005a64 <update_pwm_lights+0x2b8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	7a9d      	ldrb	r5, [r3, #10]
 8005a28:	200a      	movs	r0, #10
 8005a2a:	f7ff fa45 	bl	8004eb8 <get_reg>
 8005a2e:	4285      	cmp	r5, r0
 8005a30:	d102      	bne.n	8005a38 <update_pwm_lights+0x28c>
 8005a32:	2c00      	cmp	r4, #0
 8005a34:	f43f aebe 	beq.w	80057b4 <update_pwm_lights+0x8>
		configPWM(PWM_CH3,CH_WHITE,scale_value(get_reg(CH3_WHITE),0,100,GAMMA_STRIP));  //TBD, no settings?
 8005a38:	200a      	movs	r0, #10
 8005a3a:	f7ff fa3d 	bl	8004eb8 <get_reg>
 8005a3e:	2303      	movs	r3, #3
 8005a40:	2264      	movs	r2, #100	; 0x64
 8005a42:	2100      	movs	r1, #0
 8005a44:	f7ff fe6e 	bl	8005724 <scale_value>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	2103      	movs	r1, #3
 8005a4c:	2002      	movs	r0, #2
 8005a4e:	f000 fcdb 	bl	8006408 <configPWM>
		reg_shadow[CH3_WHITE] = get_reg(CH3_WHITE);
 8005a52:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <update_pwm_lights+0x2b8>)
 8005a54:	681c      	ldr	r4, [r3, #0]
 8005a56:	200a      	movs	r0, #10
 8005a58:	f7ff fa2e 	bl	8004eb8 <get_reg>
 8005a5c:	72a0      	strb	r0, [r4, #10]
 8005a5e:	e6a9      	b.n	80057b4 <update_pwm_lights+0x8>
 8005a60:	200002bd 	.word	0x200002bd
 8005a64:	200002c0 	.word	0x200002c0
 8005a68:	80808081 	.word	0x80808081
 8005a6c:	200002be 	.word	0x200002be
 8005a70:	20000780 	.word	0x20000780

08005a74 <init_update_lights>:
{
 8005a74:	b538      	push	{r3, r4, r5, lr}
	if (reg_shadow != NULL)
 8005a76:	4b0d      	ldr	r3, [pc, #52]	; (8005aac <init_update_lights+0x38>)
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	b108      	cbz	r0, 8005a80 <init_update_lights+0xc>
		free(reg_shadow);
 8005a7c:	f003 fa14 	bl	8008ea8 <free>
	reg_shadow = malloc(get_reg_length() * sizeof(uint8_t));
 8005a80:	f7ff f9d4 	bl	8004e2c <get_reg_length>
 8005a84:	f003 fa08 	bl	8008e98 <malloc>
 8005a88:	4605      	mov	r5, r0
 8005a8a:	4c08      	ldr	r4, [pc, #32]	; (8005aac <init_update_lights+0x38>)
 8005a8c:	6020      	str	r0, [r4, #0]
	memset(reg_shadow, 0,get_reg_length());
 8005a8e:	f7ff f9cd 	bl	8004e2c <get_reg_length>
 8005a92:	4602      	mov	r2, r0
 8005a94:	2100      	movs	r1, #0
 8005a96:	4628      	mov	r0, r5
 8005a98:	f003 fa19 	bl	8008ece <memset>
	reg_shadow[MAX_BRIGHTNESS] = 255;
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	22ff      	movs	r2, #255	; 0xff
 8005aa0:	701a      	strb	r2, [r3, #0]
	update_pwm_lights(1);
 8005aa2:	2001      	movs	r0, #1
 8005aa4:	f7ff fe82 	bl	80057ac <update_pwm_lights>
}
 8005aa8:	bd38      	pop	{r3, r4, r5, pc}
 8005aaa:	bf00      	nop
 8005aac:	200002c0 	.word	0x200002c0

08005ab0 <update_fx>:

void update_fx(void)
{
 8005ab0:	b510      	push	{r4, lr}
	uint8_t val = 0;

	//Deal with LED Strip Registers/Effects
	if (DMX_MODE2 == get_mode())
 8005ab2:	f7ff f9af 	bl	8004e14 <get_mode>
 8005ab6:	2801      	cmp	r0, #1
 8005ab8:	d000      	beq.n	8005abc <update_fx+0xc>
			val = start_fx(val);
			set_reg(FX_SELECT,val);
			reg_shadow[FX_SELECT] = val;
		}
	}
}
 8005aba:	bd10      	pop	{r4, pc}
		val = get_reg(FX_SELECT)/settings.fx_multiplier;
 8005abc:	200b      	movs	r0, #11
 8005abe:	f7ff f9fb 	bl	8004eb8 <get_reg>
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <update_fx+0x40>)
 8005ac4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ac8:	fbb0 f0f3 	udiv	r0, r0, r3
 8005acc:	b2c0      	uxtb	r0, r0
		if (reg_shadow[FX_SELECT]!= val)
 8005ace:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <update_fx+0x44>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	7adb      	ldrb	r3, [r3, #11]
 8005ad4:	4283      	cmp	r3, r0
 8005ad6:	d0f0      	beq.n	8005aba <update_fx+0xa>
			val = start_fx(val);
 8005ad8:	f7ff fbee 	bl	80052b8 <start_fx>
 8005adc:	4604      	mov	r4, r0
			set_reg(FX_SELECT,val);
 8005ade:	4601      	mov	r1, r0
 8005ae0:	200b      	movs	r0, #11
 8005ae2:	f7ff f9db 	bl	8004e9c <set_reg>
			reg_shadow[FX_SELECT] = val;
 8005ae6:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <update_fx+0x44>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	72dc      	strb	r4, [r3, #11]
}
 8005aec:	e7e5      	b.n	8005aba <update_fx+0xa>
 8005aee:	bf00      	nop
 8005af0:	20000780 	.word	0x20000780
 8005af4:	200002c0 	.word	0x200002c0

08005af8 <disableDMXlightUpdate>:


void disableDMXlightUpdate(uint8_t val)
{
	blockupdate = val;
 8005af8:	4b01      	ldr	r3, [pc, #4]	; (8005b00 <disableDMXlightUpdate+0x8>)
 8005afa:	7018      	strb	r0, [r3, #0]
}
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	200002bd 	.word	0x200002bd

08005b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b08:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b0a:	2400      	movs	r4, #0
 8005b0c:	9406      	str	r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b0e:	4b48      	ldr	r3, [pc, #288]	; (8005c30 <MX_GPIO_Init+0x12c>)
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	f042 0210 	orr.w	r2, r2, #16
 8005b16:	619a      	str	r2, [r3, #24]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	f002 0210 	and.w	r2, r2, #16
 8005b1e:	9200      	str	r2, [sp, #0]
 8005b20:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b22:	699a      	ldr	r2, [r3, #24]
 8005b24:	f042 0220 	orr.w	r2, r2, #32
 8005b28:	619a      	str	r2, [r3, #24]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	f002 0220 	and.w	r2, r2, #32
 8005b30:	9201      	str	r2, [sp, #4]
 8005b32:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	f042 0204 	orr.w	r2, r2, #4
 8005b3a:	619a      	str	r2, [r3, #24]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	f002 0204 	and.w	r2, r2, #4
 8005b42:	9202      	str	r2, [sp, #8]
 8005b44:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b46:	699a      	ldr	r2, [r3, #24]
 8005b48:	f042 0208 	orr.w	r2, r2, #8
 8005b4c:	619a      	str	r2, [r3, #24]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	9303      	str	r3, [sp, #12]
 8005b56:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 8005b58:	f04f 0880 	mov.w	r8, #128	; 0x80
 8005b5c:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b60:	2701      	movs	r7, #1
 8005b62:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b64:	2602      	movs	r6, #2
 8005b66:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8005b68:	4d32      	ldr	r5, [pc, #200]	; (8005c34 <MX_GPIO_Init+0x130>)
 8005b6a:	a904      	add	r1, sp, #16
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	f7fc f915 	bl	8001d9c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8005b72:	4622      	mov	r2, r4
 8005b74:	4641      	mov	r1, r8
 8005b76:	4628      	mov	r0, r5
 8005b78:	f7fc fa03 	bl	8001f82 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin MODE_0_Pin MODE_1_Pin */
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
 8005b7c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005b80:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b82:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b84:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b86:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8005c3c <MX_GPIO_Init+0x138>
 8005b8a:	a904      	add	r1, sp, #16
 8005b8c:	4640      	mov	r0, r8
 8005b8e:	f7fc f905 	bl	8001d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED_Pin;
 8005b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b96:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b98:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b9a:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b9c:	a904      	add	r1, sp, #16
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	f7fc f8fc 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CH1_R_Pin CH1_G_Pin CH1_B_Pin CH2_R_Pin 
                           CH2_G_Pin CH3_R_Pin CH3_G_Pin CH3_B_Pin */
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
 8005ba4:	f240 73ce 	movw	r3, #1998	; 0x7ce
 8005ba8:	9304      	str	r3, [sp, #16]
                          |CH2_G_Pin|CH3_R_Pin|CH3_G_Pin|CH3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005baa:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bac:	f04f 0803 	mov.w	r8, #3
 8005bb0:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bb4:	f8df a088 	ldr.w	sl, [pc, #136]	; 8005c40 <MX_GPIO_Init+0x13c>
 8005bb8:	a904      	add	r1, sp, #16
 8005bba:	4650      	mov	r0, sl
 8005bbc:	f7fc f8ee 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CH2_B_Pin CH2_W_Pin */
  GPIO_InitStruct.Pin = CH2_B_Pin|CH2_W_Pin;
 8005bc0:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bc4:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bc6:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bca:	a904      	add	r1, sp, #16
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f7fc f8e5 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_Pin ADDR_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|ADDR_0_Pin;
 8005bd2:	f248 0920 	movw	r9, #32800	; 0x8020
 8005bd6:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bda:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bdc:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bde:	a904      	add	r1, sp, #16
 8005be0:	4650      	mov	r0, sl
 8005be2:	f7fc f8db 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR_5_Pin ADDR_6_Pin ADDR_7_Pin ADDR_1_Pin 
                           ADDR_2_Pin ADDR_3_Pin ADDR_4_Pin */
  GPIO_InitStruct.Pin = ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_1_Pin 
 8005be6:	f247 3318 	movw	r3, #29464	; 0x7318
 8005bea:	9304      	str	r3, [sp, #16]
                          |ADDR_2_Pin|ADDR_3_Pin|ADDR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bec:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bee:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bf0:	a904      	add	r1, sp, #16
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f7fc f8d2 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : WS8212_CH2_Pin WS8212_CH1_Pin */
  GPIO_InitStruct.Pin = WS8212_CH2_Pin|WS8212_CH1_Pin;
 8005bf8:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bfc:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bfe:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c02:	a904      	add	r1, sp, #16
 8005c04:	4628      	mov	r0, r5
 8005c06:	f7fc f8c9 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DIR_Pin */
  GPIO_InitStruct.Pin = RS232_TX_Pin;
 8005c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c0e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c10:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c12:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c14:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8005c16:	a904      	add	r1, sp, #16
 8005c18:	4628      	mov	r0, r5
 8005c1a:	f7fc f8bf 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 8005c1e:	4a06      	ldr	r2, [pc, #24]	; (8005c38 <MX_GPIO_Init+0x134>)
 8005c20:	6853      	ldr	r3, [r2, #4]
 8005c22:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005c26:	433b      	orrs	r3, r7
 8005c28:	6053      	str	r3, [r2, #4]
}
 8005c2a:	b008      	add	sp, #32
 8005c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c30:	40021000 	.word	0x40021000
 8005c34:	40010c00 	.word	0x40010c00
 8005c38:	40010000 	.word	0x40010000
 8005c3c:	40011000 	.word	0x40011000
 8005c40:	40010800 	.word	0x40010800

08005c44 <MX_ADC1_Init>:
{
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8005c48:	2500      	movs	r5, #0
 8005c4a:	9501      	str	r5, [sp, #4]
 8005c4c:	9502      	str	r5, [sp, #8]
 8005c4e:	9503      	str	r5, [sp, #12]
  hadc1.Instance = ADC1;
 8005c50:	4c0b      	ldr	r4, [pc, #44]	; (8005c80 <MX_ADC1_Init+0x3c>)
 8005c52:	4b0c      	ldr	r3, [pc, #48]	; (8005c84 <MX_ADC1_Init+0x40>)
 8005c54:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005c56:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005c58:	7325      	strb	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005c5a:	7525      	strb	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005c5c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8005c60:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005c62:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 8005c64:	2601      	movs	r6, #1
 8005c66:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f7fb fcc9 	bl	8001600 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 8005c6e:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005c70:	9602      	str	r6, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005c72:	9503      	str	r5, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005c74:	a901      	add	r1, sp, #4
 8005c76:	4620      	mov	r0, r4
 8005c78:	f7fb fb44 	bl	8001304 <HAL_ADC_ConfigChannel>
}
 8005c7c:	b004      	add	sp, #16
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
 8005c80:	200008e0 	.word	0x200008e0
 8005c84:	40012400 	.word	0x40012400

08005c88 <MX_ADC2_Init>:
{
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8005c8c:	2500      	movs	r5, #0
 8005c8e:	9501      	str	r5, [sp, #4]
 8005c90:	9502      	str	r5, [sp, #8]
 8005c92:	9503      	str	r5, [sp, #12]
  hadc2.Instance = ADC2;
 8005c94:	4c0c      	ldr	r4, [pc, #48]	; (8005cc8 <MX_ADC2_Init+0x40>)
 8005c96:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <MX_ADC2_Init+0x44>)
 8005c98:	6023      	str	r3, [r4, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005c9a:	60a5      	str	r5, [r4, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005c9c:	7325      	strb	r5, [r4, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005c9e:	7525      	strb	r5, [r4, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005ca0:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8005ca4:	61e3      	str	r3, [r4, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005ca6:	6065      	str	r5, [r4, #4]
  hadc2.Init.NbrOfConversion = 1;
 8005ca8:	2601      	movs	r6, #1
 8005caa:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005cac:	4620      	mov	r0, r4
 8005cae:	f7fb fca7 	bl	8001600 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 8005cb2:	2304      	movs	r3, #4
 8005cb4:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005cb6:	9602      	str	r6, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005cb8:	9503      	str	r5, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005cba:	eb0d 0103 	add.w	r1, sp, r3
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f7fb fb20 	bl	8001304 <HAL_ADC_ConfigChannel>
}
 8005cc4:	b004      	add	sp, #16
 8005cc6:	bd70      	pop	{r4, r5, r6, pc}
 8005cc8:	20000874 	.word	0x20000874
 8005ccc:	40012800 	.word	0x40012800

08005cd0 <MX_DMA_Init>:
{
 8005cd0:	b500      	push	{lr}
 8005cd2:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005cd4:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <MX_DMA_Init+0x40>)
 8005cd6:	695a      	ldr	r2, [r3, #20]
 8005cd8:	f042 0201 	orr.w	r2, r2, #1
 8005cdc:	615a      	str	r2, [r3, #20]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005ce8:	2200      	movs	r2, #0
 8005cea:	4611      	mov	r1, r2
 8005cec:	200d      	movs	r0, #13
 8005cee:	f7fb fd23 	bl	8001738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005cf2:	200d      	movs	r0, #13
 8005cf4:	f7fb fd54 	bl	80017a0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	200e      	movs	r0, #14
 8005cfe:	f7fb fd1b 	bl	8001738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005d02:	200e      	movs	r0, #14
 8005d04:	f7fb fd4c 	bl	80017a0 <HAL_NVIC_EnableIRQ>
}
 8005d08:	b003      	add	sp, #12
 8005d0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d0e:	bf00      	nop
 8005d10:	40021000 	.word	0x40021000

08005d14 <MX_USART1_UART_Init>:
{
 8005d14:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8005d16:	480d      	ldr	r0, [pc, #52]	; (8005d4c <MX_USART1_UART_Init+0x38>)
 8005d18:	4b0d      	ldr	r3, [pc, #52]	; (8005d50 <MX_USART1_UART_Init+0x3c>)
 8005d1a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 250000;
 8005d1c:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <MX_USART1_UART_Init+0x40>)
 8005d1e:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d20:	2400      	movs	r4, #0
 8005d22:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8005d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d28:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d2a:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d2c:	230c      	movs	r3, #12
 8005d2e:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d30:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d32:	61c4      	str	r4, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8005d34:	f7fd fdf6 	bl	8003924 <HAL_HalfDuplex_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005d38:	4622      	mov	r2, r4
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	2025      	movs	r0, #37	; 0x25
 8005d3e:	f7fb fcfb 	bl	8001738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005d42:	2025      	movs	r0, #37	; 0x25
 8005d44:	f7fb fd2c 	bl	80017a0 <HAL_NVIC_EnableIRQ>
}
 8005d48:	bd10      	pop	{r4, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000910 	.word	0x20000910
 8005d50:	40013800 	.word	0x40013800
 8005d54:	0003d090 	.word	0x0003d090

08005d58 <MX_USART3_UART_Init>:
{
 8005d58:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8005d5a:	480a      	ldr	r0, [pc, #40]	; (8005d84 <MX_USART3_UART_Init+0x2c>)
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <MX_USART3_UART_Init+0x30>)
 8005d5e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8005d60:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005d64:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005d66:	2300      	movs	r3, #0
 8005d68:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005d6a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005d6c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005d6e:	220c      	movs	r2, #12
 8005d70:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d72:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d74:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005d76:	f7fd fda6 	bl	80038c6 <HAL_UART_Init>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d7a:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <MX_USART3_UART_Init+0x34>)
 8005d7c:	2280      	movs	r2, #128	; 0x80
 8005d7e:	605a      	str	r2, [r3, #4]
}
 8005d80:	bd08      	pop	{r3, pc}
 8005d82:	bf00      	nop
 8005d84:	20000834 	.word	0x20000834
 8005d88:	40004800 	.word	0x40004800
 8005d8c:	e000e100 	.word	0xe000e100

08005d90 <MX_SPI1_Init>:
{
 8005d90:	b500      	push	{lr}
 8005d92:	b083      	sub	sp, #12
  __HAL_RCC_SPI1_CLK_ENABLE();
 8005d94:	4b11      	ldr	r3, [pc, #68]	; (8005ddc <MX_SPI1_Init+0x4c>)
 8005d96:	699a      	ldr	r2, [r3, #24]
 8005d98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d9c:	619a      	str	r2, [r3, #24]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005da4:	9301      	str	r3, [sp, #4]
 8005da6:	9b01      	ldr	r3, [sp, #4]
  hspi1.Instance = SPI1;
 8005da8:	480d      	ldr	r0, [pc, #52]	; (8005de0 <MX_SPI1_Init+0x50>)
 8005daa:	4b0e      	ldr	r3, [pc, #56]	; (8005de4 <MX_SPI1_Init+0x54>)
 8005dac:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005dae:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005db2:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005db4:	2300      	movs	r3, #0
 8005db6:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005db8:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dba:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005dbc:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc2:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005dc8:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005dca:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dcc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005dce:	230a      	movs	r3, #10
 8005dd0:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005dd2:	f7fd f85c 	bl	8002e8e <HAL_SPI_Init>
}
 8005dd6:	b003      	add	sp, #12
 8005dd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ddc:	40021000 	.word	0x40021000
 8005de0:	20000954 	.word	0x20000954
 8005de4:	40013000 	.word	0x40013000

08005de8 <MX_SPI2_Init>:
{
 8005de8:	b500      	push	{lr}
 8005dea:	b083      	sub	sp, #12
  __HAL_RCC_SPI2_CLK_ENABLE();
 8005dec:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <MX_SPI2_Init+0x4c>)
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005df4:	61da      	str	r2, [r3, #28]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	9b01      	ldr	r3, [sp, #4]
  hspi2.Instance = SPI2;
 8005e00:	480d      	ldr	r0, [pc, #52]	; (8005e38 <MX_SPI2_Init+0x50>)
 8005e02:	4b0e      	ldr	r3, [pc, #56]	; (8005e3c <MX_SPI2_Init+0x54>)
 8005e04:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005e06:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005e0a:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e10:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e12:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e14:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e1a:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e20:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005e22:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e24:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005e26:	230a      	movs	r3, #10
 8005e28:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005e2a:	f7fd f830 	bl	8002e8e <HAL_SPI_Init>
}
 8005e2e:	b003      	add	sp, #12
 8005e30:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e34:	40021000 	.word	0x40021000
 8005e38:	200007dc 	.word	0x200007dc
 8005e3c:	40003800 	.word	0x40003800

08005e40 <SystemClock_Config>:
{
 8005e40:	b530      	push	{r4, r5, lr}
 8005e42:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e44:	2400      	movs	r4, #0
 8005e46:	940c      	str	r4, [sp, #48]	; 0x30
 8005e48:	940d      	str	r4, [sp, #52]	; 0x34
 8005e4a:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e4c:	9405      	str	r4, [sp, #20]
 8005e4e:	9406      	str	r4, [sp, #24]
 8005e50:	9407      	str	r4, [sp, #28]
 8005e52:	9408      	str	r4, [sp, #32]
 8005e54:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e56:	9401      	str	r4, [sp, #4]
 8005e58:	9402      	str	r4, [sp, #8]
 8005e5a:	9403      	str	r4, [sp, #12]
 8005e5c:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8005e5e:	2309      	movs	r3, #9
 8005e60:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e66:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005e68:	2201      	movs	r2, #1
 8005e6a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005e6c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e6e:	2502      	movs	r5, #2
 8005e70:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e72:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005e74:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005e78:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e7a:	a80a      	add	r0, sp, #40	; 0x28
 8005e7c:	f7fc fc06 	bl	800268c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e80:	230f      	movs	r3, #15
 8005e82:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e84:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e86:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e8c:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005e8e:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005e90:	4629      	mov	r1, r5
 8005e92:	a805      	add	r0, sp, #20
 8005e94:	f7fc fe3a 	bl	8002b0c <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8005e98:	2312      	movs	r3, #18
 8005e9a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8005e9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ea0:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005ea2:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ea4:	a801      	add	r0, sp, #4
 8005ea6:	f7fc ff0b 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
}
 8005eaa:	b015      	add	sp, #84	; 0x54
 8005eac:	bd30      	pop	{r4, r5, pc}
	...

08005eb0 <main>:
{
 8005eb0:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 8005eb2:	f7fb f979 	bl	80011a8 <HAL_Init>
  SystemClock_Config();
 8005eb6:	f7ff ffc3 	bl	8005e40 <SystemClock_Config>
  MX_GPIO_Init();
 8005eba:	f7ff fe23 	bl	8005b04 <MX_GPIO_Init>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ec4:	48af      	ldr	r0, [pc, #700]	; (8006184 <main+0x2d4>)
 8005ec6:	f7fc f85c 	bl	8001f82 <HAL_GPIO_WritePin>
  MX_ADC1_Init();
 8005eca:	f7ff febb 	bl	8005c44 <MX_ADC1_Init>
  MX_ADC2_Init();
 8005ece:	f7ff fedb 	bl	8005c88 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8005ed2:	f7ff ff1f 	bl	8005d14 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8005ed6:	f7ff ff3f 	bl	8005d58 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8005eda:	f7ff ff59 	bl	8005d90 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005ede:	f7ff ff83 	bl	8005de8 <MX_SPI2_Init>
  MX_DMA_Init();
 8005ee2:	f7ff fef5 	bl	8005cd0 <MX_DMA_Init>
  for (uint32_t w = 0;w<5000;w++)
 8005ee6:	2400      	movs	r4, #0
 8005ee8:	e003      	b.n	8005ef2 <main+0x42>
      print_no_newline(" ");
 8005eea:	48a7      	ldr	r0, [pc, #668]	; (8006188 <main+0x2d8>)
 8005eec:	f001 f81c 	bl	8006f28 <print_no_newline>
  for (uint32_t w = 0;w<5000;w++)
 8005ef0:	3401      	adds	r4, #1
 8005ef2:	f241 3387 	movw	r3, #4999	; 0x1387
 8005ef6:	429c      	cmp	r4, r3
 8005ef8:	d9f7      	bls.n	8005eea <main+0x3a>
  print("");
 8005efa:	4ca4      	ldr	r4, [pc, #656]	; (800618c <main+0x2dc>)
 8005efc:	4620      	mov	r0, r4
 8005efe:	f000 ff7f 	bl	8006e00 <print>
  print("-------------");
 8005f02:	4da3      	ldr	r5, [pc, #652]	; (8006190 <main+0x2e0>)
 8005f04:	4628      	mov	r0, r5
 8005f06:	f000 ff7b 	bl	8006e00 <print>
  print("%s V%d.%d",PROG_NAME,VERSION_MAJOR,VERSION_MINOR);
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	49a1      	ldr	r1, [pc, #644]	; (8006194 <main+0x2e4>)
 8005f10:	48a1      	ldr	r0, [pc, #644]	; (8006198 <main+0x2e8>)
 8005f12:	f000 ff75 	bl	8006e00 <print>
  print("-------------");
 8005f16:	4628      	mov	r0, r5
 8005f18:	f000 ff72 	bl	8006e00 <print>
  print("");
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f000 ff6f 	bl	8006e00 <print>
 if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == SET)
 8005f22:	4b9e      	ldr	r3, [pc, #632]	; (800619c <main+0x2ec>)
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 dmx512_init(get_mode_from_pins(),get_addr_from_pins()*2);  //Address x2 so we can spread out the 8 Jumpers over 512 Addresses
 8005f26:	f7ff fb95 	bl	8005654 <get_mode_from_pins>
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	f7ff fba8 	bl	8005680 <get_addr_from_pins>
 8005f30:	0041      	lsls	r1, r0, #1
 8005f32:	4620      	mov	r0, r4
 8005f34:	f7fe ff96 	bl	8004e64 <dmx512_init>
 print("DMX512 Config complete");
 8005f38:	4899      	ldr	r0, [pc, #612]	; (80061a0 <main+0x2f0>)
 8005f3a:	f000 ff61 	bl	8006e00 <print>
 print("USB Hard Disabled");
 8005f3e:	4899      	ldr	r0, [pc, #612]	; (80061a4 <main+0x2f4>)
 8005f40:	f000 ff5e 	bl	8006e00 <print>
 if(ring_buffer_init(&rx_buff_shell, RX_BUFF_SIZE) != RB_OK)
 8005f44:	2180      	movs	r1, #128	; 0x80
 8005f46:	4898      	ldr	r0, [pc, #608]	; (80061a8 <main+0x2f8>)
 8005f48:	f000 fa8c 	bl	8006464 <ring_buffer_init>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	f000 808b 	beq.w	8006068 <main+0x1b8>
	 print("Shell Ring Buffer Init FAILED");
 8005f52:	4896      	ldr	r0, [pc, #600]	; (80061ac <main+0x2fc>)
 8005f54:	f000 ff54 	bl	8006e00 <print>
 if(ring_buffer_init(&rx_buff_dmx, RX_BUFF_SIZE) != RB_OK)
 8005f58:	2180      	movs	r1, #128	; 0x80
 8005f5a:	4895      	ldr	r0, [pc, #596]	; (80061b0 <main+0x300>)
 8005f5c:	f000 fa82 	bl	8006464 <ring_buffer_init>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	f000 8085 	beq.w	8006070 <main+0x1c0>
	 print("Serial DMX Ring Buffer Init FAILED");
 8005f66:	4893      	ldr	r0, [pc, #588]	; (80061b4 <main+0x304>)
 8005f68:	f000 ff4a 	bl	8006e00 <print>
 dmx512_rec_init();
 8005f6c:	f7ff f8c2 	bl	80050f4 <dmx512_rec_init>
 print("DMX512 Init complete");
 8005f70:	4891      	ldr	r0, [pc, #580]	; (80061b8 <main+0x308>)
 8005f72:	f000 ff45 	bl	8006e00 <print>
  init_timers();
 8005f76:	f000 fa0b 	bl	8006390 <init_timers>
  print("Timer Init complete");
 8005f7a:	4890      	ldr	r0, [pc, #576]	; (80061bc <main+0x30c>)
 8005f7c:	f000 ff40 	bl	8006e00 <print>
  init_settings();
 8005f80:	f000 fbd4 	bl	800672c <init_settings>
  print("Default Settings Initialized");
 8005f84:	488e      	ldr	r0, [pc, #568]	; (80061c0 <main+0x310>)
 8005f86:	f000 ff3b 	bl	8006e00 <print>
  print("Loading Settings...");
 8005f8a:	488e      	ldr	r0, [pc, #568]	; (80061c4 <main+0x314>)
 8005f8c:	f000 ff38 	bl	8006e00 <print>
  if (0 == check_button())
 8005f90:	f7ff fbbc 	bl	800570c <check_button>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d16f      	bne.n	8006078 <main+0x1c8>
	  if (false == load_settings())
 8005f98:	f000 fc80 	bl	800689c <load_settings>
 8005f9c:	b940      	cbnz	r0, 8005fb0 <main+0x100>
		  init_settings();
 8005f9e:	f000 fbc5 	bl	800672c <init_settings>
		  recalcGamma();
 8005fa2:	f7ff fab3 	bl	800550c <recalcGamma>
		  save_settings();
 8005fa6:	f000 fca5 	bl	80068f4 <save_settings>
		  print("Defaults created");
 8005faa:	4887      	ldr	r0, [pc, #540]	; (80061c8 <main+0x318>)
 8005fac:	f000 ff28 	bl	8006e00 <print>
	  UART_mode_SERIAL = settings.UART_Mode_UART;
 8005fb0:	4b86      	ldr	r3, [pc, #536]	; (80061cc <main+0x31c>)
 8005fb2:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8005fb6:	4a86      	ldr	r2, [pc, #536]	; (80061d0 <main+0x320>)
 8005fb8:	7011      	strb	r1, [r2, #0]
	  UART_mode_USB = settings.UART_Mode_USB;
 8005fba:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8005fbe:	4b85      	ldr	r3, [pc, #532]	; (80061d4 <main+0x324>)
 8005fc0:	701a      	strb	r2, [r3, #0]
	  print("Setting loaded");
 8005fc2:	4885      	ldr	r0, [pc, #532]	; (80061d8 <main+0x328>)
 8005fc4:	f000 ff1c 	bl	8006e00 <print>
  apply_settings();
 8005fc8:	f000 fbea 	bl	80067a0 <apply_settings>
  print("Settings complete");
 8005fcc:	4883      	ldr	r0, [pc, #524]	; (80061dc <main+0x32c>)
 8005fce:	f000 ff17 	bl	8006e00 <print>
  if (DMX_MODE2 == get_mode())
 8005fd2:	f7fe ff1f 	bl	8004e14 <get_mode>
 8005fd6:	2801      	cmp	r0, #1
 8005fd8:	d15e      	bne.n	8006098 <main+0x1e8>
	  print("FX Installation Start");
 8005fda:	4881      	ldr	r0, [pc, #516]	; (80061e0 <main+0x330>)
 8005fdc:	f000 ff10 	bl	8006e00 <print>
	  init_fx_list();
 8005fe0:	f7ff f90e 	bl	8005200 <init_fx_list>
	  install_fx();
 8005fe4:	f7ff f964 	bl	80052b0 <install_fx>
	  print("FX Installation Finished");
 8005fe8:	487e      	ldr	r0, [pc, #504]	; (80061e4 <main+0x334>)
 8005fea:	f000 ff09 	bl	8006e00 <print>
     if (WS2812B_init(CH1,settings.strip1_length))
 8005fee:	4b77      	ldr	r3, [pc, #476]	; (80061cc <main+0x31c>)
 8005ff0:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	f002 fdde 	bl	8008bb4 <WS2812B_init>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d045      	beq.n	8006088 <main+0x1d8>
	   print("WS2812B CH1 Init complete");
 8005ffc:	487a      	ldr	r0, [pc, #488]	; (80061e8 <main+0x338>)
 8005ffe:	f000 feff 	bl	8006e00 <print>
	   WS2812B_clear(CH1);
 8006002:	2000      	movs	r0, #0
 8006004:	f002 fdb6 	bl	8008b74 <WS2812B_clear>
	   WS2812B_show(CH1);
 8006008:	2000      	movs	r0, #0
 800600a:	f002 fd0f 	bl	8008a2c <WS2812B_show>
     if (WS2812B_init(CH2,settings.strip1_length))
 800600e:	4b6f      	ldr	r3, [pc, #444]	; (80061cc <main+0x31c>)
 8006010:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 8006012:	2001      	movs	r0, #1
 8006014:	f002 fdce 	bl	8008bb4 <WS2812B_init>
 8006018:	2800      	cmp	r0, #0
 800601a:	d039      	beq.n	8006090 <main+0x1e0>
	   print("WS2812B CH2 Init complete");
 800601c:	4873      	ldr	r0, [pc, #460]	; (80061ec <main+0x33c>)
 800601e:	f000 feef 	bl	8006e00 <print>
	   WS2812B_clear(CH2);
 8006022:	2001      	movs	r0, #1
 8006024:	f002 fda6 	bl	8008b74 <WS2812B_clear>
	   WS2812B_show(CH2);
 8006028:	2001      	movs	r0, #1
 800602a:	f002 fcff 	bl	8008a2c <WS2812B_show>
     print("DMX Mode 2 Active");
 800602e:	4870      	ldr	r0, [pc, #448]	; (80061f0 <main+0x340>)
 8006030:	f000 fee6 	bl	8006e00 <print>
  init_update_lights();
 8006034:	f7ff fd1e 	bl	8005a74 <init_update_lights>
  print("PWM Update Init complete");
 8006038:	486e      	ldr	r0, [pc, #440]	; (80061f4 <main+0x344>)
 800603a:	f000 fee1 	bl	8006e00 <print>
  init_trigger();
 800603e:	f001 fd1b 	bl	8007a78 <init_trigger>
  print("Trigger Init complete");
 8006042:	486d      	ldr	r0, [pc, #436]	; (80061f8 <main+0x348>)
 8006044:	f000 fedc 	bl	8006e00 <print>
  print("Shell Active");
 8006048:	486c      	ldr	r0, [pc, #432]	; (80061fc <main+0x34c>)
 800604a:	f000 fed9 	bl	8006e00 <print>
  print_no_newline("DBG>");
 800604e:	486c      	ldr	r0, [pc, #432]	; (8006200 <main+0x350>)
 8006050:	f000 ff6a 	bl	8006f28 <print_no_newline>
  last_frame_ms = HAL_GetTick();
 8006054:	f7fb f8c6 	bl	80011e4 <HAL_GetTick>
 8006058:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800605a:	2201      	movs	r2, #1
 800605c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006060:	4848      	ldr	r0, [pc, #288]	; (8006184 <main+0x2d4>)
 8006062:	f7fb ff8e 	bl	8001f82 <HAL_GPIO_WritePin>
 8006066:	e04c      	b.n	8006102 <main+0x252>
	 print("Shell Ring Buffer Init Complete");
 8006068:	4866      	ldr	r0, [pc, #408]	; (8006204 <main+0x354>)
 800606a:	f000 fec9 	bl	8006e00 <print>
 800606e:	e773      	b.n	8005f58 <main+0xa8>
	 print("Serial DMX Ring Buffer Init Complete");
 8006070:	4865      	ldr	r0, [pc, #404]	; (8006208 <main+0x358>)
 8006072:	f000 fec5 	bl	8006e00 <print>
 8006076:	e779      	b.n	8005f6c <main+0xbc>
	  recalcGamma();
 8006078:	f7ff fa48 	bl	800550c <recalcGamma>
	  save_settings();
 800607c:	f000 fc3a 	bl	80068f4 <save_settings>
	  print("Defaults restored");
 8006080:	4862      	ldr	r0, [pc, #392]	; (800620c <main+0x35c>)
 8006082:	f000 febd 	bl	8006e00 <print>
 8006086:	e79f      	b.n	8005fc8 <main+0x118>
	   print("WS2812B CH1 Init FAILED");
 8006088:	4861      	ldr	r0, [pc, #388]	; (8006210 <main+0x360>)
 800608a:	f000 feb9 	bl	8006e00 <print>
 800608e:	e7be      	b.n	800600e <main+0x15e>
	   print("WS2812B CH2 Init FAILED");
 8006090:	4860      	ldr	r0, [pc, #384]	; (8006214 <main+0x364>)
 8006092:	f000 feb5 	bl	8006e00 <print>
 8006096:	e7ca      	b.n	800602e <main+0x17e>
	  print("DMX Mode 1 Active");
 8006098:	485f      	ldr	r0, [pc, #380]	; (8006218 <main+0x368>)
 800609a:	f000 feb1 	bl	8006e00 <print>
 800609e:	e7c9      	b.n	8006034 <main+0x184>
			shell_process();
 80060a0:	f000 ff5c 	bl	8006f5c <shell_process>
			dmx_serial_process();
 80060a4:	f000 fa80 	bl	80065a8 <dmx_serial_process>
			current_frame_ms = HAL_GetTick();
 80060a8:	f7fb f89c 	bl	80011e4 <HAL_GetTick>
 80060ac:	4605      	mov	r5, r0
		while ((current_frame_ms - last_frame_ms) < settings.frame_ms_target)
 80060ae:	1b2b      	subs	r3, r5, r4
 80060b0:	4a46      	ldr	r2, [pc, #280]	; (80061cc <main+0x31c>)
 80060b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d3f3      	bcc.n	80060a0 <main+0x1f0>
 80060b8:	e02e      	b.n	8006118 <main+0x268>
    apply_settings();
 80060ba:	f000 fb71 	bl	80067a0 <apply_settings>
 80060be:	e035      	b.n	800612c <main+0x27c>
			if (DMX_MODE2 == get_mode())
 80060c0:	f7fe fea8 	bl	8004e14 <get_mode>
 80060c4:	2801      	cmp	r0, #1
 80060c6:	d11b      	bne.n	8006100 <main+0x250>
				WS2812B_test(CH1);
 80060c8:	2000      	movs	r0, #0
 80060ca:	f002 fe6d 	bl	8008da8 <WS2812B_test>
				WS2812B_show(CH1);
 80060ce:	2000      	movs	r0, #0
 80060d0:	f002 fcac 	bl	8008a2c <WS2812B_show>
				WS2812B_test(CH2);
 80060d4:	2001      	movs	r0, #1
 80060d6:	f002 fe67 	bl	8008da8 <WS2812B_test>
				WS2812B_show(CH2);
 80060da:	2001      	movs	r0, #1
 80060dc:	f002 fca6 	bl	8008a2c <WS2812B_show>
 80060e0:	e00e      	b.n	8006100 <main+0x250>
		if (1 == check_button())
 80060e2:	f7ff fb13 	bl	800570c <check_button>
 80060e6:	2801      	cmp	r0, #1
 80060e8:	d03e      	beq.n	8006168 <main+0x2b8>
		process_trigger();
 80060ea:	f001 fce5 	bl	8007ab8 <process_trigger>
		if (DMX_MODE2 == get_mode())
 80060ee:	f7fe fe91 	bl	8004e14 <get_mode>
 80060f2:	2801      	cmp	r0, #1
 80060f4:	d03c      	beq.n	8006170 <main+0x2c0>
		update_pwm_lights(0);
 80060f6:	2000      	movs	r0, #0
 80060f8:	f7ff fb58 	bl	80057ac <update_pwm_lights>
		update_fx();
 80060fc:	f7ff fcd8 	bl	8005ab0 <update_fx>
  for (uint32_t w = 0;w<5000;w++)
 8006100:	462c      	mov	r4, r5
	shell_process();
 8006102:	f000 ff2b 	bl	8006f5c <shell_process>
	dmx_serial_process();
 8006106:	f000 fa4f 	bl	80065a8 <dmx_serial_process>
	current_frame_ms = HAL_GetTick();
 800610a:	f7fb f86b 	bl	80011e4 <HAL_GetTick>
 800610e:	4605      	mov	r5, r0
	if (settings.frame_ms_target > 0)
 8006110:	4b2e      	ldr	r3, [pc, #184]	; (80061cc <main+0x31c>)
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1ca      	bne.n	80060ae <main+0x1fe>
	frame_ms = current_frame_ms - last_frame_ms;
 8006118:	1b2c      	subs	r4, r5, r4
 800611a:	4b40      	ldr	r3, [pc, #256]	; (800621c <main+0x36c>)
 800611c:	601c      	str	r4, [r3, #0]
  if ((COMM_TIMEOUT != 0) && (frame_ms > (last_packet_ms + COMM_TIMEOUT))) 
 800611e:	4b40      	ldr	r3, [pc, #256]	; (8006220 <main+0x370>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006126:	3308      	adds	r3, #8
 8006128:	429c      	cmp	r4, r3
 800612a:	d8c6      	bhi.n	80060ba <main+0x20a>
	if (testmode)
 800612c:	4b3d      	ldr	r3, [pc, #244]	; (8006224 <main+0x374>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0d6      	beq.n	80060e2 <main+0x232>
		testmode = process_testmode();
 8006134:	f001 fbea 	bl	800790c <process_testmode>
 8006138:	4b3a      	ldr	r3, [pc, #232]	; (8006224 <main+0x374>)
 800613a:	7018      	strb	r0, [r3, #0]
		if (testmode == 0)
 800613c:	2800      	cmp	r0, #0
 800613e:	d1bf      	bne.n	80060c0 <main+0x210>
			update_pwm_lights(1);
 8006140:	2001      	movs	r0, #1
 8006142:	f7ff fb33 	bl	80057ac <update_pwm_lights>
			if (DMX_MODE2 == get_mode())
 8006146:	f7fe fe65 	bl	8004e14 <get_mode>
 800614a:	2801      	cmp	r0, #1
 800614c:	d1d8      	bne.n	8006100 <main+0x250>
				WS2812B_clear(CH1);
 800614e:	2000      	movs	r0, #0
 8006150:	f002 fd10 	bl	8008b74 <WS2812B_clear>
				WS2812B_show(CH1);
 8006154:	2000      	movs	r0, #0
 8006156:	f002 fc69 	bl	8008a2c <WS2812B_show>
				WS2812B_clear(CH2);
 800615a:	2001      	movs	r0, #1
 800615c:	f002 fd0a 	bl	8008b74 <WS2812B_clear>
				WS2812B_show(CH2);
 8006160:	2001      	movs	r0, #1
 8006162:	f002 fc63 	bl	8008a2c <WS2812B_show>
 8006166:	e7cb      	b.n	8006100 <main+0x250>
			testmode = 1;
 8006168:	4b2e      	ldr	r3, [pc, #184]	; (8006224 <main+0x374>)
 800616a:	2201      	movs	r2, #1
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	e7bc      	b.n	80060ea <main+0x23a>
			run_fx();
 8006170:	f7ff f936 	bl	80053e0 <run_fx>
			WS2812B_show(CH1);
 8006174:	2000      	movs	r0, #0
 8006176:	f002 fc59 	bl	8008a2c <WS2812B_show>
			WS2812B_show(CH2);
 800617a:	2001      	movs	r0, #1
 800617c:	f002 fc56 	bl	8008a2c <WS2812B_show>
 8006180:	e7b9      	b.n	80060f6 <main+0x246>
 8006182:	bf00      	nop
 8006184:	40011000 	.word	0x40011000
 8006188:	0800bb54 	.word	0x0800bb54
 800618c:	0800c760 	.word	0x0800c760
 8006190:	0800bb58 	.word	0x0800bb58
 8006194:	0800bb68 	.word	0x0800bb68
 8006198:	0800bb74 	.word	0x0800bb74
 800619c:	40021000 	.word	0x40021000
 80061a0:	0800bb80 	.word	0x0800bb80
 80061a4:	0800bb98 	.word	0x0800bb98
 80061a8:	20000668 	.word	0x20000668
 80061ac:	0800bbac 	.word	0x0800bbac
 80061b0:	20000650 	.word	0x20000650
 80061b4:	0800bbec 	.word	0x0800bbec
 80061b8:	0800bc38 	.word	0x0800bc38
 80061bc:	0800bc50 	.word	0x0800bc50
 80061c0:	0800bc64 	.word	0x0800bc64
 80061c4:	0800bc84 	.word	0x0800bc84
 80061c8:	0800bc98 	.word	0x0800bc98
 80061cc:	20000780 	.word	0x20000780
 80061d0:	200002c4 	.word	0x200002c4
 80061d4:	200002c5 	.word	0x200002c5
 80061d8:	0800bcac 	.word	0x0800bcac
 80061dc:	0800bcd0 	.word	0x0800bcd0
 80061e0:	0800bce4 	.word	0x0800bce4
 80061e4:	0800bcfc 	.word	0x0800bcfc
 80061e8:	0800bd18 	.word	0x0800bd18
 80061ec:	0800bd4c 	.word	0x0800bd4c
 80061f0:	0800bd80 	.word	0x0800bd80
 80061f4:	0800bda8 	.word	0x0800bda8
 80061f8:	0800bdc4 	.word	0x0800bdc4
 80061fc:	0800bddc 	.word	0x0800bddc
 8006200:	0800bdec 	.word	0x0800bdec
 8006204:	0800bbcc 	.word	0x0800bbcc
 8006208:	0800bc10 	.word	0x0800bc10
 800620c:	0800bcbc 	.word	0x0800bcbc
 8006210:	0800bd34 	.word	0x0800bd34
 8006214:	0800bd68 	.word	0x0800bd68
 8006218:	0800bd94 	.word	0x0800bd94
 800621c:	20000950 	.word	0x20000950
 8006220:	200002c8 	.word	0x200002c8
 8006224:	200002cc 	.word	0x200002cc

08006228 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006228:	4770      	bx	lr
	...

0800622c <PWM_Timer_Init>:
	PWM_Timer_Init(PWM_CH2,pre,pwm,div,0);
	PWM_Timer_Init(PWM_CH3,pre,pwm,div,0);
}

void PWM_Timer_Init(pwmtimerid_t ID,uint32_t prescaler,uint32_t pwm_max, uint32_t clockdiv, uint32_t reinit)
{
 800622c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006230:	b08e      	sub	sp, #56	; 0x38
 8006232:	4606      	mov	r6, r0

	  TIM_MasterConfigTypeDef sMasterConfig;
	  TIM_OC_InitTypeDef sConfigOC;
	  TIM_ClockConfigTypeDef sClockSourceConfig;

	  memset(&sConfigOC, 0, sizeof(sConfigOC));
 8006234:	2000      	movs	r0, #0
 8006236:	9005      	str	r0, [sp, #20]
 8006238:	9006      	str	r0, [sp, #24]
 800623a:	9007      	str	r0, [sp, #28]
 800623c:	9008      	str	r0, [sp, #32]
 800623e:	9009      	str	r0, [sp, #36]	; 0x24
 8006240:	900a      	str	r0, [sp, #40]	; 0x28
 8006242:	900b      	str	r0, [sp, #44]	; 0x2c
	  memset(&sMasterConfig, 0, sizeof(sMasterConfig));
 8006244:	900c      	str	r0, [sp, #48]	; 0x30
 8006246:	900d      	str	r0, [sp, #52]	; 0x34
	  memset(&sClockSourceConfig, 0, sizeof(sClockSourceConfig));
 8006248:	9001      	str	r0, [sp, #4]
 800624a:	9002      	str	r0, [sp, #8]
 800624c:	9003      	str	r0, [sp, #12]
 800624e:	9004      	str	r0, [sp, #16]

	  maxPWM = pwm_max;
 8006250:	4845      	ldr	r0, [pc, #276]	; (8006368 <PWM_Timer_Init+0x13c>)
 8006252:	6002      	str	r2, [r0, #0]

	  switch(ID)
 8006254:	4637      	mov	r7, r6
 8006256:	2e01      	cmp	r6, #1
 8006258:	d037      	beq.n	80062ca <PWM_Timer_Init+0x9e>
 800625a:	2e00      	cmp	r6, #0
 800625c:	d02f      	beq.n	80062be <PWM_Timer_Init+0x92>
 800625e:	2e02      	cmp	r6, #2
 8006260:	d038      	beq.n	80062d4 <PWM_Timer_Init+0xa8>
	  	  case PWM_CH3:
	  		timerinfo[ID].Instance = TIM3;
		  break;
	  }

	  timerinfo[(uint8_t)ID].Init.Prescaler = prescaler;
 8006262:	4d42      	ldr	r5, [pc, #264]	; (800636c <PWM_Timer_Init+0x140>)
 8006264:	eb05 1586 	add.w	r5, r5, r6, lsl #6
 8006268:	6069      	str	r1, [r5, #4]
	  timerinfo[(uint8_t)ID].Init.CounterMode = TIM_COUNTERMODE_UP;
 800626a:	2100      	movs	r1, #0
 800626c:	60a9      	str	r1, [r5, #8]
	  timerinfo[(uint8_t)ID].Init.Period = maxPWM-1;
 800626e:	3a01      	subs	r2, #1
 8006270:	60ea      	str	r2, [r5, #12]
	  timerinfo[(uint8_t)ID].Init.ClockDivision = clockdiv;
 8006272:	612b      	str	r3, [r5, #16]
	  timerinfo[(uint8_t)ID].Init.RepetitionCounter = 0;
 8006274:	6169      	str	r1, [r5, #20]
	  if (HAL_TIM_Base_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)/* to use the Timer to generate a simple time base for TIM1 */
 8006276:	46a8      	mov	r8, r5
 8006278:	4628      	mov	r0, r5
 800627a:	f7fd f8d3 	bl	8003424 <HAL_TIM_Base_Init>
 800627e:	2800      	cmp	r0, #0
 8006280:	d12d      	bne.n	80062de <PWM_Timer_Init+0xb2>
	  {
		  print("Timer Init Error 1");
	  }

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;//the default clock is the internal clock from the APBx, using this function
 8006282:	a90e      	add	r1, sp, #56	; 0x38
 8006284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006288:	f841 3d34 	str.w	r3, [r1, #-52]!
	  if (HAL_TIM_ConfigClockSource(&timerinfo[(uint8_t)ID], &sClockSourceConfig) != HAL_OK)//Initializes the TIM PWM Time Base according to the specified
 800628c:	4628      	mov	r0, r5
 800628e:	f7fd f9a6 	bl	80035de <HAL_TIM_ConfigClockSource>
 8006292:	bb40      	cbnz	r0, 80062e6 <PWM_Timer_Init+0xba>
	   {
		  print("Timer Init Error 2");
	   }


	  if (HAL_TIM_PWM_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)
 8006294:	4628      	mov	r0, r5
 8006296:	f7fd f8de 	bl	8003456 <HAL_TIM_PWM_Init>
 800629a:	bb40      	cbnz	r0, 80062ee <PWM_Timer_Init+0xc2>
	  {
		  print("Timer Init Error 3");
	  }

	  if (reinit != 0)
 800629c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d15f      	bne.n	8006362 <PWM_Timer_Init+0x136>
		  return;

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80062a2:	2360      	movs	r3, #96	; 0x60
 80062a4:	9305      	str	r3, [sp, #20]
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
	  sConfigOC.Pulse = maxPWM/2; /* 50% duty cycle is 538, set to 0 initially*///
 80062a6:	4b30      	ldr	r3, [pc, #192]	; (8006368 <PWM_Timer_Init+0x13c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	085b      	lsrs	r3, r3, #1
 80062ac:	9306      	str	r3, [sp, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80062ae:	2400      	movs	r4, #0
 80062b0:	9407      	str	r4, [sp, #28]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80062b2:	9408      	str	r4, [sp, #32]
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80062b4:	2304      	movs	r3, #4
 80062b6:	9309      	str	r3, [sp, #36]	; 0x24
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80062b8:	940a      	str	r4, [sp, #40]	; 0x28
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80062ba:	940b      	str	r4, [sp, #44]	; 0x2c

	  for (int ii=0;ii<4;ii++)
 80062bc:	e01c      	b.n	80062f8 <PWM_Timer_Init+0xcc>
	  		timerinfo[ID].Instance = TIM2;
 80062be:	01b0      	lsls	r0, r6, #6
 80062c0:	4d2a      	ldr	r5, [pc, #168]	; (800636c <PWM_Timer_Init+0x140>)
 80062c2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80062c6:	502c      	str	r4, [r5, r0]
		  break;
 80062c8:	e7cb      	b.n	8006262 <PWM_Timer_Init+0x36>
	  		timerinfo[ID].Instance = TIM1;
 80062ca:	01b0      	lsls	r0, r6, #6
 80062cc:	4d27      	ldr	r5, [pc, #156]	; (800636c <PWM_Timer_Init+0x140>)
 80062ce:	4c28      	ldr	r4, [pc, #160]	; (8006370 <PWM_Timer_Init+0x144>)
 80062d0:	502c      	str	r4, [r5, r0]
		  break;
 80062d2:	e7c6      	b.n	8006262 <PWM_Timer_Init+0x36>
	  		timerinfo[ID].Instance = TIM3;
 80062d4:	01b0      	lsls	r0, r6, #6
 80062d6:	4d25      	ldr	r5, [pc, #148]	; (800636c <PWM_Timer_Init+0x140>)
 80062d8:	4c26      	ldr	r4, [pc, #152]	; (8006374 <PWM_Timer_Init+0x148>)
 80062da:	502c      	str	r4, [r5, r0]
		  break;
 80062dc:	e7c1      	b.n	8006262 <PWM_Timer_Init+0x36>
		  print("Timer Init Error 1");
 80062de:	4826      	ldr	r0, [pc, #152]	; (8006378 <PWM_Timer_Init+0x14c>)
 80062e0:	f000 fd8e 	bl	8006e00 <print>
 80062e4:	e7cd      	b.n	8006282 <PWM_Timer_Init+0x56>
		  print("Timer Init Error 2");
 80062e6:	4825      	ldr	r0, [pc, #148]	; (800637c <PWM_Timer_Init+0x150>)
 80062e8:	f000 fd8a 	bl	8006e00 <print>
 80062ec:	e7d2      	b.n	8006294 <PWM_Timer_Init+0x68>
		  print("Timer Init Error 3");
 80062ee:	4824      	ldr	r0, [pc, #144]	; (8006380 <PWM_Timer_Init+0x154>)
 80062f0:	f000 fd86 	bl	8006e00 <print>
 80062f4:	e7d2      	b.n	800629c <PWM_Timer_Init+0x70>
	  for (int ii=0;ii<4;ii++)
 80062f6:	3401      	adds	r4, #1
 80062f8:	2c03      	cmp	r4, #3
 80062fa:	dc15      	bgt.n	8006328 <PWM_Timer_Init+0xfc>
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 80062fc:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8006300:	4a20      	ldr	r2, [pc, #128]	; (8006384 <PWM_Timer_Init+0x158>)
 8006302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006306:	2bff      	cmp	r3, #255	; 0xff
 8006308:	d0f5      	beq.n	80062f6 <PWM_Timer_Init+0xca>
		  {
			  if (HAL_OK != HAL_TIM_PWM_ConfigChannel(&timerinfo[(uint8_t)ID], &sConfigOC, channelinfo[(int8_t)ID][ii]))
 800630a:	b273      	sxtb	r3, r6
 800630c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006310:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006314:	a905      	add	r1, sp, #20
 8006316:	4640      	mov	r0, r8
 8006318:	f7fd f8e8 	bl	80034ec <HAL_TIM_PWM_ConfigChannel>
 800631c:	2800      	cmp	r0, #0
 800631e:	d0ea      	beq.n	80062f6 <PWM_Timer_Init+0xca>
			  {
				  print("Timer Init Error 4");
 8006320:	4819      	ldr	r0, [pc, #100]	; (8006388 <PWM_Timer_Init+0x15c>)
 8006322:	f000 fd6d 	bl	8006e00 <print>
 8006326:	e7e6      	b.n	80062f6 <PWM_Timer_Init+0xca>

		  }
	  }

	 // HAL_TIM_MspPostInit(&timerinfo[(uint8_t)ID]);//output pin assignment
	  HAL_TIM_Base_Start(&timerinfo[(uint8_t)ID]); //Starts the TIM Base generation
 8006328:	4628      	mov	r0, r5
 800632a:	f7fd f82d 	bl	8003388 <HAL_TIM_Base_Start>

	  for (int ii=0;ii<4;ii++)
 800632e:	2400      	movs	r4, #0
 8006330:	e000      	b.n	8006334 <PWM_Timer_Init+0x108>
 8006332:	3401      	adds	r4, #1
 8006334:	2c03      	cmp	r4, #3
 8006336:	dc14      	bgt.n	8006362 <PWM_Timer_Init+0x136>
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 8006338:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 800633c:	4a11      	ldr	r2, [pc, #68]	; (8006384 <PWM_Timer_Init+0x158>)
 800633e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006342:	2bff      	cmp	r3, #255	; 0xff
 8006344:	d0f5      	beq.n	8006332 <PWM_Timer_Init+0x106>
		  {
			  if (HAL_OK != HAL_TIM_PWM_Start(&timerinfo[(uint8_t)ID], channelinfo[(int8_t)ID][ii]))
 8006346:	b273      	sxtb	r3, r6
 8006348:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800634c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006350:	4640      	mov	r0, r8
 8006352:	f7fd f9c1 	bl	80036d8 <HAL_TIM_PWM_Start>
 8006356:	2800      	cmp	r0, #0
 8006358:	d0eb      	beq.n	8006332 <PWM_Timer_Init+0x106>
			  {
				  print("Timer Init Error 5");
 800635a:	480c      	ldr	r0, [pc, #48]	; (800638c <PWM_Timer_Init+0x160>)
 800635c:	f000 fd50 	bl	8006e00 <print>
 8006360:	e7e7      	b.n	8006332 <PWM_Timer_Init+0x106>
			  }

		  }
	  }
}
 8006362:	b00e      	add	sp, #56	; 0x38
 8006364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006368:	20000074 	.word	0x20000074
 800636c:	20000a34 	.word	0x20000a34
 8006370:	40012c00 	.word	0x40012c00
 8006374:	40000400 	.word	0x40000400
 8006378:	0800bdf4 	.word	0x0800bdf4
 800637c:	0800be08 	.word	0x0800be08
 8006380:	0800be1c 	.word	0x0800be1c
 8006384:	0800be58 	.word	0x0800be58
 8006388:	0800be30 	.word	0x0800be30
 800638c:	0800be44 	.word	0x0800be44

08006390 <init_timers>:
{
 8006390:	b510      	push	{r4, lr}
 8006392:	b086      	sub	sp, #24
	__HAL_RCC_TIM1_CLK_ENABLE();
 8006394:	4b1b      	ldr	r3, [pc, #108]	; (8006404 <init_timers+0x74>)
 8006396:	699a      	ldr	r2, [r3, #24]
 8006398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800639c:	619a      	str	r2, [r3, #24]
 800639e:	699a      	ldr	r2, [r3, #24]
 80063a0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80063a4:	9203      	str	r2, [sp, #12]
 80063a6:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_TIM2_CLK_ENABLE();
 80063a8:	69da      	ldr	r2, [r3, #28]
 80063aa:	f042 0201 	orr.w	r2, r2, #1
 80063ae:	61da      	str	r2, [r3, #28]
 80063b0:	69da      	ldr	r2, [r3, #28]
 80063b2:	f002 0201 	and.w	r2, r2, #1
 80063b6:	9204      	str	r2, [sp, #16]
 80063b8:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_TIM3_CLK_ENABLE();
 80063ba:	69da      	ldr	r2, [r3, #28]
 80063bc:	f042 0202 	orr.w	r2, r2, #2
 80063c0:	61da      	str	r2, [r3, #28]
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	9305      	str	r3, [sp, #20]
 80063ca:	9b05      	ldr	r3, [sp, #20]
	PWM_Timer_Init(PWM_CH1,pre,pwm,div,0);
 80063cc:	2400      	movs	r4, #0
 80063ce:	9400      	str	r4, [sp, #0]
 80063d0:	4623      	mov	r3, r4
 80063d2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80063d6:	2102      	movs	r1, #2
 80063d8:	4620      	mov	r0, r4
 80063da:	f7ff ff27 	bl	800622c <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH2,pre,pwm,div,0);
 80063de:	9400      	str	r4, [sp, #0]
 80063e0:	4623      	mov	r3, r4
 80063e2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80063e6:	2102      	movs	r1, #2
 80063e8:	2001      	movs	r0, #1
 80063ea:	f7ff ff1f 	bl	800622c <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH3,pre,pwm,div,0);
 80063ee:	9400      	str	r4, [sp, #0]
 80063f0:	4623      	mov	r3, r4
 80063f2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80063f6:	2102      	movs	r1, #2
 80063f8:	4608      	mov	r0, r1
 80063fa:	f7ff ff17 	bl	800622c <PWM_Timer_Init>
}
 80063fe:	b006      	add	sp, #24
 8006400:	bd10      	pop	{r4, pc}
 8006402:	bf00      	nop
 8006404:	40021000 	.word	0x40021000

08006408 <configPWM>:


//Setup PWM
void configPWM(pwmtimerid_t ID,pwmchid_t channel, uint16_t duty)
{
	  if (channelinfo[(uint8_t) ID][channel] != 255)
 8006408:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800640c:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <configPWM+0x40>)
 800640e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006412:	2bff      	cmp	r3, #255	; 0xff
 8006414:	d008      	beq.n	8006428 <configPWM+0x20>
	  {
	  __HAL_TIM_SET_COMPARE(&timerinfo[ID],  channelinfo[(uint8_t)ID][(uint8_t)channel], duty);
 8006416:	b143      	cbz	r3, 800642a <configPWM+0x22>
 8006418:	2b04      	cmp	r3, #4
 800641a:	d00b      	beq.n	8006434 <configPWM+0x2c>
 800641c:	2b08      	cmp	r3, #8
 800641e:	d00e      	beq.n	800643e <configPWM+0x36>
 8006420:	0180      	lsls	r0, r0, #6
 8006422:	4b0a      	ldr	r3, [pc, #40]	; (800644c <configPWM+0x44>)
 8006424:	581b      	ldr	r3, [r3, r0]
 8006426:	641a      	str	r2, [r3, #64]	; 0x40
	  }
}
 8006428:	4770      	bx	lr
	  __HAL_TIM_SET_COMPARE(&timerinfo[ID],  channelinfo[(uint8_t)ID][(uint8_t)channel], duty);
 800642a:	0180      	lsls	r0, r0, #6
 800642c:	4b07      	ldr	r3, [pc, #28]	; (800644c <configPWM+0x44>)
 800642e:	581b      	ldr	r3, [r3, r0]
 8006430:	635a      	str	r2, [r3, #52]	; 0x34
 8006432:	4770      	bx	lr
 8006434:	0180      	lsls	r0, r0, #6
 8006436:	4b05      	ldr	r3, [pc, #20]	; (800644c <configPWM+0x44>)
 8006438:	581b      	ldr	r3, [r3, r0]
 800643a:	639a      	str	r2, [r3, #56]	; 0x38
 800643c:	4770      	bx	lr
 800643e:	0180      	lsls	r0, r0, #6
 8006440:	4b02      	ldr	r3, [pc, #8]	; (800644c <configPWM+0x44>)
 8006442:	581b      	ldr	r3, [r3, r0]
 8006444:	63da      	str	r2, [r3, #60]	; 0x3c
 8006446:	4770      	bx	lr
 8006448:	0800be58 	.word	0x0800be58
 800644c:	20000a34 	.word	0x20000a34

08006450 <setPWMdirect>:


void setPWMdirect(uint8_t id, uint8_t ch, uint16_t val)
{
 8006450:	b508      	push	{r3, lr}
	configPWM((pwmtimerid_t)id,(pwmchid_t)ch, (uint16_t)val);
 8006452:	f7ff ffd9 	bl	8006408 <configPWM>
}
 8006456:	bd08      	pop	{r3, pc}

08006458 <getMaxPWM>:


uint32_t getMaxPWM(void)
{
	return maxPWM;
}
 8006458:	4b01      	ldr	r3, [pc, #4]	; (8006460 <getMaxPWM+0x8>)
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	20000074 	.word	0x20000074

08006464 <ring_buffer_init>:
 * @param *rbd - pointer to the ring buffer descriptor
 * @param size - ring buffer size in number of bytes
 * @return RB_ERROR, RB_OK
 */
rb_status_t ring_buffer_init(rb_att_t *rbd, uint32_t size)
{
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4604      	mov	r4, r0
  rbd->status = RB_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	7503      	strb	r3, [r0, #20]

  if(rbd != NULL) // rbd must not be pointer to nowhere
 800646c:	b168      	cbz	r0, 800648a <ring_buffer_init+0x26>
 800646e:	460d      	mov	r5, r1
  {
    rbd->buff = calloc(size, sizeof(uint8_t)); // allocate memory of "size" bytes, set all values to 0.
 8006470:	4619      	mov	r1, r3
 8006472:	4628      	mov	r0, r5
 8006474:	f002 fcde 	bl	8008e34 <calloc>
 8006478:	6020      	str	r0, [r4, #0]
    //rbd->buff = malloc(size * sizeof(uint8_t)); // Use this instead of calloc() if you don't wish to set all values to 0 by default.

    if(rbd->buff != NULL)  // buff must not be pointer to nowhere
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	b12b      	cbz	r3, 800648a <ring_buffer_init+0x26>
    {
      rbd->n_elem = size;
 800647e:	6065      	str	r5, [r4, #4]

      // Initialize the ring buffer internal variables
      rbd->head = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	60a3      	str	r3, [r4, #8]
      rbd->tail = 0;
 8006484:	60e3      	str	r3, [r4, #12]
      rbd->count = 0;
 8006486:	6123      	str	r3, [r4, #16]
      rbd->status = RB_OK;
 8006488:	7523      	strb	r3, [r4, #20]
    }
  }

  return rbd->status;
 800648a:	7d20      	ldrb	r0, [r4, #20]
}
 800648c:	bd38      	pop	{r3, r4, r5, pc}

0800648e <ring_buffer_free_elements>:
 */
uint32_t ring_buffer_free_elements(rb_att_t *rbd)
{
  uint32_t ret_val = 0;

  if(rbd != NULL)  // rbd must not be a pointer to nowhere
 800648e:	4603      	mov	r3, r0
 8006490:	b118      	cbz	r0, 800649a <ring_buffer_free_elements+0xc>
  {
   ret_val = rbd->n_elem - rbd->count;
 8006492:	6840      	ldr	r0, [r0, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	1ac0      	subs	r0, r0, r3
 8006498:	4770      	bx	lr
  uint32_t ret_val = 0;
 800649a:	2000      	movs	r0, #0
  }
  return ret_val;
}
 800649c:	4770      	bx	lr

0800649e <ring_buffer_put>:
{
 800649e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(rbd != NULL)  // rbd must not be a pointer to nowhere
 80064a2:	4604      	mov	r4, r0
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d034      	beq.n	8006512 <ring_buffer_put+0x74>
 80064a8:	460f      	mov	r7, r1
 80064aa:	4615      	mov	r5, r2
    if(ring_buffer_free_elements(rbd) >= num)  // is there enough space in buffer for num of data
 80064ac:	f7ff ffef 	bl	800648e <ring_buffer_free_elements>
 80064b0:	42a8      	cmp	r0, r5
 80064b2:	d332      	bcc.n	800651a <ring_buffer_put+0x7c>
    	if(rbd->head >= rbd->n_elem) // reset ring buffer head
 80064b4:	68a2      	ldr	r2, [r4, #8]
 80064b6:	6863      	ldr	r3, [r4, #4]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d301      	bcc.n	80064c0 <ring_buffer_put+0x22>
          rbd->head = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	60a3      	str	r3, [r4, #8]
      num_to_end = rbd->n_elem - rbd->head; // that many data can be written into buffer, before reaching buffer last element
 80064c0:	6866      	ldr	r6, [r4, #4]
 80064c2:	68a3      	ldr	r3, [r4, #8]
 80064c4:	1af6      	subs	r6, r6, r3
      if(num_to_end < num) // if there is not enough space for "num" of data before reaching buffer last element
 80064c6:	42b5      	cmp	r5, r6
 80064c8:	d80e      	bhi.n	80064e8 <ring_buffer_put+0x4a>
    	memcpy(&(rbd->buff[rbd->head]), data, num); //write to buffer all num of data in one piece
 80064ca:	6820      	ldr	r0, [r4, #0]
 80064cc:	68a3      	ldr	r3, [r4, #8]
 80064ce:	462a      	mov	r2, r5
 80064d0:	4639      	mov	r1, r7
 80064d2:	4418      	add	r0, r3
 80064d4:	f002 fcf0 	bl	8008eb8 <memcpy>
        rbd->head = rbd->head + num;  // increment head
 80064d8:	68a3      	ldr	r3, [r4, #8]
 80064da:	442b      	add	r3, r5
 80064dc:	60a3      	str	r3, [r4, #8]
        rbd->count = rbd->count + num; // increment counter for num of data
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	441d      	add	r5, r3
 80064e2:	6125      	str	r5, [r4, #16]
      status = RB_OK;
 80064e4:	2000      	movs	r0, #0
 80064e6:	e015      	b.n	8006514 <ring_buffer_put+0x76>
    	memcpy(&(rbd->buff[rbd->head]), data, num_to_end); //write to buffer partial data
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	68a3      	ldr	r3, [r4, #8]
 80064ec:	4632      	mov	r2, r6
 80064ee:	4639      	mov	r1, r7
 80064f0:	4418      	add	r0, r3
 80064f2:	f002 fce1 	bl	8008eb8 <memcpy>
        memcpy(rbd->buff, (data + num_to_end), (num - num_to_end)); //write to buffer rest of the data, starting with buffer[0]
 80064f6:	6820      	ldr	r0, [r4, #0]
 80064f8:	eba5 0806 	sub.w	r8, r5, r6
 80064fc:	4642      	mov	r2, r8
 80064fe:	19b9      	adds	r1, r7, r6
 8006500:	f002 fcda 	bl	8008eb8 <memcpy>
        rbd->head = num - num_to_end;  //head
 8006504:	f8c4 8008 	str.w	r8, [r4, #8]
        rbd->count = rbd->count + num; // increment counter for num of data
 8006508:	6923      	ldr	r3, [r4, #16]
 800650a:	441d      	add	r5, r3
 800650c:	6125      	str	r5, [r4, #16]
      status = RB_OK;
 800650e:	2000      	movs	r0, #0
 8006510:	e000      	b.n	8006514 <ring_buffer_put+0x76>
  rb_status_t status = RB_ERROR;
 8006512:	2001      	movs	r0, #1
  rbd->status = status;
 8006514:	7520      	strb	r0, [r4, #20]
}
 8006516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	status = RB_NOT_ENOUGH_SPACE;
 800651a:	2004      	movs	r0, #4
 800651c:	e7fa      	b.n	8006514 <ring_buffer_put+0x76>

0800651e <ring_buffer_size>:
 */
uint32_t ring_buffer_size(rb_att_t *rbd)
{
  uint32_t size = 0;

  if(rbd != NULL)  // rbd must not be a pointer to nowhere
 800651e:	b108      	cbz	r0, 8006524 <ring_buffer_size+0x6>
  {
	  size = rbd->count;
 8006520:	6900      	ldr	r0, [r0, #16]
 8006522:	4770      	bx	lr
  uint32_t size = 0;
 8006524:	2000      	movs	r0, #0
  }
  return size;
}
 8006526:	4770      	bx	lr

08006528 <ring_buffer_get>:
{
 8006528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(rbd != NULL)  // rbd must not be a pointer to nowhere
 800652c:	4604      	mov	r4, r0
 800652e:	2800      	cmp	r0, #0
 8006530:	d034      	beq.n	800659c <ring_buffer_get+0x74>
 8006532:	460f      	mov	r7, r1
 8006534:	4615      	mov	r5, r2
	  if(ring_buffer_size(rbd) >= num) //buffer is not empty and there is at least num of data stored
 8006536:	f7ff fff2 	bl	800651e <ring_buffer_size>
 800653a:	42a8      	cmp	r0, r5
 800653c:	d332      	bcc.n	80065a4 <ring_buffer_get+0x7c>
		  if(rbd->tail >= rbd->n_elem) // reset ring buffer tail
 800653e:	68e2      	ldr	r2, [r4, #12]
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	429a      	cmp	r2, r3
 8006544:	d301      	bcc.n	800654a <ring_buffer_get+0x22>
			  rbd->tail = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	60e3      	str	r3, [r4, #12]
      num_to_end = rbd->n_elem - rbd->tail;
 800654a:	6866      	ldr	r6, [r4, #4]
 800654c:	68e3      	ldr	r3, [r4, #12]
 800654e:	1af6      	subs	r6, r6, r3
      if(num >= num_to_end) // is there enough ("num") of data to read before reaching buffer last element
 8006550:	42b5      	cmp	r5, r6
 8006552:	d20e      	bcs.n	8006572 <ring_buffer_get+0x4a>
        memcpy(data, &(rbd->buff[rbd->tail]), num); //read from buffer
 8006554:	6821      	ldr	r1, [r4, #0]
 8006556:	68e3      	ldr	r3, [r4, #12]
 8006558:	462a      	mov	r2, r5
 800655a:	4419      	add	r1, r3
 800655c:	4638      	mov	r0, r7
 800655e:	f002 fcab 	bl	8008eb8 <memcpy>
        rbd->tail = rbd->tail + num;  // increment tail
 8006562:	68e3      	ldr	r3, [r4, #12]
 8006564:	442b      	add	r3, r5
 8006566:	60e3      	str	r3, [r4, #12]
        rbd->count = rbd->count - num; // decrement counter for num of data
 8006568:	6923      	ldr	r3, [r4, #16]
 800656a:	1b5d      	subs	r5, r3, r5
 800656c:	6125      	str	r5, [r4, #16]
      status = RB_OK;
 800656e:	2000      	movs	r0, #0
 8006570:	e015      	b.n	800659e <ring_buffer_get+0x76>
        memcpy(data, &(rbd->buff[rbd->tail]), num_to_end); //read from buffer partial data
 8006572:	6821      	ldr	r1, [r4, #0]
 8006574:	68e3      	ldr	r3, [r4, #12]
 8006576:	4632      	mov	r2, r6
 8006578:	4419      	add	r1, r3
 800657a:	4638      	mov	r0, r7
 800657c:	f002 fc9c 	bl	8008eb8 <memcpy>
        memcpy(data + num_to_end, rbd->buff, (num - num_to_end)); //read from buffer remaining partial data
 8006580:	6821      	ldr	r1, [r4, #0]
 8006582:	eba5 0806 	sub.w	r8, r5, r6
 8006586:	4642      	mov	r2, r8
 8006588:	19b8      	adds	r0, r7, r6
 800658a:	f002 fc95 	bl	8008eb8 <memcpy>
        rbd->tail = num - num_to_end;  // tail increment
 800658e:	f8c4 800c 	str.w	r8, [r4, #12]
        rbd->count = rbd->count - num; // decrement counter for num of data
 8006592:	6923      	ldr	r3, [r4, #16]
 8006594:	1b5d      	subs	r5, r3, r5
 8006596:	6125      	str	r5, [r4, #16]
      status = RB_OK;
 8006598:	2000      	movs	r0, #0
 800659a:	e000      	b.n	800659e <ring_buffer_get+0x76>
  rb_status_t status = RB_ERROR;
 800659c:	2001      	movs	r0, #1
  rbd->status = status;
 800659e:	7520      	strb	r0, [r4, #20]
}
 80065a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      status = RB_NOT_ENOUGH_DATA;
 80065a4:	2005      	movs	r0, #5
 80065a6:	e7fa      	b.n	800659e <ring_buffer_get+0x76>

080065a8 <dmx_serial_process>:
uint8_t escaped = 0;

#define ESC_CHAR 0x5C

void dmx_serial_process(void)
{
 80065a8:	b510      	push	{r4, lr}
 80065aa:	b082      	sub	sp, #8
	uint8_t data;
	uint32_t regsize =  get_reg_length();
 80065ac:	f7fe fc3e 	bl	8004e2c <get_reg_length>
 80065b0:	4604      	mov	r4, r0

	//Both Ports are set to Shell
	if ((UART_mode_SERIAL==0) && (UART_mode_USB==0))
 80065b2:	4b44      	ldr	r3, [pc, #272]	; (80066c4 <dmx_serial_process+0x11c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	b983      	cbnz	r3, 80065da <dmx_serial_process+0x32>
 80065b8:	4b43      	ldr	r3, [pc, #268]	; (80066c8 <dmx_serial_process+0x120>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	b96b      	cbnz	r3, 80065da <dmx_serial_process+0x32>
		else
		{
			return;
		}
	}
}
 80065be:	b002      	add	sp, #8
 80065c0:	bd10      	pop	{r4, pc}
		if (escaped)
 80065c2:	4b42      	ldr	r3, [pc, #264]	; (80066cc <dmx_serial_process+0x124>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	bb1b      	cbnz	r3, 8006610 <dmx_serial_process+0x68>
		set_reg(reg_count, data);
 80065c8:	f7fe fc68 	bl	8004e9c <set_reg>
		reg_count++;
 80065cc:	4a40      	ldr	r2, [pc, #256]	; (80066d0 <dmx_serial_process+0x128>)
 80065ce:	8813      	ldrh	r3, [r2, #0]
 80065d0:	3301      	adds	r3, #1
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	8013      	strh	r3, [r2, #0]
		if (reg_count >=regsize)
 80065d6:	42a3      	cmp	r3, r4
 80065d8:	d258      	bcs.n	800668c <dmx_serial_process+0xe4>
	while ((RB_OK == ring_buffer_get(&rx_buff_dmx, &data, 1)) && (reg_count<regsize) && (syncstart == 1))
 80065da:	2201      	movs	r2, #1
 80065dc:	f10d 0107 	add.w	r1, sp, #7
 80065e0:	483c      	ldr	r0, [pc, #240]	; (80066d4 <dmx_serial_process+0x12c>)
 80065e2:	f7ff ffa1 	bl	8006528 <ring_buffer_get>
 80065e6:	b9d8      	cbnz	r0, 8006620 <dmx_serial_process+0x78>
 80065e8:	4b39      	ldr	r3, [pc, #228]	; (80066d0 <dmx_serial_process+0x128>)
 80065ea:	8818      	ldrh	r0, [r3, #0]
 80065ec:	42a0      	cmp	r0, r4
 80065ee:	d217      	bcs.n	8006620 <dmx_serial_process+0x78>
 80065f0:	4b39      	ldr	r3, [pc, #228]	; (80066d8 <dmx_serial_process+0x130>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d113      	bne.n	8006620 <dmx_serial_process+0x78>
		if ((data == ESC_CHAR) && (escaped == 0))
 80065f8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80065fc:	295c      	cmp	r1, #92	; 0x5c
 80065fe:	d1e0      	bne.n	80065c2 <dmx_serial_process+0x1a>
 8006600:	4b32      	ldr	r3, [pc, #200]	; (80066cc <dmx_serial_process+0x124>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1dc      	bne.n	80065c2 <dmx_serial_process+0x1a>
			escaped = 1;
 8006608:	4b30      	ldr	r3, [pc, #192]	; (80066cc <dmx_serial_process+0x124>)
 800660a:	2201      	movs	r2, #1
 800660c:	701a      	strb	r2, [r3, #0]
			break;
 800660e:	e007      	b.n	8006620 <dmx_serial_process+0x78>
			switch (data)
 8006610:	295c      	cmp	r1, #92	; 0x5c
 8006612:	d033      	beq.n	800667c <dmx_serial_process+0xd4>
 8006614:	296d      	cmp	r1, #109	; 0x6d
 8006616:	d029      	beq.n	800666c <dmx_serial_process+0xc4>
 8006618:	b309      	cbz	r1, 800665e <dmx_serial_process+0xb6>
			escaped = 0;
 800661a:	4b2c      	ldr	r3, [pc, #176]	; (80066cc <dmx_serial_process+0x124>)
 800661c:	2200      	movs	r2, #0
 800661e:	701a      	strb	r2, [r3, #0]
	if ((reg_count>=regsize) || (syncstart == 0))
 8006620:	4b2b      	ldr	r3, [pc, #172]	; (80066d0 <dmx_serial_process+0x128>)
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	42a3      	cmp	r3, r4
 8006626:	d203      	bcs.n	8006630 <dmx_serial_process+0x88>
 8006628:	4b2b      	ldr	r3, [pc, #172]	; (80066d8 <dmx_serial_process+0x130>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1c6      	bne.n	80065be <dmx_serial_process+0x16>
		if (RB_OK == ring_buffer_get(&rx_buff_dmx, &data, 1))
 8006630:	2201      	movs	r2, #1
 8006632:	f10d 0107 	add.w	r1, sp, #7
 8006636:	4827      	ldr	r0, [pc, #156]	; (80066d4 <dmx_serial_process+0x12c>)
 8006638:	f7ff ff76 	bl	8006528 <ring_buffer_get>
 800663c:	2800      	cmp	r0, #0
 800663e:	d1be      	bne.n	80065be <dmx_serial_process+0x16>
			if ((data == ESC_CHAR) && (escaped == 0))
 8006640:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006644:	2b5c      	cmp	r3, #92	; 0x5c
 8006646:	d025      	beq.n	8006694 <dmx_serial_process+0xec>
			if (escaped)
 8006648:	4a20      	ldr	r2, [pc, #128]	; (80066cc <dmx_serial_process+0x124>)
 800664a:	7812      	ldrb	r2, [r2, #0]
 800664c:	2a00      	cmp	r2, #0
 800664e:	d0b6      	beq.n	80065be <dmx_serial_process+0x16>
				switch (data)
 8006650:	b343      	cbz	r3, 80066a4 <dmx_serial_process+0xfc>
 8006652:	2b6d      	cmp	r3, #109	; 0x6d
 8006654:	d02d      	beq.n	80066b2 <dmx_serial_process+0x10a>
				escaped = 0;
 8006656:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <dmx_serial_process+0x124>)
 8006658:	2200      	movs	r2, #0
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	e7af      	b.n	80065be <dmx_serial_process+0x16>
					reg_count = 0;
 800665e:	4b1c      	ldr	r3, [pc, #112]	; (80066d0 <dmx_serial_process+0x128>)
 8006660:	2200      	movs	r2, #0
 8006662:	801a      	strh	r2, [r3, #0]
					syncstart = 1;
 8006664:	4b1c      	ldr	r3, [pc, #112]	; (80066d8 <dmx_serial_process+0x130>)
 8006666:	2201      	movs	r2, #1
 8006668:	701a      	strb	r2, [r3, #0]
					break;
 800666a:	e7d6      	b.n	800661a <dmx_serial_process+0x72>
					UART_mode_SERIAL = (int)UART_MODE_SHELL;
 800666c:	2300      	movs	r3, #0
 800666e:	4a15      	ldr	r2, [pc, #84]	; (80066c4 <dmx_serial_process+0x11c>)
 8006670:	6013      	str	r3, [r2, #0]
					syncstart = 0;
 8006672:	4a19      	ldr	r2, [pc, #100]	; (80066d8 <dmx_serial_process+0x130>)
 8006674:	7013      	strb	r3, [r2, #0]
					reg_count = 0;
 8006676:	4a16      	ldr	r2, [pc, #88]	; (80066d0 <dmx_serial_process+0x128>)
 8006678:	8013      	strh	r3, [r2, #0]
					return;
 800667a:	e7a0      	b.n	80065be <dmx_serial_process+0x16>
					set_reg(reg_count, ESC_CHAR);
 800667c:	215c      	movs	r1, #92	; 0x5c
 800667e:	f7fe fc0d 	bl	8004e9c <set_reg>
					reg_count++;
 8006682:	4a13      	ldr	r2, [pc, #76]	; (80066d0 <dmx_serial_process+0x128>)
 8006684:	8813      	ldrh	r3, [r2, #0]
 8006686:	3301      	adds	r3, #1
 8006688:	8013      	strh	r3, [r2, #0]
					break;
 800668a:	e7c6      	b.n	800661a <dmx_serial_process+0x72>
			syncstart = 0;
 800668c:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <dmx_serial_process+0x130>)
 800668e:	2200      	movs	r2, #0
 8006690:	701a      	strb	r2, [r3, #0]
			return;
 8006692:	e794      	b.n	80065be <dmx_serial_process+0x16>
			if ((data == ESC_CHAR) && (escaped == 0))
 8006694:	4a0d      	ldr	r2, [pc, #52]	; (80066cc <dmx_serial_process+0x124>)
 8006696:	7812      	ldrb	r2, [r2, #0]
 8006698:	2a00      	cmp	r2, #0
 800669a:	d1d5      	bne.n	8006648 <dmx_serial_process+0xa0>
				escaped = 1;
 800669c:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <dmx_serial_process+0x124>)
 800669e:	2201      	movs	r2, #1
 80066a0:	701a      	strb	r2, [r3, #0]
				return;
 80066a2:	e78c      	b.n	80065be <dmx_serial_process+0x16>
						reg_count = 0;
 80066a4:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <dmx_serial_process+0x128>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	801a      	strh	r2, [r3, #0]
						syncstart = 1;
 80066aa:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <dmx_serial_process+0x130>)
 80066ac:	2201      	movs	r2, #1
 80066ae:	701a      	strb	r2, [r3, #0]
						break;
 80066b0:	e7d1      	b.n	8006656 <dmx_serial_process+0xae>
						UART_mode_SERIAL = (int)UART_MODE_SHELL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	4a03      	ldr	r2, [pc, #12]	; (80066c4 <dmx_serial_process+0x11c>)
 80066b6:	6013      	str	r3, [r2, #0]
						syncstart = 0;
 80066b8:	4a07      	ldr	r2, [pc, #28]	; (80066d8 <dmx_serial_process+0x130>)
 80066ba:	7013      	strb	r3, [r2, #0]
						reg_count = 0;
 80066bc:	4a04      	ldr	r2, [pc, #16]	; (80066d0 <dmx_serial_process+0x128>)
 80066be:	8013      	strh	r3, [r2, #0]
						return;
 80066c0:	e77d      	b.n	80065be <dmx_serial_process+0x16>
 80066c2:	bf00      	nop
 80066c4:	200002c4 	.word	0x200002c4
 80066c8:	200002c5 	.word	0x200002c5
 80066cc:	200002cd 	.word	0x200002cd
 80066d0:	200002ce 	.word	0x200002ce
 80066d4:	20000650 	.word	0x20000650
 80066d8:	200002d0 	.word	0x200002d0

080066dc <tracer_puts>:
	if (UART_mode_SERIAL == 0)
		HAL_UART_Transmit(&huart3, &ch, 1, 5000);
}

void tracer_puts(uint8_t *str,const uint16_t size)
{
 80066dc:	b508      	push	{r3, lr}
	{
		if (UART_mode_USB == 0)
			CDC_Transmit_FS(str,size);
	}
#endif
	if (UART_mode_SERIAL == 0)
 80066de:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <tracer_puts+0x1c>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <tracer_puts+0xa>
		HAL_UART_Transmit(&huart3,str,size, 5000);
}
 80066e4:	bd08      	pop	{r3, pc}
 80066e6:	460a      	mov	r2, r1
 80066e8:	4601      	mov	r1, r0
		HAL_UART_Transmit(&huart3,str,size, 5000);
 80066ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80066ee:	4803      	ldr	r0, [pc, #12]	; (80066fc <tracer_puts+0x20>)
 80066f0:	f7fd f94d 	bl	800398e <HAL_UART_Transmit>
}
 80066f4:	e7f6      	b.n	80066e4 <tracer_puts+0x8>
 80066f6:	bf00      	nop
 80066f8:	200002c4 	.word	0x200002c4
 80066fc:	20000834 	.word	0x20000834

08006700 <tracer_getchar>:

#ifdef USE_UART_IRQ
uint8_t tracer_getchar(void)
{
 8006700:	b500      	push	{lr}
 8006702:	b083      	sub	sp, #12
	uint8_t data;
	if (RB_OK == ring_buffer_get(&rx_buff_shell, &data, 1))
 8006704:	2201      	movs	r2, #1
 8006706:	f10d 0107 	add.w	r1, sp, #7
 800670a:	4805      	ldr	r0, [pc, #20]	; (8006720 <tracer_getchar+0x20>)
 800670c:	f7ff ff0c 	bl	8006528 <ring_buffer_get>
 8006710:	b920      	cbnz	r0, 800671c <tracer_getchar+0x1c>
		return data;
 8006712:	f89d 0007 	ldrb.w	r0, [sp, #7]
	else
		return 0;
}
 8006716:	b003      	add	sp, #12
 8006718:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
 800671c:	2000      	movs	r0, #0
 800671e:	e7fa      	b.n	8006716 <tracer_getchar+0x16>
 8006720:	20000668 	.word	0x20000668

08006724 <makeVersion>:


uint16_t makeVersion(void)
{
	return ((uint16_t)VERSION_MAJOR<<8) + (uint16_t)VERSION_MINOR;
}
 8006724:	f240 1001 	movw	r0, #257	; 0x101
 8006728:	4770      	bx	lr
	...

0800672c <init_settings>:

void init_settings(void)
{
 800672c:	b538      	push	{r3, r4, r5, lr}
	//Set everything to 0....
	memset(&settings,0,sizeof(settings_s));
 800672e:	4d1b      	ldr	r5, [pc, #108]	; (800679c <init_settings+0x70>)
 8006730:	2254      	movs	r2, #84	; 0x54
 8006732:	2100      	movs	r1, #0
 8006734:	4628      	mov	r0, r5
 8006736:	f002 fbca 	bl	8008ece <memset>

	settings.configID[0] = 'D';
 800673a:	f1a5 0408 	sub.w	r4, r5, #8
 800673e:	2344      	movs	r3, #68	; 0x44
 8006740:	f805 3c08 	strb.w	r3, [r5, #-8]
	settings.configID[1] = 'M';
 8006744:	234d      	movs	r3, #77	; 0x4d
 8006746:	7063      	strb	r3, [r4, #1]
	settings.configID[2] = 'X';
 8006748:	2358      	movs	r3, #88	; 0x58
 800674a:	70a3      	strb	r3, [r4, #2]
	settings.configID[3] = 'C';
 800674c:	2343      	movs	r3, #67	; 0x43
 800674e:	70e3      	strb	r3, [r4, #3]
	settings.configFWversion = makeVersion();
 8006750:	f7ff ffe8 	bl	8006724 <makeVersion>
 8006754:	80a0      	strh	r0, [r4, #4]

	//Set deviations from 0...
	settings.max_brightness = 255;
 8006756:	23ff      	movs	r3, #255	; 0xff
 8006758:	80e3      	strh	r3, [r4, #6]

	settings.frame_ms_target = 0;

	settings.strip1_length = 9;
 800675a:	2309      	movs	r3, #9
 800675c:	8663      	strh	r3, [r4, #50]	; 0x32
	settings.strip2_length = 9;
 800675e:	86a3      	strh	r3, [r4, #52]	; 0x34

	settings.offset_red = -100;
 8006760:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8006764:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
	settings.gain_red = 100;    //Gain * 100
 8006768:	2264      	movs	r2, #100	; 0x64
 800676a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	settings.gamma_red = 220;   //Gamma * 100
 800676e:	23dc      	movs	r3, #220	; 0xdc
 8006770:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
	settings.offset_green = -80;
 8006774:	f64f 71b0 	movw	r1, #65456	; 0xffb0
 8006778:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	settings.gain_green =100;    //Gain * 100
 800677c:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
	settings.gamma_green = 220;   //Gamma * 100
 8006780:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
	settings.offset_blue = -80;
 8006784:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
	settings.gain_blue = 100;    //Gain * 100
 8006788:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
	settings.gamma_blue = 220;   //Gamma * 100
 800678c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56

	settings.gamma_strip = 220; //Gamma * 100
 8006790:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58

	settings.fx_multiplier = 1;
 8006794:	2301      	movs	r3, #1
 8006796:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	settings.UART_Mode_UART = (uint8_t)UART_MODE_SHELL;
	settings.UART_Mode_USB = (uint8_t)UART_MODE_SHELL;
}
 800679a:	bd38      	pop	{r3, r4, r5, pc}
 800679c:	20000788 	.word	0x20000788

080067a0 <apply_settings>:

void apply_settings(void)
{
 80067a0:	b510      	push	{r4, lr}
	//Apply settings to registers
	set_reg(MAX_BRIGHTNESS,settings.max_brightness);
 80067a2:	4c3d      	ldr	r4, [pc, #244]	; (8006898 <apply_settings+0xf8>)
 80067a4:	79a1      	ldrb	r1, [r4, #6]
 80067a6:	2000      	movs	r0, #0
 80067a8:	f7fe fb78 	bl	8004e9c <set_reg>
	set_reg(CH1_RED,settings.pwm_ch1_r);
 80067ac:	7a21      	ldrb	r1, [r4, #8]
 80067ae:	2001      	movs	r0, #1
 80067b0:	f7fe fb74 	bl	8004e9c <set_reg>
	set_reg(CH1_GREEN,settings.pwm_ch1_g);
 80067b4:	7aa1      	ldrb	r1, [r4, #10]
 80067b6:	2002      	movs	r0, #2
 80067b8:	f7fe fb70 	bl	8004e9c <set_reg>
	set_reg(CH1_BLUE,settings.pwm_ch1_b);
 80067bc:	7b21      	ldrb	r1, [r4, #12]
 80067be:	2003      	movs	r0, #3
 80067c0:	f7fe fb6c 	bl	8004e9c <set_reg>
	set_reg(CH2_RED,settings.pwm_ch2_r);
 80067c4:	7ba1      	ldrb	r1, [r4, #14]
 80067c6:	2004      	movs	r0, #4
 80067c8:	f7fe fb68 	bl	8004e9c <set_reg>
	set_reg(CH2_GREEN,settings.pwm_ch2_g);
 80067cc:	7c21      	ldrb	r1, [r4, #16]
 80067ce:	2005      	movs	r0, #5
 80067d0:	f7fe fb64 	bl	8004e9c <set_reg>
	set_reg(CH2_BLUE,settings.pwm_ch2_b);
 80067d4:	7ca1      	ldrb	r1, [r4, #18]
 80067d6:	2006      	movs	r0, #6
 80067d8:	f7fe fb60 	bl	8004e9c <set_reg>
	set_reg(CH3_RED,settings.pwm_ch3_r);
 80067dc:	7d21      	ldrb	r1, [r4, #20]
 80067de:	2007      	movs	r0, #7
 80067e0:	f7fe fb5c 	bl	8004e9c <set_reg>
	set_reg(CH3_GREEN,settings.pwm_ch3_g);
 80067e4:	7da1      	ldrb	r1, [r4, #22]
 80067e6:	2008      	movs	r0, #8
 80067e8:	f7fe fb58 	bl	8004e9c <set_reg>
	set_reg(CH3_BLUE,settings.pwm_ch3_b);
 80067ec:	7e21      	ldrb	r1, [r4, #24]
 80067ee:	2009      	movs	r0, #9
 80067f0:	f7fe fb54 	bl	8004e9c <set_reg>
	set_reg(CH3_WHITE,settings.pwm_ch3_w);
 80067f4:	7ea1      	ldrb	r1, [r4, #26]
 80067f6:	200a      	movs	r0, #10
 80067f8:	f7fe fb50 	bl	8004e9c <set_reg>

	//Deal with LED Strip Registers
	if (DMX_MODE2 == get_mode())
 80067fc:	f7fe fb0a 	bl	8004e14 <get_mode>
 8006800:	2801      	cmp	r0, #1
 8006802:	d000      	beq.n	8006806 <apply_settings+0x66>
		set_reg(STRIP2_COMPLEXITY,settings.strip2_complexity);
		set_reg(STRIP2_V1,settings.strip2_v1);
		set_reg(STRIP2_V2,settings.strip2_v2);
		set_reg(STRIP2_V3,settings.strip2_v3);
	}
}
 8006804:	bd10      	pop	{r4, pc}
		set_reg(FX_SELECT,settings.fx_select);
 8006806:	7f21      	ldrb	r1, [r4, #28]
 8006808:	200b      	movs	r0, #11
 800680a:	f7fe fb47 	bl	8004e9c <set_reg>
		set_reg(STRIP1_PATTERN,settings.strip1_pattern);
 800680e:	7f61      	ldrb	r1, [r4, #29]
 8006810:	200c      	movs	r0, #12
 8006812:	f7fe fb43 	bl	8004e9c <set_reg>
		set_reg(STRIP1_SPEED,settings.strip1_speed);
 8006816:	7fa1      	ldrb	r1, [r4, #30]
 8006818:	200d      	movs	r0, #13
 800681a:	f7fe fb3f 	bl	8004e9c <set_reg>
		set_reg(STRIP1_SIZE,settings.strip1_size);
 800681e:	7fe1      	ldrb	r1, [r4, #31]
 8006820:	200e      	movs	r0, #14
 8006822:	f7fe fb3b 	bl	8004e9c <set_reg>
		set_reg(STRIP1_COMPLEXITY,settings.strip1_complexity);
 8006826:	f894 1020 	ldrb.w	r1, [r4, #32]
 800682a:	200f      	movs	r0, #15
 800682c:	f7fe fb36 	bl	8004e9c <set_reg>
		set_reg(STRIP1_V1,settings.strip1_v1);
 8006830:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 8006834:	2010      	movs	r0, #16
 8006836:	f7fe fb31 	bl	8004e9c <set_reg>
		set_reg(STRIP1_V2,settings.strip1_v2);
 800683a:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 800683e:	2011      	movs	r0, #17
 8006840:	f7fe fb2c 	bl	8004e9c <set_reg>
		set_reg(STRIP1_V3,settings.strip1_v3);
 8006844:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8006848:	2012      	movs	r0, #18
 800684a:	f7fe fb27 	bl	8004e9c <set_reg>
		set_reg(STRIP2_PATTERN,settings.strip2_pattern);
 800684e:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8006852:	2013      	movs	r0, #19
 8006854:	f7fe fb22 	bl	8004e9c <set_reg>
		set_reg(STRIP2_SPEED,settings.strip2_speed);
 8006858:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 800685c:	2014      	movs	r0, #20
 800685e:	f7fe fb1d 	bl	8004e9c <set_reg>
		set_reg(STRIP2_SIZE,settings.strip2_size);
 8006862:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
 8006866:	2015      	movs	r0, #21
 8006868:	f7fe fb18 	bl	8004e9c <set_reg>
		set_reg(STRIP2_COMPLEXITY,settings.strip2_complexity);
 800686c:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 8006870:	2016      	movs	r0, #22
 8006872:	f7fe fb13 	bl	8004e9c <set_reg>
		set_reg(STRIP2_V1,settings.strip2_v1);
 8006876:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800687a:	2017      	movs	r0, #23
 800687c:	f7fe fb0e 	bl	8004e9c <set_reg>
		set_reg(STRIP2_V2,settings.strip2_v2);
 8006880:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8006884:	2018      	movs	r0, #24
 8006886:	f7fe fb09 	bl	8004e9c <set_reg>
		set_reg(STRIP2_V3,settings.strip2_v3);
 800688a:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800688e:	2019      	movs	r0, #25
 8006890:	f7fe fb04 	bl	8004e9c <set_reg>
}
 8006894:	e7b6      	b.n	8006804 <apply_settings+0x64>
 8006896:	bf00      	nop
 8006898:	20000780 	.word	0x20000780

0800689c <load_settings>:

bool load_settings(void)
{
 800689c:	b538      	push	{r3, r4, r5, lr}
	if (!EE_Reads(0,sizeof(settings_s),(uint32_t*)&settings))
 800689e:	4a10      	ldr	r2, [pc, #64]	; (80068e0 <load_settings+0x44>)
 80068a0:	215c      	movs	r1, #92	; 0x5c
 80068a2:	2000      	movs	r0, #0
 80068a4:	f7fe fc6e 	bl	8005184 <EE_Reads>
 80068a8:	4604      	mov	r4, r0
 80068aa:	b178      	cbz	r0, 80068cc <load_settings+0x30>
	{
		print("EEPROM Read Failed");
		return false;
	}

	if ((settings.configID[0] != 'D') || (settings.configID[1] != 'M') || (settings.configID[2] != 'X') || (settings.configID[3] != 'C'))
 80068ac:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <load_settings+0x44>)
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <load_settings+0x48>)
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d10e      	bne.n	80068d4 <load_settings+0x38>
		return false;
	}
	else
	{
		//Check FW version
		if (settings.configFWversion != makeVersion())
 80068b6:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <load_settings+0x44>)
 80068b8:	889d      	ldrh	r5, [r3, #4]
 80068ba:	f7ff ff33 	bl	8006724 <makeVersion>
 80068be:	4285      	cmp	r5, r0
 80068c0:	d00c      	beq.n	80068dc <load_settings+0x40>
		{
			print("Wrong Firmware Version\n");
 80068c2:	4809      	ldr	r0, [pc, #36]	; (80068e8 <load_settings+0x4c>)
 80068c4:	f000 fa9c 	bl	8006e00 <print>
			return false;
 80068c8:	2400      	movs	r4, #0
 80068ca:	e007      	b.n	80068dc <load_settings+0x40>
		print("EEPROM Read Failed");
 80068cc:	4807      	ldr	r0, [pc, #28]	; (80068ec <load_settings+0x50>)
 80068ce:	f000 fa97 	bl	8006e00 <print>
		return false;
 80068d2:	e003      	b.n	80068dc <load_settings+0x40>
		print("No Config ID\n");
 80068d4:	4806      	ldr	r0, [pc, #24]	; (80068f0 <load_settings+0x54>)
 80068d6:	f000 fa93 	bl	8006e00 <print>
		return false;
 80068da:	2400      	movs	r4, #0
		}
	}
	return true;
}
 80068dc:	4620      	mov	r0, r4
 80068de:	bd38      	pop	{r3, r4, r5, pc}
 80068e0:	20000780 	.word	0x20000780
 80068e4:	43584d44 	.word	0x43584d44
 80068e8:	0800beac 	.word	0x0800beac
 80068ec:	0800be88 	.word	0x0800be88
 80068f0:	0800be9c 	.word	0x0800be9c

080068f4 <save_settings>:

void save_settings(void)
{
 80068f4:	b508      	push	{r3, lr}
	if (!EE_Writes(0,sizeof(settings_s),(uint32_t*)&settings))
 80068f6:	4a05      	ldr	r2, [pc, #20]	; (800690c <save_settings+0x18>)
 80068f8:	215c      	movs	r1, #92	; 0x5c
 80068fa:	2000      	movs	r0, #0
 80068fc:	f7fe fc56 	bl	80051ac <EE_Writes>
 8006900:	b100      	cbz	r0, 8006904 <save_settings+0x10>
		print("EEPROM Write Failed");
}
 8006902:	bd08      	pop	{r3, pc}
		print("EEPROM Write Failed");
 8006904:	4802      	ldr	r0, [pc, #8]	; (8006910 <save_settings+0x1c>)
 8006906:	f000 fa7b 	bl	8006e00 <print>
}
 800690a:	e7fa      	b.n	8006902 <save_settings+0xe>
 800690c:	20000780 	.word	0x20000780
 8006910:	0800c310 	.word	0x0800c310

08006914 <print_settings>:

void print_settings(void)
{
 8006914:	b570      	push	{r4, r5, r6, lr}
	print("");
 8006916:	4d94      	ldr	r5, [pc, #592]	; (8006b68 <print_settings+0x254>)
 8006918:	4628      	mov	r0, r5
 800691a:	f000 fa71 	bl	8006e00 <print>
	print("Defaults");
 800691e:	4893      	ldr	r0, [pc, #588]	; (8006b6c <print_settings+0x258>)
 8006920:	f000 fa6e 	bl	8006e00 <print>
	print("-------");
 8006924:	4e92      	ldr	r6, [pc, #584]	; (8006b70 <print_settings+0x25c>)
 8006926:	4630      	mov	r0, r6
 8006928:	f000 fa6a 	bl	8006e00 <print>
	print("MAX_BRIGHTN: %d",settings.max_brightness);
 800692c:	4c91      	ldr	r4, [pc, #580]	; (8006b74 <print_settings+0x260>)
 800692e:	88e1      	ldrh	r1, [r4, #6]
 8006930:	4891      	ldr	r0, [pc, #580]	; (8006b78 <print_settings+0x264>)
 8006932:	f000 fa65 	bl	8006e00 <print>
	print("CH1_RED: %d",settings.pwm_ch1_r);
 8006936:	8921      	ldrh	r1, [r4, #8]
 8006938:	4890      	ldr	r0, [pc, #576]	; (8006b7c <print_settings+0x268>)
 800693a:	f000 fa61 	bl	8006e00 <print>
	print("CH1_GREEN: %d",settings.pwm_ch1_g);
 800693e:	8961      	ldrh	r1, [r4, #10]
 8006940:	488f      	ldr	r0, [pc, #572]	; (8006b80 <print_settings+0x26c>)
 8006942:	f000 fa5d 	bl	8006e00 <print>
	print("CH1_BLUE: %d",settings.pwm_ch1_b);
 8006946:	89a1      	ldrh	r1, [r4, #12]
 8006948:	488e      	ldr	r0, [pc, #568]	; (8006b84 <print_settings+0x270>)
 800694a:	f000 fa59 	bl	8006e00 <print>
	print("CH2_RED: %d",settings.pwm_ch2_r);
 800694e:	89e1      	ldrh	r1, [r4, #14]
 8006950:	488d      	ldr	r0, [pc, #564]	; (8006b88 <print_settings+0x274>)
 8006952:	f000 fa55 	bl	8006e00 <print>
	print("CH2_GREEN: %d",settings.pwm_ch2_g);
 8006956:	8a21      	ldrh	r1, [r4, #16]
 8006958:	488c      	ldr	r0, [pc, #560]	; (8006b8c <print_settings+0x278>)
 800695a:	f000 fa51 	bl	8006e00 <print>
	print("CH2_BLUE: %d",settings.pwm_ch2_b);
 800695e:	8a61      	ldrh	r1, [r4, #18]
 8006960:	488b      	ldr	r0, [pc, #556]	; (8006b90 <print_settings+0x27c>)
 8006962:	f000 fa4d 	bl	8006e00 <print>
	print("CH3_RED: %d",settings.pwm_ch3_r);
 8006966:	8aa1      	ldrh	r1, [r4, #20]
 8006968:	488a      	ldr	r0, [pc, #552]	; (8006b94 <print_settings+0x280>)
 800696a:	f000 fa49 	bl	8006e00 <print>
	print("CH3_GREEN: %d",settings.pwm_ch3_g);
 800696e:	8ae1      	ldrh	r1, [r4, #22]
 8006970:	4889      	ldr	r0, [pc, #548]	; (8006b98 <print_settings+0x284>)
 8006972:	f000 fa45 	bl	8006e00 <print>
	print("CH3_BLUE: %d",settings.pwm_ch3_b);
 8006976:	8b21      	ldrh	r1, [r4, #24]
 8006978:	4888      	ldr	r0, [pc, #544]	; (8006b9c <print_settings+0x288>)
 800697a:	f000 fa41 	bl	8006e00 <print>
	print("CH3_WHITE: %d",settings.pwm_ch3_w);
 800697e:	8b61      	ldrh	r1, [r4, #26]
 8006980:	4887      	ldr	r0, [pc, #540]	; (8006ba0 <print_settings+0x28c>)
 8006982:	f000 fa3d 	bl	8006e00 <print>
	print("FX_SELECT: %d",settings.fx_select);
 8006986:	7f21      	ldrb	r1, [r4, #28]
 8006988:	4886      	ldr	r0, [pc, #536]	; (8006ba4 <print_settings+0x290>)
 800698a:	f000 fa39 	bl	8006e00 <print>

	print("STRIP1_PATTERN: %d",settings.strip1_pattern);
 800698e:	7f61      	ldrb	r1, [r4, #29]
 8006990:	4885      	ldr	r0, [pc, #532]	; (8006ba8 <print_settings+0x294>)
 8006992:	f000 fa35 	bl	8006e00 <print>
	print("STRIP1_SPEED: %d",settings.strip1_speed);
 8006996:	7fa1      	ldrb	r1, [r4, #30]
 8006998:	4884      	ldr	r0, [pc, #528]	; (8006bac <print_settings+0x298>)
 800699a:	f000 fa31 	bl	8006e00 <print>
	print("STRIP1_SIZE: %d",settings.strip1_size);
 800699e:	7fe1      	ldrb	r1, [r4, #31]
 80069a0:	4883      	ldr	r0, [pc, #524]	; (8006bb0 <print_settings+0x29c>)
 80069a2:	f000 fa2d 	bl	8006e00 <print>
	print("STRIP1_COMPLEX: %d",settings.strip1_complexity);
 80069a6:	f894 1020 	ldrb.w	r1, [r4, #32]
 80069aa:	4882      	ldr	r0, [pc, #520]	; (8006bb4 <print_settings+0x2a0>)
 80069ac:	f000 fa28 	bl	8006e00 <print>
	print("STRIP1_V1: %d",settings.strip1_v1);
 80069b0:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 80069b4:	4880      	ldr	r0, [pc, #512]	; (8006bb8 <print_settings+0x2a4>)
 80069b6:	f000 fa23 	bl	8006e00 <print>
	print("STRIP1_V2: %d",settings.strip1_v2);
 80069ba:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 80069be:	487f      	ldr	r0, [pc, #508]	; (8006bbc <print_settings+0x2a8>)
 80069c0:	f000 fa1e 	bl	8006e00 <print>
	print("STRIP1_V3: %d",settings.strip1_v3);
 80069c4:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80069c8:	487d      	ldr	r0, [pc, #500]	; (8006bc0 <print_settings+0x2ac>)
 80069ca:	f000 fa19 	bl	8006e00 <print>

	print("STRIP2_PATTERN: %d",settings.strip2_pattern);
 80069ce:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80069d2:	487c      	ldr	r0, [pc, #496]	; (8006bc4 <print_settings+0x2b0>)
 80069d4:	f000 fa14 	bl	8006e00 <print>
	print("STRIP2_SPEED: %d",settings.strip2_speed);
 80069d8:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 80069dc:	487a      	ldr	r0, [pc, #488]	; (8006bc8 <print_settings+0x2b4>)
 80069de:	f000 fa0f 	bl	8006e00 <print>
	print("STRIP2_SIZE: %d",settings.strip2_size);
 80069e2:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
 80069e6:	4879      	ldr	r0, [pc, #484]	; (8006bcc <print_settings+0x2b8>)
 80069e8:	f000 fa0a 	bl	8006e00 <print>
	print("STRIP2_COMPLEX: %d",settings.strip2_complexity);
 80069ec:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 80069f0:	4877      	ldr	r0, [pc, #476]	; (8006bd0 <print_settings+0x2bc>)
 80069f2:	f000 fa05 	bl	8006e00 <print>
	print("STRIP2_V1: %d",settings.strip2_v1);
 80069f6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80069fa:	4876      	ldr	r0, [pc, #472]	; (8006bd4 <print_settings+0x2c0>)
 80069fc:	f000 fa00 	bl	8006e00 <print>
	print("STRIP2_V2: %d",settings.strip2_v2);
 8006a00:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8006a04:	4874      	ldr	r0, [pc, #464]	; (8006bd8 <print_settings+0x2c4>)
 8006a06:	f000 f9fb 	bl	8006e00 <print>
	print("STRIP2_V3: %d",settings.strip2_v3);
 8006a0a:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8006a0e:	4873      	ldr	r0, [pc, #460]	; (8006bdc <print_settings+0x2c8>)
 8006a10:	f000 f9f6 	bl	8006e00 <print>
	print("");
 8006a14:	4628      	mov	r0, r5
 8006a16:	f000 f9f3 	bl	8006e00 <print>
	print("Settings");
 8006a1a:	4871      	ldr	r0, [pc, #452]	; (8006be0 <print_settings+0x2cc>)
 8006a1c:	f000 f9f0 	bl	8006e00 <print>
	print("-------");
 8006a20:	4630      	mov	r0, r6
 8006a22:	f000 f9ed 	bl	8006e00 <print>
	//FX Multiplier
	print("FX Multiplier: %d",settings.fx_multiplier);
 8006a26:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8006a2a:	486e      	ldr	r0, [pc, #440]	; (8006be4 <print_settings+0x2d0>)
 8006a2c:	f000 f9e8 	bl	8006e00 <print>
	print("Target FPS: %d",settings.frame_ms_target);
 8006a30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006a32:	486d      	ldr	r0, [pc, #436]	; (8006be8 <print_settings+0x2d4>)
 8006a34:	f000 f9e4 	bl	8006e00 <print>
	//Strips
	print("Strip 1 Length: %d",settings.strip1_length);
 8006a38:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8006a3a:	486c      	ldr	r0, [pc, #432]	; (8006bec <print_settings+0x2d8>)
 8006a3c:	f000 f9e0 	bl	8006e00 <print>
	print("Strip 2 Length: %d",settings.strip2_length);
 8006a40:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8006a42:	486b      	ldr	r0, [pc, #428]	; (8006bf0 <print_settings+0x2dc>)
 8006a44:	f000 f9dc 	bl	8006e00 <print>

	print("UART Mode Serial: %d",settings.UART_Mode_UART);
 8006a48:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
 8006a4c:	4869      	ldr	r0, [pc, #420]	; (8006bf4 <print_settings+0x2e0>)
 8006a4e:	f000 f9d7 	bl	8006e00 <print>
	print("UART Mode USB: %d",settings.UART_Mode_USB);
 8006a52:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 8006a56:	4868      	ldr	r0, [pc, #416]	; (8006bf8 <print_settings+0x2e4>)
 8006a58:	f000 f9d2 	bl	8006e00 <print>
	print("");
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	f000 f9cf 	bl	8006e00 <print>
	//Triggers
	print("Triggers");
 8006a62:	4866      	ldr	r0, [pc, #408]	; (8006bfc <print_settings+0x2e8>)
 8006a64:	f000 f9cc 	bl	8006e00 <print>
	print("--------");
 8006a68:	4865      	ldr	r0, [pc, #404]	; (8006c00 <print_settings+0x2ec>)
 8006a6a:	f000 f9c9 	bl	8006e00 <print>
	print("Trigger A0 Mode",settings.trigger_mode_A0);
 8006a6e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8006a72:	4864      	ldr	r0, [pc, #400]	; (8006c04 <print_settings+0x2f0>)
 8006a74:	f000 f9c4 	bl	8006e00 <print>
	print("Trigger A0 Reg: %d",settings.trigger_reg_A0);
 8006a78:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8006a7c:	4862      	ldr	r0, [pc, #392]	; (8006c08 <print_settings+0x2f4>)
 8006a7e:	f000 f9bf 	bl	8006e00 <print>
	print("Trigger A0 Reg Low->Hi: %d",settings.trigger_reg_lohi_A0);
 8006a82:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
 8006a86:	4861      	ldr	r0, [pc, #388]	; (8006c0c <print_settings+0x2f8>)
 8006a88:	f000 f9ba 	bl	8006e00 <print>
	print("Trigger A0 Val Low->Hi: %d",settings.trigger_val_lohi_A0);
 8006a8c:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
 8006a90:	485f      	ldr	r0, [pc, #380]	; (8006c10 <print_settings+0x2fc>)
 8006a92:	f000 f9b5 	bl	8006e00 <print>
	print("Trigger A0 Reg Hi->Low: %d",settings.trigger_reg_hilo_A0);
 8006a96:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8006a9a:	485e      	ldr	r0, [pc, #376]	; (8006c14 <print_settings+0x300>)
 8006a9c:	f000 f9b0 	bl	8006e00 <print>
	print("Trigger A0 Val Hi-Low: %d",settings.trigger_val_hilo_A0);
 8006aa0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8006aa4:	485c      	ldr	r0, [pc, #368]	; (8006c18 <print_settings+0x304>)
 8006aa6:	f000 f9ab 	bl	8006e00 <print>
	print("Trigger A0 Level: %d",settings.trigger_level_A0);
 8006aaa:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8006aae:	485b      	ldr	r0, [pc, #364]	; (8006c1c <print_settings+0x308>)
 8006ab0:	f000 f9a6 	bl	8006e00 <print>

	print("Trigger A1 Mode",settings.trigger_mode_A1);
 8006ab4:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8006ab8:	4859      	ldr	r0, [pc, #356]	; (8006c20 <print_settings+0x30c>)
 8006aba:	f000 f9a1 	bl	8006e00 <print>
	print("Trigger A1 Reg: %d",settings.trigger_reg_A1);
 8006abe:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8006ac2:	4858      	ldr	r0, [pc, #352]	; (8006c24 <print_settings+0x310>)
 8006ac4:	f000 f99c 	bl	8006e00 <print>
	print("Trigger A1 Reg Low->Hi: %d",settings.trigger_reg_lohi_A1);
 8006ac8:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8006acc:	4856      	ldr	r0, [pc, #344]	; (8006c28 <print_settings+0x314>)
 8006ace:	f000 f997 	bl	8006e00 <print>
	print("Trigger A1 Val Low->Hi: %d",settings.trigger_val_lohi_A1);
 8006ad2:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 8006ad6:	4855      	ldr	r0, [pc, #340]	; (8006c2c <print_settings+0x318>)
 8006ad8:	f000 f992 	bl	8006e00 <print>
	print("Trigger A1 Reg Hi->Low: %d",settings.trigger_reg_hilo_A1);
 8006adc:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8006ae0:	4853      	ldr	r0, [pc, #332]	; (8006c30 <print_settings+0x31c>)
 8006ae2:	f000 f98d 	bl	8006e00 <print>
	print("Trigger A1 Val Hi-Low: %d",settings.trigger_val_hilo_A1);
 8006ae6:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 8006aea:	4852      	ldr	r0, [pc, #328]	; (8006c34 <print_settings+0x320>)
 8006aec:	f000 f988 	bl	8006e00 <print>
	print("Trigger A1 Level: %d",settings.trigger_level_A1);
 8006af0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006af4:	4850      	ldr	r0, [pc, #320]	; (8006c38 <print_settings+0x324>)
 8006af6:	f000 f983 	bl	8006e00 <print>
	print("");
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 f980 	bl	8006e00 <print>
    //Calibration
	print("Calibration");
 8006b00:	484e      	ldr	r0, [pc, #312]	; (8006c3c <print_settings+0x328>)
 8006b02:	f000 f97d 	bl	8006e00 <print>
	print("-----------");
 8006b06:	484e      	ldr	r0, [pc, #312]	; (8006c40 <print_settings+0x32c>)
 8006b08:	f000 f97a 	bl	8006e00 <print>
	print("Offset Red: %d",settings.offset_red);
 8006b0c:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
 8006b10:	484c      	ldr	r0, [pc, #304]	; (8006c44 <print_settings+0x330>)
 8006b12:	f000 f975 	bl	8006e00 <print>
	print("Gain Red: %d",settings.gain_red);
 8006b16:	f9b4 1048 	ldrsh.w	r1, [r4, #72]	; 0x48
 8006b1a:	484b      	ldr	r0, [pc, #300]	; (8006c48 <print_settings+0x334>)
 8006b1c:	f000 f970 	bl	8006e00 <print>
	print("Gamma Red: %d",settings.gamma_red);
 8006b20:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
 8006b24:	4849      	ldr	r0, [pc, #292]	; (8006c4c <print_settings+0x338>)
 8006b26:	f000 f96b 	bl	8006e00 <print>
	print("Offset Green: %d",settings.offset_green);
 8006b2a:	f9b4 104c 	ldrsh.w	r1, [r4, #76]	; 0x4c
 8006b2e:	4848      	ldr	r0, [pc, #288]	; (8006c50 <print_settings+0x33c>)
 8006b30:	f000 f966 	bl	8006e00 <print>
	print("Gain Green: %d",settings.gain_green);
 8006b34:	f9b4 104e 	ldrsh.w	r1, [r4, #78]	; 0x4e
 8006b38:	4846      	ldr	r0, [pc, #280]	; (8006c54 <print_settings+0x340>)
 8006b3a:	f000 f961 	bl	8006e00 <print>
	print("Gamma Green: %d",settings.gamma_green);
 8006b3e:	f9b4 1050 	ldrsh.w	r1, [r4, #80]	; 0x50
 8006b42:	4845      	ldr	r0, [pc, #276]	; (8006c58 <print_settings+0x344>)
 8006b44:	f000 f95c 	bl	8006e00 <print>
	print("Offset Blue: %d",settings.offset_blue);
 8006b48:	f9b4 1052 	ldrsh.w	r1, [r4, #82]	; 0x52
 8006b4c:	4843      	ldr	r0, [pc, #268]	; (8006c5c <print_settings+0x348>)
 8006b4e:	f000 f957 	bl	8006e00 <print>
	print("Gain Blue: %d",settings.gain_blue);
 8006b52:	f9b4 1054 	ldrsh.w	r1, [r4, #84]	; 0x54
 8006b56:	4842      	ldr	r0, [pc, #264]	; (8006c60 <print_settings+0x34c>)
 8006b58:	f000 f952 	bl	8006e00 <print>
	print("Gamma Blue: %d",settings.gamma_blue);
 8006b5c:	f9b4 1056 	ldrsh.w	r1, [r4, #86]	; 0x56
 8006b60:	4840      	ldr	r0, [pc, #256]	; (8006c64 <print_settings+0x350>)
 8006b62:	f000 f94d 	bl	8006e00 <print>
}
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	0800c760 	.word	0x0800c760
 8006b6c:	0800bec4 	.word	0x0800bec4
 8006b70:	0800c388 	.word	0x0800c388
 8006b74:	20000780 	.word	0x20000780
 8006b78:	0800bed0 	.word	0x0800bed0
 8006b7c:	0800bee0 	.word	0x0800bee0
 8006b80:	0800beec 	.word	0x0800beec
 8006b84:	0800befc 	.word	0x0800befc
 8006b88:	0800bf0c 	.word	0x0800bf0c
 8006b8c:	0800bf18 	.word	0x0800bf18
 8006b90:	0800bf28 	.word	0x0800bf28
 8006b94:	0800bf38 	.word	0x0800bf38
 8006b98:	0800bf44 	.word	0x0800bf44
 8006b9c:	0800bf54 	.word	0x0800bf54
 8006ba0:	0800bf64 	.word	0x0800bf64
 8006ba4:	0800bf74 	.word	0x0800bf74
 8006ba8:	0800bf84 	.word	0x0800bf84
 8006bac:	0800bf98 	.word	0x0800bf98
 8006bb0:	0800bfac 	.word	0x0800bfac
 8006bb4:	0800bfbc 	.word	0x0800bfbc
 8006bb8:	0800bfd0 	.word	0x0800bfd0
 8006bbc:	0800bfe0 	.word	0x0800bfe0
 8006bc0:	0800bff0 	.word	0x0800bff0
 8006bc4:	0800c000 	.word	0x0800c000
 8006bc8:	0800c014 	.word	0x0800c014
 8006bcc:	0800c028 	.word	0x0800c028
 8006bd0:	0800c038 	.word	0x0800c038
 8006bd4:	0800c04c 	.word	0x0800c04c
 8006bd8:	0800c05c 	.word	0x0800c05c
 8006bdc:	0800c06c 	.word	0x0800c06c
 8006be0:	0800c07c 	.word	0x0800c07c
 8006be4:	0800c088 	.word	0x0800c088
 8006be8:	0800c09c 	.word	0x0800c09c
 8006bec:	0800c0ac 	.word	0x0800c0ac
 8006bf0:	0800c0c0 	.word	0x0800c0c0
 8006bf4:	0800c0d4 	.word	0x0800c0d4
 8006bf8:	0800c0ec 	.word	0x0800c0ec
 8006bfc:	0800c100 	.word	0x0800c100
 8006c00:	0800c10c 	.word	0x0800c10c
 8006c04:	0800c118 	.word	0x0800c118
 8006c08:	0800c128 	.word	0x0800c128
 8006c0c:	0800c13c 	.word	0x0800c13c
 8006c10:	0800c158 	.word	0x0800c158
 8006c14:	0800c174 	.word	0x0800c174
 8006c18:	0800c190 	.word	0x0800c190
 8006c1c:	0800c1ac 	.word	0x0800c1ac
 8006c20:	0800c1c4 	.word	0x0800c1c4
 8006c24:	0800c1d4 	.word	0x0800c1d4
 8006c28:	0800c1e8 	.word	0x0800c1e8
 8006c2c:	0800c204 	.word	0x0800c204
 8006c30:	0800c220 	.word	0x0800c220
 8006c34:	0800c23c 	.word	0x0800c23c
 8006c38:	0800c258 	.word	0x0800c258
 8006c3c:	0800c270 	.word	0x0800c270
 8006c40:	0800c384 	.word	0x0800c384
 8006c44:	0800c27c 	.word	0x0800c27c
 8006c48:	0800c28c 	.word	0x0800c28c
 8006c4c:	0800c29c 	.word	0x0800c29c
 8006c50:	0800c2ac 	.word	0x0800c2ac
 8006c54:	0800c2c0 	.word	0x0800c2c0
 8006c58:	0800c2d0 	.word	0x0800c2d0
 8006c5c:	0800c2e0 	.word	0x0800c2e0
 8006c60:	0800c2f0 	.word	0x0800c2f0
 8006c64:	0800c300 	.word	0x0800c300

08006c68 <cmd_buf_add_char>:
}

/* functions */
static void cmd_buf_add_char(char c)
{
    if ((unsigned int)cmd_buf_idx < sizeof(cmd_buf))
 8006c68:	4b04      	ldr	r3, [pc, #16]	; (8006c7c <cmd_buf_add_char+0x14>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b3f      	cmp	r3, #63	; 0x3f
 8006c6e:	d804      	bhi.n	8006c7a <cmd_buf_add_char+0x12>
    {
        cmd_buf[cmd_buf_idx++] = c;
 8006c70:	1c59      	adds	r1, r3, #1
 8006c72:	4a02      	ldr	r2, [pc, #8]	; (8006c7c <cmd_buf_add_char+0x14>)
 8006c74:	6011      	str	r1, [r2, #0]
 8006c76:	4a02      	ldr	r2, [pc, #8]	; (8006c80 <cmd_buf_add_char+0x18>)
 8006c78:	54d0      	strb	r0, [r2, r3]
    }
}
 8006c7a:	4770      	bx	lr
 8006c7c:	20000314 	.word	0x20000314
 8006c80:	200002d4 	.word	0x200002d4

08006c84 <cmd_buf_remove_char>:

static void cmd_buf_remove_char(void)
{
    if (cmd_buf_idx > 0)
 8006c84:	4b05      	ldr	r3, [pc, #20]	; (8006c9c <cmd_buf_remove_char+0x18>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	dd05      	ble.n	8006c98 <cmd_buf_remove_char+0x14>
    {
        cmd_buf[--cmd_buf_idx] = 0;
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	4a03      	ldr	r2, [pc, #12]	; (8006c9c <cmd_buf_remove_char+0x18>)
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	4a03      	ldr	r2, [pc, #12]	; (8006ca0 <cmd_buf_remove_char+0x1c>)
 8006c94:	2100      	movs	r1, #0
 8006c96:	54d1      	strb	r1, [r2, r3]
    }
}
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	20000314 	.word	0x20000314
 8006ca0:	200002d4 	.word	0x200002d4

08006ca4 <save_command_to_command_history>:
	
	return arg_num - 1;
}

static void save_command_to_command_history(void)
{
 8006ca4:	b538      	push	{r3, r4, r5, lr}
    strncpy(cmd_hist[cmd_hist_put_idx], cmd_buf, sizeof(cmd_buf));
 8006ca6:	4d0a      	ldr	r5, [pc, #40]	; (8006cd0 <save_command_to_command_history+0x2c>)
 8006ca8:	682c      	ldr	r4, [r5, #0]
 8006caa:	2240      	movs	r2, #64	; 0x40
 8006cac:	4909      	ldr	r1, [pc, #36]	; (8006cd4 <save_command_to_command_history+0x30>)
 8006cae:	480a      	ldr	r0, [pc, #40]	; (8006cd8 <save_command_to_command_history+0x34>)
 8006cb0:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8006cb4:	f002 f9ea 	bl	800908c <strncpy>
    cmd_hist_put_idx++;
 8006cb8:	3401      	adds	r4, #1
 8006cba:	602c      	str	r4, [r5, #0]
    if (cmd_hist_put_idx >= SHELL_CMD_HISTORY_LEN)
 8006cbc:	2c07      	cmp	r4, #7
 8006cbe:	dd01      	ble.n	8006cc4 <save_command_to_command_history+0x20>
    {
        cmd_hist_put_idx = 0;
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	602a      	str	r2, [r5, #0]
    }
    cmd_hist_get_idx = cmd_hist_put_idx;
 8006cc4:	4b02      	ldr	r3, [pc, #8]	; (8006cd0 <save_command_to_command_history+0x2c>)
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	4b04      	ldr	r3, [pc, #16]	; (8006cdc <save_command_to_command_history+0x38>)
 8006cca:	601a      	str	r2, [r3, #0]
}
 8006ccc:	bd38      	pop	{r3, r4, r5, pc}
 8006cce:	bf00      	nop
 8006cd0:	2000051c 	.word	0x2000051c
 8006cd4:	200002d4 	.word	0x200002d4
 8006cd8:	20000318 	.word	0x20000318
 8006cdc:	20000518 	.word	0x20000518

08006ce0 <parse_shell_cmd>:
{
 8006ce0:	b538      	push	{r3, r4, r5, lr}
 8006ce2:	460d      	mov	r5, r1
	tokens[arg_num] = strtok(buffer, " ");
 8006ce4:	4909      	ldr	r1, [pc, #36]	; (8006d0c <parse_shell_cmd+0x2c>)
 8006ce6:	f002 f9e7 	bl	80090b8 <strtok>
 8006cea:	6028      	str	r0, [r5, #0]
	int arg_num = 0;
 8006cec:	2400      	movs	r4, #0
	while(NULL != tokens[arg_num] && arg_num < (MAX_ARGUMENT_NUM-1))
 8006cee:	e006      	b.n	8006cfe <parse_shell_cmd+0x1e>
		tokens[++arg_num] = strtok(NULL, " ");
 8006cf0:	3401      	adds	r4, #1
 8006cf2:	4906      	ldr	r1, [pc, #24]	; (8006d0c <parse_shell_cmd+0x2c>)
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	f002 f9df 	bl	80090b8 <strtok>
 8006cfa:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	while(NULL != tokens[arg_num] && arg_num < (MAX_ARGUMENT_NUM-1))
 8006cfe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006d02:	b10b      	cbz	r3, 8006d08 <parse_shell_cmd+0x28>
 8006d04:	2c06      	cmp	r4, #6
 8006d06:	ddf3      	ble.n	8006cf0 <parse_shell_cmd+0x10>
}
 8006d08:	1e60      	subs	r0, r4, #1
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	0800bb54 	.word	0x0800bb54

08006d10 <cmd_buf_reset>:
{
 8006d10:	b508      	push	{r3, lr}
    cmd_buf_idx = 0;
 8006d12:	2100      	movs	r1, #0
 8006d14:	4b03      	ldr	r3, [pc, #12]	; (8006d24 <cmd_buf_reset+0x14>)
 8006d16:	6019      	str	r1, [r3, #0]
    memset(cmd_buf, 0, sizeof(cmd_buf));
 8006d18:	2240      	movs	r2, #64	; 0x40
 8006d1a:	4803      	ldr	r0, [pc, #12]	; (8006d28 <cmd_buf_reset+0x18>)
 8006d1c:	f002 f8d7 	bl	8008ece <memset>
}
 8006d20:	bd08      	pop	{r3, pc}
 8006d22:	bf00      	nop
 8006d24:	20000314 	.word	0x20000314
 8006d28:	200002d4 	.word	0x200002d4

08006d2c <load_command_from_command_history>:

static void load_command_from_command_history(uint8_t dir)
{
 8006d2c:	b510      	push	{r4, lr}
    /* backwards */
    if (0 == dir)
 8006d2e:	b990      	cbnz	r0, 8006d56 <load_command_from_command_history+0x2a>
    {
        if (0 == cmd_hist_get_idx)
 8006d30:	4b22      	ldr	r3, [pc, #136]	; (8006dbc <load_command_from_command_history+0x90>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	b93b      	cbnz	r3, 8006d46 <load_command_from_command_history+0x1a>
        {
            if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_put_idx)
 8006d36:	4b22      	ldr	r3, [pc, #136]	; (8006dc0 <load_command_from_command_history+0x94>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b07      	cmp	r3, #7
 8006d3c:	d02c      	beq.n	8006d98 <load_command_from_command_history+0x6c>
            {
                return;
            }
            cmd_hist_get_idx = SHELL_CMD_HISTORY_LEN - 1;
 8006d3e:	4b1f      	ldr	r3, [pc, #124]	; (8006dbc <load_command_from_command_history+0x90>)
 8006d40:	2207      	movs	r2, #7
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e017      	b.n	8006d76 <load_command_from_command_history+0x4a>
        }
        else
        {
            if (cmd_hist_get_idx - 1 == cmd_hist_put_idx)
 8006d46:	3b01      	subs	r3, #1
 8006d48:	4a1d      	ldr	r2, [pc, #116]	; (8006dc0 <load_command_from_command_history+0x94>)
 8006d4a:	6812      	ldr	r2, [r2, #0]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d023      	beq.n	8006d98 <load_command_from_command_history+0x6c>
            {
                return;
            }
            cmd_hist_get_idx--;
 8006d50:	4a1a      	ldr	r2, [pc, #104]	; (8006dbc <load_command_from_command_history+0x90>)
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	e00f      	b.n	8006d76 <load_command_from_command_history+0x4a>
        }
    }
    /* forward */
    else
    {
        if (cmd_hist_get_idx == cmd_hist_put_idx)
 8006d56:	4b19      	ldr	r3, [pc, #100]	; (8006dbc <load_command_from_command_history+0x90>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a19      	ldr	r2, [pc, #100]	; (8006dc0 <load_command_from_command_history+0x94>)
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d01a      	beq.n	8006d98 <load_command_from_command_history+0x6c>
        {
            return;
        }
        
        /* Returned home */
        if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_get_idx)
 8006d62:	2b07      	cmp	r3, #7
 8006d64:	d019      	beq.n	8006d9a <load_command_from_command_history+0x6e>
                return;
            }
        }
        else
        {
            if (cmd_hist_get_idx + 1 == cmd_hist_put_idx)
 8006d66:	1c59      	adds	r1, r3, #1
 8006d68:	428a      	cmp	r2, r1
 8006d6a:	d01d      	beq.n	8006da8 <load_command_from_command_history+0x7c>
                cmd_buf_reset();
                return;
            }
        }
        
        cmd_hist_get_idx++;
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	4a13      	ldr	r2, [pc, #76]	; (8006dbc <load_command_from_command_history+0x90>)
 8006d70:	6013      	str	r3, [r2, #0]
        if (SHELL_CMD_HISTORY_LEN == cmd_hist_get_idx)
 8006d72:	2b08      	cmp	r3, #8
 8006d74:	d01d      	beq.n	8006db2 <load_command_from_command_history+0x86>
        {
            cmd_hist_get_idx = 0;
        }
    }
    
    cmd_buf_reset();
 8006d76:	f7ff ffcb 	bl	8006d10 <cmd_buf_reset>
    strncpy(cmd_buf, cmd_hist[cmd_hist_get_idx], sizeof(cmd_buf));
 8006d7a:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <load_command_from_command_history+0x90>)
 8006d7c:	6819      	ldr	r1, [r3, #0]
 8006d7e:	4c11      	ldr	r4, [pc, #68]	; (8006dc4 <load_command_from_command_history+0x98>)
 8006d80:	2240      	movs	r2, #64	; 0x40
 8006d82:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <load_command_from_command_history+0x9c>)
 8006d84:	eb03 1181 	add.w	r1, r3, r1, lsl #6
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f002 f97f 	bl	800908c <strncpy>
    cmd_buf_idx = strlen(cmd_buf);
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f7f9 f9de 	bl	8000150 <strlen>
 8006d94:	4b0d      	ldr	r3, [pc, #52]	; (8006dcc <load_command_from_command_history+0xa0>)
 8006d96:	6018      	str	r0, [r3, #0]
}
 8006d98:	bd10      	pop	{r4, pc}
            if (0 == cmd_hist_put_idx)
 8006d9a:	2a00      	cmp	r2, #0
 8006d9c:	d1e6      	bne.n	8006d6c <load_command_from_command_history+0x40>
                cmd_hist_get_idx = 0;
 8006d9e:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <load_command_from_command_history+0x90>)
 8006da0:	601a      	str	r2, [r3, #0]
                cmd_buf_reset();
 8006da2:	f7ff ffb5 	bl	8006d10 <cmd_buf_reset>
                return;
 8006da6:	e7f7      	b.n	8006d98 <load_command_from_command_history+0x6c>
                cmd_hist_get_idx++;
 8006da8:	4b04      	ldr	r3, [pc, #16]	; (8006dbc <load_command_from_command_history+0x90>)
 8006daa:	6019      	str	r1, [r3, #0]
                cmd_buf_reset();
 8006dac:	f7ff ffb0 	bl	8006d10 <cmd_buf_reset>
                return;
 8006db0:	e7f2      	b.n	8006d98 <load_command_from_command_history+0x6c>
            cmd_hist_get_idx = 0;
 8006db2:	4613      	mov	r3, r2
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	e7dd      	b.n	8006d76 <load_command_from_command_history+0x4a>
 8006dba:	bf00      	nop
 8006dbc:	20000518 	.word	0x20000518
 8006dc0:	2000051c 	.word	0x2000051c
 8006dc4:	200002d4 	.word	0x200002d4
 8006dc8:	20000318 	.word	0x20000318
 8006dcc:	20000314 	.word	0x20000314

08006dd0 <uart_receive_byte>:
{
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	4604      	mov	r4, r0
	unsigned char data = tracer_getchar();
 8006dd4:	f7ff fc94 	bl	8006700 <tracer_getchar>
	if (data == 0)
 8006dd8:	b110      	cbz	r0, 8006de0 <uart_receive_byte+0x10>
		*byte = data;
 8006dda:	7020      	strb	r0, [r4, #0]
		return 1;
 8006ddc:	2001      	movs	r0, #1
}
 8006dde:	bd10      	pop	{r4, pc}
		*byte = 0;
 8006de0:	7020      	strb	r0, [r4, #0]
		return 0;
 8006de2:	e7fc      	b.n	8006dde <uart_receive_byte+0xe>

08006de4 <uart_send>:
{
 8006de4:	b508      	push	{r3, lr}
	tracer_puts(bytes,size);
 8006de6:	f7ff fc79 	bl	80066dc <tracer_puts>
}
 8006dea:	2001      	movs	r0, #1
 8006dec:	bd08      	pop	{r3, pc}

08006dee <send_vt100_key>:

static void send_vt100_key(vt100_key_t key)
{
 8006dee:	b508      	push	{r3, lr}
    vt100_keycode_t * keycode = vt100_get_keycode(key);
 8006df0:	f000 fff0 	bl	8007dd4 <vt100_get_keycode>
    if (NULL != keycode)
 8006df4:	b118      	cbz	r0, 8006dfe <send_vt100_key+0x10>
    {
        uart_send( keycode->code, keycode->code_len);
 8006df6:	7a01      	ldrb	r1, [r0, #8]
 8006df8:	6840      	ldr	r0, [r0, #4]
 8006dfa:	f7ff fff3 	bl	8006de4 <uart_send>
    }
}
 8006dfe:	bd08      	pop	{r3, pc}

08006e00 <print>:
{	
 8006e00:	b40f      	push	{r0, r1, r2, r3}
 8006e02:	b530      	push	{r4, r5, lr}
 8006e04:	b083      	sub	sp, #12
 8006e06:	ab06      	add	r3, sp, #24
 8006e08:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
 8006e0c:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 8006e0e:	4c0d      	ldr	r4, [pc, #52]	; (8006e44 <print+0x44>)
 8006e10:	217c      	movs	r1, #124	; 0x7c
 8006e12:	4620      	mov	r0, r4
 8006e14:	f002 fa62 	bl	80092dc <vsniprintf>
    strcat(dbgMsg, "\r\n");
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f7f9 f999 	bl	8000150 <strlen>
 8006e1e:	1822      	adds	r2, r4, r0
 8006e20:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <print+0x48>)
 8006e22:	8819      	ldrh	r1, [r3, #0]
 8006e24:	789b      	ldrb	r3, [r3, #2]
 8006e26:	5221      	strh	r1, [r4, r0]
 8006e28:	7093      	strb	r3, [r2, #2]
    len = strlen(dbgMsg);
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f7f9 f990 	bl	8000150 <strlen>
    (void) uart_send((uint8_t *)dbgMsg, (uint16_t) len);		
 8006e30:	b281      	uxth	r1, r0
 8006e32:	4620      	mov	r0, r4
 8006e34:	f7ff ffd6 	bl	8006de4 <uart_send>
}
 8006e38:	b003      	add	sp, #12
 8006e3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e3e:	b004      	add	sp, #16
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	20000520 	.word	0x20000520
 8006e48:	0800c324 	.word	0x0800c324

08006e4c <process_shell_cmd>:

static void process_shell_cmd(void)
{
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	b08a      	sub	sp, #40	; 0x28
    char * argv[MAX_ARGUMENT_NUM + 1];
	int argc = 0;
    int i;
	
	if (0 != strlen(cmd_buf))
 8006e50:	4b2e      	ldr	r3, [pc, #184]	; (8006f0c <process_shell_cmd+0xc0>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	bb1b      	cbnz	r3, 8006e9e <process_shell_cmd+0x52>
    {
        save_command_to_command_history();
    }
    
    argc = parse_shell_cmd(cmd_buf, argv);
 8006e56:	a901      	add	r1, sp, #4
 8006e58:	482c      	ldr	r0, [pc, #176]	; (8006f0c <process_shell_cmd+0xc0>)
 8006e5a:	f7ff ff41 	bl	8006ce0 <parse_shell_cmd>
 8006e5e:	4605      	mov	r5, r0
    
    if (0 == strncmp(argv[0], "help", SHELL_CMD_BUF_LEN))
 8006e60:	2240      	movs	r2, #64	; 0x40
 8006e62:	492b      	ldr	r1, [pc, #172]	; (8006f10 <process_shell_cmd+0xc4>)
 8006e64:	9801      	ldr	r0, [sp, #4]
 8006e66:	f002 f8ff 	bl	8009068 <strncmp>
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	b1d0      	cbz	r0, 8006ea4 <process_shell_cmd+0x58>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
        {
            print(shell_cmd_list[i].cmd);
        }
    }
    if (0 == strncmp(argv[0], "cls", SHELL_CMD_BUF_LEN))
 8006e6e:	9e01      	ldr	r6, [sp, #4]
 8006e70:	2240      	movs	r2, #64	; 0x40
 8006e72:	4928      	ldr	r1, [pc, #160]	; (8006f14 <process_shell_cmd+0xc8>)
 8006e74:	4630      	mov	r0, r6
 8006e76:	f002 f8f7 	bl	8009068 <strncmp>
 8006e7a:	b320      	cbz	r0, 8006ec6 <process_shell_cmd+0x7a>
        send_vt100_key(VT100_KEY_CLEAR_SCREEN);
        send_vt100_key(VT100_KEY_MOVE_CURSOR_HOME);
    }
    else
    {
        for(i = 0; i < SHELL_CMD_NUM; ++i)
 8006e7c:	2400      	movs	r4, #0
 8006e7e:	4b26      	ldr	r3, [pc, #152]	; (8006f18 <process_shell_cmd+0xcc>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	42a3      	cmp	r3, r4
 8006e84:	dd3d      	ble.n	8006f02 <process_shell_cmd+0xb6>
        {
            if(0 == strncmp(argv[0], shell_cmd_list[i].cmd, SHELL_CMD_BUF_LEN))
 8006e86:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8006e8a:	0093      	lsls	r3, r2, #2
 8006e8c:	2240      	movs	r2, #64	; 0x40
 8006e8e:	4923      	ldr	r1, [pc, #140]	; (8006f1c <process_shell_cmd+0xd0>)
 8006e90:	58c9      	ldr	r1, [r1, r3]
 8006e92:	4630      	mov	r0, r6
 8006e94:	f002 f8e8 	bl	8009068 <strncmp>
 8006e98:	b1f8      	cbz	r0, 8006eda <process_shell_cmd+0x8e>
        for(i = 0; i < SHELL_CMD_NUM; ++i)
 8006e9a:	3401      	adds	r4, #1
 8006e9c:	e7ef      	b.n	8006e7e <process_shell_cmd+0x32>
        save_command_to_command_history();
 8006e9e:	f7ff ff01 	bl	8006ca4 <save_command_to_command_history>
 8006ea2:	e7d8      	b.n	8006e56 <process_shell_cmd+0xa>
        print("");
 8006ea4:	481e      	ldr	r0, [pc, #120]	; (8006f20 <process_shell_cmd+0xd4>)
 8006ea6:	f7ff ffab 	bl	8006e00 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 8006eaa:	e007      	b.n	8006ebc <process_shell_cmd+0x70>
            print(shell_cmd_list[i].cmd);
 8006eac:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8006eb0:	0093      	lsls	r3, r2, #2
 8006eb2:	4a1a      	ldr	r2, [pc, #104]	; (8006f1c <process_shell_cmd+0xd0>)
 8006eb4:	58d0      	ldr	r0, [r2, r3]
 8006eb6:	f7ff ffa3 	bl	8006e00 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 8006eba:	3401      	adds	r4, #1
 8006ebc:	4b16      	ldr	r3, [pc, #88]	; (8006f18 <process_shell_cmd+0xcc>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	dcf3      	bgt.n	8006eac <process_shell_cmd+0x60>
 8006ec4:	e7d3      	b.n	8006e6e <process_shell_cmd+0x22>
        send_vt100_key(VT100_KEY_CLEAR_SCREEN);
 8006ec6:	200d      	movs	r0, #13
 8006ec8:	f7ff ff91 	bl	8006dee <send_vt100_key>
        send_vt100_key(VT100_KEY_MOVE_CURSOR_HOME);
 8006ecc:	200e      	movs	r0, #14
 8006ece:	f7ff ff8e 	bl	8006dee <send_vt100_key>
        }
        if (i == SHELL_CMD_NUM)
         print("???");
    }
    exit:
    cmd_buf_reset();
 8006ed2:	f7ff ff1d 	bl	8006d10 <cmd_buf_reset>
}
 8006ed6:	b00a      	add	sp, #40	; 0x28
 8006ed8:	bd70      	pop	{r4, r5, r6, pc}
                if(0 == shell_cmd_list[i].handler(argc, argv))
 8006eda:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006ede:	009a      	lsls	r2, r3, #2
 8006ee0:	4b0e      	ldr	r3, [pc, #56]	; (8006f1c <process_shell_cmd+0xd0>)
 8006ee2:	4413      	add	r3, r2
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	a901      	add	r1, sp, #4
 8006ee8:	4628      	mov	r0, r5
 8006eea:	4798      	blx	r3
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d1f0      	bne.n	8006ed2 <process_shell_cmd+0x86>
                    print(shell_cmd_list[i].desc);
 8006ef0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006ef4:	00a2      	lsls	r2, r4, #2
 8006ef6:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <process_shell_cmd+0xd0>)
 8006ef8:	4413      	add	r3, r2
 8006efa:	6858      	ldr	r0, [r3, #4]
 8006efc:	f7ff ff80 	bl	8006e00 <print>
 8006f00:	e7e7      	b.n	8006ed2 <process_shell_cmd+0x86>
        if (i == SHELL_CMD_NUM)
 8006f02:	d1e6      	bne.n	8006ed2 <process_shell_cmd+0x86>
         print("???");
 8006f04:	4807      	ldr	r0, [pc, #28]	; (8006f24 <process_shell_cmd+0xd8>)
 8006f06:	f7ff ff7b 	bl	8006e00 <print>
 8006f0a:	e7e2      	b.n	8006ed2 <process_shell_cmd+0x86>
 8006f0c:	200002d4 	.word	0x200002d4
 8006f10:	0800c328 	.word	0x0800c328
 8006f14:	0800c330 	.word	0x0800c330
 8006f18:	0800c33c 	.word	0x0800c33c
 8006f1c:	0800c3f0 	.word	0x0800c3f0
 8006f20:	0800c760 	.word	0x0800c760
 8006f24:	0800c334 	.word	0x0800c334

08006f28 <print_no_newline>:
{	
 8006f28:	b40f      	push	{r0, r1, r2, r3}
 8006f2a:	b510      	push	{r4, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	ab04      	add	r3, sp, #16
 8006f30:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
 8006f34:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 8006f36:	4c08      	ldr	r4, [pc, #32]	; (8006f58 <print_no_newline+0x30>)
 8006f38:	217c      	movs	r1, #124	; 0x7c
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f002 f9ce 	bl	80092dc <vsniprintf>
    (void) uart_send((uint8_t *)dbgMsg, (uint16_t) strlen(dbgMsg));		
 8006f40:	4620      	mov	r0, r4
 8006f42:	f7f9 f905 	bl	8000150 <strlen>
 8006f46:	b281      	uxth	r1, r0
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f7ff ff4b 	bl	8006de4 <uart_send>
}
 8006f4e:	b002      	add	sp, #8
 8006f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f54:	b004      	add	sp, #16
 8006f56:	4770      	bx	lr
 8006f58:	20000520 	.word	0x20000520

08006f5c <shell_process>:

void shell_process(void)
{
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	b082      	sub	sp, #8
	char byte;
	const char prompt[] = "DBG>";
 8006f60:	4b38      	ldr	r3, [pc, #224]	; (8007044 <shell_process+0xe8>)
 8006f62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f66:	9000      	str	r0, [sp, #0]
 8006f68:	f88d 1004 	strb.w	r1, [sp, #4]
	
	//Both Ports are set to Serial DMX
	if (UART_mode_SERIAL && UART_mode_USB)
 8006f6c:	4b36      	ldr	r3, [pc, #216]	; (8007048 <shell_process+0xec>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	b16b      	cbz	r3, 8006f8e <shell_process+0x32>
 8006f72:	4b36      	ldr	r3, [pc, #216]	; (800704c <shell_process+0xf0>)
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	b153      	cbz	r3, 8006f8e <shell_process+0x32>
            }
            load_command_from_command_history(1);
            print_no_newline(cmd_buf);
        }
	}
}
 8006f78:	b002      	add	sp, #8
 8006f7a:	bd10      	pop	{r4, pc}
            cmd_buf_add_char(byte);
 8006f7c:	ac02      	add	r4, sp, #8
 8006f7e:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 8006f82:	f7ff fe71 	bl	8006c68 <cmd_buf_add_char>
            uart_send((uint8_t*) &byte, 1);
 8006f86:	2101      	movs	r1, #1
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f7ff ff2b 	bl	8006de4 <uart_send>
	while (1 == uart_receive_byte((uint8_t*)&byte))
 8006f8e:	f10d 0007 	add.w	r0, sp, #7
 8006f92:	f7ff ff1d 	bl	8006dd0 <uart_receive_byte>
 8006f96:	2801      	cmp	r0, #1
 8006f98:	d1ee      	bne.n	8006f78 <shell_process+0x1c>
        vt100_key_t key = vt100_process_byte(byte);
 8006f9a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006f9e:	f000 fee9 	bl	8007d74 <vt100_process_byte>
        if (VT100_KEY_PRINTABLE == key)
 8006fa2:	2801      	cmp	r0, #1
 8006fa4:	d0ea      	beq.n	8006f7c <shell_process+0x20>
        else if (VT100_KEY_ENTER == key)
 8006fa6:	2808      	cmp	r0, #8
 8006fa8:	d014      	beq.n	8006fd4 <shell_process+0x78>
        else if (VT100_KEY_INVALID == key)
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d0ef      	beq.n	8006f8e <shell_process+0x32>
        else if (VT100_KEY_BACKSPACE == key)
 8006fae:	2807      	cmp	r0, #7
 8006fb0:	d01f      	beq.n	8006ff2 <shell_process+0x96>
        else if (VT100_KEY_CURSOR_UP == key)
 8006fb2:	2802      	cmp	r0, #2
 8006fb4:	d026      	beq.n	8007004 <shell_process+0xa8>
        else if (VT100_KEY_CURSOR_DOWN == key)
 8006fb6:	2803      	cmp	r0, #3
 8006fb8:	d1e9      	bne.n	8006f8e <shell_process+0x32>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 8006fba:	200b      	movs	r0, #11
 8006fbc:	f7ff ff17 	bl	8006dee <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 8006fc0:	2400      	movs	r4, #0
 8006fc2:	4b23      	ldr	r3, [pc, #140]	; (8007050 <shell_process+0xf4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	42a3      	cmp	r3, r4
 8006fc8:	dd34      	ble.n	8007034 <shell_process+0xd8>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 8006fca:	200c      	movs	r0, #12
 8006fcc:	f7ff ff0f 	bl	8006dee <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 8006fd0:	3401      	adds	r4, #1
 8006fd2:	e7f6      	b.n	8006fc2 <shell_process+0x66>
			print("");
 8006fd4:	481f      	ldr	r0, [pc, #124]	; (8007054 <shell_process+0xf8>)
 8006fd6:	f7ff ff13 	bl	8006e00 <print>
			process_shell_cmd();
 8006fda:	f7ff ff37 	bl	8006e4c <process_shell_cmd>
            uart_send((uint8_t*) &byte, 1);
 8006fde:	2101      	movs	r1, #1
 8006fe0:	f10d 0007 	add.w	r0, sp, #7
 8006fe4:	f7ff fefe 	bl	8006de4 <uart_send>
			print_no_newline("\n%s", prompt);
 8006fe8:	4669      	mov	r1, sp
 8006fea:	481b      	ldr	r0, [pc, #108]	; (8007058 <shell_process+0xfc>)
 8006fec:	f7ff ff9c 	bl	8006f28 <print_no_newline>
 8006ff0:	e7cd      	b.n	8006f8e <shell_process+0x32>
            cmd_buf_remove_char();
 8006ff2:	f7ff fe47 	bl	8006c84 <cmd_buf_remove_char>
            send_vt100_key(VT100_KEY_BACKSPACE);
 8006ff6:	2007      	movs	r0, #7
 8006ff8:	f7ff fef9 	bl	8006dee <send_vt100_key>
            send_vt100_key(VT100_KEY_CLEAR_EOL);
 8006ffc:	200a      	movs	r0, #10
 8006ffe:	f7ff fef6 	bl	8006dee <send_vt100_key>
 8007002:	e7c4      	b.n	8006f8e <shell_process+0x32>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 8007004:	200b      	movs	r0, #11
 8007006:	f7ff fef2 	bl	8006dee <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 800700a:	2400      	movs	r4, #0
 800700c:	e003      	b.n	8007016 <shell_process+0xba>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 800700e:	200c      	movs	r0, #12
 8007010:	f7ff feed 	bl	8006dee <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 8007014:	3401      	adds	r4, #1
 8007016:	4b0e      	ldr	r3, [pc, #56]	; (8007050 <shell_process+0xf4>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3304      	adds	r3, #4
 800701c:	42a3      	cmp	r3, r4
 800701e:	d8f6      	bhi.n	800700e <shell_process+0xb2>
			print_no_newline(prompt);
 8007020:	4668      	mov	r0, sp
 8007022:	f7ff ff81 	bl	8006f28 <print_no_newline>
            load_command_from_command_history(0);
 8007026:	2000      	movs	r0, #0
 8007028:	f7ff fe80 	bl	8006d2c <load_command_from_command_history>
            print_no_newline(cmd_buf);
 800702c:	480b      	ldr	r0, [pc, #44]	; (800705c <shell_process+0x100>)
 800702e:	f7ff ff7b 	bl	8006f28 <print_no_newline>
 8007032:	e7ac      	b.n	8006f8e <shell_process+0x32>
            load_command_from_command_history(1);
 8007034:	2001      	movs	r0, #1
 8007036:	f7ff fe79 	bl	8006d2c <load_command_from_command_history>
            print_no_newline(cmd_buf);
 800703a:	4808      	ldr	r0, [pc, #32]	; (800705c <shell_process+0x100>)
 800703c:	f7ff ff74 	bl	8006f28 <print_no_newline>
 8007040:	e7a5      	b.n	8006f8e <shell_process+0x32>
 8007042:	bf00      	nop
 8007044:	0800bdec 	.word	0x0800bdec
 8007048:	200002c4 	.word	0x200002c4
 800704c:	200002c5 	.word	0x200002c5
 8007050:	20000314 	.word	0x20000314
 8007054:	0800c760 	.word	0x0800c760
 8007058:	0800c338 	.word	0x0800c338
 800705c:	200002d4 	.word	0x200002d4

08007060 <shell_cmd_settargetfps>:
	return 1;
}

static int shell_cmd_settargetfps(int argc, char ** argv)
{
	if (argc == 1)
 8007060:	2801      	cmp	r0, #1
 8007062:	d001      	beq.n	8007068 <shell_cmd_settargetfps+0x8>
	{
		settings.frame_ms_target =  1000/atoi(argv[1]);
	}
	else
	{
		return 0;
 8007064:	2000      	movs	r0, #0
	}
	return 1;
}
 8007066:	4770      	bx	lr
{
 8007068:	b510      	push	{r4, lr}
 800706a:	4604      	mov	r4, r0
		settings.frame_ms_target =  1000/atoi(argv[1]);
 800706c:	6848      	ldr	r0, [r1, #4]
 800706e:	f001 fedc 	bl	8008e2a <atoi>
 8007072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007076:	fb93 f0f0 	sdiv	r0, r3, r0
 800707a:	4b02      	ldr	r3, [pc, #8]	; (8007084 <shell_cmd_settargetfps+0x24>)
 800707c:	62d8      	str	r0, [r3, #44]	; 0x2c
	return 1;
 800707e:	4620      	mov	r0, r4
}
 8007080:	bd10      	pop	{r4, pc}
 8007082:	bf00      	nop
 8007084:	20000780 	.word	0x20000780

08007088 <shell_cmd_switchuartmode>:
{
 8007088:	b508      	push	{r3, lr}
	if (argc == 2)
 800708a:	2802      	cmp	r0, #2
 800708c:	d002      	beq.n	8007094 <shell_cmd_switchuartmode+0xc>
		return 0;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	bd08      	pop	{r3, pc}
		switch (atoi(argv[1]))
 8007094:	6848      	ldr	r0, [r1, #4]
 8007096:	f001 fec8 	bl	8008e2a <atoi>
 800709a:	4603      	mov	r3, r0
 800709c:	b118      	cbz	r0, 80070a6 <shell_cmd_switchuartmode+0x1e>
 800709e:	2801      	cmp	r0, #1
 80070a0:	d005      	beq.n	80070ae <shell_cmd_switchuartmode+0x26>
	return 1;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e7f4      	b.n	8007090 <shell_cmd_switchuartmode+0x8>
			UART_mode_SERIAL = (uint8_t)UART_MODE_DMX;
 80070a6:	2301      	movs	r3, #1
 80070a8:	4a03      	ldr	r2, [pc, #12]	; (80070b8 <shell_cmd_switchuartmode+0x30>)
 80070aa:	6013      	str	r3, [r2, #0]
			break;
 80070ac:	e7f0      	b.n	8007090 <shell_cmd_switchuartmode+0x8>
			UART_mode_USB = (uint8_t)UART_MODE_DMX;
 80070ae:	4a03      	ldr	r2, [pc, #12]	; (80070bc <shell_cmd_switchuartmode+0x34>)
 80070b0:	2101      	movs	r1, #1
 80070b2:	6011      	str	r1, [r2, #0]
			break;
 80070b4:	e7ec      	b.n	8007090 <shell_cmd_switchuartmode+0x8>
 80070b6:	bf00      	nop
 80070b8:	200002c4 	.word	0x200002c4
 80070bc:	200002c5 	.word	0x200002c5

080070c0 <shell_cmd_setuartmode>:
{
 80070c0:	b538      	push	{r3, r4, r5, lr}
	if (argc == 2)
 80070c2:	2802      	cmp	r0, #2
 80070c4:	d002      	beq.n	80070cc <shell_cmd_setuartmode+0xc>
		return 0;
 80070c6:	2400      	movs	r4, #0
}
 80070c8:	4620      	mov	r0, r4
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	460d      	mov	r5, r1
		switch (atoi(argv[1]))
 80070ce:	6848      	ldr	r0, [r1, #4]
 80070d0:	f001 feab 	bl	8008e2a <atoi>
 80070d4:	4604      	mov	r4, r0
 80070d6:	b118      	cbz	r0, 80070e0 <shell_cmd_setuartmode+0x20>
 80070d8:	2801      	cmp	r0, #1
 80070da:	d009      	beq.n	80070f0 <shell_cmd_setuartmode+0x30>
	return 1;
 80070dc:	2401      	movs	r4, #1
 80070de:	e7f3      	b.n	80070c8 <shell_cmd_setuartmode+0x8>
			settings.UART_Mode_UART = atoi(argv[2]);
 80070e0:	68a8      	ldr	r0, [r5, #8]
 80070e2:	f001 fea2 	bl	8008e2a <atoi>
 80070e6:	4b06      	ldr	r3, [pc, #24]	; (8007100 <shell_cmd_setuartmode+0x40>)
 80070e8:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
	return 1;
 80070ec:	2401      	movs	r4, #1
			break;
 80070ee:	e7eb      	b.n	80070c8 <shell_cmd_setuartmode+0x8>
			settings.UART_Mode_USB = atoi(argv[2]);
 80070f0:	68a8      	ldr	r0, [r5, #8]
 80070f2:	f001 fe9a 	bl	8008e2a <atoi>
 80070f6:	4b02      	ldr	r3, [pc, #8]	; (8007100 <shell_cmd_setuartmode+0x40>)
 80070f8:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37
			break;
 80070fc:	e7e4      	b.n	80070c8 <shell_cmd_setuartmode+0x8>
 80070fe:	bf00      	nop
 8007100:	20000780 	.word	0x20000780

08007104 <shell_cmd_setstriplength>:
{
 8007104:	b538      	push	{r3, r4, r5, lr}
	if (argc == 2)
 8007106:	2802      	cmp	r0, #2
 8007108:	d002      	beq.n	8007110 <shell_cmd_setstriplength+0xc>
		return 0;
 800710a:	2400      	movs	r4, #0
}
 800710c:	4620      	mov	r0, r4
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	460d      	mov	r5, r1
		switch (atoi(argv[1]))
 8007112:	6848      	ldr	r0, [r1, #4]
 8007114:	f001 fe89 	bl	8008e2a <atoi>
 8007118:	4604      	mov	r4, r0
 800711a:	b118      	cbz	r0, 8007124 <shell_cmd_setstriplength+0x20>
 800711c:	2801      	cmp	r0, #1
 800711e:	d008      	beq.n	8007132 <shell_cmd_setstriplength+0x2e>
	return 1;
 8007120:	2401      	movs	r4, #1
 8007122:	e7f3      	b.n	800710c <shell_cmd_setstriplength+0x8>
			settings.strip1_length = atoi(argv[2]);
 8007124:	68a8      	ldr	r0, [r5, #8]
 8007126:	f001 fe80 	bl	8008e2a <atoi>
 800712a:	4b05      	ldr	r3, [pc, #20]	; (8007140 <shell_cmd_setstriplength+0x3c>)
 800712c:	8658      	strh	r0, [r3, #50]	; 0x32
	return 1;
 800712e:	2401      	movs	r4, #1
			break;
 8007130:	e7ec      	b.n	800710c <shell_cmd_setstriplength+0x8>
			settings.strip2_length = atoi(argv[2]);
 8007132:	68a8      	ldr	r0, [r5, #8]
 8007134:	f001 fe79 	bl	8008e2a <atoi>
 8007138:	4b01      	ldr	r3, [pc, #4]	; (8007140 <shell_cmd_setstriplength+0x3c>)
 800713a:	8698      	strh	r0, [r3, #52]	; 0x34
			break;
 800713c:	e7e6      	b.n	800710c <shell_cmd_setstriplength+0x8>
 800713e:	bf00      	nop
 8007140:	20000780 	.word	0x20000780

08007144 <shell_cmd_settriggerctrl>:
{
 8007144:	b570      	push	{r4, r5, r6, lr}
	if (argc == 5)
 8007146:	2805      	cmp	r0, #5
 8007148:	d002      	beq.n	8007150 <shell_cmd_settriggerctrl+0xc>
		return 0;
 800714a:	2400      	movs	r4, #0
}
 800714c:	4620      	mov	r0, r4
 800714e:	bd70      	pop	{r4, r5, r6, pc}
 8007150:	460d      	mov	r5, r1
		switch (atoi(argv[1]))
 8007152:	6848      	ldr	r0, [r1, #4]
 8007154:	f001 fe69 	bl	8008e2a <atoi>
 8007158:	4604      	mov	r4, r0
 800715a:	b118      	cbz	r0, 8007164 <shell_cmd_settriggerctrl+0x20>
 800715c:	2801      	cmp	r0, #1
 800715e:	d018      	beq.n	8007192 <shell_cmd_settriggerctrl+0x4e>
	return 1;
 8007160:	2401      	movs	r4, #1
 8007162:	e7f3      	b.n	800714c <shell_cmd_settriggerctrl+0x8>
			settings.trigger_reg_hilo_A0 = atoi(argv[2]);
 8007164:	68a8      	ldr	r0, [r5, #8]
 8007166:	f001 fe60 	bl	8008e2a <atoi>
 800716a:	4c15      	ldr	r4, [pc, #84]	; (80071c0 <shell_cmd_settriggerctrl+0x7c>)
 800716c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
			settings.trigger_val_hilo_A0 = atoi(argv[3]);
 8007170:	68e8      	ldr	r0, [r5, #12]
 8007172:	f001 fe5a 	bl	8008e2a <atoi>
 8007176:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
			settings.trigger_reg_lohi_A0 = atoi(argv[4]);
 800717a:	6928      	ldr	r0, [r5, #16]
 800717c:	f001 fe55 	bl	8008e2a <atoi>
 8007180:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
			settings.trigger_val_lohi_A0 = atoi(argv[5]);
 8007184:	6968      	ldr	r0, [r5, #20]
 8007186:	f001 fe50 	bl	8008e2a <atoi>
 800718a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	return 1;
 800718e:	2401      	movs	r4, #1
			break;
 8007190:	e7dc      	b.n	800714c <shell_cmd_settriggerctrl+0x8>
			settings.trigger_reg_hilo_A1 = atoi(argv[2]);
 8007192:	68a8      	ldr	r0, [r5, #8]
 8007194:	f001 fe49 	bl	8008e2a <atoi>
 8007198:	4e09      	ldr	r6, [pc, #36]	; (80071c0 <shell_cmd_settriggerctrl+0x7c>)
 800719a:	f886 0043 	strb.w	r0, [r6, #67]	; 0x43
			settings.trigger_val_hilo_A1 = atoi(argv[3]);
 800719e:	68e8      	ldr	r0, [r5, #12]
 80071a0:	f001 fe43 	bl	8008e2a <atoi>
 80071a4:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
			settings.trigger_reg_lohi_A1 = atoi(argv[4]);
 80071a8:	6928      	ldr	r0, [r5, #16]
 80071aa:	f001 fe3e 	bl	8008e2a <atoi>
 80071ae:	f886 0041 	strb.w	r0, [r6, #65]	; 0x41
			settings.trigger_val_lohi_A1 = atoi(argv[5]);
 80071b2:	6968      	ldr	r0, [r5, #20]
 80071b4:	f001 fe39 	bl	8008e2a <atoi>
 80071b8:	f886 0042 	strb.w	r0, [r6, #66]	; 0x42
			break;
 80071bc:	e7c6      	b.n	800714c <shell_cmd_settriggerctrl+0x8>
 80071be:	bf00      	nop
 80071c0:	20000780 	.word	0x20000780

080071c4 <shell_cmd_settriggerconfig>:
{
 80071c4:	b570      	push	{r4, r5, r6, lr}
	if (argc == 4)
 80071c6:	2804      	cmp	r0, #4
 80071c8:	d002      	beq.n	80071d0 <shell_cmd_settriggerconfig+0xc>
		return 0;
 80071ca:	2400      	movs	r4, #0
}
 80071cc:	4620      	mov	r0, r4
 80071ce:	bd70      	pop	{r4, r5, r6, pc}
 80071d0:	460d      	mov	r5, r1
		switch (atoi(argv[1]))
 80071d2:	6848      	ldr	r0, [r1, #4]
 80071d4:	f001 fe29 	bl	8008e2a <atoi>
 80071d8:	4604      	mov	r4, r0
 80071da:	b118      	cbz	r0, 80071e4 <shell_cmd_settriggerconfig+0x20>
 80071dc:	2801      	cmp	r0, #1
 80071de:	d013      	beq.n	8007208 <shell_cmd_settriggerconfig+0x44>
	return 1;
 80071e0:	2401      	movs	r4, #1
 80071e2:	e7f3      	b.n	80071cc <shell_cmd_settriggerconfig+0x8>
			settings.trigger_mode_A0 = atoi(argv[2]);
 80071e4:	68a8      	ldr	r0, [r5, #8]
 80071e6:	f001 fe20 	bl	8008e2a <atoi>
 80071ea:	4c10      	ldr	r4, [pc, #64]	; (800722c <shell_cmd_settriggerconfig+0x68>)
 80071ec:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
			settings.trigger_reg_A0 = atoi(argv[3]);
 80071f0:	68e8      	ldr	r0, [r5, #12]
 80071f2:	f001 fe1a 	bl	8008e2a <atoi>
 80071f6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
			settings.trigger_level_A0 = atoi(argv[4]);
 80071fa:	6928      	ldr	r0, [r5, #16]
 80071fc:	f001 fe15 	bl	8008e2a <atoi>
 8007200:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
	return 1;
 8007204:	2401      	movs	r4, #1
			break;
 8007206:	e7e1      	b.n	80071cc <shell_cmd_settriggerconfig+0x8>
			settings.trigger_mode_A1 = atoi(argv[2]);
 8007208:	68a8      	ldr	r0, [r5, #8]
 800720a:	f001 fe0e 	bl	8008e2a <atoi>
 800720e:	4e07      	ldr	r6, [pc, #28]	; (800722c <shell_cmd_settriggerconfig+0x68>)
 8007210:	f886 003f 	strb.w	r0, [r6, #63]	; 0x3f
			settings.trigger_reg_A1 = atoi(argv[3]);
 8007214:	68e8      	ldr	r0, [r5, #12]
 8007216:	f001 fe08 	bl	8008e2a <atoi>
 800721a:	f886 0040 	strb.w	r0, [r6, #64]	; 0x40
			settings.trigger_level_A1 = atoi(argv[4]);
 800721e:	6928      	ldr	r0, [r5, #16]
 8007220:	f001 fe03 	bl	8008e2a <atoi>
 8007224:	f886 0045 	strb.w	r0, [r6, #69]	; 0x45
			break;
 8007228:	e7d0      	b.n	80071cc <shell_cmd_settriggerconfig+0x8>
 800722a:	bf00      	nop
 800722c:	20000780 	.word	0x20000780

08007230 <shell_cmd_setoffset>:
	if (argc == 2)
 8007230:	2802      	cmp	r0, #2
 8007232:	d001      	beq.n	8007238 <shell_cmd_setoffset+0x8>
		return 0;
 8007234:	2000      	movs	r0, #0
}
 8007236:	4770      	bx	lr
{
 8007238:	b510      	push	{r4, lr}
 800723a:	460c      	mov	r4, r1
		switch (atoi(argv[1]))
 800723c:	6848      	ldr	r0, [r1, #4]
 800723e:	f001 fdf4 	bl	8008e2a <atoi>
 8007242:	b148      	cbz	r0, 8007258 <shell_cmd_setoffset+0x28>
 8007244:	2802      	cmp	r0, #2
 8007246:	d00f      	beq.n	8007268 <shell_cmd_setoffset+0x38>
			settings.offset_green = atoi(argv[2]);
 8007248:	68a0      	ldr	r0, [r4, #8]
 800724a:	f001 fdee 	bl	8008e2a <atoi>
 800724e:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <shell_cmd_setoffset+0x48>)
 8007250:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
	return 1;
 8007254:	2001      	movs	r0, #1
			break;
 8007256:	e006      	b.n	8007266 <shell_cmd_setoffset+0x36>
			settings.offset_red = atoi(argv[2]);
 8007258:	68a0      	ldr	r0, [r4, #8]
 800725a:	f001 fde6 	bl	8008e2a <atoi>
 800725e:	4b06      	ldr	r3, [pc, #24]	; (8007278 <shell_cmd_setoffset+0x48>)
 8007260:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
	return 1;
 8007264:	2001      	movs	r0, #1
}
 8007266:	bd10      	pop	{r4, pc}
			settings.offset_blue = atoi(argv[2]);
 8007268:	68a0      	ldr	r0, [r4, #8]
 800726a:	f001 fdde 	bl	8008e2a <atoi>
 800726e:	4b02      	ldr	r3, [pc, #8]	; (8007278 <shell_cmd_setoffset+0x48>)
 8007270:	f8a3 0052 	strh.w	r0, [r3, #82]	; 0x52
	return 1;
 8007274:	2001      	movs	r0, #1
			break;
 8007276:	e7f6      	b.n	8007266 <shell_cmd_setoffset+0x36>
 8007278:	20000780 	.word	0x20000780

0800727c <shell_cmd_setgain>:
	if (argc == 2)
 800727c:	2802      	cmp	r0, #2
 800727e:	d001      	beq.n	8007284 <shell_cmd_setgain+0x8>
		return 0;
 8007280:	2000      	movs	r0, #0
}
 8007282:	4770      	bx	lr
{
 8007284:	b510      	push	{r4, lr}
 8007286:	460c      	mov	r4, r1
		switch (atoi(argv[1]))
 8007288:	6848      	ldr	r0, [r1, #4]
 800728a:	f001 fdce 	bl	8008e2a <atoi>
 800728e:	b148      	cbz	r0, 80072a4 <shell_cmd_setgain+0x28>
 8007290:	2802      	cmp	r0, #2
 8007292:	d00f      	beq.n	80072b4 <shell_cmd_setgain+0x38>
			settings.gain_green = atoi(argv[2]);
 8007294:	68a0      	ldr	r0, [r4, #8]
 8007296:	f001 fdc8 	bl	8008e2a <atoi>
 800729a:	4b0a      	ldr	r3, [pc, #40]	; (80072c4 <shell_cmd_setgain+0x48>)
 800729c:	f8a3 004e 	strh.w	r0, [r3, #78]	; 0x4e
	return 1;
 80072a0:	2001      	movs	r0, #1
			break;
 80072a2:	e006      	b.n	80072b2 <shell_cmd_setgain+0x36>
			settings.gain_red = atoi(argv[2]);
 80072a4:	68a0      	ldr	r0, [r4, #8]
 80072a6:	f001 fdc0 	bl	8008e2a <atoi>
 80072aa:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <shell_cmd_setgain+0x48>)
 80072ac:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
	return 1;
 80072b0:	2001      	movs	r0, #1
}
 80072b2:	bd10      	pop	{r4, pc}
			settings.gain_blue = atoi(argv[2]);
 80072b4:	68a0      	ldr	r0, [r4, #8]
 80072b6:	f001 fdb8 	bl	8008e2a <atoi>
 80072ba:	4b02      	ldr	r3, [pc, #8]	; (80072c4 <shell_cmd_setgain+0x48>)
 80072bc:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
	return 1;
 80072c0:	2001      	movs	r0, #1
			break;
 80072c2:	e7f6      	b.n	80072b2 <shell_cmd_setgain+0x36>
 80072c4:	20000780 	.word	0x20000780

080072c8 <shell_cmd_timerinit>:

	uint32_t div;



	if (argc == 4)
 80072c8:	2804      	cmp	r0, #4
 80072ca:	d001      	beq.n	80072d0 <shell_cmd_timerinit+0x8>
		PWM_Timer_Init((pwmtimerid_t) atoi(argv[1]),atoi(argv[2]),atoi(argv[3]),div,1);

	}
	else
	{
		return 0;
 80072cc:	2000      	movs	r0, #0
	}
	return 1;
}
 80072ce:	4770      	bx	lr
{
 80072d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072d2:	b083      	sub	sp, #12
 80072d4:	460c      	mov	r4, r1
		switch (atoi(argv[4]))
 80072d6:	6908      	ldr	r0, [r1, #16]
 80072d8:	f001 fda7 	bl	8008e2a <atoi>
 80072dc:	2802      	cmp	r0, #2
 80072de:	d01b      	beq.n	8007318 <shell_cmd_timerinit+0x50>
 80072e0:	2804      	cmp	r0, #4
 80072e2:	d117      	bne.n	8007314 <shell_cmd_timerinit+0x4c>
			div = TIM_CLOCKDIVISION_DIV4;
 80072e4:	f44f 7700 	mov.w	r7, #512	; 0x200
		PWM_Timer_Init((pwmtimerid_t) atoi(argv[1]),atoi(argv[2]),atoi(argv[3]),div,1);
 80072e8:	6860      	ldr	r0, [r4, #4]
 80072ea:	f001 fd9e 	bl	8008e2a <atoi>
 80072ee:	4605      	mov	r5, r0
 80072f0:	68a0      	ldr	r0, [r4, #8]
 80072f2:	f001 fd9a 	bl	8008e2a <atoi>
 80072f6:	4606      	mov	r6, r0
 80072f8:	68e0      	ldr	r0, [r4, #12]
 80072fa:	f001 fd96 	bl	8008e2a <atoi>
 80072fe:	2401      	movs	r4, #1
 8007300:	9400      	str	r4, [sp, #0]
 8007302:	463b      	mov	r3, r7
 8007304:	4602      	mov	r2, r0
 8007306:	4631      	mov	r1, r6
 8007308:	b2e8      	uxtb	r0, r5
 800730a:	f7fe ff8f 	bl	800622c <PWM_Timer_Init>
	return 1;
 800730e:	4620      	mov	r0, r4
}
 8007310:	b003      	add	sp, #12
 8007312:	bdf0      	pop	{r4, r5, r6, r7, pc}
			div = TIM_CLOCKDIVISION_DIV1;
 8007314:	2700      	movs	r7, #0
			break;
 8007316:	e7e7      	b.n	80072e8 <shell_cmd_timerinit+0x20>
			div = TIM_CLOCKDIVISION_DIV2;
 8007318:	f44f 7780 	mov.w	r7, #256	; 0x100
 800731c:	e7e4      	b.n	80072e8 <shell_cmd_timerinit+0x20>
	...

08007320 <shell_cmd_currentfps>:
{
 8007320:	b508      	push	{r3, lr}
	if (frame_ms != 0)
 8007322:	4b09      	ldr	r3, [pc, #36]	; (8007348 <shell_cmd_currentfps+0x28>)
 8007324:	6818      	ldr	r0, [r3, #0]
 8007326:	b908      	cbnz	r0, 800732c <shell_cmd_currentfps+0xc>
}
 8007328:	2001      	movs	r0, #1
 800732a:	bd08      	pop	{r3, pc}
		print("Current FPS: %d",(uint16_t)((float)1000/(float)frame_ms));
 800732c:	f7f9 fcb2 	bl	8000c94 <__aeabi_ui2f>
 8007330:	4601      	mov	r1, r0
 8007332:	4806      	ldr	r0, [pc, #24]	; (800734c <shell_cmd_currentfps+0x2c>)
 8007334:	f7f9 fdba 	bl	8000eac <__aeabi_fdiv>
 8007338:	f7f9 fef0 	bl	800111c <__aeabi_f2uiz>
 800733c:	b281      	uxth	r1, r0
 800733e:	4804      	ldr	r0, [pc, #16]	; (8007350 <shell_cmd_currentfps+0x30>)
 8007340:	f7ff fd5e 	bl	8006e00 <print>
 8007344:	e7f0      	b.n	8007328 <shell_cmd_currentfps+0x8>
 8007346:	bf00      	nop
 8007348:	20000950 	.word	0x20000950
 800734c:	447a0000 	.word	0x447a0000
 8007350:	0800c340 	.word	0x0800c340

08007354 <shell_cmd_setfxmultiplier>:
{
 8007354:	b508      	push	{r3, lr}
	uint8_t val = atoi(argv[1]);
 8007356:	6848      	ldr	r0, [r1, #4]
 8007358:	f001 fd67 	bl	8008e2a <atoi>
 800735c:	b2c0      	uxtb	r0, r0
	if ((val == 4) || (val == 2) || (val == 1))
 800735e:	2804      	cmp	r0, #4
 8007360:	d00b      	beq.n	800737a <shell_cmd_setfxmultiplier+0x26>
 8007362:	2802      	cmp	r0, #2
 8007364:	d009      	beq.n	800737a <shell_cmd_setfxmultiplier+0x26>
 8007366:	2801      	cmp	r0, #1
 8007368:	d007      	beq.n	800737a <shell_cmd_setfxmultiplier+0x26>
		print("Invalid Multiplier");
 800736a:	4806      	ldr	r0, [pc, #24]	; (8007384 <shell_cmd_setfxmultiplier+0x30>)
 800736c:	f7ff fd48 	bl	8006e00 <print>
		settings.fx_multiplier = 4;
 8007370:	4b05      	ldr	r3, [pc, #20]	; (8007388 <shell_cmd_setfxmultiplier+0x34>)
 8007372:	2204      	movs	r2, #4
 8007374:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8007378:	e002      	b.n	8007380 <shell_cmd_setfxmultiplier+0x2c>
		settings.fx_multiplier = val;
 800737a:	4b03      	ldr	r3, [pc, #12]	; (8007388 <shell_cmd_setfxmultiplier+0x34>)
 800737c:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
}
 8007380:	2001      	movs	r0, #1
 8007382:	bd08      	pop	{r3, pc}
 8007384:	0800c504 	.word	0x0800c504
 8007388:	20000780 	.word	0x20000780

0800738c <shell_cmd_test>:
	if (argc == 1)
 800738c:	2801      	cmp	r0, #1
 800738e:	d001      	beq.n	8007394 <shell_cmd_test+0x8>
	return 0;
 8007390:	2000      	movs	r0, #0
}
 8007392:	4770      	bx	lr
{
 8007394:	b510      	push	{r4, lr}
 8007396:	4604      	mov	r4, r0
		print("Loopback Data: %s",argv[1]);
 8007398:	6849      	ldr	r1, [r1, #4]
 800739a:	4802      	ldr	r0, [pc, #8]	; (80073a4 <shell_cmd_test+0x18>)
 800739c:	f7ff fd30 	bl	8006e00 <print>
		return 1;
 80073a0:	4620      	mov	r0, r4
}
 80073a2:	bd10      	pop	{r4, pc}
 80073a4:	0800c534 	.word	0x0800c534

080073a8 <shell_cmd_dumpadc>:
{
 80073a8:	b508      	push	{r3, lr}
	print_adc_data();
 80073aa:	f000 fbef 	bl	8007b8c <print_adc_data>
}
 80073ae:	2001      	movs	r0, #1
 80073b0:	bd08      	pop	{r3, pc}
	...

080073b4 <shell_cmd_storedefaultregs>:
{
 80073b4:	b510      	push	{r4, lr}
	settings.pwm_ch1_r = get_reg(CH1_RED);
 80073b6:	2001      	movs	r0, #1
 80073b8:	f7fd fd7e 	bl	8004eb8 <get_reg>
 80073bc:	4c39      	ldr	r4, [pc, #228]	; (80074a4 <shell_cmd_storedefaultregs+0xf0>)
 80073be:	8120      	strh	r0, [r4, #8]
	settings.pwm_ch1_g = get_reg(CH1_GREEN);
 80073c0:	2002      	movs	r0, #2
 80073c2:	f7fd fd79 	bl	8004eb8 <get_reg>
 80073c6:	8160      	strh	r0, [r4, #10]
	settings.pwm_ch1_b = get_reg(CH1_BLUE);
 80073c8:	2003      	movs	r0, #3
 80073ca:	f7fd fd75 	bl	8004eb8 <get_reg>
 80073ce:	81a0      	strh	r0, [r4, #12]
	settings.pwm_ch2_r = get_reg(CH2_RED);
 80073d0:	2004      	movs	r0, #4
 80073d2:	f7fd fd71 	bl	8004eb8 <get_reg>
 80073d6:	81e0      	strh	r0, [r4, #14]
	settings.pwm_ch2_g = get_reg(CH2_GREEN);
 80073d8:	2005      	movs	r0, #5
 80073da:	f7fd fd6d 	bl	8004eb8 <get_reg>
 80073de:	8220      	strh	r0, [r4, #16]
	settings.pwm_ch2_b = get_reg(CH2_BLUE);
 80073e0:	2006      	movs	r0, #6
 80073e2:	f7fd fd69 	bl	8004eb8 <get_reg>
 80073e6:	8260      	strh	r0, [r4, #18]
	settings.pwm_ch3_r = get_reg(CH3_RED);
 80073e8:	2007      	movs	r0, #7
 80073ea:	f7fd fd65 	bl	8004eb8 <get_reg>
 80073ee:	82a0      	strh	r0, [r4, #20]
	settings.pwm_ch3_g = get_reg(CH3_GREEN);
 80073f0:	2008      	movs	r0, #8
 80073f2:	f7fd fd61 	bl	8004eb8 <get_reg>
 80073f6:	82e0      	strh	r0, [r4, #22]
	settings.pwm_ch3_b = get_reg(CH3_BLUE);
 80073f8:	2009      	movs	r0, #9
 80073fa:	f7fd fd5d 	bl	8004eb8 <get_reg>
 80073fe:	8320      	strh	r0, [r4, #24]
	settings.pwm_ch3_w = get_reg(CH3_WHITE);
 8007400:	200a      	movs	r0, #10
 8007402:	f7fd fd59 	bl	8004eb8 <get_reg>
 8007406:	8360      	strh	r0, [r4, #26]
	if (DMX_MODE2 == get_mode())
 8007408:	f7fd fd04 	bl	8004e14 <get_mode>
 800740c:	2801      	cmp	r0, #1
 800740e:	d001      	beq.n	8007414 <shell_cmd_storedefaultregs+0x60>
}
 8007410:	2001      	movs	r0, #1
 8007412:	bd10      	pop	{r4, pc}
		settings.fx_select = get_reg(FX_SELECT);
 8007414:	200b      	movs	r0, #11
 8007416:	f7fd fd4f 	bl	8004eb8 <get_reg>
 800741a:	7720      	strb	r0, [r4, #28]
		settings.strip1_pattern = get_reg(STRIP1_PATTERN);
 800741c:	200c      	movs	r0, #12
 800741e:	f7fd fd4b 	bl	8004eb8 <get_reg>
 8007422:	7760      	strb	r0, [r4, #29]
		settings.strip1_speed = get_reg(STRIP1_SPEED);
 8007424:	200d      	movs	r0, #13
 8007426:	f7fd fd47 	bl	8004eb8 <get_reg>
 800742a:	77a0      	strb	r0, [r4, #30]
		settings.strip1_size = get_reg(STRIP1_SIZE);
 800742c:	200e      	movs	r0, #14
 800742e:	f7fd fd43 	bl	8004eb8 <get_reg>
 8007432:	77e0      	strb	r0, [r4, #31]
		settings.strip1_complexity = get_reg(STRIP1_COMPLEXITY);
 8007434:	200f      	movs	r0, #15
 8007436:	f7fd fd3f 	bl	8004eb8 <get_reg>
 800743a:	f884 0020 	strb.w	r0, [r4, #32]
		settings.strip1_v1 = get_reg(STRIP1_V1);
 800743e:	2010      	movs	r0, #16
 8007440:	f7fd fd3a 	bl	8004eb8 <get_reg>
 8007444:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
		settings.strip1_v2 = get_reg(STRIP1_V2);
 8007448:	2011      	movs	r0, #17
 800744a:	f7fd fd35 	bl	8004eb8 <get_reg>
 800744e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
		settings.strip1_v3 = get_reg(STRIP1_V3);
 8007452:	2012      	movs	r0, #18
 8007454:	f7fd fd30 	bl	8004eb8 <get_reg>
 8007458:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
		settings.strip2_pattern = get_reg(STRIP2_PATTERN);
 800745c:	2013      	movs	r0, #19
 800745e:	f7fd fd2b 	bl	8004eb8 <get_reg>
 8007462:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
		settings.strip2_speed = get_reg(STRIP2_SPEED);
 8007466:	2014      	movs	r0, #20
 8007468:	f7fd fd26 	bl	8004eb8 <get_reg>
 800746c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
		settings.strip2_size = get_reg(STRIP2_SIZE);
 8007470:	2015      	movs	r0, #21
 8007472:	f7fd fd21 	bl	8004eb8 <get_reg>
 8007476:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		settings.strip2_complexity = get_reg(STRIP2_COMPLEXITY);
 800747a:	2016      	movs	r0, #22
 800747c:	f7fd fd1c 	bl	8004eb8 <get_reg>
 8007480:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
		settings.strip2_v1 = get_reg(STRIP2_V1);
 8007484:	2017      	movs	r0, #23
 8007486:	f7fd fd17 	bl	8004eb8 <get_reg>
 800748a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
		settings.strip2_v2 = get_reg(STRIP2_V2);
 800748e:	2018      	movs	r0, #24
 8007490:	f7fd fd12 	bl	8004eb8 <get_reg>
 8007494:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
		settings.strip2_v3 = get_reg(STRIP2_V3);
 8007498:	2019      	movs	r0, #25
 800749a:	f7fd fd0d 	bl	8004eb8 <get_reg>
 800749e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
 80074a2:	e7b5      	b.n	8007410 <shell_cmd_storedefaultregs+0x5c>
 80074a4:	20000780 	.word	0x20000780

080074a8 <shell_cmd_getmode>:
{
 80074a8:	b508      	push	{r3, lr}
	switch (get_mode())
 80074aa:	f7fd fcb3 	bl	8004e14 <get_mode>
 80074ae:	b118      	cbz	r0, 80074b8 <shell_cmd_getmode+0x10>
 80074b0:	2801      	cmp	r0, #1
 80074b2:	d005      	beq.n	80074c0 <shell_cmd_getmode+0x18>
}
 80074b4:	2001      	movs	r0, #1
 80074b6:	bd08      	pop	{r3, pc}
		print("Mode 1 (PWM)");
 80074b8:	4803      	ldr	r0, [pc, #12]	; (80074c8 <shell_cmd_getmode+0x20>)
 80074ba:	f7ff fca1 	bl	8006e00 <print>
		break;
 80074be:	e7f9      	b.n	80074b4 <shell_cmd_getmode+0xc>
		print("Mode 2 (PWM + Strip)");
 80074c0:	4802      	ldr	r0, [pc, #8]	; (80074cc <shell_cmd_getmode+0x24>)
 80074c2:	f7ff fc9d 	bl	8006e00 <print>
		break;
 80074c6:	e7f5      	b.n	80074b4 <shell_cmd_getmode+0xc>
 80074c8:	0800c3c8 	.word	0x0800c3c8
 80074cc:	0800c3d8 	.word	0x0800c3d8

080074d0 <shell_cmd_setreg>:
	if (argc == 2)
 80074d0:	2802      	cmp	r0, #2
 80074d2:	d001      	beq.n	80074d8 <shell_cmd_setreg+0x8>
		return 0;
 80074d4:	2000      	movs	r0, #0
}
 80074d6:	4770      	bx	lr
{
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	460c      	mov	r4, r1
		set_reg(atoi(argv[1]),atoi(argv[2]));
 80074dc:	6848      	ldr	r0, [r1, #4]
 80074de:	f001 fca4 	bl	8008e2a <atoi>
 80074e2:	4605      	mov	r5, r0
 80074e4:	68a0      	ldr	r0, [r4, #8]
 80074e6:	f001 fca0 	bl	8008e2a <atoi>
 80074ea:	b2c1      	uxtb	r1, r0
 80074ec:	4628      	mov	r0, r5
 80074ee:	f7fd fcd5 	bl	8004e9c <set_reg>
	return 1;
 80074f2:	2001      	movs	r0, #1
}
 80074f4:	bd38      	pop	{r3, r4, r5, pc}

080074f6 <shell_cmd_setbrightness>:
	if (argc == 1)
 80074f6:	2801      	cmp	r0, #1
 80074f8:	d001      	beq.n	80074fe <shell_cmd_setbrightness+0x8>
		return 0;
 80074fa:	2000      	movs	r0, #0
}
 80074fc:	4770      	bx	lr
{
 80074fe:	b510      	push	{r4, lr}
 8007500:	4604      	mov	r4, r0
		set_reg(MAX_BRIGHTNESS,(uint8_t) atoi(argv[1]));
 8007502:	6848      	ldr	r0, [r1, #4]
 8007504:	f001 fc91 	bl	8008e2a <atoi>
 8007508:	b2c1      	uxtb	r1, r0
 800750a:	2000      	movs	r0, #0
 800750c:	f7fd fcc6 	bl	8004e9c <set_reg>
	return 1;
 8007510:	4620      	mov	r0, r4
}
 8007512:	bd10      	pop	{r4, pc}

08007514 <shell_cmd_setgamma>:
	if (argc == 2)
 8007514:	2802      	cmp	r0, #2
 8007516:	d001      	beq.n	800751c <shell_cmd_setgamma+0x8>
		return 0;
 8007518:	2000      	movs	r0, #0
}
 800751a:	4770      	bx	lr
{
 800751c:	b510      	push	{r4, lr}
 800751e:	460c      	mov	r4, r1
		switch (atoi(argv[1]))
 8007520:	6848      	ldr	r0, [r1, #4]
 8007522:	f001 fc82 	bl	8008e2a <atoi>
 8007526:	2802      	cmp	r0, #2
 8007528:	d014      	beq.n	8007554 <shell_cmd_setgamma+0x40>
 800752a:	2803      	cmp	r0, #3
 800752c:	d019      	beq.n	8007562 <shell_cmd_setgamma+0x4e>
 800752e:	b130      	cbz	r0, 800753e <shell_cmd_setgamma+0x2a>
			settings.gamma_green = atoi(argv[2]);
 8007530:	68a0      	ldr	r0, [r4, #8]
 8007532:	f001 fc7a 	bl	8008e2a <atoi>
 8007536:	4b11      	ldr	r3, [pc, #68]	; (800757c <shell_cmd_setgamma+0x68>)
 8007538:	f8a3 0050 	strh.w	r0, [r3, #80]	; 0x50
			break;
 800753c:	e005      	b.n	800754a <shell_cmd_setgamma+0x36>
			settings.gamma_red = atoi(argv[2]);
 800753e:	68a0      	ldr	r0, [r4, #8]
 8007540:	f001 fc73 	bl	8008e2a <atoi>
 8007544:	4b0d      	ldr	r3, [pc, #52]	; (800757c <shell_cmd_setgamma+0x68>)
 8007546:	f8a3 004a 	strh.w	r0, [r3, #74]	; 0x4a
		if (false == recalcGamma())
 800754a:	f7fd ffdf 	bl	800550c <recalcGamma>
 800754e:	b178      	cbz	r0, 8007570 <shell_cmd_setgamma+0x5c>
	return 1;
 8007550:	2001      	movs	r0, #1
}
 8007552:	bd10      	pop	{r4, pc}
			settings.gamma_blue = atoi(argv[2]);
 8007554:	68a0      	ldr	r0, [r4, #8]
 8007556:	f001 fc68 	bl	8008e2a <atoi>
 800755a:	4b08      	ldr	r3, [pc, #32]	; (800757c <shell_cmd_setgamma+0x68>)
 800755c:	f8a3 0056 	strh.w	r0, [r3, #86]	; 0x56
			break;
 8007560:	e7f3      	b.n	800754a <shell_cmd_setgamma+0x36>
			settings.gamma_strip = atoi(argv[2]);
 8007562:	68a0      	ldr	r0, [r4, #8]
 8007564:	f001 fc61 	bl	8008e2a <atoi>
 8007568:	4b04      	ldr	r3, [pc, #16]	; (800757c <shell_cmd_setgamma+0x68>)
 800756a:	f8a3 0058 	strh.w	r0, [r3, #88]	; 0x58
			break;
 800756e:	e7ec      	b.n	800754a <shell_cmd_setgamma+0x36>
			print("Gamma Table Creation Failed");
 8007570:	4803      	ldr	r0, [pc, #12]	; (8007580 <shell_cmd_setgamma+0x6c>)
 8007572:	f7ff fc45 	bl	8006e00 <print>
	return 1;
 8007576:	2001      	movs	r0, #1
 8007578:	e7eb      	b.n	8007552 <shell_cmd_setgamma+0x3e>
 800757a:	bf00      	nop
 800757c:	20000780 	.word	0x20000780
 8007580:	0800c518 	.word	0x0800c518

08007584 <shell_cmd_savesettings>:
{
 8007584:	b508      	push	{r3, lr}
		save_settings();
 8007586:	f7ff f9b5 	bl	80068f4 <save_settings>
}
 800758a:	2001      	movs	r0, #1
 800758c:	bd08      	pop	{r3, pc}

0800758e <shell_cmd_setpwm>:
	if (argc == 3)
 800758e:	2803      	cmp	r0, #3
 8007590:	d001      	beq.n	8007596 <shell_cmd_setpwm+0x8>
		return 0;
 8007592:	2000      	movs	r0, #0
}
 8007594:	4770      	bx	lr
{
 8007596:	b570      	push	{r4, r5, r6, lr}
 8007598:	460c      	mov	r4, r1
		configPWM((pwmtimerid_t)atoi(argv[1]),(pwmchid_t)atoi(argv[2]), (uint16_t)atoi(argv[3]));
 800759a:	6848      	ldr	r0, [r1, #4]
 800759c:	f001 fc45 	bl	8008e2a <atoi>
 80075a0:	4605      	mov	r5, r0
 80075a2:	68a0      	ldr	r0, [r4, #8]
 80075a4:	f001 fc41 	bl	8008e2a <atoi>
 80075a8:	4606      	mov	r6, r0
 80075aa:	68e0      	ldr	r0, [r4, #12]
 80075ac:	f001 fc3d 	bl	8008e2a <atoi>
 80075b0:	b282      	uxth	r2, r0
 80075b2:	b2f1      	uxtb	r1, r6
 80075b4:	b2e8      	uxtb	r0, r5
 80075b6:	f7fe ff27 	bl	8006408 <configPWM>
	return 1;
 80075ba:	2001      	movs	r0, #1
}
 80075bc:	bd70      	pop	{r4, r5, r6, pc}

080075be <shell_cmd_dumpsettings>:
{
 80075be:	b508      	push	{r3, lr}
		print_settings();
 80075c0:	f7ff f9a8 	bl	8006914 <print_settings>
}
 80075c4:	2001      	movs	r0, #1
 80075c6:	bd08      	pop	{r3, pc}

080075c8 <shell_cmd_getaddr>:
{
 80075c8:	b508      	push	{r3, lr}
		print("DMX512 Address: %d",get_addr());
 80075ca:	f7fd fc1d 	bl	8004e08 <get_addr>
 80075ce:	4601      	mov	r1, r0
 80075d0:	4802      	ldr	r0, [pc, #8]	; (80075dc <shell_cmd_getaddr+0x14>)
 80075d2:	f7ff fc15 	bl	8006e00 <print>
}
 80075d6:	2001      	movs	r0, #1
 80075d8:	bd08      	pop	{r3, pc}
 80075da:	bf00      	nop
 80075dc:	0800c3b4 	.word	0x0800c3b4

080075e0 <shell_cmd_dumpregs>:
{
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	b082      	sub	sp, #8
		print("DMX512 Address: %d",get_addr());
 80075e4:	f7fd fc10 	bl	8004e08 <get_addr>
 80075e8:	4601      	mov	r1, r0
 80075ea:	4816      	ldr	r0, [pc, #88]	; (8007644 <shell_cmd_dumpregs+0x64>)
 80075ec:	f7ff fc08 	bl	8006e00 <print>
		print("DMX512 Blocklength: %d",get_reg_length());
 80075f0:	f7fd fc1c 	bl	8004e2c <get_reg_length>
 80075f4:	4601      	mov	r1, r0
 80075f6:	4814      	ldr	r0, [pc, #80]	; (8007648 <shell_cmd_dumpregs+0x68>)
 80075f8:	f7ff fc02 	bl	8006e00 <print>
		print("Mode: %d",(uint8_t)get_mode());
 80075fc:	f7fd fc0a 	bl	8004e14 <get_mode>
 8007600:	4601      	mov	r1, r0
 8007602:	4812      	ldr	r0, [pc, #72]	; (800764c <shell_cmd_dumpregs+0x6c>)
 8007604:	f7ff fbfc 	bl	8006e00 <print>
		print("---------------------------");
 8007608:	4811      	ldr	r0, [pc, #68]	; (8007650 <shell_cmd_dumpregs+0x70>)
 800760a:	f7ff fbf9 	bl	8006e00 <print>
		for(int ii=0;ii< get_reg_length();ii++)
 800760e:	2400      	movs	r4, #0
 8007610:	e011      	b.n	8007636 <shell_cmd_dumpregs+0x56>
			print("Reg: %d\t Addr:%d  \t (%s)\t Val: %d",ii,get_addr()+ii,get_reg_name(ii),get_reg(ii));
 8007612:	f7fd fbf9 	bl	8004e08 <get_addr>
 8007616:	1905      	adds	r5, r0, r4
 8007618:	4620      	mov	r0, r4
 800761a:	f7fd fc5f 	bl	8004edc <get_reg_name>
 800761e:	4606      	mov	r6, r0
 8007620:	4620      	mov	r0, r4
 8007622:	f7fd fc49 	bl	8004eb8 <get_reg>
 8007626:	9000      	str	r0, [sp, #0]
 8007628:	4633      	mov	r3, r6
 800762a:	462a      	mov	r2, r5
 800762c:	4621      	mov	r1, r4
 800762e:	4809      	ldr	r0, [pc, #36]	; (8007654 <shell_cmd_dumpregs+0x74>)
 8007630:	f7ff fbe6 	bl	8006e00 <print>
		for(int ii=0;ii< get_reg_length();ii++)
 8007634:	3401      	adds	r4, #1
 8007636:	f7fd fbf9 	bl	8004e2c <get_reg_length>
 800763a:	42a0      	cmp	r0, r4
 800763c:	d8e9      	bhi.n	8007612 <shell_cmd_dumpregs+0x32>
}
 800763e:	2001      	movs	r0, #1
 8007640:	b002      	add	sp, #8
 8007642:	bd70      	pop	{r4, r5, r6, pc}
 8007644:	0800c3b4 	.word	0x0800c3b4
 8007648:	0800c350 	.word	0x0800c350
 800764c:	0800c368 	.word	0x0800c368
 8007650:	0800c374 	.word	0x0800c374
 8007654:	0800c390 	.word	0x0800c390

08007658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007658:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800765a:	4b0e      	ldr	r3, [pc, #56]	; (8007694 <HAL_MspInit+0x3c>)
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	619a      	str	r2, [r3, #24]
 8007664:	699a      	ldr	r2, [r3, #24]
 8007666:	f002 0201 	and.w	r2, r2, #1
 800766a:	9200      	str	r2, [sp, #0]
 800766c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800766e:	69da      	ldr	r2, [r3, #28]
 8007670:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007674:	61da      	str	r2, [r3, #28]
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007680:	4a05      	ldr	r2, [pc, #20]	; (8007698 <HAL_MspInit+0x40>)
 8007682:	6853      	ldr	r3, [r2, #4]
 8007684:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007688:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800768c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800768e:	b002      	add	sp, #8
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	40021000 	.word	0x40021000
 8007698:	40010000 	.word	0x40010000

0800769c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800769c:	b500      	push	{lr}
 800769e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076a0:	2300      	movs	r3, #0
 80076a2:	9304      	str	r3, [sp, #16]
 80076a4:	9305      	str	r3, [sp, #20]
 80076a6:	9306      	str	r3, [sp, #24]
 80076a8:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80076aa:	6803      	ldr	r3, [r0, #0]
 80076ac:	4a20      	ldr	r2, [pc, #128]	; (8007730 <HAL_ADC_MspInit+0x94>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d005      	beq.n	80076be <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80076b2:	4a20      	ldr	r2, [pc, #128]	; (8007734 <HAL_ADC_MspInit+0x98>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d01e      	beq.n	80076f6 <HAL_ADC_MspInit+0x5a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80076b8:	b009      	add	sp, #36	; 0x24
 80076ba:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 80076be:	4b1e      	ldr	r3, [pc, #120]	; (8007738 <HAL_ADC_MspInit+0x9c>)
 80076c0:	699a      	ldr	r2, [r3, #24]
 80076c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076c6:	619a      	str	r2, [r3, #24]
 80076c8:	699a      	ldr	r2, [r3, #24]
 80076ca:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80076ce:	9200      	str	r2, [sp, #0]
 80076d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076d2:	699a      	ldr	r2, [r3, #24]
 80076d4:	f042 0204 	orr.w	r2, r2, #4
 80076d8:	619a      	str	r2, [r3, #24]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	f003 0304 	and.w	r3, r3, #4
 80076e0:	9301      	str	r3, [sp, #4]
 80076e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ANALOG_0_Pin;
 80076e4:	2301      	movs	r3, #1
 80076e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80076e8:	2303      	movs	r3, #3
 80076ea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(ANALOG_0_GPIO_Port, &GPIO_InitStruct);
 80076ec:	a904      	add	r1, sp, #16
 80076ee:	4813      	ldr	r0, [pc, #76]	; (800773c <HAL_ADC_MspInit+0xa0>)
 80076f0:	f7fa fb54 	bl	8001d9c <HAL_GPIO_Init>
 80076f4:	e7e0      	b.n	80076b8 <HAL_ADC_MspInit+0x1c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80076f6:	4b10      	ldr	r3, [pc, #64]	; (8007738 <HAL_ADC_MspInit+0x9c>)
 80076f8:	699a      	ldr	r2, [r3, #24]
 80076fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076fe:	619a      	str	r2, [r3, #24]
 8007700:	699a      	ldr	r2, [r3, #24]
 8007702:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8007706:	9202      	str	r2, [sp, #8]
 8007708:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800770a:	699a      	ldr	r2, [r3, #24]
 800770c:	f042 0204 	orr.w	r2, r2, #4
 8007710:	619a      	str	r2, [r3, #24]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	9303      	str	r3, [sp, #12]
 800771a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 800771c:	2310      	movs	r3, #16
 800771e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007720:	2303      	movs	r3, #3
 8007722:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8007724:	a904      	add	r1, sp, #16
 8007726:	4805      	ldr	r0, [pc, #20]	; (800773c <HAL_ADC_MspInit+0xa0>)
 8007728:	f7fa fb38 	bl	8001d9c <HAL_GPIO_Init>
}
 800772c:	e7c4      	b.n	80076b8 <HAL_ADC_MspInit+0x1c>
 800772e:	bf00      	nop
 8007730:	40012400 	.word	0x40012400
 8007734:	40012800 	.word	0x40012800
 8007738:	40021000 	.word	0x40021000
 800773c:	40010800 	.word	0x40010800

08007740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007740:	b510      	push	{r4, lr}
 8007742:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007744:	2300      	movs	r3, #0
 8007746:	9304      	str	r3, [sp, #16]
 8007748:	9305      	str	r3, [sp, #20]
 800774a:	9306      	str	r3, [sp, #24]
 800774c:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800774e:	6803      	ldr	r3, [r0, #0]
 8007750:	4a2b      	ldr	r2, [pc, #172]	; (8007800 <HAL_UART_MspInit+0xc0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d004      	beq.n	8007760 <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8007756:	4a2b      	ldr	r2, [pc, #172]	; (8007804 <HAL_UART_MspInit+0xc4>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d026      	beq.n	80077aa <HAL_UART_MspInit+0x6a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800775c:	b008      	add	sp, #32
 800775e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8007760:	4b29      	ldr	r3, [pc, #164]	; (8007808 <HAL_UART_MspInit+0xc8>)
 8007762:	699a      	ldr	r2, [r3, #24]
 8007764:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007768:	619a      	str	r2, [r3, #24]
 800776a:	699a      	ldr	r2, [r3, #24]
 800776c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007770:	9200      	str	r2, [sp, #0]
 8007772:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007774:	699a      	ldr	r2, [r3, #24]
 8007776:	f042 0208 	orr.w	r2, r2, #8
 800777a:	619a      	str	r2, [r3, #24]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	f003 0308 	and.w	r3, r3, #8
 8007782:	9301      	str	r3, [sp, #4]
 8007784:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = RS485_RXTX_Pin;
 8007786:	2340      	movs	r3, #64	; 0x40
 8007788:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800778a:	2312      	movs	r3, #18
 800778c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800778e:	2303      	movs	r3, #3
 8007790:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8007792:	a904      	add	r1, sp, #16
 8007794:	481d      	ldr	r0, [pc, #116]	; (800780c <HAL_UART_MspInit+0xcc>)
 8007796:	f7fa fb01 	bl	8001d9c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 800779a:	4a1d      	ldr	r2, [pc, #116]	; (8007810 <HAL_UART_MspInit+0xd0>)
 800779c:	6853      	ldr	r3, [r2, #4]
 800779e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80077a2:	f043 0304 	orr.w	r3, r3, #4
 80077a6:	6053      	str	r3, [r2, #4]
 80077a8:	e7d8      	b.n	800775c <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80077aa:	4b17      	ldr	r3, [pc, #92]	; (8007808 <HAL_UART_MspInit+0xc8>)
 80077ac:	69da      	ldr	r2, [r3, #28]
 80077ae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80077b2:	61da      	str	r2, [r3, #28]
 80077b4:	69da      	ldr	r2, [r3, #28]
 80077b6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80077ba:	9202      	str	r2, [sp, #8]
 80077bc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077be:	699a      	ldr	r2, [r3, #24]
 80077c0:	f042 0208 	orr.w	r2, r2, #8
 80077c4:	619a      	str	r2, [r3, #24]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	f003 0308 	and.w	r3, r3, #8
 80077cc:	9303      	str	r3, [sp, #12]
 80077ce:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = RS232_TX_Pin;
 80077d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077d6:	2302      	movs	r3, #2
 80077d8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80077da:	2303      	movs	r3, #3
 80077dc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 80077de:	4c0b      	ldr	r4, [pc, #44]	; (800780c <HAL_UART_MspInit+0xcc>)
 80077e0:	a904      	add	r1, sp, #16
 80077e2:	4620      	mov	r0, r4
 80077e4:	f7fa fada 	bl	8001d9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS232_RX_Pin;
 80077e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077ec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077ee:	2300      	movs	r3, #0
 80077f0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 80077f4:	a904      	add	r1, sp, #16
 80077f6:	4620      	mov	r0, r4
 80077f8:	f7fa fad0 	bl	8001d9c <HAL_GPIO_Init>
}
 80077fc:	e7ae      	b.n	800775c <HAL_UART_MspInit+0x1c>
 80077fe:	bf00      	nop
 8007800:	40013800 	.word	0x40013800
 8007804:	40004800 	.word	0x40004800
 8007808:	40021000 	.word	0x40021000
 800780c:	40010c00 	.word	0x40010c00
 8007810:	40010000 	.word	0x40010000

08007814 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007814:	4770      	bx	lr

08007816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007816:	e7fe      	b.n	8007816 <HardFault_Handler>

08007818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007818:	e7fe      	b.n	8007818 <MemManage_Handler>

0800781a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800781a:	e7fe      	b.n	800781a <BusFault_Handler>

0800781c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800781c:	e7fe      	b.n	800781c <UsageFault_Handler>

0800781e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800781e:	4770      	bx	lr

08007820 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007820:	4770      	bx	lr

08007822 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007822:	4770      	bx	lr

08007824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007824:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007826:	f7f9 fcd1 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800782a:	bd08      	pop	{r3, pc}

0800782c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800782c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800782e:	4802      	ldr	r0, [pc, #8]	; (8007838 <DMA1_Channel3_IRQHandler+0xc>)
 8007830:	f7fa f8ac 	bl	800198c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007834:	bd08      	pop	{r3, pc}
 8007836:	bf00      	nop
 8007838:	200009f0 	.word	0x200009f0

0800783c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800783c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800783e:	4802      	ldr	r0, [pc, #8]	; (8007848 <DMA1_Channel4_IRQHandler+0xc>)
 8007840:	f7fa f8a4 	bl	800198c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007844:	bd08      	pop	{r3, pc}
 8007846:	bf00      	nop
 8007848:	200009ac 	.word	0x200009ac

0800784c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800784c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800784e:	4802      	ldr	r0, [pc, #8]	; (8007858 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8007850:	f7fa fdde 	bl	8002410 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8007854:	bd08      	pop	{r3, pc}
 8007856:	bf00      	nop
 8007858:	20000b14 	.word	0x20000b14

0800785c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800785c:	b508      	push	{r3, lr}
 800785e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007860:	4a0b      	ldr	r2, [pc, #44]	; (8007890 <_sbrk+0x34>)
 8007862:	6812      	ldr	r2, [r2, #0]
 8007864:	b142      	cbz	r2, 8007878 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8007866:	4a0a      	ldr	r2, [pc, #40]	; (8007890 <_sbrk+0x34>)
 8007868:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800786a:	4403      	add	r3, r0
 800786c:	466a      	mov	r2, sp
 800786e:	4293      	cmp	r3, r2
 8007870:	d806      	bhi.n	8007880 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8007872:	4a07      	ldr	r2, [pc, #28]	; (8007890 <_sbrk+0x34>)
 8007874:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8007876:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8007878:	4a05      	ldr	r2, [pc, #20]	; (8007890 <_sbrk+0x34>)
 800787a:	4906      	ldr	r1, [pc, #24]	; (8007894 <_sbrk+0x38>)
 800787c:	6011      	str	r1, [r2, #0]
 800787e:	e7f2      	b.n	8007866 <_sbrk+0xa>
		errno = ENOMEM;
 8007880:	f001 fae0 	bl	8008e44 <__errno>
 8007884:	230c      	movs	r3, #12
 8007886:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007888:	f04f 30ff 	mov.w	r0, #4294967295
 800788c:	e7f3      	b.n	8007876 <_sbrk+0x1a>
 800788e:	bf00      	nop
 8007890:	200005a0 	.word	0x200005a0
 8007894:	20000d88 	.word	0x20000d88

08007898 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8007898:	4b0f      	ldr	r3, [pc, #60]	; (80078d8 <SystemInit+0x40>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	f042 0201 	orr.w	r2, r2, #1
 80078a0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80078a2:	6859      	ldr	r1, [r3, #4]
 80078a4:	4a0d      	ldr	r2, [pc, #52]	; (80078dc <SystemInit+0x44>)
 80078a6:	400a      	ands	r2, r1
 80078a8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80078b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80078b4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078bc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80078c4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80078c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80078ca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80078cc:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <SystemInit+0x48>)
 80078ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80078d2:	609a      	str	r2, [r3, #8]
#endif 
}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	40021000 	.word	0x40021000
 80078dc:	f8ff0000 	.word	0xf8ff0000
 80078e0:	e000ed00 	.word	0xe000ed00

080078e4 <lights_off>:
							 {PWM_CH3,CH_RED},{PWM_CH3,CH_GREEN},{PWM_CH3,CH_BLUE},{PWM_CH3,CH_WHITE}};



void lights_off(void)
{
 80078e4:	b510      	push	{r4, lr}
	for (uint8_t ii=0;ii<STATE_CNT;ii++)
 80078e6:	2400      	movs	r4, #0
 80078e8:	e00a      	b.n	8007900 <lights_off+0x1c>
		configPWM(states[ii].id,states[ii].ch, 0);
 80078ea:	4b07      	ldr	r3, [pc, #28]	; (8007908 <lights_off+0x24>)
 80078ec:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80078f0:	2200      	movs	r2, #0
 80078f2:	7849      	ldrb	r1, [r1, #1]
 80078f4:	f813 0014 	ldrb.w	r0, [r3, r4, lsl #1]
 80078f8:	f7fe fd86 	bl	8006408 <configPWM>
	for (uint8_t ii=0;ii<STATE_CNT;ii++)
 80078fc:	3401      	adds	r4, #1
 80078fe:	b2e4      	uxtb	r4, r4
 8007900:	2c09      	cmp	r4, #9
 8007902:	d9f2      	bls.n	80078ea <lights_off+0x6>
}
 8007904:	bd10      	pop	{r4, pc}
 8007906:	bf00      	nop
 8007908:	20000080 	.word	0x20000080

0800790c <process_testmode>:
	static uint8_t last_button_state = 1;
	static uint16_t cnt = 0;
	static uint8_t done = 0;
	uint8_t button_state = 1;

	if (done)
 800790c:	4b27      	ldr	r3, [pc, #156]	; (80079ac <process_testmode+0xa0>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	b15b      	cbz	r3, 800792a <process_testmode+0x1e>
	{
		if (cnt == 0)
 8007912:	4b27      	ldr	r3, [pc, #156]	; (80079b0 <process_testmode+0xa4>)
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	b91b      	cbnz	r3, 8007920 <process_testmode+0x14>
		{
			done = 0;
 8007918:	2000      	movs	r0, #0
 800791a:	4b24      	ldr	r3, [pc, #144]	; (80079ac <process_testmode+0xa0>)
 800791c:	7018      	strb	r0, [r3, #0]
			return 0;
 800791e:	4770      	bx	lr
		}
		cnt--;
 8007920:	3b01      	subs	r3, #1
 8007922:	4a23      	ldr	r2, [pc, #140]	; (80079b0 <process_testmode+0xa4>)
 8007924:	8013      	strh	r3, [r2, #0]
			state = 0;
			done = 1;
		}
		last_button_state = button_state;
	}
	return 1;
 8007926:	2001      	movs	r0, #1
}
 8007928:	4770      	bx	lr
{
 800792a:	b570      	push	{r4, r5, r6, lr}
		if (cnt == 0)
 800792c:	4b20      	ldr	r3, [pc, #128]	; (80079b0 <process_testmode+0xa4>)
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	b17b      	cbz	r3, 8007952 <process_testmode+0x46>
		cnt--;
 8007932:	4a1f      	ldr	r2, [pc, #124]	; (80079b0 <process_testmode+0xa4>)
 8007934:	8813      	ldrh	r3, [r2, #0]
 8007936:	3b01      	subs	r3, #1
 8007938:	8013      	strh	r3, [r2, #0]
		button_state = check_button();
 800793a:	f7fd fee7 	bl	800570c <check_button>
 800793e:	4604      	mov	r4, r0
		if ((last_button_state == 0) && (button_state == 1))
 8007940:	4b1c      	ldr	r3, [pc, #112]	; (80079b4 <process_testmode+0xa8>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	b90b      	cbnz	r3, 800794a <process_testmode+0x3e>
 8007946:	2801      	cmp	r0, #1
 8007948:	d021      	beq.n	800798e <process_testmode+0x82>
		last_button_state = button_state;
 800794a:	4b1a      	ldr	r3, [pc, #104]	; (80079b4 <process_testmode+0xa8>)
 800794c:	701c      	strb	r4, [r3, #0]
	return 1;
 800794e:	2001      	movs	r0, #1
}
 8007950:	bd70      	pop	{r4, r5, r6, pc}
			cnt = STEP_CNT;
 8007952:	4b17      	ldr	r3, [pc, #92]	; (80079b0 <process_testmode+0xa4>)
 8007954:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007958:	801a      	strh	r2, [r3, #0]
			lights_off();
 800795a:	f7ff ffc3 	bl	80078e4 <lights_off>
			configPWM(states[state].id,states[state].ch, getMaxPWM());
 800795e:	4c16      	ldr	r4, [pc, #88]	; (80079b8 <process_testmode+0xac>)
 8007960:	7822      	ldrb	r2, [r4, #0]
 8007962:	4b16      	ldr	r3, [pc, #88]	; (80079bc <process_testmode+0xb0>)
 8007964:	f813 5012 	ldrb.w	r5, [r3, r2, lsl #1]
 8007968:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800796c:	785e      	ldrb	r6, [r3, #1]
 800796e:	f7fe fd73 	bl	8006458 <getMaxPWM>
 8007972:	b282      	uxth	r2, r0
 8007974:	4631      	mov	r1, r6
 8007976:	4628      	mov	r0, r5
 8007978:	f7fe fd46 	bl	8006408 <configPWM>
			state++;
 800797c:	7823      	ldrb	r3, [r4, #0]
 800797e:	3301      	adds	r3, #1
 8007980:	b2db      	uxtb	r3, r3
 8007982:	7023      	strb	r3, [r4, #0]
			if (state == STATE_CNT)
 8007984:	2b0a      	cmp	r3, #10
 8007986:	d1d4      	bne.n	8007932 <process_testmode+0x26>
				state = 0;
 8007988:	2200      	movs	r2, #0
 800798a:	7022      	strb	r2, [r4, #0]
 800798c:	e7d1      	b.n	8007932 <process_testmode+0x26>
			last_button_state = 1;
 800798e:	2501      	movs	r5, #1
 8007990:	4b08      	ldr	r3, [pc, #32]	; (80079b4 <process_testmode+0xa8>)
 8007992:	701d      	strb	r5, [r3, #0]
			lights_off();
 8007994:	f7ff ffa6 	bl	80078e4 <lights_off>
			cnt = STEP_CNT;
 8007998:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <process_testmode+0xa4>)
 800799a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800799e:	801a      	strh	r2, [r3, #0]
			state = 0;
 80079a0:	4b05      	ldr	r3, [pc, #20]	; (80079b8 <process_testmode+0xac>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	701a      	strb	r2, [r3, #0]
			done = 1;
 80079a6:	4b01      	ldr	r3, [pc, #4]	; (80079ac <process_testmode+0xa0>)
 80079a8:	701d      	strb	r5, [r3, #0]
 80079aa:	e7ce      	b.n	800794a <process_testmode+0x3e>
 80079ac:	200005a6 	.word	0x200005a6
 80079b0:	200005a4 	.word	0x200005a4
 80079b4:	2000007c 	.word	0x2000007c
 80079b8:	200005a7 	.word	0x200005a7
 80079bc:	20000080 	.word	0x20000080

080079c0 <ADC1_2_IRQHandler>:

adcdata_s adcdata[2];
ADC_HandleTypeDef* currentADCHandler = &hadc1;

void ADC1_2_IRQHandler()
{
 80079c0:	b508      	push	{r3, lr}
	//need to figure out where IRQ comes from here....
	HAL_ADC_IRQHandler(currentADCHandler);
 80079c2:	4b02      	ldr	r3, [pc, #8]	; (80079cc <ADC1_2_IRQHandler+0xc>)
 80079c4:	6818      	ldr	r0, [r3, #0]
 80079c6:	f7f9 fc17 	bl	80011f8 <HAL_ADC_IRQHandler>

    //Alternatively we could call the handler for both sources and let the handler routine sort it out....
    //HAL_ADC_IRQHandler(&hadc1);
    //HAL_ADC_IRQHandler(&hadc2);
}
 80079ca:	bd08      	pop	{r3, pc}
 80079cc:	20000094 	.word	0x20000094

080079d0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	4604      	mov	r4, r0
	uint8_t adc = 0;
	uint32_t sum = 0;
	uint32_t adcval = 0;

	if (hadc->Instance == ADC2)
 80079d4:	6802      	ldr	r2, [r0, #0]
 80079d6:	4b22      	ldr	r3, [pc, #136]	; (8007a60 <HAL_ADC_ConvCpltCallback+0x90>)
 80079d8:	429a      	cmp	r2, r3
 80079da:	d020      	beq.n	8007a1e <HAL_ADC_ConvCpltCallback+0x4e>
	uint8_t adc = 0;
 80079dc:	2600      	movs	r6, #0
	{
		adc = 1;
	}

	adcval = HAL_ADC_GetValue(hadc);
 80079de:	4620      	mov	r0, r4
 80079e0:	f7f9 fc06 	bl	80011f0 <HAL_ADC_GetValue>
	adcval = adcval / 16; //Convert to 8-bit...
	adcdata[adc].buf[adcdata[adc].bufcnt] = (uint16_t)adcval;
 80079e4:	4635      	mov	r5, r6
 80079e6:	4a1f      	ldr	r2, [pc, #124]	; (8007a64 <HAL_ADC_ConvCpltCallback+0x94>)
 80079e8:	eb02 1106 	add.w	r1, r2, r6, lsl #4
 80079ec:	7b8b      	ldrb	r3, [r1, #14]
 80079ee:	f3c0 100f 	ubfx	r0, r0, #4, #16
 80079f2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80079f6:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 80079fa:	80b0      	strh	r0, [r6, #4]
	adcdata[adc].bufcnt++;
 80079fc:	3301      	adds	r3, #1
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	738b      	strb	r3, [r1, #14]

	//Calculate average over x samples to reduce noise
	if (ADC_BUF_SIZE == adcdata[adc].bufcnt)
 8007a02:	2b05      	cmp	r3, #5
 8007a04:	d00d      	beq.n	8007a22 <HAL_ADC_ConvCpltCallback+0x52>
		while(adcdata[adc].bufcnt > 0);
		adcdata[adc].adc_val = (uint16_t)(sum / ADC_BUF_SIZE);
	}

	//swap ADC
	if (hadc->Instance == ADC1)
 8007a06:	6822      	ldr	r2, [r4, #0]
 8007a08:	4b17      	ldr	r3, [pc, #92]	; (8007a68 <HAL_ADC_ConvCpltCallback+0x98>)
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d023      	beq.n	8007a56 <HAL_ADC_ConvCpltCallback+0x86>
		currentADCHandler = &hadc2;
	else
		currentADCHandler = &hadc1;
 8007a0e:	4b17      	ldr	r3, [pc, #92]	; (8007a6c <HAL_ADC_ConvCpltCallback+0x9c>)
 8007a10:	4a17      	ldr	r2, [pc, #92]	; (8007a70 <HAL_ADC_ConvCpltCallback+0xa0>)
 8007a12:	601a      	str	r2, [r3, #0]
	//Start ADC Again
    HAL_ADC_Start_IT(currentADCHandler);
 8007a14:	4b15      	ldr	r3, [pc, #84]	; (8007a6c <HAL_ADC_ConvCpltCallback+0x9c>)
 8007a16:	6818      	ldr	r0, [r3, #0]
 8007a18:	f7f9 fd50 	bl	80014bc <HAL_ADC_Start_IT>
}
 8007a1c:	bd70      	pop	{r4, r5, r6, pc}
		adc = 1;
 8007a1e:	2601      	movs	r6, #1
 8007a20:	e7dd      	b.n	80079de <HAL_ADC_ConvCpltCallback+0xe>
	uint32_t sum = 0;
 8007a22:	2000      	movs	r0, #0
			adcdata[adc].bufcnt--;
 8007a24:	4a0f      	ldr	r2, [pc, #60]	; (8007a64 <HAL_ADC_ConvCpltCallback+0x94>)
 8007a26:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 8007a2a:	7b8b      	ldrb	r3, [r1, #14]
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	738b      	strb	r3, [r1, #14]
			sum = sum + adcdata[adc].buf[adcdata[adc].bufcnt];
 8007a32:	eb03 01c5 	add.w	r1, r3, r5, lsl #3
 8007a36:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8007a3a:	8892      	ldrh	r2, [r2, #4]
 8007a3c:	4410      	add	r0, r2
		while(adcdata[adc].bufcnt > 0);
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1f0      	bne.n	8007a24 <HAL_ADC_ConvCpltCallback+0x54>
		adcdata[adc].adc_val = (uint16_t)(sum / ADC_BUF_SIZE);
 8007a42:	f1a3 3333 	sub.w	r3, r3, #858993459	; 0x33333333
 8007a46:	fba3 3000 	umull	r3, r0, r3, r0
 8007a4a:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8007a4e:	012d      	lsls	r5, r5, #4
 8007a50:	4b04      	ldr	r3, [pc, #16]	; (8007a64 <HAL_ADC_ConvCpltCallback+0x94>)
 8007a52:	5358      	strh	r0, [r3, r5]
 8007a54:	e7d7      	b.n	8007a06 <HAL_ADC_ConvCpltCallback+0x36>
		currentADCHandler = &hadc2;
 8007a56:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <HAL_ADC_ConvCpltCallback+0x9c>)
 8007a58:	4a06      	ldr	r2, [pc, #24]	; (8007a74 <HAL_ADC_ConvCpltCallback+0xa4>)
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	e7da      	b.n	8007a14 <HAL_ADC_ConvCpltCallback+0x44>
 8007a5e:	bf00      	nop
 8007a60:	40012800 	.word	0x40012800
 8007a64:	20000af4 	.word	0x20000af4
 8007a68:	40012400 	.word	0x40012400
 8007a6c:	20000094 	.word	0x20000094
 8007a70:	200008e0 	.word	0x200008e0
 8007a74:	20000874 	.word	0x20000874

08007a78 <init_trigger>:


void init_trigger(void)
{
 8007a78:	b510      	push	{r4, lr}
	//Clear data
	for (uint8_t ii=0;ii<2;ii++)
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e009      	b.n	8007a92 <init_trigger+0x1a>
		memset(&adcdata[ii], 0, sizeof(adcdata_s));
 8007a7e:	011c      	lsls	r4, r3, #4
 8007a80:	480b      	ldr	r0, [pc, #44]	; (8007ab0 <init_trigger+0x38>)
 8007a82:	1821      	adds	r1, r4, r0
 8007a84:	2200      	movs	r2, #0
 8007a86:	5022      	str	r2, [r4, r0]
 8007a88:	604a      	str	r2, [r1, #4]
 8007a8a:	608a      	str	r2, [r1, #8]
 8007a8c:	60ca      	str	r2, [r1, #12]
	for (uint8_t ii=0;ii<2;ii++)
 8007a8e:	3301      	adds	r3, #1
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d9f3      	bls.n	8007a7e <init_trigger+0x6>

	//Eanble IRQ's
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8007a96:	2200      	movs	r2, #0
 8007a98:	4611      	mov	r1, r2
 8007a9a:	2012      	movs	r0, #18
 8007a9c:	f7f9 fe4c 	bl	8001738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8007aa0:	2012      	movs	r0, #18
 8007aa2:	f7f9 fe7d 	bl	80017a0 <HAL_NVIC_EnableIRQ>

	//Setup IRQ's
	HAL_ADC_Start_IT(currentADCHandler);
 8007aa6:	4b03      	ldr	r3, [pc, #12]	; (8007ab4 <init_trigger+0x3c>)
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	f7f9 fd07 	bl	80014bc <HAL_ADC_Start_IT>
}
 8007aae:	bd10      	pop	{r4, pc}
 8007ab0:	20000af4 	.word	0x20000af4
 8007ab4:	20000094 	.word	0x20000094

08007ab8 <process_trigger>:

void process_trigger(void)
{
 8007ab8:	b508      	push	{r3, lr}
	//check if ADC Value has changed
	if ((settings.trigger_mode_A0 != TRIGGERMODE_NONE) && (adcdata[0].adc_val != adcdata[0].last_adc_val))
 8007aba:	4b32      	ldr	r3, [pc, #200]	; (8007b84 <process_trigger+0xcc>)
 8007abc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ac0:	b15b      	cbz	r3, 8007ada <process_trigger+0x22>
 8007ac2:	4a31      	ldr	r2, [pc, #196]	; (8007b88 <process_trigger+0xd0>)
 8007ac4:	8811      	ldrh	r1, [r2, #0]
 8007ac6:	8852      	ldrh	r2, [r2, #2]
 8007ac8:	4291      	cmp	r1, r2
 8007aca:	d006      	beq.n	8007ada <process_trigger+0x22>
	{
		//Based on Settings manipulate Registers
		switch(settings.trigger_mode_A0)
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d015      	beq.n	8007afc <process_trigger+0x44>
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d01a      	beq.n	8007b0a <process_trigger+0x52>
				}

				break;
		}
		//Store Last Value
		adcdata[0].last_adc_val = adcdata[0].adc_val;
 8007ad4:	4b2c      	ldr	r3, [pc, #176]	; (8007b88 <process_trigger+0xd0>)
 8007ad6:	881a      	ldrh	r2, [r3, #0]
 8007ad8:	805a      	strh	r2, [r3, #2]
	}

	//check if ADC Value has changed
	if ((settings.trigger_mode_A1 != TRIGGERMODE_NONE) && (adcdata[1].adc_val != adcdata[1].last_adc_val))
 8007ada:	4b2a      	ldr	r3, [pc, #168]	; (8007b84 <process_trigger+0xcc>)
 8007adc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ae0:	b15b      	cbz	r3, 8007afa <process_trigger+0x42>
 8007ae2:	4a29      	ldr	r2, [pc, #164]	; (8007b88 <process_trigger+0xd0>)
 8007ae4:	8a11      	ldrh	r1, [r2, #16]
 8007ae6:	8a52      	ldrh	r2, [r2, #18]
 8007ae8:	4291      	cmp	r1, r2
 8007aea:	d006      	beq.n	8007afa <process_trigger+0x42>
	{
		//Based on Settings manipulate Registers
		switch(settings.trigger_mode_A1)
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d027      	beq.n	8007b40 <process_trigger+0x88>
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d02c      	beq.n	8007b4e <process_trigger+0x96>
				}

				break;
		}
		//Store Last Value
		adcdata[1].last_adc_val = adcdata[1].adc_val;
 8007af4:	4b24      	ldr	r3, [pc, #144]	; (8007b88 <process_trigger+0xd0>)
 8007af6:	8a1a      	ldrh	r2, [r3, #16]
 8007af8:	825a      	strh	r2, [r3, #18]
	}
}
 8007afa:	bd08      	pop	{r3, pc}
				set_reg(settings.trigger_reg_A0, adcdata[0].adc_val);
 8007afc:	b2c9      	uxtb	r1, r1
 8007afe:	4b21      	ldr	r3, [pc, #132]	; (8007b84 <process_trigger+0xcc>)
 8007b00:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8007b04:	f7fd f9ca 	bl	8004e9c <set_reg>
				break;
 8007b08:	e7e4      	b.n	8007ad4 <process_trigger+0x1c>
				if ((adcdata[0].adc_val > settings.trigger_level_A0) && (adcdata[0].last_adc_val < settings.trigger_level_A0))
 8007b0a:	4b1e      	ldr	r3, [pc, #120]	; (8007b84 <process_trigger+0xcc>)
 8007b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b10:	4299      	cmp	r1, r3
 8007b12:	d901      	bls.n	8007b18 <process_trigger+0x60>
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d30b      	bcc.n	8007b30 <process_trigger+0x78>
				else if ((adcdata[0].adc_val <settings. trigger_level_A0) && (adcdata[0].last_adc_val > settings.trigger_level_A0))
 8007b18:	4299      	cmp	r1, r3
 8007b1a:	d2db      	bcs.n	8007ad4 <process_trigger+0x1c>
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d9d9      	bls.n	8007ad4 <process_trigger+0x1c>
					set_reg(settings.trigger_reg_hilo_A0, settings.trigger_val_hilo_A0);
 8007b20:	4b18      	ldr	r3, [pc, #96]	; (8007b84 <process_trigger+0xcc>)
 8007b22:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 8007b26:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
 8007b2a:	f7fd f9b7 	bl	8004e9c <set_reg>
 8007b2e:	e7d1      	b.n	8007ad4 <process_trigger+0x1c>
					set_reg(settings.trigger_reg_lohi_A0, settings.trigger_val_lohi_A0);
 8007b30:	4b14      	ldr	r3, [pc, #80]	; (8007b84 <process_trigger+0xcc>)
 8007b32:	f893 103b 	ldrb.w	r1, [r3, #59]	; 0x3b
 8007b36:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 8007b3a:	f7fd f9af 	bl	8004e9c <set_reg>
 8007b3e:	e7c9      	b.n	8007ad4 <process_trigger+0x1c>
				set_reg(settings.trigger_reg_A1, adcdata[1].adc_val);
 8007b40:	b2c9      	uxtb	r1, r1
 8007b42:	4b10      	ldr	r3, [pc, #64]	; (8007b84 <process_trigger+0xcc>)
 8007b44:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007b48:	f7fd f9a8 	bl	8004e9c <set_reg>
				break;
 8007b4c:	e7d2      	b.n	8007af4 <process_trigger+0x3c>
				if ((adcdata[1].adc_val > settings.trigger_level_A1) && (adcdata[1].last_adc_val < settings.trigger_level_A1))
 8007b4e:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <process_trigger+0xcc>)
 8007b50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b54:	4299      	cmp	r1, r3
 8007b56:	d901      	bls.n	8007b5c <process_trigger+0xa4>
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d30b      	bcc.n	8007b74 <process_trigger+0xbc>
				else if ((adcdata[1].adc_val < settings.trigger_level_A1) && (adcdata[1].last_adc_val > settings.trigger_level_A1))
 8007b5c:	4299      	cmp	r1, r3
 8007b5e:	d2c9      	bcs.n	8007af4 <process_trigger+0x3c>
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d9c7      	bls.n	8007af4 <process_trigger+0x3c>
					set_reg(settings.trigger_reg_hilo_A1, settings.trigger_val_hilo_A1);
 8007b64:	4b07      	ldr	r3, [pc, #28]	; (8007b84 <process_trigger+0xcc>)
 8007b66:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8007b6a:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 8007b6e:	f7fd f995 	bl	8004e9c <set_reg>
 8007b72:	e7bf      	b.n	8007af4 <process_trigger+0x3c>
					set_reg(settings.trigger_reg_lohi_A1, settings.trigger_val_lohi_A1);
 8007b74:	4b03      	ldr	r3, [pc, #12]	; (8007b84 <process_trigger+0xcc>)
 8007b76:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8007b7a:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8007b7e:	f7fd f98d 	bl	8004e9c <set_reg>
 8007b82:	e7b7      	b.n	8007af4 <process_trigger+0x3c>
 8007b84:	20000780 	.word	0x20000780
 8007b88:	20000af4 	.word	0x20000af4

08007b8c <print_adc_data>:
	else
		return 0;
}

void print_adc_data(void)
{
 8007b8c:	b570      	push	{r4, r5, r6, lr}
	for (int ii=0;ii<2;ii++)
 8007b8e:	2400      	movs	r4, #0
 8007b90:	e01a      	b.n	8007bc8 <print_adc_data+0x3c>
	{
		print("ADC %d",ii+1);
 8007b92:	1c65      	adds	r5, r4, #1
 8007b94:	4629      	mov	r1, r5
 8007b96:	480e      	ldr	r0, [pc, #56]	; (8007bd0 <print_adc_data+0x44>)
 8007b98:	f7ff f932 	bl	8006e00 <print>
		print("-------");
 8007b9c:	480d      	ldr	r0, [pc, #52]	; (8007bd4 <print_adc_data+0x48>)
 8007b9e:	f7ff f92f 	bl	8006e00 <print>
		print("ADC VAL: %d",adcdata[ii].adc_val);
 8007ba2:	4b0d      	ldr	r3, [pc, #52]	; (8007bd8 <print_adc_data+0x4c>)
 8007ba4:	0124      	lsls	r4, r4, #4
 8007ba6:	191e      	adds	r6, r3, r4
 8007ba8:	5b19      	ldrh	r1, [r3, r4]
 8007baa:	480c      	ldr	r0, [pc, #48]	; (8007bdc <print_adc_data+0x50>)
 8007bac:	f7ff f928 	bl	8006e00 <print>
		print("ADC LAST VAL: %d",adcdata[ii].last_adc_val);
 8007bb0:	8871      	ldrh	r1, [r6, #2]
 8007bb2:	480b      	ldr	r0, [pc, #44]	; (8007be0 <print_adc_data+0x54>)
 8007bb4:	f7ff f924 	bl	8006e00 <print>
		print("ADC BUFCNT: %d",adcdata[ii].bufcnt);
 8007bb8:	7bb1      	ldrb	r1, [r6, #14]
 8007bba:	480a      	ldr	r0, [pc, #40]	; (8007be4 <print_adc_data+0x58>)
 8007bbc:	f7ff f920 	bl	8006e00 <print>
		print("");
 8007bc0:	4809      	ldr	r0, [pc, #36]	; (8007be8 <print_adc_data+0x5c>)
 8007bc2:	f7ff f91d 	bl	8006e00 <print>
	for (int ii=0;ii<2;ii++)
 8007bc6:	462c      	mov	r4, r5
 8007bc8:	2c01      	cmp	r4, #1
 8007bca:	dde2      	ble.n	8007b92 <print_adc_data+0x6>
	}

}
 8007bcc:	bd70      	pop	{r4, r5, r6, pc}
 8007bce:	bf00      	nop
 8007bd0:	0800ca1c 	.word	0x0800ca1c
 8007bd4:	0800c388 	.word	0x0800c388
 8007bd8:	20000af4 	.word	0x20000af4
 8007bdc:	0800ca24 	.word	0x0800ca24
 8007be0:	0800ca30 	.word	0x0800ca30
 8007be4:	0800ca44 	.word	0x0800ca44
 8007be8:	0800c760 	.word	0x0800c760

08007bec <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8007bec:	b118      	cbz	r0, 8007bf6 <USBD_Get_USB_Status+0xa>
 8007bee:	2802      	cmp	r0, #2
 8007bf0:	d003      	beq.n	8007bfa <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bf2:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8007bf4:	4770      	bx	lr
      usb_status = USBD_OK;
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	4770      	bx	lr
      usb_status = USBD_BUSY;
 8007bfa:	2001      	movs	r0, #1
    break;
 8007bfc:	4770      	bx	lr

08007bfe <HAL_PCD_SetupStageCallback>:
{
 8007bfe:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c00:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8007c04:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007c08:	f7fc fc75 	bl	80044f6 <USBD_LL_SetupStage>
}
 8007c0c:	bd08      	pop	{r3, pc}

08007c0e <HAL_PCD_DataOutStageCallback>:
{
 8007c0e:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c10:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8007c14:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8007c18:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007c1c:	f7fc fc98 	bl	8004550 <USBD_LL_DataOutStage>
}
 8007c20:	bd08      	pop	{r3, pc}

08007c22 <HAL_PCD_DataInStageCallback>:
{
 8007c22:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c24:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8007c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c2a:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007c2e:	f7fc fcd8 	bl	80045e2 <USBD_LL_DataInStage>
}
 8007c32:	bd08      	pop	{r3, pc}

08007c34 <HAL_PCD_SOFCallback>:
{
 8007c34:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c36:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007c3a:	f7fc fd7a 	bl	8004732 <USBD_LL_SOF>
}
 8007c3e:	bd08      	pop	{r3, pc}

08007c40 <HAL_PCD_ResetCallback>:
{ 
 8007c40:	b510      	push	{r4, lr}
 8007c42:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c44:	6883      	ldr	r3, [r0, #8]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d001      	beq.n	8007c4e <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8007c4a:	f7fe faed 	bl	8006228 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c4e:	2101      	movs	r1, #1
 8007c50:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8007c54:	f7fc fd56 	bl	8004704 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c58:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8007c5c:	f7fc fd2a 	bl	80046b4 <USBD_LL_Reset>
}
 8007c60:	bd10      	pop	{r4, pc}
	...

08007c64 <HAL_PCD_SuspendCallback>:
{
 8007c64:	b510      	push	{r4, lr}
 8007c66:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c68:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007c6c:	f7fc fd4d 	bl	800470a <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8007c70:	69a3      	ldr	r3, [r4, #24]
 8007c72:	b123      	cbz	r3, 8007c7e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c74:	4a02      	ldr	r2, [pc, #8]	; (8007c80 <HAL_PCD_SuspendCallback+0x1c>)
 8007c76:	6913      	ldr	r3, [r2, #16]
 8007c78:	f043 0306 	orr.w	r3, r3, #6
 8007c7c:	6113      	str	r3, [r2, #16]
}
 8007c7e:	bd10      	pop	{r4, pc}
 8007c80:	e000ed00 	.word	0xe000ed00

08007c84 <HAL_PCD_ResumeCallback>:
{
 8007c84:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c86:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007c8a:	f7fc fd47 	bl	800471c <USBD_LL_Resume>
}
 8007c8e:	bd08      	pop	{r3, pc}

08007c90 <USBD_LL_OpenEP>:
{
 8007c90:	b510      	push	{r4, lr}
 8007c92:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c94:	4613      	mov	r3, r2
 8007c96:	4622      	mov	r2, r4
 8007c98:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007c9c:	f7fa f98b 	bl	8001fb6 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ca0:	f7ff ffa4 	bl	8007bec <USBD_Get_USB_Status>
}
 8007ca4:	bd10      	pop	{r4, pc}

08007ca6 <USBD_LL_StallEP>:
{
 8007ca6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ca8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007cac:	f7fa fc69 	bl	8002582 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb0:	f7ff ff9c 	bl	8007bec <USBD_Get_USB_Status>
}
 8007cb4:	bd08      	pop	{r3, pc}

08007cb6 <USBD_LL_ClearStallEP>:
{
 8007cb6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007cb8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007cbc:	f7fa fc98 	bl	80025f0 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cc0:	f7ff ff94 	bl	8007bec <USBD_Get_USB_Status>
}
 8007cc4:	bd08      	pop	{r3, pc}

08007cc6 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007cc6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8007cca:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007cce:	d106      	bne.n	8007cde <USBD_LL_IsStallEP+0x18>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007cd0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007cd4:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8007cd8:	f891 012a 	ldrb.w	r0, [r1, #298]	; 0x12a
}
 8007cdc:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007cde:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007ce2:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8007ce6:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 8007cea:	4770      	bx	lr

08007cec <USBD_LL_SetUSBAddress>:
{
 8007cec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007cee:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007cf2:	f7fa f94c 	bl	8001f8e <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf6:	f7ff ff79 	bl	8007bec <USBD_Get_USB_Status>
}
 8007cfa:	bd08      	pop	{r3, pc}

08007cfc <USBD_LL_Transmit>:
{
 8007cfc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007cfe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007d02:	f7fa f9af 	bl	8002064 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d06:	f7ff ff71 	bl	8007bec <USBD_Get_USB_Status>
}
 8007d0a:	bd08      	pop	{r3, pc}

08007d0c <USBD_LL_PrepareReceive>:
{
 8007d0c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d0e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007d12:	f7fa f988 	bl	8002026 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d16:	f7ff ff69 	bl	8007bec <USBD_Get_USB_Status>
}
 8007d1a:	bd08      	pop	{r3, pc}

08007d1c <is_printable>:
    {VT100_KEY_MOVE_CURSOR_HOME,    (uint8_t*)key_move_cursor_home,      sizeof(key_move_cursor_home)},
};

static bool is_printable(uint8_t byte)
{
    return ((byte >= 0x20) && (byte <= 0x7E))? true:false;
 8007d1c:	3820      	subs	r0, #32
 8007d1e:	b2c0      	uxtb	r0, r0
}
 8007d20:	285e      	cmp	r0, #94	; 0x5e
 8007d22:	bf8c      	ite	hi
 8007d24:	2000      	movhi	r0, #0
 8007d26:	2001      	movls	r0, #1
 8007d28:	4770      	bx	lr
	...

08007d2c <find_key>:

static vt100_key_t find_key(uint8_t * buf, uint8_t len)
{
 8007d2c:	b570      	push	{r4, r5, r6, lr}
 8007d2e:	4606      	mov	r6, r0
 8007d30:	460d      	mov	r5, r1
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8007d32:	2400      	movs	r4, #0
 8007d34:	e000      	b.n	8007d38 <find_key+0xc>
 8007d36:	3401      	adds	r4, #1
 8007d38:	2c0e      	cmp	r4, #14
 8007d3a:	d816      	bhi.n	8007d6a <find_key+0x3e>
    {
        if ((len == vt100_keycodes[ii].code_len) &&
 8007d3c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007d40:	009a      	lsls	r2, r3, #2
 8007d42:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <find_key+0x44>)
 8007d44:	4413      	add	r3, r2
 8007d46:	7a1b      	ldrb	r3, [r3, #8]
 8007d48:	42ab      	cmp	r3, r5
 8007d4a:	d1f4      	bne.n	8007d36 <find_key+0xa>
            (0 == strncmp((const char*)vt100_keycodes[ii].code, (const char*)buf, len)))
 8007d4c:	4b08      	ldr	r3, [pc, #32]	; (8007d70 <find_key+0x44>)
 8007d4e:	4413      	add	r3, r2
 8007d50:	462a      	mov	r2, r5
 8007d52:	4631      	mov	r1, r6
 8007d54:	6858      	ldr	r0, [r3, #4]
 8007d56:	f001 f987 	bl	8009068 <strncmp>
        if ((len == vt100_keycodes[ii].code_len) &&
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d1eb      	bne.n	8007d36 <find_key+0xa>
        {
            return vt100_keycodes[ii].key;
 8007d5e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8007d62:	00a3      	lsls	r3, r4, #2
 8007d64:	4a02      	ldr	r2, [pc, #8]	; (8007d70 <find_key+0x44>)
 8007d66:	5cd0      	ldrb	r0, [r2, r3]
 8007d68:	e000      	b.n	8007d6c <find_key+0x40>
        }
    }
    
    return VT100_KEY_INVALID;
 8007d6a:	2000      	movs	r0, #0
}
 8007d6c:	bd70      	pop	{r4, r5, r6, pc}
 8007d6e:	bf00      	nop
 8007d70:	0800ca84 	.word	0x0800ca84

08007d74 <vt100_process_byte>:

vt100_key_t vt100_process_byte(uint8_t byte)
{
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4605      	mov	r5, r0
    static uint8_t cbuf[8] = {0};
    static uint8_t cbuf_idx = 0;
    
    if ((true == is_printable(byte)) && (0 == cbuf_idx))
 8007d78:	f7ff ffd0 	bl	8007d1c <is_printable>
 8007d7c:	b110      	cbz	r0, 8007d84 <vt100_process_byte+0x10>
 8007d7e:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <vt100_process_byte+0x58>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	b1fb      	cbz	r3, 8007dc4 <vt100_process_byte+0x50>
    {
        return VT100_KEY_PRINTABLE;
    }
    else if (0x0D == byte) /* Enter */
 8007d84:	2d0d      	cmp	r5, #13
 8007d86:	d01f      	beq.n	8007dc8 <vt100_process_byte+0x54>
        return VT100_KEY_ENTER;
    }
    else
    {
        vt100_key_t key = VT100_KEY_INVALID;
        cbuf[cbuf_idx++] = byte;
 8007d88:	4a10      	ldr	r2, [pc, #64]	; (8007dcc <vt100_process_byte+0x58>)
 8007d8a:	7813      	ldrb	r3, [r2, #0]
 8007d8c:	1c5c      	adds	r4, r3, #1
 8007d8e:	b2e4      	uxtb	r4, r4
 8007d90:	7014      	strb	r4, [r2, #0]
 8007d92:	480f      	ldr	r0, [pc, #60]	; (8007dd0 <vt100_process_byte+0x5c>)
 8007d94:	54c5      	strb	r5, [r0, r3]
        key = find_key(cbuf, cbuf_idx);
 8007d96:	4621      	mov	r1, r4
 8007d98:	f7ff ffc8 	bl	8007d2c <find_key>
        if (VT100_KEY_INVALID != key)
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	b918      	cbnz	r0, 8007da8 <vt100_process_byte+0x34>
            memset(cbuf, 0, sizeof(cbuf));
            return key;
        }
        else
        {
            if (cbuf_idx >= sizeof(cbuf))
 8007da0:	2c07      	cmp	r4, #7
 8007da2:	d808      	bhi.n	8007db6 <vt100_process_byte+0x42>
            }
        }
    }

    return VT100_KEY_INVALID;
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	bd38      	pop	{r3, r4, r5, pc}
            cbuf_idx = 0;
 8007da8:	2200      	movs	r2, #0
 8007daa:	4908      	ldr	r1, [pc, #32]	; (8007dcc <vt100_process_byte+0x58>)
 8007dac:	700a      	strb	r2, [r1, #0]
            memset(cbuf, 0, sizeof(cbuf));
 8007dae:	4908      	ldr	r1, [pc, #32]	; (8007dd0 <vt100_process_byte+0x5c>)
 8007db0:	600a      	str	r2, [r1, #0]
 8007db2:	604a      	str	r2, [r1, #4]
            return key;
 8007db4:	e7f6      	b.n	8007da4 <vt100_process_byte+0x30>
                cbuf_idx = 0;
 8007db6:	2200      	movs	r2, #0
 8007db8:	4904      	ldr	r1, [pc, #16]	; (8007dcc <vt100_process_byte+0x58>)
 8007dba:	700a      	strb	r2, [r1, #0]
                memset(cbuf, 0, sizeof(cbuf));
 8007dbc:	4904      	ldr	r1, [pc, #16]	; (8007dd0 <vt100_process_byte+0x5c>)
 8007dbe:	600a      	str	r2, [r1, #0]
 8007dc0:	604a      	str	r2, [r1, #4]
 8007dc2:	e7ef      	b.n	8007da4 <vt100_process_byte+0x30>
        return VT100_KEY_PRINTABLE;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e7ed      	b.n	8007da4 <vt100_process_byte+0x30>
        return VT100_KEY_ENTER;
 8007dc8:	2308      	movs	r3, #8
 8007dca:	e7eb      	b.n	8007da4 <vt100_process_byte+0x30>
 8007dcc:	200005b0 	.word	0x200005b0
 8007dd0:	200005a8 	.word	0x200005a8

08007dd4 <vt100_get_keycode>:

vt100_keycode_t * vt100_get_keycode(vt100_key_t key)
{
    if (key >= VT100_KEY_MAX) return NULL;
 8007dd4:	280e      	cmp	r0, #14
 8007dd6:	d813      	bhi.n	8007e00 <vt100_get_keycode+0x2c>
    
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8007dd8:	2300      	movs	r3, #0
 8007dda:	2b0e      	cmp	r3, #14
 8007ddc:	d80e      	bhi.n	8007dfc <vt100_get_keycode+0x28>
    {
        if (vt100_keycodes[ii].key == key)
 8007dde:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8007de2:	008a      	lsls	r2, r1, #2
 8007de4:	4907      	ldr	r1, [pc, #28]	; (8007e04 <vt100_get_keycode+0x30>)
 8007de6:	5c8a      	ldrb	r2, [r1, r2]
 8007de8:	4282      	cmp	r2, r0
 8007dea:	d001      	beq.n	8007df0 <vt100_get_keycode+0x1c>
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8007dec:	3301      	adds	r3, #1
 8007dee:	e7f4      	b.n	8007dda <vt100_get_keycode+0x6>
        {
            return (vt100_keycode_t*)&vt100_keycodes[ii];
 8007df0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007df4:	009a      	lsls	r2, r3, #2
 8007df6:	4608      	mov	r0, r1
 8007df8:	4410      	add	r0, r2
 8007dfa:	4770      	bx	lr
        }
    }
    
    return NULL;
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	4770      	bx	lr
    if (key >= VT100_KEY_MAX) return NULL;
 8007e00:	2000      	movs	r0, #0
}
 8007e02:	4770      	bx	lr
 8007e04:	0800ca84 	.word	0x0800ca84

08007e08 <fx_pwm_incandescent_run>:
	register_fx(&param,fx_num);
}


t_fx_result fx_pwm_incandescent_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 8007e08:	b538      	push	{r3, r4, r5, lr}
	static uint32_t event_cnt = 0;
	static uint32_t dur_cnt = 0;
	uint8_t enabled = 0;

	switch(state)
 8007e0a:	2801      	cmp	r0, #1
 8007e0c:	d016      	beq.n	8007e3c <fx_pwm_incandescent_run+0x34>
 8007e0e:	b118      	cbz	r0, 8007e18 <fx_pwm_incandescent_run+0x10>
 8007e10:	2802      	cmp	r0, #2
 8007e12:	d051      	beq.n	8007eb8 <fx_pwm_incandescent_run+0xb0>
			disable_DMX_light_Update(false);			
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 8007e14:	2003      	movs	r0, #3
 8007e16:	e010      	b.n	8007e3a <fx_pwm_incandescent_run+0x32>
			disable_DMX_light_Update(true);
 8007e18:	2001      	movs	r0, #1
 8007e1a:	f000 fe03 	bl	8008a24 <disable_DMX_light_Update>
			set_pwm_direct(0,0,0);
 8007e1e:	2200      	movs	r2, #0
 8007e20:	4611      	mov	r1, r2
 8007e22:	4610      	mov	r0, r2
 8007e24:	f000 fd47 	bl	80088b6 <set_pwm_direct>
			set_DMX_variable(STRIP1_COMPLEXITY, 16);
 8007e28:	2110      	movs	r1, #16
 8007e2a:	200f      	movs	r0, #15
 8007e2c:	f000 fd4b 	bl	80088c6 <set_DMX_variable>
			set_DMX_variable(STRIP1_SPEED, 1);
 8007e30:	2101      	movs	r1, #1
 8007e32:	200d      	movs	r0, #13
 8007e34:	f000 fd47 	bl	80088c6 <set_DMX_variable>
			return FX_OK;
 8007e38:	2000      	movs	r0, #0
}
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
			if ((event_cnt == 0) && (dur_cnt == 0))
 8007e3c:	4b23      	ldr	r3, [pc, #140]	; (8007ecc <fx_pwm_incandescent_run+0xc4>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	b913      	cbnz	r3, 8007e48 <fx_pwm_incandescent_run+0x40>
 8007e42:	4a23      	ldr	r2, [pc, #140]	; (8007ed0 <fx_pwm_incandescent_run+0xc8>)
 8007e44:	6812      	ldr	r2, [r2, #0]
 8007e46:	b17a      	cbz	r2, 8007e68 <fx_pwm_incandescent_run+0x60>
			else if ((event_cnt == 0) && (dur_cnt != 0))
 8007e48:	bb43      	cbnz	r3, 8007e9c <fx_pwm_incandescent_run+0x94>
 8007e4a:	4a21      	ldr	r2, [pc, #132]	; (8007ed0 <fx_pwm_incandescent_run+0xc8>)
 8007e4c:	6812      	ldr	r2, [r2, #0]
 8007e4e:	b32a      	cbz	r2, 8007e9c <fx_pwm_incandescent_run+0x94>
				dur_cnt--;
 8007e50:	3a01      	subs	r2, #1
 8007e52:	4b1f      	ldr	r3, [pc, #124]	; (8007ed0 <fx_pwm_incandescent_run+0xc8>)
 8007e54:	601a      	str	r2, [r3, #0]
				if (dur_cnt == 0)
 8007e56:	b1a2      	cbz	r2, 8007e82 <fx_pwm_incandescent_run+0x7a>
				set_pwm_direct(0,0,65535);
 8007e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4608      	mov	r0, r1
 8007e60:	f000 fd29 	bl	80088b6 <set_pwm_direct>
			return FX_RUNNING;
 8007e64:	2002      	movs	r0, #2
 8007e66:	e7e8      	b.n	8007e3a <fx_pwm_incandescent_run+0x32>
				dur_cnt = simple_rnd()>>24;
 8007e68:	f000 fdb6 	bl	80089d8 <simple_rnd>
 8007e6c:	0e04      	lsrs	r4, r0, #24
 8007e6e:	4d18      	ldr	r5, [pc, #96]	; (8007ed0 <fx_pwm_incandescent_run+0xc8>)
 8007e70:	602c      	str	r4, [r5, #0]
				dur_cnt = dur_cnt / (get_DMX_variable(STRIP1_COMPLEXITY)+1);
 8007e72:	200f      	movs	r0, #15
 8007e74:	f000 fd23 	bl	80088be <get_DMX_variable>
 8007e78:	3001      	adds	r0, #1
 8007e7a:	fbb4 f4f0 	udiv	r4, r4, r0
 8007e7e:	602c      	str	r4, [r5, #0]
 8007e80:	e7ea      	b.n	8007e58 <fx_pwm_incandescent_run+0x50>
					event_cnt = simple_rnd()>>20;
 8007e82:	f000 fda9 	bl	80089d8 <simple_rnd>
 8007e86:	0d04      	lsrs	r4, r0, #20
 8007e88:	4d10      	ldr	r5, [pc, #64]	; (8007ecc <fx_pwm_incandescent_run+0xc4>)
 8007e8a:	602c      	str	r4, [r5, #0]
					event_cnt = event_cnt / (get_DMX_variable(STRIP1_SPEED)+1);
 8007e8c:	200d      	movs	r0, #13
 8007e8e:	f000 fd16 	bl	80088be <get_DMX_variable>
 8007e92:	3001      	adds	r0, #1
 8007e94:	fbb4 f4f0 	udiv	r4, r4, r0
 8007e98:	602c      	str	r4, [r5, #0]
 8007e9a:	e7dd      	b.n	8007e58 <fx_pwm_incandescent_run+0x50>
			else if ((event_cnt != 0) && (dur_cnt == 0))
 8007e9c:	b12b      	cbz	r3, 8007eaa <fx_pwm_incandescent_run+0xa2>
 8007e9e:	4a0c      	ldr	r2, [pc, #48]	; (8007ed0 <fx_pwm_incandescent_run+0xc8>)
 8007ea0:	6812      	ldr	r2, [r2, #0]
 8007ea2:	b912      	cbnz	r2, 8007eaa <fx_pwm_incandescent_run+0xa2>
				event_cnt--;
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	4a09      	ldr	r2, [pc, #36]	; (8007ecc <fx_pwm_incandescent_run+0xc4>)
 8007ea8:	6013      	str	r3, [r2, #0]
				set_pwm_direct(0,0,0);
 8007eaa:	2200      	movs	r2, #0
 8007eac:	4611      	mov	r1, r2
 8007eae:	4610      	mov	r0, r2
 8007eb0:	f000 fd01 	bl	80088b6 <set_pwm_direct>
			return FX_RUNNING;
 8007eb4:	2002      	movs	r0, #2
 8007eb6:	e7c0      	b.n	8007e3a <fx_pwm_incandescent_run+0x32>
			set_pwm_direct(0,0,0);
 8007eb8:	2200      	movs	r2, #0
 8007eba:	4611      	mov	r1, r2
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	f000 fcfa 	bl	80088b6 <set_pwm_direct>
			disable_DMX_light_Update(false);			
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	f000 fdae 	bl	8008a24 <disable_DMX_light_Update>
			return FX_COMPLETED;
 8007ec8:	2001      	movs	r0, #1
 8007eca:	e7b6      	b.n	8007e3a <fx_pwm_incandescent_run+0x32>
 8007ecc:	200005b8 	.word	0x200005b8
 8007ed0:	200005b4 	.word	0x200005b4

08007ed4 <fx_pwm_incandescent>:
{
 8007ed4:	b508      	push	{r3, lr}
	register_fx(&param,fx_num);
 8007ed6:	4601      	mov	r1, r0
 8007ed8:	4801      	ldr	r0, [pc, #4]	; (8007ee0 <fx_pwm_incandescent+0xc>)
 8007eda:	f7fd f9a1 	bl	8005220 <register_fx>
}
 8007ede:	bd08      	pop	{r3, pc}
 8007ee0:	0800cb38 	.word	0x0800cb38

08007ee4 <fx_pwm_poofer_run>:

//After 10 Sec Poofer will turn off and needs to be reneabled by setting COMPLEXITY to 0...
#define SAFTY_TIMEOUT 10000

t_fx_result fx_pwm_poofer_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 8007ee4:	b508      	push	{r3, lr}
	static uint8_t enabled = 0;
	static uint8_t lockout = 0;
	static uint32_t last_ms = 0;
	uint8_t var;

	switch(state)
 8007ee6:	2801      	cmp	r0, #1
 8007ee8:	d012      	beq.n	8007f10 <fx_pwm_poofer_run+0x2c>
 8007eea:	b118      	cbz	r0, 8007ef4 <fx_pwm_poofer_run+0x10>
 8007eec:	2802      	cmp	r0, #2
 8007eee:	d048      	beq.n	8007f82 <fx_pwm_poofer_run+0x9e>
			disable_DMX_light_Update(false);			
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 8007ef0:	2003      	movs	r0, #3
 8007ef2:	e00c      	b.n	8007f0e <fx_pwm_poofer_run+0x2a>
			disable_DMX_light_Update(true);
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	f000 fd95 	bl	8008a24 <disable_DMX_light_Update>
			last_ms = millisec();
 8007efa:	f000 fce8 	bl	80088ce <millisec>
 8007efe:	4b26      	ldr	r3, [pc, #152]	; (8007f98 <fx_pwm_poofer_run+0xb4>)
 8007f00:	6018      	str	r0, [r3, #0]
			set_pwm_direct(0,0,0);
 8007f02:	2200      	movs	r2, #0
 8007f04:	4611      	mov	r1, r2
 8007f06:	4610      	mov	r0, r2
 8007f08:	f000 fcd5 	bl	80088b6 <set_pwm_direct>
			return FX_OK;
 8007f0c:	2000      	movs	r0, #0
}
 8007f0e:	bd08      	pop	{r3, pc}
			var = get_DMX_variable(STRIP1_COMPLEXITY);
 8007f10:	200f      	movs	r0, #15
 8007f12:	f000 fcd4 	bl	80088be <get_DMX_variable>
			if (var == 255)
 8007f16:	28ff      	cmp	r0, #255	; 0xff
 8007f18:	d013      	beq.n	8007f42 <fx_pwm_poofer_run+0x5e>
				enabled = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	4a1f      	ldr	r2, [pc, #124]	; (8007f9c <fx_pwm_poofer_run+0xb8>)
 8007f1e:	7013      	strb	r3, [r2, #0]
				lockout = 0;
 8007f20:	4a1f      	ldr	r2, [pc, #124]	; (8007fa0 <fx_pwm_poofer_run+0xbc>)
 8007f22:	7013      	strb	r3, [r2, #0]
			if ((enabled == 1)&& (lockout == 0))
 8007f24:	4b1d      	ldr	r3, [pc, #116]	; (8007f9c <fx_pwm_poofer_run+0xb8>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d102      	bne.n	8007f32 <fx_pwm_poofer_run+0x4e>
 8007f2c:	4b1c      	ldr	r3, [pc, #112]	; (8007fa0 <fx_pwm_poofer_run+0xbc>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	b303      	cbz	r3, 8007f74 <fx_pwm_poofer_run+0x90>
				set_pwm_direct(0,0,65535);
 8007f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f36:	2100      	movs	r1, #0
 8007f38:	4608      	mov	r0, r1
 8007f3a:	f000 fcbc 	bl	80088b6 <set_pwm_direct>
			return FX_RUNNING;
 8007f3e:	2002      	movs	r0, #2
 8007f40:	e7e5      	b.n	8007f0e <fx_pwm_poofer_run+0x2a>
					if ((enabled == 1) && (millisec() > (last_ms + SAFTY_TIMEOUT)))
 8007f42:	4b16      	ldr	r3, [pc, #88]	; (8007f9c <fx_pwm_poofer_run+0xb8>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d007      	beq.n	8007f5a <fx_pwm_poofer_run+0x76>
						last_ms = millisec();
 8007f4a:	f000 fcc0 	bl	80088ce <millisec>
 8007f4e:	4b12      	ldr	r3, [pc, #72]	; (8007f98 <fx_pwm_poofer_run+0xb4>)
 8007f50:	6018      	str	r0, [r3, #0]
						enabled = 1;
 8007f52:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <fx_pwm_poofer_run+0xb8>)
 8007f54:	2201      	movs	r2, #1
 8007f56:	701a      	strb	r2, [r3, #0]
 8007f58:	e7e4      	b.n	8007f24 <fx_pwm_poofer_run+0x40>
					if ((enabled == 1) && (millisec() > (last_ms + SAFTY_TIMEOUT)))
 8007f5a:	f000 fcb8 	bl	80088ce <millisec>
 8007f5e:	4b0e      	ldr	r3, [pc, #56]	; (8007f98 <fx_pwm_poofer_run+0xb4>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007f66:	3310      	adds	r3, #16
 8007f68:	4298      	cmp	r0, r3
 8007f6a:	d9ee      	bls.n	8007f4a <fx_pwm_poofer_run+0x66>
						lockout = 1;
 8007f6c:	4b0c      	ldr	r3, [pc, #48]	; (8007fa0 <fx_pwm_poofer_run+0xbc>)
 8007f6e:	2201      	movs	r2, #1
 8007f70:	701a      	strb	r2, [r3, #0]
 8007f72:	e7d7      	b.n	8007f24 <fx_pwm_poofer_run+0x40>
				set_pwm_direct(0,0,0);
 8007f74:	2200      	movs	r2, #0
 8007f76:	4611      	mov	r1, r2
 8007f78:	4610      	mov	r0, r2
 8007f7a:	f000 fc9c 	bl	80088b6 <set_pwm_direct>
			return FX_RUNNING;
 8007f7e:	2002      	movs	r0, #2
				set_pwm_direct(0,0,0);
 8007f80:	e7c5      	b.n	8007f0e <fx_pwm_poofer_run+0x2a>
			set_pwm_direct(0,0,0);
 8007f82:	2200      	movs	r2, #0
 8007f84:	4611      	mov	r1, r2
 8007f86:	4610      	mov	r0, r2
 8007f88:	f000 fc95 	bl	80088b6 <set_pwm_direct>
			disable_DMX_light_Update(false);			
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	f000 fd49 	bl	8008a24 <disable_DMX_light_Update>
			return FX_COMPLETED;
 8007f92:	2001      	movs	r0, #1
 8007f94:	e7bb      	b.n	8007f0e <fx_pwm_poofer_run+0x2a>
 8007f96:	bf00      	nop
 8007f98:	200005c0 	.word	0x200005c0
 8007f9c:	200005bc 	.word	0x200005bc
 8007fa0:	200005c4 	.word	0x200005c4

08007fa4 <fx_pwm_poofer>:
{
 8007fa4:	b508      	push	{r3, lr}
	register_fx(&param,fx_num);
 8007fa6:	4601      	mov	r1, r0
 8007fa8:	4801      	ldr	r0, [pc, #4]	; (8007fb0 <fx_pwm_poofer+0xc>)
 8007faa:	f7fd f939 	bl	8005220 <register_fx>
}
 8007fae:	bd08      	pop	{r3, pc}
 8007fb0:	0800cb4c 	.word	0x0800cb4c

08007fb4 <fx_pwm_pulsing_light_run>:
	//Register effect
	register_fx(&param2,fx_num);
}

t_fx_result fx_pwm_pulsing_light_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 8007fb4:	b538      	push	{r3, r4, r5, lr}
	uint8_t ii = 0;
	int16_t val;

	switch(state)
 8007fb6:	2801      	cmp	r0, #1
 8007fb8:	d00b      	beq.n	8007fd2 <fx_pwm_pulsing_light_run+0x1e>
 8007fba:	b118      	cbz	r0, 8007fc4 <fx_pwm_pulsing_light_run+0x10>
 8007fbc:	2802      	cmp	r0, #2
 8007fbe:	d061      	beq.n	8008084 <fx_pwm_pulsing_light_run+0xd0>
				set_pwm_light(ii, 0);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 8007fc0:	2003      	movs	r0, #3
 8007fc2:	e005      	b.n	8007fd0 <fx_pwm_pulsing_light_run+0x1c>
			data = 0;
 8007fc4:	2400      	movs	r4, #0
 8007fc6:	4b30      	ldr	r3, [pc, #192]	; (8008088 <fx_pwm_pulsing_light_run+0xd4>)
 8007fc8:	701c      	strb	r4, [r3, #0]
			reset_frame_delay();
 8007fca:	f000 fc55 	bl	8008878 <reset_frame_delay>
			return FX_OK;
 8007fce:	4620      	mov	r0, r4
}
 8007fd0:	bd38      	pop	{r3, r4, r5, pc}
			if (state == 0)  //Off
 8007fd2:	b188      	cbz	r0, 8007ff8 <fx_pwm_pulsing_light_run+0x44>
			else if (state == 1)	//Ramp Up
 8007fd4:	2801      	cmp	r0, #1
 8007fd6:	d020      	beq.n	800801a <fx_pwm_pulsing_light_run+0x66>
			else if (state == 2)  //On
 8007fd8:	2802      	cmp	r0, #2
 8007fda:	d030      	beq.n	800803e <fx_pwm_pulsing_light_run+0x8a>
				val = data - get_DMX_variable(DMX_STRIP1_V1);
 8007fdc:	4b2a      	ldr	r3, [pc, #168]	; (8008088 <fx_pwm_pulsing_light_run+0xd4>)
 8007fde:	781c      	ldrb	r4, [r3, #0]
 8007fe0:	2010      	movs	r0, #16
 8007fe2:	f000 fc6c 	bl	80088be <get_DMX_variable>
 8007fe6:	b283      	uxth	r3, r0
 8007fe8:	1ae3      	subs	r3, r4, r3
				if (val<0)
 8007fea:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007fee:	d12f      	bne.n	8008050 <fx_pwm_pulsing_light_run+0x9c>
					data = val;
 8007ff0:	1a24      	subs	r4, r4, r0
 8007ff2:	4b25      	ldr	r3, [pc, #148]	; (8008088 <fx_pwm_pulsing_light_run+0xd4>)
 8007ff4:	701c      	strb	r4, [r3, #0]
 8007ff6:	e007      	b.n	8008008 <fx_pwm_pulsing_light_run+0x54>
				data = 0;
 8007ff8:	4b23      	ldr	r3, [pc, #140]	; (8008088 <fx_pwm_pulsing_light_run+0xd4>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	701a      	strb	r2, [r3, #0]
				if (!check_frame_delay(get_DMX_variable(DMX_STRIP1_SPEED)))
 8007ffe:	200d      	movs	r0, #13
 8008000:	f000 fc5d 	bl	80088be <get_DMX_variable>
 8008004:	f000 fc4a 	bl	800889c <check_frame_delay>
			val = get_DMX_variable(DMX_STRIP1_SIZE);
 8008008:	200e      	movs	r0, #14
 800800a:	f000 fc58 	bl	80088be <get_DMX_variable>
 800800e:	b205      	sxth	r5, r0
			if (val>9)
 8008010:	2d09      	cmp	r5, #9
 8008012:	dd00      	ble.n	8008016 <fx_pwm_pulsing_light_run+0x62>
				val = 9;
 8008014:	2509      	movs	r5, #9
			for (ii=0;ii<val+1;ii++)
 8008016:	2400      	movs	r4, #0
 8008018:	e025      	b.n	8008066 <fx_pwm_pulsing_light_run+0xb2>
				val = data + get_DMX_variable(DMX_STRIP1_COMPLEXITY);
 800801a:	4b1b      	ldr	r3, [pc, #108]	; (8008088 <fx_pwm_pulsing_light_run+0xd4>)
 800801c:	781c      	ldrb	r4, [r3, #0]
 800801e:	200f      	movs	r0, #15
 8008020:	f000 fc4d 	bl	80088be <get_DMX_variable>
 8008024:	b283      	uxth	r3, r0
 8008026:	4423      	add	r3, r4
 8008028:	b21b      	sxth	r3, r3
				if (val>255)
 800802a:	2bff      	cmp	r3, #255	; 0xff
 800802c:	dd03      	ble.n	8008036 <fx_pwm_pulsing_light_run+0x82>
					data = 255;
 800802e:	4b16      	ldr	r3, [pc, #88]	; (8008088 <fx_pwm_pulsing_light_run+0xd4>)
 8008030:	22ff      	movs	r2, #255	; 0xff
 8008032:	701a      	strb	r2, [r3, #0]
 8008034:	e7e8      	b.n	8008008 <fx_pwm_pulsing_light_run+0x54>
					data = val;
 8008036:	4404      	add	r4, r0
 8008038:	4b13      	ldr	r3, [pc, #76]	; (8008088 <fx_pwm_pulsing_light_run+0xd4>)
 800803a:	701c      	strb	r4, [r3, #0]
 800803c:	e7e4      	b.n	8008008 <fx_pwm_pulsing_light_run+0x54>
				data = 255;
 800803e:	4b12      	ldr	r3, [pc, #72]	; (8008088 <fx_pwm_pulsing_light_run+0xd4>)
 8008040:	22ff      	movs	r2, #255	; 0xff
 8008042:	701a      	strb	r2, [r3, #0]
				if (!check_frame_delay(get_DMX_variable(DMX_STRIP1_SPEED)))
 8008044:	200d      	movs	r0, #13
 8008046:	f000 fc3a 	bl	80088be <get_DMX_variable>
 800804a:	f000 fc27 	bl	800889c <check_frame_delay>
 800804e:	e7db      	b.n	8008008 <fx_pwm_pulsing_light_run+0x54>
					data = 0;
 8008050:	4b0d      	ldr	r3, [pc, #52]	; (8008088 <fx_pwm_pulsing_light_run+0xd4>)
 8008052:	2200      	movs	r2, #0
 8008054:	701a      	strb	r2, [r3, #0]
 8008056:	e7d7      	b.n	8008008 <fx_pwm_pulsing_light_run+0x54>
				set_pwm_light(ii, data);
 8008058:	4b0b      	ldr	r3, [pc, #44]	; (8008088 <fx_pwm_pulsing_light_run+0xd4>)
 800805a:	7819      	ldrb	r1, [r3, #0]
 800805c:	4620      	mov	r0, r4
 800805e:	f000 fc25 	bl	80088ac <set_pwm_light>
			for (ii=0;ii<val+1;ii++)
 8008062:	3401      	adds	r4, #1
 8008064:	b2e4      	uxtb	r4, r4
 8008066:	1c6b      	adds	r3, r5, #1
 8008068:	429c      	cmp	r4, r3
 800806a:	dbf5      	blt.n	8008058 <fx_pwm_pulsing_light_run+0xa4>
			return FX_RUNNING;
 800806c:	2002      	movs	r0, #2
 800806e:	e7af      	b.n	8007fd0 <fx_pwm_pulsing_light_run+0x1c>
				set_pwm_light(ii, 0);
 8008070:	2100      	movs	r1, #0
 8008072:	4620      	mov	r0, r4
 8008074:	f000 fc1a 	bl	80088ac <set_pwm_light>
			for (ii=0;ii<10;ii++)
 8008078:	3401      	adds	r4, #1
 800807a:	b2e4      	uxtb	r4, r4
 800807c:	2c09      	cmp	r4, #9
 800807e:	d9f7      	bls.n	8008070 <fx_pwm_pulsing_light_run+0xbc>
			return FX_COMPLETED;
 8008080:	2001      	movs	r0, #1
 8008082:	e7a5      	b.n	8007fd0 <fx_pwm_pulsing_light_run+0x1c>
			for (ii=0;ii<10;ii++)
 8008084:	2400      	movs	r4, #0
 8008086:	e7f9      	b.n	800807c <fx_pwm_pulsing_light_run+0xc8>
 8008088:	20000d80 	.word	0x20000d80

0800808c <fx_pwm_pulsing_light>:
{
 800808c:	b508      	push	{r3, lr}
	register_fx(&param1,fx_num);
 800808e:	4601      	mov	r1, r0
 8008090:	4801      	ldr	r0, [pc, #4]	; (8008098 <fx_pwm_pulsing_light+0xc>)
 8008092:	f7fd f8c5 	bl	8005220 <register_fx>
}
 8008096:	bd08      	pop	{r3, pc}
 8008098:	0800cb60 	.word	0x0800cb60

0800809c <fx_pwm_pulsing_pulse_light>:
{
 800809c:	b508      	push	{r3, lr}
	register_fx(&param2,fx_num);
 800809e:	4601      	mov	r1, r0
 80080a0:	4801      	ldr	r0, [pc, #4]	; (80080a8 <fx_pwm_pulsing_pulse_light+0xc>)
 80080a2:	f7fd f8bd 	bl	8005220 <register_fx>
}
 80080a6:	bd08      	pop	{r3, pc}
 80080a8:	0800cb74 	.word	0x0800cb74

080080ac <fx_pwm_running_light_run>:
	//Register effect
	register_fx(&param2, fx_num);
}

t_fx_result fx_pwm_running_light_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 80080ac:	b570      	push	{r4, r5, r6, lr}
	uint8_t ii = 0;
	int16_t val;

	switch(state)
 80080ae:	2801      	cmp	r0, #1
 80080b0:	d012      	beq.n	80080d8 <fx_pwm_running_light_run+0x2c>
 80080b2:	b118      	cbz	r0, 80080bc <fx_pwm_running_light_run+0x10>
 80080b4:	2802      	cmp	r0, #2
 80080b6:	d061      	beq.n	800817c <fx_pwm_running_light_run+0xd0>
			free(data);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 80080b8:	2003      	movs	r0, #3
}
 80080ba:	bd70      	pop	{r4, r5, r6, pc}
			data = malloc(11);
 80080bc:	200b      	movs	r0, #11
 80080be:	f000 feeb 	bl	8008e98 <malloc>
 80080c2:	4b32      	ldr	r3, [pc, #200]	; (800818c <fx_pwm_running_light_run+0xe0>)
 80080c4:	6018      	str	r0, [r3, #0]
			memset(data, 0, 11);
 80080c6:	2400      	movs	r4, #0
 80080c8:	6004      	str	r4, [r0, #0]
 80080ca:	6044      	str	r4, [r0, #4]
 80080cc:	f8c0 4007 	str.w	r4, [r0, #7]
			reset_frame_delay();
 80080d0:	f000 fbd2 	bl	8008878 <reset_frame_delay>
			return FX_OK;
 80080d4:	4620      	mov	r0, r4
 80080d6:	e7f0      	b.n	80080ba <fx_pwm_running_light_run+0xe>
			if (!check_frame_delay(get_DMX_variable(DMX_STRIP1_SPEED))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 80080d8:	200d      	movs	r0, #13
 80080da:	f000 fbf0 	bl	80088be <get_DMX_variable>
 80080de:	f000 fbdd 	bl	800889c <check_frame_delay>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d050      	beq.n	8008188 <fx_pwm_running_light_run+0xdc>
			for (ii=0;ii<10;ii++)
 80080e6:	2500      	movs	r5, #0
 80080e8:	e004      	b.n	80080f4 <fx_pwm_running_light_run+0x48>
				data[ii] = (uint8_t)val;
 80080ea:	4b28      	ldr	r3, [pc, #160]	; (800818c <fx_pwm_running_light_run+0xe0>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	5598      	strb	r0, [r3, r6]
			for (ii=0;ii<10;ii++)
 80080f0:	3501      	adds	r5, #1
 80080f2:	b2ed      	uxtb	r5, r5
 80080f4:	2d09      	cmp	r5, #9
 80080f6:	d80e      	bhi.n	8008116 <fx_pwm_running_light_run+0x6a>
				val = data[ii] - (255 - get_DMX_variable(DMX_STRIP1_COMPLEXITY));
 80080f8:	462e      	mov	r6, r5
 80080fa:	4b24      	ldr	r3, [pc, #144]	; (800818c <fx_pwm_running_light_run+0xe0>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	5d5c      	ldrb	r4, [r3, r5]
 8008100:	200f      	movs	r0, #15
 8008102:	f000 fbdc 	bl	80088be <get_DMX_variable>
 8008106:	b280      	uxth	r0, r0
 8008108:	4420      	add	r0, r4
 800810a:	38ff      	subs	r0, #255	; 0xff
 800810c:	b200      	sxth	r0, r0
				if (val<0)
 800810e:	2800      	cmp	r0, #0
 8008110:	daeb      	bge.n	80080ea <fx_pwm_running_light_run+0x3e>
					val = 0;
 8008112:	2000      	movs	r0, #0
 8008114:	e7e9      	b.n	80080ea <fx_pwm_running_light_run+0x3e>
			ii = get_DMX_variable(DMX_STRIP1_SIZE);
 8008116:	200e      	movs	r0, #14
 8008118:	f000 fbd1 	bl	80088be <get_DMX_variable>
 800811c:	4604      	mov	r4, r0
			if (ii>9)
 800811e:	2809      	cmp	r0, #9
 8008120:	d900      	bls.n	8008124 <fx_pwm_running_light_run+0x78>
			   ii = 9;
 8008122:	2409      	movs	r4, #9
			if (get_DMX_variable(DMX_STRIP1_PATTERN))	//Reverse
 8008124:	200c      	movs	r0, #12
 8008126:	f000 fbca 	bl	80088be <get_DMX_variable>
 800812a:	b178      	cbz	r0, 800814c <fx_pwm_running_light_run+0xa0>
				if (data[10] == 0)
 800812c:	4b17      	ldr	r3, [pc, #92]	; (800818c <fx_pwm_running_light_run+0xe0>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	7a9a      	ldrb	r2, [r3, #10]
 8008132:	b90a      	cbnz	r2, 8008138 <fx_pwm_running_light_run+0x8c>
					data[10] = ii + 1;
 8008134:	3401      	adds	r4, #1
 8008136:	729c      	strb	r4, [r3, #10]
				data[10]--;
 8008138:	7a9a      	ldrb	r2, [r3, #10]
 800813a:	3a01      	subs	r2, #1
 800813c:	729a      	strb	r2, [r3, #10]
			data[data[10]] = 255;
 800813e:	4b13      	ldr	r3, [pc, #76]	; (800818c <fx_pwm_running_light_run+0xe0>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	7a9a      	ldrb	r2, [r3, #10]
 8008144:	21ff      	movs	r1, #255	; 0xff
 8008146:	5499      	strb	r1, [r3, r2]
			for (ii=0;ii<10;ii++)
 8008148:	2400      	movs	r4, #0
 800814a:	e013      	b.n	8008174 <fx_pwm_running_light_run+0xc8>
				if (data[10] == ii)
 800814c:	4b0f      	ldr	r3, [pc, #60]	; (800818c <fx_pwm_running_light_run+0xe0>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	7a9a      	ldrb	r2, [r3, #10]
 8008152:	42a2      	cmp	r2, r4
 8008154:	d003      	beq.n	800815e <fx_pwm_running_light_run+0xb2>
				data[10]++;
 8008156:	7a9a      	ldrb	r2, [r3, #10]
 8008158:	3201      	adds	r2, #1
 800815a:	729a      	strb	r2, [r3, #10]
 800815c:	e7ef      	b.n	800813e <fx_pwm_running_light_run+0x92>
					data[10] = 255;
 800815e:	22ff      	movs	r2, #255	; 0xff
 8008160:	729a      	strb	r2, [r3, #10]
 8008162:	e7f8      	b.n	8008156 <fx_pwm_running_light_run+0xaa>
				set_pwm_light(ii, data[ii]);
 8008164:	4b09      	ldr	r3, [pc, #36]	; (800818c <fx_pwm_running_light_run+0xe0>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	5d19      	ldrb	r1, [r3, r4]
 800816a:	4620      	mov	r0, r4
 800816c:	f000 fb9e 	bl	80088ac <set_pwm_light>
			for (ii=0;ii<10;ii++)
 8008170:	3401      	adds	r4, #1
 8008172:	b2e4      	uxtb	r4, r4
 8008174:	2c09      	cmp	r4, #9
 8008176:	d9f5      	bls.n	8008164 <fx_pwm_running_light_run+0xb8>
			return FX_RUNNING;
 8008178:	2002      	movs	r0, #2
 800817a:	e79e      	b.n	80080ba <fx_pwm_running_light_run+0xe>
			free(data);
 800817c:	4b03      	ldr	r3, [pc, #12]	; (800818c <fx_pwm_running_light_run+0xe0>)
 800817e:	6818      	ldr	r0, [r3, #0]
 8008180:	f000 fe92 	bl	8008ea8 <free>
			return FX_COMPLETED;
 8008184:	2001      	movs	r0, #1
 8008186:	e798      	b.n	80080ba <fx_pwm_running_light_run+0xe>
				return FX_RUNNING;
 8008188:	2002      	movs	r0, #2
 800818a:	e796      	b.n	80080ba <fx_pwm_running_light_run+0xe>
 800818c:	20000d80 	.word	0x20000d80

08008190 <fx_pwm_running_light>:
{
 8008190:	b508      	push	{r3, lr}
	register_fx(&param1, fx_num);
 8008192:	4601      	mov	r1, r0
 8008194:	4801      	ldr	r0, [pc, #4]	; (800819c <fx_pwm_running_light+0xc>)
 8008196:	f7fd f843 	bl	8005220 <register_fx>
}
 800819a:	bd08      	pop	{r3, pc}
 800819c:	0800cb88 	.word	0x0800cb88

080081a0 <fx_pwm_running_pulse_light>:
{
 80081a0:	b508      	push	{r3, lr}
	register_fx(&param2, fx_num);
 80081a2:	4601      	mov	r1, r0
 80081a4:	4801      	ldr	r0, [pc, #4]	; (80081ac <fx_pwm_running_pulse_light+0xc>)
 80081a6:	f7fd f83b 	bl	8005220 <register_fx>
}
 80081aa:	bd08      	pop	{r3, pc}
 80081ac:	0800cb9c 	.word	0x0800cb9c

080081b0 <fx_pwm_strip_engine_run>:
}



t_fx_result fx_pwm_strip_engine_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 80081b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081b4:	b083      	sub	sp, #12
	static uint32_t lcount =0;
	uint32_t loc;
	uint32_t colsel;
	static t_rgb_buf buf;

	switch(state)
 80081b6:	2801      	cmp	r0, #1
 80081b8:	d01f      	beq.n	80081fa <fx_pwm_strip_engine_run+0x4a>
 80081ba:	b120      	cbz	r0, 80081c6 <fx_pwm_strip_engine_run+0x16>
 80081bc:	2802      	cmp	r0, #2
 80081be:	f000 8159 	beq.w	8008474 <fx_pwm_strip_engine_run+0x2c4>
			destroy_rgb_buffer(&buf);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 80081c2:	2003      	movs	r0, #3
 80081c4:	e160      	b.n	8008488 <fx_pwm_strip_engine_run+0x2d8>
			reset_frame_delay();
 80081c6:	f000 fb57 	bl	8008878 <reset_frame_delay>
			settings.strip1_length = 8 * 14;
 80081ca:	4db3      	ldr	r5, [pc, #716]	; (8008498 <fx_pwm_strip_engine_run+0x2e8>)
 80081cc:	2170      	movs	r1, #112	; 0x70
 80081ce:	8669      	strh	r1, [r5, #50]	; 0x32
			settings.strip2_length = 0;
 80081d0:	2400      	movs	r4, #0
 80081d2:	86ac      	strh	r4, [r5, #52]	; 0x34
			WS2812B_init(CH1,settings.strip1_length);
 80081d4:	4620      	mov	r0, r4
 80081d6:	f000 fced 	bl	8008bb4 <WS2812B_init>
			WS2812B_init(CH2,settings.strip2_length);
 80081da:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80081dc:	2001      	movs	r0, #1
 80081de:	f000 fce9 	bl	8008bb4 <WS2812B_init>
			if (0 ==create_rgb_buffer(&buf, WS2812B_numPixels(CH1)))
 80081e2:	4620      	mov	r0, r4
 80081e4:	f000 fcbc 	bl	8008b60 <WS2812B_numPixels>
 80081e8:	4601      	mov	r1, r0
 80081ea:	48ac      	ldr	r0, [pc, #688]	; (800849c <fx_pwm_strip_engine_run+0x2ec>)
 80081ec:	f000 fb85 	bl	80088fa <create_rgb_buffer>
 80081f0:	b108      	cbz	r0, 80081f6 <fx_pwm_strip_engine_run+0x46>
			return FX_OK;
 80081f2:	2000      	movs	r0, #0
 80081f4:	e148      	b.n	8008488 <fx_pwm_strip_engine_run+0x2d8>
				return FX_ERROR;
 80081f6:	2003      	movs	r0, #3
 80081f8:	e146      	b.n	8008488 <fx_pwm_strip_engine_run+0x2d8>
			if (lcount>330)
 80081fa:	4ba9      	ldr	r3, [pc, #676]	; (80084a0 <fx_pwm_strip_engine_run+0x2f0>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8008202:	d915      	bls.n	8008230 <fx_pwm_strip_engine_run+0x80>
				set_pwm_light(9, 0);
 8008204:	2100      	movs	r1, #0
 8008206:	2009      	movs	r0, #9
 8008208:	f000 fb50 	bl	80088ac <set_pwm_light>
			lcount++;
 800820c:	4aa4      	ldr	r2, [pc, #656]	; (80084a0 <fx_pwm_strip_engine_run+0x2f0>)
 800820e:	6813      	ldr	r3, [r2, #0]
 8008210:	3301      	adds	r3, #1
 8008212:	6013      	str	r3, [r2, #0]
			if (lcount>350)
 8008214:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8008218:	d902      	bls.n	8008220 <fx_pwm_strip_engine_run+0x70>
				lcount = 0;
 800821a:	4613      	mov	r3, r2
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]
			if (!check_frame_delay(get_DMX_variable(DMX_STRIP1_SPEED))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 8008220:	200d      	movs	r0, #13
 8008222:	f000 fb4c 	bl	80088be <get_DMX_variable>
 8008226:	f000 fb39 	bl	800889c <check_frame_delay>
 800822a:	b930      	cbnz	r0, 800823a <fx_pwm_strip_engine_run+0x8a>
				return FX_RUNNING;
 800822c:	2002      	movs	r0, #2
 800822e:	e12b      	b.n	8008488 <fx_pwm_strip_engine_run+0x2d8>
				set_pwm_light(9, 255);
 8008230:	21ff      	movs	r1, #255	; 0xff
 8008232:	2009      	movs	r0, #9
 8008234:	f000 fb3a 	bl	80088ac <set_pwm_light>
 8008238:	e7e8      	b.n	800820c <fx_pwm_strip_engine_run+0x5c>
			s1 = sin(cnt);
 800823a:	4c9a      	ldr	r4, [pc, #616]	; (80084a4 <fx_pwm_strip_engine_run+0x2f4>)
 800823c:	6820      	ldr	r0, [r4, #0]
 800823e:	f7f8 f8f3 	bl	8000428 <__aeabi_f2d>
 8008242:	f001 fbf3 	bl	8009a2c <sin>
 8008246:	f7f8 fc1f 	bl	8000a88 <__aeabi_d2f>
			s1 = s1 + 1;
 800824a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800824e:	f7f8 fc71 	bl	8000b34 <__addsf3>
			s1 = s1 / 2;
 8008252:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008256:	f7f8 fd75 	bl	8000d44 <__aeabi_fmul>
 800825a:	4607      	mov	r7, r0
			s2 = sin(cnt + ((float)get_DMX_variable(DMX_STRIP1_COMPLEXITY) / 100));
 800825c:	200f      	movs	r0, #15
 800825e:	f000 fb2e 	bl	80088be <get_DMX_variable>
 8008262:	f7f8 fd17 	bl	8000c94 <__aeabi_ui2f>
 8008266:	4990      	ldr	r1, [pc, #576]	; (80084a8 <fx_pwm_strip_engine_run+0x2f8>)
 8008268:	f7f8 fe20 	bl	8000eac <__aeabi_fdiv>
 800826c:	6821      	ldr	r1, [r4, #0]
 800826e:	f7f8 fc61 	bl	8000b34 <__addsf3>
 8008272:	f7f8 f8d9 	bl	8000428 <__aeabi_f2d>
 8008276:	f001 fbd9 	bl	8009a2c <sin>
 800827a:	f7f8 fc05 	bl	8000a88 <__aeabi_d2f>
			s2 = s2 + 1;
 800827e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008282:	f7f8 fc57 	bl	8000b34 <__addsf3>
			s2 = s2 / 2;
 8008286:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800828a:	f7f8 fd5b 	bl	8000d44 <__aeabi_fmul>
 800828e:	4606      	mov	r6, r0
			s3 = sin(cnt + (((float)get_DMX_variable(DMX_STRIP1_COMPLEXITY) / 100) * 2));
 8008290:	200f      	movs	r0, #15
 8008292:	f000 fb14 	bl	80088be <get_DMX_variable>
 8008296:	f7f8 fcfd 	bl	8000c94 <__aeabi_ui2f>
 800829a:	4983      	ldr	r1, [pc, #524]	; (80084a8 <fx_pwm_strip_engine_run+0x2f8>)
 800829c:	f7f8 fe06 	bl	8000eac <__aeabi_fdiv>
 80082a0:	4601      	mov	r1, r0
 80082a2:	f7f8 fc47 	bl	8000b34 <__addsf3>
 80082a6:	6821      	ldr	r1, [r4, #0]
 80082a8:	f7f8 fc44 	bl	8000b34 <__addsf3>
 80082ac:	f7f8 f8bc 	bl	8000428 <__aeabi_f2d>
 80082b0:	f001 fbbc 	bl	8009a2c <sin>
 80082b4:	f7f8 fbe8 	bl	8000a88 <__aeabi_d2f>
			s3 = s3 + 1;
 80082b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80082bc:	f7f8 fc3a 	bl	8000b34 <__addsf3>
			s3 = s3 / 2;
 80082c0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80082c4:	f7f8 fd3e 	bl	8000d44 <__aeabi_fmul>
 80082c8:	4605      	mov	r5, r0
			cnt = cnt + ((float)get_DMX_variable(DMX_STRIP1_SIZE) / 1000);
 80082ca:	200e      	movs	r0, #14
 80082cc:	f000 faf7 	bl	80088be <get_DMX_variable>
 80082d0:	f7f8 fce0 	bl	8000c94 <__aeabi_ui2f>
 80082d4:	4975      	ldr	r1, [pc, #468]	; (80084ac <fx_pwm_strip_engine_run+0x2fc>)
 80082d6:	f7f8 fde9 	bl	8000eac <__aeabi_fdiv>
 80082da:	6821      	ldr	r1, [r4, #0]
 80082dc:	f7f8 fc2a 	bl	8000b34 <__addsf3>
 80082e0:	6020      	str	r0, [r4, #0]
			if (cnt > (2.0 * M_PI))
 80082e2:	f7f8 f8a1 	bl	8000428 <__aeabi_f2d>
 80082e6:	4680      	mov	r8, r0
 80082e8:	4689      	mov	r9, r1
 80082ea:	a369      	add	r3, pc, #420	; (adr r3, 8008490 <fx_pwm_strip_engine_run+0x2e0>)
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	f7f8 fb82 	bl	80009f8 <__aeabi_dcmpgt>
 80082f4:	b148      	cbz	r0, 800830a <fx_pwm_strip_engine_run+0x15a>
				cnt = cnt - (2.0 * M_PI);
 80082f6:	a366      	add	r3, pc, #408	; (adr r3, 8008490 <fx_pwm_strip_engine_run+0x2e0>)
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	4640      	mov	r0, r8
 80082fe:	4649      	mov	r1, r9
 8008300:	f7f7 ff32 	bl	8000168 <__aeabi_dsub>
 8008304:	f7f8 fbc0 	bl	8000a88 <__aeabi_d2f>
 8008308:	6020      	str	r0, [r4, #0]
			rbcol = WS2812B_colorWheel(step);
 800830a:	4c69      	ldr	r4, [pc, #420]	; (80084b0 <fx_pwm_strip_engine_run+0x300>)
 800830c:	7820      	ldrb	r0, [r4, #0]
 800830e:	f000 fcf3 	bl	8008cf8 <WS2812B_colorWheel>
 8008312:	4680      	mov	r8, r0
			set_pwm_light(0, (uint8_t)(s1 * (float)(rbcol>>16&0xFF)));
 8008314:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8008318:	f7f8 fcbc 	bl	8000c94 <__aeabi_ui2f>
 800831c:	4639      	mov	r1, r7
 800831e:	f7f8 fd11 	bl	8000d44 <__aeabi_fmul>
 8008322:	f7f8 fefb 	bl	800111c <__aeabi_f2uiz>
 8008326:	b2c1      	uxtb	r1, r0
 8008328:	2000      	movs	r0, #0
 800832a:	f000 fabf 	bl	80088ac <set_pwm_light>
			set_pwm_light(1, (uint8_t)(s1 * (float)(rbcol>>8&0xFF)));
 800832e:	f3c8 2007 	ubfx	r0, r8, #8, #8
 8008332:	f7f8 fcaf 	bl	8000c94 <__aeabi_ui2f>
 8008336:	4639      	mov	r1, r7
 8008338:	f7f8 fd04 	bl	8000d44 <__aeabi_fmul>
 800833c:	f7f8 feee 	bl	800111c <__aeabi_f2uiz>
 8008340:	b2c1      	uxtb	r1, r0
 8008342:	2001      	movs	r0, #1
 8008344:	f000 fab2 	bl	80088ac <set_pwm_light>
			set_pwm_light(2, (uint8_t)(s1 * (float)(rbcol&0xFF)));
 8008348:	fa5f f088 	uxtb.w	r0, r8
 800834c:	f7f8 fca2 	bl	8000c94 <__aeabi_ui2f>
 8008350:	4639      	mov	r1, r7
 8008352:	f7f8 fcf7 	bl	8000d44 <__aeabi_fmul>
 8008356:	f7f8 fee1 	bl	800111c <__aeabi_f2uiz>
 800835a:	b2c1      	uxtb	r1, r0
 800835c:	2002      	movs	r0, #2
 800835e:	f000 faa5 	bl	80088ac <set_pwm_light>
			rbcol = WS2812B_colorWheel(step+20);
 8008362:	7820      	ldrb	r0, [r4, #0]
 8008364:	3014      	adds	r0, #20
 8008366:	b2c0      	uxtb	r0, r0
 8008368:	f000 fcc6 	bl	8008cf8 <WS2812B_colorWheel>
 800836c:	4607      	mov	r7, r0
			set_pwm_light(3, (uint8_t)(s2 * (float)(rbcol>>16&0xFF)));
 800836e:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8008372:	f7f8 fc8f 	bl	8000c94 <__aeabi_ui2f>
 8008376:	4631      	mov	r1, r6
 8008378:	f7f8 fce4 	bl	8000d44 <__aeabi_fmul>
 800837c:	f7f8 fece 	bl	800111c <__aeabi_f2uiz>
 8008380:	b2c1      	uxtb	r1, r0
 8008382:	2003      	movs	r0, #3
 8008384:	f000 fa92 	bl	80088ac <set_pwm_light>
			set_pwm_light(4, (uint8_t)(s2 * (float)(rbcol>>8&0xFF)));
 8008388:	f3c7 2007 	ubfx	r0, r7, #8, #8
 800838c:	f7f8 fc82 	bl	8000c94 <__aeabi_ui2f>
 8008390:	4631      	mov	r1, r6
 8008392:	f7f8 fcd7 	bl	8000d44 <__aeabi_fmul>
 8008396:	f7f8 fec1 	bl	800111c <__aeabi_f2uiz>
 800839a:	b2c1      	uxtb	r1, r0
 800839c:	2004      	movs	r0, #4
 800839e:	f000 fa85 	bl	80088ac <set_pwm_light>
			set_pwm_light(5, (uint8_t)(s2 * (float)(rbcol&0xFF)));
 80083a2:	b2f8      	uxtb	r0, r7
 80083a4:	f7f8 fc76 	bl	8000c94 <__aeabi_ui2f>
 80083a8:	4631      	mov	r1, r6
 80083aa:	f7f8 fccb 	bl	8000d44 <__aeabi_fmul>
 80083ae:	f7f8 feb5 	bl	800111c <__aeabi_f2uiz>
 80083b2:	b2c1      	uxtb	r1, r0
 80083b4:	2005      	movs	r0, #5
 80083b6:	f000 fa79 	bl	80088ac <set_pwm_light>
			rbcol = WS2812B_colorWheel(step+40);
 80083ba:	7820      	ldrb	r0, [r4, #0]
 80083bc:	3028      	adds	r0, #40	; 0x28
 80083be:	b2c0      	uxtb	r0, r0
 80083c0:	f000 fc9a 	bl	8008cf8 <WS2812B_colorWheel>
 80083c4:	4606      	mov	r6, r0
			set_pwm_light(6, (uint8_t)(s3 * (float)(rbcol>>16&0xFF)));
 80083c6:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80083ca:	f7f8 fc63 	bl	8000c94 <__aeabi_ui2f>
 80083ce:	4629      	mov	r1, r5
 80083d0:	f7f8 fcb8 	bl	8000d44 <__aeabi_fmul>
 80083d4:	f7f8 fea2 	bl	800111c <__aeabi_f2uiz>
 80083d8:	b2c1      	uxtb	r1, r0
 80083da:	2006      	movs	r0, #6
 80083dc:	f000 fa66 	bl	80088ac <set_pwm_light>
			set_pwm_light(7, (uint8_t)(s3 * (float)(rbcol>>8&0xFF)));
 80083e0:	f3c6 2007 	ubfx	r0, r6, #8, #8
 80083e4:	f7f8 fc56 	bl	8000c94 <__aeabi_ui2f>
 80083e8:	4629      	mov	r1, r5
 80083ea:	f7f8 fcab 	bl	8000d44 <__aeabi_fmul>
 80083ee:	f7f8 fe95 	bl	800111c <__aeabi_f2uiz>
 80083f2:	b2c1      	uxtb	r1, r0
 80083f4:	2007      	movs	r0, #7
 80083f6:	f000 fa59 	bl	80088ac <set_pwm_light>
			set_pwm_light(8, (uint8_t)(s3 * (float)(rbcol&0xFF)));
 80083fa:	b2f0      	uxtb	r0, r6
 80083fc:	f7f8 fc4a 	bl	8000c94 <__aeabi_ui2f>
 8008400:	4629      	mov	r1, r5
 8008402:	f7f8 fc9f 	bl	8000d44 <__aeabi_fmul>
 8008406:	f7f8 fe89 	bl	800111c <__aeabi_f2uiz>
 800840a:	b2c1      	uxtb	r1, r0
 800840c:	2008      	movs	r0, #8
 800840e:	f000 fa4d 	bl	80088ac <set_pwm_light>
			step++;
 8008412:	7823      	ldrb	r3, [r4, #0]
 8008414:	3301      	adds	r3, #1
 8008416:	7023      	strb	r3, [r4, #0]
			fade_rgb_buf(&buf,200);
 8008418:	4d20      	ldr	r5, [pc, #128]	; (800849c <fx_pwm_strip_engine_run+0x2ec>)
 800841a:	21c8      	movs	r1, #200	; 0xc8
 800841c:	4628      	mov	r0, r5
 800841e:	f000 faab 	bl	8008978 <fade_rgb_buf>
			loc = simple_rnd();
 8008422:	f000 fad9 	bl	80089d8 <simple_rnd>
			loc = scale_full(loc>>16,0xFFFF, 0, 8*14, 0);
 8008426:	2400      	movs	r4, #0
 8008428:	9400      	str	r4, [sp, #0]
 800842a:	2370      	movs	r3, #112	; 0x70
 800842c:	4622      	mov	r2, r4
 800842e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008432:	0c00      	lsrs	r0, r0, #16
 8008434:	f000 fa53 	bl	80088de <scale_full>
 8008438:	4606      	mov	r6, r0
			colsel = simple_rnd();
 800843a:	f000 facd 	bl	80089d8 <simple_rnd>
			colsel = scale_full(colsel>>16,0xFFFF, 0, 5, 0);
 800843e:	9400      	str	r4, [sp, #0]
 8008440:	2305      	movs	r3, #5
 8008442:	4622      	mov	r2, r4
 8008444:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008448:	0c00      	lsrs	r0, r0, #16
 800844a:	f000 fa48 	bl	80088de <scale_full>
			set_buffer_pixel(&buf,loc, colval[colsel]>>16 & 0xFF, colval[colsel]>>8 & 0xFF, colval[colsel] & 0xFF);
 800844e:	4b19      	ldr	r3, [pc, #100]	; (80084b4 <fx_pwm_strip_engine_run+0x304>)
 8008450:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8008454:	b2d3      	uxtb	r3, r2
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800845c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8008460:	4631      	mov	r1, r6
 8008462:	4628      	mov	r0, r5
 8008464:	f000 fa5e 	bl	8008924 <set_buffer_pixel>
			set_pixels_from_buf(CH1,&buf);
 8008468:	4629      	mov	r1, r5
 800846a:	4620      	mov	r0, r4
 800846c:	f000 fa66 	bl	800893c <set_pixels_from_buf>
			return FX_RUNNING;
 8008470:	2002      	movs	r0, #2
 8008472:	e009      	b.n	8008488 <fx_pwm_strip_engine_run+0x2d8>
			WS2812B_clear(CH1);
 8008474:	2000      	movs	r0, #0
 8008476:	f000 fb7d 	bl	8008b74 <WS2812B_clear>
			WS2812B_clear(CH2);
 800847a:	2001      	movs	r0, #1
 800847c:	f000 fb7a 	bl	8008b74 <WS2812B_clear>
			destroy_rgb_buffer(&buf);
 8008480:	4806      	ldr	r0, [pc, #24]	; (800849c <fx_pwm_strip_engine_run+0x2ec>)
 8008482:	f000 fa4a 	bl	800891a <destroy_rgb_buffer>
			return FX_COMPLETED;
 8008486:	2001      	movs	r0, #1
}
 8008488:	b003      	add	sp, #12
 800848a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800848e:	bf00      	nop
 8008490:	54442d18 	.word	0x54442d18
 8008494:	401921fb 	.word	0x401921fb
 8008498:	20000780 	.word	0x20000780
 800849c:	200005c8 	.word	0x200005c8
 80084a0:	200005d4 	.word	0x200005d4
 80084a4:	200005d0 	.word	0x200005d0
 80084a8:	42c80000 	.word	0x42c80000
 80084ac:	447a0000 	.word	0x447a0000
 80084b0:	200005d8 	.word	0x200005d8
 80084b4:	0800cbb0 	.word	0x0800cbb0

080084b8 <fx_pwm_strip_engine>:
{
 80084b8:	b508      	push	{r3, lr}
	register_fx(&param1, fx_num);
 80084ba:	4601      	mov	r1, r0
 80084bc:	4801      	ldr	r0, [pc, #4]	; (80084c4 <fx_pwm_strip_engine+0xc>)
 80084be:	f7fc feaf 	bl	8005220 <register_fx>
}
 80084c2:	bd08      	pop	{r3, pc}
 80084c4:	0800cbc8 	.word	0x0800cbc8

080084c8 <fx_strip_cylon_run>:
	register_fx(&param,fx_num);
}


t_fx_result fx_strip_cylon_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 80084c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ca:	b083      	sub	sp, #12
	uint16_t poscalc;
	uint8_t corr_r;
	uint8_t corr_g;
	uint8_t corr_b;

	switch(state)
 80084cc:	2801      	cmp	r0, #1
 80084ce:	d015      	beq.n	80084fc <fx_strip_cylon_run+0x34>
 80084d0:	b120      	cbz	r0, 80084dc <fx_strip_cylon_run+0x14>
 80084d2:	2802      	cmp	r0, #2
 80084d4:	f000 8084 	beq.w	80085e0 <fx_strip_cylon_run+0x118>
			destroy_rgb_buffer(&buf);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 80084d8:	2003      	movs	r0, #3
 80084da:	e08b      	b.n	80085f4 <fx_strip_cylon_run+0x12c>
			last_ms = millisec();
 80084dc:	f000 f9f7 	bl	80088ce <millisec>
 80084e0:	4b47      	ldr	r3, [pc, #284]	; (8008600 <fx_strip_cylon_run+0x138>)
 80084e2:	6018      	str	r0, [r3, #0]
			if (0 ==create_rgb_buffer(&buf, WS2812B_numPixels(CH1)))
 80084e4:	2000      	movs	r0, #0
 80084e6:	f000 fb3b 	bl	8008b60 <WS2812B_numPixels>
 80084ea:	4601      	mov	r1, r0
 80084ec:	4845      	ldr	r0, [pc, #276]	; (8008604 <fx_strip_cylon_run+0x13c>)
 80084ee:	f000 fa04 	bl	80088fa <create_rgb_buffer>
 80084f2:	b108      	cbz	r0, 80084f8 <fx_strip_cylon_run+0x30>
			return FX_OK;
 80084f4:	2000      	movs	r0, #0
 80084f6:	e07d      	b.n	80085f4 <fx_strip_cylon_run+0x12c>
				return FX_ERROR;
 80084f8:	2003      	movs	r0, #3
 80084fa:	e07b      	b.n	80085f4 <fx_strip_cylon_run+0x12c>
			if ((millisec() - last_ms) < get_DMX_variable(DMX_STRIP1_SPEED))
 80084fc:	f000 f9e7 	bl	80088ce <millisec>
 8008500:	4b3f      	ldr	r3, [pc, #252]	; (8008600 <fx_strip_cylon_run+0x138>)
 8008502:	681c      	ldr	r4, [r3, #0]
 8008504:	1b04      	subs	r4, r0, r4
 8008506:	200d      	movs	r0, #13
 8008508:	f000 f9d9 	bl	80088be <get_DMX_variable>
 800850c:	4284      	cmp	r4, r0
 800850e:	d201      	bcs.n	8008514 <fx_strip_cylon_run+0x4c>
					return FX_RUNNING;
 8008510:	2002      	movs	r0, #2
 8008512:	e06f      	b.n	80085f4 <fx_strip_cylon_run+0x12c>
			last_ms = millisec();
 8008514:	f000 f9db 	bl	80088ce <millisec>
 8008518:	4b39      	ldr	r3, [pc, #228]	; (8008600 <fx_strip_cylon_run+0x138>)
 800851a:	6018      	str	r0, [r3, #0]
			fade_rgb_buf(&buf,get_DMX_variable(DMX_STRIP1_SIZE));
 800851c:	200e      	movs	r0, #14
 800851e:	f000 f9ce 	bl	80088be <get_DMX_variable>
 8008522:	4601      	mov	r1, r0
 8008524:	4837      	ldr	r0, [pc, #220]	; (8008604 <fx_strip_cylon_run+0x13c>)
 8008526:	f000 fa27 	bl	8008978 <fade_rgb_buf>
			res = sin (pos*PI/180);
 800852a:	4e37      	ldr	r6, [pc, #220]	; (8008608 <fx_strip_cylon_run+0x140>)
 800852c:	8830      	ldrh	r0, [r6, #0]
 800852e:	f7f7 ff69 	bl	8000404 <__aeabi_i2d>
 8008532:	a331      	add	r3, pc, #196	; (adr r3, 80085f8 <fx_strip_cylon_run+0x130>)
 8008534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008538:	f7f7 ffce 	bl	80004d8 <__aeabi_dmul>
 800853c:	2200      	movs	r2, #0
 800853e:	4b33      	ldr	r3, [pc, #204]	; (800860c <fx_strip_cylon_run+0x144>)
 8008540:	f7f8 f8f4 	bl	800072c <__aeabi_ddiv>
 8008544:	f001 fa72 	bl	8009a2c <sin>
 8008548:	4604      	mov	r4, r0
 800854a:	460d      	mov	r5, r1
			pos = pos + get_DMX_variable(DMX_STRIP1_COMPLEXITY);
 800854c:	200f      	movs	r0, #15
 800854e:	f000 f9b6 	bl	80088be <get_DMX_variable>
 8008552:	b280      	uxth	r0, r0
 8008554:	8833      	ldrh	r3, [r6, #0]
 8008556:	4418      	add	r0, r3
 8008558:	b280      	uxth	r0, r0
 800855a:	8030      	strh	r0, [r6, #0]
			if (pos>360)
 800855c:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 8008560:	d902      	bls.n	8008568 <fx_strip_cylon_run+0xa0>
				pos = pos - 360;
 8008562:	f5a0 70b4 	sub.w	r0, r0, #360	; 0x168
 8008566:	8030      	strh	r0, [r6, #0]
			res = res * (double)WS2812B_numPixels(CH1)/2;
 8008568:	2000      	movs	r0, #0
 800856a:	f000 faf9 	bl	8008b60 <WS2812B_numPixels>
 800856e:	f7f7 ff39 	bl	80003e4 <__aeabi_ui2d>
 8008572:	4622      	mov	r2, r4
 8008574:	462b      	mov	r3, r5
 8008576:	f7f7 ffaf 	bl	80004d8 <__aeabi_dmul>
 800857a:	2200      	movs	r2, #0
 800857c:	4b24      	ldr	r3, [pc, #144]	; (8008610 <fx_strip_cylon_run+0x148>)
 800857e:	f7f7 ffab 	bl	80004d8 <__aeabi_dmul>
			poscalc = (int16_t)res + (WS2812B_numPixels(CH1)/2);
 8008582:	f7f8 fa59 	bl	8000a38 <__aeabi_d2iz>
 8008586:	b284      	uxth	r4, r0
 8008588:	2000      	movs	r0, #0
 800858a:	f000 fae9 	bl	8008b60 <WS2812B_numPixels>
 800858e:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8008592:	4404      	add	r4, r0
 8008594:	b2a4      	uxth	r4, r4
			corr_r = getGamma(GAMMA_STRIP,get_DMX_variable(DMX_STRIP1_V1));
 8008596:	2010      	movs	r0, #16
 8008598:	f000 f991 	bl	80088be <get_DMX_variable>
 800859c:	4601      	mov	r1, r0
 800859e:	2003      	movs	r0, #3
 80085a0:	f7fd f848 	bl	8005634 <getGamma>
 80085a4:	4606      	mov	r6, r0
			corr_g = getGamma(GAMMA_STRIP,get_DMX_variable(DMX_STRIP1_V2));
 80085a6:	2011      	movs	r0, #17
 80085a8:	f000 f989 	bl	80088be <get_DMX_variable>
 80085ac:	4601      	mov	r1, r0
 80085ae:	2003      	movs	r0, #3
 80085b0:	f7fd f840 	bl	8005634 <getGamma>
 80085b4:	4607      	mov	r7, r0
			corr_b = getGamma(GAMMA_STRIP,get_DMX_variable(DMX_STRIP1_V3));
 80085b6:	2012      	movs	r0, #18
 80085b8:	f000 f981 	bl	80088be <get_DMX_variable>
 80085bc:	4601      	mov	r1, r0
 80085be:	2003      	movs	r0, #3
 80085c0:	f7fd f838 	bl	8005634 <getGamma>
			set_buffer_pixel(&buf,poscalc,corr_r,corr_g,corr_b);
 80085c4:	4d0f      	ldr	r5, [pc, #60]	; (8008604 <fx_strip_cylon_run+0x13c>)
 80085c6:	9000      	str	r0, [sp, #0]
 80085c8:	463b      	mov	r3, r7
 80085ca:	4632      	mov	r2, r6
 80085cc:	4621      	mov	r1, r4
 80085ce:	4628      	mov	r0, r5
 80085d0:	f000 f9a8 	bl	8008924 <set_buffer_pixel>
			set_pixels_from_buf(CH1,&buf);
 80085d4:	4629      	mov	r1, r5
 80085d6:	2000      	movs	r0, #0
 80085d8:	f000 f9b0 	bl	800893c <set_pixels_from_buf>
			return FX_RUNNING;
 80085dc:	2002      	movs	r0, #2
 80085de:	e009      	b.n	80085f4 <fx_strip_cylon_run+0x12c>
			WS2812B_clear(CH1);
 80085e0:	2000      	movs	r0, #0
 80085e2:	f000 fac7 	bl	8008b74 <WS2812B_clear>
			WS2812B_clear(CH2);
 80085e6:	2001      	movs	r0, #1
 80085e8:	f000 fac4 	bl	8008b74 <WS2812B_clear>
			destroy_rgb_buffer(&buf);
 80085ec:	4805      	ldr	r0, [pc, #20]	; (8008604 <fx_strip_cylon_run+0x13c>)
 80085ee:	f000 f994 	bl	800891a <destroy_rgb_buffer>
			return FX_COMPLETED;
 80085f2:	2001      	movs	r0, #1
}
 80085f4:	b003      	add	sp, #12
 80085f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085f8:	53c8d4f1 	.word	0x53c8d4f1
 80085fc:	400921fb 	.word	0x400921fb
 8008600:	200005e4 	.word	0x200005e4
 8008604:	200005dc 	.word	0x200005dc
 8008608:	200005e8 	.word	0x200005e8
 800860c:	40668000 	.word	0x40668000
 8008610:	3fe00000 	.word	0x3fe00000

08008614 <fx_strip_cylon>:
{
 8008614:	b508      	push	{r3, lr}
	register_fx(&param,fx_num);
 8008616:	4601      	mov	r1, r0
 8008618:	4801      	ldr	r0, [pc, #4]	; (8008620 <fx_strip_cylon+0xc>)
 800861a:	f7fc fe01 	bl	8005220 <register_fx>
}
 800861e:	bd08      	pop	{r3, pc}
 8008620:	0800cbdc 	.word	0x0800cbdc

08008624 <fx_strip_rainbow_run>:
	register_fx(&param,fx_num);
}


t_fx_result fx_strip_rainbow_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 8008624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008626:	b083      	sub	sp, #12
	static int16_t pos[CH_MAX] = {0,0};
	static int16_t step[CH_MAX] = {0,0};
	static uint32_t delay[CH_MAX] = {0,0};

	switch(state)
 8008628:	2801      	cmp	r0, #1
 800862a:	d05d      	beq.n	80086e8 <fx_strip_rainbow_run+0xc4>
 800862c:	b1e8      	cbz	r0, 800866a <fx_strip_rainbow_run+0x46>
 800862e:	2802      	cmp	r0, #2
 8008630:	d05e      	beq.n	80086f0 <fx_strip_rainbow_run+0xcc>
			WS2812B_clear(CH2);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 8008632:	2003      	movs	r0, #3
 8008634:	e01c      	b.n	8008670 <fx_strip_rainbow_run+0x4c>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 8008636:	3401      	adds	r4, #1
 8008638:	b2e4      	uxtb	r4, r4
 800863a:	2c01      	cmp	r4, #1
 800863c:	d817      	bhi.n	800866e <fx_strip_rainbow_run+0x4a>
				step[ii] = get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SIZE]);
 800863e:	4e30      	ldr	r6, [pc, #192]	; (8008700 <fx_strip_rainbow_run+0xdc>)
 8008640:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8008644:	1973      	adds	r3, r6, r5
 8008646:	7898      	ldrb	r0, [r3, #2]
 8008648:	f000 f939 	bl	80088be <get_DMX_variable>
 800864c:	4b2d      	ldr	r3, [pc, #180]	; (8008704 <fx_strip_rainbow_run+0xe0>)
 800864e:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
				if (get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_PATTERN]))
 8008652:	5d70      	ldrb	r0, [r6, r5]
 8008654:	f000 f933 	bl	80088be <get_DMX_variable>
 8008658:	2800      	cmp	r0, #0
 800865a:	d0ec      	beq.n	8008636 <fx_strip_rainbow_run+0x12>
					step[ii] = -step[ii];
 800865c:	4a29      	ldr	r2, [pc, #164]	; (8008704 <fx_strip_rainbow_run+0xe0>)
 800865e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8008662:	425b      	negs	r3, r3
 8008664:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
 8008668:	e7e5      	b.n	8008636 <fx_strip_rainbow_run+0x12>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 800866a:	2400      	movs	r4, #0
 800866c:	e7e5      	b.n	800863a <fx_strip_rainbow_run+0x16>
			return FX_OK;
 800866e:	2000      	movs	r0, #0
}
 8008670:	b003      	add	sp, #12
 8008672:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if (pos[ii] < 0)
 8008674:	2a00      	cmp	r2, #0
 8008676:	db32      	blt.n	80086de <fx_strip_rainbow_run+0xba>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 8008678:	3401      	adds	r4, #1
 800867a:	b2e4      	uxtb	r4, r4
 800867c:	2c01      	cmp	r4, #1
 800867e:	d835      	bhi.n	80086ec <fx_strip_rainbow_run+0xc8>
				if (check_custom_frame_delay(&delay[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SPEED]))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 8008680:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8008684:	4b1e      	ldr	r3, [pc, #120]	; (8008700 <fx_strip_rainbow_run+0xdc>)
 8008686:	4413      	add	r3, r2
 8008688:	7858      	ldrb	r0, [r3, #1]
 800868a:	f000 f918 	bl	80088be <get_DMX_variable>
 800868e:	4601      	mov	r1, r0
 8008690:	481d      	ldr	r0, [pc, #116]	; (8008708 <fx_strip_rainbow_run+0xe4>)
 8008692:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8008696:	f000 f8f5 	bl	8008884 <check_custom_frame_delay>
 800869a:	2800      	cmp	r0, #0
 800869c:	d0ec      	beq.n	8008678 <fx_strip_rainbow_run+0x54>
					WS2812B_rainbow(ii,0, WS2812B_numPixels(ii),pos[ii],step[ii]);
 800869e:	4620      	mov	r0, r4
 80086a0:	f000 fa5e 	bl	8008b60 <WS2812B_numPixels>
 80086a4:	4e19      	ldr	r6, [pc, #100]	; (800870c <fx_strip_rainbow_run+0xe8>)
 80086a6:	f936 3014 	ldrsh.w	r3, [r6, r4, lsl #1]
 80086aa:	4f16      	ldr	r7, [pc, #88]	; (8008704 <fx_strip_rainbow_run+0xe0>)
 80086ac:	f937 2014 	ldrsh.w	r2, [r7, r4, lsl #1]
 80086b0:	b2d2      	uxtb	r2, r2
 80086b2:	9200      	str	r2, [sp, #0]
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	b2c2      	uxtb	r2, r0
 80086b8:	2100      	movs	r1, #0
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 fb46 	bl	8008d4c <WS2812B_rainbow>
					pos[ii] = pos[ii] + step[ii];
 80086c0:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 80086c4:	f837 2014 	ldrh.w	r2, [r7, r4, lsl #1]
 80086c8:	4413      	add	r3, r2
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	b21a      	sxth	r2, r3
 80086ce:	f826 2014 	strh.w	r2, [r6, r4, lsl #1]
					if (pos[ii] > 255)
 80086d2:	2aff      	cmp	r2, #255	; 0xff
 80086d4:	ddce      	ble.n	8008674 <fx_strip_rainbow_run+0x50>
						pos[ii] = pos[ii]-255;
 80086d6:	3bff      	subs	r3, #255	; 0xff
 80086d8:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
 80086dc:	e7cc      	b.n	8008678 <fx_strip_rainbow_run+0x54>
						pos[ii] = pos[ii]+255;
 80086de:	33ff      	adds	r3, #255	; 0xff
 80086e0:	4a0a      	ldr	r2, [pc, #40]	; (800870c <fx_strip_rainbow_run+0xe8>)
 80086e2:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
 80086e6:	e7c7      	b.n	8008678 <fx_strip_rainbow_run+0x54>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 80086e8:	2400      	movs	r4, #0
 80086ea:	e7c7      	b.n	800867c <fx_strip_rainbow_run+0x58>
			return FX_RUNNING;
 80086ec:	2002      	movs	r0, #2
 80086ee:	e7bf      	b.n	8008670 <fx_strip_rainbow_run+0x4c>
			WS2812B_clear(CH1);
 80086f0:	2000      	movs	r0, #0
 80086f2:	f000 fa3f 	bl	8008b74 <WS2812B_clear>
			WS2812B_clear(CH2);
 80086f6:	2001      	movs	r0, #1
 80086f8:	f000 fa3c 	bl	8008b74 <WS2812B_clear>
			return FX_COMPLETED;
 80086fc:	2001      	movs	r0, #1
 80086fe:	e7b7      	b.n	8008670 <fx_strip_rainbow_run+0x4c>
 8008700:	0800cc18 	.word	0x0800cc18
 8008704:	200005f8 	.word	0x200005f8
 8008708:	200005ec 	.word	0x200005ec
 800870c:	200005f4 	.word	0x200005f4

08008710 <fx_strip_rainbow>:
{
 8008710:	b508      	push	{r3, lr}
	register_fx(&param,fx_num);
 8008712:	4601      	mov	r1, r0
 8008714:	4801      	ldr	r0, [pc, #4]	; (800871c <fx_strip_rainbow+0xc>)
 8008716:	f7fc fd83 	bl	8005220 <register_fx>
}
 800871a:	bd08      	pop	{r3, pc}
 800871c:	0800cbf0 	.word	0x0800cbf0

08008720 <fx_strip_running_light_run>:
	register_fx(&param,fx_num);
}


t_fx_result fx_strip_running_light_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 8008720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008724:	b082      	sub	sp, #8
	static int16_t pos[CH_MAX] = {0,0};
	static int16_t step[CH_MAX] = {0,0};
	static uint32_t delay[CH_MAX] = {0,0};

	switch(state)
 8008726:	2801      	cmp	r0, #1
 8008728:	f000 8089 	beq.w	800883e <fx_strip_running_light_run+0x11e>
 800872c:	b320      	cbz	r0, 8008778 <fx_strip_running_light_run+0x58>
 800872e:	2802      	cmp	r0, #2
 8008730:	f000 8089 	beq.w	8008846 <fx_strip_running_light_run+0x126>
			WS2812B_clear(CH2);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 8008734:	2003      	movs	r0, #3
 8008736:	e022      	b.n	800877e <fx_strip_running_light_run+0x5e>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 8008738:	3401      	adds	r4, #1
 800873a:	b2e4      	uxtb	r4, r4
 800873c:	2c01      	cmp	r4, #1
 800873e:	d81d      	bhi.n	800877c <fx_strip_running_light_run+0x5c>
				step[ii] = get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SIZE]);
 8008740:	4e45      	ldr	r6, [pc, #276]	; (8008858 <fx_strip_running_light_run+0x138>)
 8008742:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8008746:	1973      	adds	r3, r6, r5
 8008748:	7898      	ldrb	r0, [r3, #2]
 800874a:	f000 f8b8 	bl	80088be <get_DMX_variable>
 800874e:	4b43      	ldr	r3, [pc, #268]	; (800885c <fx_strip_running_light_run+0x13c>)
 8008750:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
				if (0 != get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_PATTERN]))
 8008754:	5d70      	ldrb	r0, [r6, r5]
 8008756:	f000 f8b2 	bl	80088be <get_DMX_variable>
 800875a:	2800      	cmp	r0, #0
 800875c:	d0ec      	beq.n	8008738 <fx_strip_running_light_run+0x18>
				  pos[ii] = WS2812B_numPixels((t_stripchannel)ii);
 800875e:	4620      	mov	r0, r4
 8008760:	f000 f9fe 	bl	8008b60 <WS2812B_numPixels>
 8008764:	4b3e      	ldr	r3, [pc, #248]	; (8008860 <fx_strip_running_light_run+0x140>)
 8008766:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
				  step[ii] = -step[ii];
 800876a:	4a3c      	ldr	r2, [pc, #240]	; (800885c <fx_strip_running_light_run+0x13c>)
 800876c:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8008770:	425b      	negs	r3, r3
 8008772:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
 8008776:	e7df      	b.n	8008738 <fx_strip_running_light_run+0x18>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 8008778:	2400      	movs	r4, #0
 800877a:	e7df      	b.n	800873c <fx_strip_running_light_run+0x1c>
			return FX_OK;
 800877c:	2000      	movs	r0, #0
}
 800877e:	b002      	add	sp, #8
 8008780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					else if (pos[ii] < 0)
 8008784:	4b36      	ldr	r3, [pc, #216]	; (8008860 <fx_strip_running_light_run+0x140>)
 8008786:	f933 2014 	ldrsh.w	r2, [r3, r4, lsl #1]
 800878a:	2a00      	cmp	r2, #0
 800878c:	db4a      	blt.n	8008824 <fx_strip_running_light_run+0x104>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 800878e:	3401      	adds	r4, #1
 8008790:	b2e4      	uxtb	r4, r4
 8008792:	2c01      	cmp	r4, #1
 8008794:	d855      	bhi.n	8008842 <fx_strip_running_light_run+0x122>
				if (check_custom_frame_delay(&delay[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SPEED]))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 8008796:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800879a:	4b2f      	ldr	r3, [pc, #188]	; (8008858 <fx_strip_running_light_run+0x138>)
 800879c:	4413      	add	r3, r2
 800879e:	7858      	ldrb	r0, [r3, #1]
 80087a0:	f000 f88d 	bl	80088be <get_DMX_variable>
 80087a4:	4601      	mov	r1, r0
 80087a6:	482f      	ldr	r0, [pc, #188]	; (8008864 <fx_strip_running_light_run+0x144>)
 80087a8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80087ac:	f000 f86a 	bl	8008884 <check_custom_frame_delay>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d0ec      	beq.n	800878e <fx_strip_running_light_run+0x6e>
					WS2812B_clear((t_stripchannel)ii);
 80087b4:	4620      	mov	r0, r4
 80087b6:	f000 f9dd 	bl	8008b74 <WS2812B_clear>
					WS2812B_setPixelColor((t_stripchannel)ii,pos[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V1]), get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V2]), get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V3]));
 80087ba:	4f29      	ldr	r7, [pc, #164]	; (8008860 <fx_strip_running_light_run+0x140>)
 80087bc:	f937 8014 	ldrsh.w	r8, [r7, r4, lsl #1]
 80087c0:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80087c4:	4d24      	ldr	r5, [pc, #144]	; (8008858 <fx_strip_running_light_run+0x138>)
 80087c6:	441d      	add	r5, r3
 80087c8:	7928      	ldrb	r0, [r5, #4]
 80087ca:	f000 f878 	bl	80088be <get_DMX_variable>
 80087ce:	4681      	mov	r9, r0
 80087d0:	7968      	ldrb	r0, [r5, #5]
 80087d2:	f000 f874 	bl	80088be <get_DMX_variable>
 80087d6:	4682      	mov	sl, r0
 80087d8:	79a8      	ldrb	r0, [r5, #6]
 80087da:	f000 f870 	bl	80088be <get_DMX_variable>
 80087de:	9000      	str	r0, [sp, #0]
 80087e0:	4653      	mov	r3, sl
 80087e2:	464a      	mov	r2, r9
 80087e4:	fa1f f188 	uxth.w	r1, r8
 80087e8:	4620      	mov	r0, r4
 80087ea:	f000 f977 	bl	8008adc <WS2812B_setPixelColor>
					pos[ii] = pos[ii] + step[ii];
 80087ee:	f837 5014 	ldrh.w	r5, [r7, r4, lsl #1]
 80087f2:	4b1a      	ldr	r3, [pc, #104]	; (800885c <fx_strip_running_light_run+0x13c>)
 80087f4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80087f8:	441d      	add	r5, r3
 80087fa:	b22d      	sxth	r5, r5
 80087fc:	f827 5014 	strh.w	r5, [r7, r4, lsl #1]
					if (pos[ii] > WS2812B_numPixels((t_stripchannel)ii))
 8008800:	4620      	mov	r0, r4
 8008802:	f000 f9ad 	bl	8008b60 <WS2812B_numPixels>
 8008806:	4285      	cmp	r5, r0
 8008808:	ddbc      	ble.n	8008784 <fx_strip_running_light_run+0x64>
						step[ii] = -step[ii];
 800880a:	4a14      	ldr	r2, [pc, #80]	; (800885c <fx_strip_running_light_run+0x13c>)
 800880c:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8008810:	425b      	negs	r3, r3
 8008812:	b29b      	uxth	r3, r3
 8008814:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
						pos[ii] = pos[ii] + step[ii];
 8008818:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
 800881c:	440b      	add	r3, r1
 800881e:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
 8008822:	e7b4      	b.n	800878e <fx_strip_running_light_run+0x6e>
						step[ii] = -step[ii];
 8008824:	490d      	ldr	r1, [pc, #52]	; (800885c <fx_strip_running_light_run+0x13c>)
 8008826:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
 800882a:	425b      	negs	r3, r3
 800882c:	b29b      	uxth	r3, r3
 800882e:	f821 3014 	strh.w	r3, [r1, r4, lsl #1]
						pos[ii] = pos[ii] + step[ii];
 8008832:	b292      	uxth	r2, r2
 8008834:	4413      	add	r3, r2
 8008836:	4a0a      	ldr	r2, [pc, #40]	; (8008860 <fx_strip_running_light_run+0x140>)
 8008838:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
 800883c:	e7a7      	b.n	800878e <fx_strip_running_light_run+0x6e>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 800883e:	2400      	movs	r4, #0
 8008840:	e7a7      	b.n	8008792 <fx_strip_running_light_run+0x72>
			return FX_RUNNING;
 8008842:	2002      	movs	r0, #2
 8008844:	e79b      	b.n	800877e <fx_strip_running_light_run+0x5e>
			WS2812B_clear(CH1);
 8008846:	2000      	movs	r0, #0
 8008848:	f000 f994 	bl	8008b74 <WS2812B_clear>
			WS2812B_clear(CH2);
 800884c:	2001      	movs	r0, #1
 800884e:	f000 f991 	bl	8008b74 <WS2812B_clear>
			return FX_COMPLETED;
 8008852:	2001      	movs	r0, #1
 8008854:	e793      	b.n	800877e <fx_strip_running_light_run+0x5e>
 8008856:	bf00      	nop
 8008858:	0800cc18 	.word	0x0800cc18
 800885c:	20000608 	.word	0x20000608
 8008860:	20000604 	.word	0x20000604
 8008864:	200005fc 	.word	0x200005fc

08008868 <fx_strip_running_light>:
{
 8008868:	b508      	push	{r3, lr}
	register_fx(&param,fx_num);
 800886a:	4601      	mov	r1, r0
 800886c:	4801      	ldr	r0, [pc, #4]	; (8008874 <fx_strip_running_light+0xc>)
 800886e:	f7fc fcd7 	bl	8005220 <register_fx>
}
 8008872:	bd08      	pop	{r3, pc}
 8008874:	0800cc04 	.word	0x0800cc04

08008878 <reset_frame_delay>:


//Reset the Frame Delay Counter
void reset_frame_delay(void)
{
	 delay_count = 0;
 8008878:	4b01      	ldr	r3, [pc, #4]	; (8008880 <reset_frame_delay+0x8>)
 800887a:	2200      	movs	r2, #0
 800887c:	601a      	str	r2, [r3, #0]
}
 800887e:	4770      	bx	lr
 8008880:	2000060c 	.word	0x2000060c

08008884 <check_custom_frame_delay>:


//Custom Delay with on Variable
uint8_t check_custom_frame_delay(uint32_t* count, uint32_t delay)
{
	if (*count >= delay)
 8008884:	6803      	ldr	r3, [r0, #0]
 8008886:	428b      	cmp	r3, r1
 8008888:	d203      	bcs.n	8008892 <check_custom_frame_delay+0xe>
	{
		*count = 0;
		return 1;
	}
	*count = *count + 1;
 800888a:	3301      	adds	r3, #1
 800888c:	6003      	str	r3, [r0, #0]
	return 0;
 800888e:	2000      	movs	r0, #0
}
 8008890:	4770      	bx	lr
		*count = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	6003      	str	r3, [r0, #0]
		return 1;
 8008896:	2001      	movs	r0, #1
 8008898:	4770      	bx	lr
	...

0800889c <check_frame_delay>:
{
 800889c:	b508      	push	{r3, lr}
	return check_custom_frame_delay(&delay_count, delay);
 800889e:	4601      	mov	r1, r0
 80088a0:	4801      	ldr	r0, [pc, #4]	; (80088a8 <check_frame_delay+0xc>)
 80088a2:	f7ff ffef 	bl	8008884 <check_custom_frame_delay>
}
 80088a6:	bd08      	pop	{r3, pc}
 80088a8:	2000060c 	.word	0x2000060c

080088ac <set_pwm_light>:


//Set Light by index (0..9)
void set_pwm_light(uint8_t index, uint8_t val)
{
 80088ac:	b508      	push	{r3, lr}
	set_reg(index+1, val);
 80088ae:	3001      	adds	r0, #1
 80088b0:	f7fc faf4 	bl	8004e9c <set_reg>
}
 80088b4:	bd08      	pop	{r3, pc}

080088b6 <set_pwm_direct>:

//Set PWM Value direct
void set_pwm_direct(uint8_t id, uint8_t ch, uint16_t val)
{
 80088b6:	b508      	push	{r3, lr}
	setPWMdirect(id, ch, val);
 80088b8:	f7fd fdca 	bl	8006450 <setPWMdirect>
}
 80088bc:	bd08      	pop	{r3, pc}

080088be <get_DMX_variable>:
}


//Get a DMX Variable
uint8_t get_DMX_variable(t_dmx_var var)
{
 80088be:	b508      	push	{r3, lr}
	return get_reg((uint32_t)var);
 80088c0:	f7fc fafa 	bl	8004eb8 <get_reg>
}
 80088c4:	bd08      	pop	{r3, pc}

080088c6 <set_DMX_variable>:

//Set a DMX Variable
void set_DMX_variable(t_dmx_var var, uint8_t val)
{
 80088c6:	b508      	push	{r3, lr}
	set_reg((uint32_t)var,val);
 80088c8:	f7fc fae8 	bl	8004e9c <set_reg>
}
 80088cc:	bd08      	pop	{r3, pc}

080088ce <millisec>:
{
	return get_trigger(ch);
}

uint32_t millisec(void)
{
 80088ce:	b508      	push	{r3, lr}
	return HAL_GetTick();
 80088d0:	f7f8 fc88 	bl	80011e4 <HAL_GetTick>
}
 80088d4:	bd08      	pop	{r3, pc}

080088d6 <scale256>:


uint8_t scale256(uint8_t val, uint8_t scale)
{
	return (uint8_t)(((uint16_t)val * (uint16_t)scale)>>8);
 80088d6:	fb01 f000 	mul.w	r0, r1, r0
}
 80088da:	0a00      	lsrs	r0, r0, #8
 80088dc:	4770      	bx	lr

080088de <scale_full>:

uint16_t scale_full(uint16_t in,uint16_t in_max, uint16_t in_min, uint16_t out_max, uint16_t out_min)
{
 80088de:	b410      	push	{r4}
 80088e0:	f8bd 4004 	ldrh.w	r4, [sp, #4]
	return (uint16_t) (((uint32_t)(in-in_min)  * (uint32_t)(out_max - out_min))/ (uint32_t)(in_max - in_min) + (uint32_t)out_min);
 80088e4:	1a80      	subs	r0, r0, r2
 80088e6:	1b1b      	subs	r3, r3, r4
 80088e8:	fb03 f000 	mul.w	r0, r3, r0
 80088ec:	1a89      	subs	r1, r1, r2
 80088ee:	fbb0 f0f1 	udiv	r0, r0, r1
 80088f2:	4420      	add	r0, r4
}
 80088f4:	b280      	uxth	r0, r0
 80088f6:	bc10      	pop	{r4}
 80088f8:	4770      	bx	lr

080088fa <create_rgb_buffer>:

uint8_t create_rgb_buffer(t_rgb_buf* pbuf, uint16_t size)
{
 80088fa:	b538      	push	{r3, r4, r5, lr}
 80088fc:	4604      	mov	r4, r0
 80088fe:	460d      	mov	r5, r1
	pbuf->size = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	8083      	strh	r3, [r0, #4]
	pbuf->rgb_pixels = calloc(size, sizeof(t_rgb));
 8008904:	2103      	movs	r1, #3
 8008906:	4628      	mov	r0, r5
 8008908:	f000 fa94 	bl	8008e34 <calloc>
 800890c:	6020      	str	r0, [r4, #0]
	if (NULL != pbuf->rgb_pixels)
 800890e:	b110      	cbz	r0, 8008916 <create_rgb_buffer+0x1c>
	{
		pbuf->size = size;
 8008910:	80a5      	strh	r5, [r4, #4]
		return 1;
 8008912:	2001      	movs	r0, #1
	}
	return 0;
}
 8008914:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
 8008916:	2000      	movs	r0, #0
 8008918:	e7fc      	b.n	8008914 <create_rgb_buffer+0x1a>

0800891a <destroy_rgb_buffer>:

void destroy_rgb_buffer(t_rgb_buf* pbuf)
{
 800891a:	b508      	push	{r3, lr}
	free(pbuf->rgb_pixels);
 800891c:	6800      	ldr	r0, [r0, #0]
 800891e:	f000 fac3 	bl	8008ea8 <free>
}
 8008922:	bd08      	pop	{r3, pc}

08008924 <set_buffer_pixel>:

void set_buffer_pixel(t_rgb_buf* pbuf,uint16_t pos, uint8_t r, uint8_t g, uint8_t b)
{
 8008924:	b410      	push	{r4}
	t_rgb *pix = pbuf->rgb_pixels;
 8008926:	6804      	ldr	r4, [r0, #0]
	pix[pos].r = r;
 8008928:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800892c:	1860      	adds	r0, r4, r1
 800892e:	5462      	strb	r2, [r4, r1]
	pix[pos].g = g;
 8008930:	7043      	strb	r3, [r0, #1]
	pix[pos].b = b;
 8008932:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008936:	7083      	strb	r3, [r0, #2]
}
 8008938:	bc10      	pop	{r4}
 800893a:	4770      	bx	lr

0800893c <set_pixels_from_buf>:

void set_pixels_from_buf(t_stripchannel ch, t_rgb_buf* pbuf)
{
 800893c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800893e:	b083      	sub	sp, #12
 8008940:	4607      	mov	r7, r0
 8008942:	460c      	mov	r4, r1
	uint16_t cnt;
	uint16_t maxcnt = WS2812B_numPixels(ch);
 8008944:	f000 f90c 	bl	8008b60 <WS2812B_numPixels>
	t_rgb *pix = pbuf->rgb_pixels;
 8008948:	6825      	ldr	r5, [r4, #0]

	if (maxcnt>pbuf->size)
 800894a:	88a6      	ldrh	r6, [r4, #4]
 800894c:	4286      	cmp	r6, r0
 800894e:	d300      	bcc.n	8008952 <set_pixels_from_buf+0x16>
	uint16_t maxcnt = WS2812B_numPixels(ch);
 8008950:	4606      	mov	r6, r0
		maxcnt = pbuf->size;

	for (cnt = 0;cnt<maxcnt;cnt++)
 8008952:	2400      	movs	r4, #0
 8008954:	e00c      	b.n	8008970 <set_pixels_from_buf+0x34>
	{
		WS2812B_setPixelColor(ch,cnt,pix[cnt].r,pix[cnt].g,pix[cnt].b);
 8008956:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800895a:	18a9      	adds	r1, r5, r2
 800895c:	784b      	ldrb	r3, [r1, #1]
 800895e:	5caa      	ldrb	r2, [r5, r2]
 8008960:	7889      	ldrb	r1, [r1, #2]
 8008962:	9100      	str	r1, [sp, #0]
 8008964:	4621      	mov	r1, r4
 8008966:	4638      	mov	r0, r7
 8008968:	f000 f8b8 	bl	8008adc <WS2812B_setPixelColor>
	for (cnt = 0;cnt<maxcnt;cnt++)
 800896c:	3401      	adds	r4, #1
 800896e:	b2a4      	uxth	r4, r4
 8008970:	42b4      	cmp	r4, r6
 8008972:	d3f0      	bcc.n	8008956 <set_pixels_from_buf+0x1a>
	}
}
 8008974:	b003      	add	sp, #12
 8008976:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008978 <fade_rgb_buf>:

void fade_rgb_buf(t_rgb_buf* pbuf,uint8_t scale)
{
 8008978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800897c:	4681      	mov	r9, r0
 800897e:	4688      	mov	r8, r1
	uint16_t i;
	t_rgb *pix = pbuf->rgb_pixels;
 8008980:	6807      	ldr	r7, [r0, #0]

	for (i = 0; i<pbuf->size;i++)
 8008982:	2400      	movs	r4, #0
 8008984:	e007      	b.n	8008996 <fade_rgb_buf+0x1e>
	{
		pix[i].r = scale256(pix[i].r, scale);
		if (pix[i].r < 2)
			pix[i].r = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	55bb      	strb	r3, [r7, r6]
 800898a:	e012      	b.n	80089b2 <fade_rgb_buf+0x3a>
		pix[i].g = scale256(pix[i].g, scale);
		if (pix[i].g < 2)
			pix[i].g = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	706b      	strb	r3, [r5, #1]
 8008990:	e016      	b.n	80089c0 <fade_rgb_buf+0x48>
	for (i = 0; i<pbuf->size;i++)
 8008992:	3401      	adds	r4, #1
 8008994:	b2a4      	uxth	r4, r4
 8008996:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800899a:	42a3      	cmp	r3, r4
 800899c:	d91a      	bls.n	80089d4 <fade_rgb_buf+0x5c>
		pix[i].r = scale256(pix[i].r, scale);
 800899e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80089a2:	19bd      	adds	r5, r7, r6
 80089a4:	4641      	mov	r1, r8
 80089a6:	5db8      	ldrb	r0, [r7, r6]
 80089a8:	f7ff ff95 	bl	80088d6 <scale256>
 80089ac:	55b8      	strb	r0, [r7, r6]
		if (pix[i].r < 2)
 80089ae:	2801      	cmp	r0, #1
 80089b0:	d9e9      	bls.n	8008986 <fade_rgb_buf+0xe>
		pix[i].g = scale256(pix[i].g, scale);
 80089b2:	4641      	mov	r1, r8
 80089b4:	7868      	ldrb	r0, [r5, #1]
 80089b6:	f7ff ff8e 	bl	80088d6 <scale256>
 80089ba:	7068      	strb	r0, [r5, #1]
		if (pix[i].g < 2)
 80089bc:	2801      	cmp	r0, #1
 80089be:	d9e5      	bls.n	800898c <fade_rgb_buf+0x14>
		pix[i].b = scale256(pix[i].b, scale);
 80089c0:	4641      	mov	r1, r8
 80089c2:	78a8      	ldrb	r0, [r5, #2]
 80089c4:	f7ff ff87 	bl	80088d6 <scale256>
 80089c8:	70a8      	strb	r0, [r5, #2]
		if (pix[i].b < 2)
 80089ca:	2801      	cmp	r0, #1
 80089cc:	d8e1      	bhi.n	8008992 <fade_rgb_buf+0x1a>
			pix[i].b = 0;
 80089ce:	2300      	movs	r3, #0
 80089d0:	70ab      	strb	r3, [r5, #2]
 80089d2:	e7de      	b.n	8008992 <fade_rgb_buf+0x1a>
	}
}
 80089d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080089d8 <simple_rnd>:
//Very simple pseudo-random number generator.
//Returns a number 0x00000000..0xFFFFFFFF
//This is a pseudo-random sequence and will always start the same....

uint32_t simple_rnd()
{
 80089d8:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
   x *= x;
 80089dc:	490e      	ldr	r1, [pc, #56]	; (8008a18 <simple_rnd+0x40>)
 80089de:	680a      	ldr	r2, [r1, #0]
 80089e0:	684b      	ldr	r3, [r1, #4]
 80089e2:	fb02 f003 	mul.w	r0, r2, r3
 80089e6:	fba2 2302 	umull	r2, r3, r2, r2
 80089ea:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   x += (w += s);
 80089ee:	480b      	ldr	r0, [pc, #44]	; (8008a1c <simple_rnd+0x44>)
 80089f0:	e9d0 4500 	ldrd	r4, r5, [r0]
 80089f4:	4e0a      	ldr	r6, [pc, #40]	; (8008a20 <simple_rnd+0x48>)
 80089f6:	cec0      	ldmia	r6, {r6, r7}
 80089f8:	eb14 0b06 	adds.w	fp, r4, r6
 80089fc:	eb45 0c07 	adc.w	ip, r5, r7
 8008a00:	e9c0 bc00 	strd	fp, ip, [r0]
 8008a04:	eb12 040b 	adds.w	r4, r2, fp
 8008a08:	eb43 050c 	adc.w	r5, r3, ip
   return x = (x>>32) | (x<<32);
 8008a0c:	600d      	str	r5, [r1, #0]
 8008a0e:	604c      	str	r4, [r1, #4]
}
 8008a10:	4628      	mov	r0, r5
 8008a12:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 8008a16:	4770      	bx	lr
 8008a18:	20000618 	.word	0x20000618
 8008a1c:	20000610 	.word	0x20000610
 8008a20:	20000098 	.word	0x20000098

08008a24 <disable_DMX_light_Update>:

void disable_DMX_light_Update(uint8_t val)
{
 8008a24:	b508      	push	{r3, lr}
	disableDMXlightUpdate(val);
 8008a26:	f7fd f867 	bl	8005af8 <disableDMXlightUpdate>
}
 8008a2a:	bd08      	pop	{r3, pc}

08008a2c <WS2812B_show>:



// Sends the current buffer to the leds
void WS2812B_show(t_stripchannel ch)
{
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	4604      	mov	r4, r0
  uint32_t loopcnt = 0;
  static uint8_t errorcnt = 0;

  //If Strip is set to 0 pixels we ignore it...
  if (stripchannel[ch].numLEDs == 0)
 8008a30:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8008a34:	00da      	lsls	r2, r3, #3
 8008a36:	4b27      	ldr	r3, [pc, #156]	; (8008ad4 <WS2812B_show+0xa8>)
 8008a38:	4413      	add	r3, r2
 8008a3a:	889b      	ldrh	r3, [r3, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d03b      	beq.n	8008ab8 <WS2812B_show+0x8c>
	  return;

  //Wait for last transfer to finish
  while(__HAL_SPI_GET_FLAG(stripchannel[ch].phspi, SPI_FLAG_BSY ))
 8008a40:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008a44:	00da      	lsls	r2, r3, #3
 8008a46:	4b23      	ldr	r3, [pc, #140]	; (8008ad4 <WS2812B_show+0xa8>)
 8008a48:	4413      	add	r3, r2
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a54:	d1f4      	bne.n	8008a40 <WS2812B_show+0x14>
  {
	  loopcnt++;
  }

  while (HAL_GetTick()<stripchannel[ch].time)
 8008a56:	f7f8 fbc5 	bl	80011e4 <HAL_GetTick>
 8008a5a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8008a5e:	00d3      	lsls	r3, r2, #3
 8008a60:	4a1c      	ldr	r2, [pc, #112]	; (8008ad4 <WS2812B_show+0xa8>)
 8008a62:	58d3      	ldr	r3, [r2, r3]
 8008a64:	4298      	cmp	r0, r3
 8008a66:	d3f6      	bcc.n	8008a56 <WS2812B_show+0x2a>

  //we know how long the transfer takes..
  //(440ns per bit) * 8 bits * 3 colors * number of pixels...

  //Send Data via DMA
  if (HAL_OK != HAL_SPI_Transmit_DMA(stripchannel[ch].phspi, stripchannel[ch].pixels, stripchannel[ch].numBytes))
 8008a68:	0062      	lsls	r2, r4, #1
 8008a6a:	4422      	add	r2, r4
 8008a6c:	00d1      	lsls	r1, r2, #3
 8008a6e:	4b19      	ldr	r3, [pc, #100]	; (8008ad4 <WS2812B_show+0xa8>)
 8008a70:	440b      	add	r3, r1
 8008a72:	88da      	ldrh	r2, [r3, #6]
 8008a74:	6899      	ldr	r1, [r3, #8]
 8008a76:	6918      	ldr	r0, [r3, #16]
 8008a78:	f7fa fb14 	bl	80030a4 <HAL_SPI_Transmit_DMA>
 8008a7c:	b118      	cbz	r0, 8008a86 <WS2812B_show+0x5a>
	  errorcnt++;
 8008a7e:	4a16      	ldr	r2, [pc, #88]	; (8008ad8 <WS2812B_show+0xac>)
 8008a80:	7813      	ldrb	r3, [r2, #0]
 8008a82:	3301      	adds	r3, #1
 8008a84:	7013      	strb	r3, [r2, #0]
  stripchannel[ch].time = HAL_GetTick() + 6;  //we need to wait at least XXX systicks for the colors to latch in after the last transfer.
 8008a86:	f7f8 fbad 	bl	80011e4 <HAL_GetTick>
 8008a8a:	3006      	adds	r0, #6
 8008a8c:	4911      	ldr	r1, [pc, #68]	; (8008ad4 <WS2812B_show+0xa8>)
 8008a8e:	0063      	lsls	r3, r4, #1
 8008a90:	4423      	add	r3, r4
 8008a92:	00da      	lsls	r2, r3, #3
 8008a94:	188b      	adds	r3, r1, r2
 8008a96:	5088      	str	r0, [r1, r2]
  	  	  	  	  	  	  	 //The added 6 ms here are purely experimental...

  // Need to copy the last / current buffer to the other half of the double buffer as most API code does not rebuild the entire contents
  // from scratch. Often just a few pixels are changed e.g in a chaser effect

  if (stripchannel[ch].pixels==stripchannel[ch].doubleBuffer)
 8008a98:	689a      	ldr	r2, [r3, #8]
 8008a9a:	68d8      	ldr	r0, [r3, #12]
 8008a9c:	4282      	cmp	r2, r0
 8008a9e:	d00c      	beq.n	8008aba <WS2812B_show+0x8e>
	memcpy(stripchannel[ch].pixels,stripchannel[ch].doubleBuffer,stripchannel[ch].numBytes);// copy first buffer to second buffer
  }
  else
  {
	// pixels was using the second buffer
	  stripchannel[ch].pixels	= stripchannel[ch].doubleBuffer;  // set pixels to first buffer
 8008aa0:	4d0c      	ldr	r5, [pc, #48]	; (8008ad4 <WS2812B_show+0xa8>)
 8008aa2:	0063      	lsls	r3, r4, #1
 8008aa4:	1919      	adds	r1, r3, r4
 8008aa6:	00ca      	lsls	r2, r1, #3
 8008aa8:	442a      	add	r2, r5
 8008aaa:	6090      	str	r0, [r2, #8]
	memcpy(stripchannel[ch].pixels,stripchannel[ch].doubleBuffer+stripchannel[ch].numBytes,stripchannel[ch].numBytes);	 // copy second buffer to first buffer
 8008aac:	68d1      	ldr	r1, [r2, #12]
 8008aae:	88d3      	ldrh	r3, [r2, #6]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	4419      	add	r1, r3
 8008ab4:	f000 fa00 	bl	8008eb8 <memcpy>
  }
}
 8008ab8:	bd38      	pop	{r3, r4, r5, pc}
	  stripchannel[ch].pixels = stripchannel[ch].doubleBuffer+stripchannel[ch].numBytes;  // set pixels to second buffer
 8008aba:	460d      	mov	r5, r1
 8008abc:	0062      	lsls	r2, r4, #1
 8008abe:	1911      	adds	r1, r2, r4
 8008ac0:	00cb      	lsls	r3, r1, #3
 8008ac2:	442b      	add	r3, r5
 8008ac4:	88d9      	ldrh	r1, [r3, #6]
 8008ac6:	4408      	add	r0, r1
 8008ac8:	6098      	str	r0, [r3, #8]
	memcpy(stripchannel[ch].pixels,stripchannel[ch].doubleBuffer,stripchannel[ch].numBytes);// copy first buffer to second buffer
 8008aca:	460a      	mov	r2, r1
 8008acc:	68d9      	ldr	r1, [r3, #12]
 8008ace:	f000 f9f3 	bl	8008eb8 <memcpy>
 8008ad2:	e7f1      	b.n	8008ab8 <WS2812B_show+0x8c>
 8008ad4:	200008b0 	.word	0x200008b0
 8008ad8:	20000620 	.word	0x20000620

08008adc <WS2812B_setPixelColor>:

//Sets a specific pixel to a specific r,g,b colour
//Because the pixels buffer contains the encoded bitstream, which is in triplets
//the lookup table need to be used to find the correct pattern for each byte in the 3 byte sequence.
void WS2812B_setPixelColor(t_stripchannel ch,uint16_t n, uint8_t r, uint8_t g, uint8_t b)
 {
 8008adc:	b4f0      	push	{r4, r5, r6, r7}
 8008ade:	f89d 5010 	ldrb.w	r5, [sp, #16]
   uint8_t *bptr = stripchannel[ch].pixels + (n<<3) + n +1;
 8008ae2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8008ae6:	00c4      	lsls	r4, r0, #3
 8008ae8:	4812      	ldr	r0, [pc, #72]	; (8008b34 <WS2812B_setPixelColor+0x58>)
 8008aea:	4420      	add	r0, r4
 8008aec:	6887      	ldr	r7, [r0, #8]
 8008aee:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8008af2:	3101      	adds	r1, #1
 8008af4:	1878      	adds	r0, r7, r1
   uint8_t *tPtr = (uint8_t *)encoderLookup + g*2 + g;// need to index 3 x g into the lookup
 8008af6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008afa:	4c0f      	ldr	r4, [pc, #60]	; (8008b38 <WS2812B_setPixelColor+0x5c>)
 8008afc:	18e6      	adds	r6, r4, r3

   *bptr++ = *tPtr++;
 8008afe:	5ce3      	ldrb	r3, [r4, r3]
 8008b00:	547b      	strb	r3, [r7, r1]
   *bptr++ = *tPtr++;
 8008b02:	7873      	ldrb	r3, [r6, #1]
 8008b04:	7043      	strb	r3, [r0, #1]
   *bptr++ = *tPtr++;
 8008b06:	78b3      	ldrb	r3, [r6, #2]
 8008b08:	7083      	strb	r3, [r0, #2]

   tPtr = (uint8_t *)encoderLookup + r*2 + r;
 8008b0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008b0e:	18a3      	adds	r3, r4, r2
   *bptr++ = *tPtr++;
 8008b10:	5ca2      	ldrb	r2, [r4, r2]
 8008b12:	70c2      	strb	r2, [r0, #3]
   *bptr++ = *tPtr++;
 8008b14:	785a      	ldrb	r2, [r3, #1]
 8008b16:	7102      	strb	r2, [r0, #4]
   *bptr++ = *tPtr++;
 8008b18:	789b      	ldrb	r3, [r3, #2]
 8008b1a:	7143      	strb	r3, [r0, #5]

   tPtr = (uint8_t *)encoderLookup + b*2 + b;
 8008b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b20:	1963      	adds	r3, r4, r5
   *bptr++ = *tPtr++;
 8008b22:	5d62      	ldrb	r2, [r4, r5]
 8008b24:	7182      	strb	r2, [r0, #6]
   *bptr++ = *tPtr++;
 8008b26:	785a      	ldrb	r2, [r3, #1]
 8008b28:	71c2      	strb	r2, [r0, #7]
   *bptr++ = *tPtr++;
 8008b2a:	789b      	ldrb	r3, [r3, #2]
 8008b2c:	7203      	strb	r3, [r0, #8]
 }
 8008b2e:	bcf0      	pop	{r4, r5, r6, r7}
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	200008b0 	.word	0x200008b0
 8008b38:	0800cc28 	.word	0x0800cc28

08008b3c <WS2812B_setPixelColorDirect>:

void WS2812B_setPixelColorDirect(t_stripchannel ch,uint16_t n, uint32_t c)
{
 8008b3c:	b500      	push	{lr}
 8008b3e:	b083      	sub	sp, #12
  WS2812B_setPixelColor(ch,n,(uint8_t)(c >> 16),(uint8_t)(c >>  8),(uint8_t)c);
 8008b40:	b2d3      	uxtb	r3, r2
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008b48:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8008b4c:	f7ff ffc6 	bl	8008adc <WS2812B_setPixelColor>
}
 8008b50:	b003      	add	sp, #12
 8008b52:	f85d fb04 	ldr.w	pc, [sp], #4

08008b56 <WS2812B_Color>:

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t WS2812B_Color(uint8_t r, uint8_t g, uint8_t b)
{
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 8008b56:	0209      	lsls	r1, r1, #8
 8008b58:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
}
 8008b5c:	4310      	orrs	r0, r2
 8008b5e:	4770      	bx	lr

08008b60 <WS2812B_numPixels>:

//Get the number of pixels
uint16_t WS2812B_numPixels(t_stripchannel ch)
{
  return stripchannel[ch].numLEDs;
 8008b60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8008b64:	00c2      	lsls	r2, r0, #3
 8008b66:	4b02      	ldr	r3, [pc, #8]	; (8008b70 <WS2812B_numPixels+0x10>)
 8008b68:	4413      	add	r3, r2
}
 8008b6a:	8898      	ldrh	r0, [r3, #4]
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	200008b0 	.word	0x200008b0

08008b74 <WS2812B_clear>:



//Sets the encoded pixel data to turn all the LEDs off.
void WS2812B_clear(t_stripchannel ch)
{
 8008b74:	b410      	push	{r4}
	uint8_t * bptr= stripchannel[ch].pixels+1;// Note first byte in the buffer is a preable and is always zero. hence the +1
 8008b76:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8008b7a:	00da      	lsls	r2, r3, #3
 8008b7c:	4b0c      	ldr	r3, [pc, #48]	; (8008bb0 <WS2812B_clear+0x3c>)
 8008b7e:	4413      	add	r3, r2
 8008b80:	689a      	ldr	r2, [r3, #8]
 8008b82:	3201      	adds	r2, #1
	uint8_t *tPtr;

	for(int i=0;i< (stripchannel[ch].numLEDs *3);i++)
 8008b84:	2400      	movs	r4, #0
 8008b86:	e007      	b.n	8008b98 <WS2812B_clear+0x24>
	{
		tPtr = (uint8_t *)encoderLookup;
		*bptr++ = *tPtr++;
 8008b88:	2392      	movs	r3, #146	; 0x92
 8008b8a:	7013      	strb	r3, [r2, #0]
		*bptr++ = *tPtr++;
 8008b8c:	2349      	movs	r3, #73	; 0x49
 8008b8e:	7053      	strb	r3, [r2, #1]
		*bptr++ = *tPtr++;
 8008b90:	2324      	movs	r3, #36	; 0x24
 8008b92:	7093      	strb	r3, [r2, #2]
	for(int i=0;i< (stripchannel[ch].numLEDs *3);i++)
 8008b94:	3401      	adds	r4, #1
		*bptr++ = *tPtr++;
 8008b96:	3203      	adds	r2, #3
	for(int i=0;i< (stripchannel[ch].numLEDs *3);i++)
 8008b98:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8008b9c:	00d9      	lsls	r1, r3, #3
 8008b9e:	4b04      	ldr	r3, [pc, #16]	; (8008bb0 <WS2812B_clear+0x3c>)
 8008ba0:	440b      	add	r3, r1
 8008ba2:	889b      	ldrh	r3, [r3, #4]
 8008ba4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008ba8:	42a3      	cmp	r3, r4
 8008baa:	dced      	bgt.n	8008b88 <WS2812B_clear+0x14>
	}
}
 8008bac:	bc10      	pop	{r4}
 8008bae:	4770      	bx	lr
 8008bb0:	200008b0 	.word	0x200008b0

08008bb4 <WS2812B_init>:
{
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	4604      	mov	r4, r0
 8008bba:	460d      	mov	r5, r1
	stripchannel[ch].pixels = NULL;
 8008bbc:	4947      	ldr	r1, [pc, #284]	; (8008cdc <WS2812B_init+0x128>)
 8008bbe:	0043      	lsls	r3, r0, #1
 8008bc0:	4403      	add	r3, r0
 8008bc2:	00da      	lsls	r2, r3, #3
 8008bc4:	1888      	adds	r0, r1, r2
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	6083      	str	r3, [r0, #8]
	stripchannel[ch].doubleBuffer = NULL;
 8008bca:	60c3      	str	r3, [r0, #12]
	stripchannel[ch].time = 0;
 8008bcc:	508b      	str	r3, [r1, r2]
	if (ch == CH1)
 8008bce:	2c00      	cmp	r4, #0
 8008bd0:	d12f      	bne.n	8008c32 <WS2812B_init+0x7e>
		stripchannel[ch].phspi = &hspi1;
 8008bd2:	4a43      	ldr	r2, [pc, #268]	; (8008ce0 <WS2812B_init+0x12c>)
 8008bd4:	6102      	str	r2, [r0, #16]
		stripchannel[ch].phdma_spi_tx = &hdma_spi1_tx;
 8008bd6:	4a43      	ldr	r2, [pc, #268]	; (8008ce4 <WS2812B_init+0x130>)
 8008bd8:	6142      	str	r2, [r0, #20]
  uint8_t buffer0[2] = { 0, 0 };
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f88d 3004 	strb.w	r3, [sp, #4]
 8008be0:	f88d 3005 	strb.w	r3, [sp, #5]
  stripchannel[ch].numBytes = (number_of_leds<<3) + number_of_leds + 2; // 9 encoded bytes per pixel. 1 byte empty peamble to fix issue with SPI MOSI and on byte at the end to clear down MOSI
 8008be4:	00e8      	lsls	r0, r5, #3
 8008be6:	b280      	uxth	r0, r0
 8008be8:	4428      	add	r0, r5
 8008bea:	b280      	uxth	r0, r0
 8008bec:	3002      	adds	r0, #2
 8008bee:	b280      	uxth	r0, r0
 8008bf0:	0063      	lsls	r3, r4, #1
 8008bf2:	4423      	add	r3, r4
 8008bf4:	00da      	lsls	r2, r3, #3
 8008bf6:	4e39      	ldr	r6, [pc, #228]	; (8008cdc <WS2812B_init+0x128>)
 8008bf8:	4416      	add	r6, r2
 8008bfa:	80f0      	strh	r0, [r6, #6]
  if((stripchannel[ch].doubleBuffer = (uint8_t *)malloc(stripchannel[ch].numBytes*2)))
 8008bfc:	0040      	lsls	r0, r0, #1
 8008bfe:	f000 f94b 	bl	8008e98 <malloc>
 8008c02:	60f0      	str	r0, [r6, #12]
 8008c04:	b1f8      	cbz	r0, 8008c46 <WS2812B_init+0x92>
	stripchannel[ch].numLEDs = number_of_leds;
 8008c06:	4633      	mov	r3, r6
 8008c08:	80b5      	strh	r5, [r6, #4]
	stripchannel[ch].pixels = stripchannel[ch].doubleBuffer;
 8008c0a:	6098      	str	r0, [r3, #8]
    *stripchannel[ch].pixels=0;//clear the preamble byte
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	7002      	strb	r2, [r0, #0]
    *(stripchannel[ch].pixels+stripchannel[ch].numBytes-1)=0;// clear the post send cleardown byte.
 8008c10:	68b1      	ldr	r1, [r6, #8]
 8008c12:	88f3      	ldrh	r3, [r6, #6]
 8008c14:	3b01      	subs	r3, #1
 8008c16:	54ca      	strb	r2, [r1, r3]
    WS2812B_clear(ch);// Set the encoded data to all encoded zeros
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f7ff ffab 	bl	8008b74 <WS2812B_clear>
  if (ch == CH1)
 8008c1e:	b1e4      	cbz	r4, 8008c5a <WS2812B_init+0xa6>
	  stripchannel[ch].phdma_spi_tx->Instance = DMA1_Channel4;
 8008c20:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008c24:	00da      	lsls	r2, r3, #3
 8008c26:	4b2d      	ldr	r3, [pc, #180]	; (8008cdc <WS2812B_init+0x128>)
 8008c28:	4413      	add	r3, r2
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	4a2e      	ldr	r2, [pc, #184]	; (8008ce8 <WS2812B_init+0x134>)
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	e01b      	b.n	8008c6a <WS2812B_init+0xb6>
		stripchannel[ch].phspi = &hspi2;
 8008c32:	0062      	lsls	r2, r4, #1
 8008c34:	4422      	add	r2, r4
 8008c36:	00d1      	lsls	r1, r2, #3
 8008c38:	4b28      	ldr	r3, [pc, #160]	; (8008cdc <WS2812B_init+0x128>)
 8008c3a:	440b      	add	r3, r1
 8008c3c:	4a2b      	ldr	r2, [pc, #172]	; (8008cec <WS2812B_init+0x138>)
 8008c3e:	611a      	str	r2, [r3, #16]
		stripchannel[ch].phdma_spi_tx = &hdma_spi2_tx;
 8008c40:	4a2b      	ldr	r2, [pc, #172]	; (8008cf0 <WS2812B_init+0x13c>)
 8008c42:	615a      	str	r2, [r3, #20]
 8008c44:	e7c9      	b.n	8008bda <WS2812B_init+0x26>
	  stripchannel[ch].numLEDs = stripchannel[ch].numBytes = 0;
 8008c46:	4a25      	ldr	r2, [pc, #148]	; (8008cdc <WS2812B_init+0x128>)
 8008c48:	0063      	lsls	r3, r4, #1
 8008c4a:	1918      	adds	r0, r3, r4
 8008c4c:	00c1      	lsls	r1, r0, #3
 8008c4e:	4411      	add	r1, r2
 8008c50:	2000      	movs	r0, #0
 8008c52:	80c8      	strh	r0, [r1, #6]
 8008c54:	8088      	strh	r0, [r1, #4]
}
 8008c56:	b002      	add	sp, #8
 8008c58:	bd70      	pop	{r4, r5, r6, pc}
	  stripchannel[ch].phdma_spi_tx->Instance = DMA1_Channel3;
 8008c5a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008c5e:	00da      	lsls	r2, r3, #3
 8008c60:	4b1e      	ldr	r3, [pc, #120]	; (8008cdc <WS2812B_init+0x128>)
 8008c62:	4413      	add	r3, r2
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	4a23      	ldr	r2, [pc, #140]	; (8008cf4 <WS2812B_init+0x140>)
 8008c68:	601a      	str	r2, [r3, #0]
  stripchannel[ch].phdma_spi_tx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008c6a:	0062      	lsls	r2, r4, #1
 8008c6c:	4422      	add	r2, r4
 8008c6e:	00d1      	lsls	r1, r2, #3
 8008c70:	4b1a      	ldr	r3, [pc, #104]	; (8008cdc <WS2812B_init+0x128>)
 8008c72:	440b      	add	r3, r1
 8008c74:	695a      	ldr	r2, [r3, #20]
 8008c76:	2110      	movs	r1, #16
 8008c78:	6051      	str	r1, [r2, #4]
  stripchannel[ch].phdma_spi_tx->Init.PeriphInc = DMA_PINC_DISABLE;
 8008c7a:	6959      	ldr	r1, [r3, #20]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	608a      	str	r2, [r1, #8]
  stripchannel[ch].phdma_spi_tx->Init.MemInc = DMA_MINC_ENABLE;
 8008c80:	6959      	ldr	r1, [r3, #20]
 8008c82:	2080      	movs	r0, #128	; 0x80
 8008c84:	60c8      	str	r0, [r1, #12]
  stripchannel[ch].phdma_spi_tx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008c86:	6959      	ldr	r1, [r3, #20]
 8008c88:	610a      	str	r2, [r1, #16]
  stripchannel[ch].phdma_spi_tx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008c8a:	6959      	ldr	r1, [r3, #20]
 8008c8c:	614a      	str	r2, [r1, #20]
  stripchannel[ch].phdma_spi_tx->Init.Mode = DMA_NORMAL;
 8008c8e:	6959      	ldr	r1, [r3, #20]
 8008c90:	618a      	str	r2, [r1, #24]
  stripchannel[ch].phdma_spi_tx->Init.Priority = DMA_PRIORITY_MEDIUM;
 8008c92:	695a      	ldr	r2, [r3, #20]
 8008c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008c98:	61d1      	str	r1, [r2, #28]
  if (HAL_DMA_Init(stripchannel[ch].phdma_spi_tx) != HAL_OK)
 8008c9a:	6958      	ldr	r0, [r3, #20]
 8008c9c:	f7f8 fdba 	bl	8001814 <HAL_DMA_Init>
 8008ca0:	b140      	cbz	r0, 8008cb4 <WS2812B_init+0x100>
	    stripchannel[ch].numLEDs = stripchannel[ch].numBytes = 0;
 8008ca2:	4a0e      	ldr	r2, [pc, #56]	; (8008cdc <WS2812B_init+0x128>)
 8008ca4:	0063      	lsls	r3, r4, #1
 8008ca6:	1918      	adds	r0, r3, r4
 8008ca8:	00c1      	lsls	r1, r0, #3
 8008caa:	4411      	add	r1, r2
 8008cac:	2000      	movs	r0, #0
 8008cae:	80c8      	strh	r0, [r1, #6]
 8008cb0:	8088      	strh	r0, [r1, #4]
	    return 0;
 8008cb2:	e7d0      	b.n	8008c56 <WS2812B_init+0xa2>
  __HAL_LINKDMA(stripchannel[ch].phspi,hdmatx,*stripchannel[ch].phdma_spi_tx);
 8008cb4:	4909      	ldr	r1, [pc, #36]	; (8008cdc <WS2812B_init+0x128>)
 8008cb6:	0063      	lsls	r3, r4, #1
 8008cb8:	1918      	adds	r0, r3, r4
 8008cba:	00c2      	lsls	r2, r0, #3
 8008cbc:	440a      	add	r2, r1
 8008cbe:	6910      	ldr	r0, [r2, #16]
 8008cc0:	6952      	ldr	r2, [r2, #20]
 8008cc2:	6482      	str	r2, [r0, #72]	; 0x48
 8008cc4:	6250      	str	r0, [r2, #36]	; 0x24
   HAL_SPI_Transmit(stripchannel[ch].phspi, buffer0, 1, 100 );
 8008cc6:	441c      	add	r4, r3
 8008cc8:	00e0      	lsls	r0, r4, #3
 8008cca:	4408      	add	r0, r1
 8008ccc:	2364      	movs	r3, #100	; 0x64
 8008cce:	2201      	movs	r2, #1
 8008cd0:	a901      	add	r1, sp, #4
 8008cd2:	6900      	ldr	r0, [r0, #16]
 8008cd4:	f7fa f919 	bl	8002f0a <HAL_SPI_Transmit>
   return 1;
 8008cd8:	2001      	movs	r0, #1
 8008cda:	e7bc      	b.n	8008c56 <WS2812B_init+0xa2>
 8008cdc:	200008b0 	.word	0x200008b0
 8008ce0:	20000954 	.word	0x20000954
 8008ce4:	200009f0 	.word	0x200009f0
 8008ce8:	40020044 	.word	0x40020044
 8008cec:	200007dc 	.word	0x200007dc
 8008cf0:	200009ac 	.word	0x200009ac
 8008cf4:	40020030 	.word	0x40020030

08008cf8 <WS2812B_colorWheel>:
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t WS2812B_colorWheel(uint8_t WheelPos)
{
 8008cf8:	b508      	push	{r3, lr}
  if(WheelPos < 85)
 8008cfa:	2854      	cmp	r0, #84	; 0x54
 8008cfc:	d90e      	bls.n	8008d1c <WS2812B_colorWheel+0x24>
  {
    return WS2812B_Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  }
  else
  {
    if(WheelPos < 170)
 8008cfe:	28a9      	cmp	r0, #169	; 0xa9
 8008d00:	d917      	bls.n	8008d32 <WS2812B_colorWheel+0x3a>
     WheelPos -= 85;
     return WS2812B_Color(255 - WheelPos * 3, 0, WheelPos * 3);
    }
    else
    {
     WheelPos -= 170;
 8008d02:	3056      	adds	r0, #86	; 0x56
 8008d04:	b2c1      	uxtb	r1, r0
     return WS2812B_Color(0, WheelPos * 3, 255 - WheelPos * 3);
 8008d06:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
 8008d0a:	3a01      	subs	r2, #1
 8008d0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008d10:	b2d2      	uxtb	r2, r2
 8008d12:	b2c9      	uxtb	r1, r1
 8008d14:	2000      	movs	r0, #0
 8008d16:	f7ff ff1e 	bl	8008b56 <WS2812B_Color>
 8008d1a:	e009      	b.n	8008d30 <WS2812B_colorWheel+0x38>
    return WS2812B_Color(WheelPos * 3, 255 - WheelPos * 3, 0);
 8008d1c:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
 8008d20:	3901      	subs	r1, #1
 8008d22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8008d26:	2200      	movs	r2, #0
 8008d28:	b2c9      	uxtb	r1, r1
 8008d2a:	b2c0      	uxtb	r0, r0
 8008d2c:	f7ff ff13 	bl	8008b56 <WS2812B_Color>
    }
  }
}
 8008d30:	bd08      	pop	{r3, pc}
     WheelPos -= 85;
 8008d32:	3855      	subs	r0, #85	; 0x55
 8008d34:	b2c0      	uxtb	r0, r0
     return WS2812B_Color(255 - WheelPos * 3, 0, WheelPos * 3);
 8008d36:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8008d3a:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 8008d3e:	3801      	subs	r0, #1
 8008d40:	b2d2      	uxtb	r2, r2
 8008d42:	2100      	movs	r1, #0
 8008d44:	b2c0      	uxtb	r0, r0
 8008d46:	f7ff ff06 	bl	8008b56 <WS2812B_Color>
 8008d4a:	e7f1      	b.n	8008d30 <WS2812B_colorWheel+0x38>

08008d4c <WS2812B_rainbow>:


//show rainbow colors starting at pixel start for count pixels with a given startvalue with a defined stepsize
void WS2812B_rainbow(t_stripchannel ch,uint8_t start, uint8_t count, uint8_t startval,  uint8_t stepsize)
{
 8008d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d50:	4680      	mov	r8, r0
 8008d52:	460d      	mov	r5, r1
 8008d54:	4616      	mov	r6, r2
 8008d56:	f89d 7020 	ldrb.w	r7, [sp, #32]
  uint16_t i;
  int16_t j;

	j =startval;
 8008d5a:	4699      	mov	r9, r3
	for(i=start; i<(start+count); i++)
 8008d5c:	b28c      	uxth	r4, r1
 8008d5e:	e004      	b.n	8008d6a <WS2812B_rainbow+0x1e>
	{
		WS2812B_setPixelColorDirect(ch,i, WS2812B_colorWheel((j) & 255));
		j = j + stepsize;
		if (j>255)
			j = j - 255;
		else if (j<0)
 8008d60:	f1b9 0f00 	cmp.w	r9, #0
 8008d64:	db19      	blt.n	8008d9a <WS2812B_rainbow+0x4e>
	for(i=start; i<(start+count); i++)
 8008d66:	3401      	adds	r4, #1
 8008d68:	b2a4      	uxth	r4, r4
 8008d6a:	19ab      	adds	r3, r5, r6
 8008d6c:	429c      	cmp	r4, r3
 8008d6e:	da18      	bge.n	8008da2 <WS2812B_rainbow+0x56>
		WS2812B_setPixelColorDirect(ch,i, WS2812B_colorWheel((j) & 255));
 8008d70:	fa5f f089 	uxtb.w	r0, r9
 8008d74:	f7ff ffc0 	bl	8008cf8 <WS2812B_colorWheel>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	4640      	mov	r0, r8
 8008d7e:	f7ff fedd 	bl	8008b3c <WS2812B_setPixelColorDirect>
		j = j + stepsize;
 8008d82:	eb07 0309 	add.w	r3, r7, r9
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	fa0f f983 	sxth.w	r9, r3
		if (j>255)
 8008d8c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8008d90:	dde6      	ble.n	8008d60 <WS2812B_rainbow+0x14>
			j = j - 255;
 8008d92:	3bff      	subs	r3, #255	; 0xff
 8008d94:	fa0f f983 	sxth.w	r9, r3
 8008d98:	e7e5      	b.n	8008d66 <WS2812B_rainbow+0x1a>
			j= j + 255;
 8008d9a:	33ff      	adds	r3, #255	; 0xff
 8008d9c:	fa0f f983 	sxth.w	r9, r3
 8008da0:	e7e1      	b.n	8008d66 <WS2812B_rainbow+0x1a>
	}
}
 8008da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08008da8 <WS2812B_test>:

//Running light pattern
void WS2812B_test(t_stripchannel ch)
{
 8008da8:	b530      	push	{r4, r5, lr}
 8008daa:	b083      	sub	sp, #12
 8008dac:	4605      	mov	r5, r0
	static uint16_t startval = 0;
	WS2812B_rainbow(ch,0, WS2812B_numPixels(ch),startval,10);
 8008dae:	f7ff fed7 	bl	8008b60 <WS2812B_numPixels>
 8008db2:	4c0a      	ldr	r4, [pc, #40]	; (8008ddc <WS2812B_test+0x34>)
 8008db4:	7823      	ldrb	r3, [r4, #0]
 8008db6:	220a      	movs	r2, #10
 8008db8:	9200      	str	r2, [sp, #0]
 8008dba:	b2c2      	uxtb	r2, r0
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f7ff ffc4 	bl	8008d4c <WS2812B_rainbow>

	//Increase Counter
	startval++;
 8008dc4:	8823      	ldrh	r3, [r4, #0]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	8023      	strh	r3, [r4, #0]
	if (startval == 255)
 8008dcc:	2bff      	cmp	r3, #255	; 0xff
 8008dce:	d001      	beq.n	8008dd4 <WS2812B_test+0x2c>
		startval = 0;
}
 8008dd0:	b003      	add	sp, #12
 8008dd2:	bd30      	pop	{r4, r5, pc}
		startval = 0;
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	8022      	strh	r2, [r4, #0]
}
 8008dd8:	e7fa      	b.n	8008dd0 <WS2812B_test+0x28>
 8008dda:	bf00      	nop
 8008ddc:	20000622 	.word	0x20000622

08008de0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008de0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8008de2:	e003      	b.n	8008dec <LoopCopyDataInit>

08008de4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8008de4:	4b0b      	ldr	r3, [pc, #44]	; (8008e14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8008de6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008de8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8008dea:	3104      	adds	r1, #4

08008dec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8008dec:	480a      	ldr	r0, [pc, #40]	; (8008e18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8008dee:	4b0b      	ldr	r3, [pc, #44]	; (8008e1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8008df0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8008df2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8008df4:	d3f6      	bcc.n	8008de4 <CopyDataInit>
  ldr r2, =_sbss
 8008df6:	4a0a      	ldr	r2, [pc, #40]	; (8008e20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8008df8:	e002      	b.n	8008e00 <LoopFillZerobss>

08008dfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8008dfa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8008dfc:	f842 3b04 	str.w	r3, [r2], #4

08008e00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008e00:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8008e02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008e04:	d3f9      	bcc.n	8008dfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008e06:	f7fe fd47 	bl	8007898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e0a:	f000 f821 	bl	8008e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008e0e:	f7fd f84f 	bl	8005eb0 <main>
  bx lr
 8008e12:	4770      	bx	lr
  ldr r3, =_sidata
 8008e14:	0800d290 	.word	0x0800d290
  ldr r0, =_sdata
 8008e18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8008e1c:	20000274 	.word	0x20000274
  ldr r2, =_sbss
 8008e20:	20000278 	.word	0x20000278
  ldr r3, = _ebss
 8008e24:	20000d88 	.word	0x20000d88

08008e28 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008e28:	e7fe      	b.n	8008e28 <CAN1_RX1_IRQHandler>

08008e2a <atoi>:
 8008e2a:	220a      	movs	r2, #10
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	f000 ba13 	b.w	8009258 <strtol>
	...

08008e34 <calloc>:
 8008e34:	4b02      	ldr	r3, [pc, #8]	; (8008e40 <calloc+0xc>)
 8008e36:	460a      	mov	r2, r1
 8008e38:	4601      	mov	r1, r0
 8008e3a:	6818      	ldr	r0, [r3, #0]
 8008e3c:	f000 b84f 	b.w	8008ede <_calloc_r>
 8008e40:	200000a0 	.word	0x200000a0

08008e44 <__errno>:
 8008e44:	4b01      	ldr	r3, [pc, #4]	; (8008e4c <__errno+0x8>)
 8008e46:	6818      	ldr	r0, [r3, #0]
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	200000a0 	.word	0x200000a0

08008e50 <__libc_init_array>:
 8008e50:	b570      	push	{r4, r5, r6, lr}
 8008e52:	2500      	movs	r5, #0
 8008e54:	4e0c      	ldr	r6, [pc, #48]	; (8008e88 <__libc_init_array+0x38>)
 8008e56:	4c0d      	ldr	r4, [pc, #52]	; (8008e8c <__libc_init_array+0x3c>)
 8008e58:	1ba4      	subs	r4, r4, r6
 8008e5a:	10a4      	asrs	r4, r4, #2
 8008e5c:	42a5      	cmp	r5, r4
 8008e5e:	d109      	bne.n	8008e74 <__libc_init_array+0x24>
 8008e60:	f002 fd7a 	bl	800b958 <_init>
 8008e64:	2500      	movs	r5, #0
 8008e66:	4e0a      	ldr	r6, [pc, #40]	; (8008e90 <__libc_init_array+0x40>)
 8008e68:	4c0a      	ldr	r4, [pc, #40]	; (8008e94 <__libc_init_array+0x44>)
 8008e6a:	1ba4      	subs	r4, r4, r6
 8008e6c:	10a4      	asrs	r4, r4, #2
 8008e6e:	42a5      	cmp	r5, r4
 8008e70:	d105      	bne.n	8008e7e <__libc_init_array+0x2e>
 8008e72:	bd70      	pop	{r4, r5, r6, pc}
 8008e74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e78:	4798      	blx	r3
 8008e7a:	3501      	adds	r5, #1
 8008e7c:	e7ee      	b.n	8008e5c <__libc_init_array+0xc>
 8008e7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e82:	4798      	blx	r3
 8008e84:	3501      	adds	r5, #1
 8008e86:	e7f2      	b.n	8008e6e <__libc_init_array+0x1e>
 8008e88:	0800d288 	.word	0x0800d288
 8008e8c:	0800d288 	.word	0x0800d288
 8008e90:	0800d288 	.word	0x0800d288
 8008e94:	0800d28c 	.word	0x0800d28c

08008e98 <malloc>:
 8008e98:	4b02      	ldr	r3, [pc, #8]	; (8008ea4 <malloc+0xc>)
 8008e9a:	4601      	mov	r1, r0
 8008e9c:	6818      	ldr	r0, [r3, #0]
 8008e9e:	f000 b879 	b.w	8008f94 <_malloc_r>
 8008ea2:	bf00      	nop
 8008ea4:	200000a0 	.word	0x200000a0

08008ea8 <free>:
 8008ea8:	4b02      	ldr	r3, [pc, #8]	; (8008eb4 <free+0xc>)
 8008eaa:	4601      	mov	r1, r0
 8008eac:	6818      	ldr	r0, [r3, #0]
 8008eae:	f000 b825 	b.w	8008efc <_free_r>
 8008eb2:	bf00      	nop
 8008eb4:	200000a0 	.word	0x200000a0

08008eb8 <memcpy>:
 8008eb8:	b510      	push	{r4, lr}
 8008eba:	1e43      	subs	r3, r0, #1
 8008ebc:	440a      	add	r2, r1
 8008ebe:	4291      	cmp	r1, r2
 8008ec0:	d100      	bne.n	8008ec4 <memcpy+0xc>
 8008ec2:	bd10      	pop	{r4, pc}
 8008ec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ecc:	e7f7      	b.n	8008ebe <memcpy+0x6>

08008ece <memset>:
 8008ece:	4603      	mov	r3, r0
 8008ed0:	4402      	add	r2, r0
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d100      	bne.n	8008ed8 <memset+0xa>
 8008ed6:	4770      	bx	lr
 8008ed8:	f803 1b01 	strb.w	r1, [r3], #1
 8008edc:	e7f9      	b.n	8008ed2 <memset+0x4>

08008ede <_calloc_r>:
 8008ede:	b538      	push	{r3, r4, r5, lr}
 8008ee0:	fb02 f401 	mul.w	r4, r2, r1
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	f000 f855 	bl	8008f94 <_malloc_r>
 8008eea:	4605      	mov	r5, r0
 8008eec:	b118      	cbz	r0, 8008ef6 <_calloc_r+0x18>
 8008eee:	4622      	mov	r2, r4
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	f7ff ffec 	bl	8008ece <memset>
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	bd38      	pop	{r3, r4, r5, pc}
	...

08008efc <_free_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4605      	mov	r5, r0
 8008f00:	2900      	cmp	r1, #0
 8008f02:	d043      	beq.n	8008f8c <_free_r+0x90>
 8008f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f08:	1f0c      	subs	r4, r1, #4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	bfb8      	it	lt
 8008f0e:	18e4      	addlt	r4, r4, r3
 8008f10:	f000 fa07 	bl	8009322 <__malloc_lock>
 8008f14:	4a1e      	ldr	r2, [pc, #120]	; (8008f90 <_free_r+0x94>)
 8008f16:	6813      	ldr	r3, [r2, #0]
 8008f18:	4610      	mov	r0, r2
 8008f1a:	b933      	cbnz	r3, 8008f2a <_free_r+0x2e>
 8008f1c:	6063      	str	r3, [r4, #4]
 8008f1e:	6014      	str	r4, [r2, #0]
 8008f20:	4628      	mov	r0, r5
 8008f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f26:	f000 b9fd 	b.w	8009324 <__malloc_unlock>
 8008f2a:	42a3      	cmp	r3, r4
 8008f2c:	d90b      	bls.n	8008f46 <_free_r+0x4a>
 8008f2e:	6821      	ldr	r1, [r4, #0]
 8008f30:	1862      	adds	r2, r4, r1
 8008f32:	4293      	cmp	r3, r2
 8008f34:	bf01      	itttt	eq
 8008f36:	681a      	ldreq	r2, [r3, #0]
 8008f38:	685b      	ldreq	r3, [r3, #4]
 8008f3a:	1852      	addeq	r2, r2, r1
 8008f3c:	6022      	streq	r2, [r4, #0]
 8008f3e:	6063      	str	r3, [r4, #4]
 8008f40:	6004      	str	r4, [r0, #0]
 8008f42:	e7ed      	b.n	8008f20 <_free_r+0x24>
 8008f44:	4613      	mov	r3, r2
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	b10a      	cbz	r2, 8008f4e <_free_r+0x52>
 8008f4a:	42a2      	cmp	r2, r4
 8008f4c:	d9fa      	bls.n	8008f44 <_free_r+0x48>
 8008f4e:	6819      	ldr	r1, [r3, #0]
 8008f50:	1858      	adds	r0, r3, r1
 8008f52:	42a0      	cmp	r0, r4
 8008f54:	d10b      	bne.n	8008f6e <_free_r+0x72>
 8008f56:	6820      	ldr	r0, [r4, #0]
 8008f58:	4401      	add	r1, r0
 8008f5a:	1858      	adds	r0, r3, r1
 8008f5c:	4282      	cmp	r2, r0
 8008f5e:	6019      	str	r1, [r3, #0]
 8008f60:	d1de      	bne.n	8008f20 <_free_r+0x24>
 8008f62:	6810      	ldr	r0, [r2, #0]
 8008f64:	6852      	ldr	r2, [r2, #4]
 8008f66:	4401      	add	r1, r0
 8008f68:	6019      	str	r1, [r3, #0]
 8008f6a:	605a      	str	r2, [r3, #4]
 8008f6c:	e7d8      	b.n	8008f20 <_free_r+0x24>
 8008f6e:	d902      	bls.n	8008f76 <_free_r+0x7a>
 8008f70:	230c      	movs	r3, #12
 8008f72:	602b      	str	r3, [r5, #0]
 8008f74:	e7d4      	b.n	8008f20 <_free_r+0x24>
 8008f76:	6820      	ldr	r0, [r4, #0]
 8008f78:	1821      	adds	r1, r4, r0
 8008f7a:	428a      	cmp	r2, r1
 8008f7c:	bf01      	itttt	eq
 8008f7e:	6811      	ldreq	r1, [r2, #0]
 8008f80:	6852      	ldreq	r2, [r2, #4]
 8008f82:	1809      	addeq	r1, r1, r0
 8008f84:	6021      	streq	r1, [r4, #0]
 8008f86:	6062      	str	r2, [r4, #4]
 8008f88:	605c      	str	r4, [r3, #4]
 8008f8a:	e7c9      	b.n	8008f20 <_free_r+0x24>
 8008f8c:	bd38      	pop	{r3, r4, r5, pc}
 8008f8e:	bf00      	nop
 8008f90:	20000624 	.word	0x20000624

08008f94 <_malloc_r>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	1ccd      	adds	r5, r1, #3
 8008f98:	f025 0503 	bic.w	r5, r5, #3
 8008f9c:	3508      	adds	r5, #8
 8008f9e:	2d0c      	cmp	r5, #12
 8008fa0:	bf38      	it	cc
 8008fa2:	250c      	movcc	r5, #12
 8008fa4:	2d00      	cmp	r5, #0
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	db01      	blt.n	8008fae <_malloc_r+0x1a>
 8008faa:	42a9      	cmp	r1, r5
 8008fac:	d903      	bls.n	8008fb6 <_malloc_r+0x22>
 8008fae:	230c      	movs	r3, #12
 8008fb0:	6033      	str	r3, [r6, #0]
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	bd70      	pop	{r4, r5, r6, pc}
 8008fb6:	f000 f9b4 	bl	8009322 <__malloc_lock>
 8008fba:	4a21      	ldr	r2, [pc, #132]	; (8009040 <_malloc_r+0xac>)
 8008fbc:	6814      	ldr	r4, [r2, #0]
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	b991      	cbnz	r1, 8008fe8 <_malloc_r+0x54>
 8008fc2:	4c20      	ldr	r4, [pc, #128]	; (8009044 <_malloc_r+0xb0>)
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	b91b      	cbnz	r3, 8008fd0 <_malloc_r+0x3c>
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f000 f83d 	bl	8009048 <_sbrk_r>
 8008fce:	6020      	str	r0, [r4, #0]
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f000 f838 	bl	8009048 <_sbrk_r>
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	d124      	bne.n	8009026 <_malloc_r+0x92>
 8008fdc:	230c      	movs	r3, #12
 8008fde:	4630      	mov	r0, r6
 8008fe0:	6033      	str	r3, [r6, #0]
 8008fe2:	f000 f99f 	bl	8009324 <__malloc_unlock>
 8008fe6:	e7e4      	b.n	8008fb2 <_malloc_r+0x1e>
 8008fe8:	680b      	ldr	r3, [r1, #0]
 8008fea:	1b5b      	subs	r3, r3, r5
 8008fec:	d418      	bmi.n	8009020 <_malloc_r+0x8c>
 8008fee:	2b0b      	cmp	r3, #11
 8008ff0:	d90f      	bls.n	8009012 <_malloc_r+0x7e>
 8008ff2:	600b      	str	r3, [r1, #0]
 8008ff4:	18cc      	adds	r4, r1, r3
 8008ff6:	50cd      	str	r5, [r1, r3]
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f000 f993 	bl	8009324 <__malloc_unlock>
 8008ffe:	f104 000b 	add.w	r0, r4, #11
 8009002:	1d23      	adds	r3, r4, #4
 8009004:	f020 0007 	bic.w	r0, r0, #7
 8009008:	1ac3      	subs	r3, r0, r3
 800900a:	d0d3      	beq.n	8008fb4 <_malloc_r+0x20>
 800900c:	425a      	negs	r2, r3
 800900e:	50e2      	str	r2, [r4, r3]
 8009010:	e7d0      	b.n	8008fb4 <_malloc_r+0x20>
 8009012:	684b      	ldr	r3, [r1, #4]
 8009014:	428c      	cmp	r4, r1
 8009016:	bf16      	itet	ne
 8009018:	6063      	strne	r3, [r4, #4]
 800901a:	6013      	streq	r3, [r2, #0]
 800901c:	460c      	movne	r4, r1
 800901e:	e7eb      	b.n	8008ff8 <_malloc_r+0x64>
 8009020:	460c      	mov	r4, r1
 8009022:	6849      	ldr	r1, [r1, #4]
 8009024:	e7cc      	b.n	8008fc0 <_malloc_r+0x2c>
 8009026:	1cc4      	adds	r4, r0, #3
 8009028:	f024 0403 	bic.w	r4, r4, #3
 800902c:	42a0      	cmp	r0, r4
 800902e:	d005      	beq.n	800903c <_malloc_r+0xa8>
 8009030:	1a21      	subs	r1, r4, r0
 8009032:	4630      	mov	r0, r6
 8009034:	f000 f808 	bl	8009048 <_sbrk_r>
 8009038:	3001      	adds	r0, #1
 800903a:	d0cf      	beq.n	8008fdc <_malloc_r+0x48>
 800903c:	6025      	str	r5, [r4, #0]
 800903e:	e7db      	b.n	8008ff8 <_malloc_r+0x64>
 8009040:	20000624 	.word	0x20000624
 8009044:	20000628 	.word	0x20000628

08009048 <_sbrk_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	2300      	movs	r3, #0
 800904c:	4c05      	ldr	r4, [pc, #20]	; (8009064 <_sbrk_r+0x1c>)
 800904e:	4605      	mov	r5, r0
 8009050:	4608      	mov	r0, r1
 8009052:	6023      	str	r3, [r4, #0]
 8009054:	f7fe fc02 	bl	800785c <_sbrk>
 8009058:	1c43      	adds	r3, r0, #1
 800905a:	d102      	bne.n	8009062 <_sbrk_r+0x1a>
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	b103      	cbz	r3, 8009062 <_sbrk_r+0x1a>
 8009060:	602b      	str	r3, [r5, #0]
 8009062:	bd38      	pop	{r3, r4, r5, pc}
 8009064:	20000d84 	.word	0x20000d84

08009068 <strncmp>:
 8009068:	b510      	push	{r4, lr}
 800906a:	b16a      	cbz	r2, 8009088 <strncmp+0x20>
 800906c:	3901      	subs	r1, #1
 800906e:	1884      	adds	r4, r0, r2
 8009070:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009074:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009078:	4293      	cmp	r3, r2
 800907a:	d103      	bne.n	8009084 <strncmp+0x1c>
 800907c:	42a0      	cmp	r0, r4
 800907e:	d001      	beq.n	8009084 <strncmp+0x1c>
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1f5      	bne.n	8009070 <strncmp+0x8>
 8009084:	1a98      	subs	r0, r3, r2
 8009086:	bd10      	pop	{r4, pc}
 8009088:	4610      	mov	r0, r2
 800908a:	e7fc      	b.n	8009086 <strncmp+0x1e>

0800908c <strncpy>:
 800908c:	b570      	push	{r4, r5, r6, lr}
 800908e:	4604      	mov	r4, r0
 8009090:	3901      	subs	r1, #1
 8009092:	b902      	cbnz	r2, 8009096 <strncpy+0xa>
 8009094:	bd70      	pop	{r4, r5, r6, pc}
 8009096:	4623      	mov	r3, r4
 8009098:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800909c:	1e56      	subs	r6, r2, #1
 800909e:	f803 5b01 	strb.w	r5, [r3], #1
 80090a2:	b92d      	cbnz	r5, 80090b0 <strncpy+0x24>
 80090a4:	4414      	add	r4, r2
 80090a6:	42a3      	cmp	r3, r4
 80090a8:	d0f4      	beq.n	8009094 <strncpy+0x8>
 80090aa:	f803 5b01 	strb.w	r5, [r3], #1
 80090ae:	e7fa      	b.n	80090a6 <strncpy+0x1a>
 80090b0:	461c      	mov	r4, r3
 80090b2:	4632      	mov	r2, r6
 80090b4:	e7ed      	b.n	8009092 <strncpy+0x6>
	...

080090b8 <strtok>:
 80090b8:	4b13      	ldr	r3, [pc, #76]	; (8009108 <strtok+0x50>)
 80090ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090be:	681d      	ldr	r5, [r3, #0]
 80090c0:	4606      	mov	r6, r0
 80090c2:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80090c4:	460f      	mov	r7, r1
 80090c6:	b9b4      	cbnz	r4, 80090f6 <strtok+0x3e>
 80090c8:	2050      	movs	r0, #80	; 0x50
 80090ca:	f7ff fee5 	bl	8008e98 <malloc>
 80090ce:	65a8      	str	r0, [r5, #88]	; 0x58
 80090d0:	e9c0 4400 	strd	r4, r4, [r0]
 80090d4:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80090d8:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80090dc:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80090e0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80090e4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80090e8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80090ec:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80090f0:	6184      	str	r4, [r0, #24]
 80090f2:	7704      	strb	r4, [r0, #28]
 80090f4:	6244      	str	r4, [r0, #36]	; 0x24
 80090f6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80090f8:	4639      	mov	r1, r7
 80090fa:	4630      	mov	r0, r6
 80090fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009100:	2301      	movs	r3, #1
 8009102:	f000 b803 	b.w	800910c <__strtok_r>
 8009106:	bf00      	nop
 8009108:	200000a0 	.word	0x200000a0

0800910c <__strtok_r>:
 800910c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800910e:	b918      	cbnz	r0, 8009118 <__strtok_r+0xc>
 8009110:	6810      	ldr	r0, [r2, #0]
 8009112:	b908      	cbnz	r0, 8009118 <__strtok_r+0xc>
 8009114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009116:	4620      	mov	r0, r4
 8009118:	4604      	mov	r4, r0
 800911a:	460f      	mov	r7, r1
 800911c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009120:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009124:	b91e      	cbnz	r6, 800912e <__strtok_r+0x22>
 8009126:	b96d      	cbnz	r5, 8009144 <__strtok_r+0x38>
 8009128:	6015      	str	r5, [r2, #0]
 800912a:	4628      	mov	r0, r5
 800912c:	e7f2      	b.n	8009114 <__strtok_r+0x8>
 800912e:	42b5      	cmp	r5, r6
 8009130:	d1f6      	bne.n	8009120 <__strtok_r+0x14>
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1ef      	bne.n	8009116 <__strtok_r+0xa>
 8009136:	6014      	str	r4, [r2, #0]
 8009138:	7003      	strb	r3, [r0, #0]
 800913a:	e7eb      	b.n	8009114 <__strtok_r+0x8>
 800913c:	462b      	mov	r3, r5
 800913e:	e00d      	b.n	800915c <__strtok_r+0x50>
 8009140:	b926      	cbnz	r6, 800914c <__strtok_r+0x40>
 8009142:	461c      	mov	r4, r3
 8009144:	4623      	mov	r3, r4
 8009146:	460f      	mov	r7, r1
 8009148:	f813 5b01 	ldrb.w	r5, [r3], #1
 800914c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009150:	42b5      	cmp	r5, r6
 8009152:	d1f5      	bne.n	8009140 <__strtok_r+0x34>
 8009154:	2d00      	cmp	r5, #0
 8009156:	d0f1      	beq.n	800913c <__strtok_r+0x30>
 8009158:	2100      	movs	r1, #0
 800915a:	7021      	strb	r1, [r4, #0]
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	e7d9      	b.n	8009114 <__strtok_r+0x8>

08009160 <_strtol_l.isra.0>:
 8009160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009164:	4680      	mov	r8, r0
 8009166:	4689      	mov	r9, r1
 8009168:	4692      	mov	sl, r2
 800916a:	461e      	mov	r6, r3
 800916c:	460f      	mov	r7, r1
 800916e:	463d      	mov	r5, r7
 8009170:	9808      	ldr	r0, [sp, #32]
 8009172:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009176:	f000 f8bf 	bl	80092f8 <__locale_ctype_ptr_l>
 800917a:	4420      	add	r0, r4
 800917c:	7843      	ldrb	r3, [r0, #1]
 800917e:	f013 0308 	ands.w	r3, r3, #8
 8009182:	d132      	bne.n	80091ea <_strtol_l.isra.0+0x8a>
 8009184:	2c2d      	cmp	r4, #45	; 0x2d
 8009186:	d132      	bne.n	80091ee <_strtol_l.isra.0+0x8e>
 8009188:	2201      	movs	r2, #1
 800918a:	787c      	ldrb	r4, [r7, #1]
 800918c:	1cbd      	adds	r5, r7, #2
 800918e:	2e00      	cmp	r6, #0
 8009190:	d05d      	beq.n	800924e <_strtol_l.isra.0+0xee>
 8009192:	2e10      	cmp	r6, #16
 8009194:	d109      	bne.n	80091aa <_strtol_l.isra.0+0x4a>
 8009196:	2c30      	cmp	r4, #48	; 0x30
 8009198:	d107      	bne.n	80091aa <_strtol_l.isra.0+0x4a>
 800919a:	782b      	ldrb	r3, [r5, #0]
 800919c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091a0:	2b58      	cmp	r3, #88	; 0x58
 80091a2:	d14f      	bne.n	8009244 <_strtol_l.isra.0+0xe4>
 80091a4:	2610      	movs	r6, #16
 80091a6:	786c      	ldrb	r4, [r5, #1]
 80091a8:	3502      	adds	r5, #2
 80091aa:	2a00      	cmp	r2, #0
 80091ac:	bf14      	ite	ne
 80091ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80091b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80091b6:	2700      	movs	r7, #0
 80091b8:	fbb1 fcf6 	udiv	ip, r1, r6
 80091bc:	4638      	mov	r0, r7
 80091be:	fb06 1e1c 	mls	lr, r6, ip, r1
 80091c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80091c6:	2b09      	cmp	r3, #9
 80091c8:	d817      	bhi.n	80091fa <_strtol_l.isra.0+0x9a>
 80091ca:	461c      	mov	r4, r3
 80091cc:	42a6      	cmp	r6, r4
 80091ce:	dd23      	ble.n	8009218 <_strtol_l.isra.0+0xb8>
 80091d0:	1c7b      	adds	r3, r7, #1
 80091d2:	d007      	beq.n	80091e4 <_strtol_l.isra.0+0x84>
 80091d4:	4584      	cmp	ip, r0
 80091d6:	d31c      	bcc.n	8009212 <_strtol_l.isra.0+0xb2>
 80091d8:	d101      	bne.n	80091de <_strtol_l.isra.0+0x7e>
 80091da:	45a6      	cmp	lr, r4
 80091dc:	db19      	blt.n	8009212 <_strtol_l.isra.0+0xb2>
 80091de:	2701      	movs	r7, #1
 80091e0:	fb00 4006 	mla	r0, r0, r6, r4
 80091e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091e8:	e7eb      	b.n	80091c2 <_strtol_l.isra.0+0x62>
 80091ea:	462f      	mov	r7, r5
 80091ec:	e7bf      	b.n	800916e <_strtol_l.isra.0+0xe>
 80091ee:	2c2b      	cmp	r4, #43	; 0x2b
 80091f0:	bf04      	itt	eq
 80091f2:	1cbd      	addeq	r5, r7, #2
 80091f4:	787c      	ldrbeq	r4, [r7, #1]
 80091f6:	461a      	mov	r2, r3
 80091f8:	e7c9      	b.n	800918e <_strtol_l.isra.0+0x2e>
 80091fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80091fe:	2b19      	cmp	r3, #25
 8009200:	d801      	bhi.n	8009206 <_strtol_l.isra.0+0xa6>
 8009202:	3c37      	subs	r4, #55	; 0x37
 8009204:	e7e2      	b.n	80091cc <_strtol_l.isra.0+0x6c>
 8009206:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800920a:	2b19      	cmp	r3, #25
 800920c:	d804      	bhi.n	8009218 <_strtol_l.isra.0+0xb8>
 800920e:	3c57      	subs	r4, #87	; 0x57
 8009210:	e7dc      	b.n	80091cc <_strtol_l.isra.0+0x6c>
 8009212:	f04f 37ff 	mov.w	r7, #4294967295
 8009216:	e7e5      	b.n	80091e4 <_strtol_l.isra.0+0x84>
 8009218:	1c7b      	adds	r3, r7, #1
 800921a:	d108      	bne.n	800922e <_strtol_l.isra.0+0xce>
 800921c:	2322      	movs	r3, #34	; 0x22
 800921e:	4608      	mov	r0, r1
 8009220:	f8c8 3000 	str.w	r3, [r8]
 8009224:	f1ba 0f00 	cmp.w	sl, #0
 8009228:	d107      	bne.n	800923a <_strtol_l.isra.0+0xda>
 800922a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800922e:	b102      	cbz	r2, 8009232 <_strtol_l.isra.0+0xd2>
 8009230:	4240      	negs	r0, r0
 8009232:	f1ba 0f00 	cmp.w	sl, #0
 8009236:	d0f8      	beq.n	800922a <_strtol_l.isra.0+0xca>
 8009238:	b10f      	cbz	r7, 800923e <_strtol_l.isra.0+0xde>
 800923a:	f105 39ff 	add.w	r9, r5, #4294967295
 800923e:	f8ca 9000 	str.w	r9, [sl]
 8009242:	e7f2      	b.n	800922a <_strtol_l.isra.0+0xca>
 8009244:	2430      	movs	r4, #48	; 0x30
 8009246:	2e00      	cmp	r6, #0
 8009248:	d1af      	bne.n	80091aa <_strtol_l.isra.0+0x4a>
 800924a:	2608      	movs	r6, #8
 800924c:	e7ad      	b.n	80091aa <_strtol_l.isra.0+0x4a>
 800924e:	2c30      	cmp	r4, #48	; 0x30
 8009250:	d0a3      	beq.n	800919a <_strtol_l.isra.0+0x3a>
 8009252:	260a      	movs	r6, #10
 8009254:	e7a9      	b.n	80091aa <_strtol_l.isra.0+0x4a>
	...

08009258 <strtol>:
 8009258:	4b08      	ldr	r3, [pc, #32]	; (800927c <strtol+0x24>)
 800925a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800925c:	681c      	ldr	r4, [r3, #0]
 800925e:	4d08      	ldr	r5, [pc, #32]	; (8009280 <strtol+0x28>)
 8009260:	6a23      	ldr	r3, [r4, #32]
 8009262:	2b00      	cmp	r3, #0
 8009264:	bf08      	it	eq
 8009266:	462b      	moveq	r3, r5
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	4613      	mov	r3, r2
 800926c:	460a      	mov	r2, r1
 800926e:	4601      	mov	r1, r0
 8009270:	4620      	mov	r0, r4
 8009272:	f7ff ff75 	bl	8009160 <_strtol_l.isra.0>
 8009276:	b003      	add	sp, #12
 8009278:	bd30      	pop	{r4, r5, pc}
 800927a:	bf00      	nop
 800927c:	200000a0 	.word	0x200000a0
 8009280:	20000104 	.word	0x20000104

08009284 <_vsniprintf_r>:
 8009284:	b530      	push	{r4, r5, lr}
 8009286:	1e14      	subs	r4, r2, #0
 8009288:	4605      	mov	r5, r0
 800928a:	b09b      	sub	sp, #108	; 0x6c
 800928c:	4618      	mov	r0, r3
 800928e:	da05      	bge.n	800929c <_vsniprintf_r+0x18>
 8009290:	238b      	movs	r3, #139	; 0x8b
 8009292:	f04f 30ff 	mov.w	r0, #4294967295
 8009296:	602b      	str	r3, [r5, #0]
 8009298:	b01b      	add	sp, #108	; 0x6c
 800929a:	bd30      	pop	{r4, r5, pc}
 800929c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80092a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80092a4:	bf0c      	ite	eq
 80092a6:	4623      	moveq	r3, r4
 80092a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80092ac:	9302      	str	r3, [sp, #8]
 80092ae:	9305      	str	r3, [sp, #20]
 80092b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092b4:	9100      	str	r1, [sp, #0]
 80092b6:	9104      	str	r1, [sp, #16]
 80092b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80092bc:	4602      	mov	r2, r0
 80092be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80092c0:	4669      	mov	r1, sp
 80092c2:	4628      	mov	r0, r5
 80092c4:	f000 f88a 	bl	80093dc <_svfiprintf_r>
 80092c8:	1c43      	adds	r3, r0, #1
 80092ca:	bfbc      	itt	lt
 80092cc:	238b      	movlt	r3, #139	; 0x8b
 80092ce:	602b      	strlt	r3, [r5, #0]
 80092d0:	2c00      	cmp	r4, #0
 80092d2:	d0e1      	beq.n	8009298 <_vsniprintf_r+0x14>
 80092d4:	2200      	movs	r2, #0
 80092d6:	9b00      	ldr	r3, [sp, #0]
 80092d8:	701a      	strb	r2, [r3, #0]
 80092da:	e7dd      	b.n	8009298 <_vsniprintf_r+0x14>

080092dc <vsniprintf>:
 80092dc:	b507      	push	{r0, r1, r2, lr}
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	4613      	mov	r3, r2
 80092e2:	460a      	mov	r2, r1
 80092e4:	4601      	mov	r1, r0
 80092e6:	4803      	ldr	r0, [pc, #12]	; (80092f4 <vsniprintf+0x18>)
 80092e8:	6800      	ldr	r0, [r0, #0]
 80092ea:	f7ff ffcb 	bl	8009284 <_vsniprintf_r>
 80092ee:	b003      	add	sp, #12
 80092f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80092f4:	200000a0 	.word	0x200000a0

080092f8 <__locale_ctype_ptr_l>:
 80092f8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80092fc:	4770      	bx	lr

080092fe <__ascii_mbtowc>:
 80092fe:	b082      	sub	sp, #8
 8009300:	b901      	cbnz	r1, 8009304 <__ascii_mbtowc+0x6>
 8009302:	a901      	add	r1, sp, #4
 8009304:	b142      	cbz	r2, 8009318 <__ascii_mbtowc+0x1a>
 8009306:	b14b      	cbz	r3, 800931c <__ascii_mbtowc+0x1e>
 8009308:	7813      	ldrb	r3, [r2, #0]
 800930a:	600b      	str	r3, [r1, #0]
 800930c:	7812      	ldrb	r2, [r2, #0]
 800930e:	1c10      	adds	r0, r2, #0
 8009310:	bf18      	it	ne
 8009312:	2001      	movne	r0, #1
 8009314:	b002      	add	sp, #8
 8009316:	4770      	bx	lr
 8009318:	4610      	mov	r0, r2
 800931a:	e7fb      	b.n	8009314 <__ascii_mbtowc+0x16>
 800931c:	f06f 0001 	mvn.w	r0, #1
 8009320:	e7f8      	b.n	8009314 <__ascii_mbtowc+0x16>

08009322 <__malloc_lock>:
 8009322:	4770      	bx	lr

08009324 <__malloc_unlock>:
 8009324:	4770      	bx	lr

08009326 <__ssputs_r>:
 8009326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800932a:	688e      	ldr	r6, [r1, #8]
 800932c:	4682      	mov	sl, r0
 800932e:	429e      	cmp	r6, r3
 8009330:	460c      	mov	r4, r1
 8009332:	4690      	mov	r8, r2
 8009334:	4699      	mov	r9, r3
 8009336:	d837      	bhi.n	80093a8 <__ssputs_r+0x82>
 8009338:	898a      	ldrh	r2, [r1, #12]
 800933a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800933e:	d031      	beq.n	80093a4 <__ssputs_r+0x7e>
 8009340:	2302      	movs	r3, #2
 8009342:	6825      	ldr	r5, [r4, #0]
 8009344:	6909      	ldr	r1, [r1, #16]
 8009346:	1a6f      	subs	r7, r5, r1
 8009348:	6965      	ldr	r5, [r4, #20]
 800934a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800934e:	fb95 f5f3 	sdiv	r5, r5, r3
 8009352:	f109 0301 	add.w	r3, r9, #1
 8009356:	443b      	add	r3, r7
 8009358:	429d      	cmp	r5, r3
 800935a:	bf38      	it	cc
 800935c:	461d      	movcc	r5, r3
 800935e:	0553      	lsls	r3, r2, #21
 8009360:	d530      	bpl.n	80093c4 <__ssputs_r+0x9e>
 8009362:	4629      	mov	r1, r5
 8009364:	f7ff fe16 	bl	8008f94 <_malloc_r>
 8009368:	4606      	mov	r6, r0
 800936a:	b950      	cbnz	r0, 8009382 <__ssputs_r+0x5c>
 800936c:	230c      	movs	r3, #12
 800936e:	f04f 30ff 	mov.w	r0, #4294967295
 8009372:	f8ca 3000 	str.w	r3, [sl]
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800937c:	81a3      	strh	r3, [r4, #12]
 800937e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009382:	463a      	mov	r2, r7
 8009384:	6921      	ldr	r1, [r4, #16]
 8009386:	f7ff fd97 	bl	8008eb8 <memcpy>
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009394:	81a3      	strh	r3, [r4, #12]
 8009396:	6126      	str	r6, [r4, #16]
 8009398:	443e      	add	r6, r7
 800939a:	6026      	str	r6, [r4, #0]
 800939c:	464e      	mov	r6, r9
 800939e:	6165      	str	r5, [r4, #20]
 80093a0:	1bed      	subs	r5, r5, r7
 80093a2:	60a5      	str	r5, [r4, #8]
 80093a4:	454e      	cmp	r6, r9
 80093a6:	d900      	bls.n	80093aa <__ssputs_r+0x84>
 80093a8:	464e      	mov	r6, r9
 80093aa:	4632      	mov	r2, r6
 80093ac:	4641      	mov	r1, r8
 80093ae:	6820      	ldr	r0, [r4, #0]
 80093b0:	f000 faaf 	bl	8009912 <memmove>
 80093b4:	68a3      	ldr	r3, [r4, #8]
 80093b6:	2000      	movs	r0, #0
 80093b8:	1b9b      	subs	r3, r3, r6
 80093ba:	60a3      	str	r3, [r4, #8]
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	441e      	add	r6, r3
 80093c0:	6026      	str	r6, [r4, #0]
 80093c2:	e7dc      	b.n	800937e <__ssputs_r+0x58>
 80093c4:	462a      	mov	r2, r5
 80093c6:	f000 fabd 	bl	8009944 <_realloc_r>
 80093ca:	4606      	mov	r6, r0
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d1e2      	bne.n	8009396 <__ssputs_r+0x70>
 80093d0:	6921      	ldr	r1, [r4, #16]
 80093d2:	4650      	mov	r0, sl
 80093d4:	f7ff fd92 	bl	8008efc <_free_r>
 80093d8:	e7c8      	b.n	800936c <__ssputs_r+0x46>
	...

080093dc <_svfiprintf_r>:
 80093dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e0:	461d      	mov	r5, r3
 80093e2:	898b      	ldrh	r3, [r1, #12]
 80093e4:	b09d      	sub	sp, #116	; 0x74
 80093e6:	061f      	lsls	r7, r3, #24
 80093e8:	4680      	mov	r8, r0
 80093ea:	460c      	mov	r4, r1
 80093ec:	4616      	mov	r6, r2
 80093ee:	d50f      	bpl.n	8009410 <_svfiprintf_r+0x34>
 80093f0:	690b      	ldr	r3, [r1, #16]
 80093f2:	b96b      	cbnz	r3, 8009410 <_svfiprintf_r+0x34>
 80093f4:	2140      	movs	r1, #64	; 0x40
 80093f6:	f7ff fdcd 	bl	8008f94 <_malloc_r>
 80093fa:	6020      	str	r0, [r4, #0]
 80093fc:	6120      	str	r0, [r4, #16]
 80093fe:	b928      	cbnz	r0, 800940c <_svfiprintf_r+0x30>
 8009400:	230c      	movs	r3, #12
 8009402:	f8c8 3000 	str.w	r3, [r8]
 8009406:	f04f 30ff 	mov.w	r0, #4294967295
 800940a:	e0c8      	b.n	800959e <_svfiprintf_r+0x1c2>
 800940c:	2340      	movs	r3, #64	; 0x40
 800940e:	6163      	str	r3, [r4, #20]
 8009410:	2300      	movs	r3, #0
 8009412:	9309      	str	r3, [sp, #36]	; 0x24
 8009414:	2320      	movs	r3, #32
 8009416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800941a:	2330      	movs	r3, #48	; 0x30
 800941c:	f04f 0b01 	mov.w	fp, #1
 8009420:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009424:	9503      	str	r5, [sp, #12]
 8009426:	4637      	mov	r7, r6
 8009428:	463d      	mov	r5, r7
 800942a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800942e:	b10b      	cbz	r3, 8009434 <_svfiprintf_r+0x58>
 8009430:	2b25      	cmp	r3, #37	; 0x25
 8009432:	d13e      	bne.n	80094b2 <_svfiprintf_r+0xd6>
 8009434:	ebb7 0a06 	subs.w	sl, r7, r6
 8009438:	d00b      	beq.n	8009452 <_svfiprintf_r+0x76>
 800943a:	4653      	mov	r3, sl
 800943c:	4632      	mov	r2, r6
 800943e:	4621      	mov	r1, r4
 8009440:	4640      	mov	r0, r8
 8009442:	f7ff ff70 	bl	8009326 <__ssputs_r>
 8009446:	3001      	adds	r0, #1
 8009448:	f000 80a4 	beq.w	8009594 <_svfiprintf_r+0x1b8>
 800944c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800944e:	4453      	add	r3, sl
 8009450:	9309      	str	r3, [sp, #36]	; 0x24
 8009452:	783b      	ldrb	r3, [r7, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 809d 	beq.w	8009594 <_svfiprintf_r+0x1b8>
 800945a:	2300      	movs	r3, #0
 800945c:	f04f 32ff 	mov.w	r2, #4294967295
 8009460:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009464:	9304      	str	r3, [sp, #16]
 8009466:	9307      	str	r3, [sp, #28]
 8009468:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800946c:	931a      	str	r3, [sp, #104]	; 0x68
 800946e:	462f      	mov	r7, r5
 8009470:	2205      	movs	r2, #5
 8009472:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009476:	4850      	ldr	r0, [pc, #320]	; (80095b8 <_svfiprintf_r+0x1dc>)
 8009478:	f000 fa3d 	bl	80098f6 <memchr>
 800947c:	9b04      	ldr	r3, [sp, #16]
 800947e:	b9d0      	cbnz	r0, 80094b6 <_svfiprintf_r+0xda>
 8009480:	06d9      	lsls	r1, r3, #27
 8009482:	bf44      	itt	mi
 8009484:	2220      	movmi	r2, #32
 8009486:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800948a:	071a      	lsls	r2, r3, #28
 800948c:	bf44      	itt	mi
 800948e:	222b      	movmi	r2, #43	; 0x2b
 8009490:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009494:	782a      	ldrb	r2, [r5, #0]
 8009496:	2a2a      	cmp	r2, #42	; 0x2a
 8009498:	d015      	beq.n	80094c6 <_svfiprintf_r+0xea>
 800949a:	462f      	mov	r7, r5
 800949c:	2000      	movs	r0, #0
 800949e:	250a      	movs	r5, #10
 80094a0:	9a07      	ldr	r2, [sp, #28]
 80094a2:	4639      	mov	r1, r7
 80094a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094a8:	3b30      	subs	r3, #48	; 0x30
 80094aa:	2b09      	cmp	r3, #9
 80094ac:	d94d      	bls.n	800954a <_svfiprintf_r+0x16e>
 80094ae:	b1b8      	cbz	r0, 80094e0 <_svfiprintf_r+0x104>
 80094b0:	e00f      	b.n	80094d2 <_svfiprintf_r+0xf6>
 80094b2:	462f      	mov	r7, r5
 80094b4:	e7b8      	b.n	8009428 <_svfiprintf_r+0x4c>
 80094b6:	4a40      	ldr	r2, [pc, #256]	; (80095b8 <_svfiprintf_r+0x1dc>)
 80094b8:	463d      	mov	r5, r7
 80094ba:	1a80      	subs	r0, r0, r2
 80094bc:	fa0b f000 	lsl.w	r0, fp, r0
 80094c0:	4318      	orrs	r0, r3
 80094c2:	9004      	str	r0, [sp, #16]
 80094c4:	e7d3      	b.n	800946e <_svfiprintf_r+0x92>
 80094c6:	9a03      	ldr	r2, [sp, #12]
 80094c8:	1d11      	adds	r1, r2, #4
 80094ca:	6812      	ldr	r2, [r2, #0]
 80094cc:	9103      	str	r1, [sp, #12]
 80094ce:	2a00      	cmp	r2, #0
 80094d0:	db01      	blt.n	80094d6 <_svfiprintf_r+0xfa>
 80094d2:	9207      	str	r2, [sp, #28]
 80094d4:	e004      	b.n	80094e0 <_svfiprintf_r+0x104>
 80094d6:	4252      	negs	r2, r2
 80094d8:	f043 0302 	orr.w	r3, r3, #2
 80094dc:	9207      	str	r2, [sp, #28]
 80094de:	9304      	str	r3, [sp, #16]
 80094e0:	783b      	ldrb	r3, [r7, #0]
 80094e2:	2b2e      	cmp	r3, #46	; 0x2e
 80094e4:	d10c      	bne.n	8009500 <_svfiprintf_r+0x124>
 80094e6:	787b      	ldrb	r3, [r7, #1]
 80094e8:	2b2a      	cmp	r3, #42	; 0x2a
 80094ea:	d133      	bne.n	8009554 <_svfiprintf_r+0x178>
 80094ec:	9b03      	ldr	r3, [sp, #12]
 80094ee:	3702      	adds	r7, #2
 80094f0:	1d1a      	adds	r2, r3, #4
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	9203      	str	r2, [sp, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	bfb8      	it	lt
 80094fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80094fe:	9305      	str	r3, [sp, #20]
 8009500:	4d2e      	ldr	r5, [pc, #184]	; (80095bc <_svfiprintf_r+0x1e0>)
 8009502:	2203      	movs	r2, #3
 8009504:	7839      	ldrb	r1, [r7, #0]
 8009506:	4628      	mov	r0, r5
 8009508:	f000 f9f5 	bl	80098f6 <memchr>
 800950c:	b138      	cbz	r0, 800951e <_svfiprintf_r+0x142>
 800950e:	2340      	movs	r3, #64	; 0x40
 8009510:	1b40      	subs	r0, r0, r5
 8009512:	fa03 f000 	lsl.w	r0, r3, r0
 8009516:	9b04      	ldr	r3, [sp, #16]
 8009518:	3701      	adds	r7, #1
 800951a:	4303      	orrs	r3, r0
 800951c:	9304      	str	r3, [sp, #16]
 800951e:	7839      	ldrb	r1, [r7, #0]
 8009520:	2206      	movs	r2, #6
 8009522:	4827      	ldr	r0, [pc, #156]	; (80095c0 <_svfiprintf_r+0x1e4>)
 8009524:	1c7e      	adds	r6, r7, #1
 8009526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800952a:	f000 f9e4 	bl	80098f6 <memchr>
 800952e:	2800      	cmp	r0, #0
 8009530:	d038      	beq.n	80095a4 <_svfiprintf_r+0x1c8>
 8009532:	4b24      	ldr	r3, [pc, #144]	; (80095c4 <_svfiprintf_r+0x1e8>)
 8009534:	bb13      	cbnz	r3, 800957c <_svfiprintf_r+0x1a0>
 8009536:	9b03      	ldr	r3, [sp, #12]
 8009538:	3307      	adds	r3, #7
 800953a:	f023 0307 	bic.w	r3, r3, #7
 800953e:	3308      	adds	r3, #8
 8009540:	9303      	str	r3, [sp, #12]
 8009542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009544:	444b      	add	r3, r9
 8009546:	9309      	str	r3, [sp, #36]	; 0x24
 8009548:	e76d      	b.n	8009426 <_svfiprintf_r+0x4a>
 800954a:	fb05 3202 	mla	r2, r5, r2, r3
 800954e:	2001      	movs	r0, #1
 8009550:	460f      	mov	r7, r1
 8009552:	e7a6      	b.n	80094a2 <_svfiprintf_r+0xc6>
 8009554:	2300      	movs	r3, #0
 8009556:	250a      	movs	r5, #10
 8009558:	4619      	mov	r1, r3
 800955a:	3701      	adds	r7, #1
 800955c:	9305      	str	r3, [sp, #20]
 800955e:	4638      	mov	r0, r7
 8009560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009564:	3a30      	subs	r2, #48	; 0x30
 8009566:	2a09      	cmp	r2, #9
 8009568:	d903      	bls.n	8009572 <_svfiprintf_r+0x196>
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0c8      	beq.n	8009500 <_svfiprintf_r+0x124>
 800956e:	9105      	str	r1, [sp, #20]
 8009570:	e7c6      	b.n	8009500 <_svfiprintf_r+0x124>
 8009572:	fb05 2101 	mla	r1, r5, r1, r2
 8009576:	2301      	movs	r3, #1
 8009578:	4607      	mov	r7, r0
 800957a:	e7f0      	b.n	800955e <_svfiprintf_r+0x182>
 800957c:	ab03      	add	r3, sp, #12
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	4622      	mov	r2, r4
 8009582:	4b11      	ldr	r3, [pc, #68]	; (80095c8 <_svfiprintf_r+0x1ec>)
 8009584:	a904      	add	r1, sp, #16
 8009586:	4640      	mov	r0, r8
 8009588:	f3af 8000 	nop.w
 800958c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009590:	4681      	mov	r9, r0
 8009592:	d1d6      	bne.n	8009542 <_svfiprintf_r+0x166>
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	065b      	lsls	r3, r3, #25
 8009598:	f53f af35 	bmi.w	8009406 <_svfiprintf_r+0x2a>
 800959c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800959e:	b01d      	add	sp, #116	; 0x74
 80095a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a4:	ab03      	add	r3, sp, #12
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	4622      	mov	r2, r4
 80095aa:	4b07      	ldr	r3, [pc, #28]	; (80095c8 <_svfiprintf_r+0x1ec>)
 80095ac:	a904      	add	r1, sp, #16
 80095ae:	4640      	mov	r0, r8
 80095b0:	f000 f882 	bl	80096b8 <_printf_i>
 80095b4:	e7ea      	b.n	800958c <_svfiprintf_r+0x1b0>
 80095b6:	bf00      	nop
 80095b8:	0800cf32 	.word	0x0800cf32
 80095bc:	0800cf38 	.word	0x0800cf38
 80095c0:	0800cf3c 	.word	0x0800cf3c
 80095c4:	00000000 	.word	0x00000000
 80095c8:	08009327 	.word	0x08009327

080095cc <_printf_common>:
 80095cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d0:	4691      	mov	r9, r2
 80095d2:	461f      	mov	r7, r3
 80095d4:	688a      	ldr	r2, [r1, #8]
 80095d6:	690b      	ldr	r3, [r1, #16]
 80095d8:	4606      	mov	r6, r0
 80095da:	4293      	cmp	r3, r2
 80095dc:	bfb8      	it	lt
 80095de:	4613      	movlt	r3, r2
 80095e0:	f8c9 3000 	str.w	r3, [r9]
 80095e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095e8:	460c      	mov	r4, r1
 80095ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095ee:	b112      	cbz	r2, 80095f6 <_printf_common+0x2a>
 80095f0:	3301      	adds	r3, #1
 80095f2:	f8c9 3000 	str.w	r3, [r9]
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	0699      	lsls	r1, r3, #26
 80095fa:	bf42      	ittt	mi
 80095fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009600:	3302      	addmi	r3, #2
 8009602:	f8c9 3000 	strmi.w	r3, [r9]
 8009606:	6825      	ldr	r5, [r4, #0]
 8009608:	f015 0506 	ands.w	r5, r5, #6
 800960c:	d107      	bne.n	800961e <_printf_common+0x52>
 800960e:	f104 0a19 	add.w	sl, r4, #25
 8009612:	68e3      	ldr	r3, [r4, #12]
 8009614:	f8d9 2000 	ldr.w	r2, [r9]
 8009618:	1a9b      	subs	r3, r3, r2
 800961a:	42ab      	cmp	r3, r5
 800961c:	dc29      	bgt.n	8009672 <_printf_common+0xa6>
 800961e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009622:	6822      	ldr	r2, [r4, #0]
 8009624:	3300      	adds	r3, #0
 8009626:	bf18      	it	ne
 8009628:	2301      	movne	r3, #1
 800962a:	0692      	lsls	r2, r2, #26
 800962c:	d42e      	bmi.n	800968c <_printf_common+0xc0>
 800962e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009632:	4639      	mov	r1, r7
 8009634:	4630      	mov	r0, r6
 8009636:	47c0      	blx	r8
 8009638:	3001      	adds	r0, #1
 800963a:	d021      	beq.n	8009680 <_printf_common+0xb4>
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	68e5      	ldr	r5, [r4, #12]
 8009640:	f003 0306 	and.w	r3, r3, #6
 8009644:	2b04      	cmp	r3, #4
 8009646:	bf18      	it	ne
 8009648:	2500      	movne	r5, #0
 800964a:	f8d9 2000 	ldr.w	r2, [r9]
 800964e:	f04f 0900 	mov.w	r9, #0
 8009652:	bf08      	it	eq
 8009654:	1aad      	subeq	r5, r5, r2
 8009656:	68a3      	ldr	r3, [r4, #8]
 8009658:	6922      	ldr	r2, [r4, #16]
 800965a:	bf08      	it	eq
 800965c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009660:	4293      	cmp	r3, r2
 8009662:	bfc4      	itt	gt
 8009664:	1a9b      	subgt	r3, r3, r2
 8009666:	18ed      	addgt	r5, r5, r3
 8009668:	341a      	adds	r4, #26
 800966a:	454d      	cmp	r5, r9
 800966c:	d11a      	bne.n	80096a4 <_printf_common+0xd8>
 800966e:	2000      	movs	r0, #0
 8009670:	e008      	b.n	8009684 <_printf_common+0xb8>
 8009672:	2301      	movs	r3, #1
 8009674:	4652      	mov	r2, sl
 8009676:	4639      	mov	r1, r7
 8009678:	4630      	mov	r0, r6
 800967a:	47c0      	blx	r8
 800967c:	3001      	adds	r0, #1
 800967e:	d103      	bne.n	8009688 <_printf_common+0xbc>
 8009680:	f04f 30ff 	mov.w	r0, #4294967295
 8009684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009688:	3501      	adds	r5, #1
 800968a:	e7c2      	b.n	8009612 <_printf_common+0x46>
 800968c:	2030      	movs	r0, #48	; 0x30
 800968e:	18e1      	adds	r1, r4, r3
 8009690:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009694:	1c5a      	adds	r2, r3, #1
 8009696:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800969a:	4422      	add	r2, r4
 800969c:	3302      	adds	r3, #2
 800969e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096a2:	e7c4      	b.n	800962e <_printf_common+0x62>
 80096a4:	2301      	movs	r3, #1
 80096a6:	4622      	mov	r2, r4
 80096a8:	4639      	mov	r1, r7
 80096aa:	4630      	mov	r0, r6
 80096ac:	47c0      	blx	r8
 80096ae:	3001      	adds	r0, #1
 80096b0:	d0e6      	beq.n	8009680 <_printf_common+0xb4>
 80096b2:	f109 0901 	add.w	r9, r9, #1
 80096b6:	e7d8      	b.n	800966a <_printf_common+0x9e>

080096b8 <_printf_i>:
 80096b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80096c0:	460c      	mov	r4, r1
 80096c2:	7e09      	ldrb	r1, [r1, #24]
 80096c4:	b085      	sub	sp, #20
 80096c6:	296e      	cmp	r1, #110	; 0x6e
 80096c8:	4617      	mov	r7, r2
 80096ca:	4606      	mov	r6, r0
 80096cc:	4698      	mov	r8, r3
 80096ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096d0:	f000 80b3 	beq.w	800983a <_printf_i+0x182>
 80096d4:	d822      	bhi.n	800971c <_printf_i+0x64>
 80096d6:	2963      	cmp	r1, #99	; 0x63
 80096d8:	d036      	beq.n	8009748 <_printf_i+0x90>
 80096da:	d80a      	bhi.n	80096f2 <_printf_i+0x3a>
 80096dc:	2900      	cmp	r1, #0
 80096de:	f000 80b9 	beq.w	8009854 <_printf_i+0x19c>
 80096e2:	2958      	cmp	r1, #88	; 0x58
 80096e4:	f000 8083 	beq.w	80097ee <_printf_i+0x136>
 80096e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80096f0:	e032      	b.n	8009758 <_printf_i+0xa0>
 80096f2:	2964      	cmp	r1, #100	; 0x64
 80096f4:	d001      	beq.n	80096fa <_printf_i+0x42>
 80096f6:	2969      	cmp	r1, #105	; 0x69
 80096f8:	d1f6      	bne.n	80096e8 <_printf_i+0x30>
 80096fa:	6820      	ldr	r0, [r4, #0]
 80096fc:	6813      	ldr	r3, [r2, #0]
 80096fe:	0605      	lsls	r5, r0, #24
 8009700:	f103 0104 	add.w	r1, r3, #4
 8009704:	d52a      	bpl.n	800975c <_printf_i+0xa4>
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6011      	str	r1, [r2, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	da03      	bge.n	8009716 <_printf_i+0x5e>
 800970e:	222d      	movs	r2, #45	; 0x2d
 8009710:	425b      	negs	r3, r3
 8009712:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009716:	486f      	ldr	r0, [pc, #444]	; (80098d4 <_printf_i+0x21c>)
 8009718:	220a      	movs	r2, #10
 800971a:	e039      	b.n	8009790 <_printf_i+0xd8>
 800971c:	2973      	cmp	r1, #115	; 0x73
 800971e:	f000 809d 	beq.w	800985c <_printf_i+0x1a4>
 8009722:	d808      	bhi.n	8009736 <_printf_i+0x7e>
 8009724:	296f      	cmp	r1, #111	; 0x6f
 8009726:	d020      	beq.n	800976a <_printf_i+0xb2>
 8009728:	2970      	cmp	r1, #112	; 0x70
 800972a:	d1dd      	bne.n	80096e8 <_printf_i+0x30>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	f043 0320 	orr.w	r3, r3, #32
 8009732:	6023      	str	r3, [r4, #0]
 8009734:	e003      	b.n	800973e <_printf_i+0x86>
 8009736:	2975      	cmp	r1, #117	; 0x75
 8009738:	d017      	beq.n	800976a <_printf_i+0xb2>
 800973a:	2978      	cmp	r1, #120	; 0x78
 800973c:	d1d4      	bne.n	80096e8 <_printf_i+0x30>
 800973e:	2378      	movs	r3, #120	; 0x78
 8009740:	4865      	ldr	r0, [pc, #404]	; (80098d8 <_printf_i+0x220>)
 8009742:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009746:	e055      	b.n	80097f4 <_printf_i+0x13c>
 8009748:	6813      	ldr	r3, [r2, #0]
 800974a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800974e:	1d19      	adds	r1, r3, #4
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	6011      	str	r1, [r2, #0]
 8009754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009758:	2301      	movs	r3, #1
 800975a:	e08c      	b.n	8009876 <_printf_i+0x1be>
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009762:	6011      	str	r1, [r2, #0]
 8009764:	bf18      	it	ne
 8009766:	b21b      	sxthne	r3, r3
 8009768:	e7cf      	b.n	800970a <_printf_i+0x52>
 800976a:	6813      	ldr	r3, [r2, #0]
 800976c:	6825      	ldr	r5, [r4, #0]
 800976e:	1d18      	adds	r0, r3, #4
 8009770:	6010      	str	r0, [r2, #0]
 8009772:	0628      	lsls	r0, r5, #24
 8009774:	d501      	bpl.n	800977a <_printf_i+0xc2>
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	e002      	b.n	8009780 <_printf_i+0xc8>
 800977a:	0668      	lsls	r0, r5, #25
 800977c:	d5fb      	bpl.n	8009776 <_printf_i+0xbe>
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	296f      	cmp	r1, #111	; 0x6f
 8009782:	bf14      	ite	ne
 8009784:	220a      	movne	r2, #10
 8009786:	2208      	moveq	r2, #8
 8009788:	4852      	ldr	r0, [pc, #328]	; (80098d4 <_printf_i+0x21c>)
 800978a:	2100      	movs	r1, #0
 800978c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009790:	6865      	ldr	r5, [r4, #4]
 8009792:	2d00      	cmp	r5, #0
 8009794:	60a5      	str	r5, [r4, #8]
 8009796:	f2c0 8095 	blt.w	80098c4 <_printf_i+0x20c>
 800979a:	6821      	ldr	r1, [r4, #0]
 800979c:	f021 0104 	bic.w	r1, r1, #4
 80097a0:	6021      	str	r1, [r4, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d13d      	bne.n	8009822 <_printf_i+0x16a>
 80097a6:	2d00      	cmp	r5, #0
 80097a8:	f040 808e 	bne.w	80098c8 <_printf_i+0x210>
 80097ac:	4665      	mov	r5, ip
 80097ae:	2a08      	cmp	r2, #8
 80097b0:	d10b      	bne.n	80097ca <_printf_i+0x112>
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	07db      	lsls	r3, r3, #31
 80097b6:	d508      	bpl.n	80097ca <_printf_i+0x112>
 80097b8:	6923      	ldr	r3, [r4, #16]
 80097ba:	6862      	ldr	r2, [r4, #4]
 80097bc:	429a      	cmp	r2, r3
 80097be:	bfde      	ittt	le
 80097c0:	2330      	movle	r3, #48	; 0x30
 80097c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097ca:	ebac 0305 	sub.w	r3, ip, r5
 80097ce:	6123      	str	r3, [r4, #16]
 80097d0:	f8cd 8000 	str.w	r8, [sp]
 80097d4:	463b      	mov	r3, r7
 80097d6:	aa03      	add	r2, sp, #12
 80097d8:	4621      	mov	r1, r4
 80097da:	4630      	mov	r0, r6
 80097dc:	f7ff fef6 	bl	80095cc <_printf_common>
 80097e0:	3001      	adds	r0, #1
 80097e2:	d14d      	bne.n	8009880 <_printf_i+0x1c8>
 80097e4:	f04f 30ff 	mov.w	r0, #4294967295
 80097e8:	b005      	add	sp, #20
 80097ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097ee:	4839      	ldr	r0, [pc, #228]	; (80098d4 <_printf_i+0x21c>)
 80097f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80097f4:	6813      	ldr	r3, [r2, #0]
 80097f6:	6821      	ldr	r1, [r4, #0]
 80097f8:	1d1d      	adds	r5, r3, #4
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6015      	str	r5, [r2, #0]
 80097fe:	060a      	lsls	r2, r1, #24
 8009800:	d50b      	bpl.n	800981a <_printf_i+0x162>
 8009802:	07ca      	lsls	r2, r1, #31
 8009804:	bf44      	itt	mi
 8009806:	f041 0120 	orrmi.w	r1, r1, #32
 800980a:	6021      	strmi	r1, [r4, #0]
 800980c:	b91b      	cbnz	r3, 8009816 <_printf_i+0x15e>
 800980e:	6822      	ldr	r2, [r4, #0]
 8009810:	f022 0220 	bic.w	r2, r2, #32
 8009814:	6022      	str	r2, [r4, #0]
 8009816:	2210      	movs	r2, #16
 8009818:	e7b7      	b.n	800978a <_printf_i+0xd2>
 800981a:	064d      	lsls	r5, r1, #25
 800981c:	bf48      	it	mi
 800981e:	b29b      	uxthmi	r3, r3
 8009820:	e7ef      	b.n	8009802 <_printf_i+0x14a>
 8009822:	4665      	mov	r5, ip
 8009824:	fbb3 f1f2 	udiv	r1, r3, r2
 8009828:	fb02 3311 	mls	r3, r2, r1, r3
 800982c:	5cc3      	ldrb	r3, [r0, r3]
 800982e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009832:	460b      	mov	r3, r1
 8009834:	2900      	cmp	r1, #0
 8009836:	d1f5      	bne.n	8009824 <_printf_i+0x16c>
 8009838:	e7b9      	b.n	80097ae <_printf_i+0xf6>
 800983a:	6813      	ldr	r3, [r2, #0]
 800983c:	6825      	ldr	r5, [r4, #0]
 800983e:	1d18      	adds	r0, r3, #4
 8009840:	6961      	ldr	r1, [r4, #20]
 8009842:	6010      	str	r0, [r2, #0]
 8009844:	0628      	lsls	r0, r5, #24
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	d501      	bpl.n	800984e <_printf_i+0x196>
 800984a:	6019      	str	r1, [r3, #0]
 800984c:	e002      	b.n	8009854 <_printf_i+0x19c>
 800984e:	066a      	lsls	r2, r5, #25
 8009850:	d5fb      	bpl.n	800984a <_printf_i+0x192>
 8009852:	8019      	strh	r1, [r3, #0]
 8009854:	2300      	movs	r3, #0
 8009856:	4665      	mov	r5, ip
 8009858:	6123      	str	r3, [r4, #16]
 800985a:	e7b9      	b.n	80097d0 <_printf_i+0x118>
 800985c:	6813      	ldr	r3, [r2, #0]
 800985e:	1d19      	adds	r1, r3, #4
 8009860:	6011      	str	r1, [r2, #0]
 8009862:	681d      	ldr	r5, [r3, #0]
 8009864:	6862      	ldr	r2, [r4, #4]
 8009866:	2100      	movs	r1, #0
 8009868:	4628      	mov	r0, r5
 800986a:	f000 f844 	bl	80098f6 <memchr>
 800986e:	b108      	cbz	r0, 8009874 <_printf_i+0x1bc>
 8009870:	1b40      	subs	r0, r0, r5
 8009872:	6060      	str	r0, [r4, #4]
 8009874:	6863      	ldr	r3, [r4, #4]
 8009876:	6123      	str	r3, [r4, #16]
 8009878:	2300      	movs	r3, #0
 800987a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800987e:	e7a7      	b.n	80097d0 <_printf_i+0x118>
 8009880:	6923      	ldr	r3, [r4, #16]
 8009882:	462a      	mov	r2, r5
 8009884:	4639      	mov	r1, r7
 8009886:	4630      	mov	r0, r6
 8009888:	47c0      	blx	r8
 800988a:	3001      	adds	r0, #1
 800988c:	d0aa      	beq.n	80097e4 <_printf_i+0x12c>
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	079b      	lsls	r3, r3, #30
 8009892:	d413      	bmi.n	80098bc <_printf_i+0x204>
 8009894:	68e0      	ldr	r0, [r4, #12]
 8009896:	9b03      	ldr	r3, [sp, #12]
 8009898:	4298      	cmp	r0, r3
 800989a:	bfb8      	it	lt
 800989c:	4618      	movlt	r0, r3
 800989e:	e7a3      	b.n	80097e8 <_printf_i+0x130>
 80098a0:	2301      	movs	r3, #1
 80098a2:	464a      	mov	r2, r9
 80098a4:	4639      	mov	r1, r7
 80098a6:	4630      	mov	r0, r6
 80098a8:	47c0      	blx	r8
 80098aa:	3001      	adds	r0, #1
 80098ac:	d09a      	beq.n	80097e4 <_printf_i+0x12c>
 80098ae:	3501      	adds	r5, #1
 80098b0:	68e3      	ldr	r3, [r4, #12]
 80098b2:	9a03      	ldr	r2, [sp, #12]
 80098b4:	1a9b      	subs	r3, r3, r2
 80098b6:	42ab      	cmp	r3, r5
 80098b8:	dcf2      	bgt.n	80098a0 <_printf_i+0x1e8>
 80098ba:	e7eb      	b.n	8009894 <_printf_i+0x1dc>
 80098bc:	2500      	movs	r5, #0
 80098be:	f104 0919 	add.w	r9, r4, #25
 80098c2:	e7f5      	b.n	80098b0 <_printf_i+0x1f8>
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1ac      	bne.n	8009822 <_printf_i+0x16a>
 80098c8:	7803      	ldrb	r3, [r0, #0]
 80098ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098d2:	e76c      	b.n	80097ae <_printf_i+0xf6>
 80098d4:	0800cf43 	.word	0x0800cf43
 80098d8:	0800cf54 	.word	0x0800cf54

080098dc <__ascii_wctomb>:
 80098dc:	b149      	cbz	r1, 80098f2 <__ascii_wctomb+0x16>
 80098de:	2aff      	cmp	r2, #255	; 0xff
 80098e0:	bf8b      	itete	hi
 80098e2:	238a      	movhi	r3, #138	; 0x8a
 80098e4:	700a      	strbls	r2, [r1, #0]
 80098e6:	6003      	strhi	r3, [r0, #0]
 80098e8:	2001      	movls	r0, #1
 80098ea:	bf88      	it	hi
 80098ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80098f0:	4770      	bx	lr
 80098f2:	4608      	mov	r0, r1
 80098f4:	4770      	bx	lr

080098f6 <memchr>:
 80098f6:	b510      	push	{r4, lr}
 80098f8:	b2c9      	uxtb	r1, r1
 80098fa:	4402      	add	r2, r0
 80098fc:	4290      	cmp	r0, r2
 80098fe:	4603      	mov	r3, r0
 8009900:	d101      	bne.n	8009906 <memchr+0x10>
 8009902:	2300      	movs	r3, #0
 8009904:	e003      	b.n	800990e <memchr+0x18>
 8009906:	781c      	ldrb	r4, [r3, #0]
 8009908:	3001      	adds	r0, #1
 800990a:	428c      	cmp	r4, r1
 800990c:	d1f6      	bne.n	80098fc <memchr+0x6>
 800990e:	4618      	mov	r0, r3
 8009910:	bd10      	pop	{r4, pc}

08009912 <memmove>:
 8009912:	4288      	cmp	r0, r1
 8009914:	b510      	push	{r4, lr}
 8009916:	eb01 0302 	add.w	r3, r1, r2
 800991a:	d807      	bhi.n	800992c <memmove+0x1a>
 800991c:	1e42      	subs	r2, r0, #1
 800991e:	4299      	cmp	r1, r3
 8009920:	d00a      	beq.n	8009938 <memmove+0x26>
 8009922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009926:	f802 4f01 	strb.w	r4, [r2, #1]!
 800992a:	e7f8      	b.n	800991e <memmove+0xc>
 800992c:	4283      	cmp	r3, r0
 800992e:	d9f5      	bls.n	800991c <memmove+0xa>
 8009930:	1881      	adds	r1, r0, r2
 8009932:	1ad2      	subs	r2, r2, r3
 8009934:	42d3      	cmn	r3, r2
 8009936:	d100      	bne.n	800993a <memmove+0x28>
 8009938:	bd10      	pop	{r4, pc}
 800993a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800993e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009942:	e7f7      	b.n	8009934 <memmove+0x22>

08009944 <_realloc_r>:
 8009944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009946:	4607      	mov	r7, r0
 8009948:	4614      	mov	r4, r2
 800994a:	460e      	mov	r6, r1
 800994c:	b921      	cbnz	r1, 8009958 <_realloc_r+0x14>
 800994e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009952:	4611      	mov	r1, r2
 8009954:	f7ff bb1e 	b.w	8008f94 <_malloc_r>
 8009958:	b922      	cbnz	r2, 8009964 <_realloc_r+0x20>
 800995a:	f7ff facf 	bl	8008efc <_free_r>
 800995e:	4625      	mov	r5, r4
 8009960:	4628      	mov	r0, r5
 8009962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009964:	f000 f814 	bl	8009990 <_malloc_usable_size_r>
 8009968:	42a0      	cmp	r0, r4
 800996a:	d20f      	bcs.n	800998c <_realloc_r+0x48>
 800996c:	4621      	mov	r1, r4
 800996e:	4638      	mov	r0, r7
 8009970:	f7ff fb10 	bl	8008f94 <_malloc_r>
 8009974:	4605      	mov	r5, r0
 8009976:	2800      	cmp	r0, #0
 8009978:	d0f2      	beq.n	8009960 <_realloc_r+0x1c>
 800997a:	4631      	mov	r1, r6
 800997c:	4622      	mov	r2, r4
 800997e:	f7ff fa9b 	bl	8008eb8 <memcpy>
 8009982:	4631      	mov	r1, r6
 8009984:	4638      	mov	r0, r7
 8009986:	f7ff fab9 	bl	8008efc <_free_r>
 800998a:	e7e9      	b.n	8009960 <_realloc_r+0x1c>
 800998c:	4635      	mov	r5, r6
 800998e:	e7e7      	b.n	8009960 <_realloc_r+0x1c>

08009990 <_malloc_usable_size_r>:
 8009990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009994:	1f18      	subs	r0, r3, #4
 8009996:	2b00      	cmp	r3, #0
 8009998:	bfbc      	itt	lt
 800999a:	580b      	ldrlt	r3, [r1, r0]
 800999c:	18c0      	addlt	r0, r0, r3
 800999e:	4770      	bx	lr

080099a0 <round>:
 80099a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a2:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80099a6:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 80099aa:	2c13      	cmp	r4, #19
 80099ac:	4606      	mov	r6, r0
 80099ae:	460d      	mov	r5, r1
 80099b0:	460b      	mov	r3, r1
 80099b2:	468c      	mov	ip, r1
 80099b4:	4602      	mov	r2, r0
 80099b6:	dc17      	bgt.n	80099e8 <round+0x48>
 80099b8:	2c00      	cmp	r4, #0
 80099ba:	da09      	bge.n	80099d0 <round+0x30>
 80099bc:	3401      	adds	r4, #1
 80099be:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80099c2:	d103      	bne.n	80099cc <round+0x2c>
 80099c4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80099c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80099cc:	2200      	movs	r2, #0
 80099ce:	e028      	b.n	8009a22 <round+0x82>
 80099d0:	4915      	ldr	r1, [pc, #84]	; (8009a28 <round+0x88>)
 80099d2:	4121      	asrs	r1, r4
 80099d4:	420d      	tst	r5, r1
 80099d6:	d100      	bne.n	80099da <round+0x3a>
 80099d8:	b178      	cbz	r0, 80099fa <round+0x5a>
 80099da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80099de:	4123      	asrs	r3, r4
 80099e0:	4463      	add	r3, ip
 80099e2:	ea23 0301 	bic.w	r3, r3, r1
 80099e6:	e7f1      	b.n	80099cc <round+0x2c>
 80099e8:	2c33      	cmp	r4, #51	; 0x33
 80099ea:	dd09      	ble.n	8009a00 <round+0x60>
 80099ec:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80099f0:	d103      	bne.n	80099fa <round+0x5a>
 80099f2:	f7f6 fbbb 	bl	800016c <__adddf3>
 80099f6:	4606      	mov	r6, r0
 80099f8:	460d      	mov	r5, r1
 80099fa:	4630      	mov	r0, r6
 80099fc:	4629      	mov	r1, r5
 80099fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295
 8009a04:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009a08:	40f8      	lsrs	r0, r7
 8009a0a:	4206      	tst	r6, r0
 8009a0c:	d0f5      	beq.n	80099fa <round+0x5a>
 8009a0e:	2101      	movs	r1, #1
 8009a10:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009a14:	fa01 f404 	lsl.w	r4, r1, r4
 8009a18:	1932      	adds	r2, r6, r4
 8009a1a:	bf28      	it	cs
 8009a1c:	185b      	addcs	r3, r3, r1
 8009a1e:	ea22 0200 	bic.w	r2, r2, r0
 8009a22:	4619      	mov	r1, r3
 8009a24:	4610      	mov	r0, r2
 8009a26:	e7e6      	b.n	80099f6 <round+0x56>
 8009a28:	000fffff 	.word	0x000fffff

08009a2c <sin>:
 8009a2c:	b530      	push	{r4, r5, lr}
 8009a2e:	4a1a      	ldr	r2, [pc, #104]	; (8009a98 <sin+0x6c>)
 8009a30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a34:	4293      	cmp	r3, r2
 8009a36:	b087      	sub	sp, #28
 8009a38:	dc06      	bgt.n	8009a48 <sin+0x1c>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	2300      	movs	r3, #0
 8009a42:	f001 fd39 	bl	800b4b8 <__kernel_sin>
 8009a46:	e006      	b.n	8009a56 <sin+0x2a>
 8009a48:	4a14      	ldr	r2, [pc, #80]	; (8009a9c <sin+0x70>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	dd05      	ble.n	8009a5a <sin+0x2e>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	f7f6 fb89 	bl	8000168 <__aeabi_dsub>
 8009a56:	b007      	add	sp, #28
 8009a58:	bd30      	pop	{r4, r5, pc}
 8009a5a:	aa02      	add	r2, sp, #8
 8009a5c:	f000 fe88 	bl	800a770 <__ieee754_rem_pio2>
 8009a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a64:	f000 0403 	and.w	r4, r0, #3
 8009a68:	2c01      	cmp	r4, #1
 8009a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a6e:	d005      	beq.n	8009a7c <sin+0x50>
 8009a70:	2c02      	cmp	r4, #2
 8009a72:	d006      	beq.n	8009a82 <sin+0x56>
 8009a74:	b964      	cbnz	r4, 8009a90 <sin+0x64>
 8009a76:	2401      	movs	r4, #1
 8009a78:	9400      	str	r4, [sp, #0]
 8009a7a:	e7e2      	b.n	8009a42 <sin+0x16>
 8009a7c:	f001 f914 	bl	800aca8 <__kernel_cos>
 8009a80:	e7e9      	b.n	8009a56 <sin+0x2a>
 8009a82:	2401      	movs	r4, #1
 8009a84:	9400      	str	r4, [sp, #0]
 8009a86:	f001 fd17 	bl	800b4b8 <__kernel_sin>
 8009a8a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009a8e:	e7e2      	b.n	8009a56 <sin+0x2a>
 8009a90:	f001 f90a 	bl	800aca8 <__kernel_cos>
 8009a94:	e7f9      	b.n	8009a8a <sin+0x5e>
 8009a96:	bf00      	nop
 8009a98:	3fe921fb 	.word	0x3fe921fb
 8009a9c:	7fefffff 	.word	0x7fefffff

08009aa0 <pow>:
 8009aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	b08f      	sub	sp, #60	; 0x3c
 8009aa6:	461d      	mov	r5, r3
 8009aa8:	4680      	mov	r8, r0
 8009aaa:	4689      	mov	r9, r1
 8009aac:	4614      	mov	r4, r2
 8009aae:	f000 f953 	bl	8009d58 <__ieee754_pow>
 8009ab2:	4fa1      	ldr	r7, [pc, #644]	; (8009d38 <pow+0x298>)
 8009ab4:	e9cd 0100 	strd	r0, r1, [sp]
 8009ab8:	f997 3000 	ldrsb.w	r3, [r7]
 8009abc:	463e      	mov	r6, r7
 8009abe:	9302      	str	r3, [sp, #8]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	d05f      	beq.n	8009b84 <pow+0xe4>
 8009ac4:	4622      	mov	r2, r4
 8009ac6:	462b      	mov	r3, r5
 8009ac8:	4620      	mov	r0, r4
 8009aca:	4629      	mov	r1, r5
 8009acc:	f7f6 ff9e 	bl	8000a0c <__aeabi_dcmpun>
 8009ad0:	4682      	mov	sl, r0
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d156      	bne.n	8009b84 <pow+0xe4>
 8009ad6:	4642      	mov	r2, r8
 8009ad8:	464b      	mov	r3, r9
 8009ada:	4640      	mov	r0, r8
 8009adc:	4649      	mov	r1, r9
 8009ade:	f7f6 ff95 	bl	8000a0c <__aeabi_dcmpun>
 8009ae2:	9003      	str	r0, [sp, #12]
 8009ae4:	b1e8      	cbz	r0, 8009b22 <pow+0x82>
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4620      	mov	r0, r4
 8009aec:	4629      	mov	r1, r5
 8009aee:	f7f6 ff5b 	bl	80009a8 <__aeabi_dcmpeq>
 8009af2:	2800      	cmp	r0, #0
 8009af4:	d046      	beq.n	8009b84 <pow+0xe4>
 8009af6:	2301      	movs	r3, #1
 8009af8:	2200      	movs	r2, #0
 8009afa:	9304      	str	r3, [sp, #16]
 8009afc:	4b8f      	ldr	r3, [pc, #572]	; (8009d3c <pow+0x29c>)
 8009afe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009b02:	9305      	str	r3, [sp, #20]
 8009b04:	4b8e      	ldr	r3, [pc, #568]	; (8009d40 <pow+0x2a0>)
 8009b06:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009b0a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009b0e:	9b02      	ldr	r3, [sp, #8]
 8009b10:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d031      	beq.n	8009b7c <pow+0xdc>
 8009b18:	a804      	add	r0, sp, #16
 8009b1a:	f001 fe11 	bl	800b740 <matherr>
 8009b1e:	bb38      	cbnz	r0, 8009b70 <pow+0xd0>
 8009b20:	e058      	b.n	8009bd4 <pow+0x134>
 8009b22:	f04f 0a00 	mov.w	sl, #0
 8009b26:	f04f 0b00 	mov.w	fp, #0
 8009b2a:	4652      	mov	r2, sl
 8009b2c:	465b      	mov	r3, fp
 8009b2e:	4640      	mov	r0, r8
 8009b30:	4649      	mov	r1, r9
 8009b32:	f7f6 ff39 	bl	80009a8 <__aeabi_dcmpeq>
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d051      	beq.n	8009bde <pow+0x13e>
 8009b3a:	4652      	mov	r2, sl
 8009b3c:	465b      	mov	r3, fp
 8009b3e:	4620      	mov	r0, r4
 8009b40:	4629      	mov	r1, r5
 8009b42:	f7f6 ff31 	bl	80009a8 <__aeabi_dcmpeq>
 8009b46:	4606      	mov	r6, r0
 8009b48:	b308      	cbz	r0, 8009b8e <pow+0xee>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	9304      	str	r3, [sp, #16]
 8009b4e:	4b7b      	ldr	r3, [pc, #492]	; (8009d3c <pow+0x29c>)
 8009b50:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009b54:	9305      	str	r3, [sp, #20]
 8009b56:	9b03      	ldr	r3, [sp, #12]
 8009b58:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009b5c:	930c      	str	r3, [sp, #48]	; 0x30
 8009b5e:	9b02      	ldr	r3, [sp, #8]
 8009b60:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d0d7      	beq.n	8009b18 <pow+0x78>
 8009b68:	2200      	movs	r2, #0
 8009b6a:	4b75      	ldr	r3, [pc, #468]	; (8009d40 <pow+0x2a0>)
 8009b6c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b72:	b11b      	cbz	r3, 8009b7c <pow+0xdc>
 8009b74:	f7ff f966 	bl	8008e44 <__errno>
 8009b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b7a:	6003      	str	r3, [r0, #0]
 8009b7c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8009b80:	e9cd 3400 	strd	r3, r4, [sp]
 8009b84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b88:	b00f      	add	sp, #60	; 0x3c
 8009b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8e:	4620      	mov	r0, r4
 8009b90:	4629      	mov	r1, r5
 8009b92:	f001 fd4b 	bl	800b62c <finite>
 8009b96:	2800      	cmp	r0, #0
 8009b98:	d0f4      	beq.n	8009b84 <pow+0xe4>
 8009b9a:	4652      	mov	r2, sl
 8009b9c:	465b      	mov	r3, fp
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	f7f6 ff0b 	bl	80009bc <__aeabi_dcmplt>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d0ec      	beq.n	8009b84 <pow+0xe4>
 8009baa:	2301      	movs	r3, #1
 8009bac:	9304      	str	r3, [sp, #16]
 8009bae:	4b63      	ldr	r3, [pc, #396]	; (8009d3c <pow+0x29c>)
 8009bb0:	960c      	str	r6, [sp, #48]	; 0x30
 8009bb2:	9305      	str	r3, [sp, #20]
 8009bb4:	f997 3000 	ldrsb.w	r3, [r7]
 8009bb8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009bbc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009bc0:	b913      	cbnz	r3, 8009bc8 <pow+0x128>
 8009bc2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009bc6:	e7a7      	b.n	8009b18 <pow+0x78>
 8009bc8:	2000      	movs	r0, #0
 8009bca:	495e      	ldr	r1, [pc, #376]	; (8009d44 <pow+0x2a4>)
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009bd2:	d1a1      	bne.n	8009b18 <pow+0x78>
 8009bd4:	f7ff f936 	bl	8008e44 <__errno>
 8009bd8:	2321      	movs	r3, #33	; 0x21
 8009bda:	6003      	str	r3, [r0, #0]
 8009bdc:	e7c8      	b.n	8009b70 <pow+0xd0>
 8009bde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009be2:	f001 fd23 	bl	800b62c <finite>
 8009be6:	9002      	str	r0, [sp, #8]
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d177      	bne.n	8009cdc <pow+0x23c>
 8009bec:	4640      	mov	r0, r8
 8009bee:	4649      	mov	r1, r9
 8009bf0:	f001 fd1c 	bl	800b62c <finite>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d071      	beq.n	8009cdc <pow+0x23c>
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	f001 fd16 	bl	800b62c <finite>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d06b      	beq.n	8009cdc <pow+0x23c>
 8009c04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	f7f6 fefe 	bl	8000a0c <__aeabi_dcmpun>
 8009c10:	f997 7000 	ldrsb.w	r7, [r7]
 8009c14:	4b49      	ldr	r3, [pc, #292]	; (8009d3c <pow+0x29c>)
 8009c16:	b1a0      	cbz	r0, 8009c42 <pow+0x1a2>
 8009c18:	2201      	movs	r2, #1
 8009c1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c1e:	9b02      	ldr	r3, [sp, #8]
 8009c20:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009c24:	930c      	str	r3, [sp, #48]	; 0x30
 8009c26:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009c2a:	2f00      	cmp	r7, #0
 8009c2c:	d0c9      	beq.n	8009bc2 <pow+0x122>
 8009c2e:	4652      	mov	r2, sl
 8009c30:	465b      	mov	r3, fp
 8009c32:	4650      	mov	r0, sl
 8009c34:	4659      	mov	r1, fp
 8009c36:	f7f6 fd79 	bl	800072c <__aeabi_ddiv>
 8009c3a:	2f02      	cmp	r7, #2
 8009c3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009c40:	e7c7      	b.n	8009bd2 <pow+0x132>
 8009c42:	2203      	movs	r2, #3
 8009c44:	900c      	str	r0, [sp, #48]	; 0x30
 8009c46:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	4629      	mov	r1, r5
 8009c4e:	2200      	movs	r2, #0
 8009c50:	4b3d      	ldr	r3, [pc, #244]	; (8009d48 <pow+0x2a8>)
 8009c52:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009c56:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009c5a:	f7f6 fc3d 	bl	80004d8 <__aeabi_dmul>
 8009c5e:	4604      	mov	r4, r0
 8009c60:	460d      	mov	r5, r1
 8009c62:	bb17      	cbnz	r7, 8009caa <pow+0x20a>
 8009c64:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009c68:	4b38      	ldr	r3, [pc, #224]	; (8009d4c <pow+0x2ac>)
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009c70:	4649      	mov	r1, r9
 8009c72:	4652      	mov	r2, sl
 8009c74:	465b      	mov	r3, fp
 8009c76:	f7f6 fea1 	bl	80009bc <__aeabi_dcmplt>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	d054      	beq.n	8009d28 <pow+0x288>
 8009c7e:	4620      	mov	r0, r4
 8009c80:	4629      	mov	r1, r5
 8009c82:	f001 fd65 	bl	800b750 <rint>
 8009c86:	4622      	mov	r2, r4
 8009c88:	462b      	mov	r3, r5
 8009c8a:	f7f6 fe8d 	bl	80009a8 <__aeabi_dcmpeq>
 8009c8e:	b920      	cbnz	r0, 8009c9a <pow+0x1fa>
 8009c90:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009c94:	4b2e      	ldr	r3, [pc, #184]	; (8009d50 <pow+0x2b0>)
 8009c96:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009c9a:	f996 3000 	ldrsb.w	r3, [r6]
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d142      	bne.n	8009d28 <pow+0x288>
 8009ca2:	f7ff f8cf 	bl	8008e44 <__errno>
 8009ca6:	2322      	movs	r3, #34	; 0x22
 8009ca8:	e797      	b.n	8009bda <pow+0x13a>
 8009caa:	2200      	movs	r2, #0
 8009cac:	4b29      	ldr	r3, [pc, #164]	; (8009d54 <pow+0x2b4>)
 8009cae:	4640      	mov	r0, r8
 8009cb0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009cb4:	4649      	mov	r1, r9
 8009cb6:	4652      	mov	r2, sl
 8009cb8:	465b      	mov	r3, fp
 8009cba:	f7f6 fe7f 	bl	80009bc <__aeabi_dcmplt>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d0eb      	beq.n	8009c9a <pow+0x1fa>
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	f001 fd43 	bl	800b750 <rint>
 8009cca:	4622      	mov	r2, r4
 8009ccc:	462b      	mov	r3, r5
 8009cce:	f7f6 fe6b 	bl	80009a8 <__aeabi_dcmpeq>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d1e1      	bne.n	8009c9a <pow+0x1fa>
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	4b1a      	ldr	r3, [pc, #104]	; (8009d44 <pow+0x2a4>)
 8009cda:	e7dc      	b.n	8009c96 <pow+0x1f6>
 8009cdc:	2200      	movs	r2, #0
 8009cde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f7f6 fe60 	bl	80009a8 <__aeabi_dcmpeq>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	f43f af4b 	beq.w	8009b84 <pow+0xe4>
 8009cee:	4640      	mov	r0, r8
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	f001 fc9b 	bl	800b62c <finite>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	f43f af44 	beq.w	8009b84 <pow+0xe4>
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	4629      	mov	r1, r5
 8009d00:	f001 fc94 	bl	800b62c <finite>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	f43f af3d 	beq.w	8009b84 <pow+0xe4>
 8009d0a:	2304      	movs	r3, #4
 8009d0c:	9304      	str	r3, [sp, #16]
 8009d0e:	4b0b      	ldr	r3, [pc, #44]	; (8009d3c <pow+0x29c>)
 8009d10:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009d14:	9305      	str	r3, [sp, #20]
 8009d16:	2300      	movs	r3, #0
 8009d18:	2400      	movs	r4, #0
 8009d1a:	930c      	str	r3, [sp, #48]	; 0x30
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009d22:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8009d26:	e7b8      	b.n	8009c9a <pow+0x1fa>
 8009d28:	a804      	add	r0, sp, #16
 8009d2a:	f001 fd09 	bl	800b740 <matherr>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	f47f af1e 	bne.w	8009b70 <pow+0xd0>
 8009d34:	e7b5      	b.n	8009ca2 <pow+0x202>
 8009d36:	bf00      	nop
 8009d38:	20000270 	.word	0x20000270
 8009d3c:	0800d066 	.word	0x0800d066
 8009d40:	3ff00000 	.word	0x3ff00000
 8009d44:	fff00000 	.word	0xfff00000
 8009d48:	3fe00000 	.word	0x3fe00000
 8009d4c:	47efffff 	.word	0x47efffff
 8009d50:	c7efffff 	.word	0xc7efffff
 8009d54:	7ff00000 	.word	0x7ff00000

08009d58 <__ieee754_pow>:
 8009d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	b091      	sub	sp, #68	; 0x44
 8009d5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d62:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8009d66:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009d6a:	ea55 0302 	orrs.w	r3, r5, r2
 8009d6e:	4607      	mov	r7, r0
 8009d70:	4688      	mov	r8, r1
 8009d72:	f000 84b7 	beq.w	800a6e4 <__ieee754_pow+0x98c>
 8009d76:	4b80      	ldr	r3, [pc, #512]	; (8009f78 <__ieee754_pow+0x220>)
 8009d78:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8009d7c:	429c      	cmp	r4, r3
 8009d7e:	4689      	mov	r9, r1
 8009d80:	4682      	mov	sl, r0
 8009d82:	dc09      	bgt.n	8009d98 <__ieee754_pow+0x40>
 8009d84:	d103      	bne.n	8009d8e <__ieee754_pow+0x36>
 8009d86:	b938      	cbnz	r0, 8009d98 <__ieee754_pow+0x40>
 8009d88:	42a5      	cmp	r5, r4
 8009d8a:	dc0d      	bgt.n	8009da8 <__ieee754_pow+0x50>
 8009d8c:	e001      	b.n	8009d92 <__ieee754_pow+0x3a>
 8009d8e:	429d      	cmp	r5, r3
 8009d90:	dc02      	bgt.n	8009d98 <__ieee754_pow+0x40>
 8009d92:	429d      	cmp	r5, r3
 8009d94:	d10e      	bne.n	8009db4 <__ieee754_pow+0x5c>
 8009d96:	b16a      	cbz	r2, 8009db4 <__ieee754_pow+0x5c>
 8009d98:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009d9c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009da0:	ea54 030a 	orrs.w	r3, r4, sl
 8009da4:	f000 849e 	beq.w	800a6e4 <__ieee754_pow+0x98c>
 8009da8:	4874      	ldr	r0, [pc, #464]	; (8009f7c <__ieee754_pow+0x224>)
 8009daa:	b011      	add	sp, #68	; 0x44
 8009dac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db0:	f001 bcc8 	b.w	800b744 <nan>
 8009db4:	f1b9 0f00 	cmp.w	r9, #0
 8009db8:	da53      	bge.n	8009e62 <__ieee754_pow+0x10a>
 8009dba:	4b71      	ldr	r3, [pc, #452]	; (8009f80 <__ieee754_pow+0x228>)
 8009dbc:	429d      	cmp	r5, r3
 8009dbe:	dc4e      	bgt.n	8009e5e <__ieee754_pow+0x106>
 8009dc0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009dc4:	429d      	cmp	r5, r3
 8009dc6:	dd4c      	ble.n	8009e62 <__ieee754_pow+0x10a>
 8009dc8:	152b      	asrs	r3, r5, #20
 8009dca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009dce:	2b14      	cmp	r3, #20
 8009dd0:	dd28      	ble.n	8009e24 <__ieee754_pow+0xcc>
 8009dd2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009dd6:	fa22 f103 	lsr.w	r1, r2, r3
 8009dda:	fa01 f303 	lsl.w	r3, r1, r3
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d13f      	bne.n	8009e62 <__ieee754_pow+0x10a>
 8009de2:	f001 0101 	and.w	r1, r1, #1
 8009de6:	f1c1 0302 	rsb	r3, r1, #2
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	2a00      	cmp	r2, #0
 8009dee:	d15c      	bne.n	8009eaa <__ieee754_pow+0x152>
 8009df0:	4b61      	ldr	r3, [pc, #388]	; (8009f78 <__ieee754_pow+0x220>)
 8009df2:	429d      	cmp	r5, r3
 8009df4:	d126      	bne.n	8009e44 <__ieee754_pow+0xec>
 8009df6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009dfa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009dfe:	ea53 030a 	orrs.w	r3, r3, sl
 8009e02:	f000 846f 	beq.w	800a6e4 <__ieee754_pow+0x98c>
 8009e06:	4b5f      	ldr	r3, [pc, #380]	; (8009f84 <__ieee754_pow+0x22c>)
 8009e08:	429c      	cmp	r4, r3
 8009e0a:	dd2c      	ble.n	8009e66 <__ieee754_pow+0x10e>
 8009e0c:	2e00      	cmp	r6, #0
 8009e0e:	f280 846f 	bge.w	800a6f0 <__ieee754_pow+0x998>
 8009e12:	f04f 0b00 	mov.w	fp, #0
 8009e16:	f04f 0c00 	mov.w	ip, #0
 8009e1a:	4658      	mov	r0, fp
 8009e1c:	4661      	mov	r1, ip
 8009e1e:	b011      	add	sp, #68	; 0x44
 8009e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e24:	2a00      	cmp	r2, #0
 8009e26:	d13e      	bne.n	8009ea6 <__ieee754_pow+0x14e>
 8009e28:	f1c3 0314 	rsb	r3, r3, #20
 8009e2c:	fa45 f103 	asr.w	r1, r5, r3
 8009e30:	fa01 f303 	lsl.w	r3, r1, r3
 8009e34:	42ab      	cmp	r3, r5
 8009e36:	f040 8463 	bne.w	800a700 <__ieee754_pow+0x9a8>
 8009e3a:	f001 0101 	and.w	r1, r1, #1
 8009e3e:	f1c1 0302 	rsb	r3, r1, #2
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	4b50      	ldr	r3, [pc, #320]	; (8009f88 <__ieee754_pow+0x230>)
 8009e46:	429d      	cmp	r5, r3
 8009e48:	d114      	bne.n	8009e74 <__ieee754_pow+0x11c>
 8009e4a:	2e00      	cmp	r6, #0
 8009e4c:	f280 8454 	bge.w	800a6f8 <__ieee754_pow+0x9a0>
 8009e50:	463a      	mov	r2, r7
 8009e52:	4643      	mov	r3, r8
 8009e54:	2000      	movs	r0, #0
 8009e56:	494c      	ldr	r1, [pc, #304]	; (8009f88 <__ieee754_pow+0x230>)
 8009e58:	f7f6 fc68 	bl	800072c <__aeabi_ddiv>
 8009e5c:	e013      	b.n	8009e86 <__ieee754_pow+0x12e>
 8009e5e:	2302      	movs	r3, #2
 8009e60:	e7c3      	b.n	8009dea <__ieee754_pow+0x92>
 8009e62:	2300      	movs	r3, #0
 8009e64:	e7c1      	b.n	8009dea <__ieee754_pow+0x92>
 8009e66:	2e00      	cmp	r6, #0
 8009e68:	dad3      	bge.n	8009e12 <__ieee754_pow+0xba>
 8009e6a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009e6e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009e72:	e7d2      	b.n	8009e1a <__ieee754_pow+0xc2>
 8009e74:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8009e78:	d108      	bne.n	8009e8c <__ieee754_pow+0x134>
 8009e7a:	463a      	mov	r2, r7
 8009e7c:	4643      	mov	r3, r8
 8009e7e:	4638      	mov	r0, r7
 8009e80:	4641      	mov	r1, r8
 8009e82:	f7f6 fb29 	bl	80004d8 <__aeabi_dmul>
 8009e86:	4683      	mov	fp, r0
 8009e88:	468c      	mov	ip, r1
 8009e8a:	e7c6      	b.n	8009e1a <__ieee754_pow+0xc2>
 8009e8c:	4b3f      	ldr	r3, [pc, #252]	; (8009f8c <__ieee754_pow+0x234>)
 8009e8e:	429e      	cmp	r6, r3
 8009e90:	d10b      	bne.n	8009eaa <__ieee754_pow+0x152>
 8009e92:	f1b9 0f00 	cmp.w	r9, #0
 8009e96:	db08      	blt.n	8009eaa <__ieee754_pow+0x152>
 8009e98:	4638      	mov	r0, r7
 8009e9a:	4641      	mov	r1, r8
 8009e9c:	b011      	add	sp, #68	; 0x44
 8009e9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea2:	f000 be55 	b.w	800ab50 <__ieee754_sqrt>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	4638      	mov	r0, r7
 8009eac:	4641      	mov	r1, r8
 8009eae:	f001 fbb9 	bl	800b624 <fabs>
 8009eb2:	4683      	mov	fp, r0
 8009eb4:	468c      	mov	ip, r1
 8009eb6:	f1ba 0f00 	cmp.w	sl, #0
 8009eba:	d12b      	bne.n	8009f14 <__ieee754_pow+0x1bc>
 8009ebc:	b124      	cbz	r4, 8009ec8 <__ieee754_pow+0x170>
 8009ebe:	4b32      	ldr	r3, [pc, #200]	; (8009f88 <__ieee754_pow+0x230>)
 8009ec0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d125      	bne.n	8009f14 <__ieee754_pow+0x1bc>
 8009ec8:	2e00      	cmp	r6, #0
 8009eca:	da07      	bge.n	8009edc <__ieee754_pow+0x184>
 8009ecc:	465a      	mov	r2, fp
 8009ece:	4663      	mov	r3, ip
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	492d      	ldr	r1, [pc, #180]	; (8009f88 <__ieee754_pow+0x230>)
 8009ed4:	f7f6 fc2a 	bl	800072c <__aeabi_ddiv>
 8009ed8:	4683      	mov	fp, r0
 8009eda:	468c      	mov	ip, r1
 8009edc:	f1b9 0f00 	cmp.w	r9, #0
 8009ee0:	da9b      	bge.n	8009e1a <__ieee754_pow+0xc2>
 8009ee2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009ee6:	9b00      	ldr	r3, [sp, #0]
 8009ee8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009eec:	4323      	orrs	r3, r4
 8009eee:	d108      	bne.n	8009f02 <__ieee754_pow+0x1aa>
 8009ef0:	465a      	mov	r2, fp
 8009ef2:	4663      	mov	r3, ip
 8009ef4:	4658      	mov	r0, fp
 8009ef6:	4661      	mov	r1, ip
 8009ef8:	f7f6 f936 	bl	8000168 <__aeabi_dsub>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	e7aa      	b.n	8009e58 <__ieee754_pow+0x100>
 8009f02:	9b00      	ldr	r3, [sp, #0]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d188      	bne.n	8009e1a <__ieee754_pow+0xc2>
 8009f08:	4658      	mov	r0, fp
 8009f0a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009f0e:	4683      	mov	fp, r0
 8009f10:	469c      	mov	ip, r3
 8009f12:	e782      	b.n	8009e1a <__ieee754_pow+0xc2>
 8009f14:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8009f18:	f109 33ff 	add.w	r3, r9, #4294967295
 8009f1c:	930d      	str	r3, [sp, #52]	; 0x34
 8009f1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f20:	9b00      	ldr	r3, [sp, #0]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	d104      	bne.n	8009f30 <__ieee754_pow+0x1d8>
 8009f26:	463a      	mov	r2, r7
 8009f28:	4643      	mov	r3, r8
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	4641      	mov	r1, r8
 8009f2e:	e7e3      	b.n	8009ef8 <__ieee754_pow+0x1a0>
 8009f30:	4b17      	ldr	r3, [pc, #92]	; (8009f90 <__ieee754_pow+0x238>)
 8009f32:	429d      	cmp	r5, r3
 8009f34:	f340 80fe 	ble.w	800a134 <__ieee754_pow+0x3dc>
 8009f38:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009f3c:	429d      	cmp	r5, r3
 8009f3e:	dd0b      	ble.n	8009f58 <__ieee754_pow+0x200>
 8009f40:	4b10      	ldr	r3, [pc, #64]	; (8009f84 <__ieee754_pow+0x22c>)
 8009f42:	429c      	cmp	r4, r3
 8009f44:	dc0e      	bgt.n	8009f64 <__ieee754_pow+0x20c>
 8009f46:	2e00      	cmp	r6, #0
 8009f48:	f6bf af63 	bge.w	8009e12 <__ieee754_pow+0xba>
 8009f4c:	a308      	add	r3, pc, #32	; (adr r3, 8009f70 <__ieee754_pow+0x218>)
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	4610      	mov	r0, r2
 8009f54:	4619      	mov	r1, r3
 8009f56:	e794      	b.n	8009e82 <__ieee754_pow+0x12a>
 8009f58:	4b0e      	ldr	r3, [pc, #56]	; (8009f94 <__ieee754_pow+0x23c>)
 8009f5a:	429c      	cmp	r4, r3
 8009f5c:	ddf3      	ble.n	8009f46 <__ieee754_pow+0x1ee>
 8009f5e:	4b0a      	ldr	r3, [pc, #40]	; (8009f88 <__ieee754_pow+0x230>)
 8009f60:	429c      	cmp	r4, r3
 8009f62:	dd19      	ble.n	8009f98 <__ieee754_pow+0x240>
 8009f64:	2e00      	cmp	r6, #0
 8009f66:	dcf1      	bgt.n	8009f4c <__ieee754_pow+0x1f4>
 8009f68:	e753      	b.n	8009e12 <__ieee754_pow+0xba>
 8009f6a:	bf00      	nop
 8009f6c:	f3af 8000 	nop.w
 8009f70:	8800759c 	.word	0x8800759c
 8009f74:	7e37e43c 	.word	0x7e37e43c
 8009f78:	7ff00000 	.word	0x7ff00000
 8009f7c:	0800cf37 	.word	0x0800cf37
 8009f80:	433fffff 	.word	0x433fffff
 8009f84:	3fefffff 	.word	0x3fefffff
 8009f88:	3ff00000 	.word	0x3ff00000
 8009f8c:	3fe00000 	.word	0x3fe00000
 8009f90:	41e00000 	.word	0x41e00000
 8009f94:	3feffffe 	.word	0x3feffffe
 8009f98:	4661      	mov	r1, ip
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	4b60      	ldr	r3, [pc, #384]	; (800a120 <__ieee754_pow+0x3c8>)
 8009f9e:	4658      	mov	r0, fp
 8009fa0:	f7f6 f8e2 	bl	8000168 <__aeabi_dsub>
 8009fa4:	a354      	add	r3, pc, #336	; (adr r3, 800a0f8 <__ieee754_pow+0x3a0>)
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	4604      	mov	r4, r0
 8009fac:	460d      	mov	r5, r1
 8009fae:	f7f6 fa93 	bl	80004d8 <__aeabi_dmul>
 8009fb2:	a353      	add	r3, pc, #332	; (adr r3, 800a100 <__ieee754_pow+0x3a8>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	4606      	mov	r6, r0
 8009fba:	460f      	mov	r7, r1
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	f7f6 fa8a 	bl	80004d8 <__aeabi_dmul>
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	4682      	mov	sl, r0
 8009fc8:	468b      	mov	fp, r1
 8009fca:	4b56      	ldr	r3, [pc, #344]	; (800a124 <__ieee754_pow+0x3cc>)
 8009fcc:	4620      	mov	r0, r4
 8009fce:	4629      	mov	r1, r5
 8009fd0:	f7f6 fa82 	bl	80004d8 <__aeabi_dmul>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	a14b      	add	r1, pc, #300	; (adr r1, 800a108 <__ieee754_pow+0x3b0>)
 8009fda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fde:	f7f6 f8c3 	bl	8000168 <__aeabi_dsub>
 8009fe2:	4622      	mov	r2, r4
 8009fe4:	462b      	mov	r3, r5
 8009fe6:	f7f6 fa77 	bl	80004d8 <__aeabi_dmul>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	2000      	movs	r0, #0
 8009ff0:	494d      	ldr	r1, [pc, #308]	; (800a128 <__ieee754_pow+0x3d0>)
 8009ff2:	f7f6 f8b9 	bl	8000168 <__aeabi_dsub>
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	462b      	mov	r3, r5
 8009ffa:	4680      	mov	r8, r0
 8009ffc:	4689      	mov	r9, r1
 8009ffe:	4620      	mov	r0, r4
 800a000:	4629      	mov	r1, r5
 800a002:	f7f6 fa69 	bl	80004d8 <__aeabi_dmul>
 800a006:	4602      	mov	r2, r0
 800a008:	460b      	mov	r3, r1
 800a00a:	4640      	mov	r0, r8
 800a00c:	4649      	mov	r1, r9
 800a00e:	f7f6 fa63 	bl	80004d8 <__aeabi_dmul>
 800a012:	a33f      	add	r3, pc, #252	; (adr r3, 800a110 <__ieee754_pow+0x3b8>)
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	f7f6 fa5e 	bl	80004d8 <__aeabi_dmul>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4650      	mov	r0, sl
 800a022:	4659      	mov	r1, fp
 800a024:	f7f6 f8a0 	bl	8000168 <__aeabi_dsub>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	4604      	mov	r4, r0
 800a02e:	460d      	mov	r5, r1
 800a030:	4630      	mov	r0, r6
 800a032:	4639      	mov	r1, r7
 800a034:	f7f6 f89a 	bl	800016c <__adddf3>
 800a038:	2000      	movs	r0, #0
 800a03a:	468b      	mov	fp, r1
 800a03c:	4682      	mov	sl, r0
 800a03e:	4632      	mov	r2, r6
 800a040:	463b      	mov	r3, r7
 800a042:	f7f6 f891 	bl	8000168 <__aeabi_dsub>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	4620      	mov	r0, r4
 800a04c:	4629      	mov	r1, r5
 800a04e:	f7f6 f88b 	bl	8000168 <__aeabi_dsub>
 800a052:	9b00      	ldr	r3, [sp, #0]
 800a054:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a056:	3b01      	subs	r3, #1
 800a058:	4313      	orrs	r3, r2
 800a05a:	f04f 0300 	mov.w	r3, #0
 800a05e:	bf0c      	ite	eq
 800a060:	4c32      	ldreq	r4, [pc, #200]	; (800a12c <__ieee754_pow+0x3d4>)
 800a062:	4c2f      	ldrne	r4, [pc, #188]	; (800a120 <__ieee754_pow+0x3c8>)
 800a064:	4606      	mov	r6, r0
 800a066:	e9cd 3400 	strd	r3, r4, [sp]
 800a06a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a06e:	2400      	movs	r4, #0
 800a070:	460f      	mov	r7, r1
 800a072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a076:	4622      	mov	r2, r4
 800a078:	462b      	mov	r3, r5
 800a07a:	f7f6 f875 	bl	8000168 <__aeabi_dsub>
 800a07e:	4652      	mov	r2, sl
 800a080:	465b      	mov	r3, fp
 800a082:	f7f6 fa29 	bl	80004d8 <__aeabi_dmul>
 800a086:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a08a:	4680      	mov	r8, r0
 800a08c:	4689      	mov	r9, r1
 800a08e:	4630      	mov	r0, r6
 800a090:	4639      	mov	r1, r7
 800a092:	f7f6 fa21 	bl	80004d8 <__aeabi_dmul>
 800a096:	4602      	mov	r2, r0
 800a098:	460b      	mov	r3, r1
 800a09a:	4640      	mov	r0, r8
 800a09c:	4649      	mov	r1, r9
 800a09e:	f7f6 f865 	bl	800016c <__adddf3>
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	462b      	mov	r3, r5
 800a0a6:	4680      	mov	r8, r0
 800a0a8:	4689      	mov	r9, r1
 800a0aa:	4650      	mov	r0, sl
 800a0ac:	4659      	mov	r1, fp
 800a0ae:	f7f6 fa13 	bl	80004d8 <__aeabi_dmul>
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	460d      	mov	r5, r1
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	4649      	mov	r1, r9
 800a0bc:	4640      	mov	r0, r8
 800a0be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a0c2:	f7f6 f853 	bl	800016c <__adddf3>
 800a0c6:	4b1a      	ldr	r3, [pc, #104]	; (800a130 <__ieee754_pow+0x3d8>)
 800a0c8:	4682      	mov	sl, r0
 800a0ca:	4299      	cmp	r1, r3
 800a0cc:	460f      	mov	r7, r1
 800a0ce:	460e      	mov	r6, r1
 800a0d0:	f340 82e1 	ble.w	800a696 <__ieee754_pow+0x93e>
 800a0d4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a0d8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a0dc:	4303      	orrs	r3, r0
 800a0de:	f000 81db 	beq.w	800a498 <__ieee754_pow+0x740>
 800a0e2:	a30d      	add	r3, pc, #52	; (adr r3, 800a118 <__ieee754_pow+0x3c0>)
 800a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0ec:	f7f6 f9f4 	bl	80004d8 <__aeabi_dmul>
 800a0f0:	a309      	add	r3, pc, #36	; (adr r3, 800a118 <__ieee754_pow+0x3c0>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	e6c4      	b.n	8009e82 <__ieee754_pow+0x12a>
 800a0f8:	60000000 	.word	0x60000000
 800a0fc:	3ff71547 	.word	0x3ff71547
 800a100:	f85ddf44 	.word	0xf85ddf44
 800a104:	3e54ae0b 	.word	0x3e54ae0b
 800a108:	55555555 	.word	0x55555555
 800a10c:	3fd55555 	.word	0x3fd55555
 800a110:	652b82fe 	.word	0x652b82fe
 800a114:	3ff71547 	.word	0x3ff71547
 800a118:	8800759c 	.word	0x8800759c
 800a11c:	7e37e43c 	.word	0x7e37e43c
 800a120:	3ff00000 	.word	0x3ff00000
 800a124:	3fd00000 	.word	0x3fd00000
 800a128:	3fe00000 	.word	0x3fe00000
 800a12c:	bff00000 	.word	0xbff00000
 800a130:	408fffff 	.word	0x408fffff
 800a134:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a138:	f04f 0200 	mov.w	r2, #0
 800a13c:	da08      	bge.n	800a150 <__ieee754_pow+0x3f8>
 800a13e:	4658      	mov	r0, fp
 800a140:	4bcd      	ldr	r3, [pc, #820]	; (800a478 <__ieee754_pow+0x720>)
 800a142:	4661      	mov	r1, ip
 800a144:	f7f6 f9c8 	bl	80004d8 <__aeabi_dmul>
 800a148:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a14c:	4683      	mov	fp, r0
 800a14e:	460c      	mov	r4, r1
 800a150:	1523      	asrs	r3, r4, #20
 800a152:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a156:	4413      	add	r3, r2
 800a158:	930c      	str	r3, [sp, #48]	; 0x30
 800a15a:	4bc8      	ldr	r3, [pc, #800]	; (800a47c <__ieee754_pow+0x724>)
 800a15c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a160:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a164:	429c      	cmp	r4, r3
 800a166:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a16a:	dd08      	ble.n	800a17e <__ieee754_pow+0x426>
 800a16c:	4bc4      	ldr	r3, [pc, #784]	; (800a480 <__ieee754_pow+0x728>)
 800a16e:	429c      	cmp	r4, r3
 800a170:	f340 815b 	ble.w	800a42a <__ieee754_pow+0x6d2>
 800a174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a176:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a17a:	3301      	adds	r3, #1
 800a17c:	930c      	str	r3, [sp, #48]	; 0x30
 800a17e:	f04f 0800 	mov.w	r8, #0
 800a182:	4658      	mov	r0, fp
 800a184:	4629      	mov	r1, r5
 800a186:	4bbf      	ldr	r3, [pc, #764]	; (800a484 <__ieee754_pow+0x72c>)
 800a188:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800a18c:	444b      	add	r3, r9
 800a18e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a192:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a196:	461a      	mov	r2, r3
 800a198:	4623      	mov	r3, r4
 800a19a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a19e:	f7f5 ffe3 	bl	8000168 <__aeabi_dsub>
 800a1a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	460f      	mov	r7, r1
 800a1aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1ae:	f7f5 ffdd 	bl	800016c <__adddf3>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	49b3      	ldr	r1, [pc, #716]	; (800a488 <__ieee754_pow+0x730>)
 800a1ba:	f7f6 fab7 	bl	800072c <__aeabi_ddiv>
 800a1be:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	f7f6 f985 	bl	80004d8 <__aeabi_dmul>
 800a1ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a1d2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a1d6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	2200      	movs	r2, #0
 800a1de:	106d      	asrs	r5, r5, #1
 800a1e0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a1e4:	9304      	str	r3, [sp, #16]
 800a1e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a1ea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a1ee:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800a1f2:	4650      	mov	r0, sl
 800a1f4:	4659      	mov	r1, fp
 800a1f6:	4614      	mov	r4, r2
 800a1f8:	461d      	mov	r5, r3
 800a1fa:	f7f6 f96d 	bl	80004d8 <__aeabi_dmul>
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	4630      	mov	r0, r6
 800a204:	4639      	mov	r1, r7
 800a206:	f7f5 ffaf 	bl	8000168 <__aeabi_dsub>
 800a20a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a20e:	4606      	mov	r6, r0
 800a210:	460f      	mov	r7, r1
 800a212:	4620      	mov	r0, r4
 800a214:	4629      	mov	r1, r5
 800a216:	f7f5 ffa7 	bl	8000168 <__aeabi_dsub>
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a222:	f7f5 ffa1 	bl	8000168 <__aeabi_dsub>
 800a226:	4652      	mov	r2, sl
 800a228:	465b      	mov	r3, fp
 800a22a:	f7f6 f955 	bl	80004d8 <__aeabi_dmul>
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	4630      	mov	r0, r6
 800a234:	4639      	mov	r1, r7
 800a236:	f7f5 ff97 	bl	8000168 <__aeabi_dsub>
 800a23a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a23e:	f7f6 f94b 	bl	80004d8 <__aeabi_dmul>
 800a242:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a246:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a24a:	4610      	mov	r0, r2
 800a24c:	4619      	mov	r1, r3
 800a24e:	f7f6 f943 	bl	80004d8 <__aeabi_dmul>
 800a252:	a377      	add	r3, pc, #476	; (adr r3, 800a430 <__ieee754_pow+0x6d8>)
 800a254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a258:	4604      	mov	r4, r0
 800a25a:	460d      	mov	r5, r1
 800a25c:	f7f6 f93c 	bl	80004d8 <__aeabi_dmul>
 800a260:	a375      	add	r3, pc, #468	; (adr r3, 800a438 <__ieee754_pow+0x6e0>)
 800a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a266:	f7f5 ff81 	bl	800016c <__adddf3>
 800a26a:	4622      	mov	r2, r4
 800a26c:	462b      	mov	r3, r5
 800a26e:	f7f6 f933 	bl	80004d8 <__aeabi_dmul>
 800a272:	a373      	add	r3, pc, #460	; (adr r3, 800a440 <__ieee754_pow+0x6e8>)
 800a274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a278:	f7f5 ff78 	bl	800016c <__adddf3>
 800a27c:	4622      	mov	r2, r4
 800a27e:	462b      	mov	r3, r5
 800a280:	f7f6 f92a 	bl	80004d8 <__aeabi_dmul>
 800a284:	a370      	add	r3, pc, #448	; (adr r3, 800a448 <__ieee754_pow+0x6f0>)
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	f7f5 ff6f 	bl	800016c <__adddf3>
 800a28e:	4622      	mov	r2, r4
 800a290:	462b      	mov	r3, r5
 800a292:	f7f6 f921 	bl	80004d8 <__aeabi_dmul>
 800a296:	a36e      	add	r3, pc, #440	; (adr r3, 800a450 <__ieee754_pow+0x6f8>)
 800a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29c:	f7f5 ff66 	bl	800016c <__adddf3>
 800a2a0:	4622      	mov	r2, r4
 800a2a2:	462b      	mov	r3, r5
 800a2a4:	f7f6 f918 	bl	80004d8 <__aeabi_dmul>
 800a2a8:	a36b      	add	r3, pc, #428	; (adr r3, 800a458 <__ieee754_pow+0x700>)
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	f7f5 ff5d 	bl	800016c <__adddf3>
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	4606      	mov	r6, r0
 800a2b6:	460f      	mov	r7, r1
 800a2b8:	462b      	mov	r3, r5
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	4629      	mov	r1, r5
 800a2be:	f7f6 f90b 	bl	80004d8 <__aeabi_dmul>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	4639      	mov	r1, r7
 800a2ca:	f7f6 f905 	bl	80004d8 <__aeabi_dmul>
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	460d      	mov	r5, r1
 800a2d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2d6:	4652      	mov	r2, sl
 800a2d8:	465b      	mov	r3, fp
 800a2da:	f7f5 ff47 	bl	800016c <__adddf3>
 800a2de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a2e2:	f7f6 f8f9 	bl	80004d8 <__aeabi_dmul>
 800a2e6:	4622      	mov	r2, r4
 800a2e8:	462b      	mov	r3, r5
 800a2ea:	f7f5 ff3f 	bl	800016c <__adddf3>
 800a2ee:	4652      	mov	r2, sl
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	460f      	mov	r7, r1
 800a2f4:	465b      	mov	r3, fp
 800a2f6:	4650      	mov	r0, sl
 800a2f8:	4659      	mov	r1, fp
 800a2fa:	f7f6 f8ed 	bl	80004d8 <__aeabi_dmul>
 800a2fe:	2200      	movs	r2, #0
 800a300:	4b62      	ldr	r3, [pc, #392]	; (800a48c <__ieee754_pow+0x734>)
 800a302:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a306:	f7f5 ff31 	bl	800016c <__adddf3>
 800a30a:	4632      	mov	r2, r6
 800a30c:	463b      	mov	r3, r7
 800a30e:	f7f5 ff2d 	bl	800016c <__adddf3>
 800a312:	9804      	ldr	r0, [sp, #16]
 800a314:	460d      	mov	r5, r1
 800a316:	4604      	mov	r4, r0
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	4650      	mov	r0, sl
 800a31e:	4659      	mov	r1, fp
 800a320:	f7f6 f8da 	bl	80004d8 <__aeabi_dmul>
 800a324:	2200      	movs	r2, #0
 800a326:	4682      	mov	sl, r0
 800a328:	468b      	mov	fp, r1
 800a32a:	4b58      	ldr	r3, [pc, #352]	; (800a48c <__ieee754_pow+0x734>)
 800a32c:	4620      	mov	r0, r4
 800a32e:	4629      	mov	r1, r5
 800a330:	f7f5 ff1a 	bl	8000168 <__aeabi_dsub>
 800a334:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a338:	f7f5 ff16 	bl	8000168 <__aeabi_dsub>
 800a33c:	4602      	mov	r2, r0
 800a33e:	460b      	mov	r3, r1
 800a340:	4630      	mov	r0, r6
 800a342:	4639      	mov	r1, r7
 800a344:	f7f5 ff10 	bl	8000168 <__aeabi_dsub>
 800a348:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a34c:	f7f6 f8c4 	bl	80004d8 <__aeabi_dmul>
 800a350:	4622      	mov	r2, r4
 800a352:	4606      	mov	r6, r0
 800a354:	460f      	mov	r7, r1
 800a356:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a35a:	462b      	mov	r3, r5
 800a35c:	f7f6 f8bc 	bl	80004d8 <__aeabi_dmul>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	4630      	mov	r0, r6
 800a366:	4639      	mov	r1, r7
 800a368:	f7f5 ff00 	bl	800016c <__adddf3>
 800a36c:	4606      	mov	r6, r0
 800a36e:	460f      	mov	r7, r1
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	4650      	mov	r0, sl
 800a376:	4659      	mov	r1, fp
 800a378:	f7f5 fef8 	bl	800016c <__adddf3>
 800a37c:	a338      	add	r3, pc, #224	; (adr r3, 800a460 <__ieee754_pow+0x708>)
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	9804      	ldr	r0, [sp, #16]
 800a384:	460d      	mov	r5, r1
 800a386:	4604      	mov	r4, r0
 800a388:	f7f6 f8a6 	bl	80004d8 <__aeabi_dmul>
 800a38c:	4652      	mov	r2, sl
 800a38e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a392:	465b      	mov	r3, fp
 800a394:	4620      	mov	r0, r4
 800a396:	4629      	mov	r1, r5
 800a398:	f7f5 fee6 	bl	8000168 <__aeabi_dsub>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	f7f5 fee0 	bl	8000168 <__aeabi_dsub>
 800a3a8:	a32f      	add	r3, pc, #188	; (adr r3, 800a468 <__ieee754_pow+0x710>)
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	f7f6 f893 	bl	80004d8 <__aeabi_dmul>
 800a3b2:	a32f      	add	r3, pc, #188	; (adr r3, 800a470 <__ieee754_pow+0x718>)
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	460f      	mov	r7, r1
 800a3bc:	4620      	mov	r0, r4
 800a3be:	4629      	mov	r1, r5
 800a3c0:	f7f6 f88a 	bl	80004d8 <__aeabi_dmul>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	f7f5 fece 	bl	800016c <__adddf3>
 800a3d0:	4b2f      	ldr	r3, [pc, #188]	; (800a490 <__ieee754_pow+0x738>)
 800a3d2:	444b      	add	r3, r9
 800a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d8:	f7f5 fec8 	bl	800016c <__adddf3>
 800a3dc:	4604      	mov	r4, r0
 800a3de:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a3e0:	460d      	mov	r5, r1
 800a3e2:	f7f6 f80f 	bl	8000404 <__aeabi_i2d>
 800a3e6:	4606      	mov	r6, r0
 800a3e8:	460f      	mov	r7, r1
 800a3ea:	4b2a      	ldr	r3, [pc, #168]	; (800a494 <__ieee754_pow+0x73c>)
 800a3ec:	4622      	mov	r2, r4
 800a3ee:	444b      	add	r3, r9
 800a3f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3f4:	462b      	mov	r3, r5
 800a3f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3fa:	f7f5 feb7 	bl	800016c <__adddf3>
 800a3fe:	4642      	mov	r2, r8
 800a400:	464b      	mov	r3, r9
 800a402:	f7f5 feb3 	bl	800016c <__adddf3>
 800a406:	4632      	mov	r2, r6
 800a408:	463b      	mov	r3, r7
 800a40a:	f7f5 feaf 	bl	800016c <__adddf3>
 800a40e:	9804      	ldr	r0, [sp, #16]
 800a410:	4632      	mov	r2, r6
 800a412:	463b      	mov	r3, r7
 800a414:	4682      	mov	sl, r0
 800a416:	468b      	mov	fp, r1
 800a418:	f7f5 fea6 	bl	8000168 <__aeabi_dsub>
 800a41c:	4642      	mov	r2, r8
 800a41e:	464b      	mov	r3, r9
 800a420:	f7f5 fea2 	bl	8000168 <__aeabi_dsub>
 800a424:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a428:	e60b      	b.n	800a042 <__ieee754_pow+0x2ea>
 800a42a:	f04f 0801 	mov.w	r8, #1
 800a42e:	e6a8      	b.n	800a182 <__ieee754_pow+0x42a>
 800a430:	4a454eef 	.word	0x4a454eef
 800a434:	3fca7e28 	.word	0x3fca7e28
 800a438:	93c9db65 	.word	0x93c9db65
 800a43c:	3fcd864a 	.word	0x3fcd864a
 800a440:	a91d4101 	.word	0xa91d4101
 800a444:	3fd17460 	.word	0x3fd17460
 800a448:	518f264d 	.word	0x518f264d
 800a44c:	3fd55555 	.word	0x3fd55555
 800a450:	db6fabff 	.word	0xdb6fabff
 800a454:	3fdb6db6 	.word	0x3fdb6db6
 800a458:	33333303 	.word	0x33333303
 800a45c:	3fe33333 	.word	0x3fe33333
 800a460:	e0000000 	.word	0xe0000000
 800a464:	3feec709 	.word	0x3feec709
 800a468:	dc3a03fd 	.word	0xdc3a03fd
 800a46c:	3feec709 	.word	0x3feec709
 800a470:	145b01f5 	.word	0x145b01f5
 800a474:	be3e2fe0 	.word	0xbe3e2fe0
 800a478:	43400000 	.word	0x43400000
 800a47c:	0003988e 	.word	0x0003988e
 800a480:	000bb679 	.word	0x000bb679
 800a484:	0800d070 	.word	0x0800d070
 800a488:	3ff00000 	.word	0x3ff00000
 800a48c:	40080000 	.word	0x40080000
 800a490:	0800d090 	.word	0x0800d090
 800a494:	0800d080 	.word	0x0800d080
 800a498:	a39b      	add	r3, pc, #620	; (adr r3, 800a708 <__ieee754_pow+0x9b0>)
 800a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49e:	4640      	mov	r0, r8
 800a4a0:	4649      	mov	r1, r9
 800a4a2:	f7f5 fe63 	bl	800016c <__adddf3>
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4ac:	462b      	mov	r3, r5
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	4639      	mov	r1, r7
 800a4b2:	f7f5 fe59 	bl	8000168 <__aeabi_dsub>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4be:	f7f6 fa9b 	bl	80009f8 <__aeabi_dcmpgt>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	f47f ae0d 	bne.w	800a0e2 <__ieee754_pow+0x38a>
 800a4c8:	4aa3      	ldr	r2, [pc, #652]	; (800a758 <__ieee754_pow+0xa00>)
 800a4ca:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	f340 8103 	ble.w	800a6da <__ieee754_pow+0x982>
 800a4d4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a4d8:	2000      	movs	r0, #0
 800a4da:	151b      	asrs	r3, r3, #20
 800a4dc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a4e0:	fa4a f303 	asr.w	r3, sl, r3
 800a4e4:	4433      	add	r3, r6
 800a4e6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a4ea:	4f9c      	ldr	r7, [pc, #624]	; (800a75c <__ieee754_pow+0xa04>)
 800a4ec:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a4f0:	4117      	asrs	r7, r2
 800a4f2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a4f6:	ea23 0107 	bic.w	r1, r3, r7
 800a4fa:	f1c2 0214 	rsb	r2, r2, #20
 800a4fe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a502:	fa4a fa02 	asr.w	sl, sl, r2
 800a506:	2e00      	cmp	r6, #0
 800a508:	4602      	mov	r2, r0
 800a50a:	460b      	mov	r3, r1
 800a50c:	4620      	mov	r0, r4
 800a50e:	4629      	mov	r1, r5
 800a510:	bfb8      	it	lt
 800a512:	f1ca 0a00 	rsblt	sl, sl, #0
 800a516:	f7f5 fe27 	bl	8000168 <__aeabi_dsub>
 800a51a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a51e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a522:	4642      	mov	r2, r8
 800a524:	464b      	mov	r3, r9
 800a526:	f7f5 fe21 	bl	800016c <__adddf3>
 800a52a:	a379      	add	r3, pc, #484	; (adr r3, 800a710 <__ieee754_pow+0x9b8>)
 800a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a530:	2000      	movs	r0, #0
 800a532:	460d      	mov	r5, r1
 800a534:	4604      	mov	r4, r0
 800a536:	f7f5 ffcf 	bl	80004d8 <__aeabi_dmul>
 800a53a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a53e:	4606      	mov	r6, r0
 800a540:	460f      	mov	r7, r1
 800a542:	4620      	mov	r0, r4
 800a544:	4629      	mov	r1, r5
 800a546:	f7f5 fe0f 	bl	8000168 <__aeabi_dsub>
 800a54a:	4602      	mov	r2, r0
 800a54c:	460b      	mov	r3, r1
 800a54e:	4640      	mov	r0, r8
 800a550:	4649      	mov	r1, r9
 800a552:	f7f5 fe09 	bl	8000168 <__aeabi_dsub>
 800a556:	a370      	add	r3, pc, #448	; (adr r3, 800a718 <__ieee754_pow+0x9c0>)
 800a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55c:	f7f5 ffbc 	bl	80004d8 <__aeabi_dmul>
 800a560:	a36f      	add	r3, pc, #444	; (adr r3, 800a720 <__ieee754_pow+0x9c8>)
 800a562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a566:	4680      	mov	r8, r0
 800a568:	4689      	mov	r9, r1
 800a56a:	4620      	mov	r0, r4
 800a56c:	4629      	mov	r1, r5
 800a56e:	f7f5 ffb3 	bl	80004d8 <__aeabi_dmul>
 800a572:	4602      	mov	r2, r0
 800a574:	460b      	mov	r3, r1
 800a576:	4640      	mov	r0, r8
 800a578:	4649      	mov	r1, r9
 800a57a:	f7f5 fdf7 	bl	800016c <__adddf3>
 800a57e:	4604      	mov	r4, r0
 800a580:	460d      	mov	r5, r1
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	4630      	mov	r0, r6
 800a588:	4639      	mov	r1, r7
 800a58a:	f7f5 fdef 	bl	800016c <__adddf3>
 800a58e:	4632      	mov	r2, r6
 800a590:	463b      	mov	r3, r7
 800a592:	4680      	mov	r8, r0
 800a594:	4689      	mov	r9, r1
 800a596:	f7f5 fde7 	bl	8000168 <__aeabi_dsub>
 800a59a:	4602      	mov	r2, r0
 800a59c:	460b      	mov	r3, r1
 800a59e:	4620      	mov	r0, r4
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	f7f5 fde1 	bl	8000168 <__aeabi_dsub>
 800a5a6:	4642      	mov	r2, r8
 800a5a8:	4606      	mov	r6, r0
 800a5aa:	460f      	mov	r7, r1
 800a5ac:	464b      	mov	r3, r9
 800a5ae:	4640      	mov	r0, r8
 800a5b0:	4649      	mov	r1, r9
 800a5b2:	f7f5 ff91 	bl	80004d8 <__aeabi_dmul>
 800a5b6:	a35c      	add	r3, pc, #368	; (adr r3, 800a728 <__ieee754_pow+0x9d0>)
 800a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5bc:	4604      	mov	r4, r0
 800a5be:	460d      	mov	r5, r1
 800a5c0:	f7f5 ff8a 	bl	80004d8 <__aeabi_dmul>
 800a5c4:	a35a      	add	r3, pc, #360	; (adr r3, 800a730 <__ieee754_pow+0x9d8>)
 800a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ca:	f7f5 fdcd 	bl	8000168 <__aeabi_dsub>
 800a5ce:	4622      	mov	r2, r4
 800a5d0:	462b      	mov	r3, r5
 800a5d2:	f7f5 ff81 	bl	80004d8 <__aeabi_dmul>
 800a5d6:	a358      	add	r3, pc, #352	; (adr r3, 800a738 <__ieee754_pow+0x9e0>)
 800a5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5dc:	f7f5 fdc6 	bl	800016c <__adddf3>
 800a5e0:	4622      	mov	r2, r4
 800a5e2:	462b      	mov	r3, r5
 800a5e4:	f7f5 ff78 	bl	80004d8 <__aeabi_dmul>
 800a5e8:	a355      	add	r3, pc, #340	; (adr r3, 800a740 <__ieee754_pow+0x9e8>)
 800a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ee:	f7f5 fdbb 	bl	8000168 <__aeabi_dsub>
 800a5f2:	4622      	mov	r2, r4
 800a5f4:	462b      	mov	r3, r5
 800a5f6:	f7f5 ff6f 	bl	80004d8 <__aeabi_dmul>
 800a5fa:	a353      	add	r3, pc, #332	; (adr r3, 800a748 <__ieee754_pow+0x9f0>)
 800a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a600:	f7f5 fdb4 	bl	800016c <__adddf3>
 800a604:	4622      	mov	r2, r4
 800a606:	462b      	mov	r3, r5
 800a608:	f7f5 ff66 	bl	80004d8 <__aeabi_dmul>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	4640      	mov	r0, r8
 800a612:	4649      	mov	r1, r9
 800a614:	f7f5 fda8 	bl	8000168 <__aeabi_dsub>
 800a618:	4604      	mov	r4, r0
 800a61a:	460d      	mov	r5, r1
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	4640      	mov	r0, r8
 800a622:	4649      	mov	r1, r9
 800a624:	f7f5 ff58 	bl	80004d8 <__aeabi_dmul>
 800a628:	2200      	movs	r2, #0
 800a62a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a62e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a632:	4620      	mov	r0, r4
 800a634:	4629      	mov	r1, r5
 800a636:	f7f5 fd97 	bl	8000168 <__aeabi_dsub>
 800a63a:	4602      	mov	r2, r0
 800a63c:	460b      	mov	r3, r1
 800a63e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a642:	f7f6 f873 	bl	800072c <__aeabi_ddiv>
 800a646:	4632      	mov	r2, r6
 800a648:	4604      	mov	r4, r0
 800a64a:	460d      	mov	r5, r1
 800a64c:	463b      	mov	r3, r7
 800a64e:	4640      	mov	r0, r8
 800a650:	4649      	mov	r1, r9
 800a652:	f7f5 ff41 	bl	80004d8 <__aeabi_dmul>
 800a656:	4632      	mov	r2, r6
 800a658:	463b      	mov	r3, r7
 800a65a:	f7f5 fd87 	bl	800016c <__adddf3>
 800a65e:	4602      	mov	r2, r0
 800a660:	460b      	mov	r3, r1
 800a662:	4620      	mov	r0, r4
 800a664:	4629      	mov	r1, r5
 800a666:	f7f5 fd7f 	bl	8000168 <__aeabi_dsub>
 800a66a:	4642      	mov	r2, r8
 800a66c:	464b      	mov	r3, r9
 800a66e:	f7f5 fd7b 	bl	8000168 <__aeabi_dsub>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	2000      	movs	r0, #0
 800a678:	4939      	ldr	r1, [pc, #228]	; (800a760 <__ieee754_pow+0xa08>)
 800a67a:	f7f5 fd75 	bl	8000168 <__aeabi_dsub>
 800a67e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a682:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a686:	da2b      	bge.n	800a6e0 <__ieee754_pow+0x988>
 800a688:	4652      	mov	r2, sl
 800a68a:	f001 f8ed 	bl	800b868 <scalbn>
 800a68e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a692:	f7ff bbf6 	b.w	8009e82 <__ieee754_pow+0x12a>
 800a696:	4b33      	ldr	r3, [pc, #204]	; (800a764 <__ieee754_pow+0xa0c>)
 800a698:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a69c:	429f      	cmp	r7, r3
 800a69e:	f77f af13 	ble.w	800a4c8 <__ieee754_pow+0x770>
 800a6a2:	4b31      	ldr	r3, [pc, #196]	; (800a768 <__ieee754_pow+0xa10>)
 800a6a4:	440b      	add	r3, r1
 800a6a6:	4303      	orrs	r3, r0
 800a6a8:	d00b      	beq.n	800a6c2 <__ieee754_pow+0x96a>
 800a6aa:	a329      	add	r3, pc, #164	; (adr r3, 800a750 <__ieee754_pow+0x9f8>)
 800a6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6b4:	f7f5 ff10 	bl	80004d8 <__aeabi_dmul>
 800a6b8:	a325      	add	r3, pc, #148	; (adr r3, 800a750 <__ieee754_pow+0x9f8>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	f7ff bbe0 	b.w	8009e82 <__ieee754_pow+0x12a>
 800a6c2:	4622      	mov	r2, r4
 800a6c4:	462b      	mov	r3, r5
 800a6c6:	f7f5 fd4f 	bl	8000168 <__aeabi_dsub>
 800a6ca:	4642      	mov	r2, r8
 800a6cc:	464b      	mov	r3, r9
 800a6ce:	f7f6 f989 	bl	80009e4 <__aeabi_dcmpge>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	f43f aef8 	beq.w	800a4c8 <__ieee754_pow+0x770>
 800a6d8:	e7e7      	b.n	800a6aa <__ieee754_pow+0x952>
 800a6da:	f04f 0a00 	mov.w	sl, #0
 800a6de:	e71e      	b.n	800a51e <__ieee754_pow+0x7c6>
 800a6e0:	4621      	mov	r1, r4
 800a6e2:	e7d4      	b.n	800a68e <__ieee754_pow+0x936>
 800a6e4:	f04f 0b00 	mov.w	fp, #0
 800a6e8:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a760 <__ieee754_pow+0xa08>
 800a6ec:	f7ff bb95 	b.w	8009e1a <__ieee754_pow+0xc2>
 800a6f0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800a6f4:	f7ff bb91 	b.w	8009e1a <__ieee754_pow+0xc2>
 800a6f8:	4638      	mov	r0, r7
 800a6fa:	4641      	mov	r1, r8
 800a6fc:	f7ff bbc3 	b.w	8009e86 <__ieee754_pow+0x12e>
 800a700:	9200      	str	r2, [sp, #0]
 800a702:	f7ff bb9f 	b.w	8009e44 <__ieee754_pow+0xec>
 800a706:	bf00      	nop
 800a708:	652b82fe 	.word	0x652b82fe
 800a70c:	3c971547 	.word	0x3c971547
 800a710:	00000000 	.word	0x00000000
 800a714:	3fe62e43 	.word	0x3fe62e43
 800a718:	fefa39ef 	.word	0xfefa39ef
 800a71c:	3fe62e42 	.word	0x3fe62e42
 800a720:	0ca86c39 	.word	0x0ca86c39
 800a724:	be205c61 	.word	0xbe205c61
 800a728:	72bea4d0 	.word	0x72bea4d0
 800a72c:	3e663769 	.word	0x3e663769
 800a730:	c5d26bf1 	.word	0xc5d26bf1
 800a734:	3ebbbd41 	.word	0x3ebbbd41
 800a738:	af25de2c 	.word	0xaf25de2c
 800a73c:	3f11566a 	.word	0x3f11566a
 800a740:	16bebd93 	.word	0x16bebd93
 800a744:	3f66c16c 	.word	0x3f66c16c
 800a748:	5555553e 	.word	0x5555553e
 800a74c:	3fc55555 	.word	0x3fc55555
 800a750:	c2f8f359 	.word	0xc2f8f359
 800a754:	01a56e1f 	.word	0x01a56e1f
 800a758:	3fe00000 	.word	0x3fe00000
 800a75c:	000fffff 	.word	0x000fffff
 800a760:	3ff00000 	.word	0x3ff00000
 800a764:	4090cbff 	.word	0x4090cbff
 800a768:	3f6f3400 	.word	0x3f6f3400
 800a76c:	00000000 	.word	0x00000000

0800a770 <__ieee754_rem_pio2>:
 800a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	4614      	mov	r4, r2
 800a776:	4ac2      	ldr	r2, [pc, #776]	; (800aa80 <__ieee754_rem_pio2+0x310>)
 800a778:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800a77c:	4592      	cmp	sl, r2
 800a77e:	b08d      	sub	sp, #52	; 0x34
 800a780:	468b      	mov	fp, r1
 800a782:	dc07      	bgt.n	800a794 <__ieee754_rem_pio2+0x24>
 800a784:	2200      	movs	r2, #0
 800a786:	2300      	movs	r3, #0
 800a788:	e9c4 0100 	strd	r0, r1, [r4]
 800a78c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a790:	2500      	movs	r5, #0
 800a792:	e023      	b.n	800a7dc <__ieee754_rem_pio2+0x6c>
 800a794:	4abb      	ldr	r2, [pc, #748]	; (800aa84 <__ieee754_rem_pio2+0x314>)
 800a796:	4592      	cmp	sl, r2
 800a798:	dc71      	bgt.n	800a87e <__ieee754_rem_pio2+0x10e>
 800a79a:	a3ab      	add	r3, pc, #684	; (adr r3, 800aa48 <__ieee754_rem_pio2+0x2d8>)
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	2900      	cmp	r1, #0
 800a7a2:	4db9      	ldr	r5, [pc, #740]	; (800aa88 <__ieee754_rem_pio2+0x318>)
 800a7a4:	dd36      	ble.n	800a814 <__ieee754_rem_pio2+0xa4>
 800a7a6:	f7f5 fcdf 	bl	8000168 <__aeabi_dsub>
 800a7aa:	45aa      	cmp	sl, r5
 800a7ac:	4606      	mov	r6, r0
 800a7ae:	460f      	mov	r7, r1
 800a7b0:	d018      	beq.n	800a7e4 <__ieee754_rem_pio2+0x74>
 800a7b2:	a3a7      	add	r3, pc, #668	; (adr r3, 800aa50 <__ieee754_rem_pio2+0x2e0>)
 800a7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b8:	f7f5 fcd6 	bl	8000168 <__aeabi_dsub>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	460b      	mov	r3, r1
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	e9c4 2300 	strd	r2, r3, [r4]
 800a7c6:	4639      	mov	r1, r7
 800a7c8:	f7f5 fcce 	bl	8000168 <__aeabi_dsub>
 800a7cc:	a3a0      	add	r3, pc, #640	; (adr r3, 800aa50 <__ieee754_rem_pio2+0x2e0>)
 800a7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d2:	f7f5 fcc9 	bl	8000168 <__aeabi_dsub>
 800a7d6:	2501      	movs	r5, #1
 800a7d8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7dc:	4628      	mov	r0, r5
 800a7de:	b00d      	add	sp, #52	; 0x34
 800a7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e4:	a39c      	add	r3, pc, #624	; (adr r3, 800aa58 <__ieee754_rem_pio2+0x2e8>)
 800a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ea:	f7f5 fcbd 	bl	8000168 <__aeabi_dsub>
 800a7ee:	a39c      	add	r3, pc, #624	; (adr r3, 800aa60 <__ieee754_rem_pio2+0x2f0>)
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	4606      	mov	r6, r0
 800a7f6:	460f      	mov	r7, r1
 800a7f8:	f7f5 fcb6 	bl	8000168 <__aeabi_dsub>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	4630      	mov	r0, r6
 800a802:	e9c4 2300 	strd	r2, r3, [r4]
 800a806:	4639      	mov	r1, r7
 800a808:	f7f5 fcae 	bl	8000168 <__aeabi_dsub>
 800a80c:	a394      	add	r3, pc, #592	; (adr r3, 800aa60 <__ieee754_rem_pio2+0x2f0>)
 800a80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a812:	e7de      	b.n	800a7d2 <__ieee754_rem_pio2+0x62>
 800a814:	f7f5 fcaa 	bl	800016c <__adddf3>
 800a818:	45aa      	cmp	sl, r5
 800a81a:	4606      	mov	r6, r0
 800a81c:	460f      	mov	r7, r1
 800a81e:	d016      	beq.n	800a84e <__ieee754_rem_pio2+0xde>
 800a820:	a38b      	add	r3, pc, #556	; (adr r3, 800aa50 <__ieee754_rem_pio2+0x2e0>)
 800a822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a826:	f7f5 fca1 	bl	800016c <__adddf3>
 800a82a:	4602      	mov	r2, r0
 800a82c:	460b      	mov	r3, r1
 800a82e:	4630      	mov	r0, r6
 800a830:	e9c4 2300 	strd	r2, r3, [r4]
 800a834:	4639      	mov	r1, r7
 800a836:	f7f5 fc97 	bl	8000168 <__aeabi_dsub>
 800a83a:	a385      	add	r3, pc, #532	; (adr r3, 800aa50 <__ieee754_rem_pio2+0x2e0>)
 800a83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a840:	f7f5 fc94 	bl	800016c <__adddf3>
 800a844:	f04f 35ff 	mov.w	r5, #4294967295
 800a848:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a84c:	e7c6      	b.n	800a7dc <__ieee754_rem_pio2+0x6c>
 800a84e:	a382      	add	r3, pc, #520	; (adr r3, 800aa58 <__ieee754_rem_pio2+0x2e8>)
 800a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a854:	f7f5 fc8a 	bl	800016c <__adddf3>
 800a858:	a381      	add	r3, pc, #516	; (adr r3, 800aa60 <__ieee754_rem_pio2+0x2f0>)
 800a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85e:	4606      	mov	r6, r0
 800a860:	460f      	mov	r7, r1
 800a862:	f7f5 fc83 	bl	800016c <__adddf3>
 800a866:	4602      	mov	r2, r0
 800a868:	460b      	mov	r3, r1
 800a86a:	4630      	mov	r0, r6
 800a86c:	e9c4 2300 	strd	r2, r3, [r4]
 800a870:	4639      	mov	r1, r7
 800a872:	f7f5 fc79 	bl	8000168 <__aeabi_dsub>
 800a876:	a37a      	add	r3, pc, #488	; (adr r3, 800aa60 <__ieee754_rem_pio2+0x2f0>)
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	e7e0      	b.n	800a840 <__ieee754_rem_pio2+0xd0>
 800a87e:	4a83      	ldr	r2, [pc, #524]	; (800aa8c <__ieee754_rem_pio2+0x31c>)
 800a880:	4592      	cmp	sl, r2
 800a882:	f300 80d2 	bgt.w	800aa2a <__ieee754_rem_pio2+0x2ba>
 800a886:	f000 fecd 	bl	800b624 <fabs>
 800a88a:	a377      	add	r3, pc, #476	; (adr r3, 800aa68 <__ieee754_rem_pio2+0x2f8>)
 800a88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a890:	4606      	mov	r6, r0
 800a892:	460f      	mov	r7, r1
 800a894:	f7f5 fe20 	bl	80004d8 <__aeabi_dmul>
 800a898:	2200      	movs	r2, #0
 800a89a:	4b7d      	ldr	r3, [pc, #500]	; (800aa90 <__ieee754_rem_pio2+0x320>)
 800a89c:	f7f5 fc66 	bl	800016c <__adddf3>
 800a8a0:	f7f6 f8ca 	bl	8000a38 <__aeabi_d2iz>
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	f7f5 fdad 	bl	8000404 <__aeabi_i2d>
 800a8aa:	a367      	add	r3, pc, #412	; (adr r3, 800aa48 <__ieee754_rem_pio2+0x2d8>)
 800a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8b4:	f7f5 fe10 	bl	80004d8 <__aeabi_dmul>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4630      	mov	r0, r6
 800a8be:	4639      	mov	r1, r7
 800a8c0:	f7f5 fc52 	bl	8000168 <__aeabi_dsub>
 800a8c4:	a362      	add	r3, pc, #392	; (adr r3, 800aa50 <__ieee754_rem_pio2+0x2e0>)
 800a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ca:	4606      	mov	r6, r0
 800a8cc:	460f      	mov	r7, r1
 800a8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8d2:	f7f5 fe01 	bl	80004d8 <__aeabi_dmul>
 800a8d6:	2d1f      	cmp	r5, #31
 800a8d8:	4680      	mov	r8, r0
 800a8da:	4689      	mov	r9, r1
 800a8dc:	dc0e      	bgt.n	800a8fc <__ieee754_rem_pio2+0x18c>
 800a8de:	4b6d      	ldr	r3, [pc, #436]	; (800aa94 <__ieee754_rem_pio2+0x324>)
 800a8e0:	1e6a      	subs	r2, r5, #1
 800a8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e6:	4553      	cmp	r3, sl
 800a8e8:	d008      	beq.n	800a8fc <__ieee754_rem_pio2+0x18c>
 800a8ea:	4642      	mov	r2, r8
 800a8ec:	464b      	mov	r3, r9
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	4639      	mov	r1, r7
 800a8f2:	f7f5 fc39 	bl	8000168 <__aeabi_dsub>
 800a8f6:	e9c4 0100 	strd	r0, r1, [r4]
 800a8fa:	e011      	b.n	800a920 <__ieee754_rem_pio2+0x1b0>
 800a8fc:	464b      	mov	r3, r9
 800a8fe:	4642      	mov	r2, r8
 800a900:	4630      	mov	r0, r6
 800a902:	4639      	mov	r1, r7
 800a904:	f7f5 fc30 	bl	8000168 <__aeabi_dsub>
 800a908:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a90c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a910:	ebaa 0303 	sub.w	r3, sl, r3
 800a914:	2b10      	cmp	r3, #16
 800a916:	dc1f      	bgt.n	800a958 <__ieee754_rem_pio2+0x1e8>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	e9c4 2300 	strd	r2, r3, [r4]
 800a920:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800a924:	4630      	mov	r0, r6
 800a926:	4653      	mov	r3, sl
 800a928:	4639      	mov	r1, r7
 800a92a:	f7f5 fc1d 	bl	8000168 <__aeabi_dsub>
 800a92e:	4642      	mov	r2, r8
 800a930:	464b      	mov	r3, r9
 800a932:	f7f5 fc19 	bl	8000168 <__aeabi_dsub>
 800a936:	4602      	mov	r2, r0
 800a938:	460b      	mov	r3, r1
 800a93a:	f1bb 0f00 	cmp.w	fp, #0
 800a93e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a942:	f6bf af4b 	bge.w	800a7dc <__ieee754_rem_pio2+0x6c>
 800a946:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800a94a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800a94e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a952:	60e1      	str	r1, [r4, #12]
 800a954:	426d      	negs	r5, r5
 800a956:	e741      	b.n	800a7dc <__ieee754_rem_pio2+0x6c>
 800a958:	a33f      	add	r3, pc, #252	; (adr r3, 800aa58 <__ieee754_rem_pio2+0x2e8>)
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a962:	f7f5 fdb9 	bl	80004d8 <__aeabi_dmul>
 800a966:	4680      	mov	r8, r0
 800a968:	4689      	mov	r9, r1
 800a96a:	4602      	mov	r2, r0
 800a96c:	460b      	mov	r3, r1
 800a96e:	4630      	mov	r0, r6
 800a970:	4639      	mov	r1, r7
 800a972:	f7f5 fbf9 	bl	8000168 <__aeabi_dsub>
 800a976:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a97a:	4602      	mov	r2, r0
 800a97c:	460b      	mov	r3, r1
 800a97e:	4630      	mov	r0, r6
 800a980:	4639      	mov	r1, r7
 800a982:	f7f5 fbf1 	bl	8000168 <__aeabi_dsub>
 800a986:	4642      	mov	r2, r8
 800a988:	464b      	mov	r3, r9
 800a98a:	f7f5 fbed 	bl	8000168 <__aeabi_dsub>
 800a98e:	a334      	add	r3, pc, #208	; (adr r3, 800aa60 <__ieee754_rem_pio2+0x2f0>)
 800a990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a994:	4606      	mov	r6, r0
 800a996:	460f      	mov	r7, r1
 800a998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a99c:	f7f5 fd9c 	bl	80004d8 <__aeabi_dmul>
 800a9a0:	4632      	mov	r2, r6
 800a9a2:	463b      	mov	r3, r7
 800a9a4:	f7f5 fbe0 	bl	8000168 <__aeabi_dsub>
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	4680      	mov	r8, r0
 800a9ae:	4689      	mov	r9, r1
 800a9b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9b4:	f7f5 fbd8 	bl	8000168 <__aeabi_dsub>
 800a9b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a9bc:	ebaa 0a03 	sub.w	sl, sl, r3
 800a9c0:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800a9c4:	dc06      	bgt.n	800a9d4 <__ieee754_rem_pio2+0x264>
 800a9c6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	e9c4 2300 	strd	r2, r3, [r4]
 800a9d2:	e7a5      	b.n	800a920 <__ieee754_rem_pio2+0x1b0>
 800a9d4:	a326      	add	r3, pc, #152	; (adr r3, 800aa70 <__ieee754_rem_pio2+0x300>)
 800a9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9de:	f7f5 fd7b 	bl	80004d8 <__aeabi_dmul>
 800a9e2:	4680      	mov	r8, r0
 800a9e4:	4689      	mov	r9, r1
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9ee:	f7f5 fbbb 	bl	8000168 <__aeabi_dsub>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4606      	mov	r6, r0
 800a9f8:	460f      	mov	r7, r1
 800a9fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9fe:	f7f5 fbb3 	bl	8000168 <__aeabi_dsub>
 800aa02:	4642      	mov	r2, r8
 800aa04:	464b      	mov	r3, r9
 800aa06:	f7f5 fbaf 	bl	8000168 <__aeabi_dsub>
 800aa0a:	a31b      	add	r3, pc, #108	; (adr r3, 800aa78 <__ieee754_rem_pio2+0x308>)
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	4680      	mov	r8, r0
 800aa12:	4689      	mov	r9, r1
 800aa14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa18:	f7f5 fd5e 	bl	80004d8 <__aeabi_dmul>
 800aa1c:	4642      	mov	r2, r8
 800aa1e:	464b      	mov	r3, r9
 800aa20:	f7f5 fba2 	bl	8000168 <__aeabi_dsub>
 800aa24:	4680      	mov	r8, r0
 800aa26:	4689      	mov	r9, r1
 800aa28:	e75f      	b.n	800a8ea <__ieee754_rem_pio2+0x17a>
 800aa2a:	4a1b      	ldr	r2, [pc, #108]	; (800aa98 <__ieee754_rem_pio2+0x328>)
 800aa2c:	4592      	cmp	sl, r2
 800aa2e:	dd35      	ble.n	800aa9c <__ieee754_rem_pio2+0x32c>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	f7f5 fb98 	bl	8000168 <__aeabi_dsub>
 800aa38:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa3c:	e9c4 0100 	strd	r0, r1, [r4]
 800aa40:	e6a6      	b.n	800a790 <__ieee754_rem_pio2+0x20>
 800aa42:	bf00      	nop
 800aa44:	f3af 8000 	nop.w
 800aa48:	54400000 	.word	0x54400000
 800aa4c:	3ff921fb 	.word	0x3ff921fb
 800aa50:	1a626331 	.word	0x1a626331
 800aa54:	3dd0b461 	.word	0x3dd0b461
 800aa58:	1a600000 	.word	0x1a600000
 800aa5c:	3dd0b461 	.word	0x3dd0b461
 800aa60:	2e037073 	.word	0x2e037073
 800aa64:	3ba3198a 	.word	0x3ba3198a
 800aa68:	6dc9c883 	.word	0x6dc9c883
 800aa6c:	3fe45f30 	.word	0x3fe45f30
 800aa70:	2e000000 	.word	0x2e000000
 800aa74:	3ba3198a 	.word	0x3ba3198a
 800aa78:	252049c1 	.word	0x252049c1
 800aa7c:	397b839a 	.word	0x397b839a
 800aa80:	3fe921fb 	.word	0x3fe921fb
 800aa84:	4002d97b 	.word	0x4002d97b
 800aa88:	3ff921fb 	.word	0x3ff921fb
 800aa8c:	413921fb 	.word	0x413921fb
 800aa90:	3fe00000 	.word	0x3fe00000
 800aa94:	0800d0a0 	.word	0x0800d0a0
 800aa98:	7fefffff 	.word	0x7fefffff
 800aa9c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800aaa0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800aaa4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800aaa8:	460f      	mov	r7, r1
 800aaaa:	4606      	mov	r6, r0
 800aaac:	f7f5 ffc4 	bl	8000a38 <__aeabi_d2iz>
 800aab0:	f7f5 fca8 	bl	8000404 <__aeabi_i2d>
 800aab4:	4602      	mov	r2, r0
 800aab6:	460b      	mov	r3, r1
 800aab8:	4630      	mov	r0, r6
 800aaba:	4639      	mov	r1, r7
 800aabc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aac0:	f7f5 fb52 	bl	8000168 <__aeabi_dsub>
 800aac4:	2200      	movs	r2, #0
 800aac6:	4b20      	ldr	r3, [pc, #128]	; (800ab48 <__ieee754_rem_pio2+0x3d8>)
 800aac8:	f7f5 fd06 	bl	80004d8 <__aeabi_dmul>
 800aacc:	460f      	mov	r7, r1
 800aace:	4606      	mov	r6, r0
 800aad0:	f7f5 ffb2 	bl	8000a38 <__aeabi_d2iz>
 800aad4:	f7f5 fc96 	bl	8000404 <__aeabi_i2d>
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	4630      	mov	r0, r6
 800aade:	4639      	mov	r1, r7
 800aae0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aae4:	f7f5 fb40 	bl	8000168 <__aeabi_dsub>
 800aae8:	2200      	movs	r2, #0
 800aaea:	4b17      	ldr	r3, [pc, #92]	; (800ab48 <__ieee754_rem_pio2+0x3d8>)
 800aaec:	f7f5 fcf4 	bl	80004d8 <__aeabi_dmul>
 800aaf0:	f04f 0803 	mov.w	r8, #3
 800aaf4:	2600      	movs	r6, #0
 800aaf6:	2700      	movs	r7, #0
 800aaf8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aafc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ab00:	4632      	mov	r2, r6
 800ab02:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ab06:	463b      	mov	r3, r7
 800ab08:	f108 3aff 	add.w	sl, r8, #4294967295
 800ab0c:	f7f5 ff4c 	bl	80009a8 <__aeabi_dcmpeq>
 800ab10:	b9b8      	cbnz	r0, 800ab42 <__ieee754_rem_pio2+0x3d2>
 800ab12:	4b0e      	ldr	r3, [pc, #56]	; (800ab4c <__ieee754_rem_pio2+0x3dc>)
 800ab14:	462a      	mov	r2, r5
 800ab16:	9301      	str	r3, [sp, #4]
 800ab18:	2302      	movs	r3, #2
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	a806      	add	r0, sp, #24
 800ab20:	4643      	mov	r3, r8
 800ab22:	f000 f97f 	bl	800ae24 <__kernel_rem_pio2>
 800ab26:	f1bb 0f00 	cmp.w	fp, #0
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	f6bf ae56 	bge.w	800a7dc <__ieee754_rem_pio2+0x6c>
 800ab30:	6863      	ldr	r3, [r4, #4]
 800ab32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ab36:	6063      	str	r3, [r4, #4]
 800ab38:	68e3      	ldr	r3, [r4, #12]
 800ab3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ab3e:	60e3      	str	r3, [r4, #12]
 800ab40:	e708      	b.n	800a954 <__ieee754_rem_pio2+0x1e4>
 800ab42:	46d0      	mov	r8, sl
 800ab44:	e7dc      	b.n	800ab00 <__ieee754_rem_pio2+0x390>
 800ab46:	bf00      	nop
 800ab48:	41700000 	.word	0x41700000
 800ab4c:	0800d120 	.word	0x0800d120

0800ab50 <__ieee754_sqrt>:
 800ab50:	4b54      	ldr	r3, [pc, #336]	; (800aca4 <__ieee754_sqrt+0x154>)
 800ab52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab56:	438b      	bics	r3, r1
 800ab58:	4606      	mov	r6, r0
 800ab5a:	460d      	mov	r5, r1
 800ab5c:	460a      	mov	r2, r1
 800ab5e:	460c      	mov	r4, r1
 800ab60:	d10f      	bne.n	800ab82 <__ieee754_sqrt+0x32>
 800ab62:	4602      	mov	r2, r0
 800ab64:	460b      	mov	r3, r1
 800ab66:	f7f5 fcb7 	bl	80004d8 <__aeabi_dmul>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	4630      	mov	r0, r6
 800ab70:	4629      	mov	r1, r5
 800ab72:	f7f5 fafb 	bl	800016c <__adddf3>
 800ab76:	4606      	mov	r6, r0
 800ab78:	460d      	mov	r5, r1
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab82:	2900      	cmp	r1, #0
 800ab84:	4607      	mov	r7, r0
 800ab86:	4603      	mov	r3, r0
 800ab88:	dc0e      	bgt.n	800aba8 <__ieee754_sqrt+0x58>
 800ab8a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ab8e:	ea5c 0707 	orrs.w	r7, ip, r7
 800ab92:	d0f2      	beq.n	800ab7a <__ieee754_sqrt+0x2a>
 800ab94:	b141      	cbz	r1, 800aba8 <__ieee754_sqrt+0x58>
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	f7f5 fae5 	bl	8000168 <__aeabi_dsub>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	460b      	mov	r3, r1
 800aba2:	f7f5 fdc3 	bl	800072c <__aeabi_ddiv>
 800aba6:	e7e6      	b.n	800ab76 <__ieee754_sqrt+0x26>
 800aba8:	1512      	asrs	r2, r2, #20
 800abaa:	d074      	beq.n	800ac96 <__ieee754_sqrt+0x146>
 800abac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800abb0:	07d5      	lsls	r5, r2, #31
 800abb2:	f04f 0500 	mov.w	r5, #0
 800abb6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800abba:	bf48      	it	mi
 800abbc:	0fd9      	lsrmi	r1, r3, #31
 800abbe:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800abc2:	bf44      	itt	mi
 800abc4:	005b      	lslmi	r3, r3, #1
 800abc6:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800abca:	1051      	asrs	r1, r2, #1
 800abcc:	0fda      	lsrs	r2, r3, #31
 800abce:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800abd2:	4628      	mov	r0, r5
 800abd4:	2216      	movs	r2, #22
 800abd6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800abda:	005b      	lsls	r3, r3, #1
 800abdc:	1987      	adds	r7, r0, r6
 800abde:	42a7      	cmp	r7, r4
 800abe0:	bfde      	ittt	le
 800abe2:	19b8      	addle	r0, r7, r6
 800abe4:	1be4      	suble	r4, r4, r7
 800abe6:	19ad      	addle	r5, r5, r6
 800abe8:	0fdf      	lsrs	r7, r3, #31
 800abea:	3a01      	subs	r2, #1
 800abec:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800abf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800abf4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800abf8:	d1f0      	bne.n	800abdc <__ieee754_sqrt+0x8c>
 800abfa:	f04f 0c20 	mov.w	ip, #32
 800abfe:	4696      	mov	lr, r2
 800ac00:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ac04:	4284      	cmp	r4, r0
 800ac06:	eb06 070e 	add.w	r7, r6, lr
 800ac0a:	dc02      	bgt.n	800ac12 <__ieee754_sqrt+0xc2>
 800ac0c:	d112      	bne.n	800ac34 <__ieee754_sqrt+0xe4>
 800ac0e:	429f      	cmp	r7, r3
 800ac10:	d810      	bhi.n	800ac34 <__ieee754_sqrt+0xe4>
 800ac12:	2f00      	cmp	r7, #0
 800ac14:	eb07 0e06 	add.w	lr, r7, r6
 800ac18:	da42      	bge.n	800aca0 <__ieee754_sqrt+0x150>
 800ac1a:	f1be 0f00 	cmp.w	lr, #0
 800ac1e:	db3f      	blt.n	800aca0 <__ieee754_sqrt+0x150>
 800ac20:	f100 0801 	add.w	r8, r0, #1
 800ac24:	1a24      	subs	r4, r4, r0
 800ac26:	4640      	mov	r0, r8
 800ac28:	429f      	cmp	r7, r3
 800ac2a:	bf88      	it	hi
 800ac2c:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800ac30:	1bdb      	subs	r3, r3, r7
 800ac32:	4432      	add	r2, r6
 800ac34:	0064      	lsls	r4, r4, #1
 800ac36:	f1bc 0c01 	subs.w	ip, ip, #1
 800ac3a:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800ac3e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ac42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ac46:	d1dd      	bne.n	800ac04 <__ieee754_sqrt+0xb4>
 800ac48:	4323      	orrs	r3, r4
 800ac4a:	d006      	beq.n	800ac5a <__ieee754_sqrt+0x10a>
 800ac4c:	1c54      	adds	r4, r2, #1
 800ac4e:	bf0b      	itete	eq
 800ac50:	4662      	moveq	r2, ip
 800ac52:	3201      	addne	r2, #1
 800ac54:	3501      	addeq	r5, #1
 800ac56:	f022 0201 	bicne.w	r2, r2, #1
 800ac5a:	106b      	asrs	r3, r5, #1
 800ac5c:	0852      	lsrs	r2, r2, #1
 800ac5e:	07e8      	lsls	r0, r5, #31
 800ac60:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ac64:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ac68:	bf48      	it	mi
 800ac6a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ac6e:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800ac72:	4616      	mov	r6, r2
 800ac74:	e781      	b.n	800ab7a <__ieee754_sqrt+0x2a>
 800ac76:	0adc      	lsrs	r4, r3, #11
 800ac78:	3915      	subs	r1, #21
 800ac7a:	055b      	lsls	r3, r3, #21
 800ac7c:	2c00      	cmp	r4, #0
 800ac7e:	d0fa      	beq.n	800ac76 <__ieee754_sqrt+0x126>
 800ac80:	02e6      	lsls	r6, r4, #11
 800ac82:	d50a      	bpl.n	800ac9a <__ieee754_sqrt+0x14a>
 800ac84:	f1c2 0020 	rsb	r0, r2, #32
 800ac88:	fa23 f000 	lsr.w	r0, r3, r0
 800ac8c:	1e55      	subs	r5, r2, #1
 800ac8e:	4093      	lsls	r3, r2
 800ac90:	4304      	orrs	r4, r0
 800ac92:	1b4a      	subs	r2, r1, r5
 800ac94:	e78a      	b.n	800abac <__ieee754_sqrt+0x5c>
 800ac96:	4611      	mov	r1, r2
 800ac98:	e7f0      	b.n	800ac7c <__ieee754_sqrt+0x12c>
 800ac9a:	0064      	lsls	r4, r4, #1
 800ac9c:	3201      	adds	r2, #1
 800ac9e:	e7ef      	b.n	800ac80 <__ieee754_sqrt+0x130>
 800aca0:	4680      	mov	r8, r0
 800aca2:	e7bf      	b.n	800ac24 <__ieee754_sqrt+0xd4>
 800aca4:	7ff00000 	.word	0x7ff00000

0800aca8 <__kernel_cos>:
 800aca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800acb0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800acb4:	4680      	mov	r8, r0
 800acb6:	460f      	mov	r7, r1
 800acb8:	e9cd 2300 	strd	r2, r3, [sp]
 800acbc:	da04      	bge.n	800acc8 <__kernel_cos+0x20>
 800acbe:	f7f5 febb 	bl	8000a38 <__aeabi_d2iz>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	f000 8086 	beq.w	800add4 <__kernel_cos+0x12c>
 800acc8:	4642      	mov	r2, r8
 800acca:	463b      	mov	r3, r7
 800accc:	4640      	mov	r0, r8
 800acce:	4639      	mov	r1, r7
 800acd0:	f7f5 fc02 	bl	80004d8 <__aeabi_dmul>
 800acd4:	2200      	movs	r2, #0
 800acd6:	4b4e      	ldr	r3, [pc, #312]	; (800ae10 <__kernel_cos+0x168>)
 800acd8:	4604      	mov	r4, r0
 800acda:	460d      	mov	r5, r1
 800acdc:	f7f5 fbfc 	bl	80004d8 <__aeabi_dmul>
 800ace0:	a33f      	add	r3, pc, #252	; (adr r3, 800ade0 <__kernel_cos+0x138>)
 800ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace6:	4682      	mov	sl, r0
 800ace8:	468b      	mov	fp, r1
 800acea:	4620      	mov	r0, r4
 800acec:	4629      	mov	r1, r5
 800acee:	f7f5 fbf3 	bl	80004d8 <__aeabi_dmul>
 800acf2:	a33d      	add	r3, pc, #244	; (adr r3, 800ade8 <__kernel_cos+0x140>)
 800acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf8:	f7f5 fa38 	bl	800016c <__adddf3>
 800acfc:	4622      	mov	r2, r4
 800acfe:	462b      	mov	r3, r5
 800ad00:	f7f5 fbea 	bl	80004d8 <__aeabi_dmul>
 800ad04:	a33a      	add	r3, pc, #232	; (adr r3, 800adf0 <__kernel_cos+0x148>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	f7f5 fa2d 	bl	8000168 <__aeabi_dsub>
 800ad0e:	4622      	mov	r2, r4
 800ad10:	462b      	mov	r3, r5
 800ad12:	f7f5 fbe1 	bl	80004d8 <__aeabi_dmul>
 800ad16:	a338      	add	r3, pc, #224	; (adr r3, 800adf8 <__kernel_cos+0x150>)
 800ad18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1c:	f7f5 fa26 	bl	800016c <__adddf3>
 800ad20:	4622      	mov	r2, r4
 800ad22:	462b      	mov	r3, r5
 800ad24:	f7f5 fbd8 	bl	80004d8 <__aeabi_dmul>
 800ad28:	a335      	add	r3, pc, #212	; (adr r3, 800ae00 <__kernel_cos+0x158>)
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	f7f5 fa1b 	bl	8000168 <__aeabi_dsub>
 800ad32:	4622      	mov	r2, r4
 800ad34:	462b      	mov	r3, r5
 800ad36:	f7f5 fbcf 	bl	80004d8 <__aeabi_dmul>
 800ad3a:	a333      	add	r3, pc, #204	; (adr r3, 800ae08 <__kernel_cos+0x160>)
 800ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad40:	f7f5 fa14 	bl	800016c <__adddf3>
 800ad44:	4622      	mov	r2, r4
 800ad46:	462b      	mov	r3, r5
 800ad48:	f7f5 fbc6 	bl	80004d8 <__aeabi_dmul>
 800ad4c:	4622      	mov	r2, r4
 800ad4e:	462b      	mov	r3, r5
 800ad50:	f7f5 fbc2 	bl	80004d8 <__aeabi_dmul>
 800ad54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad58:	4604      	mov	r4, r0
 800ad5a:	460d      	mov	r5, r1
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	4639      	mov	r1, r7
 800ad60:	f7f5 fbba 	bl	80004d8 <__aeabi_dmul>
 800ad64:	460b      	mov	r3, r1
 800ad66:	4602      	mov	r2, r0
 800ad68:	4629      	mov	r1, r5
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f7f5 f9fc 	bl	8000168 <__aeabi_dsub>
 800ad70:	4b28      	ldr	r3, [pc, #160]	; (800ae14 <__kernel_cos+0x16c>)
 800ad72:	4680      	mov	r8, r0
 800ad74:	429e      	cmp	r6, r3
 800ad76:	4689      	mov	r9, r1
 800ad78:	dc0e      	bgt.n	800ad98 <__kernel_cos+0xf0>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	4650      	mov	r0, sl
 800ad80:	4659      	mov	r1, fp
 800ad82:	f7f5 f9f1 	bl	8000168 <__aeabi_dsub>
 800ad86:	4602      	mov	r2, r0
 800ad88:	2000      	movs	r0, #0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4922      	ldr	r1, [pc, #136]	; (800ae18 <__kernel_cos+0x170>)
 800ad8e:	f7f5 f9eb 	bl	8000168 <__aeabi_dsub>
 800ad92:	b003      	add	sp, #12
 800ad94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad98:	2400      	movs	r4, #0
 800ad9a:	4b20      	ldr	r3, [pc, #128]	; (800ae1c <__kernel_cos+0x174>)
 800ad9c:	4622      	mov	r2, r4
 800ad9e:	429e      	cmp	r6, r3
 800ada0:	bfcc      	ite	gt
 800ada2:	4d1f      	ldrgt	r5, [pc, #124]	; (800ae20 <__kernel_cos+0x178>)
 800ada4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ada8:	462b      	mov	r3, r5
 800adaa:	2000      	movs	r0, #0
 800adac:	491a      	ldr	r1, [pc, #104]	; (800ae18 <__kernel_cos+0x170>)
 800adae:	f7f5 f9db 	bl	8000168 <__aeabi_dsub>
 800adb2:	4622      	mov	r2, r4
 800adb4:	4606      	mov	r6, r0
 800adb6:	460f      	mov	r7, r1
 800adb8:	462b      	mov	r3, r5
 800adba:	4650      	mov	r0, sl
 800adbc:	4659      	mov	r1, fp
 800adbe:	f7f5 f9d3 	bl	8000168 <__aeabi_dsub>
 800adc2:	4642      	mov	r2, r8
 800adc4:	464b      	mov	r3, r9
 800adc6:	f7f5 f9cf 	bl	8000168 <__aeabi_dsub>
 800adca:	4602      	mov	r2, r0
 800adcc:	460b      	mov	r3, r1
 800adce:	4630      	mov	r0, r6
 800add0:	4639      	mov	r1, r7
 800add2:	e7dc      	b.n	800ad8e <__kernel_cos+0xe6>
 800add4:	2000      	movs	r0, #0
 800add6:	4910      	ldr	r1, [pc, #64]	; (800ae18 <__kernel_cos+0x170>)
 800add8:	e7db      	b.n	800ad92 <__kernel_cos+0xea>
 800adda:	bf00      	nop
 800addc:	f3af 8000 	nop.w
 800ade0:	be8838d4 	.word	0xbe8838d4
 800ade4:	bda8fae9 	.word	0xbda8fae9
 800ade8:	bdb4b1c4 	.word	0xbdb4b1c4
 800adec:	3e21ee9e 	.word	0x3e21ee9e
 800adf0:	809c52ad 	.word	0x809c52ad
 800adf4:	3e927e4f 	.word	0x3e927e4f
 800adf8:	19cb1590 	.word	0x19cb1590
 800adfc:	3efa01a0 	.word	0x3efa01a0
 800ae00:	16c15177 	.word	0x16c15177
 800ae04:	3f56c16c 	.word	0x3f56c16c
 800ae08:	5555554c 	.word	0x5555554c
 800ae0c:	3fa55555 	.word	0x3fa55555
 800ae10:	3fe00000 	.word	0x3fe00000
 800ae14:	3fd33332 	.word	0x3fd33332
 800ae18:	3ff00000 	.word	0x3ff00000
 800ae1c:	3fe90000 	.word	0x3fe90000
 800ae20:	3fd20000 	.word	0x3fd20000

0800ae24 <__kernel_rem_pio2>:
 800ae24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae28:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ae2c:	9307      	str	r3, [sp, #28]
 800ae2e:	9104      	str	r1, [sp, #16]
 800ae30:	4bbf      	ldr	r3, [pc, #764]	; (800b130 <__kernel_rem_pio2+0x30c>)
 800ae32:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ae34:	1ed4      	subs	r4, r2, #3
 800ae36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae3a:	2500      	movs	r5, #0
 800ae3c:	9302      	str	r3, [sp, #8]
 800ae3e:	9b07      	ldr	r3, [sp, #28]
 800ae40:	9008      	str	r0, [sp, #32]
 800ae42:	3b01      	subs	r3, #1
 800ae44:	9306      	str	r3, [sp, #24]
 800ae46:	2318      	movs	r3, #24
 800ae48:	fb94 f4f3 	sdiv	r4, r4, r3
 800ae4c:	f06f 0317 	mvn.w	r3, #23
 800ae50:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800ae54:	fb04 3303 	mla	r3, r4, r3, r3
 800ae58:	eb03 0a02 	add.w	sl, r3, r2
 800ae5c:	9a06      	ldr	r2, [sp, #24]
 800ae5e:	9b02      	ldr	r3, [sp, #8]
 800ae60:	1aa7      	subs	r7, r4, r2
 800ae62:	eb03 0802 	add.w	r8, r3, r2
 800ae66:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ae68:	2200      	movs	r2, #0
 800ae6a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ae6e:	2300      	movs	r3, #0
 800ae70:	ae1e      	add	r6, sp, #120	; 0x78
 800ae72:	4545      	cmp	r5, r8
 800ae74:	dd14      	ble.n	800aea0 <__kernel_rem_pio2+0x7c>
 800ae76:	2600      	movs	r6, #0
 800ae78:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800ae7c:	9b02      	ldr	r3, [sp, #8]
 800ae7e:	429e      	cmp	r6, r3
 800ae80:	dc39      	bgt.n	800aef6 <__kernel_rem_pio2+0xd2>
 800ae82:	9b08      	ldr	r3, [sp, #32]
 800ae84:	f04f 0800 	mov.w	r8, #0
 800ae88:	3b08      	subs	r3, #8
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	9b07      	ldr	r3, [sp, #28]
 800ae8e:	f04f 0900 	mov.w	r9, #0
 800ae92:	199d      	adds	r5, r3, r6
 800ae94:	ab20      	add	r3, sp, #128	; 0x80
 800ae96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae9a:	9305      	str	r3, [sp, #20]
 800ae9c:	2700      	movs	r7, #0
 800ae9e:	e023      	b.n	800aee8 <__kernel_rem_pio2+0xc4>
 800aea0:	42ef      	cmn	r7, r5
 800aea2:	d40b      	bmi.n	800aebc <__kernel_rem_pio2+0x98>
 800aea4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aea8:	e9cd 2300 	strd	r2, r3, [sp]
 800aeac:	f7f5 faaa 	bl	8000404 <__aeabi_i2d>
 800aeb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeb4:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800aeb8:	3501      	adds	r5, #1
 800aeba:	e7da      	b.n	800ae72 <__kernel_rem_pio2+0x4e>
 800aebc:	4610      	mov	r0, r2
 800aebe:	4619      	mov	r1, r3
 800aec0:	e7f8      	b.n	800aeb4 <__kernel_rem_pio2+0x90>
 800aec2:	9905      	ldr	r1, [sp, #20]
 800aec4:	9d00      	ldr	r5, [sp, #0]
 800aec6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800aeca:	9105      	str	r1, [sp, #20]
 800aecc:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800aed0:	9500      	str	r5, [sp, #0]
 800aed2:	f7f5 fb01 	bl	80004d8 <__aeabi_dmul>
 800aed6:	4602      	mov	r2, r0
 800aed8:	460b      	mov	r3, r1
 800aeda:	4640      	mov	r0, r8
 800aedc:	4649      	mov	r1, r9
 800aede:	f7f5 f945 	bl	800016c <__adddf3>
 800aee2:	4680      	mov	r8, r0
 800aee4:	4689      	mov	r9, r1
 800aee6:	3701      	adds	r7, #1
 800aee8:	9b06      	ldr	r3, [sp, #24]
 800aeea:	429f      	cmp	r7, r3
 800aeec:	dde9      	ble.n	800aec2 <__kernel_rem_pio2+0x9e>
 800aeee:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800aef2:	3601      	adds	r6, #1
 800aef4:	e7c2      	b.n	800ae7c <__kernel_rem_pio2+0x58>
 800aef6:	9b02      	ldr	r3, [sp, #8]
 800aef8:	aa0c      	add	r2, sp, #48	; 0x30
 800aefa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aefe:	930b      	str	r3, [sp, #44]	; 0x2c
 800af00:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800af02:	9f02      	ldr	r7, [sp, #8]
 800af04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800af08:	930a      	str	r3, [sp, #40]	; 0x28
 800af0a:	2600      	movs	r6, #0
 800af0c:	ab98      	add	r3, sp, #608	; 0x260
 800af0e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800af12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af16:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af1a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800af1e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800af22:	ab98      	add	r3, sp, #608	; 0x260
 800af24:	445b      	add	r3, fp
 800af26:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800af2a:	1bbb      	subs	r3, r7, r6
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	dc71      	bgt.n	800b014 <__kernel_rem_pio2+0x1f0>
 800af30:	4652      	mov	r2, sl
 800af32:	4640      	mov	r0, r8
 800af34:	4649      	mov	r1, r9
 800af36:	f000 fc97 	bl	800b868 <scalbn>
 800af3a:	2200      	movs	r2, #0
 800af3c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800af40:	4604      	mov	r4, r0
 800af42:	460d      	mov	r5, r1
 800af44:	f7f5 fac8 	bl	80004d8 <__aeabi_dmul>
 800af48:	f000 fb76 	bl	800b638 <floor>
 800af4c:	2200      	movs	r2, #0
 800af4e:	4b79      	ldr	r3, [pc, #484]	; (800b134 <__kernel_rem_pio2+0x310>)
 800af50:	f7f5 fac2 	bl	80004d8 <__aeabi_dmul>
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	4620      	mov	r0, r4
 800af5a:	4629      	mov	r1, r5
 800af5c:	f7f5 f904 	bl	8000168 <__aeabi_dsub>
 800af60:	460d      	mov	r5, r1
 800af62:	4604      	mov	r4, r0
 800af64:	f7f5 fd68 	bl	8000a38 <__aeabi_d2iz>
 800af68:	9005      	str	r0, [sp, #20]
 800af6a:	f7f5 fa4b 	bl	8000404 <__aeabi_i2d>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	4620      	mov	r0, r4
 800af74:	4629      	mov	r1, r5
 800af76:	f7f5 f8f7 	bl	8000168 <__aeabi_dsub>
 800af7a:	f1ba 0f00 	cmp.w	sl, #0
 800af7e:	4680      	mov	r8, r0
 800af80:	4689      	mov	r9, r1
 800af82:	dd6c      	ble.n	800b05e <__kernel_rem_pio2+0x23a>
 800af84:	1e7a      	subs	r2, r7, #1
 800af86:	ab0c      	add	r3, sp, #48	; 0x30
 800af88:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800af8c:	f1ca 0118 	rsb	r1, sl, #24
 800af90:	9c05      	ldr	r4, [sp, #20]
 800af92:	fa40 f301 	asr.w	r3, r0, r1
 800af96:	441c      	add	r4, r3
 800af98:	408b      	lsls	r3, r1
 800af9a:	1ac0      	subs	r0, r0, r3
 800af9c:	ab0c      	add	r3, sp, #48	; 0x30
 800af9e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800afa2:	f1ca 0317 	rsb	r3, sl, #23
 800afa6:	9405      	str	r4, [sp, #20]
 800afa8:	fa40 f303 	asr.w	r3, r0, r3
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	9b00      	ldr	r3, [sp, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	dd62      	ble.n	800b07a <__kernel_rem_pio2+0x256>
 800afb4:	2200      	movs	r2, #0
 800afb6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800afba:	4614      	mov	r4, r2
 800afbc:	9b05      	ldr	r3, [sp, #20]
 800afbe:	3301      	adds	r3, #1
 800afc0:	9305      	str	r3, [sp, #20]
 800afc2:	4297      	cmp	r7, r2
 800afc4:	f300 809f 	bgt.w	800b106 <__kernel_rem_pio2+0x2e2>
 800afc8:	f1ba 0f00 	cmp.w	sl, #0
 800afcc:	dd07      	ble.n	800afde <__kernel_rem_pio2+0x1ba>
 800afce:	f1ba 0f01 	cmp.w	sl, #1
 800afd2:	f000 80bb 	beq.w	800b14c <__kernel_rem_pio2+0x328>
 800afd6:	f1ba 0f02 	cmp.w	sl, #2
 800afda:	f000 80c1 	beq.w	800b160 <__kernel_rem_pio2+0x33c>
 800afde:	9b00      	ldr	r3, [sp, #0]
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d14a      	bne.n	800b07a <__kernel_rem_pio2+0x256>
 800afe4:	4642      	mov	r2, r8
 800afe6:	464b      	mov	r3, r9
 800afe8:	2000      	movs	r0, #0
 800afea:	4953      	ldr	r1, [pc, #332]	; (800b138 <__kernel_rem_pio2+0x314>)
 800afec:	f7f5 f8bc 	bl	8000168 <__aeabi_dsub>
 800aff0:	4680      	mov	r8, r0
 800aff2:	4689      	mov	r9, r1
 800aff4:	2c00      	cmp	r4, #0
 800aff6:	d040      	beq.n	800b07a <__kernel_rem_pio2+0x256>
 800aff8:	4652      	mov	r2, sl
 800affa:	2000      	movs	r0, #0
 800affc:	494e      	ldr	r1, [pc, #312]	; (800b138 <__kernel_rem_pio2+0x314>)
 800affe:	f000 fc33 	bl	800b868 <scalbn>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	4640      	mov	r0, r8
 800b008:	4649      	mov	r1, r9
 800b00a:	f7f5 f8ad 	bl	8000168 <__aeabi_dsub>
 800b00e:	4680      	mov	r8, r0
 800b010:	4689      	mov	r9, r1
 800b012:	e032      	b.n	800b07a <__kernel_rem_pio2+0x256>
 800b014:	2200      	movs	r2, #0
 800b016:	4b49      	ldr	r3, [pc, #292]	; (800b13c <__kernel_rem_pio2+0x318>)
 800b018:	4640      	mov	r0, r8
 800b01a:	4649      	mov	r1, r9
 800b01c:	f7f5 fa5c 	bl	80004d8 <__aeabi_dmul>
 800b020:	f7f5 fd0a 	bl	8000a38 <__aeabi_d2iz>
 800b024:	f7f5 f9ee 	bl	8000404 <__aeabi_i2d>
 800b028:	2200      	movs	r2, #0
 800b02a:	4b45      	ldr	r3, [pc, #276]	; (800b140 <__kernel_rem_pio2+0x31c>)
 800b02c:	e9cd 0100 	strd	r0, r1, [sp]
 800b030:	f7f5 fa52 	bl	80004d8 <__aeabi_dmul>
 800b034:	4602      	mov	r2, r0
 800b036:	460b      	mov	r3, r1
 800b038:	4640      	mov	r0, r8
 800b03a:	4649      	mov	r1, r9
 800b03c:	f7f5 f894 	bl	8000168 <__aeabi_dsub>
 800b040:	f7f5 fcfa 	bl	8000a38 <__aeabi_d2iz>
 800b044:	ab0c      	add	r3, sp, #48	; 0x30
 800b046:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b04a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b04e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b052:	f7f5 f88b 	bl	800016c <__adddf3>
 800b056:	3601      	adds	r6, #1
 800b058:	4680      	mov	r8, r0
 800b05a:	4689      	mov	r9, r1
 800b05c:	e765      	b.n	800af2a <__kernel_rem_pio2+0x106>
 800b05e:	d105      	bne.n	800b06c <__kernel_rem_pio2+0x248>
 800b060:	1e7b      	subs	r3, r7, #1
 800b062:	aa0c      	add	r2, sp, #48	; 0x30
 800b064:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b068:	15c3      	asrs	r3, r0, #23
 800b06a:	e79f      	b.n	800afac <__kernel_rem_pio2+0x188>
 800b06c:	2200      	movs	r2, #0
 800b06e:	4b35      	ldr	r3, [pc, #212]	; (800b144 <__kernel_rem_pio2+0x320>)
 800b070:	f7f5 fcb8 	bl	80009e4 <__aeabi_dcmpge>
 800b074:	2800      	cmp	r0, #0
 800b076:	d143      	bne.n	800b100 <__kernel_rem_pio2+0x2dc>
 800b078:	9000      	str	r0, [sp, #0]
 800b07a:	2200      	movs	r2, #0
 800b07c:	2300      	movs	r3, #0
 800b07e:	4640      	mov	r0, r8
 800b080:	4649      	mov	r1, r9
 800b082:	f7f5 fc91 	bl	80009a8 <__aeabi_dcmpeq>
 800b086:	2800      	cmp	r0, #0
 800b088:	f000 80c3 	beq.w	800b212 <__kernel_rem_pio2+0x3ee>
 800b08c:	1e7c      	subs	r4, r7, #1
 800b08e:	4623      	mov	r3, r4
 800b090:	2200      	movs	r2, #0
 800b092:	9902      	ldr	r1, [sp, #8]
 800b094:	428b      	cmp	r3, r1
 800b096:	da6a      	bge.n	800b16e <__kernel_rem_pio2+0x34a>
 800b098:	2a00      	cmp	r2, #0
 800b09a:	f000 8084 	beq.w	800b1a6 <__kernel_rem_pio2+0x382>
 800b09e:	ab0c      	add	r3, sp, #48	; 0x30
 800b0a0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b0a4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 80b0 	beq.w	800b20e <__kernel_rem_pio2+0x3ea>
 800b0ae:	4652      	mov	r2, sl
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	4921      	ldr	r1, [pc, #132]	; (800b138 <__kernel_rem_pio2+0x314>)
 800b0b4:	f000 fbd8 	bl	800b868 <scalbn>
 800b0b8:	4625      	mov	r5, r4
 800b0ba:	4606      	mov	r6, r0
 800b0bc:	460f      	mov	r7, r1
 800b0be:	f04f 0a00 	mov.w	sl, #0
 800b0c2:	00e3      	lsls	r3, r4, #3
 800b0c4:	aa98      	add	r2, sp, #608	; 0x260
 800b0c6:	eb02 0803 	add.w	r8, r2, r3
 800b0ca:	f8df b070 	ldr.w	fp, [pc, #112]	; 800b13c <__kernel_rem_pio2+0x318>
 800b0ce:	9306      	str	r3, [sp, #24]
 800b0d0:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800b0d4:	2d00      	cmp	r5, #0
 800b0d6:	f280 80d2 	bge.w	800b27e <__kernel_rem_pio2+0x45a>
 800b0da:	2500      	movs	r5, #0
 800b0dc:	9a06      	ldr	r2, [sp, #24]
 800b0de:	ab98      	add	r3, sp, #608	; 0x260
 800b0e0:	189e      	adds	r6, r3, r2
 800b0e2:	3ea8      	subs	r6, #168	; 0xa8
 800b0e4:	1b63      	subs	r3, r4, r5
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f2c0 80f9 	blt.w	800b2de <__kernel_rem_pio2+0x4ba>
 800b0ec:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800b148 <__kernel_rem_pio2+0x324>
 800b0f0:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800b0f4:	f04f 0a00 	mov.w	sl, #0
 800b0f8:	f04f 0b00 	mov.w	fp, #0
 800b0fc:	2700      	movs	r7, #0
 800b0fe:	e0e2      	b.n	800b2c6 <__kernel_rem_pio2+0x4a2>
 800b100:	2302      	movs	r3, #2
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	e756      	b.n	800afb4 <__kernel_rem_pio2+0x190>
 800b106:	ab0c      	add	r3, sp, #48	; 0x30
 800b108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b10c:	b94c      	cbnz	r4, 800b122 <__kernel_rem_pio2+0x2fe>
 800b10e:	b12b      	cbz	r3, 800b11c <__kernel_rem_pio2+0x2f8>
 800b110:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b114:	a80c      	add	r0, sp, #48	; 0x30
 800b116:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b11a:	2301      	movs	r3, #1
 800b11c:	3201      	adds	r2, #1
 800b11e:	461c      	mov	r4, r3
 800b120:	e74f      	b.n	800afc2 <__kernel_rem_pio2+0x19e>
 800b122:	1acb      	subs	r3, r1, r3
 800b124:	a80c      	add	r0, sp, #48	; 0x30
 800b126:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b12a:	4623      	mov	r3, r4
 800b12c:	e7f6      	b.n	800b11c <__kernel_rem_pio2+0x2f8>
 800b12e:	bf00      	nop
 800b130:	0800d268 	.word	0x0800d268
 800b134:	40200000 	.word	0x40200000
 800b138:	3ff00000 	.word	0x3ff00000
 800b13c:	3e700000 	.word	0x3e700000
 800b140:	41700000 	.word	0x41700000
 800b144:	3fe00000 	.word	0x3fe00000
 800b148:	0800d220 	.word	0x0800d220
 800b14c:	1e7a      	subs	r2, r7, #1
 800b14e:	ab0c      	add	r3, sp, #48	; 0x30
 800b150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b154:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b158:	a90c      	add	r1, sp, #48	; 0x30
 800b15a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b15e:	e73e      	b.n	800afde <__kernel_rem_pio2+0x1ba>
 800b160:	1e7a      	subs	r2, r7, #1
 800b162:	ab0c      	add	r3, sp, #48	; 0x30
 800b164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b168:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b16c:	e7f4      	b.n	800b158 <__kernel_rem_pio2+0x334>
 800b16e:	a90c      	add	r1, sp, #48	; 0x30
 800b170:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b174:	3b01      	subs	r3, #1
 800b176:	430a      	orrs	r2, r1
 800b178:	e78b      	b.n	800b092 <__kernel_rem_pio2+0x26e>
 800b17a:	3401      	adds	r4, #1
 800b17c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b180:	2a00      	cmp	r2, #0
 800b182:	d0fa      	beq.n	800b17a <__kernel_rem_pio2+0x356>
 800b184:	ab98      	add	r3, sp, #608	; 0x260
 800b186:	449b      	add	fp, r3
 800b188:	9b07      	ldr	r3, [sp, #28]
 800b18a:	1c7e      	adds	r6, r7, #1
 800b18c:	19dd      	adds	r5, r3, r7
 800b18e:	ab98      	add	r3, sp, #608	; 0x260
 800b190:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b194:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800b198:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800b19c:	443c      	add	r4, r7
 800b19e:	42b4      	cmp	r4, r6
 800b1a0:	da04      	bge.n	800b1ac <__kernel_rem_pio2+0x388>
 800b1a2:	4627      	mov	r7, r4
 800b1a4:	e6b1      	b.n	800af0a <__kernel_rem_pio2+0xe6>
 800b1a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1a8:	2401      	movs	r4, #1
 800b1aa:	e7e7      	b.n	800b17c <__kernel_rem_pio2+0x358>
 800b1ac:	f105 0308 	add.w	r3, r5, #8
 800b1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b1b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1b4:	2700      	movs	r7, #0
 800b1b6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b1ba:	f7f5 f923 	bl	8000404 <__aeabi_i2d>
 800b1be:	f04f 0800 	mov.w	r8, #0
 800b1c2:	f04f 0900 	mov.w	r9, #0
 800b1c6:	9b08      	ldr	r3, [sp, #32]
 800b1c8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b1cc:	3b08      	subs	r3, #8
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	f105 0310 	add.w	r3, r5, #16
 800b1d4:	9305      	str	r3, [sp, #20]
 800b1d6:	9b06      	ldr	r3, [sp, #24]
 800b1d8:	429f      	cmp	r7, r3
 800b1da:	dd04      	ble.n	800b1e6 <__kernel_rem_pio2+0x3c2>
 800b1dc:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800b1e0:	3601      	adds	r6, #1
 800b1e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b1e4:	e7db      	b.n	800b19e <__kernel_rem_pio2+0x37a>
 800b1e6:	9905      	ldr	r1, [sp, #20]
 800b1e8:	9d00      	ldr	r5, [sp, #0]
 800b1ea:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b1ee:	9105      	str	r1, [sp, #20]
 800b1f0:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800b1f4:	9500      	str	r5, [sp, #0]
 800b1f6:	f7f5 f96f 	bl	80004d8 <__aeabi_dmul>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	4640      	mov	r0, r8
 800b200:	4649      	mov	r1, r9
 800b202:	f7f4 ffb3 	bl	800016c <__adddf3>
 800b206:	3701      	adds	r7, #1
 800b208:	4680      	mov	r8, r0
 800b20a:	4689      	mov	r9, r1
 800b20c:	e7e3      	b.n	800b1d6 <__kernel_rem_pio2+0x3b2>
 800b20e:	3c01      	subs	r4, #1
 800b210:	e745      	b.n	800b09e <__kernel_rem_pio2+0x27a>
 800b212:	f1ca 0200 	rsb	r2, sl, #0
 800b216:	4640      	mov	r0, r8
 800b218:	4649      	mov	r1, r9
 800b21a:	f000 fb25 	bl	800b868 <scalbn>
 800b21e:	2200      	movs	r2, #0
 800b220:	4ba3      	ldr	r3, [pc, #652]	; (800b4b0 <__kernel_rem_pio2+0x68c>)
 800b222:	4604      	mov	r4, r0
 800b224:	460d      	mov	r5, r1
 800b226:	f7f5 fbdd 	bl	80009e4 <__aeabi_dcmpge>
 800b22a:	b1f8      	cbz	r0, 800b26c <__kernel_rem_pio2+0x448>
 800b22c:	2200      	movs	r2, #0
 800b22e:	4ba1      	ldr	r3, [pc, #644]	; (800b4b4 <__kernel_rem_pio2+0x690>)
 800b230:	4620      	mov	r0, r4
 800b232:	4629      	mov	r1, r5
 800b234:	f7f5 f950 	bl	80004d8 <__aeabi_dmul>
 800b238:	f7f5 fbfe 	bl	8000a38 <__aeabi_d2iz>
 800b23c:	4606      	mov	r6, r0
 800b23e:	f7f5 f8e1 	bl	8000404 <__aeabi_i2d>
 800b242:	2200      	movs	r2, #0
 800b244:	4b9a      	ldr	r3, [pc, #616]	; (800b4b0 <__kernel_rem_pio2+0x68c>)
 800b246:	f7f5 f947 	bl	80004d8 <__aeabi_dmul>
 800b24a:	460b      	mov	r3, r1
 800b24c:	4602      	mov	r2, r0
 800b24e:	4629      	mov	r1, r5
 800b250:	4620      	mov	r0, r4
 800b252:	f7f4 ff89 	bl	8000168 <__aeabi_dsub>
 800b256:	f7f5 fbef 	bl	8000a38 <__aeabi_d2iz>
 800b25a:	1c7c      	adds	r4, r7, #1
 800b25c:	ab0c      	add	r3, sp, #48	; 0x30
 800b25e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b262:	f10a 0a18 	add.w	sl, sl, #24
 800b266:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800b26a:	e720      	b.n	800b0ae <__kernel_rem_pio2+0x28a>
 800b26c:	4620      	mov	r0, r4
 800b26e:	4629      	mov	r1, r5
 800b270:	f7f5 fbe2 	bl	8000a38 <__aeabi_d2iz>
 800b274:	ab0c      	add	r3, sp, #48	; 0x30
 800b276:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b27a:	463c      	mov	r4, r7
 800b27c:	e717      	b.n	800b0ae <__kernel_rem_pio2+0x28a>
 800b27e:	ab0c      	add	r3, sp, #48	; 0x30
 800b280:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b284:	f7f5 f8be 	bl	8000404 <__aeabi_i2d>
 800b288:	4632      	mov	r2, r6
 800b28a:	463b      	mov	r3, r7
 800b28c:	f7f5 f924 	bl	80004d8 <__aeabi_dmul>
 800b290:	4652      	mov	r2, sl
 800b292:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b296:	465b      	mov	r3, fp
 800b298:	4630      	mov	r0, r6
 800b29a:	4639      	mov	r1, r7
 800b29c:	f7f5 f91c 	bl	80004d8 <__aeabi_dmul>
 800b2a0:	3d01      	subs	r5, #1
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	460f      	mov	r7, r1
 800b2a6:	e715      	b.n	800b0d4 <__kernel_rem_pio2+0x2b0>
 800b2a8:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800b2ac:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800b2b0:	f7f5 f912 	bl	80004d8 <__aeabi_dmul>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	4650      	mov	r0, sl
 800b2ba:	4659      	mov	r1, fp
 800b2bc:	f7f4 ff56 	bl	800016c <__adddf3>
 800b2c0:	4682      	mov	sl, r0
 800b2c2:	468b      	mov	fp, r1
 800b2c4:	3701      	adds	r7, #1
 800b2c6:	9b02      	ldr	r3, [sp, #8]
 800b2c8:	429f      	cmp	r7, r3
 800b2ca:	dc01      	bgt.n	800b2d0 <__kernel_rem_pio2+0x4ac>
 800b2cc:	42bd      	cmp	r5, r7
 800b2ce:	daeb      	bge.n	800b2a8 <__kernel_rem_pio2+0x484>
 800b2d0:	ab48      	add	r3, sp, #288	; 0x120
 800b2d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b2d6:	e9c3 ab00 	strd	sl, fp, [r3]
 800b2da:	3501      	adds	r5, #1
 800b2dc:	e702      	b.n	800b0e4 <__kernel_rem_pio2+0x2c0>
 800b2de:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b2e0:	2b03      	cmp	r3, #3
 800b2e2:	d86c      	bhi.n	800b3be <__kernel_rem_pio2+0x59a>
 800b2e4:	e8df f003 	tbb	[pc, r3]
 800b2e8:	022f2f59 	.word	0x022f2f59
 800b2ec:	9a06      	ldr	r2, [sp, #24]
 800b2ee:	ab48      	add	r3, sp, #288	; 0x120
 800b2f0:	189d      	adds	r5, r3, r2
 800b2f2:	46aa      	mov	sl, r5
 800b2f4:	46a3      	mov	fp, r4
 800b2f6:	f1bb 0f00 	cmp.w	fp, #0
 800b2fa:	f300 8087 	bgt.w	800b40c <__kernel_rem_pio2+0x5e8>
 800b2fe:	46a2      	mov	sl, r4
 800b300:	f1ba 0f01 	cmp.w	sl, #1
 800b304:	f300 809f 	bgt.w	800b446 <__kernel_rem_pio2+0x622>
 800b308:	2700      	movs	r7, #0
 800b30a:	463e      	mov	r6, r7
 800b30c:	9d06      	ldr	r5, [sp, #24]
 800b30e:	ab48      	add	r3, sp, #288	; 0x120
 800b310:	3508      	adds	r5, #8
 800b312:	441d      	add	r5, r3
 800b314:	2c01      	cmp	r4, #1
 800b316:	f300 80b3 	bgt.w	800b480 <__kernel_rem_pio2+0x65c>
 800b31a:	9b00      	ldr	r3, [sp, #0]
 800b31c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800b31e:	9849      	ldr	r0, [sp, #292]	; 0x124
 800b320:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800b322:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800b324:	2b00      	cmp	r3, #0
 800b326:	f040 80b5 	bne.w	800b494 <__kernel_rem_pio2+0x670>
 800b32a:	4603      	mov	r3, r0
 800b32c:	462a      	mov	r2, r5
 800b32e:	9804      	ldr	r0, [sp, #16]
 800b330:	e9c0 2300 	strd	r2, r3, [r0]
 800b334:	4622      	mov	r2, r4
 800b336:	460b      	mov	r3, r1
 800b338:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b33c:	463a      	mov	r2, r7
 800b33e:	4633      	mov	r3, r6
 800b340:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b344:	e03b      	b.n	800b3be <__kernel_rem_pio2+0x59a>
 800b346:	f04f 0c00 	mov.w	ip, #0
 800b34a:	4626      	mov	r6, r4
 800b34c:	4667      	mov	r7, ip
 800b34e:	9d06      	ldr	r5, [sp, #24]
 800b350:	ab48      	add	r3, sp, #288	; 0x120
 800b352:	3508      	adds	r5, #8
 800b354:	441d      	add	r5, r3
 800b356:	2e00      	cmp	r6, #0
 800b358:	da42      	bge.n	800b3e0 <__kernel_rem_pio2+0x5bc>
 800b35a:	9b00      	ldr	r3, [sp, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d049      	beq.n	800b3f4 <__kernel_rem_pio2+0x5d0>
 800b360:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800b364:	4662      	mov	r2, ip
 800b366:	460b      	mov	r3, r1
 800b368:	9904      	ldr	r1, [sp, #16]
 800b36a:	2601      	movs	r6, #1
 800b36c:	e9c1 2300 	strd	r2, r3, [r1]
 800b370:	a948      	add	r1, sp, #288	; 0x120
 800b372:	463b      	mov	r3, r7
 800b374:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b378:	f7f4 fef6 	bl	8000168 <__aeabi_dsub>
 800b37c:	4684      	mov	ip, r0
 800b37e:	460f      	mov	r7, r1
 800b380:	ad48      	add	r5, sp, #288	; 0x120
 800b382:	42b4      	cmp	r4, r6
 800b384:	da38      	bge.n	800b3f8 <__kernel_rem_pio2+0x5d4>
 800b386:	9b00      	ldr	r3, [sp, #0]
 800b388:	b10b      	cbz	r3, 800b38e <__kernel_rem_pio2+0x56a>
 800b38a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b38e:	4662      	mov	r2, ip
 800b390:	463b      	mov	r3, r7
 800b392:	9904      	ldr	r1, [sp, #16]
 800b394:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800b398:	e011      	b.n	800b3be <__kernel_rem_pio2+0x59a>
 800b39a:	2700      	movs	r7, #0
 800b39c:	463d      	mov	r5, r7
 800b39e:	9b06      	ldr	r3, [sp, #24]
 800b3a0:	aa98      	add	r2, sp, #608	; 0x260
 800b3a2:	4413      	add	r3, r2
 800b3a4:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800b3a8:	2c00      	cmp	r4, #0
 800b3aa:	da0f      	bge.n	800b3cc <__kernel_rem_pio2+0x5a8>
 800b3ac:	9b00      	ldr	r3, [sp, #0]
 800b3ae:	b10b      	cbz	r3, 800b3b4 <__kernel_rem_pio2+0x590>
 800b3b0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800b3b4:	463a      	mov	r2, r7
 800b3b6:	462b      	mov	r3, r5
 800b3b8:	9904      	ldr	r1, [sp, #16]
 800b3ba:	e9c1 2300 	strd	r2, r3, [r1]
 800b3be:	9b05      	ldr	r3, [sp, #20]
 800b3c0:	f003 0007 	and.w	r0, r3, #7
 800b3c4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3cc:	4638      	mov	r0, r7
 800b3ce:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b3d2:	4629      	mov	r1, r5
 800b3d4:	f7f4 feca 	bl	800016c <__adddf3>
 800b3d8:	3c01      	subs	r4, #1
 800b3da:	4607      	mov	r7, r0
 800b3dc:	460d      	mov	r5, r1
 800b3de:	e7e3      	b.n	800b3a8 <__kernel_rem_pio2+0x584>
 800b3e0:	4660      	mov	r0, ip
 800b3e2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b3e6:	4639      	mov	r1, r7
 800b3e8:	f7f4 fec0 	bl	800016c <__adddf3>
 800b3ec:	3e01      	subs	r6, #1
 800b3ee:	4684      	mov	ip, r0
 800b3f0:	460f      	mov	r7, r1
 800b3f2:	e7b0      	b.n	800b356 <__kernel_rem_pio2+0x532>
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	e7b5      	b.n	800b364 <__kernel_rem_pio2+0x540>
 800b3f8:	4660      	mov	r0, ip
 800b3fa:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800b3fe:	4639      	mov	r1, r7
 800b400:	f7f4 feb4 	bl	800016c <__adddf3>
 800b404:	3601      	adds	r6, #1
 800b406:	4684      	mov	ip, r0
 800b408:	460f      	mov	r7, r1
 800b40a:	e7ba      	b.n	800b382 <__kernel_rem_pio2+0x55e>
 800b40c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800b410:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800b414:	4640      	mov	r0, r8
 800b416:	4649      	mov	r1, r9
 800b418:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b41c:	f7f4 fea6 	bl	800016c <__adddf3>
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	4606      	mov	r6, r0
 800b426:	460f      	mov	r7, r1
 800b428:	4640      	mov	r0, r8
 800b42a:	4649      	mov	r1, r9
 800b42c:	f7f4 fe9c 	bl	8000168 <__aeabi_dsub>
 800b430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b434:	f7f4 fe9a 	bl	800016c <__adddf3>
 800b438:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b43c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b440:	e9ca 6700 	strd	r6, r7, [sl]
 800b444:	e757      	b.n	800b2f6 <__kernel_rem_pio2+0x4d2>
 800b446:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800b44a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800b44e:	4630      	mov	r0, r6
 800b450:	4639      	mov	r1, r7
 800b452:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b456:	f7f4 fe89 	bl	800016c <__adddf3>
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	4680      	mov	r8, r0
 800b460:	4689      	mov	r9, r1
 800b462:	4630      	mov	r0, r6
 800b464:	4639      	mov	r1, r7
 800b466:	f7f4 fe7f 	bl	8000168 <__aeabi_dsub>
 800b46a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b46e:	f7f4 fe7d 	bl	800016c <__adddf3>
 800b472:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b476:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b47a:	e9c5 8900 	strd	r8, r9, [r5]
 800b47e:	e73f      	b.n	800b300 <__kernel_rem_pio2+0x4dc>
 800b480:	4638      	mov	r0, r7
 800b482:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b486:	4631      	mov	r1, r6
 800b488:	f7f4 fe70 	bl	800016c <__adddf3>
 800b48c:	3c01      	subs	r4, #1
 800b48e:	4607      	mov	r7, r0
 800b490:	460e      	mov	r6, r1
 800b492:	e73f      	b.n	800b314 <__kernel_rem_pio2+0x4f0>
 800b494:	9b04      	ldr	r3, [sp, #16]
 800b496:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b49a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b49e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800b4a2:	601d      	str	r5, [r3, #0]
 800b4a4:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800b4a8:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800b4ac:	615e      	str	r6, [r3, #20]
 800b4ae:	e786      	b.n	800b3be <__kernel_rem_pio2+0x59a>
 800b4b0:	41700000 	.word	0x41700000
 800b4b4:	3e700000 	.word	0x3e700000

0800b4b8 <__kernel_sin>:
 800b4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4bc:	b086      	sub	sp, #24
 800b4be:	e9cd 2300 	strd	r2, r3, [sp]
 800b4c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b4c6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b4ca:	4682      	mov	sl, r0
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b4d0:	da03      	bge.n	800b4da <__kernel_sin+0x22>
 800b4d2:	f7f5 fab1 	bl	8000a38 <__aeabi_d2iz>
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	d050      	beq.n	800b57c <__kernel_sin+0xc4>
 800b4da:	4652      	mov	r2, sl
 800b4dc:	4623      	mov	r3, r4
 800b4de:	4650      	mov	r0, sl
 800b4e0:	4621      	mov	r1, r4
 800b4e2:	f7f4 fff9 	bl	80004d8 <__aeabi_dmul>
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	460f      	mov	r7, r1
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	4650      	mov	r0, sl
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	f7f4 fff1 	bl	80004d8 <__aeabi_dmul>
 800b4f6:	a33e      	add	r3, pc, #248	; (adr r3, 800b5f0 <__kernel_sin+0x138>)
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	4680      	mov	r8, r0
 800b4fe:	4689      	mov	r9, r1
 800b500:	4630      	mov	r0, r6
 800b502:	4639      	mov	r1, r7
 800b504:	f7f4 ffe8 	bl	80004d8 <__aeabi_dmul>
 800b508:	a33b      	add	r3, pc, #236	; (adr r3, 800b5f8 <__kernel_sin+0x140>)
 800b50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50e:	f7f4 fe2b 	bl	8000168 <__aeabi_dsub>
 800b512:	4632      	mov	r2, r6
 800b514:	463b      	mov	r3, r7
 800b516:	f7f4 ffdf 	bl	80004d8 <__aeabi_dmul>
 800b51a:	a339      	add	r3, pc, #228	; (adr r3, 800b600 <__kernel_sin+0x148>)
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	f7f4 fe24 	bl	800016c <__adddf3>
 800b524:	4632      	mov	r2, r6
 800b526:	463b      	mov	r3, r7
 800b528:	f7f4 ffd6 	bl	80004d8 <__aeabi_dmul>
 800b52c:	a336      	add	r3, pc, #216	; (adr r3, 800b608 <__kernel_sin+0x150>)
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	f7f4 fe19 	bl	8000168 <__aeabi_dsub>
 800b536:	4632      	mov	r2, r6
 800b538:	463b      	mov	r3, r7
 800b53a:	f7f4 ffcd 	bl	80004d8 <__aeabi_dmul>
 800b53e:	a334      	add	r3, pc, #208	; (adr r3, 800b610 <__kernel_sin+0x158>)
 800b540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b544:	f7f4 fe12 	bl	800016c <__adddf3>
 800b548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b54c:	b9dd      	cbnz	r5, 800b586 <__kernel_sin+0xce>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	4630      	mov	r0, r6
 800b554:	4639      	mov	r1, r7
 800b556:	f7f4 ffbf 	bl	80004d8 <__aeabi_dmul>
 800b55a:	a32f      	add	r3, pc, #188	; (adr r3, 800b618 <__kernel_sin+0x160>)
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	f7f4 fe02 	bl	8000168 <__aeabi_dsub>
 800b564:	4642      	mov	r2, r8
 800b566:	464b      	mov	r3, r9
 800b568:	f7f4 ffb6 	bl	80004d8 <__aeabi_dmul>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4650      	mov	r0, sl
 800b572:	4621      	mov	r1, r4
 800b574:	f7f4 fdfa 	bl	800016c <__adddf3>
 800b578:	4682      	mov	sl, r0
 800b57a:	460c      	mov	r4, r1
 800b57c:	4650      	mov	r0, sl
 800b57e:	4621      	mov	r1, r4
 800b580:	b006      	add	sp, #24
 800b582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b586:	2200      	movs	r2, #0
 800b588:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b58c:	4b24      	ldr	r3, [pc, #144]	; (800b620 <__kernel_sin+0x168>)
 800b58e:	f7f4 ffa3 	bl	80004d8 <__aeabi_dmul>
 800b592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b596:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b59a:	4640      	mov	r0, r8
 800b59c:	4649      	mov	r1, r9
 800b59e:	f7f4 ff9b 	bl	80004d8 <__aeabi_dmul>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5aa:	f7f4 fddd 	bl	8000168 <__aeabi_dsub>
 800b5ae:	4632      	mov	r2, r6
 800b5b0:	463b      	mov	r3, r7
 800b5b2:	f7f4 ff91 	bl	80004d8 <__aeabi_dmul>
 800b5b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5ba:	f7f4 fdd5 	bl	8000168 <__aeabi_dsub>
 800b5be:	a316      	add	r3, pc, #88	; (adr r3, 800b618 <__kernel_sin+0x160>)
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	460f      	mov	r7, r1
 800b5c8:	4640      	mov	r0, r8
 800b5ca:	4649      	mov	r1, r9
 800b5cc:	f7f4 ff84 	bl	80004d8 <__aeabi_dmul>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	4639      	mov	r1, r7
 800b5d8:	f7f4 fdc8 	bl	800016c <__adddf3>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4650      	mov	r0, sl
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	f7f4 fdc0 	bl	8000168 <__aeabi_dsub>
 800b5e8:	e7c6      	b.n	800b578 <__kernel_sin+0xc0>
 800b5ea:	bf00      	nop
 800b5ec:	f3af 8000 	nop.w
 800b5f0:	5acfd57c 	.word	0x5acfd57c
 800b5f4:	3de5d93a 	.word	0x3de5d93a
 800b5f8:	8a2b9ceb 	.word	0x8a2b9ceb
 800b5fc:	3e5ae5e6 	.word	0x3e5ae5e6
 800b600:	57b1fe7d 	.word	0x57b1fe7d
 800b604:	3ec71de3 	.word	0x3ec71de3
 800b608:	19c161d5 	.word	0x19c161d5
 800b60c:	3f2a01a0 	.word	0x3f2a01a0
 800b610:	1110f8a6 	.word	0x1110f8a6
 800b614:	3f811111 	.word	0x3f811111
 800b618:	55555549 	.word	0x55555549
 800b61c:	3fc55555 	.word	0x3fc55555
 800b620:	3fe00000 	.word	0x3fe00000

0800b624 <fabs>:
 800b624:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b628:	4619      	mov	r1, r3
 800b62a:	4770      	bx	lr

0800b62c <finite>:
 800b62c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800b630:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800b634:	0fc0      	lsrs	r0, r0, #31
 800b636:	4770      	bx	lr

0800b638 <floor>:
 800b638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b63c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800b640:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800b644:	2e13      	cmp	r6, #19
 800b646:	4607      	mov	r7, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	460c      	mov	r4, r1
 800b64c:	4605      	mov	r5, r0
 800b64e:	dc35      	bgt.n	800b6bc <floor+0x84>
 800b650:	2e00      	cmp	r6, #0
 800b652:	da16      	bge.n	800b682 <floor+0x4a>
 800b654:	a336      	add	r3, pc, #216	; (adr r3, 800b730 <floor+0xf8>)
 800b656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65a:	f7f4 fd87 	bl	800016c <__adddf3>
 800b65e:	2200      	movs	r2, #0
 800b660:	2300      	movs	r3, #0
 800b662:	f7f5 f9c9 	bl	80009f8 <__aeabi_dcmpgt>
 800b666:	b148      	cbz	r0, 800b67c <floor+0x44>
 800b668:	2c00      	cmp	r4, #0
 800b66a:	da5b      	bge.n	800b724 <floor+0xec>
 800b66c:	2500      	movs	r5, #0
 800b66e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b672:	4a31      	ldr	r2, [pc, #196]	; (800b738 <floor+0x100>)
 800b674:	433b      	orrs	r3, r7
 800b676:	42ab      	cmp	r3, r5
 800b678:	bf18      	it	ne
 800b67a:	4614      	movne	r4, r2
 800b67c:	4623      	mov	r3, r4
 800b67e:	462f      	mov	r7, r5
 800b680:	e026      	b.n	800b6d0 <floor+0x98>
 800b682:	4a2e      	ldr	r2, [pc, #184]	; (800b73c <floor+0x104>)
 800b684:	fa42 f806 	asr.w	r8, r2, r6
 800b688:	ea01 0208 	and.w	r2, r1, r8
 800b68c:	4302      	orrs	r2, r0
 800b68e:	d01f      	beq.n	800b6d0 <floor+0x98>
 800b690:	a327      	add	r3, pc, #156	; (adr r3, 800b730 <floor+0xf8>)
 800b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b696:	f7f4 fd69 	bl	800016c <__adddf3>
 800b69a:	2200      	movs	r2, #0
 800b69c:	2300      	movs	r3, #0
 800b69e:	f7f5 f9ab 	bl	80009f8 <__aeabi_dcmpgt>
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	d0ea      	beq.n	800b67c <floor+0x44>
 800b6a6:	2c00      	cmp	r4, #0
 800b6a8:	bfbe      	ittt	lt
 800b6aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b6ae:	fa43 f606 	asrlt.w	r6, r3, r6
 800b6b2:	19a4      	addlt	r4, r4, r6
 800b6b4:	ea24 0408 	bic.w	r4, r4, r8
 800b6b8:	2500      	movs	r5, #0
 800b6ba:	e7df      	b.n	800b67c <floor+0x44>
 800b6bc:	2e33      	cmp	r6, #51	; 0x33
 800b6be:	dd0b      	ble.n	800b6d8 <floor+0xa0>
 800b6c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b6c4:	d104      	bne.n	800b6d0 <floor+0x98>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	f7f4 fd50 	bl	800016c <__adddf3>
 800b6cc:	4607      	mov	r7, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6dc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b6e0:	fa22 f808 	lsr.w	r8, r2, r8
 800b6e4:	ea18 0f00 	tst.w	r8, r0
 800b6e8:	d0f2      	beq.n	800b6d0 <floor+0x98>
 800b6ea:	a311      	add	r3, pc, #68	; (adr r3, 800b730 <floor+0xf8>)
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	f7f4 fd3c 	bl	800016c <__adddf3>
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f7f5 f97e 	bl	80009f8 <__aeabi_dcmpgt>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	d0bd      	beq.n	800b67c <floor+0x44>
 800b700:	2c00      	cmp	r4, #0
 800b702:	da02      	bge.n	800b70a <floor+0xd2>
 800b704:	2e14      	cmp	r6, #20
 800b706:	d103      	bne.n	800b710 <floor+0xd8>
 800b708:	3401      	adds	r4, #1
 800b70a:	ea25 0508 	bic.w	r5, r5, r8
 800b70e:	e7b5      	b.n	800b67c <floor+0x44>
 800b710:	2301      	movs	r3, #1
 800b712:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b716:	fa03 f606 	lsl.w	r6, r3, r6
 800b71a:	4435      	add	r5, r6
 800b71c:	42bd      	cmp	r5, r7
 800b71e:	bf38      	it	cc
 800b720:	18e4      	addcc	r4, r4, r3
 800b722:	e7f2      	b.n	800b70a <floor+0xd2>
 800b724:	2500      	movs	r5, #0
 800b726:	462c      	mov	r4, r5
 800b728:	e7a8      	b.n	800b67c <floor+0x44>
 800b72a:	bf00      	nop
 800b72c:	f3af 8000 	nop.w
 800b730:	8800759c 	.word	0x8800759c
 800b734:	7e37e43c 	.word	0x7e37e43c
 800b738:	bff00000 	.word	0xbff00000
 800b73c:	000fffff 	.word	0x000fffff

0800b740 <matherr>:
 800b740:	2000      	movs	r0, #0
 800b742:	4770      	bx	lr

0800b744 <nan>:
 800b744:	2000      	movs	r0, #0
 800b746:	4901      	ldr	r1, [pc, #4]	; (800b74c <nan+0x8>)
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	7ff80000 	.word	0x7ff80000

0800b750 <rint>:
 800b750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b752:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b756:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800b75a:	f1bc 0f13 	cmp.w	ip, #19
 800b75e:	4604      	mov	r4, r0
 800b760:	460d      	mov	r5, r1
 800b762:	460b      	mov	r3, r1
 800b764:	4606      	mov	r6, r0
 800b766:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800b76a:	dc5a      	bgt.n	800b822 <rint+0xd2>
 800b76c:	f1bc 0f00 	cmp.w	ip, #0
 800b770:	da2b      	bge.n	800b7ca <rint+0x7a>
 800b772:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b776:	4302      	orrs	r2, r0
 800b778:	d023      	beq.n	800b7c2 <rint+0x72>
 800b77a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b77e:	4302      	orrs	r2, r0
 800b780:	4256      	negs	r6, r2
 800b782:	4316      	orrs	r6, r2
 800b784:	0c4b      	lsrs	r3, r1, #17
 800b786:	0b36      	lsrs	r6, r6, #12
 800b788:	4934      	ldr	r1, [pc, #208]	; (800b85c <rint+0x10c>)
 800b78a:	045b      	lsls	r3, r3, #17
 800b78c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800b790:	ea46 0503 	orr.w	r5, r6, r3
 800b794:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800b798:	4602      	mov	r2, r0
 800b79a:	462b      	mov	r3, r5
 800b79c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	f7f4 fce2 	bl	800016c <__adddf3>
 800b7a8:	e9cd 0100 	strd	r0, r1, [sp]
 800b7ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7b0:	462b      	mov	r3, r5
 800b7b2:	4622      	mov	r2, r4
 800b7b4:	f7f4 fcd8 	bl	8000168 <__aeabi_dsub>
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b7be:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	4629      	mov	r1, r5
 800b7c6:	b003      	add	sp, #12
 800b7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7ca:	4a25      	ldr	r2, [pc, #148]	; (800b860 <rint+0x110>)
 800b7cc:	fa42 f20c 	asr.w	r2, r2, ip
 800b7d0:	4011      	ands	r1, r2
 800b7d2:	4301      	orrs	r1, r0
 800b7d4:	d0f5      	beq.n	800b7c2 <rint+0x72>
 800b7d6:	0852      	lsrs	r2, r2, #1
 800b7d8:	ea05 0102 	and.w	r1, r5, r2
 800b7dc:	ea50 0601 	orrs.w	r6, r0, r1
 800b7e0:	d00c      	beq.n	800b7fc <rint+0xac>
 800b7e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b7e6:	f1bc 0f13 	cmp.w	ip, #19
 800b7ea:	bf0c      	ite	eq
 800b7ec:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800b7f0:	2600      	movne	r6, #0
 800b7f2:	ea25 0202 	bic.w	r2, r5, r2
 800b7f6:	fa43 f30c 	asr.w	r3, r3, ip
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	4917      	ldr	r1, [pc, #92]	; (800b85c <rint+0x10c>)
 800b7fe:	4632      	mov	r2, r6
 800b800:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800b804:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b808:	4620      	mov	r0, r4
 800b80a:	4629      	mov	r1, r5
 800b80c:	f7f4 fcae 	bl	800016c <__adddf3>
 800b810:	e9cd 0100 	strd	r0, r1, [sp]
 800b814:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b818:	4622      	mov	r2, r4
 800b81a:	462b      	mov	r3, r5
 800b81c:	f7f4 fca4 	bl	8000168 <__aeabi_dsub>
 800b820:	e008      	b.n	800b834 <rint+0xe4>
 800b822:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800b826:	dd08      	ble.n	800b83a <rint+0xea>
 800b828:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800b82c:	d1c9      	bne.n	800b7c2 <rint+0x72>
 800b82e:	4602      	mov	r2, r0
 800b830:	f7f4 fc9c 	bl	800016c <__adddf3>
 800b834:	4604      	mov	r4, r0
 800b836:	460d      	mov	r5, r1
 800b838:	e7c3      	b.n	800b7c2 <rint+0x72>
 800b83a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800b83e:	f04f 32ff 	mov.w	r2, #4294967295
 800b842:	40ca      	lsrs	r2, r1
 800b844:	4210      	tst	r0, r2
 800b846:	d0bc      	beq.n	800b7c2 <rint+0x72>
 800b848:	0852      	lsrs	r2, r2, #1
 800b84a:	4210      	tst	r0, r2
 800b84c:	bf1f      	itttt	ne
 800b84e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800b852:	ea20 0202 	bicne.w	r2, r0, r2
 800b856:	410e      	asrne	r6, r1
 800b858:	4316      	orrne	r6, r2
 800b85a:	e7cf      	b.n	800b7fc <rint+0xac>
 800b85c:	0800d278 	.word	0x0800d278
 800b860:	000fffff 	.word	0x000fffff
 800b864:	00000000 	.word	0x00000000

0800b868 <scalbn>:
 800b868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86a:	4616      	mov	r6, r2
 800b86c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b870:	4604      	mov	r4, r0
 800b872:	460d      	mov	r5, r1
 800b874:	460b      	mov	r3, r1
 800b876:	b982      	cbnz	r2, 800b89a <scalbn+0x32>
 800b878:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b87c:	4303      	orrs	r3, r0
 800b87e:	d034      	beq.n	800b8ea <scalbn+0x82>
 800b880:	4b2d      	ldr	r3, [pc, #180]	; (800b938 <scalbn+0xd0>)
 800b882:	2200      	movs	r2, #0
 800b884:	f7f4 fe28 	bl	80004d8 <__aeabi_dmul>
 800b888:	4b2c      	ldr	r3, [pc, #176]	; (800b93c <scalbn+0xd4>)
 800b88a:	4604      	mov	r4, r0
 800b88c:	429e      	cmp	r6, r3
 800b88e:	460d      	mov	r5, r1
 800b890:	da0d      	bge.n	800b8ae <scalbn+0x46>
 800b892:	a325      	add	r3, pc, #148	; (adr r3, 800b928 <scalbn+0xc0>)
 800b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b898:	e01c      	b.n	800b8d4 <scalbn+0x6c>
 800b89a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800b89e:	42ba      	cmp	r2, r7
 800b8a0:	d109      	bne.n	800b8b6 <scalbn+0x4e>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	f7f4 fc62 	bl	800016c <__adddf3>
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	460d      	mov	r5, r1
 800b8ac:	e01d      	b.n	800b8ea <scalbn+0x82>
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b8b4:	3a36      	subs	r2, #54	; 0x36
 800b8b6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b8ba:	4432      	add	r2, r6
 800b8bc:	428a      	cmp	r2, r1
 800b8be:	dd0c      	ble.n	800b8da <scalbn+0x72>
 800b8c0:	4622      	mov	r2, r4
 800b8c2:	462b      	mov	r3, r5
 800b8c4:	a11a      	add	r1, pc, #104	; (adr r1, 800b930 <scalbn+0xc8>)
 800b8c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8ca:	f000 f83b 	bl	800b944 <copysign>
 800b8ce:	a318      	add	r3, pc, #96	; (adr r3, 800b930 <scalbn+0xc8>)
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	f7f4 fe00 	bl	80004d8 <__aeabi_dmul>
 800b8d8:	e7e6      	b.n	800b8a8 <scalbn+0x40>
 800b8da:	2a00      	cmp	r2, #0
 800b8dc:	dd08      	ble.n	800b8f0 <scalbn+0x88>
 800b8de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b8e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b8e6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8f0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b8f4:	da0b      	bge.n	800b90e <scalbn+0xa6>
 800b8f6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b8fa:	429e      	cmp	r6, r3
 800b8fc:	4622      	mov	r2, r4
 800b8fe:	462b      	mov	r3, r5
 800b900:	dce0      	bgt.n	800b8c4 <scalbn+0x5c>
 800b902:	a109      	add	r1, pc, #36	; (adr r1, 800b928 <scalbn+0xc0>)
 800b904:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b908:	f000 f81c 	bl	800b944 <copysign>
 800b90c:	e7c1      	b.n	800b892 <scalbn+0x2a>
 800b90e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b912:	3236      	adds	r2, #54	; 0x36
 800b914:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b918:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b91c:	4620      	mov	r0, r4
 800b91e:	4629      	mov	r1, r5
 800b920:	2200      	movs	r2, #0
 800b922:	4b07      	ldr	r3, [pc, #28]	; (800b940 <scalbn+0xd8>)
 800b924:	e7d6      	b.n	800b8d4 <scalbn+0x6c>
 800b926:	bf00      	nop
 800b928:	c2f8f359 	.word	0xc2f8f359
 800b92c:	01a56e1f 	.word	0x01a56e1f
 800b930:	8800759c 	.word	0x8800759c
 800b934:	7e37e43c 	.word	0x7e37e43c
 800b938:	43500000 	.word	0x43500000
 800b93c:	ffff3cb0 	.word	0xffff3cb0
 800b940:	3c900000 	.word	0x3c900000

0800b944 <copysign>:
 800b944:	b530      	push	{r4, r5, lr}
 800b946:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b94a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b94e:	ea42 0503 	orr.w	r5, r2, r3
 800b952:	4629      	mov	r1, r5
 800b954:	bd30      	pop	{r4, r5, pc}
	...

0800b958 <_init>:
 800b958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95a:	bf00      	nop
 800b95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b95e:	bc08      	pop	{r3}
 800b960:	469e      	mov	lr, r3
 800b962:	4770      	bx	lr

0800b964 <_fini>:
 800b964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b966:	bf00      	nop
 800b968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b96a:	bc08      	pop	{r3}
 800b96c:	469e      	mov	lr, r3
 800b96e:	4770      	bx	lr
