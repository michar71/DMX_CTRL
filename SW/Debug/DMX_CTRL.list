
DMX_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001330  080078ec  080078ec  000178ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008c1c  08008c1c  00018c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008c20  08008c20  00018c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000003d4  20000000  08008c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001558  200003d8  08008ff8  000203d8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20001930  08008ff8  00021930  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000203d4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00035b84  00000000  00000000  000203fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000082c8  00000000  00000000  00055f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f9ea  00000000  00000000  0005e249  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000017d8  00000000  00000000  0006dc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002150  00000000  00000000  0006f410  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001da2f  00000000  00000000  00071560  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001e8a3  00000000  00000000  0008ef8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00081aff  00000000  00000000  000ad832  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0012f331  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000474c  00000000  00000000  0012f3ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200003d8 	.word	0x200003d8
 8000128:	00000000 	.word	0x00000000
 800012c:	080078d4 	.word	0x080078d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200003dc 	.word	0x200003dc
 8000148:	080078d4 	.word	0x080078d4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000218:	f1a2 0201 	sub.w	r2, r2, #1
 800021c:	d1ed      	bne.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000664:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <HAL_InitTick+0x3c>)
{
 8000668:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800066a:	7818      	ldrb	r0, [r3, #0]
 800066c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000670:	fbb3 f3f0 	udiv	r3, r3, r0
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <HAL_InitTick+0x40>)
 8000676:	6810      	ldr	r0, [r2, #0]
 8000678:	fbb0 f0f3 	udiv	r0, r0, r3
 800067c:	f000 fac8 	bl	8000c10 <HAL_SYSTICK_Config>
 8000680:	4604      	mov	r4, r0
 8000682:	b958      	cbnz	r0, 800069c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000684:	2d0f      	cmp	r5, #15
 8000686:	d809      	bhi.n	800069c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	4602      	mov	r2, r0
 800068a:	4629      	mov	r1, r5
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	f000 fa7c 	bl	8000b8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4620      	mov	r0, r4
 8000696:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <HAL_InitTick+0x44>)
 8000698:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800069a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800069c:	2001      	movs	r0, #1
 800069e:	e7fc      	b.n	800069a <HAL_InitTick+0x36>
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000184 	.word	0x20000184
 80006a8:	20000004 	.word	0x20000004

080006ac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <HAL_Init+0x20>)
{
 80006ae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b4:	f043 0310 	orr.w	r3, r3, #16
 80006b8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ba:	f000 fa55 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff ffd0 	bl	8000664 <HAL_InitTick>
  HAL_MspInit();
 80006c4:	f005 fbc2 	bl	8005e4c <HAL_MspInit>
}
 80006c8:	2000      	movs	r0, #0
 80006ca:	bd08      	pop	{r3, pc}
 80006cc:	40022000 	.word	0x40022000

080006d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006d0:	4a03      	ldr	r2, [pc, #12]	; (80006e0 <HAL_IncTick+0x10>)
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <HAL_IncTick+0x14>)
 80006d4:	6811      	ldr	r1, [r2, #0]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	440b      	add	r3, r1
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	20000948 	.word	0x20000948
 80006e4:	20000000 	.word	0x20000000

080006e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006e8:	4b01      	ldr	r3, [pc, #4]	; (80006f0 <HAL_GetTick+0x8>)
 80006ea:	6818      	ldr	r0, [r3, #0]
}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000948 	.word	0x20000948

080006f4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80006f4:	6803      	ldr	r3, [r0, #0]
 80006f6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80006f8:	4770      	bx	lr

080006fa <HAL_ADC_LevelOutOfWindowCallback>:
 80006fa:	4770      	bx	lr

080006fc <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80006fc:	6803      	ldr	r3, [r0, #0]
{
 80006fe:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000700:	685a      	ldr	r2, [r3, #4]
{
 8000702:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000704:	0690      	lsls	r0, r2, #26
 8000706:	d527      	bpl.n	8000758 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	0791      	lsls	r1, r2, #30
 800070c:	d524      	bpl.n	8000758 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800070e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000710:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000712:	bf5e      	ittt	pl
 8000714:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000716:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800071a:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000722:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000726:	d110      	bne.n	800074a <HAL_ADC_IRQHandler+0x4e>
 8000728:	7b22      	ldrb	r2, [r4, #12]
 800072a:	b972      	cbnz	r2, 800074a <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800072c:	685a      	ldr	r2, [r3, #4]
 800072e:	f022 0220 	bic.w	r2, r2, #32
 8000732:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000734:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800073a:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800073c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800073e:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000740:	bf5e      	ittt	pl
 8000742:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000744:	f043 0301 	orrpl.w	r3, r3, #1
 8000748:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800074a:	4620      	mov	r0, r4
 800074c:	f005 fd1c 	bl	8006188 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000750:	f06f 0212 	mvn.w	r2, #18
 8000754:	6823      	ldr	r3, [r4, #0]
 8000756:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000758:	6823      	ldr	r3, [r4, #0]
 800075a:	685a      	ldr	r2, [r3, #4]
 800075c:	0610      	lsls	r0, r2, #24
 800075e:	d530      	bpl.n	80007c2 <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	0751      	lsls	r1, r2, #29
 8000764:	d52d      	bpl.n	80007c2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000766:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000768:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800076a:	bf5e      	ittt	pl
 800076c:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800076e:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000772:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000774:	689a      	ldr	r2, [r3, #8]
 8000776:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 800077a:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 800077e:	d00a      	beq.n	8000796 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000780:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000782:	0550      	lsls	r0, r2, #21
 8000784:	d416      	bmi.n	80007b4 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000786:	689a      	ldr	r2, [r3, #8]
 8000788:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800078c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000790:	d110      	bne.n	80007b4 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000792:	7b22      	ldrb	r2, [r4, #12]
 8000794:	b972      	cbnz	r2, 80007b4 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000796:	685a      	ldr	r2, [r3, #4]
 8000798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800079c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800079e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007a4:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80007a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007a8:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007aa:	bf5e      	ittt	pl
 80007ac:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80007ae:	f043 0301 	orrpl.w	r3, r3, #1
 80007b2:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80007b4:	4620      	mov	r0, r4
 80007b6:	f000 f9d5 	bl	8000b64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80007ba:	f06f 020c 	mvn.w	r2, #12
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	685a      	ldr	r2, [r3, #4]
 80007c6:	0652      	lsls	r2, r2, #25
 80007c8:	d50d      	bpl.n	80007e6 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	07db      	lsls	r3, r3, #31
 80007ce:	d50a      	bpl.n	80007e6 <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80007d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80007d2:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80007d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007d8:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80007da:	f7ff ff8e 	bl	80006fa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80007de:	f06f 0201 	mvn.w	r2, #1
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80007e6:	bd10      	pop	{r4, pc}

080007e8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80007e8:	2300      	movs	r3, #0
{ 
 80007ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80007ec:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007ee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d06d      	beq.n	80008d2 <HAL_ADC_ConfigChannel+0xea>
 80007f6:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80007f8:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80007fa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80007fe:	2d06      	cmp	r5, #6
 8000800:	6802      	ldr	r2, [r0, #0]
 8000802:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000806:	680c      	ldr	r4, [r1, #0]
 8000808:	d823      	bhi.n	8000852 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800080a:	261f      	movs	r6, #31
 800080c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800080e:	3b05      	subs	r3, #5
 8000810:	409e      	lsls	r6, r3
 8000812:	ea25 0506 	bic.w	r5, r5, r6
 8000816:	fa04 f303 	lsl.w	r3, r4, r3
 800081a:	432b      	orrs	r3, r5
 800081c:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800081e:	2c09      	cmp	r4, #9
 8000820:	688b      	ldr	r3, [r1, #8]
 8000822:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8000826:	f04f 0107 	mov.w	r1, #7
 800082a:	d92a      	bls.n	8000882 <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800082c:	68d6      	ldr	r6, [r2, #12]
 800082e:	3d1e      	subs	r5, #30
 8000830:	40a9      	lsls	r1, r5
 8000832:	ea26 0101 	bic.w	r1, r6, r1
 8000836:	40ab      	lsls	r3, r5
 8000838:	430b      	orrs	r3, r1
 800083a:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800083c:	f1a4 0310 	sub.w	r3, r4, #16
 8000840:	2b01      	cmp	r3, #1
 8000842:	d926      	bls.n	8000892 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000844:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000846:	2200      	movs	r2, #0
 8000848:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800084c:	4618      	mov	r0, r3
 800084e:	b002      	add	sp, #8
 8000850:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000852:	2d0c      	cmp	r5, #12
 8000854:	f04f 051f 	mov.w	r5, #31
 8000858:	d809      	bhi.n	800086e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800085a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800085c:	3b23      	subs	r3, #35	; 0x23
 800085e:	409d      	lsls	r5, r3
 8000860:	ea26 0505 	bic.w	r5, r6, r5
 8000864:	fa04 f303 	lsl.w	r3, r4, r3
 8000868:	432b      	orrs	r3, r5
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
 800086c:	e7d7      	b.n	800081e <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800086e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000870:	3b41      	subs	r3, #65	; 0x41
 8000872:	409d      	lsls	r5, r3
 8000874:	ea26 0505 	bic.w	r5, r6, r5
 8000878:	fa04 f303 	lsl.w	r3, r4, r3
 800087c:	432b      	orrs	r3, r5
 800087e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000880:	e7cd      	b.n	800081e <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000882:	6916      	ldr	r6, [r2, #16]
 8000884:	40a9      	lsls	r1, r5
 8000886:	ea26 0101 	bic.w	r1, r6, r1
 800088a:	40ab      	lsls	r3, r5
 800088c:	430b      	orrs	r3, r1
 800088e:	6113      	str	r3, [r2, #16]
 8000890:	e7d4      	b.n	800083c <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_ADC_ConfigChannel+0xf0>)
 8000894:	429a      	cmp	r2, r3
 8000896:	d116      	bne.n	80008c6 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000898:	6893      	ldr	r3, [r2, #8]
 800089a:	021b      	lsls	r3, r3, #8
 800089c:	d4d2      	bmi.n	8000844 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800089e:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008a0:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008a6:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008a8:	d1cc      	bne.n	8000844 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_ADC_ConfigChannel+0xf4>)
 80008ac:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <HAL_ADC_ConfigChannel+0xf8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80008b4:	230a      	movs	r3, #10
 80008b6:	4353      	muls	r3, r2
            wait_loop_index--;
 80008b8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80008ba:	9b01      	ldr	r3, [sp, #4]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d0c1      	beq.n	8000844 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 80008c0:	9b01      	ldr	r3, [sp, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	e7f8      	b.n	80008b8 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e7b9      	b.n	8000846 <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 80008d2:	2302      	movs	r3, #2
 80008d4:	e7ba      	b.n	800084c <HAL_ADC_ConfigChannel+0x64>
 80008d6:	bf00      	nop
 80008d8:	40012400 	.word	0x40012400
 80008dc:	20000184 	.word	0x20000184
 80008e0:	000f4240 	.word	0x000f4240

080008e4 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80008e4:	2300      	movs	r3, #0
{
 80008e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80008e8:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008ea:	6803      	ldr	r3, [r0, #0]
{
 80008ec:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008ee:	689a      	ldr	r2, [r3, #8]
 80008f0:	07d2      	lsls	r2, r2, #31
 80008f2:	d502      	bpl.n	80008fa <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80008f4:	2000      	movs	r0, #0
}
 80008f6:	b002      	add	sp, #8
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	f042 0201 	orr.w	r2, r2, #1
 8000900:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <ADC_Enable+0x68>)
 8000904:	4a12      	ldr	r2, [pc, #72]	; (8000950 <ADC_Enable+0x6c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800090c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800090e:	9b01      	ldr	r3, [sp, #4]
 8000910:	b9c3      	cbnz	r3, 8000944 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000912:	f7ff fee9 	bl	80006e8 <HAL_GetTick>
 8000916:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000918:	6823      	ldr	r3, [r4, #0]
 800091a:	689d      	ldr	r5, [r3, #8]
 800091c:	f015 0501 	ands.w	r5, r5, #1
 8000920:	d1e8      	bne.n	80008f4 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000922:	f7ff fee1 	bl	80006e8 <HAL_GetTick>
 8000926:	1b80      	subs	r0, r0, r6
 8000928:	2802      	cmp	r0, #2
 800092a:	d9f5      	bls.n	8000918 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800092c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800092e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000938:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800093a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000942:	e7d8      	b.n	80008f6 <ADC_Enable+0x12>
      wait_loop_index--;
 8000944:	9b01      	ldr	r3, [sp, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	e7e0      	b.n	800090c <ADC_Enable+0x28>
 800094a:	bf00      	nop
 800094c:	20000184 	.word	0x20000184
 8000950:	000f4240 	.word	0x000f4240

08000954 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 8000954:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000958:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800095a:	2b01      	cmp	r3, #1
{
 800095c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800095e:	d058      	beq.n	8000a12 <HAL_ADC_Start_IT+0xbe>
 8000960:	2301      	movs	r3, #1
 8000962:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000966:	f7ff ffbd 	bl	80008e4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800096a:	2800      	cmp	r0, #0
 800096c:	d14d      	bne.n	8000a0a <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 800096e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000970:	4a29      	ldr	r2, [pc, #164]	; (8000a18 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8000972:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000976:	f023 0301 	bic.w	r3, r3, #1
 800097a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000980:	6823      	ldr	r3, [r4, #0]
 8000982:	4293      	cmp	r3, r2
 8000984:	d104      	bne.n	8000990 <HAL_ADC_Start_IT+0x3c>
 8000986:	4925      	ldr	r1, [pc, #148]	; (8000a1c <HAL_ADC_Start_IT+0xc8>)
 8000988:	684a      	ldr	r2, [r1, #4]
 800098a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800098e:	d132      	bne.n	80009f6 <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000990:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000992:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000996:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000998:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800099a:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800099c:	bf41      	itttt	mi
 800099e:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80009a0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80009a4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80009a8:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009b0:	bf1c      	itt	ne
 80009b2:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80009b4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80009b8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009c0:	f06f 0202 	mvn.w	r2, #2
 80009c4:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	f042 0220 	orr.w	r2, r2, #32
 80009cc:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80009d4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80009d8:	d113      	bne.n	8000a02 <HAL_ADC_Start_IT+0xae>
 80009da:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <HAL_ADC_Start_IT+0xc4>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d105      	bne.n	80009ec <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009e0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80009e4:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009e6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80009ea:	d10a      	bne.n	8000a02 <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80009f2:	609a      	str	r2, [r3, #8]
}
 80009f4:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80009fc:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009fe:	684a      	ldr	r2, [r1, #4]
 8000a00:	e7cb      	b.n	800099a <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a02:	689a      	ldr	r2, [r3, #8]
 8000a04:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a08:	e7f3      	b.n	80009f2 <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000a10:	e7f0      	b.n	80009f4 <HAL_ADC_Start_IT+0xa0>
  __HAL_LOCK(hadc);
 8000a12:	2002      	movs	r0, #2
 8000a14:	e7ee      	b.n	80009f4 <HAL_ADC_Start_IT+0xa0>
 8000a16:	bf00      	nop
 8000a18:	40012800 	.word	0x40012800
 8000a1c:	40012400 	.word	0x40012400

08000a20 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000a20:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a22:	6803      	ldr	r3, [r0, #0]
{
 8000a24:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a26:	689a      	ldr	r2, [r3, #8]
 8000a28:	07d2      	lsls	r2, r2, #31
 8000a2a:	d401      	bmi.n	8000a30 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a2c:	2000      	movs	r0, #0
}
 8000a2e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000a30:	689a      	ldr	r2, [r3, #8]
 8000a32:	f022 0201 	bic.w	r2, r2, #1
 8000a36:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000a38:	f7ff fe56 	bl	80006e8 <HAL_GetTick>
 8000a3c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a3e:	6823      	ldr	r3, [r4, #0]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	07db      	lsls	r3, r3, #31
 8000a44:	d5f2      	bpl.n	8000a2c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000a46:	f7ff fe4f 	bl	80006e8 <HAL_GetTick>
 8000a4a:	1b40      	subs	r0, r0, r5
 8000a4c:	2802      	cmp	r0, #2
 8000a4e:	d9f6      	bls.n	8000a3e <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a52:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a54:	f043 0310 	orr.w	r3, r3, #16
 8000a58:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a62:	e7e4      	b.n	8000a2e <ADC_ConversionStop_Disable+0xe>

08000a64 <HAL_ADC_Init>:
{
 8000a64:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000a66:	4604      	mov	r4, r0
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d070      	beq.n	8000b4e <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a6e:	b923      	cbnz	r3, 8000a7a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000a70:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000a72:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000a76:	f005 fa0b 	bl	8005e90 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	f7ff ffd0 	bl	8000a20 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a82:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a88:	d163      	bne.n	8000b52 <HAL_ADC_Init+0xee>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	d161      	bne.n	8000b52 <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a8e:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000a90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a94:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000a96:	f023 0302 	bic.w	r3, r3, #2
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a9e:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000aa0:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000aa2:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000aa4:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000aa6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000aaa:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000aae:	d037      	beq.n	8000b20 <HAL_ADC_Init+0xbc>
 8000ab0:	2901      	cmp	r1, #1
 8000ab2:	bf14      	ite	ne
 8000ab4:	4606      	movne	r6, r0
 8000ab6:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000aba:	7d25      	ldrb	r5, [r4, #20]
 8000abc:	2d01      	cmp	r5, #1
 8000abe:	d106      	bne.n	8000ace <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ac0:	bb83      	cbnz	r3, 8000b24 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ac2:	69a3      	ldr	r3, [r4, #24]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000aca:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000ace:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ad0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000ad4:	685d      	ldr	r5, [r3, #4]
 8000ad6:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000ada:	ea45 0506 	orr.w	r5, r5, r6
 8000ade:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000ae0:	689e      	ldr	r6, [r3, #8]
 8000ae2:	4d1e      	ldr	r5, [pc, #120]	; (8000b5c <HAL_ADC_Init+0xf8>)
 8000ae4:	ea05 0506 	and.w	r5, r5, r6
 8000ae8:	ea45 0502 	orr.w	r5, r5, r2
 8000aec:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000aee:	d001      	beq.n	8000af4 <HAL_ADC_Init+0x90>
 8000af0:	2901      	cmp	r1, #1
 8000af2:	d120      	bne.n	8000b36 <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000af4:	6921      	ldr	r1, [r4, #16]
 8000af6:	3901      	subs	r1, #1
 8000af8:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000afa:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000afc:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000b00:	4329      	orrs	r1, r5
 8000b02:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b04:	6899      	ldr	r1, [r3, #8]
 8000b06:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <HAL_ADC_Init+0xfc>)
 8000b08:	400b      	ands	r3, r1
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d115      	bne.n	8000b3a <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000b12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b14:	f023 0303 	bic.w	r3, r3, #3
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b20:	460e      	mov	r6, r1
 8000b22:	e7ca      	b.n	8000aba <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b26:	f043 0320 	orr.w	r3, r3, #32
 8000b2a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b34:	e7cb      	b.n	8000ace <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 8000b36:	2100      	movs	r1, #0
 8000b38:	e7df      	b.n	8000afa <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8000b3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b3c:	f023 0312 	bic.w	r3, r3, #18
 8000b40:	f043 0310 	orr.w	r3, r3, #16
 8000b44:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000b4e:	2001      	movs	r0, #1
 8000b50:	e7e5      	b.n	8000b1e <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b52:	f043 0310 	orr.w	r3, r3, #16
 8000b56:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b58:	e7f9      	b.n	8000b4e <HAL_ADC_Init+0xea>
 8000b5a:	bf00      	nop
 8000b5c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b60:	ff1f0efe 	.word	0xff1f0efe

08000b64 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000b64:	4770      	bx	lr
	...

08000b68 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b6a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b6e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b76:	041b      	lsls	r3, r3, #16
 8000b78:	0c1b      	lsrs	r3, r3, #16
 8000b7a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b82:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b84:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8e:	b570      	push	{r4, r5, r6, lr}
 8000b90:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b92:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b96:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9a:	f1c4 0507 	rsb	r5, r4, #7
 8000b9e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba0:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	bf28      	it	cs
 8000ba6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba8:	2b06      	cmp	r3, #6
 8000baa:	bf98      	it	ls
 8000bac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bae:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	bf88      	it	hi
 8000bb4:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb6:	ea21 0303 	bic.w	r3, r1, r3
 8000bba:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	fa06 f404 	lsl.w	r4, r6, r4
 8000bc0:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc6:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	bfa8      	it	ge
 8000bcc:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000bd0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	bfb8      	it	lt
 8000bd6:	4a06      	ldrlt	r2, [pc, #24]	; (8000bf0 <HAL_NVIC_SetPriority+0x64>)
 8000bd8:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	bfab      	itete	ge
 8000bdc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000bea:	bd70      	pop	{r4, r5, r6, pc}
 8000bec:	e000ed00 	.word	0xe000ed00
 8000bf0:	e000ed14 	.word	0xe000ed14

08000bf4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	db08      	blt.n	8000c0a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	0942      	lsrs	r2, r0, #5
 8000bfc:	f000 001f 	and.w	r0, r0, #31
 8000c00:	fa03 f000 	lsl.w	r0, r3, r0
 8000c04:	4b01      	ldr	r3, [pc, #4]	; (8000c0c <HAL_NVIC_EnableIRQ+0x18>)
 8000c06:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c10:	3801      	subs	r0, #1
 8000c12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c16:	d20a      	bcs.n	8000c2e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c24:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c26:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c2e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c3c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c3e:	b330      	cbz	r0, 8000c8e <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c40:	2214      	movs	r2, #20
 8000c42:	6801      	ldr	r1, [r0, #0]
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <HAL_DMA_Init+0x58>)
 8000c46:	440b      	add	r3, r1
 8000c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c52:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000c54:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c56:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8000c5a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c5c:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c5e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c62:	4323      	orrs	r3, r4
 8000c64:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c66:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c6a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c6c:	6944      	ldr	r4, [r0, #20]
 8000c6e:	4323      	orrs	r3, r4
 8000c70:	6984      	ldr	r4, [r0, #24]
 8000c72:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c74:	69c4      	ldr	r4, [r0, #28]
 8000c76:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000c78:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c7a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c7c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c7e:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000c80:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c84:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c86:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000c8a:	4618      	mov	r0, r3
}
 8000c8c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c8e:	2001      	movs	r0, #1
 8000c90:	e7fc      	b.n	8000c8c <HAL_DMA_Init+0x50>
 8000c92:	bf00      	nop
 8000c94:	bffdfff8 	.word	0xbffdfff8
 8000c98:	40020000 	.word	0x40020000

08000c9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c9c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c9e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000ca2:	2c01      	cmp	r4, #1
 8000ca4:	d035      	beq.n	8000d12 <HAL_DMA_Start_IT+0x76>
 8000ca6:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ca8:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000cac:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cb0:	42a5      	cmp	r5, r4
 8000cb2:	f04f 0600 	mov.w	r6, #0
 8000cb6:	f04f 0402 	mov.w	r4, #2
 8000cba:	d128      	bne.n	8000d0e <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000cbc:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000cc0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cc2:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000cc4:	6826      	ldr	r6, [r4, #0]
 8000cc6:	f026 0601 	bic.w	r6, r6, #1
 8000cca:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ccc:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8000cd0:	40bd      	lsls	r5, r7
 8000cd2:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000cd4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000cd6:	6843      	ldr	r3, [r0, #4]
 8000cd8:	6805      	ldr	r5, [r0, #0]
 8000cda:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000cdc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000cde:	bf0b      	itete	eq
 8000ce0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000ce2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000ce4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000ce6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000ce8:	b14b      	cbz	r3, 8000cfe <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cea:	6823      	ldr	r3, [r4, #0]
 8000cec:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8000cf0:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cf2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000cf4:	682b      	ldr	r3, [r5, #0]
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	602b      	str	r3, [r5, #0]
}
 8000cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cfe:	6823      	ldr	r3, [r4, #0]
 8000d00:	f023 0304 	bic.w	r3, r3, #4
 8000d04:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	f043 030a 	orr.w	r3, r3, #10
 8000d0c:	e7f0      	b.n	8000cf0 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000d0e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000d12:	2002      	movs	r0, #2
 8000d14:	e7f2      	b.n	8000cfc <HAL_DMA_Start_IT+0x60>
	...

08000d18 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d18:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000d1c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d003      	beq.n	8000d2a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d22:	2304      	movs	r3, #4
 8000d24:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000d26:	2001      	movs	r0, #1
}
 8000d28:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d2a:	6803      	ldr	r3, [r0, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	f022 020e 	bic.w	r2, r2, #14
 8000d32:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	f022 0201 	bic.w	r2, r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d3c:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <HAL_DMA_Abort_IT+0x88>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d01f      	beq.n	8000d82 <HAL_DMA_Abort_IT+0x6a>
 8000d42:	3214      	adds	r2, #20
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d01e      	beq.n	8000d86 <HAL_DMA_Abort_IT+0x6e>
 8000d48:	3214      	adds	r2, #20
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d01d      	beq.n	8000d8a <HAL_DMA_Abort_IT+0x72>
 8000d4e:	3214      	adds	r2, #20
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d01d      	beq.n	8000d90 <HAL_DMA_Abort_IT+0x78>
 8000d54:	3214      	adds	r2, #20
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d01d      	beq.n	8000d96 <HAL_DMA_Abort_IT+0x7e>
 8000d5a:	3214      	adds	r2, #20
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	bf0c      	ite	eq
 8000d60:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000d64:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000d68:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8000d6a:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d6c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8000d74:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000d76:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000d7a:	b17b      	cbz	r3, 8000d9c <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8000d7c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000d7e:	4620      	mov	r0, r4
 8000d80:	e7d2      	b.n	8000d28 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d82:	2301      	movs	r3, #1
 8000d84:	e7f0      	b.n	8000d68 <HAL_DMA_Abort_IT+0x50>
 8000d86:	2310      	movs	r3, #16
 8000d88:	e7ee      	b.n	8000d68 <HAL_DMA_Abort_IT+0x50>
 8000d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d8e:	e7eb      	b.n	8000d68 <HAL_DMA_Abort_IT+0x50>
 8000d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d94:	e7e8      	b.n	8000d68 <HAL_DMA_Abort_IT+0x50>
 8000d96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d9a:	e7e5      	b.n	8000d68 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	e7c3      	b.n	8000d28 <HAL_DMA_Abort_IT+0x10>
 8000da0:	40020008 	.word	0x40020008
 8000da4:	40020000 	.word	0x40020000

08000da8 <HAL_DMA_IRQHandler>:
{
 8000da8:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000daa:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000dac:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000dae:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000db0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000db2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000db4:	4095      	lsls	r5, r2
 8000db6:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000db8:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000dba:	d032      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x7a>
 8000dbc:	074d      	lsls	r5, r1, #29
 8000dbe:	d530      	bpl.n	8000e22 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dc4:	bf5e      	ittt	pl
 8000dc6:	681a      	ldrpl	r2, [r3, #0]
 8000dc8:	f022 0204 	bicpl.w	r2, r2, #4
 8000dcc:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000dce:	4a3e      	ldr	r2, [pc, #248]	; (8000ec8 <HAL_DMA_IRQHandler+0x120>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d019      	beq.n	8000e08 <HAL_DMA_IRQHandler+0x60>
 8000dd4:	3214      	adds	r2, #20
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d018      	beq.n	8000e0c <HAL_DMA_IRQHandler+0x64>
 8000dda:	3214      	adds	r2, #20
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d017      	beq.n	8000e10 <HAL_DMA_IRQHandler+0x68>
 8000de0:	3214      	adds	r2, #20
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d017      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x6e>
 8000de6:	3214      	adds	r2, #20
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d017      	beq.n	8000e1c <HAL_DMA_IRQHandler+0x74>
 8000dec:	3214      	adds	r2, #20
 8000dee:	4293      	cmp	r3, r2
 8000df0:	bf0c      	ite	eq
 8000df2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000df6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000dfa:	4a34      	ldr	r2, [pc, #208]	; (8000ecc <HAL_DMA_IRQHandler+0x124>)
 8000dfc:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000dfe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d05e      	beq.n	8000ec2 <HAL_DMA_IRQHandler+0x11a>
}
 8000e04:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000e06:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e7f6      	b.n	8000dfa <HAL_DMA_IRQHandler+0x52>
 8000e0c:	2340      	movs	r3, #64	; 0x40
 8000e0e:	e7f4      	b.n	8000dfa <HAL_DMA_IRQHandler+0x52>
 8000e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e14:	e7f1      	b.n	8000dfa <HAL_DMA_IRQHandler+0x52>
 8000e16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e1a:	e7ee      	b.n	8000dfa <HAL_DMA_IRQHandler+0x52>
 8000e1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e20:	e7eb      	b.n	8000dfa <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e22:	2502      	movs	r5, #2
 8000e24:	4095      	lsls	r5, r2
 8000e26:	4225      	tst	r5, r4
 8000e28:	d035      	beq.n	8000e96 <HAL_DMA_IRQHandler+0xee>
 8000e2a:	078d      	lsls	r5, r1, #30
 8000e2c:	d533      	bpl.n	8000e96 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	0694      	lsls	r4, r2, #26
 8000e32:	d406      	bmi.n	8000e42 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	f022 020a 	bic.w	r2, r2, #10
 8000e3a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e42:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <HAL_DMA_IRQHandler+0x120>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d019      	beq.n	8000e7c <HAL_DMA_IRQHandler+0xd4>
 8000e48:	3214      	adds	r2, #20
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d018      	beq.n	8000e80 <HAL_DMA_IRQHandler+0xd8>
 8000e4e:	3214      	adds	r2, #20
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d017      	beq.n	8000e84 <HAL_DMA_IRQHandler+0xdc>
 8000e54:	3214      	adds	r2, #20
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d017      	beq.n	8000e8a <HAL_DMA_IRQHandler+0xe2>
 8000e5a:	3214      	adds	r2, #20
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d017      	beq.n	8000e90 <HAL_DMA_IRQHandler+0xe8>
 8000e60:	3214      	adds	r2, #20
 8000e62:	4293      	cmp	r3, r2
 8000e64:	bf0c      	ite	eq
 8000e66:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000e6a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_DMA_IRQHandler+0x124>)
 8000e70:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000e72:	2300      	movs	r3, #0
 8000e74:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000e78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000e7a:	e7c1      	b.n	8000e00 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	e7f6      	b.n	8000e6e <HAL_DMA_IRQHandler+0xc6>
 8000e80:	2320      	movs	r3, #32
 8000e82:	e7f4      	b.n	8000e6e <HAL_DMA_IRQHandler+0xc6>
 8000e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e88:	e7f1      	b.n	8000e6e <HAL_DMA_IRQHandler+0xc6>
 8000e8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8e:	e7ee      	b.n	8000e6e <HAL_DMA_IRQHandler+0xc6>
 8000e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e94:	e7eb      	b.n	8000e6e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e96:	2508      	movs	r5, #8
 8000e98:	4095      	lsls	r5, r2
 8000e9a:	4225      	tst	r5, r4
 8000e9c:	d011      	beq.n	8000ec2 <HAL_DMA_IRQHandler+0x11a>
 8000e9e:	0709      	lsls	r1, r1, #28
 8000ea0:	d50f      	bpl.n	8000ec2 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea2:	6819      	ldr	r1, [r3, #0]
 8000ea4:	f021 010e 	bic.w	r1, r1, #14
 8000ea8:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000eaa:	2301      	movs	r3, #1
 8000eac:	fa03 f202 	lsl.w	r2, r3, r2
 8000eb0:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000eb2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000eb4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000ebe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000ec0:	e79e      	b.n	8000e00 <HAL_DMA_IRQHandler+0x58>
}
 8000ec2:	bc70      	pop	{r4, r5, r6}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40020008 	.word	0x40020008
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000ed0:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <FLASH_SetErrorCode+0x48>)
 8000ed2:	68d3      	ldr	r3, [r2, #12]
 8000ed4:	f013 0310 	ands.w	r3, r3, #16
 8000ed8:	d005      	beq.n	8000ee6 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000eda:	4910      	ldr	r1, [pc, #64]	; (8000f1c <FLASH_SetErrorCode+0x4c>)
 8000edc:	69cb      	ldr	r3, [r1, #28]
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000ee4:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ee6:	68d2      	ldr	r2, [r2, #12]
 8000ee8:	0750      	lsls	r0, r2, #29
 8000eea:	d506      	bpl.n	8000efa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000eec:	490b      	ldr	r1, [pc, #44]	; (8000f1c <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000eee:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000ef2:	69ca      	ldr	r2, [r1, #28]
 8000ef4:	f042 0201 	orr.w	r2, r2, #1
 8000ef8:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000efa:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <FLASH_SetErrorCode+0x48>)
 8000efc:	69d1      	ldr	r1, [r2, #28]
 8000efe:	07c9      	lsls	r1, r1, #31
 8000f00:	d508      	bpl.n	8000f14 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <FLASH_SetErrorCode+0x4c>)
 8000f04:	69c1      	ldr	r1, [r0, #28]
 8000f06:	f041 0104 	orr.w	r1, r1, #4
 8000f0a:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000f0c:	69d1      	ldr	r1, [r2, #28]
 8000f0e:	f021 0101 	bic.w	r1, r1, #1
 8000f12:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000f14:	60d3      	str	r3, [r2, #12]
}  
 8000f16:	4770      	bx	lr
 8000f18:	40022000 	.word	0x40022000
 8000f1c:	20000950 	.word	0x20000950

08000f20 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_FLASH_Unlock+0x1c>)
 8000f22:	6918      	ldr	r0, [r3, #16]
 8000f24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000f28:	d007      	beq.n	8000f3a <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <HAL_FLASH_Unlock+0x20>)
 8000f2c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000f2e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000f32:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f34:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000f36:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000f3a:	4770      	bx	lr
 8000f3c:	40022000 	.word	0x40022000
 8000f40:	45670123 	.word	0x45670123

08000f44 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000f44:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <HAL_FLASH_Lock+0x10>)
}
 8000f46:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000f48:	6913      	ldr	r3, [r2, #16]
 8000f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4e:	6113      	str	r3, [r2, #16]
}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40022000 	.word	0x40022000

08000f58 <FLASH_WaitForLastOperation>:
{
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff fbc4 	bl	80006e8 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f60:	4c11      	ldr	r4, [pc, #68]	; (8000fa8 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8000f62:	4607      	mov	r7, r0
 8000f64:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f66:	68e3      	ldr	r3, [r4, #12]
 8000f68:	07d8      	lsls	r0, r3, #31
 8000f6a:	d412      	bmi.n	8000f92 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f6c:	68e3      	ldr	r3, [r4, #12]
 8000f6e:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f70:	bf44      	itt	mi
 8000f72:	2320      	movmi	r3, #32
 8000f74:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f76:	68eb      	ldr	r3, [r5, #12]
 8000f78:	06da      	lsls	r2, r3, #27
 8000f7a:	d406      	bmi.n	8000f8a <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000f7c:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f7e:	07db      	lsls	r3, r3, #31
 8000f80:	d403      	bmi.n	8000f8a <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f82:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000f84:	f010 0004 	ands.w	r0, r0, #4
 8000f88:	d007      	beq.n	8000f9a <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 8000f8a:	f7ff ffa1 	bl	8000ed0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000f8e:	2001      	movs	r0, #1
 8000f90:	e003      	b.n	8000f9a <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8000f92:	1c73      	adds	r3, r6, #1
 8000f94:	d0e7      	beq.n	8000f66 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f96:	b90e      	cbnz	r6, 8000f9c <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8000f98:	2003      	movs	r0, #3
}
 8000f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f9c:	f7ff fba4 	bl	80006e8 <HAL_GetTick>
 8000fa0:	1bc0      	subs	r0, r0, r7
 8000fa2:	42b0      	cmp	r0, r6
 8000fa4:	d9df      	bls.n	8000f66 <FLASH_WaitForLastOperation+0xe>
 8000fa6:	e7f7      	b.n	8000f98 <FLASH_WaitForLastOperation+0x40>
 8000fa8:	40022000 	.word	0x40022000

08000fac <HAL_FLASH_Program>:
{
 8000fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8000fb0:	4c24      	ldr	r4, [pc, #144]	; (8001044 <HAL_FLASH_Program+0x98>)
{
 8000fb2:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8000fb4:	7e23      	ldrb	r3, [r4, #24]
{
 8000fb6:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000fb8:	2b01      	cmp	r3, #1
{
 8000fba:	460f      	mov	r7, r1
 8000fbc:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8000fbe:	d03f      	beq.n	8001040 <HAL_FLASH_Program+0x94>
 8000fc0:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000fc2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000fc6:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000fc8:	f7ff ffc6 	bl	8000f58 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000fcc:	bba0      	cbnz	r0, 8001038 <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000fce:	2d01      	cmp	r5, #1
 8000fd0:	d003      	beq.n	8000fda <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8000fd2:	2d02      	cmp	r5, #2
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2502      	moveq	r5, #2
 8000fd8:	2504      	movne	r5, #4
 8000fda:	f04f 0900 	mov.w	r9, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fde:	46cb      	mov	fp, r9
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000fe0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8001048 <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000fe4:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000fe8:	f1c3 0120 	rsb	r1, r3, #32
 8000fec:	f1a3 0220 	sub.w	r2, r3, #32
 8000ff0:	fa06 f101 	lsl.w	r1, r6, r1
 8000ff4:	fa28 f303 	lsr.w	r3, r8, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ff8:	f8c4 b01c 	str.w	fp, [r4, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	fa26 f202 	lsr.w	r2, r6, r2
 8001002:	4313      	orrs	r3, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001004:	f8da 2010 	ldr.w	r2, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001008:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	f8ca 2010 	str.w	r2, [sl, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001012:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 8001016:	f827 3019 	strh.w	r3, [r7, r9, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800101a:	f7ff ff9d 	bl	8000f58 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800101e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8001022:	f023 0301 	bic.w	r3, r3, #1
 8001026:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 800102a:	b928      	cbnz	r0, 8001038 <HAL_FLASH_Program+0x8c>
 800102c:	f109 0901 	add.w	r9, r9, #1
    for (index = 0U; index < nbiterations; index++)
 8001030:	fa5f f389 	uxtb.w	r3, r9
 8001034:	429d      	cmp	r5, r3
 8001036:	d8d5      	bhi.n	8000fe4 <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 8001038:	2300      	movs	r3, #0
 800103a:	7623      	strb	r3, [r4, #24]
}
 800103c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8001040:	2002      	movs	r0, #2
 8001042:	e7fb      	b.n	800103c <HAL_FLASH_Program+0x90>
 8001044:	20000950 	.word	0x20000950
 8001048:	40022000 	.word	0x40022000

0800104c <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800104c:	2200      	movs	r2, #0
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <FLASH_MassErase.isra.0+0x1c>)
 8001050:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <FLASH_MassErase.isra.0+0x20>)
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	f042 0204 	orr.w	r2, r2, #4
 800105a:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001062:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000950 	.word	0x20000950
 800106c:	40022000 	.word	0x40022000

08001070 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001070:	2200      	movs	r2, #0
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <FLASH_PageErase+0x1c>)
 8001074:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <FLASH_PageErase+0x20>)
 8001078:	691a      	ldr	r2, [r3, #16]
 800107a:	f042 0202 	orr.w	r2, r2, #2
 800107e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001080:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001088:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800108a:	4770      	bx	lr
 800108c:	20000950 	.word	0x20000950
 8001090:	40022000 	.word	0x40022000

08001094 <HAL_FLASHEx_Erase>:
{
 8001094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8001098:	4d22      	ldr	r5, [pc, #136]	; (8001124 <HAL_FLASHEx_Erase+0x90>)
{
 800109a:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 800109c:	7e2b      	ldrb	r3, [r5, #24]
{
 800109e:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d03d      	beq.n	8001120 <HAL_FLASHEx_Erase+0x8c>
 80010a4:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80010a6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 80010a8:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80010aa:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80010ac:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80010b0:	d113      	bne.n	80010da <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80010b2:	f7ff ff51 	bl	8000f58 <FLASH_WaitForLastOperation>
 80010b6:	b120      	cbz	r0, 80010c2 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80010b8:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80010ba:	2300      	movs	r3, #0
 80010bc:	762b      	strb	r3, [r5, #24]
}
 80010be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 80010c2:	f7ff ffc3 	bl	800104c <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010ca:	f7ff ff45 	bl	8000f58 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80010ce:	4a16      	ldr	r2, [pc, #88]	; (8001128 <HAL_FLASHEx_Erase+0x94>)
 80010d0:	6913      	ldr	r3, [r2, #16]
 80010d2:	f023 0304 	bic.w	r3, r3, #4
 80010d6:	6113      	str	r3, [r2, #16]
 80010d8:	e7ef      	b.n	80010ba <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80010da:	f7ff ff3d 	bl	8000f58 <FLASH_WaitForLastOperation>
 80010de:	2800      	cmp	r0, #0
 80010e0:	d1ea      	bne.n	80010b8 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010ea:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80010ec:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80010ee:	4c0e      	ldr	r4, [pc, #56]	; (8001128 <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80010f0:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
 80010f4:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 80010f8:	42b3      	cmp	r3, r6
 80010fa:	d9de      	bls.n	80010ba <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 80010fc:	4630      	mov	r0, r6
 80010fe:	f7ff ffb7 	bl	8001070 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001102:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001106:	f7ff ff27 	bl	8000f58 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800110a:	6923      	ldr	r3, [r4, #16]
 800110c:	f023 0302 	bic.w	r3, r3, #2
 8001110:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8001112:	b110      	cbz	r0, 800111a <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8001114:	f8c8 6000 	str.w	r6, [r8]
            break;
 8001118:	e7cf      	b.n	80010ba <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 800111a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800111e:	e7e7      	b.n	80010f0 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8001120:	2002      	movs	r0, #2
 8001122:	e7cc      	b.n	80010be <HAL_FLASHEx_Erase+0x2a>
 8001124:	20000950 	.word	0x20000950
 8001128:	40022000 	.word	0x40022000

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001130:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001132:	4626      	mov	r6, r4
 8001134:	4b65      	ldr	r3, [pc, #404]	; (80012cc <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001136:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80012dc <HAL_GPIO_Init+0x1b0>
 800113a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80012e0 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113e:	680a      	ldr	r2, [r1, #0]
 8001140:	fa32 f506 	lsrs.w	r5, r2, r6
 8001144:	d102      	bne.n	800114c <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001146:	b003      	add	sp, #12
 8001148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800114c:	f04f 0801 	mov.w	r8, #1
 8001150:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001154:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001158:	4590      	cmp	r8, r2
 800115a:	d17e      	bne.n	800125a <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 800115c:	684d      	ldr	r5, [r1, #4]
 800115e:	2d12      	cmp	r5, #18
 8001160:	f000 80a9 	beq.w	80012b6 <HAL_GPIO_Init+0x18a>
 8001164:	f200 8082 	bhi.w	800126c <HAL_GPIO_Init+0x140>
 8001168:	2d02      	cmp	r5, #2
 800116a:	f000 80a1 	beq.w	80012b0 <HAL_GPIO_Init+0x184>
 800116e:	d876      	bhi.n	800125e <HAL_GPIO_Init+0x132>
 8001170:	2d00      	cmp	r5, #0
 8001172:	f000 8088 	beq.w	8001286 <HAL_GPIO_Init+0x15a>
 8001176:	2d01      	cmp	r5, #1
 8001178:	f000 8098 	beq.w	80012ac <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800117c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001180:	2aff      	cmp	r2, #255	; 0xff
 8001182:	bf93      	iteet	ls
 8001184:	4682      	movls	sl, r0
 8001186:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800118a:	3d08      	subhi	r5, #8
 800118c:	f8d0 b000 	ldrls.w	fp, [r0]
 8001190:	bf92      	itee	ls
 8001192:	00b5      	lslls	r5, r6, #2
 8001194:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001198:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800119a:	fa09 f805 	lsl.w	r8, r9, r5
 800119e:	ea2b 0808 	bic.w	r8, fp, r8
 80011a2:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a6:	bf88      	it	hi
 80011a8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011ac:	ea48 0505 	orr.w	r5, r8, r5
 80011b0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80011b8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80011bc:	d04d      	beq.n	800125a <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011be:	4f44      	ldr	r7, [pc, #272]	; (80012d0 <HAL_GPIO_Init+0x1a4>)
 80011c0:	f026 0803 	bic.w	r8, r6, #3
 80011c4:	69bd      	ldr	r5, [r7, #24]
 80011c6:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80011ca:	f045 0501 	orr.w	r5, r5, #1
 80011ce:	61bd      	str	r5, [r7, #24]
 80011d0:	69bd      	ldr	r5, [r7, #24]
 80011d2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80011d6:	f005 0501 	and.w	r5, r5, #1
 80011da:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011dc:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011e0:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011e2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80011e6:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ea:	fa09 f90b 	lsl.w	r9, r9, fp
 80011ee:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011f2:	4d38      	ldr	r5, [pc, #224]	; (80012d4 <HAL_GPIO_Init+0x1a8>)
 80011f4:	42a8      	cmp	r0, r5
 80011f6:	d063      	beq.n	80012c0 <HAL_GPIO_Init+0x194>
 80011f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011fc:	42a8      	cmp	r0, r5
 80011fe:	d061      	beq.n	80012c4 <HAL_GPIO_Init+0x198>
 8001200:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001204:	42a8      	cmp	r0, r5
 8001206:	d05f      	beq.n	80012c8 <HAL_GPIO_Init+0x19c>
 8001208:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800120c:	42a8      	cmp	r0, r5
 800120e:	bf0c      	ite	eq
 8001210:	2503      	moveq	r5, #3
 8001212:	2504      	movne	r5, #4
 8001214:	fa05 f50b 	lsl.w	r5, r5, fp
 8001218:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800121c:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001220:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001222:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001226:	bf14      	ite	ne
 8001228:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800122a:	4395      	biceq	r5, r2
 800122c:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800122e:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001230:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001234:	bf14      	ite	ne
 8001236:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001238:	4395      	biceq	r5, r2
 800123a:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800123c:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800123e:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001242:	bf14      	ite	ne
 8001244:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001246:	4395      	biceq	r5, r2
 8001248:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800124a:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800124c:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001250:	bf14      	ite	ne
 8001252:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001254:	ea25 0202 	biceq.w	r2, r5, r2
 8001258:	60da      	str	r2, [r3, #12]
	position++;
 800125a:	3601      	adds	r6, #1
 800125c:	e76f      	b.n	800113e <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800125e:	2d03      	cmp	r5, #3
 8001260:	d022      	beq.n	80012a8 <HAL_GPIO_Init+0x17c>
 8001262:	2d11      	cmp	r5, #17
 8001264:	d18a      	bne.n	800117c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001266:	68cc      	ldr	r4, [r1, #12]
 8001268:	3404      	adds	r4, #4
          break;
 800126a:	e787      	b.n	800117c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800126c:	4f1a      	ldr	r7, [pc, #104]	; (80012d8 <HAL_GPIO_Init+0x1ac>)
 800126e:	42bd      	cmp	r5, r7
 8001270:	d009      	beq.n	8001286 <HAL_GPIO_Init+0x15a>
 8001272:	d812      	bhi.n	800129a <HAL_GPIO_Init+0x16e>
 8001274:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80012e4 <HAL_GPIO_Init+0x1b8>
 8001278:	454d      	cmp	r5, r9
 800127a:	d004      	beq.n	8001286 <HAL_GPIO_Init+0x15a>
 800127c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001280:	454d      	cmp	r5, r9
 8001282:	f47f af7b 	bne.w	800117c <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001286:	688c      	ldr	r4, [r1, #8]
 8001288:	b1c4      	cbz	r4, 80012bc <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800128a:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800128c:	bf0c      	ite	eq
 800128e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001292:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001296:	2408      	movs	r4, #8
 8001298:	e770      	b.n	800117c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800129a:	4565      	cmp	r5, ip
 800129c:	d0f3      	beq.n	8001286 <HAL_GPIO_Init+0x15a>
 800129e:	4575      	cmp	r5, lr
 80012a0:	d0f1      	beq.n	8001286 <HAL_GPIO_Init+0x15a>
 80012a2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80012e8 <HAL_GPIO_Init+0x1bc>
 80012a6:	e7eb      	b.n	8001280 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012a8:	2400      	movs	r4, #0
 80012aa:	e767      	b.n	800117c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ac:	68cc      	ldr	r4, [r1, #12]
          break;
 80012ae:	e765      	b.n	800117c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012b0:	68cc      	ldr	r4, [r1, #12]
 80012b2:	3408      	adds	r4, #8
          break;
 80012b4:	e762      	b.n	800117c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012b6:	68cc      	ldr	r4, [r1, #12]
 80012b8:	340c      	adds	r4, #12
          break;
 80012ba:	e75f      	b.n	800117c <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012bc:	2404      	movs	r4, #4
 80012be:	e75d      	b.n	800117c <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012c0:	2500      	movs	r5, #0
 80012c2:	e7a7      	b.n	8001214 <HAL_GPIO_Init+0xe8>
 80012c4:	2501      	movs	r5, #1
 80012c6:	e7a5      	b.n	8001214 <HAL_GPIO_Init+0xe8>
 80012c8:	2502      	movs	r5, #2
 80012ca:	e7a3      	b.n	8001214 <HAL_GPIO_Init+0xe8>
 80012cc:	40010400 	.word	0x40010400
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010800 	.word	0x40010800
 80012d8:	10210000 	.word	0x10210000
 80012dc:	10310000 	.word	0x10310000
 80012e0:	10320000 	.word	0x10320000
 80012e4:	10110000 	.word	0x10110000
 80012e8:	10220000 	.word	0x10220000

080012ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012ec:	6883      	ldr	r3, [r0, #8]
 80012ee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80012f0:	bf14      	ite	ne
 80012f2:	2001      	movne	r0, #1
 80012f4:	2000      	moveq	r0, #0
 80012f6:	4770      	bx	lr

080012f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f8:	b10a      	cbz	r2, 80012fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012fa:	6101      	str	r1, [r0, #16]
  }
}
 80012fc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012fe:	0409      	lsls	r1, r1, #16
 8001300:	e7fb      	b.n	80012fa <HAL_GPIO_WritePin+0x2>

08001302 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001302:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001304:	4604      	mov	r4, r0
{
 8001306:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001308:	b310      	cbz	r0, 8001350 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800130a:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 800130e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001312:	b91b      	cbnz	r3, 800131c <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001314:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001318:	f005 f894 	bl	8006444 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800131c:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800131e:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001320:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8001322:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001326:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 800132a:	f001 fd40 	bl	8002dae <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800132e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001330:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001332:	682b      	ldr	r3, [r5, #0]
 8001334:	4625      	mov	r5, r4
 8001336:	6033      	str	r3, [r6, #0]
 8001338:	1d27      	adds	r7, r4, #4
 800133a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800133e:	f855 0b10 	ldr.w	r0, [r5], #16
 8001342:	f001 fd25 	bl	8002d90 <USB_CoreInit>
 8001346:	4606      	mov	r6, r0
 8001348:	b120      	cbz	r0, 8001354 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800134a:	2302      	movs	r3, #2
 800134c:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 8001350:	2501      	movs	r5, #1
 8001352:	e048      	b.n	80013e6 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001354:	4601      	mov	r1, r0
 8001356:	6820      	ldr	r0, [r4, #0]
 8001358:	f001 fd33 	bl	8002dc2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800135c:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800135e:	f04f 0c01 	mov.w	ip, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001362:	6861      	ldr	r1, [r4, #4]
 8001364:	b2c3      	uxtb	r3, r0
 8001366:	4299      	cmp	r1, r3
 8001368:	f100 0001 	add.w	r0, r0, #1
 800136c:	d817      	bhi.n	800139e <HAL_PCD_Init+0x9c>
 800136e:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001370:	4610      	mov	r0, r2
 8001372:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001374:	4299      	cmp	r1, r3
 8001376:	f102 0201 	add.w	r2, r2, #1
 800137a:	d81d      	bhi.n	80013b8 <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800137c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137e:	466e      	mov	r6, sp
 8001380:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001382:	682b      	ldr	r3, [r5, #0]
 8001384:	6033      	str	r3, [r6, #0]
 8001386:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800138a:	6820      	ldr	r0, [r4, #0]
 800138c:	f001 fd1b 	bl	8002dc6 <USB_DevInit>
 8001390:	2301      	movs	r3, #1
 8001392:	4605      	mov	r5, r0
 8001394:	b300      	cbz	r0, 80013d8 <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001396:	2202      	movs	r2, #2
 8001398:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 800139c:	e7d8      	b.n	8001350 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 800139e:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80013a2:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80013a6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013aa:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013ac:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013b0:	e9c2 660e 	strd	r6, r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 80013b4:	6416      	str	r6, [r2, #64]	; 0x40
 80013b6:	e7d5      	b.n	8001364 <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 80013b8:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 80013bc:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013c0:	330a      	adds	r3, #10
 80013c2:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 80013c4:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013c8:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013cc:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013d0:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013d4:	50e0      	str	r0, [r4, r3]
 80013d6:	e7cc      	b.n	8001372 <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80013d8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80013dc:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80013e0:	6820      	ldr	r0, [r4, #0]
 80013e2:	f001 ff92 	bl	800330a <USB_DevDisconnect>

  return HAL_OK;
}
 80013e6:	4628      	mov	r0, r5
 80013e8:	b007      	add	sp, #28
 80013ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013ec <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80013ec:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 80013f0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80013f2:	2b01      	cmp	r3, #1
{
 80013f4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80013f6:	d00e      	beq.n	8001416 <HAL_PCD_Start+0x2a>
 80013f8:	2101      	movs	r1, #1
 80013fa:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80013fe:	f005 f94e 	bl	800669e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001402:	6820      	ldr	r0, [r4, #0]
 8001404:	f001 ff7f 	bl	8003306 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001408:	6820      	ldr	r0, [r4, #0]
 800140a:	f001 fcc8 	bl	8002d9e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800140e:	2000      	movs	r0, #0
 8001410:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8001414:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001416:	2002      	movs	r0, #2
 8001418:	e7fc      	b.n	8001414 <HAL_PCD_Start+0x28>

0800141a <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800141a:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 800141e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001420:	2a01      	cmp	r2, #1
{
 8001422:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001424:	d00b      	beq.n	800143e <HAL_PCD_SetAddress+0x24>
 8001426:	2201      	movs	r2, #1
 8001428:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 800142c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001430:	6800      	ldr	r0, [r0, #0]
 8001432:	f001 ff62 	bl	80032fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001436:	2000      	movs	r0, #0
 8001438:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 800143c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800143e:	2002      	movs	r0, #2
 8001440:	e7fc      	b.n	800143c <HAL_PCD_SetAddress+0x22>

08001442 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001442:	b570      	push	{r4, r5, r6, lr}
 8001444:	4604      	mov	r4, r0
 8001446:	f001 0507 	and.w	r5, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800144a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800144e:	ea4f 1045 	mov.w	r0, r5, lsl #5
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001452:	bf14      	ite	ne
 8001454:	f100 0128 	addne.w	r1, r0, #40	; 0x28
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001458:	f500 7194 	addeq.w	r1, r0, #296	; 0x128
 800145c:	eb04 0600 	add.w	r6, r4, r0
    ep->is_in = 1U;
 8001460:	bf17      	itett	ne
 8001462:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8001464:	2000      	moveq	r0, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001466:	1909      	addne	r1, r1, r4
    ep->is_in = 1U;
 8001468:	f886 0029 	strbne.w	r0, [r6, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800146c:	bf04      	itt	eq
 800146e:	1909      	addeq	r1, r1, r4
    ep->is_in = 0U;
 8001470:	f886 0129 	strbeq.w	r0, [r6, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8001474:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8001476:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001478:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 800147a:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800147c:	b102      	cbz	r2, 8001480 <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800147e:	81cd      	strh	r5, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001480:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8001482:	bf04      	itt	eq
 8001484:	2300      	moveq	r3, #0
 8001486:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8001488:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 800148c:	2b01      	cmp	r3, #1
 800148e:	d009      	beq.n	80014a4 <HAL_PCD_EP_Open+0x62>
 8001490:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001492:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001494:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001498:	f001 fcb0 	bl	8002dfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800149c:	2000      	movs	r0, #0
 800149e:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
}
 80014a2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80014a4:	2002      	movs	r0, #2
 80014a6:	e7fc      	b.n	80014a2 <HAL_PCD_EP_Open+0x60>

080014a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014a8:	f001 0207 	and.w	r2, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014ac:	f011 0f80 	tst.w	r1, #128	; 0x80
 80014b0:	ea4f 1342 	mov.w	r3, r2, lsl #5
{
 80014b4:	b510      	push	{r4, lr}
 80014b6:	4604      	mov	r4, r0
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014b8:	bf18      	it	ne
 80014ba:	f103 0128 	addne.w	r1, r3, #40	; 0x28
 80014be:	4418      	add	r0, r3
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014c0:	bf0b      	itete	eq
 80014c2:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
    ep->is_in = 1U;
 80014c6:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80014c8:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014ca:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014cc:	bf0a      	itet	eq
 80014ce:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80014d0:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 80014d4:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80014d8:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 80014da:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d009      	beq.n	80014f6 <HAL_PCD_EP_Close+0x4e>
 80014e2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014e4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80014e6:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014ea:	f001 fde1 	bl	80030b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 80014f4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80014f6:	2002      	movs	r0, #2
 80014f8:	e7fc      	b.n	80014f4 <HAL_PCD_EP_Close+0x4c>

080014fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014fa:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80014fc:	2600      	movs	r6, #0
 80014fe:	f001 0107 	and.w	r1, r1, #7
 8001502:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 8001504:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8001506:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800150a:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800150e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8001510:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 8001514:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 8001518:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 800151c:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001520:	6800      	ldr	r0, [r0, #0]
 8001522:	f001 ff09 	bl	8003338 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001526:	4630      	mov	r0, r6
 8001528:	bd70      	pop	{r4, r5, r6, pc}

0800152a <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800152a:	f001 0107 	and.w	r1, r1, #7
 800152e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8001532:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8001536:	4770      	bx	lr

08001538 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001538:	f001 0107 	and.w	r1, r1, #7
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001540:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8001542:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8001546:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8001548:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800154a:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800154e:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001552:	4401      	add	r1, r0
  ep->xfer_count = 0U;
 8001554:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8001556:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800155a:	6800      	ldr	r0, [r0, #0]
 800155c:	f001 feec 	bl	8003338 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001560:	4630      	mov	r0, r6
 8001562:	bd70      	pop	{r4, r5, r6, pc}

08001564 <HAL_PCD_IRQHandler>:
{
 8001564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001568:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800156a:	6800      	ldr	r0, [r0, #0]
 800156c:	f001 fecf 	bl	800330e <USB_ReadInterrupts>
 8001570:	0402      	lsls	r2, r0, #16
 8001572:	d50b      	bpl.n	800158c <HAL_PCD_IRQHandler+0x28>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001574:	f8df 940c 	ldr.w	r9, [pc, #1036]	; 8001984 <HAL_PCD_IRQHandler+0x420>
 8001578:	f8df a40c 	ldr.w	sl, [pc, #1036]	; 8001988 <HAL_PCD_IRQHandler+0x424>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800157c:	f8df b40c 	ldr.w	fp, [pc, #1036]	; 800198c <HAL_PCD_IRQHandler+0x428>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001580:	6820      	ldr	r0, [r4, #0]
 8001582:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001586:	041b      	lsls	r3, r3, #16
 8001588:	f100 809e 	bmi.w	80016c8 <HAL_PCD_IRQHandler+0x164>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800158c:	6820      	ldr	r0, [r4, #0]
 800158e:	f001 febe 	bl	800330e <USB_ReadInterrupts>
 8001592:	0543      	lsls	r3, r0, #21
 8001594:	d50f      	bpl.n	80015b6 <HAL_PCD_IRQHandler+0x52>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001596:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001598:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800159a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800159e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015a2:	041b      	lsls	r3, r3, #16
 80015a4:	0c1b      	lsrs	r3, r3, #16
 80015a6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80015aa:	f004 ff84 	bl	80064b6 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015ae:	2100      	movs	r1, #0
 80015b0:	4620      	mov	r0, r4
 80015b2:	f7ff ff32 	bl	800141a <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80015b6:	6820      	ldr	r0, [r4, #0]
 80015b8:	f001 fea9 	bl	800330e <USB_ReadInterrupts>
 80015bc:	0447      	lsls	r7, r0, #17
 80015be:	d508      	bpl.n	80015d2 <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015c0:	6822      	ldr	r2, [r4, #0]
 80015c2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80015c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015ca:	041b      	lsls	r3, r3, #16
 80015cc:	0c1b      	lsrs	r3, r3, #16
 80015ce:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80015d2:	6820      	ldr	r0, [r4, #0]
 80015d4:	f001 fe9b 	bl	800330e <USB_ReadInterrupts>
 80015d8:	0486      	lsls	r6, r0, #18
 80015da:	d508      	bpl.n	80015ee <HAL_PCD_IRQHandler+0x8a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80015dc:	6822      	ldr	r2, [r4, #0]
 80015de:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80015e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015e6:	041b      	lsls	r3, r3, #16
 80015e8:	0c1b      	lsrs	r3, r3, #16
 80015ea:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80015ee:	6820      	ldr	r0, [r4, #0]
 80015f0:	f001 fe8d 	bl	800330e <USB_ReadInterrupts>
 80015f4:	04c5      	lsls	r5, r0, #19
 80015f6:	d51c      	bpl.n	8001632 <HAL_PCD_IRQHandler+0xce>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80015f8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80015fa:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80015fc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	041b      	lsls	r3, r3, #16
 8001606:	0c1b      	lsrs	r3, r3, #16
 8001608:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800160c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001610:	f023 0308 	bic.w	r3, r3, #8
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	0c1b      	lsrs	r3, r3, #16
 8001618:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800161c:	f004 ff6e 	bl	80064fc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001620:	6822      	ldr	r2, [r4, #0]
 8001622:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800162a:	041b      	lsls	r3, r3, #16
 800162c:	0c1b      	lsrs	r3, r3, #16
 800162e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001632:	6820      	ldr	r0, [r4, #0]
 8001634:	f001 fe6b 	bl	800330e <USB_ReadInterrupts>
 8001638:	0500      	lsls	r0, r0, #20
 800163a:	d524      	bpl.n	8001686 <HAL_PCD_IRQHandler+0x122>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800163c:	6820      	ldr	r0, [r4, #0]
 800163e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800164a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800164e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001652:	041b      	lsls	r3, r3, #16
 8001654:	0c1b      	lsrs	r3, r3, #16
 8001656:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800165a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001666:	f001 fe52 	bl	800330e <USB_ReadInterrupts>
 800166a:	04c1      	lsls	r1, r0, #19
 800166c:	d508      	bpl.n	8001680 <HAL_PCD_IRQHandler+0x11c>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800166e:	6822      	ldr	r2, [r4, #0]
 8001670:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001678:	041b      	lsls	r3, r3, #16
 800167a:	0c1b      	lsrs	r3, r3, #16
 800167c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8001680:	4620      	mov	r0, r4
 8001682:	f004 ff2b 	bl	80064dc <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001686:	6820      	ldr	r0, [r4, #0]
 8001688:	f001 fe41 	bl	800330e <USB_ReadInterrupts>
 800168c:	0582      	lsls	r2, r0, #22
 800168e:	d50b      	bpl.n	80016a8 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001690:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001692:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001694:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	0c1b      	lsrs	r3, r3, #16
 80016a0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80016a4:	f004 ff03 	bl	80064ae <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80016a8:	6820      	ldr	r0, [r4, #0]
 80016aa:	f001 fe30 	bl	800330e <USB_ReadInterrupts>
 80016ae:	05c3      	lsls	r3, r0, #23
 80016b0:	d508      	bpl.n	80016c4 <HAL_PCD_IRQHandler+0x160>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016b2:	6822      	ldr	r2, [r4, #0]
 80016b4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80016b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016bc:	041b      	lsls	r3, r3, #16
 80016be:	0c1b      	lsrs	r3, r3, #16
 80016c0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80016c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80016c8:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 80016cc:	b289      	uxth	r1, r1
    if (epindex == 0U)
 80016ce:	f011 060f 	ands.w	r6, r1, #15
 80016d2:	f040 80b1 	bne.w	8001838 <HAL_PCD_IRQHandler+0x2d4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016d6:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016da:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016dc:	d12a      	bne.n	8001734 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016de:	ea09 0303 	and.w	r3, r9, r3
 80016e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016e6:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016e8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016ec:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80016f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80016f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80016f8:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80016fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001702:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001704:	4413      	add	r3, r2
 8001706:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001708:	4620      	mov	r0, r4
 800170a:	f004 fec9 	bl	80064a0 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800170e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001712:	2b00      	cmp	r3, #0
 8001714:	f43f af34 	beq.w	8001580 <HAL_PCD_IRQHandler+0x1c>
 8001718:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800171a:	2a00      	cmp	r2, #0
 800171c:	f47f af30 	bne.w	8001580 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001720:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001724:	6821      	ldr	r1, [r4, #0]
 8001726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800172e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001732:	e725      	b.n	8001580 <HAL_PCD_IRQHandler+0x1c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001734:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001736:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 800173a:	d020      	beq.n	800177e <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800173c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001740:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001744:	f504 710c 	add.w	r1, r4, #560	; 0x230
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800174c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001750:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001754:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8001758:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800175c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001760:	f001 febe 	bl	80034e0 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001764:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001766:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001768:	8813      	ldrh	r3, [r2, #0]
 800176a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800176e:	051b      	lsls	r3, r3, #20
 8001770:	0d1b      	lsrs	r3, r3, #20
 8001772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001776:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001778:	f004 fe84 	bl	8006484 <HAL_PCD_SetupStageCallback>
 800177c:	e700      	b.n	8001580 <HAL_PCD_IRQHandler+0x1c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800177e:	041f      	lsls	r7, r3, #16
 8001780:	f57f aefe 	bpl.w	8001580 <HAL_PCD_IRQHandler+0x1c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001784:	8803      	ldrh	r3, [r0, #0]
 8001786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800178a:	051b      	lsls	r3, r3, #20
 800178c:	0d1b      	lsrs	r3, r3, #20
 800178e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001792:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001794:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001798:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 800179c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80017a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80017a4:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80017a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017ac:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80017b0:	b18b      	cbz	r3, 80017d6 <HAL_PCD_IRQHandler+0x272>
 80017b2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 80017b6:	b171      	cbz	r1, 80017d6 <HAL_PCD_IRQHandler+0x272>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017b8:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80017bc:	f001 fe90 	bl	80034e0 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80017c0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 80017c4:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80017c8:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 80017ca:	4413      	add	r3, r2
 80017cc:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80017d0:	4620      	mov	r0, r4
 80017d2:	f004 fe5d 	bl	8006490 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80017d6:	6821      	ldr	r1, [r4, #0]
 80017d8:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 80017dc:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80017e0:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b9bd      	cbnz	r5, 8001818 <HAL_PCD_IRQHandler+0x2b4>
 80017e8:	5ac2      	ldrh	r2, [r0, r3]
 80017ea:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80017ee:	0412      	lsls	r2, r2, #16
 80017f0:	0c12      	lsrs	r2, r2, #16
 80017f2:	52c2      	strh	r2, [r0, r3]
 80017f4:	5ac2      	ldrh	r2, [r0, r3]
 80017f6:	ea4a 0202 	orr.w	r2, sl, r2
 80017fa:	b292      	uxth	r2, r2
 80017fc:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80017fe:	880b      	ldrh	r3, [r1, #0]
 8001800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001808:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800180c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001814:	800b      	strh	r3, [r1, #0]
 8001816:	e6b3      	b.n	8001580 <HAL_PCD_IRQHandler+0x1c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001818:	2d3e      	cmp	r5, #62	; 0x3e
 800181a:	d805      	bhi.n	8001828 <HAL_PCD_IRQHandler+0x2c4>
 800181c:	086a      	lsrs	r2, r5, #1
 800181e:	07ee      	lsls	r6, r5, #31
 8001820:	bf48      	it	mi
 8001822:	3201      	addmi	r2, #1
 8001824:	0292      	lsls	r2, r2, #10
 8001826:	e7e8      	b.n	80017fa <HAL_PCD_IRQHandler+0x296>
 8001828:	096a      	lsrs	r2, r5, #5
 800182a:	06ed      	lsls	r5, r5, #27
 800182c:	bf08      	it	eq
 800182e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001832:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 8001836:	e7e0      	b.n	80017fa <HAL_PCD_IRQHandler+0x296>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001838:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 800183c:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001840:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8001844:	d03c      	beq.n	80018c0 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001846:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800184a:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800184c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001850:	051b      	lsls	r3, r3, #20
 8001852:	0d1b      	lsrs	r3, r3, #20
 8001854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001858:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800185c:	19e1      	adds	r1, r4, r7
 800185e:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 8001862:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8001866:	2b00      	cmp	r3, #0
 8001868:	d150      	bne.n	800190c <HAL_PCD_IRQHandler+0x3a8>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800186a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800186e:	f891 5128 	ldrb.w	r5, [r1, #296]	; 0x128
 8001872:	3306      	adds	r3, #6
 8001874:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001878:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 800187c:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8001880:	b135      	cbz	r5, 8001890 <HAL_PCD_IRQHandler+0x32c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001882:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8001886:	462b      	mov	r3, r5
 8001888:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 800188c:	f001 fe28 	bl	80034e0 <USB_ReadPMA>
 8001890:	19e1      	adds	r1, r4, r7
        ep->xfer_count += count;
 8001892:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 8001896:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 800189a:	442b      	add	r3, r5
 800189c:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80018a0:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 80018a4:	442a      	add	r2, r5
 80018a6:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80018aa:	b11b      	cbz	r3, 80018b4 <HAL_PCD_IRQHandler+0x350>
 80018ac:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 80018b0:	4285      	cmp	r5, r0
 80018b2:	d25d      	bcs.n	8001970 <HAL_PCD_IRQHandler+0x40c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80018b4:	4427      	add	r7, r4
 80018b6:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 80018ba:	4620      	mov	r0, r4
 80018bc:	f004 fde8 	bl	8006490 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80018c0:	f018 0f80 	tst.w	r8, #128	; 0x80
 80018c4:	f43f ae5c 	beq.w	8001580 <HAL_PCD_IRQHandler+0x1c>
 80018c8:	6823      	ldr	r3, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80018ca:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80018cc:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80018d0:	ea09 0202 	and.w	r2, r9, r2
 80018d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018d8:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018dc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80018e0:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 80018e4:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 80018e8:	3202      	adds	r2, #2
 80018ea:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80018ee:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80018f2:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 80018f6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80018fc:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80018fe:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8001900:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8001902:	63f2      	str	r2, [r6, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 8001904:	bbd3      	cbnz	r3, 800197c <HAL_PCD_IRQHandler+0x418>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001906:	f004 fdcb 	bl	80064a0 <HAL_PCD_DataInStageCallback>
 800190a:	e639      	b.n	8001580 <HAL_PCD_IRQHandler+0x1c>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800190c:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 8001910:	f830 5023 	ldrh.w	r5, [r0, r3, lsl #2]
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	f415 4f80 	tst.w	r5, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800191a:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800191e:	442b      	add	r3, r5
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001920:	d01b      	beq.n	800195a <HAL_PCD_IRQHandler+0x3f6>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001922:	3302      	adds	r3, #2
 8001924:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001928:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 800192c:	b135      	cbz	r5, 800193c <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800192e:	462b      	mov	r3, r5
 8001930:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001934:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8001938:	f001 fdd2 	bl	80034e0 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800193c:	19e3      	adds	r3, r4, r7
 800193e:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8001942:	6822      	ldr	r2, [r4, #0]
 8001944:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001948:	ea0b 0303 	and.w	r3, fp, r3
 800194c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001950:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001954:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001958:	e79a      	b.n	8001890 <HAL_PCD_IRQHandler+0x32c>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800195a:	3306      	adds	r3, #6
 800195c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001960:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001964:	2d00      	cmp	r5, #0
 8001966:	d0e9      	beq.n	800193c <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001968:	462b      	mov	r3, r5
 800196a:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 800196e:	e7e1      	b.n	8001934 <HAL_PCD_IRQHandler+0x3d0>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001970:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8001974:	4620      	mov	r0, r4
 8001976:	f7ff fdc0 	bl	80014fa <HAL_PCD_EP_Receive>
 800197a:	e7a1      	b.n	80018c0 <HAL_PCD_IRQHandler+0x35c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800197c:	f7ff fddc 	bl	8001538 <HAL_PCD_EP_Transmit>
 8001980:	e5fe      	b.n	8001580 <HAL_PCD_IRQHandler+0x1c>
 8001982:	bf00      	nop
 8001984:	ffff8f0f 	.word	0xffff8f0f
 8001988:	ffff8000 	.word	0xffff8000
 800198c:	ffff8f8f 	.word	0xffff8f8f

08001990 <HAL_PCD_EP_SetStall>:
{
 8001990:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001992:	6843      	ldr	r3, [r0, #4]
 8001994:	f001 0507 	and.w	r5, r1, #7
 8001998:	429d      	cmp	r5, r3
{
 800199a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800199c:	d828      	bhi.n	80019f0 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 800199e:	060b      	lsls	r3, r1, #24
 80019a0:	d51d      	bpl.n	80019de <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 80019a2:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019a4:	016b      	lsls	r3, r5, #5
 80019a6:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 80019aa:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ac:	4401      	add	r1, r0
    ep->is_in = 1U;
 80019ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 80019b2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80019b6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80019b8:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80019bc:	429a      	cmp	r2, r3
 80019be:	d019      	beq.n	80019f4 <HAL_PCD_EP_SetStall+0x64>
 80019c0:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019c4:	6820      	ldr	r0, [r4, #0]
 80019c6:	f001 fc39 	bl	800323c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019ca:	b925      	cbnz	r5, 80019d6 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019cc:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80019d0:	6820      	ldr	r0, [r4, #0]
 80019d2:	f001 fc9f 	bl	8003314 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 80019dc:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80019de:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80019e0:	014b      	lsls	r3, r1, #5
 80019e2:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 80019e6:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80019e8:	4401      	add	r1, r0
    ep->is_in = 0U;
 80019ea:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 80019ee:	e7e0      	b.n	80019b2 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80019f0:	2001      	movs	r0, #1
 80019f2:	e7f3      	b.n	80019dc <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 80019f4:	2002      	movs	r0, #2
 80019f6:	e7f1      	b.n	80019dc <HAL_PCD_EP_SetStall+0x4c>

080019f8 <HAL_PCD_EP_ClrStall>:
{
 80019f8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019fa:	6843      	ldr	r3, [r0, #4]
 80019fc:	f001 020f 	and.w	r2, r1, #15
 8001a00:	429a      	cmp	r2, r3
{
 8001a02:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a04:	d827      	bhi.n	8001a56 <HAL_PCD_EP_ClrStall+0x5e>
 8001a06:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8001a0a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001a0e:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a12:	bf14      	ite	ne
 8001a14:	f103 0128 	addne.w	r1, r3, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a18:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
 8001a1c:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8001a1e:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8001a22:	bf15      	itete	ne
 8001a24:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8001a26:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a28:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a2a:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8001a2c:	bf14      	ite	ne
 8001a2e:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 8001a32:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  ep->is_stall = 0U;
 8001a36:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a38:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001a3a:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d00b      	beq.n	8001a5a <HAL_PCD_EP_ClrStall+0x62>
 8001a42:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a44:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001a46:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a4a:	f001 fc13 	bl	8003274 <USB_EPClearStall>
  return HAL_OK;
 8001a4e:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8001a50:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
}
 8001a54:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001a56:	2001      	movs	r0, #1
 8001a58:	e7fc      	b.n	8001a54 <HAL_PCD_EP_ClrStall+0x5c>
  __HAL_LOCK(hpcd);
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	e7fa      	b.n	8001a54 <HAL_PCD_EP_ClrStall+0x5c>

08001a5e <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001a5e:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a62:	bf1b      	ittet	ne
 8001a64:	f001 0107 	andne.w	r1, r1, #7
 8001a68:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a6c:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a70:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001a72:	bf08      	it	eq
 8001a74:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
 8001a78:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001a7a:	b91a      	cbnz	r2, 8001a84 <HAL_PCDEx_PMAConfig+0x26>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001a7c:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001a7e:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001a80:	2000      	movs	r0, #0
 8001a82:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001a84:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001a86:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001a88:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001a8a:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001a8c:	8143      	strh	r3, [r0, #10]
 8001a8e:	e7f7      	b.n	8001a80 <HAL_PCDEx_PMAConfig+0x22>

08001a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a94:	4605      	mov	r5, r0
 8001a96:	b908      	cbnz	r0, 8001a9c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001a98:	2001      	movs	r0, #1
 8001a9a:	e03c      	b.n	8001b16 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9c:	6803      	ldr	r3, [r0, #0]
 8001a9e:	07db      	lsls	r3, r3, #31
 8001aa0:	d410      	bmi.n	8001ac4 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa2:	682b      	ldr	r3, [r5, #0]
 8001aa4:	079f      	lsls	r7, r3, #30
 8001aa6:	d45d      	bmi.n	8001b64 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa8:	682b      	ldr	r3, [r5, #0]
 8001aaa:	0719      	lsls	r1, r3, #28
 8001aac:	f100 8094 	bmi.w	8001bd8 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab0:	682b      	ldr	r3, [r5, #0]
 8001ab2:	075a      	lsls	r2, r3, #29
 8001ab4:	f100 80be 	bmi.w	8001c34 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab8:	69e8      	ldr	r0, [r5, #28]
 8001aba:	2800      	cmp	r0, #0
 8001abc:	f040 812c 	bne.w	8001d18 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	e028      	b.n	8001b16 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac4:	4c8f      	ldr	r4, [pc, #572]	; (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001ac6:	6863      	ldr	r3, [r4, #4]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d007      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ad0:	6863      	ldr	r3, [r4, #4]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d109      	bne.n	8001aee <HAL_RCC_OscConfig+0x5e>
 8001ada:	6863      	ldr	r3, [r4, #4]
 8001adc:	03de      	lsls	r6, r3, #15
 8001ade:	d506      	bpl.n	8001aee <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	039c      	lsls	r4, r3, #14
 8001ae4:	d5dd      	bpl.n	8001aa2 <HAL_RCC_OscConfig+0x12>
 8001ae6:	686b      	ldr	r3, [r5, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1da      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x12>
 8001aec:	e7d4      	b.n	8001a98 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aee:	686b      	ldr	r3, [r5, #4]
 8001af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af4:	d112      	bne.n	8001b1c <HAL_RCC_OscConfig+0x8c>
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001afe:	f7fe fdf3 	bl	80006e8 <HAL_GetTick>
 8001b02:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b04:	6823      	ldr	r3, [r4, #0]
 8001b06:	0398      	lsls	r0, r3, #14
 8001b08:	d4cb      	bmi.n	8001aa2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b0a:	f7fe fded 	bl	80006e8 <HAL_GetTick>
 8001b0e:	1b80      	subs	r0, r0, r6
 8001b10:	2864      	cmp	r0, #100	; 0x64
 8001b12:	d9f7      	bls.n	8001b04 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001b14:	2003      	movs	r0, #3
}
 8001b16:	b002      	add	sp, #8
 8001b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1c:	b99b      	cbnz	r3, 8001b46 <HAL_RCC_OscConfig+0xb6>
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b24:	6023      	str	r3, [r4, #0]
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b2e:	f7fe fddb 	bl	80006e8 <HAL_GetTick>
 8001b32:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	0399      	lsls	r1, r3, #14
 8001b38:	d5b3      	bpl.n	8001aa2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3a:	f7fe fdd5 	bl	80006e8 <HAL_GetTick>
 8001b3e:	1b80      	subs	r0, r0, r6
 8001b40:	2864      	cmp	r0, #100	; 0x64
 8001b42:	d9f7      	bls.n	8001b34 <HAL_RCC_OscConfig+0xa4>
 8001b44:	e7e6      	b.n	8001b14 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	d103      	bne.n	8001b56 <HAL_RCC_OscConfig+0xc6>
 8001b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b52:	6023      	str	r3, [r4, #0]
 8001b54:	e7cf      	b.n	8001af6 <HAL_RCC_OscConfig+0x66>
 8001b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5a:	6023      	str	r3, [r4, #0]
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b62:	e7cb      	b.n	8001afc <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b64:	4c67      	ldr	r4, [pc, #412]	; (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001b66:	6863      	ldr	r3, [r4, #4]
 8001b68:	f013 0f0c 	tst.w	r3, #12
 8001b6c:	d007      	beq.n	8001b7e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b6e:	6863      	ldr	r3, [r4, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d110      	bne.n	8001b9a <HAL_RCC_OscConfig+0x10a>
 8001b78:	6863      	ldr	r3, [r4, #4]
 8001b7a:	03da      	lsls	r2, r3, #15
 8001b7c:	d40d      	bmi.n	8001b9a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	079b      	lsls	r3, r3, #30
 8001b82:	d502      	bpl.n	8001b8a <HAL_RCC_OscConfig+0xfa>
 8001b84:	692b      	ldr	r3, [r5, #16]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d186      	bne.n	8001a98 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	6823      	ldr	r3, [r4, #0]
 8001b8c:	696a      	ldr	r2, [r5, #20]
 8001b8e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b92:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b96:	6023      	str	r3, [r4, #0]
 8001b98:	e786      	b.n	8001aa8 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b9a:	692a      	ldr	r2, [r5, #16]
 8001b9c:	4b5a      	ldr	r3, [pc, #360]	; (8001d08 <HAL_RCC_OscConfig+0x278>)
 8001b9e:	b16a      	cbz	r2, 8001bbc <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ba4:	f7fe fda0 	bl	80006e8 <HAL_GetTick>
 8001ba8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	079f      	lsls	r7, r3, #30
 8001bae:	d4ec      	bmi.n	8001b8a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb0:	f7fe fd9a 	bl	80006e8 <HAL_GetTick>
 8001bb4:	1b80      	subs	r0, r0, r6
 8001bb6:	2802      	cmp	r0, #2
 8001bb8:	d9f7      	bls.n	8001baa <HAL_RCC_OscConfig+0x11a>
 8001bba:	e7ab      	b.n	8001b14 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001bbc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bbe:	f7fe fd93 	bl	80006e8 <HAL_GetTick>
 8001bc2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	0798      	lsls	r0, r3, #30
 8001bc8:	f57f af6e 	bpl.w	8001aa8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7fe fd8c 	bl	80006e8 <HAL_GetTick>
 8001bd0:	1b80      	subs	r0, r0, r6
 8001bd2:	2802      	cmp	r0, #2
 8001bd4:	d9f6      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x134>
 8001bd6:	e79d      	b.n	8001b14 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bd8:	69aa      	ldr	r2, [r5, #24]
 8001bda:	4c4a      	ldr	r4, [pc, #296]	; (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	4b4b      	ldr	r3, [pc, #300]	; (8001d0c <HAL_RCC_OscConfig+0x27c>)
 8001bde:	b1da      	cbz	r2, 8001c18 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001be4:	f7fe fd80 	bl	80006e8 <HAL_GetTick>
 8001be8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bec:	079b      	lsls	r3, r3, #30
 8001bee:	d50d      	bpl.n	8001c0c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bf0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001bf4:	4b46      	ldr	r3, [pc, #280]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bfc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001bfe:	bf00      	nop
  }
  while (Delay --);
 8001c00:	9b01      	ldr	r3, [sp, #4]
 8001c02:	1e5a      	subs	r2, r3, #1
 8001c04:	9201      	str	r2, [sp, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f9      	bne.n	8001bfe <HAL_RCC_OscConfig+0x16e>
 8001c0a:	e751      	b.n	8001ab0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7fe fd6c 	bl	80006e8 <HAL_GetTick>
 8001c10:	1b80      	subs	r0, r0, r6
 8001c12:	2802      	cmp	r0, #2
 8001c14:	d9e9      	bls.n	8001bea <HAL_RCC_OscConfig+0x15a>
 8001c16:	e77d      	b.n	8001b14 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001c18:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c1a:	f7fe fd65 	bl	80006e8 <HAL_GetTick>
 8001c1e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c22:	079f      	lsls	r7, r3, #30
 8001c24:	f57f af44 	bpl.w	8001ab0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c28:	f7fe fd5e 	bl	80006e8 <HAL_GetTick>
 8001c2c:	1b80      	subs	r0, r0, r6
 8001c2e:	2802      	cmp	r0, #2
 8001c30:	d9f6      	bls.n	8001c20 <HAL_RCC_OscConfig+0x190>
 8001c32:	e76f      	b.n	8001b14 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c34:	4c33      	ldr	r4, [pc, #204]	; (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001c36:	69e3      	ldr	r3, [r4, #28]
 8001c38:	00d8      	lsls	r0, r3, #3
 8001c3a:	d424      	bmi.n	8001c86 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001c3c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	69e3      	ldr	r3, [r4, #28]
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c44:	61e3      	str	r3, [r4, #28]
 8001c46:	69e3      	ldr	r3, [r4, #28]
 8001c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	4e30      	ldr	r6, [pc, #192]	; (8001d14 <HAL_RCC_OscConfig+0x284>)
 8001c52:	6833      	ldr	r3, [r6, #0]
 8001c54:	05d9      	lsls	r1, r3, #23
 8001c56:	d518      	bpl.n	8001c8a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c58:	68eb      	ldr	r3, [r5, #12]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d126      	bne.n	8001cac <HAL_RCC_OscConfig+0x21c>
 8001c5e:	6a23      	ldr	r3, [r4, #32]
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001c66:	f7fe fd3f 	bl	80006e8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c6e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	6a23      	ldr	r3, [r4, #32]
 8001c72:	079b      	lsls	r3, r3, #30
 8001c74:	d53f      	bpl.n	8001cf6 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001c76:	2f00      	cmp	r7, #0
 8001c78:	f43f af1e 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c7c:	69e3      	ldr	r3, [r4, #28]
 8001c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c82:	61e3      	str	r3, [r4, #28]
 8001c84:	e718      	b.n	8001ab8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001c86:	2700      	movs	r7, #0
 8001c88:	e7e2      	b.n	8001c50 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8a:	6833      	ldr	r3, [r6, #0]
 8001c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c90:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001c92:	f7fe fd29 	bl	80006e8 <HAL_GetTick>
 8001c96:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c98:	6833      	ldr	r3, [r6, #0]
 8001c9a:	05da      	lsls	r2, r3, #23
 8001c9c:	d4dc      	bmi.n	8001c58 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9e:	f7fe fd23 	bl	80006e8 <HAL_GetTick>
 8001ca2:	eba0 0008 	sub.w	r0, r0, r8
 8001ca6:	2864      	cmp	r0, #100	; 0x64
 8001ca8:	d9f6      	bls.n	8001c98 <HAL_RCC_OscConfig+0x208>
 8001caa:	e733      	b.n	8001b14 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cac:	b9ab      	cbnz	r3, 8001cda <HAL_RCC_OscConfig+0x24a>
 8001cae:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	6223      	str	r3, [r4, #32]
 8001cba:	6a23      	ldr	r3, [r4, #32]
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001cc2:	f7fe fd11 	bl	80006e8 <HAL_GetTick>
 8001cc6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc8:	6a23      	ldr	r3, [r4, #32]
 8001cca:	0798      	lsls	r0, r3, #30
 8001ccc:	d5d3      	bpl.n	8001c76 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f7fe fd0b 	bl	80006e8 <HAL_GetTick>
 8001cd2:	1b80      	subs	r0, r0, r6
 8001cd4:	4540      	cmp	r0, r8
 8001cd6:	d9f7      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x238>
 8001cd8:	e71c      	b.n	8001b14 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	6a23      	ldr	r3, [r4, #32]
 8001cde:	d103      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x258>
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	6223      	str	r3, [r4, #32]
 8001ce6:	e7ba      	b.n	8001c5e <HAL_RCC_OscConfig+0x1ce>
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6223      	str	r3, [r4, #32]
 8001cee:	6a23      	ldr	r3, [r4, #32]
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	e7b6      	b.n	8001c64 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7fe fcf7 	bl	80006e8 <HAL_GetTick>
 8001cfa:	eba0 0008 	sub.w	r0, r0, r8
 8001cfe:	42b0      	cmp	r0, r6
 8001d00:	d9b6      	bls.n	8001c70 <HAL_RCC_OscConfig+0x1e0>
 8001d02:	e707      	b.n	8001b14 <HAL_RCC_OscConfig+0x84>
 8001d04:	40021000 	.word	0x40021000
 8001d08:	42420000 	.word	0x42420000
 8001d0c:	42420480 	.word	0x42420480
 8001d10:	20000184 	.word	0x20000184
 8001d14:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d18:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <HAL_RCC_OscConfig+0x334>)
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	461c      	mov	r4, r3
 8001d1e:	f002 020c 	and.w	r2, r2, #12
 8001d22:	2a08      	cmp	r2, #8
 8001d24:	d03d      	beq.n	8001da2 <HAL_RCC_OscConfig+0x312>
 8001d26:	2300      	movs	r3, #0
 8001d28:	4e27      	ldr	r6, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001d2c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2e:	d12b      	bne.n	8001d88 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001d30:	f7fe fcda 	bl	80006e8 <HAL_GetTick>
 8001d34:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	0199      	lsls	r1, r3, #6
 8001d3a:	d41f      	bmi.n	8001d7c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d3c:	6a2b      	ldr	r3, [r5, #32]
 8001d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d44:	6862      	ldr	r2, [r4, #4]
 8001d46:	68a9      	ldr	r1, [r5, #8]
 8001d48:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d50:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001d52:	6862      	ldr	r2, [r4, #4]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d5e:	2301      	movs	r3, #1
 8001d60:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001d62:	f7fe fcc1 	bl	80006e8 <HAL_GetTick>
 8001d66:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	019a      	lsls	r2, r3, #6
 8001d6c:	f53f aea8 	bmi.w	8001ac0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d70:	f7fe fcba 	bl	80006e8 <HAL_GetTick>
 8001d74:	1b40      	subs	r0, r0, r5
 8001d76:	2802      	cmp	r0, #2
 8001d78:	d9f6      	bls.n	8001d68 <HAL_RCC_OscConfig+0x2d8>
 8001d7a:	e6cb      	b.n	8001b14 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7fe fcb4 	bl	80006e8 <HAL_GetTick>
 8001d80:	1bc0      	subs	r0, r0, r7
 8001d82:	2802      	cmp	r0, #2
 8001d84:	d9d7      	bls.n	8001d36 <HAL_RCC_OscConfig+0x2a6>
 8001d86:	e6c5      	b.n	8001b14 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001d88:	f7fe fcae 	bl	80006e8 <HAL_GetTick>
 8001d8c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8e:	6823      	ldr	r3, [r4, #0]
 8001d90:	019b      	lsls	r3, r3, #6
 8001d92:	f57f ae95 	bpl.w	8001ac0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7fe fca7 	bl	80006e8 <HAL_GetTick>
 8001d9a:	1b40      	subs	r0, r0, r5
 8001d9c:	2802      	cmp	r0, #2
 8001d9e:	d9f6      	bls.n	8001d8e <HAL_RCC_OscConfig+0x2fe>
 8001da0:	e6b8      	b.n	8001b14 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da2:	2801      	cmp	r0, #1
 8001da4:	f43f aeb7 	beq.w	8001b16 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001da8:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001daa:	6a2b      	ldr	r3, [r5, #32]
 8001dac:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f47f ae71 	bne.w	8001a98 <HAL_RCC_OscConfig+0x8>
 8001db6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001db8:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001dbc:	1ac0      	subs	r0, r0, r3
 8001dbe:	bf18      	it	ne
 8001dc0:	2001      	movne	r0, #1
 8001dc2:	e6a8      	b.n	8001b16 <HAL_RCC_OscConfig+0x86>
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	42420060 	.word	0x42420060

08001dcc <HAL_RCC_GetSysClockFreq>:
{
 8001dcc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001dd0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dd2:	ac02      	add	r4, sp, #8
 8001dd4:	f103 0510 	add.w	r5, r3, #16
 8001dd8:	4622      	mov	r2, r4
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	6859      	ldr	r1, [r3, #4]
 8001dde:	3308      	adds	r3, #8
 8001de0:	c203      	stmia	r2!, {r0, r1}
 8001de2:	42ab      	cmp	r3, r5
 8001de4:	4614      	mov	r4, r2
 8001de6:	d1f7      	bne.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001de8:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001dec:	4911      	ldr	r1, [pc, #68]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dee:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001df2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001df4:	f003 020c 	and.w	r2, r3, #12
 8001df8:	2a08      	cmp	r2, #8
 8001dfa:	d117      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dfc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001e00:	a806      	add	r0, sp, #24
 8001e02:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e04:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e06:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e0a:	d50c      	bpl.n	8001e26 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e0c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e0e:	480a      	ldr	r0, [pc, #40]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e10:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e14:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e16:	aa06      	add	r2, sp, #24
 8001e18:	4413      	add	r3, r2
 8001e1a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e1e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001e22:	b007      	add	sp, #28
 8001e24:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x70>)
 8001e28:	4350      	muls	r0, r2
 8001e2a:	e7fa      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001e2e:	e7f8      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x56>
 8001e30:	080078ec 	.word	0x080078ec
 8001e34:	40021000 	.word	0x40021000
 8001e38:	007a1200 	.word	0x007a1200
 8001e3c:	003d0900 	.word	0x003d0900

08001e40 <HAL_RCC_ClockConfig>:
{
 8001e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e44:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001e46:	4604      	mov	r4, r0
 8001e48:	b910      	cbnz	r0, 8001e50 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001e4a:	2001      	movs	r0, #1
}
 8001e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e50:	4a44      	ldr	r2, [pc, #272]	; (8001f64 <HAL_RCC_ClockConfig+0x124>)
 8001e52:	6813      	ldr	r3, [r2, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	428b      	cmp	r3, r1
 8001e5a:	d328      	bcc.n	8001eae <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	6821      	ldr	r1, [r4, #0]
 8001e5e:	078e      	lsls	r6, r1, #30
 8001e60:	d430      	bmi.n	8001ec4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e62:	07ca      	lsls	r2, r1, #31
 8001e64:	d443      	bmi.n	8001eee <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e66:	4a3f      	ldr	r2, [pc, #252]	; (8001f64 <HAL_RCC_ClockConfig+0x124>)
 8001e68:	6813      	ldr	r3, [r2, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	42ab      	cmp	r3, r5
 8001e70:	d865      	bhi.n	8001f3e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e72:	6822      	ldr	r2, [r4, #0]
 8001e74:	4d3c      	ldr	r5, [pc, #240]	; (8001f68 <HAL_RCC_ClockConfig+0x128>)
 8001e76:	f012 0f04 	tst.w	r2, #4
 8001e7a:	d16c      	bne.n	8001f56 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7c:	0713      	lsls	r3, r2, #28
 8001e7e:	d506      	bpl.n	8001e8e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e80:	686b      	ldr	r3, [r5, #4]
 8001e82:	6922      	ldr	r2, [r4, #16]
 8001e84:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001e88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e8c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e8e:	f7ff ff9d 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8001e92:	686b      	ldr	r3, [r5, #4]
 8001e94:	4a35      	ldr	r2, [pc, #212]	; (8001f6c <HAL_RCC_ClockConfig+0x12c>)
 8001e96:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	40d8      	lsrs	r0, r3
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <HAL_RCC_ClockConfig+0x130>)
 8001ea0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001ea2:	4b34      	ldr	r3, [pc, #208]	; (8001f74 <HAL_RCC_ClockConfig+0x134>)
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	f7fe fbdd 	bl	8000664 <HAL_InitTick>
  return HAL_OK;
 8001eaa:	2000      	movs	r0, #0
 8001eac:	e7ce      	b.n	8001e4c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	6813      	ldr	r3, [r2, #0]
 8001eb0:	f023 0307 	bic.w	r3, r3, #7
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb8:	6813      	ldr	r3, [r2, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	428b      	cmp	r3, r1
 8001ec0:	d1c3      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xa>
 8001ec2:	e7cb      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1c>
 8001ec4:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eca:	bf1e      	ittt	ne
 8001ecc:	685a      	ldrne	r2, [r3, #4]
 8001ece:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001ed2:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed6:	bf42      	ittt	mi
 8001ed8:	685a      	ldrmi	r2, [r3, #4]
 8001eda:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001ede:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	68a0      	ldr	r0, [r4, #8]
 8001ee4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ee8:	4302      	orrs	r2, r0
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	e7b9      	b.n	8001e62 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eee:	6862      	ldr	r2, [r4, #4]
 8001ef0:	4e1d      	ldr	r6, [pc, #116]	; (8001f68 <HAL_RCC_ClockConfig+0x128>)
 8001ef2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef4:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef6:	d11a      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efc:	d0a5      	beq.n	8001e4a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efe:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f04:	f023 0303 	bic.w	r3, r3, #3
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fbec 	bl	80006e8 <HAL_GetTick>
 8001f10:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	6873      	ldr	r3, [r6, #4]
 8001f14:	6862      	ldr	r2, [r4, #4]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f1e:	d0a2      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f20:	f7fe fbe2 	bl	80006e8 <HAL_GetTick>
 8001f24:	1bc0      	subs	r0, r0, r7
 8001f26:	4540      	cmp	r0, r8
 8001f28:	d9f3      	bls.n	8001f12 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001f2a:	2003      	movs	r0, #3
 8001f2c:	e78e      	b.n	8001e4c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f2e:	2a02      	cmp	r2, #2
 8001f30:	d102      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f32:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f36:	e7e1      	b.n	8001efc <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f38:	f013 0f02 	tst.w	r3, #2
 8001f3c:	e7de      	b.n	8001efc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	6813      	ldr	r3, [r2, #0]
 8001f40:	f023 0307 	bic.w	r3, r3, #7
 8001f44:	432b      	orrs	r3, r5
 8001f46:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f48:	6813      	ldr	r3, [r2, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	42ab      	cmp	r3, r5
 8001f50:	f47f af7b 	bne.w	8001e4a <HAL_RCC_ClockConfig+0xa>
 8001f54:	e78d      	b.n	8001e72 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f56:	686b      	ldr	r3, [r5, #4]
 8001f58:	68e1      	ldr	r1, [r4, #12]
 8001f5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	606b      	str	r3, [r5, #4]
 8001f62:	e78b      	b.n	8001e7c <HAL_RCC_ClockConfig+0x3c>
 8001f64:	40022000 	.word	0x40022000
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	0800860e 	.word	0x0800860e
 8001f70:	20000184 	.word	0x20000184
 8001f74:	20000004 	.word	0x20000004

08001f78 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001f82:	5cd3      	ldrb	r3, [r2, r3]
 8001f84:	4a03      	ldr	r2, [pc, #12]	; (8001f94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f86:	6810      	ldr	r0, [r2, #0]
}
 8001f88:	40d8      	lsrs	r0, r3
 8001f8a:	4770      	bx	lr
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	0800861e 	.word	0x0800861e
 8001f94:	20000184 	.word	0x20000184

08001f98 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_RCC_GetPCLK2Freq+0x14>)
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	4a03      	ldr	r2, [pc, #12]	; (8001fb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001fa6:	6810      	ldr	r0, [r2, #0]
}
 8001fa8:	40d8      	lsrs	r0, r3
 8001faa:	4770      	bx	lr
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	0800861e 	.word	0x0800861e
 8001fb4:	20000184 	.word	0x20000184

08001fb8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fb8:	6803      	ldr	r3, [r0, #0]
{
 8001fba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fbe:	07d9      	lsls	r1, r3, #31
{
 8001fc0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fc2:	d520      	bpl.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc4:	4c35      	ldr	r4, [pc, #212]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001fc6:	69e3      	ldr	r3, [r4, #28]
 8001fc8:	00da      	lsls	r2, r3, #3
 8001fca:	d432      	bmi.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001fcc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	69e3      	ldr	r3, [r4, #28]
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	61e3      	str	r3, [r4, #28]
 8001fd6:	69e3      	ldr	r3, [r4, #28]
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	4e2f      	ldr	r6, [pc, #188]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001fe2:	6833      	ldr	r3, [r6, #0]
 8001fe4:	05db      	lsls	r3, r3, #23
 8001fe6:	d526      	bpl.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fe8:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fea:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001fee:	d136      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ff0:	6a23      	ldr	r3, [r4, #32]
 8001ff2:	686a      	ldr	r2, [r5, #4]
 8001ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ffc:	b11f      	cbz	r7, 8002006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffe:	69e3      	ldr	r3, [r4, #28]
 8002000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002004:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002006:	6828      	ldr	r0, [r5, #0]
 8002008:	0783      	lsls	r3, r0, #30
 800200a:	d506      	bpl.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800200c:	4a23      	ldr	r2, [pc, #140]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800200e:	68a9      	ldr	r1, [r5, #8]
 8002010:	6853      	ldr	r3, [r2, #4]
 8002012:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002016:	430b      	orrs	r3, r1
 8002018:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800201a:	f010 0010 	ands.w	r0, r0, #16
 800201e:	d01b      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002020:	4a1e      	ldr	r2, [pc, #120]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002022:	68e9      	ldr	r1, [r5, #12]
 8002024:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002026:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002028:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800202c:	430b      	orrs	r3, r1
 800202e:	6053      	str	r3, [r2, #4]
 8002030:	e012      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8002032:	2700      	movs	r7, #0
 8002034:	e7d4      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002036:	6833      	ldr	r3, [r6, #0]
 8002038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800203e:	f7fe fb53 	bl	80006e8 <HAL_GetTick>
 8002042:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	6833      	ldr	r3, [r6, #0]
 8002046:	05d8      	lsls	r0, r3, #23
 8002048:	d4ce      	bmi.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204a:	f7fe fb4d 	bl	80006e8 <HAL_GetTick>
 800204e:	eba0 0008 	sub.w	r0, r0, r8
 8002052:	2864      	cmp	r0, #100	; 0x64
 8002054:	d9f6      	bls.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002056:	2003      	movs	r0, #3
}
 8002058:	b002      	add	sp, #8
 800205a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800205e:	686a      	ldr	r2, [r5, #4]
 8002060:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002064:	429a      	cmp	r2, r3
 8002066:	d0c3      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002068:	2001      	movs	r0, #1
 800206a:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800206c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800206e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002070:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002072:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002076:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002078:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800207a:	07d9      	lsls	r1, r3, #31
 800207c:	d5b8      	bpl.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800207e:	f7fe fb33 	bl	80006e8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002086:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	6a23      	ldr	r3, [r4, #32]
 800208a:	079a      	lsls	r2, r3, #30
 800208c:	d4b0      	bmi.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7fe fb2b 	bl	80006e8 <HAL_GetTick>
 8002092:	1b80      	subs	r0, r0, r6
 8002094:	4540      	cmp	r0, r8
 8002096:	d9f7      	bls.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002098:	e7dd      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	40007000 	.word	0x40007000
 80020a4:	42420440 	.word	0x42420440

080020a8 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80020a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020aa:	4604      	mov	r4, r0
 80020ac:	460e      	mov	r6, r1
 80020ae:	4615      	mov	r5, r2
 80020b0:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020b2:	6821      	ldr	r1, [r4, #0]
 80020b4:	688a      	ldr	r2, [r1, #8]
 80020b6:	ea36 0302 	bics.w	r3, r6, r2
 80020ba:	d001      	beq.n	80020c0 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80020bc:	2000      	movs	r0, #0
 80020be:	e02d      	b.n	800211c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80020c0:	1c6b      	adds	r3, r5, #1
 80020c2:	d0f7      	beq.n	80020b4 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80020c4:	f7fe fb10 	bl	80006e8 <HAL_GetTick>
 80020c8:	1bc0      	subs	r0, r0, r7
 80020ca:	4285      	cmp	r5, r0
 80020cc:	d8f1      	bhi.n	80020b2 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80020d6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020d8:	6862      	ldr	r2, [r4, #4]
 80020da:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80020de:	d10a      	bne.n	80020f6 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
 80020e0:	68a2      	ldr	r2, [r4, #8]
 80020e2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80020e6:	d002      	beq.n	80020ee <SPI_WaitFlagStateUntilTimeout.constprop.6+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020e8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80020ec:	d103      	bne.n	80020f6 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
          __HAL_SPI_DISABLE(hspi);
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020f4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80020f8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80020fc:	d107      	bne.n	800210e <SPI_WaitFlagStateUntilTimeout.constprop.6+0x66>
          SPI_RESET_CRC(hspi);
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800210c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800210e:	2301      	movs	r3, #1
 8002110:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002114:	2300      	movs	r3, #0
 8002116:	2003      	movs	r0, #3
 8002118:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800211c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800211e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800211e:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002120:	4613      	mov	r3, r2
 8002122:	460a      	mov	r2, r1
 8002124:	2180      	movs	r1, #128	; 0x80
{
 8002126:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002128:	f7ff ffbe 	bl	80020a8 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 800212c:	b120      	cbz	r0, 8002138 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 800212e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002130:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002132:	f043 0320 	orr.w	r3, r3, #32
 8002136:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002138:	bd10      	pop	{r4, pc}

0800213a <HAL_SPI_MspInit>:
}
 800213a:	4770      	bx	lr

0800213c <HAL_SPI_Init>:
{
 800213c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800213e:	4604      	mov	r4, r0
 8002140:	2800      	cmp	r0, #0
 8002142:	d034      	beq.n	80021ae <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002148:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800214c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002150:	b91b      	cbnz	r3, 800215a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002152:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002156:	f7ff fff0 	bl	800213a <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800215a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800215c:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800215e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002162:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002164:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8002166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800216a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800216c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8002170:	4303      	orrs	r3, r0
 8002172:	68e0      	ldr	r0, [r4, #12]
 8002174:	4303      	orrs	r3, r0
 8002176:	6920      	ldr	r0, [r4, #16]
 8002178:	4303      	orrs	r3, r0
 800217a:	6960      	ldr	r0, [r4, #20]
 800217c:	4303      	orrs	r3, r0
 800217e:	69e0      	ldr	r0, [r4, #28]
 8002180:	4303      	orrs	r3, r0
 8002182:	6a20      	ldr	r0, [r4, #32]
 8002184:	4303      	orrs	r3, r0
 8002186:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002188:	4303      	orrs	r3, r0
 800218a:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800218e:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002190:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002192:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002196:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002198:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800219a:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800219c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800219e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021a2:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80021a4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021a6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021a8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80021ac:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021ae:	2001      	movs	r0, #1
 80021b0:	e7fc      	b.n	80021ac <HAL_SPI_Init+0x70>

080021b2 <HAL_SPI_Transmit>:
{
 80021b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80021b6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80021b8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80021bc:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80021be:	2b01      	cmp	r3, #1
{
 80021c0:	460d      	mov	r5, r1
 80021c2:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80021c4:	f000 809c 	beq.w	8002300 <HAL_SPI_Transmit+0x14e>
 80021c8:	2301      	movs	r3, #1
 80021ca:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80021ce:	f7fe fa8b 	bl	80006e8 <HAL_GetTick>
 80021d2:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80021d4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80021d8:	b2c0      	uxtb	r0, r0
 80021da:	2801      	cmp	r0, #1
 80021dc:	f040 808e 	bne.w	80022fc <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 80021e0:	2d00      	cmp	r5, #0
 80021e2:	d05e      	beq.n	80022a2 <HAL_SPI_Transmit+0xf0>
 80021e4:	f1b8 0f00 	cmp.w	r8, #0
 80021e8:	d05b      	beq.n	80022a2 <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021ea:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021ec:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021f2:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021f4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021f6:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80021f8:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80021fc:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021fe:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002200:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 8002204:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 800220a:	bf08      	it	eq
 800220c:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800220e:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8002210:	bf08      	it	eq
 8002212:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 8002216:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 800221a:	bf08      	it	eq
 800221c:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800221e:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002220:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002222:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002224:	bf5e      	ittt	pl
 8002226:	6803      	ldrpl	r3, [r0, #0]
 8002228:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800222c:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800222e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002232:	6863      	ldr	r3, [r4, #4]
 8002234:	d13e      	bne.n	80022b4 <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002236:	b113      	cbz	r3, 800223e <HAL_SPI_Transmit+0x8c>
 8002238:	f1b8 0f01 	cmp.w	r8, #1
 800223c:	d107      	bne.n	800224e <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800223e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002242:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002244:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002246:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002248:	3b01      	subs	r3, #1
 800224a:	b29b      	uxth	r3, r3
 800224c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800224e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002250:	b29b      	uxth	r3, r3
 8002252:	b9a3      	cbnz	r3, 800227e <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002254:	463a      	mov	r2, r7
 8002256:	4631      	mov	r1, r6
 8002258:	4620      	mov	r0, r4
 800225a:	f7ff ff60 	bl	800211e <SPI_EndRxTxTransaction>
 800225e:	2800      	cmp	r0, #0
 8002260:	d149      	bne.n	80022f6 <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002262:	68a3      	ldr	r3, [r4, #8]
 8002264:	b933      	cbnz	r3, 8002274 <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	6823      	ldr	r3, [r4, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	9201      	str	r2, [sp, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002274:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002276:	3000      	adds	r0, #0
 8002278:	bf18      	it	ne
 800227a:	2001      	movne	r0, #1
error:
 800227c:	e011      	b.n	80022a2 <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800227e:	6822      	ldr	r2, [r4, #0]
 8002280:	6893      	ldr	r3, [r2, #8]
 8002282:	0798      	lsls	r0, r3, #30
 8002284:	d505      	bpl.n	8002292 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002286:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002288:	f833 1b02 	ldrh.w	r1, [r3], #2
 800228c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800228e:	6323      	str	r3, [r4, #48]	; 0x30
 8002290:	e7d9      	b.n	8002246 <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002292:	f7fe fa29 	bl	80006e8 <HAL_GetTick>
 8002296:	1bc0      	subs	r0, r0, r7
 8002298:	42b0      	cmp	r0, r6
 800229a:	d3d8      	bcc.n	800224e <HAL_SPI_Transmit+0x9c>
 800229c:	1c71      	adds	r1, r6, #1
 800229e:	d0d6      	beq.n	800224e <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 80022a0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022a8:	2300      	movs	r3, #0
 80022aa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80022ae:	b002      	add	sp, #8
 80022b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022b4:	b113      	cbz	r3, 80022bc <HAL_SPI_Transmit+0x10a>
 80022b6:	f1b8 0f01 	cmp.w	r8, #1
 80022ba:	d108      	bne.n	80022ce <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022bc:	782b      	ldrb	r3, [r5, #0]
 80022be:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022c2:	3301      	adds	r3, #1
 80022c4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80022c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80022ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0be      	beq.n	8002254 <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	0792      	lsls	r2, r2, #30
 80022dc:	d503      	bpl.n	80022e6 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80022e0:	7812      	ldrb	r2, [r2, #0]
 80022e2:	731a      	strb	r2, [r3, #12]
 80022e4:	e7ec      	b.n	80022c0 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022e6:	f7fe f9ff 	bl	80006e8 <HAL_GetTick>
 80022ea:	1bc0      	subs	r0, r0, r7
 80022ec:	42b0      	cmp	r0, r6
 80022ee:	d3ee      	bcc.n	80022ce <HAL_SPI_Transmit+0x11c>
 80022f0:	1c73      	adds	r3, r6, #1
 80022f2:	d0ec      	beq.n	80022ce <HAL_SPI_Transmit+0x11c>
 80022f4:	e7d4      	b.n	80022a0 <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022f6:	2320      	movs	r3, #32
 80022f8:	6563      	str	r3, [r4, #84]	; 0x54
 80022fa:	e7b2      	b.n	8002262 <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 80022fc:	2002      	movs	r0, #2
 80022fe:	e7d0      	b.n	80022a2 <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8002300:	2002      	movs	r0, #2
 8002302:	e7d4      	b.n	80022ae <HAL_SPI_Transmit+0xfc>

08002304 <HAL_SPI_Transmit_DMA>:
  __HAL_LOCK(hspi);
 8002304:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002308:	b510      	push	{r4, lr}
  __HAL_LOCK(hspi);
 800230a:	2b01      	cmp	r3, #1
{
 800230c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800230e:	d04e      	beq.n	80023ae <HAL_SPI_Transmit_DMA+0xaa>
 8002310:	2301      	movs	r3, #1
 8002312:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 8002316:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
 800231a:	b2c0      	uxtb	r0, r0
 800231c:	4298      	cmp	r0, r3
 800231e:	d144      	bne.n	80023aa <HAL_SPI_Transmit_DMA+0xa6>
  if ((pData == NULL) || (Size == 0U))
 8002320:	2900      	cmp	r1, #0
 8002322:	d02d      	beq.n	8002380 <HAL_SPI_Transmit_DMA+0x7c>
 8002324:	2a00      	cmp	r2, #0
 8002326:	d02b      	beq.n	8002380 <HAL_SPI_Transmit_DMA+0x7c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002328:	2303      	movs	r3, #3
 800232a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800232e:	2300      	movs	r3, #0
 8002330:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002332:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002334:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002336:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = 0U;
 800233a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 800233c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800233e:	68a3      	ldr	r3, [r4, #8]
  hspi->TxXferSize  = Size;
 8002340:	86a2      	strh	r2, [r4, #52]	; 0x34
 8002342:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002348:	bf08      	it	eq
 800234a:	6813      	ldreq	r3, [r2, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800234c:	6321      	str	r1, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 800234e:	bf04      	itt	eq
 8002350:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002354:	6013      	streq	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002356:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002358:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <HAL_SPI_Transmit_DMA+0xb0>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800235a:	320c      	adds	r2, #12
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800235c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800235e:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <HAL_SPI_Transmit_DMA+0xb4>)
 8002360:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_SPI_Transmit_DMA+0xb8>)
 8002364:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback = NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	6343      	str	r3, [r0, #52]	; 0x34
                                 hspi->TxXferCount))
 800236a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800236c:	f7fe fc96 	bl	8000c9c <HAL_DMA_Start_IT>
 8002370:	b150      	cbz	r0, 8002388 <HAL_SPI_Transmit_DMA+0x84>
    hspi->State = HAL_SPI_STATE_READY;
 8002372:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002374:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002376:	f043 0310 	orr.w	r3, r3, #16
 800237a:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800237c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002380:	2300      	movs	r3, #0
 8002382:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002386:	bd10      	pop	{r4, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800238e:	bf5e      	ittt	pl
 8002390:	681a      	ldrpl	r2, [r3, #0]
 8002392:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002396:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	f042 0220 	orr.w	r2, r2, #32
 800239e:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	f042 0202 	orr.w	r2, r2, #2
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	e7ea      	b.n	8002380 <HAL_SPI_Transmit_DMA+0x7c>
    errorcode = HAL_BUSY;
 80023aa:	2002      	movs	r0, #2
 80023ac:	e7e8      	b.n	8002380 <HAL_SPI_Transmit_DMA+0x7c>
  __HAL_LOCK(hspi);
 80023ae:	2002      	movs	r0, #2
 80023b0:	e7e9      	b.n	8002386 <HAL_SPI_Transmit_DMA+0x82>
 80023b2:	bf00      	nop
 80023b4:	080023c5 	.word	0x080023c5
 80023b8:	080023f3 	.word	0x080023f3
 80023bc:	080023d1 	.word	0x080023d1

080023c0 <HAL_SPI_TxCpltCallback>:
 80023c0:	4770      	bx	lr

080023c2 <HAL_SPI_TxHalfCpltCallback>:
 80023c2:	4770      	bx	lr

080023c4 <SPI_DMAHalfTransmitCplt>:
{
 80023c4:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80023c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80023c8:	f7ff fffb 	bl	80023c2 <HAL_SPI_TxHalfCpltCallback>
}
 80023cc:	bd08      	pop	{r3, pc}

080023ce <HAL_SPI_ErrorCallback>:
 80023ce:	4770      	bx	lr

080023d0 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80023d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80023d2:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80023d4:	6802      	ldr	r2, [r0, #0]
 80023d6:	6853      	ldr	r3, [r2, #4]
 80023d8:	f023 0303 	bic.w	r3, r3, #3
 80023dc:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80023de:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80023e0:	f043 0310 	orr.w	r3, r3, #16
 80023e4:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80023e6:	2301      	movs	r3, #1
 80023e8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 80023ec:	f7ff ffef 	bl	80023ce <HAL_SPI_ErrorCallback>
}
 80023f0:	bd08      	pop	{r3, pc}

080023f2 <SPI_DMATransmitCplt>:
{
 80023f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80023f4:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80023f6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 80023f8:	f7fe f976 	bl	80006e8 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80023fc:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80023fe:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	069b      	lsls	r3, r3, #26
 8002404:	d426      	bmi.n	8002454 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002406:	6823      	ldr	r3, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002408:	4620      	mov	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	f021 0120 	bic.w	r1, r1, #32
 8002410:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	f021 0102 	bic.w	r1, r1, #2
 8002418:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800241a:	2164      	movs	r1, #100	; 0x64
 800241c:	f7ff fe7f 	bl	800211e <SPI_EndRxTxTransaction>
 8002420:	b118      	cbz	r0, 800242a <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002422:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002424:	f043 0320 	orr.w	r3, r3, #32
 8002428:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800242a:	68a3      	ldr	r3, [r4, #8]
 800242c:	b933      	cbnz	r3, 800243c <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	9201      	str	r2, [sp, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002440:	2301      	movs	r3, #1
 8002442:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002446:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002448:	b123      	cbz	r3, 8002454 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 800244a:	4620      	mov	r0, r4
 800244c:	f7ff ffbf 	bl	80023ce <HAL_SPI_ErrorCallback>
}
 8002450:	b003      	add	sp, #12
 8002452:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8002454:	4620      	mov	r0, r4
 8002456:	f7ff ffb3 	bl	80023c0 <HAL_SPI_TxCpltCallback>
 800245a:	e7f9      	b.n	8002450 <SPI_DMATransmitCplt+0x5e>

0800245c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800245c:	6a03      	ldr	r3, [r0, #32]
{
 800245e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002466:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002468:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800246a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800246c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800246e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002472:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002474:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002476:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800247a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800247c:	4d0a      	ldr	r5, [pc, #40]	; (80024a8 <TIM_OC1_SetConfig+0x4c>)
 800247e:	42a8      	cmp	r0, r5
 8002480:	d10b      	bne.n	800249a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002482:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002484:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002488:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800248a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800248e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002492:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002494:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002498:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800249a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800249c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800249e:	684a      	ldr	r2, [r1, #4]
 80024a0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a2:	6203      	str	r3, [r0, #32]
}
 80024a4:	bd70      	pop	{r4, r5, r6, pc}
 80024a6:	bf00      	nop
 80024a8:	40012c00 	.word	0x40012c00

080024ac <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024ac:	6a03      	ldr	r3, [r0, #32]
{
 80024ae:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024ba:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024be:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80024c2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024c4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80024c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024ce:	4d0b      	ldr	r5, [pc, #44]	; (80024fc <TIM_OC3_SetConfig+0x50>)
 80024d0:	42a8      	cmp	r0, r5
 80024d2:	d10d      	bne.n	80024f0 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024d4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80024d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024da:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024de:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024e2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80024e6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80024e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024ec:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024f0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024f2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024f4:	684a      	ldr	r2, [r1, #4]
 80024f6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024f8:	6203      	str	r3, [r0, #32]
}
 80024fa:	bd70      	pop	{r4, r5, r6, pc}
 80024fc:	40012c00 	.word	0x40012c00

08002500 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002500:	6a03      	ldr	r3, [r0, #32]
{
 8002502:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002504:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002508:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800250a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800250c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800250e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002510:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002512:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002516:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800251a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800251c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002520:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002524:	4d06      	ldr	r5, [pc, #24]	; (8002540 <TIM_OC4_SetConfig+0x40>)
 8002526:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002528:	bf02      	ittt	eq
 800252a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800252c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002530:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002534:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002536:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002538:	684a      	ldr	r2, [r1, #4]
 800253a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800253c:	6203      	str	r3, [r0, #32]
}
 800253e:	bd30      	pop	{r4, r5, pc}
 8002540:	40012c00 	.word	0x40012c00

08002544 <HAL_TIM_Base_MspInit>:
}
 8002544:	4770      	bx	lr

08002546 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002546:	2302      	movs	r3, #2
 8002548:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800254c:	6803      	ldr	r3, [r0, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002554:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002556:	bf1e      	ittt	ne
 8002558:	681a      	ldrne	r2, [r3, #0]
 800255a:	f042 0201 	orrne.w	r2, r2, #1
 800255e:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002560:	2301      	movs	r3, #1
 8002562:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002566:	2000      	movs	r0, #0
 8002568:	4770      	bx	lr

0800256a <HAL_TIM_PWM_MspInit>:
 800256a:	4770      	bx	lr

0800256c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800256c:	4a1a      	ldr	r2, [pc, #104]	; (80025d8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800256e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002570:	4290      	cmp	r0, r2
 8002572:	d00a      	beq.n	800258a <TIM_Base_SetConfig+0x1e>
 8002574:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002578:	d007      	beq.n	800258a <TIM_Base_SetConfig+0x1e>
 800257a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800257e:	4290      	cmp	r0, r2
 8002580:	d003      	beq.n	800258a <TIM_Base_SetConfig+0x1e>
 8002582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002586:	4290      	cmp	r0, r2
 8002588:	d115      	bne.n	80025b6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800258a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800258c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002590:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <TIM_Base_SetConfig+0x6c>)
 8002594:	4290      	cmp	r0, r2
 8002596:	d00a      	beq.n	80025ae <TIM_Base_SetConfig+0x42>
 8002598:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800259c:	d007      	beq.n	80025ae <TIM_Base_SetConfig+0x42>
 800259e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80025a2:	4290      	cmp	r0, r2
 80025a4:	d003      	beq.n	80025ae <TIM_Base_SetConfig+0x42>
 80025a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025aa:	4290      	cmp	r0, r2
 80025ac:	d103      	bne.n	80025b6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ae:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80025b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025b6:	694a      	ldr	r2, [r1, #20]
 80025b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025bc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80025be:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025c0:	688b      	ldr	r3, [r1, #8]
 80025c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80025c4:	680b      	ldr	r3, [r1, #0]
 80025c6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <TIM_Base_SetConfig+0x6c>)
 80025ca:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80025cc:	bf04      	itt	eq
 80025ce:	690b      	ldreq	r3, [r1, #16]
 80025d0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80025d2:	2301      	movs	r3, #1
 80025d4:	6143      	str	r3, [r0, #20]
}
 80025d6:	4770      	bx	lr
 80025d8:	40012c00 	.word	0x40012c00

080025dc <HAL_TIM_Base_Init>:
{
 80025dc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80025de:	4604      	mov	r4, r0
 80025e0:	b1a0      	cbz	r0, 800260c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80025e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80025e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025ea:	b91b      	cbnz	r3, 80025f4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80025ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80025f0:	f7ff ffa8 	bl	8002544 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80025f4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80025f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025fc:	1d21      	adds	r1, r4, #4
 80025fe:	f7ff ffb5 	bl	800256c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002602:	2301      	movs	r3, #1
  return HAL_OK;
 8002604:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002606:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800260a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800260c:	2001      	movs	r0, #1
 800260e:	e7fc      	b.n	800260a <HAL_TIM_Base_Init+0x2e>

08002610 <HAL_TIM_PWM_Init>:
{
 8002610:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002612:	4604      	mov	r4, r0
 8002614:	b1a0      	cbz	r0, 8002640 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002616:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800261a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800261e:	b91b      	cbnz	r3, 8002628 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002620:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002624:	f7ff ffa1 	bl	800256a <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800262a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800262c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002630:	1d21      	adds	r1, r4, #4
 8002632:	f7ff ff9b 	bl	800256c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002636:	2301      	movs	r3, #1
  return HAL_OK;
 8002638:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800263a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800263e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002640:	2001      	movs	r0, #1
 8002642:	e7fc      	b.n	800263e <HAL_TIM_PWM_Init+0x2e>

08002644 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002644:	6a03      	ldr	r3, [r0, #32]
{
 8002646:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002648:	f023 0310 	bic.w	r3, r3, #16
 800264c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800264e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002650:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002652:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002654:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002656:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800265a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800265e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002660:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002664:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002668:	4d0b      	ldr	r5, [pc, #44]	; (8002698 <TIM_OC2_SetConfig+0x54>)
 800266a:	42a8      	cmp	r0, r5
 800266c:	d10d      	bne.n	800268a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800266e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002674:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002678:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800267c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002680:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002686:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800268a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800268c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800268e:	684a      	ldr	r2, [r1, #4]
 8002690:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002692:	6203      	str	r3, [r0, #32]
}
 8002694:	bd70      	pop	{r4, r5, r6, pc}
 8002696:	bf00      	nop
 8002698:	40012c00 	.word	0x40012c00

0800269c <HAL_TIM_PWM_ConfigChannel>:
{
 800269c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800269e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80026a2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	f04f 0002 	mov.w	r0, #2
 80026aa:	d025      	beq.n	80026f8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80026ac:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80026ae:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80026b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80026b6:	2a0c      	cmp	r2, #12
 80026b8:	d818      	bhi.n	80026ec <HAL_TIM_PWM_ConfigChannel+0x50>
 80026ba:	e8df f002 	tbb	[pc, r2]
 80026be:	1707      	.short	0x1707
 80026c0:	171e1717 	.word	0x171e1717
 80026c4:	172f1717 	.word	0x172f1717
 80026c8:	1717      	.short	0x1717
 80026ca:	40          	.byte	0x40
 80026cb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026cc:	6820      	ldr	r0, [r4, #0]
 80026ce:	f7ff fec5 	bl	800245c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026d2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026d4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026d6:	699a      	ldr	r2, [r3, #24]
 80026d8:	f042 0208 	orr.w	r2, r2, #8
 80026dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	f022 0204 	bic.w	r2, r2, #4
 80026e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026ea:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80026ec:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80026ee:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80026f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80026f4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80026f8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026fa:	6820      	ldr	r0, [r4, #0]
 80026fc:	f7ff ffa2 	bl	8002644 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002700:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002702:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800271a:	e7e6      	b.n	80026ea <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800271c:	6820      	ldr	r0, [r4, #0]
 800271e:	f7ff fec5 	bl	80024ac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002722:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002724:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	f042 0208 	orr.w	r2, r2, #8
 800272c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	f022 0204 	bic.w	r2, r2, #4
 8002734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002736:	69da      	ldr	r2, [r3, #28]
 8002738:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800273a:	61da      	str	r2, [r3, #28]
      break;
 800273c:	e7d6      	b.n	80026ec <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800273e:	6820      	ldr	r0, [r4, #0]
 8002740:	f7ff fede 	bl	8002500 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002744:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002746:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002748:	69da      	ldr	r2, [r3, #28]
 800274a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800274e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002750:	69da      	ldr	r2, [r3, #28]
 8002752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002756:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800275e:	e7ec      	b.n	800273a <HAL_TIM_PWM_ConfigChannel+0x9e>

08002760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002760:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002762:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002764:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002766:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800276a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800276e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002770:	6083      	str	r3, [r0, #8]
}
 8002772:	bd10      	pop	{r4, pc}

08002774 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002774:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002778:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800277a:	2b01      	cmp	r3, #1
{
 800277c:	4604      	mov	r4, r0
 800277e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002782:	d019      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0x44>
 8002784:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002786:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800278a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800278c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002790:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002796:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800279a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800279c:	680b      	ldr	r3, [r1, #0]
 800279e:	2b40      	cmp	r3, #64	; 0x40
 80027a0:	d065      	beq.n	800286e <HAL_TIM_ConfigClockSource+0xfa>
 80027a2:	d815      	bhi.n	80027d0 <HAL_TIM_ConfigClockSource+0x5c>
 80027a4:	2b10      	cmp	r3, #16
 80027a6:	d00c      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0x4e>
 80027a8:	d807      	bhi.n	80027ba <HAL_TIM_ConfigClockSource+0x46>
 80027aa:	b153      	cbz	r3, 80027c2 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80027ae:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80027b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80027b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80027b8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d001      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0x4e>
 80027be:	2b30      	cmp	r3, #48	; 0x30
 80027c0:	d1f4      	bne.n	80027ac <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80027c2:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027c4:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80027c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027cc:	4313      	orrs	r3, r2
 80027ce:	e01a      	b.n	8002806 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80027d0:	2b60      	cmp	r3, #96	; 0x60
 80027d2:	d034      	beq.n	800283e <HAL_TIM_ConfigClockSource+0xca>
 80027d4:	d819      	bhi.n	800280a <HAL_TIM_ConfigClockSource+0x96>
 80027d6:	2b50      	cmp	r3, #80	; 0x50
 80027d8:	d1e8      	bne.n	80027ac <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027da:	684a      	ldr	r2, [r1, #4]
 80027dc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80027de:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027e0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027e2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027e6:	f025 0501 	bic.w	r5, r5, #1
 80027ea:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ec:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80027ee:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027f4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80027f8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80027fa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80027fc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80027fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002802:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002806:	6083      	str	r3, [r0, #8]
 8002808:	e7d0      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800280a:	2b70      	cmp	r3, #112	; 0x70
 800280c:	d00c      	beq.n	8002828 <HAL_TIM_ConfigClockSource+0xb4>
 800280e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002812:	d1cb      	bne.n	80027ac <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002814:	68cb      	ldr	r3, [r1, #12]
 8002816:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800281a:	f7ff ffa1 	bl	8002760 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800281e:	6822      	ldr	r2, [r4, #0]
 8002820:	6893      	ldr	r3, [r2, #8]
 8002822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002826:	e008      	b.n	800283a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002828:	68cb      	ldr	r3, [r1, #12]
 800282a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800282e:	f7ff ff97 	bl	8002760 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002832:	6822      	ldr	r2, [r4, #0]
 8002834:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002836:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800283a:	6093      	str	r3, [r2, #8]
      break;
 800283c:	e7b6      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800283e:	684d      	ldr	r5, [r1, #4]
 8002840:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002842:	6a01      	ldr	r1, [r0, #32]
 8002844:	f021 0110 	bic.w	r1, r1, #16
 8002848:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800284a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800284c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800284e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002852:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002856:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800285a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800285e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002860:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002862:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002868:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800286c:	e7cb      	b.n	8002806 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800286e:	684a      	ldr	r2, [r1, #4]
 8002870:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002872:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002874:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002876:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800287a:	f025 0501 	bic.w	r5, r5, #1
 800287e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002880:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002882:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002884:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002888:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800288c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800288e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002890:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002896:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800289a:	e7b4      	b.n	8002806 <HAL_TIM_ConfigClockSource+0x92>

0800289c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800289c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800289e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028a0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028a2:	f001 011f 	and.w	r1, r1, #31
 80028a6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80028a8:	ea23 0304 	bic.w	r3, r3, r4
 80028ac:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028ae:	6a03      	ldr	r3, [r0, #32]
 80028b0:	408a      	lsls	r2, r1
 80028b2:	431a      	orrs	r2, r3
 80028b4:	6202      	str	r2, [r0, #32]
}
 80028b6:	bd10      	pop	{r4, pc}

080028b8 <HAL_TIM_OC_Start>:
{
 80028b8:	b510      	push	{r4, lr}
 80028ba:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028bc:	2201      	movs	r2, #1
 80028be:	6800      	ldr	r0, [r0, #0]
 80028c0:	f7ff ffec 	bl	800289c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_TIM_OC_Start+0x34>)
}
 80028c8:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028ca:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80028cc:	bf02      	ittt	eq
 80028ce:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80028d0:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80028d4:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028dc:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80028de:	bf1e      	ittt	ne
 80028e0:	681a      	ldrne	r2, [r3, #0]
 80028e2:	f042 0201 	orrne.w	r2, r2, #1
 80028e6:	601a      	strne	r2, [r3, #0]
}
 80028e8:	bd10      	pop	{r4, pc}
 80028ea:	bf00      	nop
 80028ec:	40012c00 	.word	0x40012c00

080028f0 <HAL_TIM_PWM_Start>:
 80028f0:	f7ff bfe2 	b.w	80028b8 <HAL_TIM_OC_Start>

080028f4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028f4:	6803      	ldr	r3, [r0, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028fc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	f022 0201 	bic.w	r2, r2, #1
 8002904:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002906:	2320      	movs	r3, #32
 8002908:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800290c:	4770      	bx	lr
	...

08002910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002914:	6803      	ldr	r3, [r0, #0]
 8002916:	68c1      	ldr	r1, [r0, #12]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	2419      	movs	r4, #25
 800291c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002920:	430a      	orrs	r2, r1
 8002922:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002924:	6882      	ldr	r2, [r0, #8]
 8002926:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002928:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800292a:	4302      	orrs	r2, r0
 800292c:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 800292e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002932:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002936:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002938:	430a      	orrs	r2, r1
 800293a:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	69a9      	ldr	r1, [r5, #24]
 8002940:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002944:	430a      	orrs	r2, r1
 8002946:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002948:	4a0d      	ldr	r2, [pc, #52]	; (8002980 <UART_SetConfig+0x70>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d114      	bne.n	8002978 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800294e:	f7ff fb23 	bl	8001f98 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002952:	4360      	muls	r0, r4
 8002954:	686c      	ldr	r4, [r5, #4]
 8002956:	2264      	movs	r2, #100	; 0x64
 8002958:	00a4      	lsls	r4, r4, #2
 800295a:	fbb0 f0f4 	udiv	r0, r0, r4
 800295e:	fbb0 f1f2 	udiv	r1, r0, r2
 8002962:	fb02 0311 	mls	r3, r2, r1, r0
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	3332      	adds	r3, #50	; 0x32
 800296a:	fbb3 f3f2 	udiv	r3, r3, r2
 800296e:	682c      	ldr	r4, [r5, #0]
 8002970:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002974:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8002976:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002978:	f7ff fafe 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 800297c:	e7e9      	b.n	8002952 <UART_SetConfig+0x42>
 800297e:	bf00      	nop
 8002980:	40013800 	.word	0x40013800

08002984 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002986:	4604      	mov	r4, r0
 8002988:	460e      	mov	r6, r1
 800298a:	4617      	mov	r7, r2
 800298c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800298e:	6821      	ldr	r1, [r4, #0]
 8002990:	680b      	ldr	r3, [r1, #0]
 8002992:	ea36 0303 	bics.w	r3, r6, r3
 8002996:	d101      	bne.n	800299c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002998:	2000      	movs	r0, #0
 800299a:	e014      	b.n	80029c6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800299c:	1c6b      	adds	r3, r5, #1
 800299e:	d0f7      	beq.n	8002990 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029a0:	b995      	cbnz	r5, 80029c8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029a2:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80029a4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80029b6:	2320      	movs	r3, #32
 80029b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80029bc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80029c0:	2300      	movs	r3, #0
 80029c2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 80029c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029c8:	f7fd fe8e 	bl	80006e8 <HAL_GetTick>
 80029cc:	1bc0      	subs	r0, r0, r7
 80029ce:	4285      	cmp	r5, r0
 80029d0:	d2dd      	bcs.n	800298e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80029d2:	e7e6      	b.n	80029a2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080029d4 <HAL_UART_Init>:
{
 80029d4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80029d6:	4604      	mov	r4, r0
 80029d8:	b340      	cbz	r0, 8002a2c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80029da:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80029de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029e2:	b91b      	cbnz	r3, 80029ec <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80029e4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80029e8:	f003 faa2 	bl	8005f30 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80029ec:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80029ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80029f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80029f4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80029f6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80029f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029fc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80029fe:	f7ff ff87 	bl	8002910 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a02:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a04:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a14:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a1c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002a1e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a20:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a26:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002a2a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	e7fc      	b.n	8002a2a <HAL_UART_Init+0x56>

08002a30 <HAL_HalfDuplex_Init>:
{
 8002a30:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002a32:	4604      	mov	r4, r0
 8002a34:	b360      	cbz	r0, 8002a90 <HAL_HalfDuplex_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002a36:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002a3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a3e:	b91b      	cbnz	r3, 8002a48 <HAL_HalfDuplex_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002a40:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002a44:	f003 fa74 	bl	8005f30 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002a48:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002a4a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002a4c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002a50:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002a52:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002a54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a58:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002a5a:	f7ff ff59 	bl	8002910 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a5e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a60:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002a70:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	f042 0208 	orr.w	r2, r2, #8
 8002a78:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a80:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002a82:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a84:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a86:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a8a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002a8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a90:	2001      	movs	r0, #1
 8002a92:	e7fc      	b.n	8002a8e <HAL_HalfDuplex_Init+0x5e>

08002a94 <HAL_UART_Transmit>:
{
 8002a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a98:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002a9a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8002a9e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002aa0:	2b20      	cmp	r3, #32
{
 8002aa2:	460d      	mov	r5, r1
 8002aa4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002aa6:	d14c      	bne.n	8002b42 <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 8002aa8:	2900      	cmp	r1, #0
 8002aaa:	d048      	beq.n	8002b3e <HAL_UART_Transmit+0xaa>
 8002aac:	2a00      	cmp	r2, #0
 8002aae:	d046      	beq.n	8002b3e <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8002ab0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d044      	beq.n	8002b42 <HAL_UART_Transmit+0xae>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac2:	2321      	movs	r3, #33	; 0x21
 8002ac4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002ac8:	f7fd fe0e 	bl	80006e8 <HAL_GetTick>
 8002acc:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8002ace:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ad2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ad6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	b963      	cbnz	r3, 8002af6 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002adc:	463b      	mov	r3, r7
 8002ade:	4632      	mov	r2, r6
 8002ae0:	2140      	movs	r1, #64	; 0x40
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f7ff ff4e 	bl	8002984 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002ae8:	b9a0      	cbnz	r0, 8002b14 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8002aea:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002aec:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002af0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002af4:	e00f      	b.n	8002b16 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8002af6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002af8:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b00:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b02:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b08:	4620      	mov	r0, r4
 8002b0a:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b0c:	d10e      	bne.n	8002b2c <HAL_UART_Transmit+0x98>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b0e:	f7ff ff39 	bl	8002984 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002b12:	b110      	cbz	r0, 8002b1a <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 8002b14:	2003      	movs	r0, #3
}
 8002b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b1a:	882b      	ldrh	r3, [r5, #0]
 8002b1c:	6822      	ldr	r2, [r4, #0]
 8002b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b22:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b24:	6923      	ldr	r3, [r4, #16]
 8002b26:	b943      	cbnz	r3, 8002b3a <HAL_UART_Transmit+0xa6>
          pData += 2U;
 8002b28:	3502      	adds	r5, #2
 8002b2a:	e7d4      	b.n	8002ad6 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b2c:	f7ff ff2a 	bl	8002984 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d1ef      	bne.n	8002b14 <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	782a      	ldrb	r2, [r5, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	3501      	adds	r5, #1
 8002b3c:	e7cb      	b.n	8002ad6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002b3e:	2001      	movs	r0, #1
 8002b40:	e7e9      	b.n	8002b16 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002b42:	2002      	movs	r0, #2
 8002b44:	e7e7      	b.n	8002b16 <HAL_UART_Transmit+0x82>

08002b46 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b46:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	d120      	bne.n	8002b90 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8002b4e:	b1e9      	cbz	r1, 8002b8c <HAL_UART_Receive_IT+0x46>
 8002b50:	b1e2      	cbz	r2, 8002b8c <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8002b52:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d01a      	beq.n	8002b90 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8002b5a:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8002b5c:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5e:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b60:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b62:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b64:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b68:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8002b6a:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b6c:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8002b6e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b72:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002b76:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b78:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8002b7a:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b7c:	f041 0101 	orr.w	r1, r1, #1
 8002b80:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b82:	68d1      	ldr	r1, [r2, #12]
 8002b84:	f041 0120 	orr.w	r1, r1, #32
 8002b88:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8002b8a:	4770      	bx	lr
      return HAL_ERROR;
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	4770      	bx	lr
    return HAL_BUSY;
 8002b90:	2002      	movs	r0, #2
}
 8002b92:	4770      	bx	lr

08002b94 <HAL_UART_TxCpltCallback>:
 8002b94:	4770      	bx	lr

08002b96 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b96:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8002b9a:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b9c:	2b22      	cmp	r3, #34	; 0x22
 8002b9e:	d133      	bne.n	8002c08 <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ba0:	6881      	ldr	r1, [r0, #8]
 8002ba2:	6904      	ldr	r4, [r0, #16]
 8002ba4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002ba8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002baa:	6802      	ldr	r2, [r0, #0]
 8002bac:	d123      	bne.n	8002bf6 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bae:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002bb0:	b9ec      	cbnz	r4, 8002bee <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bb6:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002bba:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002bbc:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002bbe:	3c01      	subs	r4, #1
 8002bc0:	b2a4      	uxth	r4, r4
 8002bc2:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002bc4:	b98c      	cbnz	r4, 8002bea <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bc6:	6803      	ldr	r3, [r0, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	f022 0220 	bic.w	r2, r2, #32
 8002bce:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bd6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002be0:	2320      	movs	r3, #32
 8002be2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002be6:	f001 fa29 	bl	800403c <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8002bea:	2000      	movs	r0, #0
 8002bec:	e00d      	b.n	8002c0a <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	f823 2b01 	strh.w	r2, [r3], #1
 8002bf4:	e7e1      	b.n	8002bba <UART_Receive_IT+0x24>
 8002bf6:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bf8:	6852      	ldr	r2, [r2, #4]
 8002bfa:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002bfc:	b90c      	cbnz	r4, 8002c02 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	e7dc      	b.n	8002bbc <UART_Receive_IT+0x26>
 8002c02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c06:	e7fa      	b.n	8002bfe <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002c08:	2002      	movs	r0, #2
}
 8002c0a:	bd10      	pop	{r4, pc}

08002c0c <HAL_UART_ErrorCallback>:
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c10:	6803      	ldr	r3, [r0, #0]
{
 8002c12:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c14:	681a      	ldr	r2, [r3, #0]
{
 8002c16:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002c18:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c1a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c1c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002c1e:	d107      	bne.n	8002c30 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c20:	0696      	lsls	r6, r2, #26
 8002c22:	d558      	bpl.n	8002cd6 <HAL_UART_IRQHandler+0xc6>
 8002c24:	068d      	lsls	r5, r1, #26
 8002c26:	d556      	bpl.n	8002cd6 <HAL_UART_IRQHandler+0xc6>
}
 8002c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002c2c:	f7ff bfb3 	b.w	8002b96 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c30:	f015 0501 	ands.w	r5, r5, #1
 8002c34:	d102      	bne.n	8002c3c <HAL_UART_IRQHandler+0x2c>
 8002c36:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002c3a:	d04c      	beq.n	8002cd6 <HAL_UART_IRQHandler+0xc6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c3c:	07d3      	lsls	r3, r2, #31
 8002c3e:	d505      	bpl.n	8002c4c <HAL_UART_IRQHandler+0x3c>
 8002c40:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c42:	bf42      	ittt	mi
 8002c44:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002c46:	f043 0301 	orrmi.w	r3, r3, #1
 8002c4a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c4c:	0750      	lsls	r0, r2, #29
 8002c4e:	d504      	bpl.n	8002c5a <HAL_UART_IRQHandler+0x4a>
 8002c50:	b11d      	cbz	r5, 8002c5a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c5a:	0793      	lsls	r3, r2, #30
 8002c5c:	d504      	bpl.n	8002c68 <HAL_UART_IRQHandler+0x58>
 8002c5e:	b11d      	cbz	r5, 8002c68 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c62:	f043 0304 	orr.w	r3, r3, #4
 8002c66:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c68:	0716      	lsls	r6, r2, #28
 8002c6a:	d504      	bpl.n	8002c76 <HAL_UART_IRQHandler+0x66>
 8002c6c:	b11d      	cbz	r5, 8002c76 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c70:	f043 0308 	orr.w	r3, r3, #8
 8002c74:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c78:	b343      	cbz	r3, 8002ccc <HAL_UART_IRQHandler+0xbc>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c7a:	0695      	lsls	r5, r2, #26
 8002c7c:	d504      	bpl.n	8002c88 <HAL_UART_IRQHandler+0x78>
 8002c7e:	0688      	lsls	r0, r1, #26
 8002c80:	d502      	bpl.n	8002c88 <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 8002c82:	4620      	mov	r0, r4
 8002c84:	f7ff ff87 	bl	8002b96 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c88:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002c8a:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c8c:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c8e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002c90:	0711      	lsls	r1, r2, #28
 8002c92:	d402      	bmi.n	8002c9a <HAL_UART_IRQHandler+0x8a>
 8002c94:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002c98:	d019      	beq.n	8002cce <HAL_UART_IRQHandler+0xbe>
        UART_EndRxTransfer(huart);
 8002c9a:	f7ff fe2b 	bl	80028f4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	0652      	lsls	r2, r2, #25
 8002ca4:	d50f      	bpl.n	8002cc6 <HAL_UART_IRQHandler+0xb6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca6:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002ca8:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cae:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002cb0:	b148      	cbz	r0, 8002cc6 <HAL_UART_IRQHandler+0xb6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <HAL_UART_IRQHandler+0x13c>)
 8002cb4:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cb6:	f7fe f82f 	bl	8000d18 <HAL_DMA_Abort_IT>
 8002cba:	b138      	cbz	r0, 8002ccc <HAL_UART_IRQHandler+0xbc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cbc:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002cbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cc2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cc4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f7ff ffa0 	bl	8002c0c <HAL_UART_ErrorCallback>
}
 8002ccc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002cce:	f7ff ff9d 	bl	8002c0c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd2:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002cd4:	e7fa      	b.n	8002ccc <HAL_UART_IRQHandler+0xbc>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cd6:	0616      	lsls	r6, r2, #24
 8002cd8:	d528      	bpl.n	8002d2c <HAL_UART_IRQHandler+0x11c>
 8002cda:	060d      	lsls	r5, r1, #24
 8002cdc:	d526      	bpl.n	8002d2c <HAL_UART_IRQHandler+0x11c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cde:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002ce2:	2a21      	cmp	r2, #33	; 0x21
 8002ce4:	d1f2      	bne.n	8002ccc <HAL_UART_IRQHandler+0xbc>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ce6:	68a1      	ldr	r1, [r4, #8]
 8002ce8:	6a22      	ldr	r2, [r4, #32]
 8002cea:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002cee:	d118      	bne.n	8002d22 <HAL_UART_IRQHandler+0x112>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cf0:	8811      	ldrh	r1, [r2, #0]
 8002cf2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002cf6:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002cf8:	6921      	ldr	r1, [r4, #16]
 8002cfa:	b981      	cbnz	r1, 8002d1e <HAL_UART_IRQHandler+0x10e>
        huart->pTxBuffPtr += 2U;
 8002cfc:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002cfe:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002d00:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002d02:	3a01      	subs	r2, #1
 8002d04:	b292      	uxth	r2, r2
 8002d06:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002d08:	2a00      	cmp	r2, #0
 8002d0a:	d1df      	bne.n	8002ccc <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d12:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d1a:	60da      	str	r2, [r3, #12]
 8002d1c:	e7d6      	b.n	8002ccc <HAL_UART_IRQHandler+0xbc>
        huart->pTxBuffPtr += 1U;
 8002d1e:	3201      	adds	r2, #1
 8002d20:	e7ed      	b.n	8002cfe <HAL_UART_IRQHandler+0xee>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d22:	1c51      	adds	r1, r2, #1
 8002d24:	6221      	str	r1, [r4, #32]
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	e7e9      	b.n	8002d00 <HAL_UART_IRQHandler+0xf0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d2c:	0650      	lsls	r0, r2, #25
 8002d2e:	d5cd      	bpl.n	8002ccc <HAL_UART_IRQHandler+0xbc>
 8002d30:	064a      	lsls	r2, r1, #25
 8002d32:	d5cb      	bpl.n	8002ccc <HAL_UART_IRQHandler+0xbc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d34:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002d36:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002d3e:	2320      	movs	r3, #32
 8002d40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002d44:	f7ff ff26 	bl	8002b94 <HAL_UART_TxCpltCallback>
 8002d48:	e7c0      	b.n	8002ccc <HAL_UART_IRQHandler+0xbc>
 8002d4a:	bf00      	nop
 8002d4c:	08002d51 	.word	0x08002d51

08002d50 <UART_DMAAbortOnError>:
{
 8002d50:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002d52:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d54:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002d56:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d58:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002d5a:	f7ff ff57 	bl	8002c0c <HAL_UART_ErrorCallback>
}
 8002d5e:	bd08      	pop	{r3, pc}

08002d60 <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 8002d60:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d011      	beq.n	8002d8c <HAL_HalfDuplex_EnableReceiver+0x2c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002d68:	2324      	movs	r3, #36	; 0x24
  tmpreg = huart->Instance->CR1;
 8002d6a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d6c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpreg = huart->Instance->CR1;
 8002d70:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002d72:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_RE;
 8002d76:	f043 0304 	orr.w	r3, r3, #4
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002d7a:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8002d82:	2300      	movs	r3, #0
 8002d84:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8002d88:	4618      	mov	r0, r3
 8002d8a:	4770      	bx	lr
  __HAL_LOCK(huart);
 8002d8c:	2002      	movs	r0, #2
}
 8002d8e:	4770      	bx	lr

08002d90 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d90:	b084      	sub	sp, #16
 8002d92:	a801      	add	r0, sp, #4
 8002d94:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002d98:	b004      	add	sp, #16
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	4770      	bx	lr

08002d9e <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002d9e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002da2:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002da6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002daa:	2000      	movs	r0, #0
 8002dac:	4770      	bx	lr

08002dae <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002dae:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002db2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002db6:	045b      	lsls	r3, r3, #17
 8002db8:	0c5b      	lsrs	r3, r3, #17
 8002dba:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	4770      	bx	lr

08002dc2 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	4770      	bx	lr

08002dc6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	ac03      	add	r4, sp, #12
 8002dcc:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8002dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = USB_CNTR_FRES;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8002de0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8002de4:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8002de8:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
}
 8002dec:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8002dee:	f442 423f 	orr.w	r2, r2, #48896	; 0xbf00
 8002df2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	4770      	bx	lr
	...

08002dfc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002dfe:	780c      	ldrb	r4, [r1, #0]
{
 8002e00:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002e02:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8002e06:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002e08:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002e0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 8002e10:	2803      	cmp	r0, #3
 8002e12:	d803      	bhi.n	8002e1c <USB_ActivateEndpoint+0x20>
 8002e14:	e8df f000 	tbb	[pc, r0]
 8002e18:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8002e1c:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002e1e:	f248 0580 	movw	r5, #32896	; 0x8080
 8002e22:	432a      	orrs	r2, r5
 8002e24:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002e28:	780e      	ldrb	r6, [r1, #0]
 8002e2a:	4a9e      	ldr	r2, [pc, #632]	; (80030a4 <USB_ActivateEndpoint+0x2a8>)
 8002e2c:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8002e30:	4335      	orrs	r5, r6
 8002e32:	4014      	ands	r4, r2
 8002e34:	432c      	orrs	r4, r5
 8002e36:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8002e3a:	7b0d      	ldrb	r5, [r1, #12]
 8002e3c:	780c      	ldrb	r4, [r1, #0]
 8002e3e:	2d00      	cmp	r5, #0
 8002e40:	f040 8082 	bne.w	8002f48 <USB_ActivateEndpoint+0x14c>
 8002e44:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 8002e46:	784e      	ldrb	r6, [r1, #1]
 8002e48:	086d      	lsrs	r5, r5, #1
 8002e4a:	006d      	lsls	r5, r5, #1
 8002e4c:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8002e50:	b376      	cbz	r6, 8002eb0 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e52:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002e56:	4434      	add	r4, r6
 8002e58:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e5c:	780d      	ldrb	r5, [r1, #0]
 8002e5e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002e62:	0667      	lsls	r7, r4, #25
 8002e64:	d508      	bpl.n	8002e78 <USB_ActivateEndpoint+0x7c>
 8002e66:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002e6a:	4022      	ands	r2, r4
 8002e6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e70:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002e74:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002e78:	78ca      	ldrb	r2, [r1, #3]
 8002e7a:	780c      	ldrb	r4, [r1, #0]
 8002e7c:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e7e:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8002e82:	4a89      	ldr	r2, [pc, #548]	; (80030a8 <USB_ActivateEndpoint+0x2ac>)
 8002e84:	ea02 0201 	and.w	r2, r2, r1
 8002e88:	bf18      	it	ne
 8002e8a:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e96:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8002e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8002e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	e7bc      	b.n	8002e1e <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 8002ea4:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8002ea8:	e7fa      	b.n	8002ea0 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002eaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eae:	e7f7      	b.n	8002ea0 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002eb0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002eb4:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002eb6:	4414      	add	r4, r2
 8002eb8:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002ebc:	780a      	ldrb	r2, [r1, #0]
 8002ebe:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8002ec2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002ec6:	b2a4      	uxth	r4, r4
 8002ec8:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8002ecc:	bb56      	cbnz	r6, 8002f24 <USB_ActivateEndpoint+0x128>
 8002ece:	5b15      	ldrh	r5, [r2, r4]
 8002ed0:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8002ed4:	042d      	lsls	r5, r5, #16
 8002ed6:	0c2d      	lsrs	r5, r5, #16
 8002ed8:	5315      	strh	r5, [r2, r4]
 8002eda:	5b15      	ldrh	r5, [r2, r4]
 8002edc:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8002ee0:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ee2:	780c      	ldrb	r4, [r1, #0]
 8002ee4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002ee8:	0457      	lsls	r7, r2, #17
 8002eea:	d50b      	bpl.n	8002f04 <USB_ActivateEndpoint+0x108>
 8002eec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002ef0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002ef4:	0512      	lsls	r2, r2, #20
 8002ef6:	0d12      	lsrs	r2, r2, #20
 8002ef8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002efc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f00:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f04:	7809      	ldrb	r1, [r1, #0]
 8002f06:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002f0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f12:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f1e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002f22:	e7ba      	b.n	8002e9a <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002f24:	2e3e      	cmp	r6, #62	; 0x3e
 8002f26:	d806      	bhi.n	8002f36 <USB_ActivateEndpoint+0x13a>
 8002f28:	0875      	lsrs	r5, r6, #1
 8002f2a:	07f6      	lsls	r6, r6, #31
 8002f2c:	bf48      	it	mi
 8002f2e:	3501      	addmi	r5, #1
 8002f30:	02ad      	lsls	r5, r5, #10
 8002f32:	b2ad      	uxth	r5, r5
 8002f34:	e7d4      	b.n	8002ee0 <USB_ActivateEndpoint+0xe4>
 8002f36:	0977      	lsrs	r7, r6, #5
 8002f38:	06f5      	lsls	r5, r6, #27
 8002f3a:	4d5c      	ldr	r5, [pc, #368]	; (80030ac <USB_ActivateEndpoint+0x2b0>)
 8002f3c:	bf08      	it	eq
 8002f3e:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002f42:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8002f46:	e7f4      	b.n	8002f32 <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002f48:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8002f4c:	4015      	ands	r5, r2
 8002f4e:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8002f52:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002f56:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002f5a:	780c      	ldrb	r4, [r1, #0]
 8002f5c:	890d      	ldrh	r5, [r1, #8]
 8002f5e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002f62:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8002f66:	086d      	lsrs	r5, r5, #1
 8002f68:	b2b6      	uxth	r6, r6
 8002f6a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f6e:	006d      	lsls	r5, r5, #1
 8002f70:	53a5      	strh	r5, [r4, r6]
 8002f72:	780c      	ldrb	r4, [r1, #0]
 8002f74:	894d      	ldrh	r5, [r1, #10]
 8002f76:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002f7a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8002f7e:	086d      	lsrs	r5, r5, #1
 8002f80:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 8002f84:	006d      	lsls	r5, r5, #1
 8002f86:	b2b6      	uxth	r6, r6
 8002f88:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 8002f8a:	784c      	ldrb	r4, [r1, #1]
 8002f8c:	780d      	ldrb	r5, [r1, #0]
 8002f8e:	2c00      	cmp	r4, #0
 8002f90:	d143      	bne.n	800301a <USB_ActivateEndpoint+0x21e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f92:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002f96:	0466      	lsls	r6, r4, #17
 8002f98:	d508      	bpl.n	8002fac <USB_ActivateEndpoint+0x1b0>
 8002f9a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002f9e:	4022      	ands	r2, r4
 8002fa0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002fa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fa8:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fac:	780c      	ldrb	r4, [r1, #0]
 8002fae:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002fb2:	0655      	lsls	r5, r2, #25
 8002fb4:	d50b      	bpl.n	8002fce <USB_ActivateEndpoint+0x1d2>
 8002fb6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002fba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002fbe:	0512      	lsls	r2, r2, #20
 8002fc0:	0d12      	lsrs	r2, r2, #20
 8002fc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fc6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002fca:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002fce:	780c      	ldrb	r4, [r1, #0]
 8002fd0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002fd4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002fd8:	0512      	lsls	r2, r2, #20
 8002fda:	0d12      	lsrs	r2, r2, #20
 8002fdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fe0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002fe4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002fe8:	f248 0480 	movw	r4, #32896	; 0x8080
 8002fec:	780d      	ldrb	r5, [r1, #0]
 8002fee:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002ff2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ff6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ffa:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002ffe:	4322      	orrs	r2, r4
 8003000:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003004:	7809      	ldrb	r1, [r1, #0]
 8003006:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800300a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800300e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003012:	4314      	orrs	r4, r2
 8003014:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 8003018:	e73f      	b.n	8002e9a <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800301a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800301e:	0464      	lsls	r4, r4, #17
 8003020:	d508      	bpl.n	8003034 <USB_ActivateEndpoint+0x238>
 8003022:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003026:	4022      	ands	r2, r4
 8003028:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800302c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003030:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003034:	780c      	ldrb	r4, [r1, #0]
 8003036:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800303a:	0652      	lsls	r2, r2, #25
 800303c:	d50b      	bpl.n	8003056 <USB_ActivateEndpoint+0x25a>
 800303e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003042:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003046:	0512      	lsls	r2, r2, #20
 8003048:	0d12      	lsrs	r2, r2, #20
 800304a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800304e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003052:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003056:	780c      	ldrb	r4, [r1, #0]
 8003058:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800305c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003060:	0512      	lsls	r2, r2, #20
 8003062:	0d12      	lsrs	r2, r2, #20
 8003064:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003068:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800306c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8003070:	78ca      	ldrb	r2, [r1, #3]
 8003072:	780c      	ldrb	r4, [r1, #0]
 8003074:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003076:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 800307a:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <USB_ActivateEndpoint+0x2ac>)
 800307c:	ea02 0205 	and.w	r2, r2, r5
 8003080:	bf18      	it	ne
 8003082:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800308a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800308e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003092:	7809      	ldrb	r1, [r1, #0]
 8003094:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003098:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800309c:	0492      	lsls	r2, r2, #18
 800309e:	0c92      	lsrs	r2, r2, #18
 80030a0:	e739      	b.n	8002f16 <USB_ActivateEndpoint+0x11a>
 80030a2:	bf00      	nop
 80030a4:	ffff8f8f 	.word	0xffff8f8f
 80030a8:	ffff8fbf 	.word	0xffff8fbf
 80030ac:	ffff8000 	.word	0xffff8000

080030b0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80030b0:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 80030b2:	7b0c      	ldrb	r4, [r1, #12]
 80030b4:	784a      	ldrb	r2, [r1, #1]
 80030b6:	780b      	ldrb	r3, [r1, #0]
 80030b8:	bbbc      	cbnz	r4, 800312a <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 80030ba:	b1f2      	cbz	r2, 80030fa <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030bc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80030c0:	0652      	lsls	r2, r2, #25
 80030c2:	d50b      	bpl.n	80030dc <USB_DeactivateEndpoint+0x2c>
 80030c4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80030c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030cc:	0512      	lsls	r2, r2, #20
 80030ce:	0d12      	lsrs	r2, r2, #20
 80030d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80030d8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030dc:	780a      	ldrb	r2, [r1, #0]
 80030de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030e6:	051b      	lsls	r3, r3, #20
 80030e8:	0d1b      	lsrs	r3, r3, #20
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80030f6:	2000      	movs	r0, #0
 80030f8:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030fa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80030fe:	0454      	lsls	r4, r2, #17
 8003100:	d50b      	bpl.n	800311a <USB_DeactivateEndpoint+0x6a>
 8003102:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003106:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800310a:	0512      	lsls	r2, r2, #20
 800310c:	0d12      	lsrs	r2, r2, #20
 800310e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003112:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003116:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800311a:	780a      	ldrb	r2, [r1, #0]
 800311c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003120:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003124:	049b      	lsls	r3, r3, #18
 8003126:	0c9b      	lsrs	r3, r3, #18
 8003128:	e7df      	b.n	80030ea <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 800312a:	2a00      	cmp	r2, #0
 800312c:	d144      	bne.n	80031b8 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800312e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003132:	0452      	lsls	r2, r2, #17
 8003134:	d50b      	bpl.n	800314e <USB_DeactivateEndpoint+0x9e>
 8003136:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800313a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800313e:	0512      	lsls	r2, r2, #20
 8003140:	0d12      	lsrs	r2, r2, #20
 8003142:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800314a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800314e:	780a      	ldrb	r2, [r1, #0]
 8003150:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003154:	065c      	lsls	r4, r3, #25
 8003156:	d50b      	bpl.n	8003170 <USB_DeactivateEndpoint+0xc0>
 8003158:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800315c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003160:	051b      	lsls	r3, r3, #20
 8003162:	0d1b      	lsrs	r3, r3, #20
 8003164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003168:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800316c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003170:	780a      	ldrb	r2, [r1, #0]
 8003172:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800317a:	051b      	lsls	r3, r3, #20
 800317c:	0d1b      	lsrs	r3, r3, #20
 800317e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003182:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003186:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800318a:	f248 0280 	movw	r2, #32896	; 0x8080
 800318e:	780c      	ldrb	r4, [r1, #0]
 8003190:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319c:	4313      	orrs	r3, r2
 800319e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031a2:	7809      	ldrb	r1, [r1, #0]
 80031a4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80031a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031b0:	431a      	orrs	r2, r3
 80031b2:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 80031b6:	e79e      	b.n	80030f6 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031b8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80031bc:	0452      	lsls	r2, r2, #17
 80031be:	d50b      	bpl.n	80031d8 <USB_DeactivateEndpoint+0x128>
 80031c0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80031c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80031c8:	0512      	lsls	r2, r2, #20
 80031ca:	0d12      	lsrs	r2, r2, #20
 80031cc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80031d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031d4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031d8:	780a      	ldrb	r2, [r1, #0]
 80031da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031de:	065b      	lsls	r3, r3, #25
 80031e0:	d50b      	bpl.n	80031fa <USB_DeactivateEndpoint+0x14a>
 80031e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ea:	051b      	lsls	r3, r3, #20
 80031ec:	0d1b      	lsrs	r3, r3, #20
 80031ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80031fa:	780a      	ldrb	r2, [r1, #0]
 80031fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003200:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003204:	051b      	lsls	r3, r3, #20
 8003206:	0d1b      	lsrs	r3, r3, #20
 8003208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800320c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003210:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003214:	f248 0280 	movw	r2, #32896	; 0x8080
 8003218:	780c      	ldrb	r4, [r1, #0]
 800321a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800321e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003226:	4313      	orrs	r3, r2
 8003228:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800322c:	7809      	ldrb	r1, [r1, #0]
 800322e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323a:	e7b9      	b.n	80031b0 <USB_DeactivateEndpoint+0x100>

0800323c <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800323c:	784b      	ldrb	r3, [r1, #1]
 800323e:	780a      	ldrb	r2, [r1, #0]
 8003240:	b17b      	cbz	r3, 8003262 <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003242:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800324a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800324e:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800325e:	2000      	movs	r0, #0
 8003260:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003262:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003272:	e7ee      	b.n	8003252 <USB_EPSetStall+0x16>

08003274 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003274:	7b0b      	ldrb	r3, [r1, #12]
 8003276:	bb23      	cbnz	r3, 80032c2 <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 8003278:	784b      	ldrb	r3, [r1, #1]
 800327a:	780a      	ldrb	r2, [r1, #0]
 800327c:	b31b      	cbz	r3, 80032c6 <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800327e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003282:	065b      	lsls	r3, r3, #25
 8003284:	d50b      	bpl.n	800329e <USB_EPClearStall+0x2a>
 8003286:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800328a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800328e:	051b      	lsls	r3, r3, #20
 8003290:	0d1b      	lsrs	r3, r3, #20
 8003292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003296:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800329a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800329e:	78cb      	ldrb	r3, [r1, #3]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d00e      	beq.n	80032c2 <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80032a4:	780a      	ldrb	r2, [r1, #0]
 80032a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80032aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032b2:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032be:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80032c2:	2000      	movs	r0, #0
 80032c4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80032ca:	045b      	lsls	r3, r3, #17
 80032cc:	d50b      	bpl.n	80032e6 <USB_EPClearStall+0x72>
 80032ce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80032d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032d6:	051b      	lsls	r3, r3, #20
 80032d8:	0d1b      	lsrs	r3, r3, #20
 80032da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032e6:	780a      	ldrb	r2, [r1, #0]
 80032e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80032ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80032f8:	e7dd      	b.n	80032b6 <USB_EPClearStall+0x42>

080032fa <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80032fa:	b911      	cbnz	r1, 8003302 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003302:	2000      	movs	r0, #0
 8003304:	4770      	bx	lr

08003306 <USB_DevConnect>:
 8003306:	2000      	movs	r0, #0
 8003308:	4770      	bx	lr

0800330a <USB_DevDisconnect>:
 800330a:	2000      	movs	r0, #0
 800330c:	4770      	bx	lr

0800330e <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800330e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003312:	4770      	bx	lr

08003314 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003314:	2000      	movs	r0, #0
 8003316:	4770      	bx	lr

08003318 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003318:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800331c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800331e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003322:	085b      	lsrs	r3, r3, #1
 8003324:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8003328:	429a      	cmp	r2, r3
 800332a:	d100      	bne.n	800332e <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800332c:	4770      	bx	lr
 800332e:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8003332:	f822 0b04 	strh.w	r0, [r2], #4
 8003336:	e7f7      	b.n	8003328 <USB_WritePMA+0x10>

08003338 <USB_EPStartXfer>:
{
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 800333c:	7849      	ldrb	r1, [r1, #1]
{
 800333e:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8003340:	2901      	cmp	r1, #1
 8003342:	69aa      	ldr	r2, [r5, #24]
 8003344:	692b      	ldr	r3, [r5, #16]
 8003346:	7b28      	ldrb	r0, [r5, #12]
 8003348:	d15d      	bne.n	8003406 <USB_EPStartXfer+0xce>
    if (ep->xfer_len > ep->maxpacket)
 800334a:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 800334c:	bf9d      	ittte	ls
 800334e:	2300      	movls	r3, #0
 8003350:	61ab      	strls	r3, [r5, #24]
 8003352:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8003354:	1ad2      	subhi	r2, r2, r3
 8003356:	bf88      	it	hi
 8003358:	61aa      	strhi	r2, [r5, #24]
 800335a:	6969      	ldr	r1, [r5, #20]
 800335c:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 800335e:	b9e8      	cbnz	r0, 800339c <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003360:	4633      	mov	r3, r6
 8003362:	88ea      	ldrh	r2, [r5, #6]
 8003364:	4620      	mov	r0, r4
 8003366:	f7ff ffd7 	bl	8003318 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800336a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800336e:	782a      	ldrb	r2, [r5, #0]
 8003370:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8003374:	0112      	lsls	r2, r2, #4
 8003376:	440b      	add	r3, r1
 8003378:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800337a:	782a      	ldrb	r2, [r5, #0]
 800337c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003388:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800338c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003394:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8003398:	2000      	movs	r0, #0
 800339a:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800339c:	782b      	ldrb	r3, [r5, #0]
 800339e:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80033a2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80033a6:	0652      	lsls	r2, r2, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80033a8:	bf4b      	itete	mi
 80033aa:	f204 420c 	addwmi	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80033ae:	f204 4204 	addwpl	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80033b2:	1812      	addmi	r2, r2, r0
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80033b4:	1812      	addpl	r2, r2, r0
 80033b6:	ea4f 1303 	mov.w	r3, r3, lsl #4
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80033ba:	bf4b      	itete	mi
 80033bc:	52d6      	strhmi	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80033be:	52d6      	strhpl	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 80033c0:	896a      	ldrhmi	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 80033c2:	892a      	ldrhpl	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80033c4:	4633      	mov	r3, r6
 80033c6:	4620      	mov	r0, r4
 80033c8:	f7ff ffa6 	bl	8003318 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80033cc:	786b      	ldrb	r3, [r5, #1]
 80033ce:	782a      	ldrb	r2, [r5, #0]
 80033d0:	b963      	cbnz	r3, 80033ec <USB_EPStartXfer+0xb4>
 80033d2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80033d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033da:	051b      	lsls	r3, r3, #20
 80033dc:	0d1b      	lsrs	r3, r3, #20
 80033de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033e6:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 80033ea:	e7c6      	b.n	800337a <USB_EPStartXfer+0x42>
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d1c4      	bne.n	800337a <USB_EPStartXfer+0x42>
 80033f0:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80033f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033f8:	051b      	lsls	r3, r3, #20
 80033fa:	0d1b      	lsrs	r3, r3, #20
 80033fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003404:	e7ef      	b.n	80033e6 <USB_EPStartXfer+0xae>
    if (ep->xfer_len > ep->maxpacket)
 8003406:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003408:	bf93      	iteet	ls
 800340a:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 800340c:	1ad2      	subhi	r2, r2, r3
 800340e:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8003410:	61ab      	strls	r3, [r5, #24]
 8003412:	bf98      	it	ls
 8003414:	4613      	movls	r3, r2
 8003416:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8003418:	b990      	cbnz	r0, 8003440 <USB_EPStartXfer+0x108>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800341a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800341e:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8003422:	4401      	add	r1, r0
 8003424:	0112      	lsls	r2, r2, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d13b      	bne.n	80034a2 <USB_EPStartXfer+0x16a>
 800342a:	5a8b      	ldrh	r3, [r1, r2]
 800342c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003430:	041b      	lsls	r3, r3, #16
 8003432:	0c1b      	lsrs	r3, r3, #16
 8003434:	528b      	strh	r3, [r1, r2]
 8003436:	5a8b      	ldrh	r3, [r1, r2]
 8003438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800343c:	528b      	strh	r3, [r1, r2]
 800343e:	e039      	b.n	80034b4 <USB_EPStartXfer+0x17c>
 8003440:	b981      	cbnz	r1, 8003464 <USB_EPStartXfer+0x12c>
 8003442:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8003446:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800344a:	4401      	add	r1, r0
 800344c:	0112      	lsls	r2, r2, #4
 800344e:	b9b3      	cbnz	r3, 800347e <USB_EPStartXfer+0x146>
 8003450:	5a88      	ldrh	r0, [r1, r2]
 8003452:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8003456:	0400      	lsls	r0, r0, #16
 8003458:	0c00      	lsrs	r0, r0, #16
 800345a:	5288      	strh	r0, [r1, r2]
 800345c:	5a88      	ldrh	r0, [r1, r2]
 800345e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003462:	5288      	strh	r0, [r1, r2]
 8003464:	7869      	ldrb	r1, [r5, #1]
 8003466:	782a      	ldrb	r2, [r5, #0]
 8003468:	2900      	cmp	r1, #0
 800346a:	d0d6      	beq.n	800341a <USB_EPStartXfer+0xe2>
 800346c:	2901      	cmp	r1, #1
 800346e:	d121      	bne.n	80034b4 <USB_EPStartXfer+0x17c>
 8003470:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8003474:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8003478:	4401      	add	r1, r0
 800347a:	0112      	lsls	r2, r2, #4
 800347c:	e02c      	b.n	80034d8 <USB_EPStartXfer+0x1a0>
 800347e:	2b3e      	cmp	r3, #62	; 0x3e
 8003480:	d806      	bhi.n	8003490 <USB_EPStartXfer+0x158>
 8003482:	0858      	lsrs	r0, r3, #1
 8003484:	07de      	lsls	r6, r3, #31
 8003486:	bf48      	it	mi
 8003488:	3001      	addmi	r0, #1
 800348a:	0280      	lsls	r0, r0, #10
 800348c:	b280      	uxth	r0, r0
 800348e:	e7e8      	b.n	8003462 <USB_EPStartXfer+0x12a>
 8003490:	095e      	lsrs	r6, r3, #5
 8003492:	06d8      	lsls	r0, r3, #27
 8003494:	4811      	ldr	r0, [pc, #68]	; (80034dc <USB_EPStartXfer+0x1a4>)
 8003496:	bf08      	it	eq
 8003498:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800349c:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80034a0:	e7f4      	b.n	800348c <USB_EPStartXfer+0x154>
 80034a2:	2b3e      	cmp	r3, #62	; 0x3e
 80034a4:	d810      	bhi.n	80034c8 <USB_EPStartXfer+0x190>
 80034a6:	0858      	lsrs	r0, r3, #1
 80034a8:	07de      	lsls	r6, r3, #31
 80034aa:	bf48      	it	mi
 80034ac:	3001      	addmi	r0, #1
 80034ae:	0280      	lsls	r0, r0, #10
 80034b0:	b280      	uxth	r0, r0
 80034b2:	5288      	strh	r0, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80034b4:	782a      	ldrb	r2, [r5, #0]
 80034b6:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80034ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80034c6:	e761      	b.n	800338c <USB_EPStartXfer+0x54>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80034c8:	0958      	lsrs	r0, r3, #5
 80034ca:	06db      	lsls	r3, r3, #27
 80034cc:	4b03      	ldr	r3, [pc, #12]	; (80034dc <USB_EPStartXfer+0x1a4>)
 80034ce:	bf08      	it	eq
 80034d0:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80034d4:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80034d8:	b29b      	uxth	r3, r3
 80034da:	e7af      	b.n	800343c <USB_EPStartXfer+0x104>
 80034dc:	ffff8000 	.word	0xffff8000

080034e0 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80034e0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 80034e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80034e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 80034ea:	085d      	lsrs	r5, r3, #1
 80034ec:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80034ee:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 80034f0:	462e      	mov	r6, r5
 80034f2:	3002      	adds	r0, #2
 80034f4:	b936      	cbnz	r6, 8003504 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80034f6:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 80034f8:	bf44      	itt	mi
 80034fa:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80034fe:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8003502:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003504:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8003508:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 800350a:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800350c:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003510:	0a24      	lsrs	r4, r4, #8
 8003512:	f800 4c01 	strb.w	r4, [r0, #-1]
 8003516:	e7ec      	b.n	80034f2 <USB_ReadPMA+0x12>

08003518 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003518:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 800351c:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800351e:	b16b      	cbz	r3, 800353c <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003520:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003524:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003528:	28ff      	cmp	r0, #255	; 0xff
 800352a:	d007      	beq.n	800353c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003532:	4621      	mov	r1, r4
 8003534:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003536:	23ff      	movs	r3, #255	; 0xff
 8003538:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800353c:	2000      	movs	r0, #0
 800353e:	bd10      	pop	{r4, pc}

08003540 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003540:	2343      	movs	r3, #67	; 0x43
 8003542:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003544:	4800      	ldr	r0, [pc, #0]	; (8003548 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003546:	4770      	bx	lr
 8003548:	20000040 	.word	0x20000040

0800354c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800354c:	2343      	movs	r3, #67	; 0x43
 800354e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003550:	4800      	ldr	r0, [pc, #0]	; (8003554 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003552:	4770      	bx	lr
 8003554:	20000084 	.word	0x20000084

08003558 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003558:	2343      	movs	r3, #67	; 0x43
 800355a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800355c:	4800      	ldr	r0, [pc, #0]	; (8003560 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800355e:	4770      	bx	lr
 8003560:	200000d4 	.word	0x200000d4

08003564 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003564:	230a      	movs	r3, #10
 8003566:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003568:	4800      	ldr	r0, [pc, #0]	; (800356c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800356a:	4770      	bx	lr
 800356c:	200000c8 	.word	0x200000c8

08003570 <USBD_CDC_DataOut>:
{
 8003570:	b538      	push	{r3, r4, r5, lr}
 8003572:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003574:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003578:	f003 f888 	bl	800668c <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 800357c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003580:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003584:	b14b      	cbz	r3, 800359a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003586:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 800358a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003594:	4798      	blx	r3
    return USBD_OK;
 8003596:	2000      	movs	r0, #0
}
 8003598:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800359a:	2002      	movs	r0, #2
 800359c:	e7fc      	b.n	8003598 <USBD_CDC_DataOut+0x28>

0800359e <USBD_CDC_DataIn>:
{
 800359e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80035a0:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80035a4:	b1ce      	cbz	r6, 80035da <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80035a6:	2314      	movs	r3, #20
 80035a8:	fb03 0301 	mla	r3, r3, r1, r0
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	b182      	cbz	r2, 80035d2 <USBD_CDC_DataIn+0x34>
 80035b0:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 80035b4:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 80035b8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80035ba:	fbb2 f4f5 	udiv	r4, r2, r5
 80035be:	fb05 2414 	mls	r4, r5, r4, r2
 80035c2:	b934      	cbnz	r4, 80035d2 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 80035c4:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80035c6:	4622      	mov	r2, r4
 80035c8:	4623      	mov	r3, r4
 80035ca:	f003 f843 	bl	8006654 <USBD_LL_Transmit>
    return USBD_OK;
 80035ce:	4620      	mov	r0, r4
}
 80035d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80035d2:	2000      	movs	r0, #0
 80035d4:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 80035d8:	e7fa      	b.n	80035d0 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 80035da:	2002      	movs	r0, #2
 80035dc:	e7f8      	b.n	80035d0 <USBD_CDC_DataIn+0x32>

080035de <USBD_CDC_Setup>:
{
 80035de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 80035e2:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035e6:	780a      	ldrb	r2, [r1, #0]
{
 80035e8:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035ea:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 80035ee:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80035f0:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 80035f4:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 80035f8:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035fc:	d028      	beq.n	8003650 <USBD_CDC_Setup+0x72>
 80035fe:	2c20      	cmp	r4, #32
 8003600:	d145      	bne.n	800368e <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 8003602:	88cc      	ldrh	r4, [r1, #6]
 8003604:	784b      	ldrb	r3, [r1, #1]
 8003606:	b1e4      	cbz	r4, 8003642 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8003608:	0612      	lsls	r2, r2, #24
 800360a:	d511      	bpl.n	8003630 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800360c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003610:	4639      	mov	r1, r7
 8003612:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003616:	4618      	mov	r0, r3
 8003618:	4622      	mov	r2, r4
 800361a:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800361c:	88f2      	ldrh	r2, [r6, #6]
 800361e:	4639      	mov	r1, r7
 8003620:	4628      	mov	r0, r5
 8003622:	f000 fc46 	bl	8003eb2 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003626:	4644      	mov	r4, r8
}
 8003628:	4620      	mov	r0, r4
 800362a:	b003      	add	sp, #12
 800362c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8003630:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003634:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003638:	4622      	mov	r2, r4
 800363a:	4639      	mov	r1, r7
 800363c:	f000 fc4e 	bl	8003edc <USBD_CtlPrepareRx>
 8003640:	e7f1      	b.n	8003626 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003642:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003646:	4618      	mov	r0, r3
 8003648:	6895      	ldr	r5, [r2, #8]
 800364a:	4622      	mov	r2, r4
 800364c:	47a8      	blx	r5
 800364e:	e7eb      	b.n	8003628 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8003650:	784f      	ldrb	r7, [r1, #1]
 8003652:	2f0a      	cmp	r7, #10
 8003654:	d00d      	beq.n	8003672 <USBD_CDC_Setup+0x94>
 8003656:	2f0b      	cmp	r7, #11
 8003658:	d015      	beq.n	8003686 <USBD_CDC_Setup+0xa8>
 800365a:	b9c7      	cbnz	r7, 800368e <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800365c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003660:	2b03      	cmp	r3, #3
 8003662:	d114      	bne.n	800368e <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003664:	2202      	movs	r2, #2
 8003666:	f10d 0106 	add.w	r1, sp, #6
 800366a:	f000 fc22 	bl	8003eb2 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800366e:	463c      	mov	r4, r7
 8003670:	e7da      	b.n	8003628 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003672:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003676:	2b03      	cmp	r3, #3
 8003678:	d109      	bne.n	800368e <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800367a:	2201      	movs	r2, #1
 800367c:	f10d 0105 	add.w	r1, sp, #5
 8003680:	f000 fc17 	bl	8003eb2 <USBD_CtlSendData>
 8003684:	e7d0      	b.n	8003628 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003686:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800368a:	2b03      	cmp	r3, #3
 800368c:	d0cc      	beq.n	8003628 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 800368e:	4631      	mov	r1, r6
 8003690:	4628      	mov	r0, r5
 8003692:	f000 fbe7 	bl	8003e64 <USBD_CtlError>
          ret = USBD_FAIL;
 8003696:	2402      	movs	r4, #2
          break;
 8003698:	e7c6      	b.n	8003628 <USBD_CDC_Setup+0x4a>

0800369a <USBD_CDC_DeInit>:
{
 800369a:	b538      	push	{r3, r4, r5, lr}
 800369c:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800369e:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80036a0:	2181      	movs	r1, #129	; 0x81
 80036a2:	f002 ff8f 	bl	80065c4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80036a6:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80036a8:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80036aa:	4620      	mov	r0, r4
 80036ac:	f002 ff8a 	bl	80065c4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80036b0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80036b4:	2182      	movs	r1, #130	; 0x82
 80036b6:	4620      	mov	r0, r4
 80036b8:	f002 ff84 	bl	80065c4 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80036bc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80036c0:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80036c2:	b14b      	cbz	r3, 80036d8 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80036c4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80036cc:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80036d0:	f002 ffe4 	bl	800669c <USBD_static_free>
    pdev->pClassData = NULL;
 80036d4:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80036d8:	2000      	movs	r0, #0
 80036da:	bd38      	pop	{r3, r4, r5, pc}

080036dc <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80036dc:	7c03      	ldrb	r3, [r0, #16]
{
 80036de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e2:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80036e4:	bbcb      	cbnz	r3, 800375a <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80036e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ea:	2202      	movs	r2, #2
 80036ec:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80036ee:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80036f0:	f002 ff58 	bl	80065a4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80036f4:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80036f8:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80036fa:	4629      	mov	r1, r5
 80036fc:	2202      	movs	r2, #2
 80036fe:	4620      	mov	r0, r4
 8003700:	f002 ff50 	bl	80065a4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003704:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003708:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800370a:	2308      	movs	r3, #8
 800370c:	2203      	movs	r2, #3
 800370e:	2182      	movs	r1, #130	; 0x82
 8003710:	4620      	mov	r0, r4
 8003712:	f002 ff47 	bl	80065a4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003716:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003718:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800371c:	f002 ffba 	bl	8006694 <USBD_static_malloc>
 8003720:	4606      	mov	r6, r0
 8003722:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8003726:	b350      	cbz	r0, 800377e <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 8003728:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800372a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003732:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8003736:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 800373a:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800373e:	f1b8 0f00 	cmp.w	r8, #0
 8003742:	d113      	bne.n	800376c <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003748:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800374c:	4629      	mov	r1, r5
 800374e:	4620      	mov	r0, r4
 8003750:	f002 ff8e 	bl	8006670 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003754:	4640      	mov	r0, r8
}
 8003756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800375a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800375c:	2340      	movs	r3, #64	; 0x40
 800375e:	2202      	movs	r2, #2
 8003760:	2181      	movs	r1, #129	; 0x81
 8003762:	f002 ff1f 	bl	80065a4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003766:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003768:	2340      	movs	r3, #64	; 0x40
 800376a:	e7c6      	b.n	80036fa <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800376c:	2340      	movs	r3, #64	; 0x40
 800376e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003772:	4629      	mov	r1, r5
 8003774:	4620      	mov	r0, r4
 8003776:	f002 ff7b 	bl	8006670 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800377a:	4638      	mov	r0, r7
 800377c:	e7eb      	b.n	8003756 <USBD_CDC_Init+0x7a>
    ret = 1U;
 800377e:	4628      	mov	r0, r5
 8003780:	e7e9      	b.n	8003756 <USBD_CDC_Init+0x7a>

08003782 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003782:	b119      	cbz	r1, 800378c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003784:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8003788:	2000      	movs	r0, #0
 800378a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800378c:	2002      	movs	r0, #2
  }

  return ret;
}
 800378e:	4770      	bx	lr

08003790 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003790:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8003794:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8003796:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800379a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800379e:	4770      	bx	lr

080037a0 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80037a0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 80037a4:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80037a6:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80037aa:	4770      	bx	lr

080037ac <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80037ac:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80037b0:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 80037b2:	b182      	cbz	r2, 80037d6 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 80037b4:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 80037b8:	2301      	movs	r3, #1
 80037ba:	b974      	cbnz	r4, 80037da <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80037bc:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80037c0:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80037c4:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80037c6:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80037c8:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f002 ff41 	bl	8006654 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 80037d2:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 80037d4:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80037d6:	2002      	movs	r0, #2
 80037d8:	e7fc      	b.n	80037d4 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 80037da:	4618      	mov	r0, r3
 80037dc:	e7fa      	b.n	80037d4 <USBD_CDC_TransmitPacket+0x28>

080037de <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80037de:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80037e2:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80037e4:	b162      	cbz	r2, 8003800 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80037e6:	7c04      	ldrb	r4, [r0, #16]
 80037e8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80037ec:	b934      	cbnz	r4, 80037fc <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80037ee:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80037f2:	2101      	movs	r1, #1
 80037f4:	f002 ff3c 	bl	8006670 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80037f8:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80037fa:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80037fc:	2340      	movs	r3, #64	; 0x40
 80037fe:	e7f8      	b.n	80037f2 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8003800:	2002      	movs	r0, #2
 8003802:	e7fa      	b.n	80037fa <USBD_CDC_ReceivePacket+0x1c>

08003804 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003804:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003806:	b180      	cbz	r0, 800382a <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003808:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800380c:	b113      	cbz	r3, 8003814 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800380e:	2300      	movs	r3, #0
 8003810:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003814:	b109      	cbz	r1, 800381a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003816:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800381a:	2301      	movs	r3, #1
  pdev->id = id;
 800381c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800381e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003822:	f002 fe6f 	bl	8006504 <USBD_LL_Init>

  return USBD_OK;
 8003826:	2000      	movs	r0, #0
}
 8003828:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800382a:	2002      	movs	r0, #2
 800382c:	e7fc      	b.n	8003828 <USBD_Init+0x24>

0800382e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800382e:	b119      	cbz	r1, 8003838 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003830:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003834:	2000      	movs	r0, #0
 8003836:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003838:	2002      	movs	r0, #2
  }

  return status;
}
 800383a:	4770      	bx	lr

0800383c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800383c:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800383e:	f002 fea3 	bl	8006588 <USBD_LL_Start>

  return USBD_OK;
}
 8003842:	2000      	movs	r0, #0
 8003844:	bd08      	pop	{r3, pc}

08003846 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003846:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003848:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800384c:	b90b      	cbnz	r3, 8003852 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800384e:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8003850:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4798      	blx	r3
 8003856:	2800      	cmp	r0, #0
 8003858:	d0fa      	beq.n	8003850 <USBD_SetClassConfig+0xa>
 800385a:	e7f8      	b.n	800384e <USBD_SetClassConfig+0x8>

0800385c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800385c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800385e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	4798      	blx	r3

  return USBD_OK;
}
 8003866:	2000      	movs	r0, #0
 8003868:	bd08      	pop	{r3, pc}

0800386a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800386a:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800386c:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8003870:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003872:	4628      	mov	r0, r5
 8003874:	f000 fae2 	bl	8003e3c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003878:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800387a:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 800387e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8003882:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8003886:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800388a:	f001 031f 	and.w	r3, r1, #31
 800388e:	2b01      	cmp	r3, #1
 8003890:	d00e      	beq.n	80038b0 <USBD_LL_SetupStage+0x46>
 8003892:	d307      	bcc.n	80038a4 <USBD_LL_SetupStage+0x3a>
 8003894:	2b02      	cmp	r3, #2
 8003896:	d010      	beq.n	80038ba <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003898:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800389c:	4620      	mov	r0, r4
 800389e:	f002 fe9f 	bl	80065e0 <USBD_LL_StallEP>
      break;
 80038a2:	e003      	b.n	80038ac <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80038a4:	4629      	mov	r1, r5
 80038a6:	4620      	mov	r0, r4
 80038a8:	f000 f8f6 	bl	8003a98 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80038ac:	2000      	movs	r0, #0
 80038ae:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80038b0:	4629      	mov	r1, r5
 80038b2:	4620      	mov	r0, r4
 80038b4:	f000 fa14 	bl	8003ce0 <USBD_StdItfReq>
      break;
 80038b8:	e7f8      	b.n	80038ac <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80038ba:	4629      	mov	r1, r5
 80038bc:	4620      	mov	r0, r4
 80038be:	f000 fa34 	bl	8003d2a <USBD_StdEPReq>
      break;
 80038c2:	e7f3      	b.n	80038ac <USBD_LL_SetupStage+0x42>

080038c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	4605      	mov	r5, r0
 80038c8:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80038ca:	bb49      	cbnz	r1, 8003920 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80038cc:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d11e      	bne.n	8003912 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 80038d4:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 80038d8:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 80038dc:	4293      	cmp	r3, r2
 80038de:	d90b      	bls.n	80038f8 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 80038e0:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 80038e2:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 80038e4:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80038e8:	bf8c      	ite	hi
 80038ea:	b29a      	uxthhi	r2, r3
 80038ec:	b292      	uxthls	r2, r2
 80038ee:	4631      	mov	r1, r6
 80038f0:	f000 fb03 	bl	8003efa <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80038f4:	2000      	movs	r0, #0
}
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80038f8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	b123      	cbz	r3, 800390a <USBD_LL_DataOutStage+0x46>
 8003900:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003904:	2a03      	cmp	r2, #3
 8003906:	d100      	bne.n	800390a <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8003908:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800390a:	4628      	mov	r0, r5
 800390c:	f000 fafd 	bl	8003f0a <USBD_CtlSendStatus>
 8003910:	e7f0      	b.n	80038f4 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003912:	2b05      	cmp	r3, #5
 8003914:	d1ee      	bne.n	80038f4 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003916:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800391a:	f002 fe61 	bl	80065e0 <USBD_LL_StallEP>
 800391e:	e7e9      	b.n	80038f4 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003920:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	b12b      	cbz	r3, 8003934 <USBD_LL_DataOutStage+0x70>
 8003928:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800392c:	2a03      	cmp	r2, #3
 800392e:	d101      	bne.n	8003934 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8003930:	4798      	blx	r3
 8003932:	e7df      	b.n	80038f4 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8003934:	2002      	movs	r0, #2
 8003936:	e7de      	b.n	80038f6 <USBD_LL_DataOutStage+0x32>

08003938 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	4613      	mov	r3, r2
 800393c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800393e:	460e      	mov	r6, r1
 8003940:	2900      	cmp	r1, #0
 8003942:	d147      	bne.n	80039d4 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003944:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003948:	2a02      	cmp	r2, #2
 800394a:	d13c      	bne.n	80039c6 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 800394c:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8003950:	4295      	cmp	r5, r2
 8003952:	d913      	bls.n	800397c <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8003954:	1aaa      	subs	r2, r5, r2
 8003956:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003958:	4619      	mov	r1, r3
 800395a:	b292      	uxth	r2, r2
 800395c:	f000 fab6 	bl	8003ecc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003960:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003962:	461a      	mov	r2, r3
 8003964:	4619      	mov	r1, r3
 8003966:	4620      	mov	r0, r4
 8003968:	f002 fe82 	bl	8006670 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800396c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003970:	2000      	movs	r0, #0
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8003976:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800397a:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800397c:	69c3      	ldr	r3, [r0, #28]
 800397e:	fbb3 f5f2 	udiv	r5, r3, r2
 8003982:	fb02 3515 	mls	r5, r2, r5, r3
 8003986:	b965      	cbnz	r5, 80039a2 <USBD_LL_DataInStage+0x6a>
 8003988:	429a      	cmp	r2, r3
 800398a:	d80a      	bhi.n	80039a2 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 800398c:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8003990:	4293      	cmp	r3, r2
 8003992:	d206      	bcs.n	80039a2 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003994:	462a      	mov	r2, r5
 8003996:	f000 fa99 	bl	8003ecc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800399a:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800399e:	462b      	mov	r3, r5
 80039a0:	e7df      	b.n	8003962 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80039a2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	b12b      	cbz	r3, 80039b6 <USBD_LL_DataInStage+0x7e>
 80039aa:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80039ae:	2a03      	cmp	r2, #3
 80039b0:	d101      	bne.n	80039b6 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80039b2:	4620      	mov	r0, r4
 80039b4:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80039b6:	2180      	movs	r1, #128	; 0x80
 80039b8:	4620      	mov	r0, r4
 80039ba:	f002 fe11 	bl	80065e0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80039be:	4620      	mov	r0, r4
 80039c0:	f000 faae 	bl	8003f20 <USBD_CtlReceiveStatus>
 80039c4:	e7d2      	b.n	800396c <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80039c6:	f032 0304 	bics.w	r3, r2, #4
 80039ca:	d1cf      	bne.n	800396c <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80039cc:	2180      	movs	r1, #128	; 0x80
 80039ce:	f002 fe07 	bl	80065e0 <USBD_LL_StallEP>
 80039d2:	e7cb      	b.n	800396c <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80039d4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	b133      	cbz	r3, 80039ea <USBD_LL_DataInStage+0xb2>
 80039dc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80039e0:	2a03      	cmp	r2, #3
 80039e2:	d102      	bne.n	80039ea <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 80039e4:	4798      	blx	r3
  return USBD_OK;
 80039e6:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80039e8:	e7c7      	b.n	800397a <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 80039ea:	2002      	movs	r0, #2
 80039ec:	e7c5      	b.n	800397a <USBD_LL_DataInStage+0x42>

080039ee <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80039ee:	2200      	movs	r2, #0
{
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80039f4:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80039f6:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80039f8:	4611      	mov	r1, r2
 80039fa:	2340      	movs	r3, #64	; 0x40
 80039fc:	f002 fdd2 	bl	80065a4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003a00:	4633      	mov	r3, r6
 8003a02:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003a04:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003a08:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f002 fdc8 	bl	80065a4 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8003a14:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8003a16:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003a1a:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003a1c:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003a1e:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003a22:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8003a26:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003a28:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8003a2c:	b123      	cbz	r3, 8003a38 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003a2e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003a32:	4620      	mov	r0, r4
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003a38:	2000      	movs	r0, #0
 8003a3a:	bd70      	pop	{r4, r5, r6, pc}

08003a3c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003a3c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003a3e:	2000      	movs	r0, #0
 8003a40:	4770      	bx	lr

08003a42 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003a42:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003a46:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003a50:	2000      	movs	r0, #0
 8003a52:	4770      	bx	lr

08003a54 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003a54:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003a58:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8003a5a:	bf04      	itt	eq
 8003a5c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8003a60:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8003a64:	2000      	movs	r0, #0
 8003a66:	4770      	bx	lr

08003a68 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003a68:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003a6a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003a6e:	2a03      	cmp	r2, #3
 8003a70:	d104      	bne.n	8003a7c <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8003a72:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	b103      	cbz	r3, 8003a7c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003a7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	bd08      	pop	{r3, pc}

08003a80 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8003a80:	b510      	push	{r4, lr}
 8003a82:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	f002 fdab 	bl	80065e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003a8a:	4620      	mov	r0, r4
}
 8003a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003a90:	2100      	movs	r1, #0
 8003a92:	f002 bda5 	b.w	80065e0 <USBD_LL_StallEP>
	...

08003a98 <USBD_StdDevReq>:
{
 8003a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003a9a:	780b      	ldrb	r3, [r1, #0]
{
 8003a9c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003a9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003aa2:	2b20      	cmp	r3, #32
{
 8003aa4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003aa6:	d012      	beq.n	8003ace <USBD_StdDevReq+0x36>
 8003aa8:	2b40      	cmp	r3, #64	; 0x40
 8003aaa:	d010      	beq.n	8003ace <USBD_StdDevReq+0x36>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d15b      	bne.n	8003b68 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 8003ab0:	784b      	ldrb	r3, [r1, #1]
 8003ab2:	2b09      	cmp	r3, #9
 8003ab4:	d858      	bhi.n	8003b68 <USBD_StdDevReq+0xd0>
 8003ab6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003aba:	00e9      	.short	0x00e9
 8003abc:	00570105 	.word	0x00570105
 8003ac0:	005700fe 	.word	0x005700fe
 8003ac4:	00130084 	.word	0x00130084
 8003ac8:	00d20057 	.word	0x00d20057
 8003acc:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 8003ace:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	4798      	blx	r3
}
 8003ada:	2000      	movs	r0, #0
 8003adc:	b003      	add	sp, #12
 8003ade:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003ae6:	884b      	ldrh	r3, [r1, #2]
 8003ae8:	0a1a      	lsrs	r2, r3, #8
 8003aea:	3a01      	subs	r2, #1
 8003aec:	2a06      	cmp	r2, #6
 8003aee:	d83b      	bhi.n	8003b68 <USBD_StdDevReq+0xd0>
 8003af0:	e8df f002 	tbb	[pc, r2]
 8003af4:	3a2d2004 	.word	0x3a2d2004
 8003af8:	523a      	.short	0x523a
 8003afa:	5c          	.byte	0x5c
 8003afb:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003afc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003b00:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003b02:	f10d 0106 	add.w	r1, sp, #6
 8003b06:	7c20      	ldrb	r0, [r4, #16]
 8003b08:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003b0a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003b0e:	b152      	cbz	r2, 8003b26 <USBD_StdDevReq+0x8e>
 8003b10:	88eb      	ldrh	r3, [r5, #6]
 8003b12:	b143      	cbz	r3, 8003b26 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8003b14:	429a      	cmp	r2, r3
 8003b16:	bf28      	it	cs
 8003b18:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003b1a:	4601      	mov	r1, r0
 8003b1c:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8003b1e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003b22:	f000 f9c6 	bl	8003eb2 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003b26:	88eb      	ldrh	r3, [r5, #6]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1d6      	bne.n	8003ada <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f000 f9ec 	bl	8003f0a <USBD_CtlSendStatus>
 8003b32:	e7d2      	b.n	8003ada <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003b34:	7c02      	ldrb	r2, [r0, #16]
 8003b36:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003b3a:	b932      	cbnz	r2, 8003b4a <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003b3e:	f10d 0006 	add.w	r0, sp, #6
 8003b42:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003b44:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003b46:	7043      	strb	r3, [r0, #1]
 8003b48:	e7df      	b.n	8003b0a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	e7f7      	b.n	8003b3e <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d809      	bhi.n	8003b68 <USBD_StdDevReq+0xd0>
 8003b54:	e8df f003 	tbb	[pc, r3]
 8003b58:	14100c03 	.word	0x14100c03
 8003b5c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003b5e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003b62:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1cc      	bne.n	8003b02 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8003b68:	4620      	mov	r0, r4
 8003b6a:	f7ff ff89 	bl	8003a80 <USBD_CtlError.constprop.1>
 8003b6e:	e7b4      	b.n	8003ada <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003b70:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	e7f5      	b.n	8003b64 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003b78:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	e7f1      	b.n	8003b64 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003b80:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	e7ed      	b.n	8003b64 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003b88:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	e7e9      	b.n	8003b64 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003b90:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	e7e5      	b.n	8003b64 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003b98:	7c03      	ldrb	r3, [r0, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1e4      	bne.n	8003b68 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003b9e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ba2:	f10d 0006 	add.w	r0, sp, #6
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	4798      	blx	r3
 8003baa:	e7ae      	b.n	8003b0a <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003bac:	7c03      	ldrb	r3, [r0, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1da      	bne.n	8003b68 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003bb2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003bb6:	f10d 0006 	add.w	r0, sp, #6
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003bbe:	2307      	movs	r3, #7
 8003bc0:	e7c1      	b.n	8003b46 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003bc2:	888b      	ldrh	r3, [r1, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1cf      	bne.n	8003b68 <USBD_StdDevReq+0xd0>
 8003bc8:	88cb      	ldrh	r3, [r1, #6]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1cc      	bne.n	8003b68 <USBD_StdDevReq+0xd0>
 8003bce:	884d      	ldrh	r5, [r1, #2]
 8003bd0:	2d7f      	cmp	r5, #127	; 0x7f
 8003bd2:	d8c9      	bhi.n	8003b68 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003bd4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d0c5      	beq.n	8003b68 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003bdc:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8003bde:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003be2:	f002 fd29 	bl	8006638 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003be6:	4620      	mov	r0, r4
 8003be8:	f000 f98f 	bl	8003f0a <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003bec:	b11d      	cbz	r5, 8003bf6 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003bee:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003bf0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003bf4:	e771      	b.n	8003ada <USBD_StdDevReq+0x42>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e7fa      	b.n	8003bf0 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8003bfa:	7889      	ldrb	r1, [r1, #2]
 8003bfc:	4d37      	ldr	r5, [pc, #220]	; (8003cdc <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003bfe:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8003c00:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003c02:	d8b1      	bhi.n	8003b68 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8003c04:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d008      	beq.n	8003c1e <USBD_StdDevReq+0x186>
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d014      	beq.n	8003c3a <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8003c10:	f7ff ff36 	bl	8003a80 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003c14:	7829      	ldrb	r1, [r5, #0]
 8003c16:	4620      	mov	r0, r4
 8003c18:	f7ff fe20 	bl	800385c <USBD_ClrClassConfig>
 8003c1c:	e75d      	b.n	8003ada <USBD_StdDevReq+0x42>
        if (cfgidx)
 8003c1e:	2900      	cmp	r1, #0
 8003c20:	d084      	beq.n	8003b2c <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8003c22:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003c24:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8003c26:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003c28:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f7ff fe0a 	bl	8003846 <USBD_SetClassConfig>
 8003c32:	2802      	cmp	r0, #2
 8003c34:	f47f af7a 	bne.w	8003b2c <USBD_StdDevReq+0x94>
 8003c38:	e796      	b.n	8003b68 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 8003c3a:	b931      	cbnz	r1, 8003c4a <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003c3c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8003c3e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003c40:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8003c44:	f7ff fe0a 	bl	800385c <USBD_ClrClassConfig>
 8003c48:	e770      	b.n	8003b2c <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 8003c4a:	6841      	ldr	r1, [r0, #4]
 8003c4c:	2901      	cmp	r1, #1
 8003c4e:	f43f af6d 	beq.w	8003b2c <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003c52:	b2c9      	uxtb	r1, r1
 8003c54:	f7ff fe02 	bl	800385c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003c58:	7829      	ldrb	r1, [r5, #0]
 8003c5a:	6061      	str	r1, [r4, #4]
 8003c5c:	e7e6      	b.n	8003c2c <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 8003c5e:	88ca      	ldrh	r2, [r1, #6]
 8003c60:	2a01      	cmp	r2, #1
 8003c62:	d181      	bne.n	8003b68 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8003c64:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f43f af7d 	beq.w	8003b68 <USBD_StdDevReq+0xd0>
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d904      	bls.n	8003c7c <USBD_StdDevReq+0x1e4>
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	f47f af78 	bne.w	8003b68 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003c78:	1d01      	adds	r1, r0, #4
 8003c7a:	e003      	b.n	8003c84 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 8003c7c:	4601      	mov	r1, r0
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003c84:	4620      	mov	r0, r4
 8003c86:	f000 f914 	bl	8003eb2 <USBD_CtlSendData>
 8003c8a:	e726      	b.n	8003ada <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 8003c8c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003c90:	3b01      	subs	r3, #1
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	f63f af68 	bhi.w	8003b68 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8003c98:	88cb      	ldrh	r3, [r1, #6]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	f47f af64 	bne.w	8003b68 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003ca4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003ca8:	b10b      	cbz	r3, 8003cae <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003caa:	2303      	movs	r3, #3
 8003cac:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f104 010c 	add.w	r1, r4, #12
 8003cb4:	e7e6      	b.n	8003c84 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003cb6:	884b      	ldrh	r3, [r1, #2]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	f47f af0e 	bne.w	8003ada <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003cbe:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8003cc2:	e733      	b.n	8003b2c <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 8003cc4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	f63f af4c 	bhi.w	8003b68 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003cd0:	884b      	ldrh	r3, [r1, #2]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	f47f af01 	bne.w	8003ada <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e7f0      	b.n	8003cbe <USBD_StdDevReq+0x226>
 8003cdc:	200003f4 	.word	0x200003f4

08003ce0 <USBD_StdItfReq>:
{
 8003ce0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ce2:	780b      	ldrb	r3, [r1, #0]
{
 8003ce4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ce6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003cea:	2b20      	cmp	r3, #32
{
 8003cec:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003cee:	d002      	beq.n	8003cf6 <USBD_StdItfReq+0x16>
 8003cf0:	2b40      	cmp	r3, #64	; 0x40
 8003cf2:	d000      	beq.n	8003cf6 <USBD_StdItfReq+0x16>
 8003cf4:	b9ab      	cbnz	r3, 8003d22 <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8003cf6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d810      	bhi.n	8003d22 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003d00:	792b      	ldrb	r3, [r5, #4]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d80d      	bhi.n	8003d22 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003d06:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	4620      	mov	r0, r4
 8003d10:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003d12:	88eb      	ldrh	r3, [r5, #6]
 8003d14:	b91b      	cbnz	r3, 8003d1e <USBD_StdItfReq+0x3e>
 8003d16:	b910      	cbnz	r0, 8003d1e <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f000 f8f6 	bl	8003f0a <USBD_CtlSendStatus>
}
 8003d1e:	2000      	movs	r0, #0
 8003d20:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8003d22:	4620      	mov	r0, r4
 8003d24:	f7ff feac 	bl	8003a80 <USBD_CtlError.constprop.1>
          break;
 8003d28:	e7f9      	b.n	8003d1e <USBD_StdItfReq+0x3e>

08003d2a <USBD_StdEPReq>:
{
 8003d2a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d2c:	780a      	ldrb	r2, [r1, #0]
{
 8003d2e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d30:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003d34:	2a20      	cmp	r2, #32
{
 8003d36:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d38:	d014      	beq.n	8003d64 <USBD_StdEPReq+0x3a>
 8003d3a:	2a40      	cmp	r2, #64	; 0x40
 8003d3c:	d012      	beq.n	8003d64 <USBD_StdEPReq+0x3a>
 8003d3e:	b96a      	cbnz	r2, 8003d5c <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8003d40:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8003d42:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 8003d44:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 8003d46:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8003d48:	d020      	beq.n	8003d8c <USBD_StdEPReq+0x62>
 8003d4a:	d336      	bcc.n	8003dba <USBD_StdEPReq+0x90>
 8003d4c:	2a03      	cmp	r2, #3
 8003d4e:	d105      	bne.n	8003d5c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8003d50:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003d54:	2a02      	cmp	r2, #2
 8003d56:	d027      	beq.n	8003da8 <USBD_StdEPReq+0x7e>
 8003d58:	2a03      	cmp	r2, #3
 8003d5a:	d00b      	beq.n	8003d74 <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f7ff fe8f 	bl	8003a80 <USBD_CtlError.constprop.1>
              break;
 8003d62:	e005      	b.n	8003d70 <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 8003d64:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6892      	ldr	r2, [r2, #8]
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	4790      	blx	r2
}
 8003d70:	2000      	movs	r0, #0
 8003d72:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003d74:	885a      	ldrh	r2, [r3, #2]
 8003d76:	b92a      	cbnz	r2, 8003d84 <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 8003d78:	064a      	lsls	r2, r1, #25
 8003d7a:	d003      	beq.n	8003d84 <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003d7c:	88db      	ldrh	r3, [r3, #6]
 8003d7e:	b90b      	cbnz	r3, 8003d84 <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003d80:	f002 fc2e 	bl	80065e0 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8003d84:	4620      	mov	r0, r4
 8003d86:	f000 f8c0 	bl	8003f0a <USBD_CtlSendStatus>
              break;
 8003d8a:	e7f1      	b.n	8003d70 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 8003d8c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003d90:	2a02      	cmp	r2, #2
 8003d92:	d009      	beq.n	8003da8 <USBD_StdEPReq+0x7e>
 8003d94:	2a03      	cmp	r2, #3
 8003d96:	d1e1      	bne.n	8003d5c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003d98:	885b      	ldrh	r3, [r3, #2]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e8      	bne.n	8003d70 <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003d9e:	064d      	lsls	r5, r1, #25
 8003da0:	d0f0      	beq.n	8003d84 <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003da2:	f002 fc2b 	bl	80065fc <USBD_LL_ClearStallEP>
 8003da6:	e7ed      	b.n	8003d84 <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003da8:	064b      	lsls	r3, r1, #25
 8003daa:	d0d7      	beq.n	8003d5c <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 8003dac:	f002 fc18 	bl	80065e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003db0:	2180      	movs	r1, #128	; 0x80
 8003db2:	4620      	mov	r0, r4
 8003db4:	f002 fc14 	bl	80065e0 <USBD_LL_StallEP>
 8003db8:	e7da      	b.n	8003d70 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 8003dba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d018      	beq.n	8003df4 <USBD_StdEPReq+0xca>
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d1ca      	bne.n	8003d5c <USBD_StdEPReq+0x32>
 8003dc6:	2314      	movs	r3, #20
 8003dc8:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8003dcc:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003dd0:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8003dd4:	d01f      	beq.n	8003e16 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003dd6:	6992      	ldr	r2, [r2, #24]
 8003dd8:	2a00      	cmp	r2, #0
 8003dda:	d0bf      	beq.n	8003d5c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003ddc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003de0:	fb05 3503 	mla	r5, r5, r3, r3
 8003de4:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003de6:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8003dea:	d11f      	bne.n	8003e2c <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 8003dec:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003dee:	2202      	movs	r2, #2
 8003df0:	4629      	mov	r1, r5
 8003df2:	e00c      	b.n	8003e0e <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003df4:	064a      	lsls	r2, r1, #25
 8003df6:	d1b1      	bne.n	8003d5c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003df8:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8003dfa:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003dfe:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003e02:	bf4c      	ite	mi
 8003e04:	f100 0114 	addmi.w	r1, r0, #20
 8003e08:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8003e0c:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f000 f84f 	bl	8003eb2 <USBD_CtlSendData>
              break;
 8003e14:	e7ac      	b.n	8003d70 <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003e16:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8003e1a:	2a00      	cmp	r2, #0
 8003e1c:	d09e      	beq.n	8003d5c <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003e1e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003e22:	fb03 0505 	mla	r5, r3, r5, r0
 8003e26:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8003e2a:	e7dc      	b.n	8003de6 <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f002 fbf3 	bl	8006618 <USBD_LL_IsStallEP>
 8003e32:	b108      	cbz	r0, 8003e38 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e7d9      	b.n	8003dec <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8003e38:	6028      	str	r0, [r5, #0]
 8003e3a:	e7d8      	b.n	8003dee <USBD_StdEPReq+0xc4>

08003e3c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8003e3c:	780b      	ldrb	r3, [r1, #0]
 8003e3e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003e40:	784b      	ldrb	r3, [r1, #1]
 8003e42:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003e44:	78ca      	ldrb	r2, [r1, #3]
 8003e46:	788b      	ldrb	r3, [r1, #2]
 8003e48:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003e4c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8003e4e:	794a      	ldrb	r2, [r1, #5]
 8003e50:	790b      	ldrb	r3, [r1, #4]
 8003e52:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003e56:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003e58:	79ca      	ldrb	r2, [r1, #7]
 8003e5a:	798b      	ldrb	r3, [r1, #6]
 8003e5c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003e60:	80c3      	strh	r3, [r0, #6]
}
 8003e62:	4770      	bx	lr

08003e64 <USBD_CtlError>:
{
 8003e64:	b510      	push	{r4, lr}
 8003e66:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	f002 fbb9 	bl	80065e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003e6e:	4620      	mov	r0, r4
}
 8003e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003e74:	2100      	movs	r1, #0
 8003e76:	f002 bbb3 	b.w	80065e0 <USBD_LL_StallEP>

08003e7a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003e7a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8003e7c:	b188      	cbz	r0, 8003ea2 <USBD_GetString+0x28>
 8003e7e:	4605      	mov	r5, r0
 8003e80:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8003e82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2c00      	cmp	r4, #0
 8003e8a:	d1f9      	bne.n	8003e80 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003e92:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003e94:	2303      	movs	r3, #3
 8003e96:	704b      	strb	r3, [r1, #1]
 8003e98:	2302      	movs	r3, #2
 8003e9a:	3801      	subs	r0, #1
    while (*desc != '\0')
 8003e9c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003ea0:	b905      	cbnz	r5, 8003ea4 <USBD_GetString+0x2a>
}
 8003ea2:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	54cd      	strb	r5, [r1, r3]
 8003ea8:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8003eaa:	3302      	adds	r3, #2
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	548c      	strb	r4, [r1, r2]
 8003eb0:	e7f4      	b.n	8003e9c <USBD_GetString+0x22>

08003eb2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8003eb2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003eb4:	2202      	movs	r2, #2
{
 8003eb6:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003eb8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8003ebc:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003ec0:	460a      	mov	r2, r1
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	f002 fbc6 	bl	8006654 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003ec8:	2000      	movs	r0, #0
 8003eca:	bd10      	pop	{r4, pc}

08003ecc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8003ecc:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003ece:	4613      	mov	r3, r2
 8003ed0:	460a      	mov	r2, r1
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	f002 fbbe 	bl	8006654 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003ed8:	2000      	movs	r0, #0
 8003eda:	bd08      	pop	{r3, pc}

08003edc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8003edc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003ede:	2203      	movs	r2, #3
{
 8003ee0:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003ee2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8003ee6:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003eea:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8003eec:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	f002 fbbd 	bl	8006670 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	bd10      	pop	{r4, pc}

08003efa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8003efa:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003efc:	4613      	mov	r3, r2
 8003efe:	460a      	mov	r2, r1
 8003f00:	2100      	movs	r1, #0
 8003f02:	f002 fbb5 	bl	8006670 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003f06:	2000      	movs	r0, #0
 8003f08:	bd08      	pop	{r3, pc}

08003f0a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003f0a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003f12:	2300      	movs	r3, #0
 8003f14:	461a      	mov	r2, r3
 8003f16:	4619      	mov	r1, r3
 8003f18:	f002 fb9c 	bl	8006654 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	bd08      	pop	{r3, pc}

08003f20 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8003f20:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003f22:	2305      	movs	r3, #5
 8003f24:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f002 fb9f 	bl	8006670 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003f32:	2000      	movs	r0, #0
 8003f34:	bd08      	pop	{r3, pc}
	...

08003f38 <get_addr>:
}

uint32_t get_addr(void)
{
	return reg_addr;
}
 8003f38:	4b01      	ldr	r3, [pc, #4]	; (8003f40 <get_addr+0x8>)
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	200003f8 	.word	0x200003f8

08003f44 <get_mode>:

dmxmode_t get_mode(void)
{
	return dmx_mode;
}
 8003f44:	4b01      	ldr	r3, [pc, #4]	; (8003f4c <get_mode+0x8>)
 8003f46:	7818      	ldrb	r0, [r3, #0]
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	200003f5 	.word	0x200003f5

08003f50 <get_reg_length>:
}

uint32_t get_reg_length(void)
{
	return reg_len;
}
 8003f50:	4b01      	ldr	r3, [pc, #4]	; (8003f58 <get_reg_length+0x8>)
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000400 	.word	0x20000400

08003f5c <init_regs>:

void init_regs(void)
{
 8003f5c:	b510      	push	{r4, lr}
	//allocate memory
	if (reg_data != NULL)
 8003f5e:	4c06      	ldr	r4, [pc, #24]	; (8003f78 <init_regs+0x1c>)
 8003f60:	6820      	ldr	r0, [r4, #0]
 8003f62:	b108      	cbz	r0, 8003f68 <init_regs+0xc>
		free(reg_data);
 8003f64:	f002 ff2c 	bl	8006dc0 <free>

	reg_data = calloc(reg_len, sizeof(uint8_t));
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <init_regs+0x20>)
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	f002 feed 	bl	8006d4c <calloc>
 8003f72:	6020      	str	r0, [r4, #0]
}
 8003f74:	bd10      	pop	{r4, pc}
 8003f76:	bf00      	nop
 8003f78:	200003fc 	.word	0x200003fc
 8003f7c:	20000400 	.word	0x20000400

08003f80 <dmx512_init>:
	reg_addr = addr;
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <dmx512_init+0x1c>)
	dmx_mode = mode & 0x01;
 8003f82:	f000 0201 	and.w	r2, r0, #1
	reg_addr = addr;
 8003f86:	6019      	str	r1, [r3, #0]
	dmx_mode = mode & 0x01;
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <dmx512_init+0x20>)
	switch (mode)
 8003f8a:	2801      	cmp	r0, #1
	dmx_mode = mode & 0x01;
 8003f8c:	701a      	strb	r2, [r3, #0]
	reg_len = len;
 8003f8e:	bf14      	ite	ne
 8003f90:	220b      	movne	r2, #11
 8003f92:	221a      	moveq	r2, #26
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <dmx512_init+0x24>)
 8003f96:	601a      	str	r2, [r3, #0]
	init_regs();
 8003f98:	f7ff bfe0 	b.w	8003f5c <init_regs>
 8003f9c:	200003f8 	.word	0x200003f8
 8003fa0:	200003f5 	.word	0x200003f5
 8003fa4:	20000400 	.word	0x20000400

08003fa8 <set_reg>:

void set_reg(uint32_t reg, uint8_t val)
{
	if ((reg_data != NULL) && (reg<reg_len))
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <set_reg+0x14>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	b123      	cbz	r3, 8003fb8 <set_reg+0x10>
 8003fae:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <set_reg+0x18>)
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	4282      	cmp	r2, r0
	{
		reg_data[reg] = val;
 8003fb4:	bf88      	it	hi
 8003fb6:	5419      	strbhi	r1, [r3, r0]
	}
}
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	200003fc 	.word	0x200003fc
 8003fc0:	20000400 	.word	0x20000400

08003fc4 <get_reg>:

uint8_t get_reg(uint32_t reg)
{
	if ((reg_data != NULL) && (reg<reg_len))
 8003fc4:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <get_reg+0x18>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	b12b      	cbz	r3, 8003fd6 <get_reg+0x12>
 8003fca:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <get_reg+0x1c>)
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	4282      	cmp	r2, r0
 8003fd0:	d901      	bls.n	8003fd6 <get_reg+0x12>
	{
		return reg_data[reg];
 8003fd2:	5c18      	ldrb	r0, [r3, r0]
 8003fd4:	4770      	bx	lr
	}
	else
	{
		return 0;
 8003fd6:	2000      	movs	r0, #0
	}
}
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	200003fc 	.word	0x200003fc
 8003fe0:	20000400 	.word	0x20000400

08003fe4 <get_reg_name>:
}


const char* get_reg_name(uint32_t reg)
{
	if (reg<reg_len)
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <get_reg_name+0x14>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4283      	cmp	r3, r0
		return regnames[reg];
 8003fea:	bf86      	itte	hi
 8003fec:	4b03      	ldrhi	r3, [pc, #12]	; (8003ffc <get_reg_name+0x18>)
 8003fee:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
	else
		return 0;
 8003ff2:	2000      	movls	r0, #0
}
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000400 	.word	0x20000400
 8003ffc:	20000118 	.word	0x20000118

08004000 <USART1_IRQHandler>:
/* UART1 Interrupt Service Routine */
void USART1_IRQHandler(void)
{
	//Get the received byte and clear Frame Error IRQ flag
	//On Framing Error restart Timer to search for a start condition
	if (__HAL_UART_GET_FLAG(&huart1,UART_FLAG_FE))
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <USART1_IRQHandler+0x28>)
{
 8004002:	b082      	sub	sp, #8
	if (__HAL_UART_GET_FLAG(&huart1,UART_FLAG_FE))
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	0792      	lsls	r2, r2, #30
 800400a:	d509      	bpl.n	8004020 <USART1_IRQHandler+0x20>
	{
		__HAL_UART_CLEAR_FEFLAG(&huart1);
 800400c:	2200      	movs	r2, #0
 800400e:	9201      	str	r2, [sp, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	9201      	str	r2, [sp, #4]
#ifdef USE_TIMER
		TIM_ITConfig(TIM1, TIM_IT_CC1, ENABLE);
#else
		start_flag = 1;
 8004014:	2201      	movs	r2, #1
		__HAL_UART_CLEAR_FEFLAG(&huart1);
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	9b01      	ldr	r3, [sp, #4]
		start_flag = 1;
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <USART1_IRQHandler+0x2c>)
 800401e:	701a      	strb	r2, [r3, #0]
#endif
	}
	HAL_UART_IRQHandler(&huart1);
 8004020:	4801      	ldr	r0, [pc, #4]	; (8004028 <USART1_IRQHandler+0x28>)
}
 8004022:	b002      	add	sp, #8
	HAL_UART_IRQHandler(&huart1);
 8004024:	f7fe bdf4 	b.w	8002c10 <HAL_UART_IRQHandler>
 8004028:	20000c10 	.word	0x20000c10
 800402c:	20000410 	.word	0x20000410

08004030 <USART3_IRQHandler>:

#ifdef USE_UART_IRQ
/* UART3 Interrupt Service Routine */
void USART3_IRQHandler(void)
{
	HAL_UART_IRQHandler(&huart3);
 8004030:	4801      	ldr	r0, [pc, #4]	; (8004038 <USART3_IRQHandler+0x8>)
 8004032:	f7fe bded 	b.w	8002c10 <HAL_UART_IRQHandler>
 8004036:	bf00      	nop
 8004038:	20000b2c 	.word	0x20000b2c

0800403c <HAL_UART_RxCpltCallback>:
//UART IRQ Triggered by incoming characters
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	volatile uint8_t rx_byte;

	if (huart->Instance == USART1)
 800403c:	6803      	ldr	r3, [r0, #0]
 800403e:	4a34      	ldr	r2, [pc, #208]	; (8004110 <HAL_UART_RxCpltCallback+0xd4>)
{
 8004040:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (huart->Instance == USART1)
 8004042:	4293      	cmp	r3, r2
 8004044:	d156      	bne.n	80040f4 <HAL_UART_RxCpltCallback+0xb8>
    {
		rx_byte = buffer;
 8004046:	4b33      	ldr	r3, [pc, #204]	; (8004114 <HAL_UART_RxCpltCallback+0xd8>)

		//Timer has signaled a start flag.
		//We can start to capture data.
		if (start_flag)
 8004048:	4d33      	ldr	r5, [pc, #204]	; (8004118 <HAL_UART_RxCpltCallback+0xdc>)
		rx_byte = buffer;
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	4c33      	ldr	r4, [pc, #204]	; (800411c <HAL_UART_RxCpltCallback+0xe0>)
 800404e:	f88d 3007 	strb.w	r3, [sp, #7]
		if (start_flag)
 8004052:	782b      	ldrb	r3, [r5, #0]
 8004054:	b36b      	cbz	r3, 80040b2 <HAL_UART_RxCpltCallback+0x76>
		{
			//On every incoming start packet we invert the LED to signal incoming data
			msg_cnt++;
 8004056:	4a32      	ldr	r2, [pc, #200]	; (8004120 <HAL_UART_RxCpltCallback+0xe4>)
 8004058:	7813      	ldrb	r3, [r2, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	7013      	strb	r3, [r2, #0]
			if (msg_cnt == 44)
 8004060:	7813      	ldrb	r3, [r2, #0]
 8004062:	2b2c      	cmp	r3, #44	; 0x2c
 8004064:	d10d      	bne.n	8004082 <HAL_UART_RxCpltCallback+0x46>
			{
				msg_cnt = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	7013      	strb	r3, [r2, #0]
				led_status =!led_status;
 800406a:	4a2e      	ldr	r2, [pc, #184]	; (8004124 <HAL_UART_RxCpltCallback+0xe8>)
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 800406c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
				led_status =!led_status;
 8004070:	7813      	ldrb	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 8004072:	482d      	ldr	r0, [pc, #180]	; (8004128 <HAL_UART_RxCpltCallback+0xec>)
				led_status =!led_status;
 8004074:	fab3 f383 	clz	r3, r3
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	7013      	strb	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 800407c:	7812      	ldrb	r2, [r2, #0]
 800407e:	f7fd f93b 	bl	80012f8 <HAL_GPIO_WritePin>
			}

			//Reset Variables
			dmx_error = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	4929      	ldr	r1, [pc, #164]	; (800412c <HAL_UART_RxCpltCallback+0xf0>)
 8004086:	700b      	strb	r3, [r1, #0]
			byte_count = 0;
 8004088:	8023      	strh	r3, [r4, #0]
			start_flag = 0;
 800408a:	702b      	strb	r3, [r5, #0]

			/* first byte determines packet type */
			switch (rx_byte)
 800408c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004090:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8004094:	b15a      	cbz	r2, 80040ae <HAL_UART_RxCpltCallback+0x72>
 8004096:	2b17      	cmp	r3, #23
 8004098:	f04f 0201 	mov.w	r2, #1
 800409c:	d027      	beq.n	80040ee <HAL_UART_RxCpltCallback+0xb2>
			case 0x17:
				packet_type = TEST_PACKET;
				break;
			default:
				//Anything else we declare an error....
				dmx_error = 1;
 800409e:	700a      	strb	r2, [r1, #0]
		}
		//Increase Counter
		byte_count++;

		//Get more data
		HAL_UART_Receive_IT(&huart1, &buffer, 1);
 80040a0:	491c      	ldr	r1, [pc, #112]	; (8004114 <HAL_UART_RxCpltCallback+0xd8>)
 80040a2:	4823      	ldr	r0, [pc, #140]	; (8004130 <HAL_UART_RxCpltCallback+0xf4>)

		//Get more data
		HAL_UART_Receive_IT(&huart3, &buffer2, 1);
    }
#endif
}
 80040a4:	b002      	add	sp, #8
 80040a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_UART_Receive_IT(&huart3, &buffer2, 1);
 80040aa:	f7fe bd4c 	b.w	8002b46 <HAL_UART_Receive_IT>
				packet_type = DATA_PACKET;
 80040ae:	4a21      	ldr	r2, [pc, #132]	; (8004134 <HAL_UART_RxCpltCallback+0xf8>)
 80040b0:	7013      	strb	r3, [r2, #0]
		if (packet_type == DATA_PACKET)
 80040b2:	4b20      	ldr	r3, [pc, #128]	; (8004134 <HAL_UART_RxCpltCallback+0xf8>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	b9a3      	cbnz	r3, 80040e2 <HAL_UART_RxCpltCallback+0xa6>
			if (byte_count >= start_addr && byte_count < start_addr + get_reg_length())
 80040b8:	4d1f      	ldr	r5, [pc, #124]	; (8004138 <HAL_UART_RxCpltCallback+0xfc>)
 80040ba:	8823      	ldrh	r3, [r4, #0]
 80040bc:	682a      	ldr	r2, [r5, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d80f      	bhi.n	80040e2 <HAL_UART_RxCpltCallback+0xa6>
 80040c2:	8826      	ldrh	r6, [r4, #0]
 80040c4:	f7ff ff44 	bl	8003f50 <get_reg_length>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	b2b6      	uxth	r6, r6
 80040cc:	4418      	add	r0, r3
 80040ce:	4286      	cmp	r6, r0
 80040d0:	d207      	bcs.n	80040e2 <HAL_UART_RxCpltCallback+0xa6>
				set_reg(byte_count - start_addr-1, rx_byte);
 80040d2:	8820      	ldrh	r0, [r4, #0]
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80040da:	1ac0      	subs	r0, r0, r3
 80040dc:	3801      	subs	r0, #1
 80040de:	f7ff ff63 	bl	8003fa8 <set_reg>
		byte_count++;
 80040e2:	8823      	ldrh	r3, [r4, #0]
		HAL_UART_Receive_IT(&huart1, &buffer, 1);
 80040e4:	2201      	movs	r2, #1
		byte_count++;
 80040e6:	3301      	adds	r3, #1
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	8023      	strh	r3, [r4, #0]
 80040ec:	e7d8      	b.n	80040a0 <HAL_UART_RxCpltCallback+0x64>
				packet_type = TEST_PACKET;
 80040ee:	4b11      	ldr	r3, [pc, #68]	; (8004134 <HAL_UART_RxCpltCallback+0xf8>)
 80040f0:	701a      	strb	r2, [r3, #0]
				break;
 80040f2:	e7de      	b.n	80040b2 <HAL_UART_RxCpltCallback+0x76>
	else if (huart->Instance == USART3)
 80040f4:	4a11      	ldr	r2, [pc, #68]	; (800413c <HAL_UART_RxCpltCallback+0x100>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d108      	bne.n	800410c <HAL_UART_RxCpltCallback+0xd0>
		ring_buffer_put(&rx_buff, &buffer2, 1);
 80040fa:	2201      	movs	r2, #1
 80040fc:	4910      	ldr	r1, [pc, #64]	; (8004140 <HAL_UART_RxCpltCallback+0x104>)
 80040fe:	4811      	ldr	r0, [pc, #68]	; (8004144 <HAL_UART_RxCpltCallback+0x108>)
 8004100:	f000 ff76 	bl	8004ff0 <ring_buffer_put>
		HAL_UART_Receive_IT(&huart3, &buffer2, 1);
 8004104:	2201      	movs	r2, #1
 8004106:	490e      	ldr	r1, [pc, #56]	; (8004140 <HAL_UART_RxCpltCallback+0x104>)
 8004108:	480f      	ldr	r0, [pc, #60]	; (8004148 <HAL_UART_RxCpltCallback+0x10c>)
 800410a:	e7cb      	b.n	80040a4 <HAL_UART_RxCpltCallback+0x68>
}
 800410c:	b002      	add	sp, #8
 800410e:	bd70      	pop	{r4, r5, r6, pc}
 8004110:	40013800 	.word	0x40013800
 8004114:	20000404 	.word	0x20000404
 8004118:	20000410 	.word	0x20000410
 800411c:	20000406 	.word	0x20000406
 8004120:	20000409 	.word	0x20000409
 8004124:	20000408 	.word	0x20000408
 8004128:	40011000 	.word	0x40011000
 800412c:	20000180 	.word	0x20000180
 8004130:	20000c10 	.word	0x20000c10
 8004134:	2000040a 	.word	0x2000040a
 8004138:	2000040c 	.word	0x2000040c
 800413c:	40004800 	.word	0x40004800
 8004140:	20000405 	.word	0x20000405
 8004144:	20000b14 	.word	0x20000b14
 8004148:	20000b2c 	.word	0x20000b2c

0800414c <dmx512_setRx>:
}



void dmx512_setRx(void)
{
 800414c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 800414e:	4805      	ldr	r0, [pc, #20]	; (8004164 <dmx512_setRx+0x18>)
 8004150:	2200      	movs	r2, #0
 8004152:	2180      	movs	r1, #128	; 0x80
 8004154:	f7fd f8d0 	bl	80012f8 <HAL_GPIO_WritePin>
    HAL_HalfDuplex_EnableReceiver(&huart1);
}
 8004158:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_HalfDuplex_EnableReceiver(&huart1);
 800415c:	4802      	ldr	r0, [pc, #8]	; (8004168 <dmx512_setRx+0x1c>)
 800415e:	f7fe bdff 	b.w	8002d60 <HAL_HalfDuplex_EnableReceiver>
 8004162:	bf00      	nop
 8004164:	40010c00 	.word	0x40010c00
 8004168:	20000c10 	.word	0x20000c10

0800416c <dmx512_rec_enable.part.0>:
{
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_SET);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
}

void dmx512_rec_enable(uint8_t on)
 800416c:	b508      	push	{r3, lr}
{
	if (on)
	{
		//Determine Start Addr
		start_addr = get_addr();
 800416e:	f7ff fee3 	bl	8003f38 <get_addr>
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <dmx512_rec_enable.part.0+0x1c>)
 8004174:	6018      	str	r0, [r3, #0]

		//Set Receiver to input
		dmx512_setRx();
 8004176:	f7ff ffe9 	bl	800414c <dmx512_setRx>
		//Disable Timer
#ifdef USE_TIMER
		TIM_ITConfig(dmx512_config.tim, TIM_IT_CC1, DISABLE);
#endif
	}
}
 800417a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	HAL_UART_Receive_IT(&huart1, &buffer, 1);
 800417e:	2201      	movs	r2, #1
 8004180:	4902      	ldr	r1, [pc, #8]	; (800418c <dmx512_rec_enable.part.0+0x20>)
 8004182:	4803      	ldr	r0, [pc, #12]	; (8004190 <dmx512_rec_enable.part.0+0x24>)
 8004184:	f7fe bcdf 	b.w	8002b46 <HAL_UART_Receive_IT>
 8004188:	2000040c 	.word	0x2000040c
 800418c:	20000404 	.word	0x20000404
 8004190:	20000c10 	.word	0x20000c10

08004194 <dmx512_rec_init>:
{
 8004194:	b508      	push	{r3, lr}
 8004196:	f7ff ffe9 	bl	800416c <dmx512_rec_enable.part.0>
}
 800419a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart3, &buffer2, 1);
 800419e:	2201      	movs	r2, #1
 80041a0:	4901      	ldr	r1, [pc, #4]	; (80041a8 <dmx512_rec_init+0x14>)
 80041a2:	4802      	ldr	r0, [pc, #8]	; (80041ac <dmx512_rec_init+0x18>)
 80041a4:	f7fe bccf 	b.w	8002b46 <HAL_UART_Receive_IT>
 80041a8:	20000405 	.word	0x20000405
 80041ac:	20000b2c 	.word	0x20000b2c

080041b0 <EE_LL_Format>:
//##########################################################################################################
//##########################################################################################################


bool    EE_LL_Format(uint16_t startpage, uint16_t pages)
{
 80041b0:	b530      	push	{r4, r5, lr}
 80041b2:	4604      	mov	r4, r0
  uint32_t    error;
    HAL_FLASH_Unlock();
    FLASH_EraseInitTypeDef  flashErase;
    flashErase.NbPages=pages;
    flashErase.Banks = FLASH_BANK_1;
    flashErase.PageAddress = (ADDR_FLASH_PAGE_0|(_EEPROM_FLASH_PAGE_SIZE*startpage));
 80041b4:	02a4      	lsls	r4, r4, #10
{
 80041b6:	b087      	sub	sp, #28
    flashErase.PageAddress = (ADDR_FLASH_PAGE_0|(_EEPROM_FLASH_PAGE_SIZE*startpage));
 80041b8:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
{
 80041bc:	460d      	mov	r5, r1
    HAL_FLASH_Unlock();
 80041be:	f7fc feaf 	bl	8000f20 <HAL_FLASH_Unlock>
    flashErase.Banks = FLASH_BANK_1;
 80041c2:	2301      	movs	r3, #1
    flashErase.PageAddress = (ADDR_FLASH_PAGE_0|(_EEPROM_FLASH_PAGE_SIZE*startpage));
 80041c4:	9404      	str	r4, [sp, #16]
    flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80041c6:	2400      	movs	r4, #0
    if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 80041c8:	a901      	add	r1, sp, #4
 80041ca:	a802      	add	r0, sp, #8
    flashErase.NbPages=pages;
 80041cc:	9505      	str	r5, [sp, #20]
    flashErase.Banks = FLASH_BANK_1;
 80041ce:	9303      	str	r3, [sp, #12]
    flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80041d0:	9402      	str	r4, [sp, #8]
    if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 80041d2:	f7fc ff5f 	bl	8001094 <HAL_FLASHEx_Erase>
 80041d6:	b938      	cbnz	r0, 80041e8 <EE_LL_Format+0x38>
    {
        HAL_FLASH_Lock();
 80041d8:	f7fc feb4 	bl	8000f44 <HAL_FLASH_Lock>
        if(error != 0xFFFFFFFF)
 80041dc:	9801      	ldr	r0, [sp, #4]
 80041de:	1c43      	adds	r3, r0, #1
 80041e0:	4258      	negs	r0, r3
 80041e2:	4158      	adcs	r0, r3
        else
            return true;
    }
    HAL_FLASH_Lock();
    return false;
}
 80041e4:	b007      	add	sp, #28
 80041e6:	bd30      	pop	{r4, r5, pc}
    HAL_FLASH_Lock();
 80041e8:	f7fc feac 	bl	8000f44 <HAL_FLASH_Lock>
    return false;
 80041ec:	4620      	mov	r0, r4
 80041ee:	e7f9      	b.n	80041e4 <EE_LL_Format+0x34>

080041f0 <EE_Format>:
//##########################################################################################################
//##########################################################################################################

bool	EE_Format()
{
  return EE_LL_Format(_EEPROM_USE_FLASH_PAGE,1);
 80041f0:	2101      	movs	r1, #1
 80041f2:	207f      	movs	r0, #127	; 0x7f
 80041f4:	f7ff bfdc 	b.w	80041b0 <EE_LL_Format>

080041f8 <EE_Reads>:
}

//##########################################################################################################
bool EE_Reads(uint16_t VirtualAddress,uint16_t HowMuchToRead,uint32_t* Data)
{
	if((VirtualAddress+HowMuchToRead) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 80041f8:	4401      	add	r1, r0
 80041fa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80041fe:	dd0b      	ble.n	8004218 <EE_Reads+0x20>
		return false;
 8004200:	2000      	movs	r0, #0
	{
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
		Data++;
	}
	return true;
}
 8004202:	4770      	bx	lr
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8004204:	0083      	lsls	r3, r0, #2
 8004206:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800420a:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 800420e:	681b      	ldr	r3, [r3, #0]
	for(uint16_t	i=VirtualAddress ; i<HowMuchToRead+VirtualAddress ; i++)
 8004210:	3001      	adds	r0, #1
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8004212:	f842 3b04 	str.w	r3, [r2], #4
	for(uint16_t	i=VirtualAddress ; i<HowMuchToRead+VirtualAddress ; i++)
 8004216:	b280      	uxth	r0, r0
 8004218:	4281      	cmp	r1, r0
 800421a:	dcf3      	bgt.n	8004204 <EE_Reads+0xc>
	return true;
 800421c:	2001      	movs	r0, #1
 800421e:	4770      	bx	lr

08004220 <EE_Writes>:

//##########################################################################################################
bool 	EE_Writes(uint16_t VirtualAddress,uint16_t HowMuchToWrite,uint32_t* Data)
{
	if((VirtualAddress+HowMuchToWrite) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 8004220:	4401      	add	r1, r0
 8004222:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8004226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004228:	4616      	mov	r6, r2
	if((VirtualAddress+HowMuchToWrite) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 800422a:	dd02      	ble.n	8004232 <EE_Writes+0x12>
	for(uint16_t	i=0 ; i<(_EEPROM_FLASH_PAGE_SIZE/4); i++)
	{
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(i*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)*Data)!=HAL_OK)
		{
			HAL_FLASH_Lock();
			return false;
 800422c:	2400      	movs	r4, #0
		}
		Data++;
	}
	HAL_FLASH_Lock();
	return true;
}
 800422e:	4620      	mov	r0, r4
 8004230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(EE_Format()==false)
 8004232:	f7ff ffdd 	bl	80041f0 <EE_Format>
 8004236:	4604      	mov	r4, r0
 8004238:	2800      	cmp	r0, #0
 800423a:	d0f7      	beq.n	800422c <EE_Writes+0xc>
	HAL_FLASH_Unlock();
 800423c:	f7fc fe70 	bl	8000f20 <HAL_FLASH_Unlock>
 8004240:	4d09      	ldr	r5, [pc, #36]	; (8004268 <EE_Writes+0x48>)
	for(uint16_t	i=0 ; i<(_EEPROM_FLASH_PAGE_SIZE/4); i++)
 8004242:	4f0a      	ldr	r7, [pc, #40]	; (800426c <EE_Writes+0x4c>)
 8004244:	3e04      	subs	r6, #4
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(i*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)*Data)!=HAL_OK)
 8004246:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800424a:	2300      	movs	r3, #0
 800424c:	4629      	mov	r1, r5
 800424e:	2002      	movs	r0, #2
 8004250:	f7fc feac 	bl	8000fac <HAL_FLASH_Program>
 8004254:	b110      	cbz	r0, 800425c <EE_Writes+0x3c>
			HAL_FLASH_Lock();
 8004256:	f7fc fe75 	bl	8000f44 <HAL_FLASH_Lock>
 800425a:	e7e7      	b.n	800422c <EE_Writes+0xc>
 800425c:	3504      	adds	r5, #4
	for(uint16_t	i=0 ; i<(_EEPROM_FLASH_PAGE_SIZE/4); i++)
 800425e:	42bd      	cmp	r5, r7
 8004260:	d1f1      	bne.n	8004246 <EE_Writes+0x26>
	HAL_FLASH_Lock();
 8004262:	f7fc fe6f 	bl	8000f44 <HAL_FLASH_Lock>
	return true;
 8004266:	e7e2      	b.n	800422e <EE_Writes+0xe>
 8004268:	0801fc00 	.word	0x0801fc00
 800426c:	08020000 	.word	0x08020000

08004270 <register_fx>:
#include "shell.h"

const s_fx_param* pfx_list[MAX_FX];

uint8_t register_fx(const s_fx_param* pfx_param, uint8_t fx_num)
{
 8004270:	b510      	push	{r4, lr}
 8004272:	4a0e      	ldr	r2, [pc, #56]	; (80042ac <register_fx+0x3c>)
	uint8_t fx_cnt = 1;
	//If FX = 0 we find the first empty slot and install it there
	if (fx_num == 0)
 8004274:	b9b9      	cbnz	r1, 80042a6 <register_fx+0x36>
 8004276:	2301      	movs	r3, #1
	{
		while ((pfx_list[fx_cnt] != NULL) && (fx_cnt < MAX_FX-1))
 8004278:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800427c:	b2dc      	uxtb	r4, r3
 800427e:	b141      	cbz	r1, 8004292 <register_fx+0x22>
 8004280:	3301      	adds	r3, #1
 8004282:	2b40      	cmp	r3, #64	; 0x40
 8004284:	d1f8      	bne.n	8004278 <register_fx+0x8>
		}

		//No slots available
		if (fx_cnt == MAX_FX-1)
		{
			print("FX Space full");
 8004286:	480a      	ldr	r0, [pc, #40]	; (80042b0 <register_fx+0x40>)
 8004288:	f001 fa32 	bl	80056f0 <print>
			return 0;
 800428c:	2400      	movs	r4, #0
	}

	pfx_list[fx_num] = pfx_param;
	print("ID:%d\t FX: %s",fx_num,pfx_param->fxname);
	return fx_num;
}
 800428e:	4620      	mov	r0, r4
 8004290:	bd10      	pop	{r4, pc}
		if (fx_cnt == MAX_FX-1)
 8004292:	2c3f      	cmp	r4, #63	; 0x3f
 8004294:	d0f7      	beq.n	8004286 <register_fx+0x16>
	pfx_list[fx_num] = pfx_param;
 8004296:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
	print("ID:%d\t FX: %s",fx_num,pfx_param->fxname);
 800429a:	4621      	mov	r1, r4
 800429c:	1cc2      	adds	r2, r0, #3
 800429e:	4805      	ldr	r0, [pc, #20]	; (80042b4 <register_fx+0x44>)
 80042a0:	f001 fa26 	bl	80056f0 <print>
	return fx_num;
 80042a4:	e7f3      	b.n	800428e <register_fx+0x1e>
 80042a6:	460c      	mov	r4, r1
 80042a8:	e7f5      	b.n	8004296 <register_fx+0x26>
 80042aa:	bf00      	nop
 80042ac:	20000970 	.word	0x20000970
 80042b0:	08007a17 	.word	0x08007a17
 80042b4:	08007a25 	.word	0x08007a25

080042b8 <fx_install>:
#include "fx_pwm_running_light.h"
#include "fx_pwm_pulsing_light.h"
#include "fx_strip_running_light.h"

void fx_install(void)
{
 80042b8:	b508      	push	{r3, lr}
	//REGISTER FX HERE !!!
    fx_pwm_running_light(0);
 80042ba:	2000      	movs	r0, #0
 80042bc:	f002 fb68 	bl	8006990 <fx_pwm_running_light>
    fx_pwm_running_pulse_light(0);
 80042c0:	2000      	movs	r0, #0
 80042c2:	f002 fb6b 	bl	800699c <fx_pwm_running_pulse_light>
    fx_pwm_pulsing_light(0);
 80042c6:	2000      	movs	r0, #0
 80042c8:	f002 faf6 	bl	80068b8 <fx_pwm_pulsing_light>
    fx_pwm_pulsing_pulse_light(0);
 80042cc:	2000      	movs	r0, #0
 80042ce:	f002 faf9 	bl	80068c4 <fx_pwm_pulsing_pulse_light>
    fx_strip_running_light(0);
}
 80042d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    fx_strip_running_light(0);
 80042d6:	2000      	movs	r0, #0
 80042d8:	f002 bbfa 	b.w	8006ad0 <fx_strip_running_light>

080042dc <install_fx>:
extern const s_fx_param* pfx_list[MAX_FX];
extern uint8_t fxcnt;

void install_fx(void)
{
	fx_install();
 80042dc:	f7ff bfec 	b.w	80042b8 <fx_install>

080042e0 <start_fx>:
}


//Called to start a new effect. Return the effect that was actually enabled
uint8_t start_fx(uint8_t id)
{
 80042e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//Check if FX is installed (We assume at future calls to the routine that the pointer is valid...
	if (NULL != pfx_list[current_fx]->fx_run_pointer)
 80042e4:	4c15      	ldr	r4, [pc, #84]	; (800433c <start_fx+0x5c>)
 80042e6:	4d16      	ldr	r5, [pc, #88]	; (8004340 <start_fx+0x60>)
 80042e8:	7823      	ldrb	r3, [r4, #0]
{
 80042ea:	4680      	mov	r8, r0
	if (NULL != pfx_list[current_fx]->fx_run_pointer)
 80042ec:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80042f0:	690b      	ldr	r3, [r1, #16]
 80042f2:	b303      	cbz	r3, 8004336 <start_fx+0x56>
	{
		//Call the last FX once with the END State
		if (current_fx_state != FX_DONE)
 80042f4:	4e13      	ldr	r6, [pc, #76]	; (8004344 <start_fx+0x64>)
 80042f6:	7832      	ldrb	r2, [r6, #0]
 80042f8:	2a03      	cmp	r2, #3
 80042fa:	d005      	beq.n	8004308 <start_fx+0x28>
		{
			pfx_list[current_fx]->fx_run_pointer(FX_END,pfx_list[current_fx]->duration,0);
 80042fc:	2200      	movs	r2, #0
 80042fe:	68c9      	ldr	r1, [r1, #12]
 8004300:	2002      	movs	r0, #2
 8004302:	4798      	blx	r3
			current_fx_state = FX_DONE;
 8004304:	2303      	movs	r3, #3
 8004306:	7033      	strb	r3, [r6, #0]
		}
		//ID is valid, setup parameters
		fx_frame_count = 0;
 8004308:	2700      	movs	r7, #0
 800430a:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <start_fx+0x68>)

		//Store current_fx
		last_fx = current_fx;
 800430c:	7822      	ldrb	r2, [r4, #0]
		fx_frame_count = 0;
 800430e:	601f      	str	r7, [r3, #0]
		last_fx = current_fx;
 8004310:	4b0e      	ldr	r3, [pc, #56]	; (800434c <start_fx+0x6c>)
		current_fx = id;
 8004312:	f884 8000 	strb.w	r8, [r4]
		last_fx = current_fx;
 8004316:	701a      	strb	r2, [r3, #0]

		//Call run routine once with INIT state
		pfx_list[current_fx]->fx_run_pointer(FX_INIT,0,pfx_list[current_fx]->duration);
 8004318:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 800431c:	4639      	mov	r1, r7
 800431e:	e9d3 2803 	ldrd	r2, r8, [r3, #12]
 8004322:	4638      	mov	r0, r7
 8004324:	47c0      	blx	r8
		current_fx_state = FX_INIT;
		print("Started FX ID:%d\t FX: %s ",current_fx,pfx_list[current_fx]->fxname);
 8004326:	7821      	ldrb	r1, [r4, #0]
 8004328:	4809      	ldr	r0, [pc, #36]	; (8004350 <start_fx+0x70>)
 800432a:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
		current_fx_state = FX_INIT;
 800432e:	7037      	strb	r7, [r6, #0]
		print("Started FX ID:%d\t FX: %s ",current_fx,pfx_list[current_fx]->fxname);
 8004330:	3203      	adds	r2, #3
 8004332:	f001 f9dd 	bl	80056f0 <print>
	}
	//return new ID
	return current_fx;
}
 8004336:	7820      	ldrb	r0, [r4, #0]
 8004338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800433c:	20000411 	.word	0x20000411
 8004340:	20000970 	.word	0x20000970
 8004344:	20000412 	.word	0x20000412
 8004348:	20000414 	.word	0x20000414
 800434c:	20000418 	.word	0x20000418
 8004350:	08007a4f 	.word	0x08007a4f

08004354 <fx_done>:


void fx_done(void)
{
 8004354:	b570      	push	{r4, r5, r6, lr}
	pfx_list[current_fx]->fx_run_pointer(FX_END,pfx_list[current_fx]->duration,0);
 8004356:	4d10      	ldr	r5, [pc, #64]	; (8004398 <fx_done+0x44>)
 8004358:	4c10      	ldr	r4, [pc, #64]	; (800439c <fx_done+0x48>)
 800435a:	782b      	ldrb	r3, [r5, #0]
 800435c:	2200      	movs	r2, #0
 800435e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004362:	2002      	movs	r0, #2
 8004364:	68d9      	ldr	r1, [r3, #12]
 8004366:	691e      	ldr	r6, [r3, #16]
 8004368:	47b0      	blx	r6
	print("Completed FX ID:%d\t FX: %s ",current_fx,pfx_list[current_fx]->fxname);
 800436a:	7829      	ldrb	r1, [r5, #0]
 800436c:	480c      	ldr	r0, [pc, #48]	; (80043a0 <fx_done+0x4c>)
 800436e:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8004372:	3203      	adds	r2, #3
 8004374:	f001 f9bc 	bl	80056f0 <print>
	current_fx_state = FX_DONE;
 8004378:	2203      	movs	r2, #3
 800437a:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <fx_done+0x50>)
 800437c:	701a      	strb	r2, [r3, #0]
	if (pfx_list[current_fx]->next_fx != 0)
 800437e:	782b      	ldrb	r3, [r5, #0]
 8004380:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004384:	7898      	ldrb	r0, [r3, #2]
 8004386:	b118      	cbz	r0, 8004390 <fx_done+0x3c>
	{
		//Go back to last FX
		start_fx(last_fx);
	}
	return;
}
 8004388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		start_fx(last_fx);
 800438c:	f7ff bfa8 	b.w	80042e0 <start_fx>
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <fx_done+0x54>)
 8004392:	7818      	ldrb	r0, [r3, #0]
 8004394:	e7f8      	b.n	8004388 <fx_done+0x34>
 8004396:	bf00      	nop
 8004398:	20000411 	.word	0x20000411
 800439c:	20000970 	.word	0x20000970
 80043a0:	08007a33 	.word	0x08007a33
 80043a4:	20000412 	.word	0x20000412
 80043a8:	20000418 	.word	0x20000418

080043ac <run_fx>:

//Called every frame
void run_fx(void)
{
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//No FX Active...
	if (current_fx == 0)
 80043ae:	4e17      	ldr	r6, [pc, #92]	; (800440c <run_fx+0x60>)
 80043b0:	7833      	ldrb	r3, [r6, #0]
 80043b2:	b353      	cbz	r3, 800440a <run_fx+0x5e>
		return;

	//Check if FX Has expired
	if (pfx_list[current_fx]->mode == MODE_SINGLE_SHOT)
 80043b4:	4f16      	ldr	r7, [pc, #88]	; (8004410 <run_fx+0x64>)
 80043b6:	4c17      	ldr	r4, [pc, #92]	; (8004414 <run_fx+0x68>)
 80043b8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80043bc:	6821      	ldr	r1, [r4, #0]
 80043be:	7858      	ldrb	r0, [r3, #1]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	2801      	cmp	r0, #1
 80043c4:	d105      	bne.n	80043d2 <run_fx+0x26>
	{
		if (pfx_list[current_fx]->duration == fx_frame_count)
 80043c6:	4291      	cmp	r1, r2
 80043c8:	d10f      	bne.n	80043ea <run_fx+0x3e>
		return;
	}

	current_fx_state = FX_RUN;
	fx_frame_count++;
}
 80043ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			fx_done();
 80043ce:	f7ff bfc1 	b.w	8004354 <fx_done>
	else if (pfx_list[current_fx]->mode == MODE_LOOP)
 80043d2:	2802      	cmp	r0, #2
 80043d4:	d109      	bne.n	80043ea <run_fx+0x3e>
		if (pfx_list[current_fx]->duration == fx_frame_count)
 80043d6:	4291      	cmp	r1, r2
 80043d8:	d107      	bne.n	80043ea <run_fx+0x3e>
			fx_frame_count = 0;
 80043da:	2500      	movs	r5, #0
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	6025      	str	r5, [r4, #0]
			pfx_list[current_fx]->fx_run_pointer(FX_INIT,pfx_list[current_fx]->duration,0);
 80043e0:	462a      	mov	r2, r5
 80043e2:	4628      	mov	r0, r5
 80043e4:	4798      	blx	r3
			current_fx_state = FX_INIT;
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <run_fx+0x6c>)
 80043e8:	701d      	strb	r5, [r3, #0]
	if (FX_COMPLETED == pfx_list[current_fx]->fx_run_pointer(FX_RUN,fx_frame_count,pfx_list[current_fx]->duration))
 80043ea:	7833      	ldrb	r3, [r6, #0]
 80043ec:	6821      	ldr	r1, [r4, #0]
 80043ee:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80043f2:	2001      	movs	r0, #1
 80043f4:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 80043f8:	47a8      	blx	r5
 80043fa:	2801      	cmp	r0, #1
 80043fc:	d0e5      	beq.n	80043ca <run_fx+0x1e>
	current_fx_state = FX_RUN;
 80043fe:	2201      	movs	r2, #1
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <run_fx+0x6c>)
 8004402:	701a      	strb	r2, [r3, #0]
	fx_frame_count++;
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	4413      	add	r3, r2
 8004408:	6023      	str	r3, [r4, #0]
}
 800440a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800440c:	20000411 	.word	0x20000411
 8004410:	20000970 	.word	0x20000970
 8004414:	20000414 	.word	0x20000414
 8004418:	20000412 	.word	0x20000412

0800441c <get_mode_from_pins>:
#include <stm32f103xb.h>
#include <stm32f1xx.h>
#include <stm32f1xx_hal_gpio.h>

uint8_t get_mode_from_pins(void)
{
 800441c:	b510      	push	{r4, lr}
	uint8_t mode = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_0_GPIO_Port, MODE_0_Pin))
 800441e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004422:	4808      	ldr	r0, [pc, #32]	; (8004444 <get_mode_from_pins+0x28>)
 8004424:	f7fc ff62 	bl	80012ec <HAL_GPIO_ReadPin>
	uint8_t mode = 0;
 8004428:	fab0 f480 	clz	r4, r0
		mode = mode | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_1_GPIO_Port, MODE_1_Pin))
 800442c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004430:	4804      	ldr	r0, [pc, #16]	; (8004444 <get_mode_from_pins+0x28>)
	uint8_t mode = 0;
 8004432:	0964      	lsrs	r4, r4, #5
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_1_GPIO_Port, MODE_1_Pin))
 8004434:	f7fc ff5a 	bl	80012ec <HAL_GPIO_ReadPin>
 8004438:	b908      	cbnz	r0, 800443e <get_mode_from_pins+0x22>
		mode = mode | 0x02;
 800443a:	f044 0402 	orr.w	r4, r4, #2
	return mode;
}
 800443e:	4620      	mov	r0, r4
 8004440:	bd10      	pop	{r4, pc}
 8004442:	bf00      	nop
 8004444:	40011000 	.word	0x40011000

08004448 <get_addr_from_pins>:

uint8_t get_addr_from_pins(void)
{
 8004448:	b510      	push	{r4, lr}
	uint8_t addr = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_0_GPIO_Port, ADDR_0_Pin))
 800444a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800444e:	481f      	ldr	r0, [pc, #124]	; (80044cc <get_addr_from_pins+0x84>)
 8004450:	f7fc ff4c 	bl	80012ec <HAL_GPIO_ReadPin>
	uint8_t addr = 0;
 8004454:	fab0 f480 	clz	r4, r0
		addr = addr | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_1_GPIO_Port, ADDR_1_Pin))
 8004458:	2108      	movs	r1, #8
 800445a:	481d      	ldr	r0, [pc, #116]	; (80044d0 <get_addr_from_pins+0x88>)
	uint8_t addr = 0;
 800445c:	0964      	lsrs	r4, r4, #5
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_1_GPIO_Port, ADDR_1_Pin))
 800445e:	f7fc ff45 	bl	80012ec <HAL_GPIO_ReadPin>
 8004462:	b908      	cbnz	r0, 8004468 <get_addr_from_pins+0x20>
		addr = addr | 0x02;
 8004464:	f044 0402 	orr.w	r4, r4, #2
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_2_GPIO_Port, ADDR_2_Pin))
 8004468:	2110      	movs	r1, #16
 800446a:	4819      	ldr	r0, [pc, #100]	; (80044d0 <get_addr_from_pins+0x88>)
 800446c:	f7fc ff3e 	bl	80012ec <HAL_GPIO_ReadPin>
 8004470:	b908      	cbnz	r0, 8004476 <get_addr_from_pins+0x2e>
		addr = addr | 0x04;
 8004472:	f044 0404 	orr.w	r4, r4, #4
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_3_GPIO_Port, ADDR_3_Pin))
 8004476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800447a:	4815      	ldr	r0, [pc, #84]	; (80044d0 <get_addr_from_pins+0x88>)
 800447c:	f7fc ff36 	bl	80012ec <HAL_GPIO_ReadPin>
 8004480:	b908      	cbnz	r0, 8004486 <get_addr_from_pins+0x3e>
		addr = addr | 0x08;
 8004482:	f044 0408 	orr.w	r4, r4, #8
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_4_GPIO_Port, ADDR_4_Pin))
 8004486:	f44f 7100 	mov.w	r1, #512	; 0x200
 800448a:	4811      	ldr	r0, [pc, #68]	; (80044d0 <get_addr_from_pins+0x88>)
 800448c:	f7fc ff2e 	bl	80012ec <HAL_GPIO_ReadPin>
 8004490:	b908      	cbnz	r0, 8004496 <get_addr_from_pins+0x4e>
		addr = addr | 0x10;
 8004492:	f044 0410 	orr.w	r4, r4, #16
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_5_GPIO_Port, ADDR_5_Pin))
 8004496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800449a:	480d      	ldr	r0, [pc, #52]	; (80044d0 <get_addr_from_pins+0x88>)
 800449c:	f7fc ff26 	bl	80012ec <HAL_GPIO_ReadPin>
 80044a0:	b908      	cbnz	r0, 80044a6 <get_addr_from_pins+0x5e>
		addr = addr | 0x20;
 80044a2:	f044 0420 	orr.w	r4, r4, #32
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_6_GPIO_Port, ADDR_6_Pin))
 80044a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044aa:	4809      	ldr	r0, [pc, #36]	; (80044d0 <get_addr_from_pins+0x88>)
 80044ac:	f7fc ff1e 	bl	80012ec <HAL_GPIO_ReadPin>
 80044b0:	b908      	cbnz	r0, 80044b6 <get_addr_from_pins+0x6e>
		addr = addr | 0x40;
 80044b2:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_7_GPIO_Port, ADDR_7_Pin))
 80044b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044ba:	4805      	ldr	r0, [pc, #20]	; (80044d0 <get_addr_from_pins+0x88>)
 80044bc:	f7fc ff16 	bl	80012ec <HAL_GPIO_ReadPin>
 80044c0:	b908      	cbnz	r0, 80044c6 <get_addr_from_pins+0x7e>
		addr = addr | 0x80;
 80044c2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	return addr;
}
 80044c6:	4620      	mov	r0, r4
 80044c8:	bd10      	pop	{r4, pc}
 80044ca:	bf00      	nop
 80044cc:	40010800 	.word	0x40010800
 80044d0:	40010c00 	.word	0x40010c00

080044d4 <check_button>:

uint8_t check_button(void)
{
 80044d4:	b508      	push	{r3, lr}
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin))
 80044d6:	2120      	movs	r1, #32
 80044d8:	4803      	ldr	r0, [pc, #12]	; (80044e8 <check_button+0x14>)
 80044da:	f7fc ff07 	bl	80012ec <HAL_GPIO_ReadPin>
		return 1;

	return 0;
}
 80044de:	fab0 f080 	clz	r0, r0
 80044e2:	0940      	lsrs	r0, r0, #5
 80044e4:	bd08      	pop	{r3, pc}
 80044e6:	bf00      	nop
 80044e8:	40010800 	.word	0x40010800

080044ec <scale_value>:
	reg_shadow[MAX_BRIGHTNESS] = 255;
	update_pwm_lights(1);
}

uint16_t scale_value( uint8_t val,int16_t offset, int16_t gain, int16_t gamma)
{
 80044ec:	b570      	push	{r4, r5, r6, lr}
	int32_t res = 0;
	//1) Scale input between 0 and max
	res = ((uint32_t)val * (uint32_t) MAX_PWM)/(uint32_t)255;
 80044ee:	f240 4434 	movw	r4, #1076	; 0x434
 80044f2:	23ff      	movs	r3, #255	; 0xff
 80044f4:	4360      	muls	r0, r4
 80044f6:	fbb0 f3f3 	udiv	r3, r0, r3
{
 80044fa:	4616      	mov	r6, r2
	res = (res * (uint32_t)brightness_scale) / (uint32_t) MAX_PWM;
 80044fc:	4a0e      	ldr	r2, [pc, #56]	; (8004538 <scale_value+0x4c>)
 80044fe:	8810      	ldrh	r0, [r2, #0]
 8004500:	4358      	muls	r0, r3
 8004502:	fbb0 f0f4 	udiv	r0, r0, r4

	//Subtract offset
	res = res - offset;

	//Apply Gain
	res = (int16_t) ((float)res * ((float)gain)/100);
 8004506:	1a40      	subs	r0, r0, r1
 8004508:	f7fb fee2 	bl	80002d0 <__aeabi_i2f>
 800450c:	4605      	mov	r5, r0
 800450e:	4630      	mov	r0, r6
 8004510:	f7fb fede 	bl	80002d0 <__aeabi_i2f>
 8004514:	4601      	mov	r1, r0
 8004516:	4628      	mov	r0, r5
 8004518:	f7fb ff2e 	bl	8000378 <__aeabi_fmul>
 800451c:	4907      	ldr	r1, [pc, #28]	; (800453c <scale_value+0x50>)
 800451e:	f7fb ffdf 	bl	80004e0 <__aeabi_fdiv>
 8004522:	f7fc f879 	bl	8000618 <__aeabi_f2iz>
 8004526:	b200      	sxth	r0, r0
 8004528:	42a0      	cmp	r0, r4
 800452a:	bfa8      	it	ge
 800452c:	4620      	movge	r0, r4
	//Limit output to valid range
	if (res<0)
		res = 0;
	if (res > MAX_PWM)
		res = MAX_PWM;
	return res;
 800452e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8004532:	b280      	uxth	r0, r0
 8004534:	bd70      	pop	{r4, r5, r6, pc}
 8004536:	bf00      	nop
 8004538:	2000041a 	.word	0x2000041a
 800453c:	42c80000 	.word	0x42c80000

08004540 <update_pwm_lights>:

//Check what has changed and update Lights
//We only update parameters that have changed otherwise we might have waveform-artifacts...
void update_pwm_lights(uint8_t force)
{
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Check if global brightness has changed and scale value
	if ((reg_shadow[MAX_BRIGHTNESS])!= get_reg(MAX_BRIGHTNESS) || force)
 8004542:	4cb6      	ldr	r4, [pc, #728]	; (800481c <update_pwm_lights+0x2dc>)
{
 8004544:	4605      	mov	r5, r0
	if ((reg_shadow[MAX_BRIGHTNESS])!= get_reg(MAX_BRIGHTNESS) || force)
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	2000      	movs	r0, #0
 800454a:	781e      	ldrb	r6, [r3, #0]
 800454c:	f7ff fd3a 	bl	8003fc4 <get_reg>
 8004550:	4286      	cmp	r6, r0
 8004552:	d100      	bne.n	8004556 <update_pwm_lights+0x16>
 8004554:	b185      	cbz	r5, 8004578 <update_pwm_lights+0x38>
	{
		brightness_scale = ((uint32_t)get_reg(MAX_BRIGHTNESS) * (uint32_t) MAX_PWM)/(uint32_t)255;
 8004556:	2000      	movs	r0, #0
 8004558:	f7ff fd34 	bl	8003fc4 <get_reg>
 800455c:	f240 4334 	movw	r3, #1076	; 0x434
 8004560:	4358      	muls	r0, r3
 8004562:	23ff      	movs	r3, #255	; 0xff
 8004564:	fbb0 f0f3 	udiv	r0, r0, r3
 8004568:	4bad      	ldr	r3, [pc, #692]	; (8004820 <update_pwm_lights+0x2e0>)
		//After a brightness update we need to update all the over PWM outputs
		force = 1;
		reg_shadow[MAX_BRIGHTNESS] = get_reg(MAX_BRIGHTNESS);
 800456a:	6825      	ldr	r5, [r4, #0]
		brightness_scale = ((uint32_t)get_reg(MAX_BRIGHTNESS) * (uint32_t) MAX_PWM)/(uint32_t)255;
 800456c:	8018      	strh	r0, [r3, #0]
		reg_shadow[MAX_BRIGHTNESS] = get_reg(MAX_BRIGHTNESS);
 800456e:	2000      	movs	r0, #0
 8004570:	f7ff fd28 	bl	8003fc4 <get_reg>
 8004574:	7028      	strb	r0, [r5, #0]
		force = 1;
 8004576:	2501      	movs	r5, #1
	}

	//Update PWM Values if needed
	if ((reg_shadow[CH1_RED])!= get_reg(CH1_RED) || force)
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	2001      	movs	r0, #1
 800457c:	785e      	ldrb	r6, [r3, #1]
 800457e:	f7ff fd21 	bl	8003fc4 <get_reg>
 8004582:	4286      	cmp	r6, r0
 8004584:	d100      	bne.n	8004588 <update_pwm_lights+0x48>
 8004586:	b1ad      	cbz	r5, 80045b4 <update_pwm_lights+0x74>
	{
		configPWM(PWM_CH1,CH_RED,scale_value(get_reg(CH1_RED),settings.offset_red,settings.gain_red,settings.gamma_red));
 8004588:	2001      	movs	r0, #1
 800458a:	f7ff fd1b 	bl	8003fc4 <get_reg>
 800458e:	49a5      	ldr	r1, [pc, #660]	; (8004824 <update_pwm_lights+0x2e4>)
 8004590:	f9b1 303e 	ldrsh.w	r3, [r1, #62]	; 0x3e
 8004594:	f9b1 203c 	ldrsh.w	r2, [r1, #60]	; 0x3c
 8004598:	f9b1 103a 	ldrsh.w	r1, [r1, #58]	; 0x3a
 800459c:	f7ff ffa6 	bl	80044ec <scale_value>
 80045a0:	2100      	movs	r1, #0
 80045a2:	4602      	mov	r2, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	f000 fcbb 	bl	8004f20 <configPWM>
		reg_shadow[CH1_RED] = get_reg(CH1_RED);
 80045aa:	2001      	movs	r0, #1
 80045ac:	6826      	ldr	r6, [r4, #0]
 80045ae:	f7ff fd09 	bl	8003fc4 <get_reg>
 80045b2:	7070      	strb	r0, [r6, #1]
	}

	if ((reg_shadow[CH1_GREEN])!= get_reg(CH1_GREEN) || force)
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	2002      	movs	r0, #2
 80045b8:	789e      	ldrb	r6, [r3, #2]
 80045ba:	f7ff fd03 	bl	8003fc4 <get_reg>
 80045be:	4286      	cmp	r6, r0
 80045c0:	d100      	bne.n	80045c4 <update_pwm_lights+0x84>
 80045c2:	b1ad      	cbz	r5, 80045f0 <update_pwm_lights+0xb0>
	{
		configPWM(PWM_CH1,CH_GREEN,scale_value(get_reg(CH1_GREEN),settings.offset_green,settings.gain_green,settings.gamma_green));
 80045c4:	2002      	movs	r0, #2
 80045c6:	f7ff fcfd 	bl	8003fc4 <get_reg>
 80045ca:	4996      	ldr	r1, [pc, #600]	; (8004824 <update_pwm_lights+0x2e4>)
 80045cc:	f9b1 3044 	ldrsh.w	r3, [r1, #68]	; 0x44
 80045d0:	f9b1 2042 	ldrsh.w	r2, [r1, #66]	; 0x42
 80045d4:	f9b1 1040 	ldrsh.w	r1, [r1, #64]	; 0x40
 80045d8:	f7ff ff88 	bl	80044ec <scale_value>
 80045dc:	2101      	movs	r1, #1
 80045de:	4602      	mov	r2, r0
 80045e0:	2000      	movs	r0, #0
 80045e2:	f000 fc9d 	bl	8004f20 <configPWM>
		reg_shadow[CH1_GREEN] = get_reg(CH1_GREEN);
 80045e6:	2002      	movs	r0, #2
 80045e8:	6826      	ldr	r6, [r4, #0]
 80045ea:	f7ff fceb 	bl	8003fc4 <get_reg>
 80045ee:	70b0      	strb	r0, [r6, #2]
	}

	if ((reg_shadow[CH1_BLUE])!= get_reg(CH1_BLUE) || force)
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	2003      	movs	r0, #3
 80045f4:	78de      	ldrb	r6, [r3, #3]
 80045f6:	f7ff fce5 	bl	8003fc4 <get_reg>
 80045fa:	4286      	cmp	r6, r0
 80045fc:	d100      	bne.n	8004600 <update_pwm_lights+0xc0>
 80045fe:	b1ad      	cbz	r5, 800462c <update_pwm_lights+0xec>
	{
		configPWM(PWM_CH1,CH_BLUE,scale_value(get_reg(CH1_BLUE),settings.offset_blue,settings.gain_blue,settings.gamma_blue));
 8004600:	2003      	movs	r0, #3
 8004602:	f7ff fcdf 	bl	8003fc4 <get_reg>
 8004606:	4987      	ldr	r1, [pc, #540]	; (8004824 <update_pwm_lights+0x2e4>)
 8004608:	f9b1 304a 	ldrsh.w	r3, [r1, #74]	; 0x4a
 800460c:	f9b1 2048 	ldrsh.w	r2, [r1, #72]	; 0x48
 8004610:	f9b1 1046 	ldrsh.w	r1, [r1, #70]	; 0x46
 8004614:	f7ff ff6a 	bl	80044ec <scale_value>
 8004618:	2102      	movs	r1, #2
 800461a:	4602      	mov	r2, r0
 800461c:	2000      	movs	r0, #0
 800461e:	f000 fc7f 	bl	8004f20 <configPWM>
		reg_shadow[CH1_BLUE] = get_reg(CH1_BLUE);
 8004622:	2003      	movs	r0, #3
 8004624:	6826      	ldr	r6, [r4, #0]
 8004626:	f7ff fccd 	bl	8003fc4 <get_reg>
 800462a:	70f0      	strb	r0, [r6, #3]
	}

	if ((reg_shadow[CH2_RED])!= get_reg(CH2_RED) || force)
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	2004      	movs	r0, #4
 8004630:	791e      	ldrb	r6, [r3, #4]
 8004632:	f7ff fcc7 	bl	8003fc4 <get_reg>
 8004636:	4286      	cmp	r6, r0
 8004638:	d100      	bne.n	800463c <update_pwm_lights+0xfc>
 800463a:	b1ad      	cbz	r5, 8004668 <update_pwm_lights+0x128>
	{
		configPWM(PWM_CH2,CH_RED,scale_value(get_reg(CH2_RED),settings.offset_red,settings.gain_red,settings.gamma_red));
 800463c:	2004      	movs	r0, #4
 800463e:	f7ff fcc1 	bl	8003fc4 <get_reg>
 8004642:	4978      	ldr	r1, [pc, #480]	; (8004824 <update_pwm_lights+0x2e4>)
 8004644:	f9b1 303e 	ldrsh.w	r3, [r1, #62]	; 0x3e
 8004648:	f9b1 203c 	ldrsh.w	r2, [r1, #60]	; 0x3c
 800464c:	f9b1 103a 	ldrsh.w	r1, [r1, #58]	; 0x3a
 8004650:	f7ff ff4c 	bl	80044ec <scale_value>
 8004654:	2100      	movs	r1, #0
 8004656:	4602      	mov	r2, r0
 8004658:	2001      	movs	r0, #1
 800465a:	f000 fc61 	bl	8004f20 <configPWM>
		reg_shadow[CH2_RED] = get_reg(CH2_RED);
 800465e:	2004      	movs	r0, #4
 8004660:	6826      	ldr	r6, [r4, #0]
 8004662:	f7ff fcaf 	bl	8003fc4 <get_reg>
 8004666:	7130      	strb	r0, [r6, #4]
	}

	if ((reg_shadow[CH2_GREEN])!= get_reg(CH2_GREEN) || force)
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	2005      	movs	r0, #5
 800466c:	795e      	ldrb	r6, [r3, #5]
 800466e:	f7ff fca9 	bl	8003fc4 <get_reg>
 8004672:	4286      	cmp	r6, r0
 8004674:	d100      	bne.n	8004678 <update_pwm_lights+0x138>
 8004676:	b1ad      	cbz	r5, 80046a4 <update_pwm_lights+0x164>
	{
		configPWM(PWM_CH2,CH_GREEN,scale_value(get_reg(CH2_GREEN),settings.offset_green,settings.gain_green,settings.gamma_green));
 8004678:	2005      	movs	r0, #5
 800467a:	f7ff fca3 	bl	8003fc4 <get_reg>
 800467e:	4969      	ldr	r1, [pc, #420]	; (8004824 <update_pwm_lights+0x2e4>)
 8004680:	f9b1 3044 	ldrsh.w	r3, [r1, #68]	; 0x44
 8004684:	f9b1 2042 	ldrsh.w	r2, [r1, #66]	; 0x42
 8004688:	f9b1 1040 	ldrsh.w	r1, [r1, #64]	; 0x40
 800468c:	f7ff ff2e 	bl	80044ec <scale_value>
 8004690:	2101      	movs	r1, #1
 8004692:	4602      	mov	r2, r0
 8004694:	4608      	mov	r0, r1
 8004696:	f000 fc43 	bl	8004f20 <configPWM>
		reg_shadow[CH2_GREEN] = get_reg(CH2_GREEN);
 800469a:	2005      	movs	r0, #5
 800469c:	6826      	ldr	r6, [r4, #0]
 800469e:	f7ff fc91 	bl	8003fc4 <get_reg>
 80046a2:	7170      	strb	r0, [r6, #5]
	}

	if ((reg_shadow[CH2_BLUE])!= get_reg(CH2_BLUE) || force)
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	2006      	movs	r0, #6
 80046a8:	799e      	ldrb	r6, [r3, #6]
 80046aa:	f7ff fc8b 	bl	8003fc4 <get_reg>
 80046ae:	4286      	cmp	r6, r0
 80046b0:	d100      	bne.n	80046b4 <update_pwm_lights+0x174>
 80046b2:	b1ad      	cbz	r5, 80046e0 <update_pwm_lights+0x1a0>
	{
		configPWM(PWM_CH2,CH_BLUE,scale_value(get_reg(CH2_BLUE),settings.offset_blue,settings.gain_blue,settings.gamma_blue));
 80046b4:	2006      	movs	r0, #6
 80046b6:	f7ff fc85 	bl	8003fc4 <get_reg>
 80046ba:	495a      	ldr	r1, [pc, #360]	; (8004824 <update_pwm_lights+0x2e4>)
 80046bc:	f9b1 304a 	ldrsh.w	r3, [r1, #74]	; 0x4a
 80046c0:	f9b1 2048 	ldrsh.w	r2, [r1, #72]	; 0x48
 80046c4:	f9b1 1046 	ldrsh.w	r1, [r1, #70]	; 0x46
 80046c8:	f7ff ff10 	bl	80044ec <scale_value>
 80046cc:	2102      	movs	r1, #2
 80046ce:	4602      	mov	r2, r0
 80046d0:	2001      	movs	r0, #1
 80046d2:	f000 fc25 	bl	8004f20 <configPWM>
		reg_shadow[CH2_BLUE] = get_reg(CH2_BLUE);
 80046d6:	2006      	movs	r0, #6
 80046d8:	6826      	ldr	r6, [r4, #0]
 80046da:	f7ff fc73 	bl	8003fc4 <get_reg>
 80046de:	71b0      	strb	r0, [r6, #6]
	}

	if ((reg_shadow[CH3_RED])!= get_reg(CH3_RED) || force)
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	2007      	movs	r0, #7
 80046e4:	79de      	ldrb	r6, [r3, #7]
 80046e6:	f7ff fc6d 	bl	8003fc4 <get_reg>
 80046ea:	4286      	cmp	r6, r0
 80046ec:	d100      	bne.n	80046f0 <update_pwm_lights+0x1b0>
 80046ee:	b1ad      	cbz	r5, 800471c <update_pwm_lights+0x1dc>
	{
		configPWM(PWM_CH3,CH_RED,scale_value(get_reg(CH3_RED),settings.offset_red,settings.gain_red,settings.gamma_red));
 80046f0:	2007      	movs	r0, #7
 80046f2:	f7ff fc67 	bl	8003fc4 <get_reg>
 80046f6:	494b      	ldr	r1, [pc, #300]	; (8004824 <update_pwm_lights+0x2e4>)
 80046f8:	f9b1 303e 	ldrsh.w	r3, [r1, #62]	; 0x3e
 80046fc:	f9b1 203c 	ldrsh.w	r2, [r1, #60]	; 0x3c
 8004700:	f9b1 103a 	ldrsh.w	r1, [r1, #58]	; 0x3a
 8004704:	f7ff fef2 	bl	80044ec <scale_value>
 8004708:	2100      	movs	r1, #0
 800470a:	4602      	mov	r2, r0
 800470c:	2002      	movs	r0, #2
 800470e:	f000 fc07 	bl	8004f20 <configPWM>
		reg_shadow[CH3_RED] = get_reg(CH3_RED);
 8004712:	2007      	movs	r0, #7
 8004714:	6826      	ldr	r6, [r4, #0]
 8004716:	f7ff fc55 	bl	8003fc4 <get_reg>
 800471a:	71f0      	strb	r0, [r6, #7]
	}

	if ((reg_shadow[CH3_GREEN])!= get_reg(CH3_GREEN) || force)
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	2008      	movs	r0, #8
 8004720:	7a1e      	ldrb	r6, [r3, #8]
 8004722:	f7ff fc4f 	bl	8003fc4 <get_reg>
 8004726:	4286      	cmp	r6, r0
 8004728:	d100      	bne.n	800472c <update_pwm_lights+0x1ec>
 800472a:	b1ad      	cbz	r5, 8004758 <update_pwm_lights+0x218>
	{
		configPWM(PWM_CH3,CH_GREEN,scale_value(get_reg(CH3_GREEN),settings.offset_green,settings.gain_green,settings.gamma_green));
 800472c:	2008      	movs	r0, #8
 800472e:	f7ff fc49 	bl	8003fc4 <get_reg>
 8004732:	493c      	ldr	r1, [pc, #240]	; (8004824 <update_pwm_lights+0x2e4>)
 8004734:	f9b1 3044 	ldrsh.w	r3, [r1, #68]	; 0x44
 8004738:	f9b1 2042 	ldrsh.w	r2, [r1, #66]	; 0x42
 800473c:	f9b1 1040 	ldrsh.w	r1, [r1, #64]	; 0x40
 8004740:	f7ff fed4 	bl	80044ec <scale_value>
 8004744:	2101      	movs	r1, #1
 8004746:	4602      	mov	r2, r0
 8004748:	2002      	movs	r0, #2
 800474a:	f000 fbe9 	bl	8004f20 <configPWM>
		reg_shadow[CH3_GREEN] = get_reg(CH3_GREEN);
 800474e:	2008      	movs	r0, #8
 8004750:	6826      	ldr	r6, [r4, #0]
 8004752:	f7ff fc37 	bl	8003fc4 <get_reg>
 8004756:	7230      	strb	r0, [r6, #8]
	}

	if ((reg_shadow[CH3_BLUE])!= get_reg(CH3_BLUE) || force)
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	2009      	movs	r0, #9
 800475c:	7a5e      	ldrb	r6, [r3, #9]
 800475e:	f7ff fc31 	bl	8003fc4 <get_reg>
 8004762:	4286      	cmp	r6, r0
 8004764:	d100      	bne.n	8004768 <update_pwm_lights+0x228>
 8004766:	b1ad      	cbz	r5, 8004794 <update_pwm_lights+0x254>
	{
		configPWM(PWM_CH3,CH_BLUE,scale_value(get_reg(CH3_BLUE),settings.offset_blue,settings.gain_blue,settings.gamma_blue));
 8004768:	2009      	movs	r0, #9
 800476a:	f7ff fc2b 	bl	8003fc4 <get_reg>
 800476e:	492d      	ldr	r1, [pc, #180]	; (8004824 <update_pwm_lights+0x2e4>)
 8004770:	f9b1 304a 	ldrsh.w	r3, [r1, #74]	; 0x4a
 8004774:	f9b1 2048 	ldrsh.w	r2, [r1, #72]	; 0x48
 8004778:	f9b1 1046 	ldrsh.w	r1, [r1, #70]	; 0x46
 800477c:	f7ff feb6 	bl	80044ec <scale_value>
 8004780:	2102      	movs	r1, #2
 8004782:	4602      	mov	r2, r0
 8004784:	4608      	mov	r0, r1
 8004786:	f000 fbcb 	bl	8004f20 <configPWM>
		reg_shadow[CH3_BLUE] = get_reg(CH3_BLUE);
 800478a:	2009      	movs	r0, #9
 800478c:	6826      	ldr	r6, [r4, #0]
 800478e:	f7ff fc19 	bl	8003fc4 <get_reg>
 8004792:	7270      	strb	r0, [r6, #9]
	}

	if ((reg_shadow[CH3_WHITE])!= get_reg(CH3_WHITE) || force)
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	200a      	movs	r0, #10
 8004798:	7a9e      	ldrb	r6, [r3, #10]
 800479a:	f7ff fc13 	bl	8003fc4 <get_reg>
 800479e:	4286      	cmp	r6, r0
 80047a0:	d100      	bne.n	80047a4 <update_pwm_lights+0x264>
 80047a2:	b18d      	cbz	r5, 80047c8 <update_pwm_lights+0x288>
	{
		configPWM(PWM_CH3,CH_WHITE,scale_value(get_reg(CH3_WHITE),0,100,220));  //TBD, no settings?
 80047a4:	200a      	movs	r0, #10
 80047a6:	f7ff fc0d 	bl	8003fc4 <get_reg>
 80047aa:	23dc      	movs	r3, #220	; 0xdc
 80047ac:	2264      	movs	r2, #100	; 0x64
 80047ae:	2100      	movs	r1, #0
 80047b0:	f7ff fe9c 	bl	80044ec <scale_value>
 80047b4:	2103      	movs	r1, #3
 80047b6:	4602      	mov	r2, r0
 80047b8:	2002      	movs	r0, #2
 80047ba:	f000 fbb1 	bl	8004f20 <configPWM>
		reg_shadow[CH3_WHITE] = get_reg(CH3_WHITE);
 80047be:	200a      	movs	r0, #10
 80047c0:	6826      	ldr	r6, [r4, #0]
 80047c2:	f7ff fbff 	bl	8003fc4 <get_reg>
 80047c6:	72b0      	strb	r0, [r6, #10]
	}
	//Deal with LED Strip Registers/Effects
	if (DMX_MODE2 == get_mode())
 80047c8:	f7ff fbbc 	bl	8003f44 <get_mode>
 80047cc:	2801      	cmp	r0, #1
 80047ce:	d124      	bne.n	800481a <update_pwm_lights+0x2da>
	{
		//Activate FX if valid FX is selected or restore settings...
		if ((reg_shadow[FX_SELECT])!= (get_reg(FX_SELECT)/settings.fx_multiplier) || force)
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	200b      	movs	r0, #11
 80047d4:	7adf      	ldrb	r7, [r3, #11]
 80047d6:	f7ff fbf5 	bl	8003fc4 <get_reg>
 80047da:	4e12      	ldr	r6, [pc, #72]	; (8004824 <update_pwm_lights+0x2e4>)
 80047dc:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
 80047e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80047e4:	b2c0      	uxtb	r0, r0
 80047e6:	4287      	cmp	r7, r0
 80047e8:	d100      	bne.n	80047ec <update_pwm_lights+0x2ac>
 80047ea:	b1b5      	cbz	r5, 800481a <update_pwm_lights+0x2da>
		{
			set_reg(FX_SELECT,start_fx(get_reg(FX_SELECT)/settings.fx_multiplier));
 80047ec:	200b      	movs	r0, #11
 80047ee:	f7ff fbe9 	bl	8003fc4 <get_reg>
 80047f2:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
 80047f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80047fa:	b2c0      	uxtb	r0, r0
 80047fc:	f7ff fd70 	bl	80042e0 <start_fx>
 8004800:	4601      	mov	r1, r0
 8004802:	200b      	movs	r0, #11
 8004804:	f7ff fbd0 	bl	8003fa8 <set_reg>
			reg_shadow[FX_SELECT] = get_reg(FX_SELECT)/settings.fx_multiplier;
 8004808:	200b      	movs	r0, #11
 800480a:	f7ff fbdb 	bl	8003fc4 <get_reg>
 800480e:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
 8004812:	6822      	ldr	r2, [r4, #0]
 8004814:	fbb0 f0f3 	udiv	r0, r0, r3
 8004818:	72d0      	strb	r0, [r2, #11]
		}
	}
}
 800481a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800481c:	2000041c 	.word	0x2000041c
 8004820:	2000041a 	.word	0x2000041a
 8004824:	20000a70 	.word	0x20000a70

08004828 <init_update_lights>:
{
 8004828:	b510      	push	{r4, lr}
	if (reg_shadow != NULL)
 800482a:	4c09      	ldr	r4, [pc, #36]	; (8004850 <init_update_lights+0x28>)
 800482c:	6820      	ldr	r0, [r4, #0]
 800482e:	b108      	cbz	r0, 8004834 <init_update_lights+0xc>
		free(reg_shadow);
 8004830:	f002 fac6 	bl	8006dc0 <free>
	reg_shadow = calloc(get_reg_length()+1, sizeof(uint8_t));
 8004834:	f7ff fb8c 	bl	8003f50 <get_reg_length>
 8004838:	2101      	movs	r1, #1
 800483a:	4408      	add	r0, r1
 800483c:	f002 fa86 	bl	8006d4c <calloc>
	reg_shadow[MAX_BRIGHTNESS] = 255;
 8004840:	23ff      	movs	r3, #255	; 0xff
 8004842:	7003      	strb	r3, [r0, #0]
	reg_shadow = calloc(get_reg_length()+1, sizeof(uint8_t));
 8004844:	6020      	str	r0, [r4, #0]
	update_pwm_lights(1);
 8004846:	2001      	movs	r0, #1
}
 8004848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_pwm_lights(1);
 800484c:	f7ff be78 	b.w	8004540 <update_pwm_lights>
 8004850:	2000041c 	.word	0x2000041c

08004854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004854:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004856:	2410      	movs	r4, #16
{
 8004858:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800485a:	4622      	mov	r2, r4
 800485c:	2100      	movs	r1, #0
 800485e:	a80c      	add	r0, sp, #48	; 0x30
 8004860:	f002 fac1 	bl	8006de6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004864:	2214      	movs	r2, #20
 8004866:	2100      	movs	r1, #0
 8004868:	eb0d 0002 	add.w	r0, sp, r2
 800486c:	f002 fabb 	bl	8006de6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004870:	4622      	mov	r2, r4
 8004872:	2100      	movs	r1, #0
 8004874:	a801      	add	r0, sp, #4
 8004876:	f002 fab6 	bl	8006de6 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800487a:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800487c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004880:	2209      	movs	r2, #9
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004882:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004886:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800488a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800488c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004890:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004892:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004894:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004896:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004898:	f7fd f8fa 	bl	8001a90 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800489c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800489e:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048a0:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80048a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80048a8:	4629      	mov	r1, r5
 80048aa:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80048ac:	e9cd 4307 	strd	r4, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80048b0:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80048b2:	f7fd fac5 	bl	8001e40 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80048b6:	2312      	movs	r3, #18
 80048b8:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80048ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048be:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80048c0:	e9cd 3403 	strd	r3, r4, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048c4:	f7fd fb78 	bl	8001fb8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80048c8:	b015      	add	sp, #84	; 0x54
 80048ca:	bd30      	pop	{r4, r5, pc}

080048cc <main>:
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048cc:	2400      	movs	r4, #0
{
 80048ce:	e92d 4880 	stmdb	sp!, {r7, fp, lr}

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048d2:	4dc3      	ldr	r5, [pc, #780]	; (8004be0 <main+0x314>)
{
 80048d4:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80048d6:	f7fb fee9 	bl	80006ac <HAL_Init>
  SystemClock_Config();
 80048da:	f7ff ffbb 	bl	8004854 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048de:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048e0:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048e2:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e4:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048e6:	f04f 0880 	mov.w	r8, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ea:	f043 0310 	orr.w	r3, r3, #16
 80048ee:	61ab      	str	r3, [r5, #24]
 80048f0:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 80048f2:	a906      	add	r1, sp, #24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	9302      	str	r3, [sp, #8]
 80048fa:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80048fc:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 80048fe:	48b9      	ldr	r0, [pc, #740]	; (8004be4 <main+0x318>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004900:	f043 0320 	orr.w	r3, r3, #32
 8004904:	61ab      	str	r3, [r5, #24]
 8004906:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LED_Pin;
 8004908:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	9303      	str	r3, [sp, #12]
 8004912:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004914:	69ab      	ldr	r3, [r5, #24]
  /*Configure GPIO pins : CH1_R_Pin CH1_G_Pin CH1_B_Pin CH2_R_Pin 
                           CH2_G_Pin CH3_R_Pin CH3_G_Pin CH3_B_Pin */
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
                          |CH2_G_Pin|CH3_R_Pin|CH3_G_Pin|CH3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004916:	f04f 0a03 	mov.w	sl, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800491a:	f043 0304 	orr.w	r3, r3, #4
 800491e:	61ab      	str	r3, [r5, #24]
 8004920:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : BUTTON_Pin ADDR_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|ADDR_0_Pin;
 8004922:	f248 0b20 	movw	fp, #32800	; 0x8020
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	9304      	str	r3, [sp, #16]
 800492c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800492e:	69ab      	ldr	r3, [r5, #24]
 8004930:	f043 0308 	orr.w	r3, r3, #8
 8004934:	61ab      	str	r3, [r5, #24]
 8004936:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004938:	e9cd 8606 	strd	r8, r6, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	9305      	str	r3, [sp, #20]
 8004942:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004944:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8004946:	f7fc fbf1 	bl	800112c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 800494a:	4622      	mov	r2, r4
 800494c:	4641      	mov	r1, r8
 800494e:	48a5      	ldr	r0, [pc, #660]	; (8004be4 <main+0x318>)
 8004950:	f7fc fcd2 	bl	80012f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
 8004954:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004958:	a906      	add	r1, sp, #24
 800495a:	48a3      	ldr	r0, [pc, #652]	; (8004be8 <main+0x31c>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800495c:	e9cd 3406 	strd	r3, r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004960:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004962:	f7fc fbe3 	bl	800112c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004966:	a906      	add	r1, sp, #24
 8004968:	489f      	ldr	r0, [pc, #636]	; (8004be8 <main+0x31c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800496a:	e9cd 9606 	strd	r9, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800496e:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004970:	f7fc fbdc 	bl	800112c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
 8004974:	f240 73ce 	movw	r3, #1998	; 0x7ce
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004978:	a906      	add	r1, sp, #24
 800497a:	489c      	ldr	r0, [pc, #624]	; (8004bec <main+0x320>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497c:	e9cd 3706 	strd	r3, r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004980:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004984:	f7fc fbd2 	bl	800112c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004988:	a906      	add	r1, sp, #24
 800498a:	4896      	ldr	r0, [pc, #600]	; (8004be4 <main+0x318>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498c:	e9cd a706 	strd	sl, r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004990:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004994:	f7fc fbca 	bl	800112c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004998:	a906      	add	r1, sp, #24
 800499a:	4894      	ldr	r0, [pc, #592]	; (8004bec <main+0x320>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800499c:	e9cd b406 	strd	fp, r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049a0:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a2:	f7fc fbc3 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR_5_Pin ADDR_6_Pin ADDR_7_Pin ADDR_1_Pin 
                           ADDR_2_Pin ADDR_3_Pin ADDR_4_Pin */
  GPIO_InitStruct.Pin = ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_1_Pin 
 80049a6:	f247 3318 	movw	r3, #29464	; 0x7318
                          |ADDR_2_Pin|ADDR_3_Pin|ADDR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049aa:	a906      	add	r1, sp, #24
 80049ac:	488d      	ldr	r0, [pc, #564]	; (8004be4 <main+0x318>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049b2:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b4:	f7fc fbba 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : WS8212_CH2_Pin WS8212_CH1_Pin */
  GPIO_InitStruct.Pin = WS8212_CH2_Pin|WS8212_CH1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b8:	a906      	add	r1, sp, #24
 80049ba:	488a      	ldr	r0, [pc, #552]	; (8004be4 <main+0x318>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049bc:	e9cd b706 	strd	fp, r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049c0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049c4:	f7fc fbb2 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DIR_Pin */
  GPIO_InitStruct.Pin = RS232_TX_Pin;
 80049c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80049cc:	f44f 2a60 	mov.w	sl, #917504	; 0xe0000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 80049d0:	a906      	add	r1, sp, #24
 80049d2:	4884      	ldr	r0, [pc, #528]	; (8004be4 <main+0x318>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049d4:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d8:	e9cd 4708 	strd	r4, r7, [sp, #32]
  hadc1.Instance = ADC1;
 80049dc:	4f84      	ldr	r7, [pc, #528]	; (8004bf0 <main+0x324>)
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 80049de:	f7fc fba5 	bl	800112c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80049e2:	4622      	mov	r2, r4
 80049e4:	4649      	mov	r1, r9
 80049e6:	4880      	ldr	r0, [pc, #512]	; (8004be8 <main+0x31c>)
 80049e8:	f7fc fc86 	bl	80012f8 <HAL_GPIO_WritePin>
  hadc1.Instance = ADC1;
 80049ec:	4b81      	ldr	r3, [pc, #516]	; (8004bf4 <main+0x328>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80049ee:	4638      	mov	r0, r7
  hadc1.Instance = ADC1;
 80049f0:	603b      	str	r3, [r7, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80049f2:	60bc      	str	r4, [r7, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80049f4:	733c      	strb	r4, [r7, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80049f6:	753c      	strb	r4, [r7, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80049f8:	f8c7 a01c 	str.w	sl, [r7, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80049fc:	607c      	str	r4, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80049fe:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004a02:	9408      	str	r4, [sp, #32]
  hadc1.Init.NbrOfConversion = 1;
 8004a04:	613e      	str	r6, [r7, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004a06:	f7fc f82d 	bl	8000a64 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a0a:	a906      	add	r1, sp, #24
 8004a0c:	4638      	mov	r0, r7
  hadc2.Instance = ADC2;
 8004a0e:	4f7a      	ldr	r7, [pc, #488]	; (8004bf8 <main+0x32c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004a10:	e9cd 4606 	strd	r4, r6, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004a14:	9408      	str	r4, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a16:	f7fb fee7 	bl	80007e8 <HAL_ADC_ConfigChannel>
  hadc2.Instance = ADC2;
 8004a1a:	4b78      	ldr	r3, [pc, #480]	; (8004bfc <main+0x330>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004a1c:	4638      	mov	r0, r7
  hadc2.Instance = ADC2;
 8004a1e:	603b      	str	r3, [r7, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004a20:	60bc      	str	r4, [r7, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004a22:	733c      	strb	r4, [r7, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004a24:	753c      	strb	r4, [r7, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004a26:	f8c7 a01c 	str.w	sl, [r7, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004a2a:	607c      	str	r4, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004a2c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004a30:	9408      	str	r4, [sp, #32]
  hadc2.Init.NbrOfConversion = 1;
 8004a32:	613e      	str	r6, [r7, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004a34:	f7fc f816 	bl	8000a64 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 8004a38:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a3a:	4638      	mov	r0, r7
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a3c:	270c      	movs	r7, #12
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a3e:	a906      	add	r1, sp, #24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004a40:	e9cd 3606 	strd	r3, r6, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004a44:	9408      	str	r4, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a46:	f7fb fecf 	bl	80007e8 <HAL_ADC_ConfigChannel>
  huart1.Instance = USART1;
 8004a4a:	486d      	ldr	r0, [pc, #436]	; (8004c00 <main+0x334>)
  huart1.Init.BaudRate = 250000;
 8004a4c:	4b6d      	ldr	r3, [pc, #436]	; (8004c04 <main+0x338>)
 8004a4e:	4a6e      	ldr	r2, [pc, #440]	; (8004c08 <main+0x33c>)
  huart1.Init.StopBits = UART_STOPBITS_2;
 8004a50:	e9c0 4902 	strd	r4, r9, [r0, #8]
  huart1.Init.BaudRate = 250000;
 8004a54:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a58:	e9c0 7405 	strd	r7, r4, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a5c:	6104      	str	r4, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a5e:	61c4      	str	r4, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8004a60:	f7fd ffe6 	bl	8002a30 <HAL_HalfDuplex_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a64:	4622      	mov	r2, r4
 8004a66:	4621      	mov	r1, r4
 8004a68:	2025      	movs	r0, #37	; 0x25
 8004a6a:	f7fc f88f 	bl	8000b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a6e:	2025      	movs	r0, #37	; 0x25
 8004a70:	f7fc f8c0 	bl	8000bf4 <HAL_NVIC_EnableIRQ>
  huart3.Init.BaudRate = 115200;
 8004a74:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart3.Instance = USART3;
 8004a78:	4864      	ldr	r0, [pc, #400]	; (8004c0c <main+0x340>)
  huart3.Init.BaudRate = 115200;
 8004a7a:	4965      	ldr	r1, [pc, #404]	; (8004c10 <main+0x344>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004a7c:	e9c0 4704 	strd	r4, r7, [r0, #16]
  huart3.Init.BaudRate = 115200;
 8004a80:	e9c0 1300 	strd	r1, r3, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a84:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a88:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a8c:	f7fd ffa2 	bl	80029d4 <HAL_UART_Init>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a90:	4b60      	ldr	r3, [pc, #384]	; (8004c14 <main+0x348>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a92:	f44f 7a82 	mov.w	sl, #260	; 0x104
 8004a96:	f8c3 8004 	str.w	r8, [r3, #4]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004a9a:	f44f 7900 	mov.w	r9, #512	; 0x200
 8004a9e:	f04f 0820 	mov.w	r8, #32
  hspi1.Init.CRCPolynomial = 10;
 8004aa2:	270a      	movs	r7, #10
  __HAL_RCC_SPI1_CLK_ENABLE();
 8004aa4:	69ab      	ldr	r3, [r5, #24]
  hspi1.Instance = SPI1;
 8004aa6:	485c      	ldr	r0, [pc, #368]	; (8004c18 <main+0x34c>)
  __HAL_RCC_SPI1_CLK_ENABLE();
 8004aa8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004aac:	61ab      	str	r3, [r5, #24]
 8004aae:	69ab      	ldr	r3, [r5, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ab0:	e9c0 4402 	strd	r4, r4, [r0, #8]
  __HAL_RCC_SPI1_CLK_ENABLE();
 8004ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ab8:	9306      	str	r3, [sp, #24]
 8004aba:	9b06      	ldr	r3, [sp, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004abc:	4b57      	ldr	r3, [pc, #348]	; (8004c1c <main+0x350>)
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004abe:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004ac2:	e9c0 3a00 	strd	r3, sl, [r0]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ac6:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aca:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004acc:	e9c0 9806 	strd	r9, r8, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8004ad0:	62c7      	str	r7, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004ad2:	f7fd fb33 	bl	800213c <HAL_SPI_Init>
  __HAL_RCC_SPI2_CLK_ENABLE();
 8004ad6:	69eb      	ldr	r3, [r5, #28]
  hspi2.Instance = SPI2;
 8004ad8:	4851      	ldr	r0, [pc, #324]	; (8004c20 <main+0x354>)
  __HAL_RCC_SPI2_CLK_ENABLE();
 8004ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ade:	61eb      	str	r3, [r5, #28]
 8004ae0:	69eb      	ldr	r3, [r5, #28]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ae2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  __HAL_RCC_SPI2_CLK_ENABLE();
 8004ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	9b01      	ldr	r3, [sp, #4]
  hspi2.Instance = SPI2;
 8004aee:	4b4d      	ldr	r3, [pc, #308]	; (8004c24 <main+0x358>)
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004af0:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004af4:	e9c0 3a00 	strd	r3, sl, [r0]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004af8:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi2.Init.CRCPolynomial = 10;
 8004afc:	e9c0 470a 	strd	r4, r7, [r0, #40]	; 0x28
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004b00:	e9c0 9806 	strd	r9, r8, [r0, #24]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004b04:	f7fd fb1a 	bl	800213c <HAL_SPI_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004b08:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004b0a:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004b0c:	4333      	orrs	r3, r6
 8004b0e:	616b      	str	r3, [r5, #20]
 8004b10:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004b12:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004b14:	4033      	ands	r3, r6
 8004b16:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004b18:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004b1a:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004b1c:	f7fc f836 	bl	8000b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004b20:	200d      	movs	r0, #13
 8004b22:	f7fc f867 	bl	8000bf4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004b26:	4622      	mov	r2, r4
 8004b28:	4621      	mov	r1, r4
 8004b2a:	200e      	movs	r0, #14
 8004b2c:	f7fc f82e 	bl	8000b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004b30:	200e      	movs	r0, #14
 8004b32:	f7fc f85f 	bl	8000bf4 <HAL_NVIC_EnableIRQ>
  print("");
 8004b36:	483c      	ldr	r0, [pc, #240]	; (8004c28 <main+0x35c>)
 8004b38:	f000 fdda 	bl	80056f0 <print>
  print("-------------");
 8004b3c:	483b      	ldr	r0, [pc, #236]	; (8004c2c <main+0x360>)
 8004b3e:	f000 fdd7 	bl	80056f0 <print>
  print("DMX CTRL V1.0");
 8004b42:	483b      	ldr	r0, [pc, #236]	; (8004c30 <main+0x364>)
 8004b44:	f000 fdd4 	bl	80056f0 <print>
  print("-------------");
 8004b48:	4838      	ldr	r0, [pc, #224]	; (8004c2c <main+0x360>)
 8004b4a:	f000 fdd1 	bl	80056f0 <print>
  print("");
 8004b4e:	4836      	ldr	r0, [pc, #216]	; (8004c28 <main+0x35c>)
 8004b50:	f000 fdce 	bl	80056f0 <print>
 if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == SET)
 8004b54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 dmx512_init(get_mode_from_pins(),get_addr_from_pins()*2);  //Address x2 so we can spread out the 8 Jumpers over 512 Addresses
 8004b56:	f7ff fc61 	bl	800441c <get_mode_from_pins>
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	f7ff fc74 	bl	8004448 <get_addr_from_pins>
 8004b60:	fa00 f106 	lsl.w	r1, r0, r6
 8004b64:	4620      	mov	r0, r4
 8004b66:	f7ff fa0b 	bl	8003f80 <dmx512_init>
 print("DMX512 Config complete");
 8004b6a:	4832      	ldr	r0, [pc, #200]	; (8004c34 <main+0x368>)
 8004b6c:	f000 fdc0 	bl	80056f0 <print>
 if (get_mode_from_pins() & 0x02)
 8004b70:	f7ff fc54 	bl	800441c <get_mode_from_pins>
 8004b74:	0780      	lsls	r0, r0, #30
 8004b76:	d506      	bpl.n	8004b86 <main+0x2ba>
	 USB_Active = 1;
 8004b78:	4b2f      	ldr	r3, [pc, #188]	; (8004c38 <main+0x36c>)
 8004b7a:	701e      	strb	r6, [r3, #0]
	 MX_USB_DEVICE_Init();
 8004b7c:	f001 fbf6 	bl	800636c <MX_USB_DEVICE_Init>
	 print("USB Enabled");
 8004b80:	482e      	ldr	r0, [pc, #184]	; (8004c3c <main+0x370>)
 8004b82:	f000 fdb5 	bl	80056f0 <print>
 if(ring_buffer_init(&rx_buff, RX_BUFF_SIZE) != RB_OK)
 8004b86:	2180      	movs	r1, #128	; 0x80
 8004b88:	482d      	ldr	r0, [pc, #180]	; (8004c40 <main+0x374>)
 8004b8a:	f000 f9e5 	bl	8004f58 <ring_buffer_init>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	f000 80b9 	beq.w	8004d06 <main+0x43a>
	 print("Ring Buffer Init FAILED");
 8004b94:	482b      	ldr	r0, [pc, #172]	; (8004c44 <main+0x378>)
	 print("Ring Buffer Init Complete");
 8004b96:	f000 fdab 	bl	80056f0 <print>
  init_timers();
 8004b9a:	f000 f995 	bl	8004ec8 <init_timers>
  print("Timer Init complete");
 8004b9e:	482a      	ldr	r0, [pc, #168]	; (8004c48 <main+0x37c>)
 8004ba0:	f000 fda6 	bl	80056f0 <print>
  init_settings();
 8004ba4:	f000 fafa 	bl	800519c <init_settings>
  if (0 == check_button())
 8004ba8:	f7ff fc94 	bl	80044d4 <check_button>
 8004bac:	4d27      	ldr	r5, [pc, #156]	; (8004c4c <main+0x380>)
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	f040 80ab 	bne.w	8004d0a <main+0x43e>
	  load_settings();
 8004bb4:	f000 fb9c 	bl	80052f0 <load_settings>
	  UART_mode_SERIAL = settings.UART_Mode_UART;
 8004bb8:	4b25      	ldr	r3, [pc, #148]	; (8004c50 <main+0x384>)
	  print("Setting loaded");
 8004bba:	4826      	ldr	r0, [pc, #152]	; (8004c54 <main+0x388>)
	  UART_mode_SERIAL = settings.UART_Mode_UART;
 8004bbc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004bc0:	702a      	strb	r2, [r5, #0]
	  UART_mode_USB = settings.UART_Mode_USB;
 8004bc2:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8004bc6:	4b24      	ldr	r3, [pc, #144]	; (8004c58 <main+0x38c>)
 8004bc8:	701a      	strb	r2, [r3, #0]
	  print("Defaults restored");
 8004bca:	f000 fd91 	bl	80056f0 <print>
  apply_settings();
 8004bce:	f000 fb17 	bl	8005200 <apply_settings>
  print("Settings complete");
 8004bd2:	4822      	ldr	r0, [pc, #136]	; (8004c5c <main+0x390>)
 8004bd4:	f000 fd8c 	bl	80056f0 <print>
  dmx512_rec_init();
 8004bd8:	f7ff fadc 	bl	8004194 <dmx512_rec_init>
 8004bdc:	e040      	b.n	8004c60 <main+0x394>
 8004bde:	bf00      	nop
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40010c00 	.word	0x40010c00
 8004be8:	40011000 	.word	0x40011000
 8004bec:	40010800 	.word	0x40010800
 8004bf0:	20000be0 	.word	0x20000be0
 8004bf4:	40012400 	.word	0x40012400
 8004bf8:	20000b6c 	.word	0x20000b6c
 8004bfc:	40012800 	.word	0x40012800
 8004c00:	20000c10 	.word	0x20000c10
 8004c04:	0003d090 	.word	0x0003d090
 8004c08:	40013800 	.word	0x40013800
 8004c0c:	20000b2c 	.word	0x20000b2c
 8004c10:	40004800 	.word	0x40004800
 8004c14:	e000e100 	.word	0xe000e100
 8004c18:	20000c50 	.word	0x20000c50
 8004c1c:	40013000 	.word	0x40013000
 8004c20:	20000abc 	.word	0x20000abc
 8004c24:	40003800 	.word	0x40003800
 8004c28:	08008088 	.word	0x08008088
 8004c2c:	080080ca 	.word	0x080080ca
 8004c30:	08007a69 	.word	0x08007a69
 8004c34:	08007a77 	.word	0x08007a77
 8004c38:	20000422 	.word	0x20000422
 8004c3c:	08007a8e 	.word	0x08007a8e
 8004c40:	20000b14 	.word	0x20000b14
 8004c44:	08007a9a 	.word	0x08007a9a
 8004c48:	08007acc 	.word	0x08007acc
 8004c4c:	20000420 	.word	0x20000420
 8004c50:	20000a70 	.word	0x20000a70
 8004c54:	08007ae0 	.word	0x08007ae0
 8004c58:	20000421 	.word	0x20000421
 8004c5c:	08007b01 	.word	0x08007b01
  print("DMX512 Init complete");
 8004c60:	483b      	ldr	r0, [pc, #236]	; (8004d50 <main+0x484>)
 8004c62:	f000 fd45 	bl	80056f0 <print>
  init_update_lights();
 8004c66:	f7ff fddf 	bl	8004828 <init_update_lights>
  print("PWM Update Init complete");
 8004c6a:	483a      	ldr	r0, [pc, #232]	; (8004d54 <main+0x488>)
 8004c6c:	f000 fd40 	bl	80056f0 <print>
  init_trigger();
 8004c70:	f001 face 	bl	8006210 <init_trigger>
  print("Trigger Init complete");
 8004c74:	4838      	ldr	r0, [pc, #224]	; (8004d58 <main+0x48c>)
 8004c76:	f000 fd3b 	bl	80056f0 <print>
  if (DMX_MODE2 == get_mode())
 8004c7a:	f7ff f963 	bl	8003f44 <get_mode>
 8004c7e:	2801      	cmp	r0, #1
 8004c80:	d14b      	bne.n	8004d1a <main+0x44e>
	  print("FX Installation Start");
 8004c82:	4836      	ldr	r0, [pc, #216]	; (8004d5c <main+0x490>)
     if (WS2812B_init(CH1,settings.strip1_length))
 8004c84:	4c36      	ldr	r4, [pc, #216]	; (8004d60 <main+0x494>)
	  print("FX Installation Start");
 8004c86:	f000 fd33 	bl	80056f0 <print>
	  install_fx();
 8004c8a:	f7ff fb27 	bl	80042dc <install_fx>
	  print("FX Installation Finished");
 8004c8e:	4835      	ldr	r0, [pc, #212]	; (8004d64 <main+0x498>)
 8004c90:	f000 fd2e 	bl	80056f0 <print>
     if (WS2812B_init(CH1,settings.strip1_length))
 8004c94:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8004c96:	2000      	movs	r0, #0
 8004c98:	f001 ffc0 	bl	8006c1c <WS2812B_init>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d038      	beq.n	8004d12 <main+0x446>
	   print("WS2812B CH1 Init complete");
 8004ca0:	4831      	ldr	r0, [pc, #196]	; (8004d68 <main+0x49c>)
 8004ca2:	f000 fd25 	bl	80056f0 <print>
	   WS2812B_clear(CH1);
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f001 ff9c 	bl	8006be4 <WS2812B_clear>
	   print("DMX Mode 2 Active");
 8004cac:	482f      	ldr	r0, [pc, #188]	; (8004d6c <main+0x4a0>)
	   print("WS2812B CH1 Init FAILED");
 8004cae:	f000 fd1f 	bl	80056f0 <print>
     if (WS2812B_init(CH2,settings.strip1_length))
 8004cb2:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8004cb4:	2001      	movs	r0, #1
 8004cb6:	f001 ffb1 	bl	8006c1c <WS2812B_init>
 8004cba:	b360      	cbz	r0, 8004d16 <main+0x44a>
	   print("WS2812B CH2 Init complete");
 8004cbc:	482c      	ldr	r0, [pc, #176]	; (8004d70 <main+0x4a4>)
 8004cbe:	f000 fd17 	bl	80056f0 <print>
	   WS2812B_clear(CH2);
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	f001 ff8e 	bl	8006be4 <WS2812B_clear>
	   print("DMX Mode 2 Active");
 8004cc8:	4828      	ldr	r0, [pc, #160]	; (8004d6c <main+0x4a0>)
	  print("DMX Mode 1 Active");
 8004cca:	f000 fd11 	bl	80056f0 <print>
  print("Shell Active");
 8004cce:	4829      	ldr	r0, [pc, #164]	; (8004d74 <main+0x4a8>)
 8004cd0:	f000 fd0e 	bl	80056f0 <print>
  print_no_newline("DBG>");
 8004cd4:	4828      	ldr	r0, [pc, #160]	; (8004d78 <main+0x4ac>)
 8004cd6:	f000 fd2b 	bl	8005730 <print_no_newline>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ce0:	4826      	ldr	r0, [pc, #152]	; (8004d7c <main+0x4b0>)
 8004ce2:	f7fc fb09 	bl	80012f8 <HAL_GPIO_WritePin>
	if (testmode)
 8004ce6:	4c26      	ldr	r4, [pc, #152]	; (8004d80 <main+0x4b4>)
	if (UART_mode_SERIAL == (uint8_t)UART_MODE_SHELL)
 8004ce8:	782b      	ldrb	r3, [r5, #0]
 8004cea:	b9c3      	cbnz	r3, 8004d1e <main+0x452>
		shell_process();
 8004cec:	f000 fd3a 	bl	8005764 <shell_process>
	if (testmode)
 8004cf0:	7823      	ldrb	r3, [r4, #0]
 8004cf2:	b1bb      	cbz	r3, 8004d24 <main+0x458>
		testmode = process_testmode();
 8004cf4:	f001 f9f2 	bl	80060dc <process_testmode>
 8004cf8:	7020      	strb	r0, [r4, #0]
		if (testmode == 0)
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	d1f4      	bne.n	8004ce8 <main+0x41c>
			update_pwm_lights(1);
 8004cfe:	2001      	movs	r0, #1
		update_pwm_lights(0);
 8004d00:	f7ff fc1e 	bl	8004540 <update_pwm_lights>
 8004d04:	e7f0      	b.n	8004ce8 <main+0x41c>
	 print("Ring Buffer Init Complete");
 8004d06:	481f      	ldr	r0, [pc, #124]	; (8004d84 <main+0x4b8>)
 8004d08:	e745      	b.n	8004b96 <main+0x2ca>
	  save_settings();
 8004d0a:	f000 faf9 	bl	8005300 <save_settings>
	  print("Defaults restored");
 8004d0e:	481e      	ldr	r0, [pc, #120]	; (8004d88 <main+0x4bc>)
 8004d10:	e75b      	b.n	8004bca <main+0x2fe>
	   print("WS2812B CH1 Init FAILED");
 8004d12:	481e      	ldr	r0, [pc, #120]	; (8004d8c <main+0x4c0>)
 8004d14:	e7cb      	b.n	8004cae <main+0x3e2>
	   print("WS2812B CH2 Init FAILED");
 8004d16:	481e      	ldr	r0, [pc, #120]	; (8004d90 <main+0x4c4>)
 8004d18:	e7d7      	b.n	8004cca <main+0x3fe>
	  print("DMX Mode 1 Active");
 8004d1a:	481e      	ldr	r0, [pc, #120]	; (8004d94 <main+0x4c8>)
 8004d1c:	e7d5      	b.n	8004cca <main+0x3fe>
		dmx_serial_process();
 8004d1e:	f000 f99f 	bl	8005060 <dmx_serial_process>
 8004d22:	e7e5      	b.n	8004cf0 <main+0x424>
		if (1 == check_button())
 8004d24:	f7ff fbd6 	bl	80044d4 <check_button>
 8004d28:	2801      	cmp	r0, #1
			testmode = 1;
 8004d2a:	bf08      	it	eq
 8004d2c:	7020      	strbeq	r0, [r4, #0]
		process_trigger();
 8004d2e:	f001 fa8f 	bl	8006250 <process_trigger>
		if (DMX_MODE2 == get_mode())
 8004d32:	f7ff f907 	bl	8003f44 <get_mode>
 8004d36:	2801      	cmp	r0, #1
 8004d38:	4606      	mov	r6, r0
 8004d3a:	d107      	bne.n	8004d4c <main+0x480>
			run_fx();
 8004d3c:	f7ff fb36 	bl	80043ac <run_fx>
			WS2812B_show(CH1);
 8004d40:	2000      	movs	r0, #0
 8004d42:	f001 feef 	bl	8006b24 <WS2812B_show>
			WS2812B_show(CH2);
 8004d46:	4630      	mov	r0, r6
 8004d48:	f001 feec 	bl	8006b24 <WS2812B_show>
		update_pwm_lights(0);
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	e7d7      	b.n	8004d00 <main+0x434>
 8004d50:	08007b13 	.word	0x08007b13
 8004d54:	08007b28 	.word	0x08007b28
 8004d58:	08007b41 	.word	0x08007b41
 8004d5c:	08007b57 	.word	0x08007b57
 8004d60:	20000a70 	.word	0x20000a70
 8004d64:	08007b6d 	.word	0x08007b6d
 8004d68:	08007b86 	.word	0x08007b86
 8004d6c:	08007ba0 	.word	0x08007ba0
 8004d70:	08007bca 	.word	0x08007bca
 8004d74:	08007c0e 	.word	0x08007c0e
 8004d78:	08007c1b 	.word	0x08007c1b
 8004d7c:	40011000 	.word	0x40011000
 8004d80:	20000423 	.word	0x20000423
 8004d84:	08007ab2 	.word	0x08007ab2
 8004d88:	08007aef 	.word	0x08007aef
 8004d8c:	08007bb2 	.word	0x08007bb2
 8004d90:	08007be4 	.word	0x08007be4
 8004d94:	08007bfc 	.word	0x08007bfc

08004d98 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004d98:	4770      	bx	lr
	...

08004d9c <PWM_Timer_Init>:

	  TIM_MasterConfigTypeDef sMasterConfig;
	  TIM_OC_InitTypeDef sConfigOC;
	  TIM_ClockConfigTypeDef sClockSourceConfig;

	  memset(&sConfigOC, 0, sizeof(sConfigOC));
 8004d9c:	221c      	movs	r2, #28
{
 8004d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da2:	b08e      	sub	sp, #56	; 0x38
 8004da4:	4606      	mov	r6, r0
	  memset(&sConfigOC, 0, sizeof(sConfigOC));
 8004da6:	2100      	movs	r1, #0
 8004da8:	eb0d 0002 	add.w	r0, sp, r2
 8004dac:	f002 f81b 	bl	8006de6 <memset>
	  memset(&sMasterConfig, 0, sizeof(sMasterConfig));
 8004db0:	2100      	movs	r1, #0
	  memset(&sClockSourceConfig, 0, sizeof(sClockSourceConfig));
 8004db2:	2210      	movs	r2, #16
 8004db4:	a803      	add	r0, sp, #12
	  memset(&sMasterConfig, 0, sizeof(sMasterConfig));
 8004db6:	e9cd 1101 	strd	r1, r1, [sp, #4]
	  memset(&sClockSourceConfig, 0, sizeof(sClockSourceConfig));
 8004dba:	f002 f814 	bl	8006de6 <memset>

	  switch(ID)
 8004dbe:	2e01      	cmp	r6, #1
 8004dc0:	4c38      	ldr	r4, [pc, #224]	; (8004ea4 <PWM_Timer_Init+0x108>)
 8004dc2:	d067      	beq.n	8004e94 <PWM_Timer_Init+0xf8>
 8004dc4:	d362      	bcc.n	8004e8c <PWM_Timer_Init+0xf0>
 8004dc6:	2e02      	cmp	r6, #2
 8004dc8:	d067      	beq.n	8004e9a <PWM_Timer_Init+0xfe>
	  	  case PWM_CH3:
	  		timerinfo[ID].Instance = TIM1;
		  break;
	  }

	  timerinfo[(uint8_t)ID].Init.Prescaler = 0;
 8004dca:	2300      	movs	r3, #0
	  timerinfo[(uint8_t)ID].Init.CounterMode = TIM_COUNTERMODE_UP;
	  timerinfo[(uint8_t)ID].Init.Period = 1066; //TBD....
 8004dcc:	f240 422a 	movw	r2, #1066	; 0x42a
	  timerinfo[(uint8_t)ID].Init.Prescaler = 0;
 8004dd0:	eb04 1486 	add.w	r4, r4, r6, lsl #6
	  timerinfo[(uint8_t)ID].Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dd4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	  timerinfo[(uint8_t)ID].Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dd8:	e9c4 2303 	strd	r2, r3, [r4, #12]
	  timerinfo[(uint8_t)ID].Init.RepetitionCounter = 0;
 8004ddc:	6163      	str	r3, [r4, #20]
	  if (HAL_TIM_Base_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)/* to use the Timer to generate a simple time base for TIM1 */
 8004dde:	4620      	mov	r0, r4
 8004de0:	f7fd fbfc 	bl	80025dc <HAL_TIM_Base_Init>
 8004de4:	b110      	cbz	r0, 8004dec <PWM_Timer_Init+0x50>
	  {
		  print("Timer Init Error 1");
 8004de6:	4830      	ldr	r0, [pc, #192]	; (8004ea8 <PWM_Timer_Init+0x10c>)
 8004de8:	f000 fc82 	bl	80056f0 <print>
	  }

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;//the default clock is the internal clock from the APBx, using this function
 8004dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&timerinfo[(uint8_t)ID], &sClockSourceConfig) != HAL_OK)//Initializes the TIM PWM Time Base according to the specified
 8004df0:	a903      	add	r1, sp, #12
 8004df2:	4620      	mov	r0, r4
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;//the default clock is the internal clock from the APBx, using this function
 8004df4:	9303      	str	r3, [sp, #12]
	  if (HAL_TIM_ConfigClockSource(&timerinfo[(uint8_t)ID], &sClockSourceConfig) != HAL_OK)//Initializes the TIM PWM Time Base according to the specified
 8004df6:	f7fd fcbd 	bl	8002774 <HAL_TIM_ConfigClockSource>
 8004dfa:	b110      	cbz	r0, 8004e02 <PWM_Timer_Init+0x66>
	 //parameters in the TIM_HandleTypeDef and create the associated handle.
	   {
		  print("Timer Init Error 2");
 8004dfc:	482b      	ldr	r0, [pc, #172]	; (8004eac <PWM_Timer_Init+0x110>)
 8004dfe:	f000 fc77 	bl	80056f0 <print>
	   }


	  if (HAL_TIM_PWM_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)
 8004e02:	4620      	mov	r0, r4
 8004e04:	f7fd fc04 	bl	8002610 <HAL_TIM_PWM_Init>
 8004e08:	b110      	cbz	r0, 8004e10 <PWM_Timer_Init+0x74>
	  {
		  print("Timer Init Error 3");
 8004e0a:	4829      	ldr	r0, [pc, #164]	; (8004eb0 <PWM_Timer_Init+0x114>)
 8004e0c:	f000 fc70 	bl	80056f0 <print>
	  }


	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
	  sConfigOC.Pulse = MAX_PWM/2; /* 50% duty cycle is 538, set to 0 initially*///
 8004e10:	f240 231a 	movw	r3, #538	; 0x21a
 8004e14:	2260      	movs	r2, #96	; 0x60
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e16:	2500      	movs	r5, #0
	  sConfigOC.Pulse = MAX_PWM/2; /* 50% duty cycle is 538, set to 0 initially*///
 8004e18:	e9cd 2307 	strd	r2, r3, [sp, #28]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004e1c:	2304      	movs	r3, #4
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e1e:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
 8004e22:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <PWM_Timer_Init+0x118>)
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e24:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
 8004e28:	eb03 1706 	add.w	r7, r3, r6, lsl #4
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
		  {
			  if (HAL_OK != HAL_TIM_PWM_ConfigChannel(&timerinfo[(uint8_t)ID], &sConfigOC, channelinfo[(int8_t)ID][ii]))
			  {
				  print("Timer Init Error 4");
 8004e2c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004ec0 <PWM_Timer_Init+0x124>
 8004e30:	b276      	sxtb	r6, r6
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004e32:	950d      	str	r5, [sp, #52]	; 0x34
 8004e34:	eb03 1606 	add.w	r6, r3, r6, lsl #4
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 8004e38:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8004e3c:	2bff      	cmp	r3, #255	; 0xff
 8004e3e:	d009      	beq.n	8004e54 <PWM_Timer_Init+0xb8>
			  if (HAL_OK != HAL_TIM_PWM_ConfigChannel(&timerinfo[(uint8_t)ID], &sConfigOC, channelinfo[(int8_t)ID][ii]))
 8004e40:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 8004e44:	a907      	add	r1, sp, #28
 8004e46:	4620      	mov	r0, r4
 8004e48:	f7fd fc28 	bl	800269c <HAL_TIM_PWM_ConfigChannel>
 8004e4c:	b110      	cbz	r0, 8004e54 <PWM_Timer_Init+0xb8>
				  print("Timer Init Error 4");
 8004e4e:	4640      	mov	r0, r8
 8004e50:	f000 fc4e 	bl	80056f0 <print>
	  for (int ii=0;ii<4;ii++)
 8004e54:	3501      	adds	r5, #1
 8004e56:	2d04      	cmp	r5, #4
 8004e58:	d1ee      	bne.n	8004e38 <PWM_Timer_Init+0x9c>

		  }
	  }

	 // HAL_TIM_MspPostInit(&timerinfo[(uint8_t)ID]);//output pin assignment
	  HAL_TIM_Base_Start(&timerinfo[(uint8_t)ID]); //Starts the TIM Base generation
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f7fd fb73 	bl	8002546 <HAL_TIM_Base_Start>

	  for (int ii=0;ii<4;ii++)
 8004e60:	2500      	movs	r5, #0
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
		  {
			  if (HAL_OK != HAL_TIM_PWM_Start(&timerinfo[(uint8_t)ID], channelinfo[(int8_t)ID][ii]))
			  {
				  print("Timer Init Error 5");
 8004e62:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8004ec4 <PWM_Timer_Init+0x128>
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 8004e66:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8004e6a:	2bff      	cmp	r3, #255	; 0xff
 8004e6c:	d008      	beq.n	8004e80 <PWM_Timer_Init+0xe4>
			  if (HAL_OK != HAL_TIM_PWM_Start(&timerinfo[(uint8_t)ID], channelinfo[(int8_t)ID][ii]))
 8004e6e:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8004e72:	4620      	mov	r0, r4
 8004e74:	f7fd fd3c 	bl	80028f0 <HAL_TIM_PWM_Start>
 8004e78:	b110      	cbz	r0, 8004e80 <PWM_Timer_Init+0xe4>
				  print("Timer Init Error 5");
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	f000 fc38 	bl	80056f0 <print>
	  for (int ii=0;ii<4;ii++)
 8004e80:	3501      	adds	r5, #1
 8004e82:	2d04      	cmp	r5, #4
 8004e84:	d1ef      	bne.n	8004e66 <PWM_Timer_Init+0xca>
			  }

		  }
	  }
}
 8004e86:	b00e      	add	sp, #56	; 0x38
 8004e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  		timerinfo[ID].Instance = TIM2;
 8004e8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e90:	6023      	str	r3, [r4, #0]
		  break;
 8004e92:	e79a      	b.n	8004dca <PWM_Timer_Init+0x2e>
	  		timerinfo[ID].Instance = TIM3;
 8004e94:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <PWM_Timer_Init+0x11c>)
 8004e96:	6423      	str	r3, [r4, #64]	; 0x40
		  break;
 8004e98:	e797      	b.n	8004dca <PWM_Timer_Init+0x2e>
	  		timerinfo[ID].Instance = TIM1;
 8004e9a:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <PWM_Timer_Init+0x120>)
 8004e9c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		  break;
 8004ea0:	e793      	b.n	8004dca <PWM_Timer_Init+0x2e>
 8004ea2:	bf00      	nop
 8004ea4:	20000d30 	.word	0x20000d30
 8004ea8:	08007c20 	.word	0x08007c20
 8004eac:	08007c33 	.word	0x08007c33
 8004eb0:	08007c46 	.word	0x08007c46
 8004eb4:	08007c80 	.word	0x08007c80
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	08007c59 	.word	0x08007c59
 8004ec4:	08007c6c 	.word	0x08007c6c

08004ec8 <init_timers>:
{
 8004ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__HAL_RCC_TIM1_CLK_ENABLE();
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <init_timers+0x54>)
	PWM_Timer_Init(PWM_CH1);
 8004ecc:	2000      	movs	r0, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 8004ece:	699a      	ldr	r2, [r3, #24]
 8004ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed4:	619a      	str	r2, [r3, #24]
 8004ed6:	699a      	ldr	r2, [r3, #24]
 8004ed8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004edc:	9201      	str	r2, [sp, #4]
 8004ede:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8004ee0:	69da      	ldr	r2, [r3, #28]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	61da      	str	r2, [r3, #28]
 8004ee8:	69da      	ldr	r2, [r3, #28]
 8004eea:	f002 0201 	and.w	r2, r2, #1
 8004eee:	9202      	str	r2, [sp, #8]
 8004ef0:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_TIM3_CLK_ENABLE();
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	f042 0202 	orr.w	r2, r2, #2
 8004ef8:	61da      	str	r2, [r3, #28]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	9303      	str	r3, [sp, #12]
 8004f02:	9b03      	ldr	r3, [sp, #12]
	PWM_Timer_Init(PWM_CH1);
 8004f04:	f7ff ff4a 	bl	8004d9c <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH2);
 8004f08:	2001      	movs	r0, #1
 8004f0a:	f7ff ff47 	bl	8004d9c <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH3);
 8004f0e:	2002      	movs	r0, #2
}
 8004f10:	b005      	add	sp, #20
 8004f12:	f85d eb04 	ldr.w	lr, [sp], #4
	PWM_Timer_Init(PWM_CH3);
 8004f16:	f7ff bf41 	b.w	8004d9c <PWM_Timer_Init>
 8004f1a:	bf00      	nop
 8004f1c:	40021000 	.word	0x40021000

08004f20 <configPWM>:


//Setup PWM
void configPWM(pwmtimerid_t ID,pwmchid_t channel, uint16_t duty)
{
	  if (channelinfo[(uint8_t) ID][channel] != 255)
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <configPWM+0x30>)
 8004f22:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8004f26:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004f2a:	29ff      	cmp	r1, #255	; 0xff
 8004f2c:	d00e      	beq.n	8004f4c <configPWM+0x2c>
 8004f2e:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <configPWM+0x34>)
 8004f30:	0180      	lsls	r0, r0, #6
 8004f32:	581b      	ldr	r3, [r3, r0]
	  {
	  __HAL_TIM_SET_COMPARE(&timerinfo[ID],  channelinfo[(uint8_t)ID][(uint8_t)channel], duty);
 8004f34:	b909      	cbnz	r1, 8004f3a <configPWM+0x1a>
 8004f36:	635a      	str	r2, [r3, #52]	; 0x34
 8004f38:	4770      	bx	lr
 8004f3a:	2904      	cmp	r1, #4
 8004f3c:	d101      	bne.n	8004f42 <configPWM+0x22>
 8004f3e:	639a      	str	r2, [r3, #56]	; 0x38
 8004f40:	4770      	bx	lr
 8004f42:	2908      	cmp	r1, #8
 8004f44:	d101      	bne.n	8004f4a <configPWM+0x2a>
 8004f46:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f48:	4770      	bx	lr
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40
	  }
}
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	08007c80 	.word	0x08007c80
 8004f54:	20000d30 	.word	0x20000d30

08004f58 <ring_buffer_init>:
 * @param *rbd - pointer to the ring buffer descriptor
 * @param size - ring buffer size in number of bytes
 * @return RB_ERROR, RB_OK
 */
rb_status_t ring_buffer_init(rb_att_t *rbd, uint32_t size)
{
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	460d      	mov	r5, r1
  rbd->status = RB_ERROR;
 8004f5c:	2101      	movs	r1, #1
{
 8004f5e:	4604      	mov	r4, r0
  rbd->status = RB_ERROR;
 8004f60:	7501      	strb	r1, [r0, #20]

  if(rbd != NULL) // rbd must not be pointer to nowhere
  {
    rbd->buff = calloc(size, sizeof(uint8_t)); // allocate memory of "size" bytes, set all values to 0.
 8004f62:	4628      	mov	r0, r5
 8004f64:	f001 fef2 	bl	8006d4c <calloc>
 8004f68:	6020      	str	r0, [r4, #0]
    //rbd->buff = malloc(size * sizeof(uint8_t)); // Use this instead of calloc() if you don't wish to set all values to 0 by default.

    if(rbd->buff != NULL)  // buff must not be pointer to nowhere
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	b12b      	cbz	r3, 8004f7a <ring_buffer_init+0x22>
    {
      rbd->n_elem = size;

      // Initialize the ring buffer internal variables
      rbd->head = 0;
 8004f6e:	2300      	movs	r3, #0
      rbd->n_elem = size;
 8004f70:	6065      	str	r5, [r4, #4]
      rbd->head = 0;
 8004f72:	60a3      	str	r3, [r4, #8]
      rbd->tail = 0;
 8004f74:	60e3      	str	r3, [r4, #12]
      rbd->count = 0;
 8004f76:	6123      	str	r3, [r4, #16]
      rbd->status = RB_OK;
 8004f78:	7523      	strb	r3, [r4, #20]
    }
  }

  return rbd->status;
 8004f7a:	7d20      	ldrb	r0, [r4, #20]
}
 8004f7c:	bd38      	pop	{r3, r4, r5, pc}

08004f7e <ring_buffer_get>:
 * @param data - pointer to store the data
 * @param num - number of elements to read
 * @return RB_NOT_ENOUGH_DATA, RB_OK, RB_ERROR
 */
rb_status_t ring_buffer_get(rb_att_t *rbd, uint8_t *data, uint32_t num)
{
 8004f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f80:	460b      	mov	r3, r1
 8004f82:	4615      	mov	r5, r2
  rb_status_t status = RB_ERROR;
  uint32_t num_to_end = 0;

  if(rbd != NULL)  // rbd must not be a pointer to nowhere
 8004f84:	4604      	mov	r4, r0
 8004f86:	b350      	cbz	r0, 8004fde <ring_buffer_get+0x60>
{
  uint32_t size = 0;

  if(rbd != NULL)  // rbd must not be a pointer to nowhere
  {
	  size = rbd->count;
 8004f88:	6902      	ldr	r2, [r0, #16]
	  if(ring_buffer_size(rbd) >= num) //buffer is not empty and there is at least num of data stored
 8004f8a:	4295      	cmp	r5, r2
 8004f8c:	d829      	bhi.n	8004fe2 <ring_buffer_get+0x64>
		  if(rbd->tail >= rbd->n_elem) // reset ring buffer tail
 8004f8e:	68c1      	ldr	r1, [r0, #12]
 8004f90:	6842      	ldr	r2, [r0, #4]
 8004f92:	4291      	cmp	r1, r2
			  rbd->tail = 0;
 8004f94:	bf24      	itt	cs
 8004f96:	2200      	movcs	r2, #0
 8004f98:	60c2      	strcs	r2, [r0, #12]
      num_to_end = rbd->n_elem - rbd->tail;
 8004f9a:	6846      	ldr	r6, [r0, #4]
 8004f9c:	68c2      	ldr	r2, [r0, #12]
        memcpy(data, &(rbd->buff[rbd->tail]), num_to_end); //read from buffer partial data
 8004f9e:	6800      	ldr	r0, [r0, #0]
      num_to_end = rbd->n_elem - rbd->tail;
 8004fa0:	1ab6      	subs	r6, r6, r2
      if(num >= num_to_end) // is there enough ("num") of data to read before reaching buffer last element
 8004fa2:	42b5      	cmp	r5, r6
        memcpy(data, &(rbd->buff[rbd->tail]), num_to_end); //read from buffer partial data
 8004fa4:	68e1      	ldr	r1, [r4, #12]
      if(num >= num_to_end) // is there enough ("num") of data to read before reaching buffer last element
 8004fa6:	d311      	bcc.n	8004fcc <ring_buffer_get+0x4e>
        memcpy(data, &(rbd->buff[rbd->tail]), num_to_end); //read from buffer partial data
 8004fa8:	4401      	add	r1, r0
 8004faa:	4632      	mov	r2, r6
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 ff0f 	bl	8006dd0 <memcpy>
        memcpy(data + num_to_end, rbd->buff, (num - num_to_end)); //read from buffer remaining partial data
 8004fb2:	1baf      	subs	r7, r5, r6
 8004fb4:	6821      	ldr	r1, [r4, #0]
 8004fb6:	463a      	mov	r2, r7
 8004fb8:	4430      	add	r0, r6
 8004fba:	f001 ff09 	bl	8006dd0 <memcpy>
        rbd->tail = num - num_to_end;  // tail increment
 8004fbe:	60e7      	str	r7, [r4, #12]
      status = RB_OK;
 8004fc0:	2000      	movs	r0, #0
        rbd->count = rbd->count - num; // decrement counter for num of data
 8004fc2:	6923      	ldr	r3, [r4, #16]
 8004fc4:	1b5d      	subs	r5, r3, r5
 8004fc6:	6125      	str	r5, [r4, #16]
  rbd->status = status;
 8004fc8:	7520      	strb	r0, [r4, #20]
}
 8004fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(data, &(rbd->buff[rbd->tail]), num); //read from buffer
 8004fcc:	4401      	add	r1, r0
 8004fce:	462a      	mov	r2, r5
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f001 fefd 	bl	8006dd0 <memcpy>
        rbd->tail = rbd->tail + num;  // increment tail
 8004fd6:	68e3      	ldr	r3, [r4, #12]
 8004fd8:	442b      	add	r3, r5
 8004fda:	60e3      	str	r3, [r4, #12]
 8004fdc:	e7f0      	b.n	8004fc0 <ring_buffer_get+0x42>
  rb_status_t status = RB_ERROR;
 8004fde:	2001      	movs	r0, #1
 8004fe0:	e7f2      	b.n	8004fc8 <ring_buffer_get+0x4a>
      status = RB_NOT_ENOUGH_DATA;
 8004fe2:	2005      	movs	r0, #5
 8004fe4:	e7f0      	b.n	8004fc8 <ring_buffer_get+0x4a>

08004fe6 <ring_buffer_free_elements>:
  if(rbd != NULL)  // rbd must not be a pointer to nowhere
 8004fe6:	b110      	cbz	r0, 8004fee <ring_buffer_free_elements+0x8>
   ret_val = rbd->n_elem - rbd->count;
 8004fe8:	6843      	ldr	r3, [r0, #4]
 8004fea:	6900      	ldr	r0, [r0, #16]
 8004fec:	1a18      	subs	r0, r3, r0
}
 8004fee:	4770      	bx	lr

08004ff0 <ring_buffer_put>:
{
 8004ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff4:	460f      	mov	r7, r1
 8004ff6:	4615      	mov	r5, r2
  if(rbd != NULL)  // rbd must not be a pointer to nowhere
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	b360      	cbz	r0, 8005056 <ring_buffer_put+0x66>
    if(ring_buffer_free_elements(rbd) >= num)  // is there enough space in buffer for num of data
 8004ffc:	f7ff fff3 	bl	8004fe6 <ring_buffer_free_elements>
 8005000:	4290      	cmp	r0, r2
 8005002:	d32a      	bcc.n	800505a <ring_buffer_put+0x6a>
    	if(rbd->head >= rbd->n_elem) // reset ring buffer head
 8005004:	68a2      	ldr	r2, [r4, #8]
 8005006:	6863      	ldr	r3, [r4, #4]
 8005008:	429a      	cmp	r2, r3
          rbd->head = 0;
 800500a:	bf24      	itt	cs
 800500c:	2300      	movcs	r3, #0
 800500e:	60a3      	strcs	r3, [r4, #8]
      num_to_end = rbd->n_elem - rbd->head; // that many data can be written into buffer, before reaching buffer last element
 8005010:	6866      	ldr	r6, [r4, #4]
 8005012:	68a3      	ldr	r3, [r4, #8]
    	memcpy(&(rbd->buff[rbd->head]), data, num_to_end); //write to buffer partial data
 8005014:	6820      	ldr	r0, [r4, #0]
      num_to_end = rbd->n_elem - rbd->head; // that many data can be written into buffer, before reaching buffer last element
 8005016:	1af6      	subs	r6, r6, r3
      if(num_to_end < num) // if there is not enough space for "num" of data before reaching buffer last element
 8005018:	42b5      	cmp	r5, r6
    	memcpy(&(rbd->buff[rbd->head]), data, num_to_end); //write to buffer partial data
 800501a:	68a3      	ldr	r3, [r4, #8]
      if(num_to_end < num) // if there is not enough space for "num" of data before reaching buffer last element
 800501c:	d913      	bls.n	8005046 <ring_buffer_put+0x56>
    	memcpy(&(rbd->buff[rbd->head]), data, num_to_end); //write to buffer partial data
 800501e:	4632      	mov	r2, r6
 8005020:	4418      	add	r0, r3
        memcpy(rbd->buff, (data + num_to_end), (num - num_to_end)); //write to buffer rest of the data, starting with buffer[0]
 8005022:	eba5 0806 	sub.w	r8, r5, r6
    	memcpy(&(rbd->buff[rbd->head]), data, num_to_end); //write to buffer partial data
 8005026:	f001 fed3 	bl	8006dd0 <memcpy>
        memcpy(rbd->buff, (data + num_to_end), (num - num_to_end)); //write to buffer rest of the data, starting with buffer[0]
 800502a:	6820      	ldr	r0, [r4, #0]
 800502c:	4642      	mov	r2, r8
 800502e:	19b9      	adds	r1, r7, r6
 8005030:	f001 fece 	bl	8006dd0 <memcpy>
        rbd->head = num - num_to_end;  //head
 8005034:	f8c4 8008 	str.w	r8, [r4, #8]
      status = RB_OK;
 8005038:	2000      	movs	r0, #0
        rbd->count = rbd->count + num; // increment counter for num of data
 800503a:	6923      	ldr	r3, [r4, #16]
 800503c:	441d      	add	r5, r3
 800503e:	6125      	str	r5, [r4, #16]
  rbd->status = status;
 8005040:	7520      	strb	r0, [r4, #20]
}
 8005042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	memcpy(&(rbd->buff[rbd->head]), data, num); //write to buffer all num of data in one piece
 8005046:	4418      	add	r0, r3
 8005048:	462a      	mov	r2, r5
 800504a:	f001 fec1 	bl	8006dd0 <memcpy>
        rbd->head = rbd->head + num;  // increment head
 800504e:	68a3      	ldr	r3, [r4, #8]
 8005050:	442b      	add	r3, r5
 8005052:	60a3      	str	r3, [r4, #8]
 8005054:	e7f0      	b.n	8005038 <ring_buffer_put+0x48>
  rb_status_t status = RB_ERROR;
 8005056:	2001      	movs	r0, #1
 8005058:	e7f2      	b.n	8005040 <ring_buffer_put+0x50>
    	status = RB_NOT_ENOUGH_SPACE;
 800505a:	2004      	movs	r0, #4
 800505c:	e7f0      	b.n	8005040 <ring_buffer_put+0x50>
	...

08005060 <dmx_serial_process>:
uint8_t escaped = 0;

#define ESC_CHAR 0x5C

void dmx_serial_process(void)
{
 8005060:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint8_t data;
	uint32_t regsize =  get_reg_length();
 8005064:	f7fe ff74 	bl	8003f50 <get_reg_length>
 8005068:	4605      	mov	r5, r0

	while ((RB_OK == ring_buffer_get(&rx_buff, &data, 1)) && (reg_count<regsize) && (syncstart == 1))
 800506a:	4f33      	ldr	r7, [pc, #204]	; (8005138 <dmx_serial_process+0xd8>)
 800506c:	4e33      	ldr	r6, [pc, #204]	; (800513c <dmx_serial_process+0xdc>)
 800506e:	2201      	movs	r2, #1
 8005070:	f10d 0107 	add.w	r1, sp, #7
 8005074:	4638      	mov	r0, r7
 8005076:	f7ff ff82 	bl	8004f7e <ring_buffer_get>
 800507a:	4c31      	ldr	r4, [pc, #196]	; (8005140 <dmx_serial_process+0xe0>)
 800507c:	b990      	cbnz	r0, 80050a4 <dmx_serial_process+0x44>
 800507e:	8820      	ldrh	r0, [r4, #0]
 8005080:	42a8      	cmp	r0, r5
 8005082:	d20f      	bcs.n	80050a4 <dmx_serial_process+0x44>
 8005084:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8005144 <dmx_serial_process+0xe4>
 8005088:	f898 3000 	ldrb.w	r3, [r8]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d109      	bne.n	80050a4 <dmx_serial_process+0x44>
	{
		if ((data == ESC_CHAR) && (escaped == 0))
 8005090:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005094:	f896 9000 	ldrb.w	r9, [r6]
 8005098:	295c      	cmp	r1, #92	; 0x5c
 800509a:	d11b      	bne.n	80050d4 <dmx_serial_process+0x74>
 800509c:	f1b9 0f00 	cmp.w	r9, #0
 80050a0:	d12c      	bne.n	80050fc <dmx_serial_process+0x9c>
					reg_count++;
					break;
				default:			//Everything else we just ignore
					break;
			}
			escaped = 0;
 80050a2:	7033      	strb	r3, [r6, #0]
			return;
		}
	}

	//If we have exceeded the number of registers or haven't synced yet just pull a byte
	if ((reg_count>=regsize) || (syncstart == 0))
 80050a4:	8823      	ldrh	r3, [r4, #0]
 80050a6:	42ab      	cmp	r3, r5
 80050a8:	d202      	bcs.n	80050b0 <dmx_serial_process+0x50>
 80050aa:	4b26      	ldr	r3, [pc, #152]	; (8005144 <dmx_serial_process+0xe4>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	bb13      	cbnz	r3, 80050f6 <dmx_serial_process+0x96>
	{
		if (RB_OK == ring_buffer_get(&rx_buff, &data, 1))
 80050b0:	2201      	movs	r2, #1
 80050b2:	f10d 0107 	add.w	r1, sp, #7
 80050b6:	4820      	ldr	r0, [pc, #128]	; (8005138 <dmx_serial_process+0xd8>)
 80050b8:	f7ff ff61 	bl	8004f7e <ring_buffer_get>
 80050bc:	b9d8      	cbnz	r0, 80050f6 <dmx_serial_process+0x96>
		{
			//If it happens to be the escape byte we go into escape mode
			if ((data == ESC_CHAR) && (escaped == 0))
 80050be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80050c2:	4a1e      	ldr	r2, [pc, #120]	; (800513c <dmx_serial_process+0xdc>)
 80050c4:	2b5c      	cmp	r3, #92	; 0x5c
 80050c6:	7811      	ldrb	r1, [r2, #0]
 80050c8:	4610      	mov	r0, r2
 80050ca:	d128      	bne.n	800511e <dmx_serial_process+0xbe>
 80050cc:	bb61      	cbnz	r1, 8005128 <dmx_serial_process+0xc8>
			{
				escaped = 1;
 80050ce:	2301      	movs	r3, #1
 80050d0:	7013      	strb	r3, [r2, #0]
				return;
 80050d2:	e010      	b.n	80050f6 <dmx_serial_process+0x96>
		if (escaped)
 80050d4:	f1b9 0f00 	cmp.w	r9, #0
 80050d8:	d016      	beq.n	8005108 <dmx_serial_process+0xa8>
			switch (data)
 80050da:	296d      	cmp	r1, #109	; 0x6d
 80050dc:	d005      	beq.n	80050ea <dmx_serial_process+0x8a>
 80050de:	b911      	cbnz	r1, 80050e6 <dmx_serial_process+0x86>
					reg_count = 0;
 80050e0:	8021      	strh	r1, [r4, #0]
					syncstart = 1;
 80050e2:	f888 3000 	strb.w	r3, [r8]
			escaped = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e7db      	b.n	80050a2 <dmx_serial_process+0x42>
					UART_mode_SERIAL = (int)UART_MODE_SHELL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	4a16      	ldr	r2, [pc, #88]	; (8005148 <dmx_serial_process+0xe8>)
					reg_count = 0;
 80050ee:	8023      	strh	r3, [r4, #0]
					UART_mode_SERIAL = (int)UART_MODE_SHELL;
 80050f0:	6013      	str	r3, [r2, #0]
					syncstart = 0;
 80050f2:	4a14      	ldr	r2, [pc, #80]	; (8005144 <dmx_serial_process+0xe4>)
 80050f4:	7013      	strb	r3, [r2, #0]
		else
		{
			return;
		}
	}
}
 80050f6:	b003      	add	sp, #12
 80050f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					set_reg(reg_count, ESC_CHAR);
 80050fc:	f7fe ff54 	bl	8003fa8 <set_reg>
					reg_count++;
 8005100:	8823      	ldrh	r3, [r4, #0]
 8005102:	3301      	adds	r3, #1
 8005104:	8023      	strh	r3, [r4, #0]
					break;
 8005106:	e7ee      	b.n	80050e6 <dmx_serial_process+0x86>
		set_reg(reg_count, data);
 8005108:	f7fe ff4e 	bl	8003fa8 <set_reg>
		reg_count++;
 800510c:	8823      	ldrh	r3, [r4, #0]
 800510e:	3301      	adds	r3, #1
 8005110:	b29b      	uxth	r3, r3
		if (reg_count >=regsize)
 8005112:	42ab      	cmp	r3, r5
		reg_count++;
 8005114:	8023      	strh	r3, [r4, #0]
		if (reg_count >=regsize)
 8005116:	d3aa      	bcc.n	800506e <dmx_serial_process+0xe>
			syncstart = 0;
 8005118:	f888 9000 	strb.w	r9, [r8]
			return;
 800511c:	e7eb      	b.n	80050f6 <dmx_serial_process+0x96>
			if (escaped)
 800511e:	2900      	cmp	r1, #0
 8005120:	d0e9      	beq.n	80050f6 <dmx_serial_process+0x96>
				switch (data)
 8005122:	b123      	cbz	r3, 800512e <dmx_serial_process+0xce>
 8005124:	2b6d      	cmp	r3, #109	; 0x6d
 8005126:	d0e0      	beq.n	80050ea <dmx_serial_process+0x8a>
				escaped = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	7003      	strb	r3, [r0, #0]
 800512c:	e7e3      	b.n	80050f6 <dmx_serial_process+0x96>
						syncstart = 1;
 800512e:	2201      	movs	r2, #1
						reg_count = 0;
 8005130:	8023      	strh	r3, [r4, #0]
						syncstart = 1;
 8005132:	4b04      	ldr	r3, [pc, #16]	; (8005144 <dmx_serial_process+0xe4>)
 8005134:	701a      	strb	r2, [r3, #0]
						break;
 8005136:	e7f7      	b.n	8005128 <dmx_serial_process+0xc8>
 8005138:	20000b14 	.word	0x20000b14
 800513c:	20000424 	.word	0x20000424
 8005140:	20000426 	.word	0x20000426
 8005144:	20000428 	.word	0x20000428
 8005148:	20000420 	.word	0x20000420

0800514c <tracer_puts>:
	}
	HAL_UART_Transmit(&huart3, &ch, 1, 5000);
}

void tracer_puts(uint8_t *str,const uint16_t size)
{
 800514c:	b570      	push	{r4, r5, r6, lr}
	if (USB_Active)
 800514e:	4b08      	ldr	r3, [pc, #32]	; (8005170 <tracer_puts+0x24>)
{
 8005150:	4604      	mov	r4, r0
	if (USB_Active)
 8005152:	781b      	ldrb	r3, [r3, #0]
{
 8005154:	460d      	mov	r5, r1
	if (USB_Active)
 8005156:	b10b      	cbz	r3, 800515c <tracer_puts+0x10>
	{
		CDC_Transmit_FS(str,size);
 8005158:	f001 f95e 	bl	8006418 <CDC_Transmit_FS>
	}
	HAL_UART_Transmit(&huart3,str,size, 5000);
 800515c:	462a      	mov	r2, r5
 800515e:	4621      	mov	r1, r4
}
 8005160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&huart3,str,size, 5000);
 8005164:	f241 3388 	movw	r3, #5000	; 0x1388
 8005168:	4802      	ldr	r0, [pc, #8]	; (8005174 <tracer_puts+0x28>)
 800516a:	f7fd bc93 	b.w	8002a94 <HAL_UART_Transmit>
 800516e:	bf00      	nop
 8005170:	20000422 	.word	0x20000422
 8005174:	20000b2c 	.word	0x20000b2c

08005178 <tracer_getchar>:

#ifdef USE_UART_IRQ
uint8_t tracer_getchar(void)
{
 8005178:	b507      	push	{r0, r1, r2, lr}
	uint8_t data;
	if (RB_OK == ring_buffer_get(&rx_buff, &data, 1))
 800517a:	2201      	movs	r2, #1
 800517c:	f10d 0107 	add.w	r1, sp, #7
 8005180:	4805      	ldr	r0, [pc, #20]	; (8005198 <tracer_getchar+0x20>)
 8005182:	f7ff fefc 	bl	8004f7e <ring_buffer_get>
 8005186:	b920      	cbnz	r0, 8005192 <tracer_getchar+0x1a>
		return data;
 8005188:	f89d 0007 	ldrb.w	r0, [sp, #7]
	else
		return 0;
}
 800518c:	b003      	add	sp, #12
 800518e:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
 8005192:	2000      	movs	r0, #0
 8005194:	e7fa      	b.n	800518c <tracer_getchar+0x14>
 8005196:	bf00      	nop
 8005198:	20000b14 	.word	0x20000b14

0800519c <init_settings>:
#define PAGE_SETTING_START 123
#define PAGE_SETTING_COUNT 4


void init_settings(void)
{
 800519c:	b510      	push	{r4, lr}
	//Set everything to 0....
	memset(&settings,0,sizeof(settings_s));
 800519e:	4c17      	ldr	r4, [pc, #92]	; (80051fc <init_settings+0x60>)
 80051a0:	2238      	movs	r2, #56	; 0x38
 80051a2:	2100      	movs	r1, #0
 80051a4:	4620      	mov	r0, r4
 80051a6:	f001 fe1e 	bl	8006de6 <memset>

	//Set deviations from 0...
	settings.max_brightness = 255;
 80051aa:	22ff      	movs	r2, #255	; 0xff
 80051ac:	f824 2c02 	strh.w	r2, [r4, #-2]
	settings.strip1_speed = 10;
 80051b0:	f640 220a 	movw	r2, #2570	; 0xa0a
	settings.max_brightness = 255;
 80051b4:	1ea3      	subs	r3, r4, #2
	settings.strip1_speed = 10;
 80051b6:	831a      	strh	r2, [r3, #24]
	settings.strip1_size = 10;
 80051b8:	220a      	movs	r2, #10
 80051ba:	769a      	strb	r2, [r3, #26]
	settings.strip1_complexity = 10;
	settings.strip2_speed = 10;
 80051bc:	77da      	strb	r2, [r3, #31]
	settings.strip2_size = 10;
 80051be:	f883 2020 	strb.w	r2, [r3, #32]
	settings.strip2_complexity = 10;
 80051c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


	settings.strip1_length = 100;
 80051c6:	2264      	movs	r2, #100	; 0x64
	settings.strip2_length = 100;

	settings.offset_red = -100;
 80051c8:	f64f 719c 	movw	r1, #65436	; 0xff9c
	settings.strip1_length = 100;
 80051cc:	84da      	strh	r2, [r3, #38]	; 0x26
	settings.strip2_length = 100;
 80051ce:	851a      	strh	r2, [r3, #40]	; 0x28
	settings.gain_red = 100;    //Gain * 100
 80051d0:	879a      	strh	r2, [r3, #60]	; 0x3c
	settings.gamma_red = 220;   //Gamma * 100
	settings.offset_green = -80;
	settings.gain_green =100;    //Gain * 100
 80051d2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	settings.gamma_green = 220;   //Gamma * 100
	settings.offset_blue = -80;
	settings.gain_blue = 100;    //Gain * 100
 80051d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	settings.gamma_blue = 220;   //Gamma * 100

	settings.fx_multiplier = 4;
 80051da:	2204      	movs	r2, #4
	settings.offset_green = -80;
 80051dc:	f64f 70b0 	movw	r0, #65456	; 0xffb0
	settings.offset_red = -100;
 80051e0:	8759      	strh	r1, [r3, #58]	; 0x3a
	settings.gamma_red = 220;   //Gamma * 100
 80051e2:	21dc      	movs	r1, #220	; 0xdc
	settings.fx_multiplier = 4;
 80051e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	settings.gamma_red = 220;   //Gamma * 100
 80051e8:	87d9      	strh	r1, [r3, #62]	; 0x3e
	settings.offset_green = -80;
 80051ea:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
	settings.gamma_green = 220;   //Gamma * 100
 80051ee:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
	settings.offset_blue = -80;
 80051f2:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
	settings.gamma_blue = 220;   //Gamma * 100
 80051f6:	f8a3 104a 	strh.w	r1, [r3, #74]	; 0x4a
	settings.UART_Mode_UART = (uint8_t)UART_MODE_SHELL;
	settings.UART_Mode_USB = (uint8_t)UART_MODE_SHELL;
}
 80051fa:	bd10      	pop	{r4, pc}
 80051fc:	20000a72 	.word	0x20000a72

08005200 <apply_settings>:

void apply_settings(void)
{
 8005200:	b510      	push	{r4, lr}
	//Apply settings to registers
	set_reg(MAX_BRIGHTNESS,settings.max_brightness);
 8005202:	4c3a      	ldr	r4, [pc, #232]	; (80052ec <apply_settings+0xec>)
 8005204:	2000      	movs	r0, #0
 8005206:	7821      	ldrb	r1, [r4, #0]
 8005208:	f7fe fece 	bl	8003fa8 <set_reg>
	set_reg(CH1_RED,settings.pwm_ch1_r);
 800520c:	78a1      	ldrb	r1, [r4, #2]
 800520e:	2001      	movs	r0, #1
 8005210:	f7fe feca 	bl	8003fa8 <set_reg>
	set_reg(CH1_GREEN,settings.pwm_ch1_g);
 8005214:	7921      	ldrb	r1, [r4, #4]
 8005216:	2002      	movs	r0, #2
 8005218:	f7fe fec6 	bl	8003fa8 <set_reg>
	set_reg(CH1_BLUE,settings.pwm_ch1_b);
 800521c:	79a1      	ldrb	r1, [r4, #6]
 800521e:	2003      	movs	r0, #3
 8005220:	f7fe fec2 	bl	8003fa8 <set_reg>
	set_reg(CH2_RED,settings.pwm_ch2_r);
 8005224:	7a21      	ldrb	r1, [r4, #8]
 8005226:	2004      	movs	r0, #4
 8005228:	f7fe febe 	bl	8003fa8 <set_reg>
	set_reg(CH2_GREEN,settings.pwm_ch2_g);
 800522c:	7aa1      	ldrb	r1, [r4, #10]
 800522e:	2005      	movs	r0, #5
 8005230:	f7fe feba 	bl	8003fa8 <set_reg>
	set_reg(CH2_BLUE,settings.pwm_ch2_b);
 8005234:	7b21      	ldrb	r1, [r4, #12]
 8005236:	2006      	movs	r0, #6
 8005238:	f7fe feb6 	bl	8003fa8 <set_reg>
	set_reg(CH3_RED,settings.pwm_ch3_r);
 800523c:	7ba1      	ldrb	r1, [r4, #14]
 800523e:	2007      	movs	r0, #7
 8005240:	f7fe feb2 	bl	8003fa8 <set_reg>
	set_reg(CH3_GREEN,settings.pwm_ch3_g);
 8005244:	7c21      	ldrb	r1, [r4, #16]
 8005246:	2008      	movs	r0, #8
 8005248:	f7fe feae 	bl	8003fa8 <set_reg>
	set_reg(CH3_BLUE,settings.pwm_ch3_b);
 800524c:	7ca1      	ldrb	r1, [r4, #18]
 800524e:	2009      	movs	r0, #9
 8005250:	f7fe feaa 	bl	8003fa8 <set_reg>
	set_reg(CH3_WHITE,settings.pwm_ch3_w);
 8005254:	7d21      	ldrb	r1, [r4, #20]
 8005256:	200a      	movs	r0, #10
 8005258:	f7fe fea6 	bl	8003fa8 <set_reg>

	//Deal with LED Strip Registers
	if (DMX_MODE2 == get_mode())
 800525c:	f7fe fe72 	bl	8003f44 <get_mode>
 8005260:	2801      	cmp	r0, #1
 8005262:	d142      	bne.n	80052ea <apply_settings+0xea>
	{
		set_reg(FX_SELECT,settings.fx_select);
 8005264:	7da1      	ldrb	r1, [r4, #22]
 8005266:	200b      	movs	r0, #11
 8005268:	f7fe fe9e 	bl	8003fa8 <set_reg>

		set_reg(STRIP1_PATTERN,settings.strip1_pattern);
 800526c:	7de1      	ldrb	r1, [r4, #23]
 800526e:	200c      	movs	r0, #12
 8005270:	f7fe fe9a 	bl	8003fa8 <set_reg>
		set_reg(STRIP1_SPEED,settings.strip1_speed);
 8005274:	7e21      	ldrb	r1, [r4, #24]
 8005276:	200d      	movs	r0, #13
 8005278:	f7fe fe96 	bl	8003fa8 <set_reg>
		set_reg(STRIP1_SIZE,settings.strip1_size);
 800527c:	7e61      	ldrb	r1, [r4, #25]
 800527e:	200e      	movs	r0, #14
 8005280:	f7fe fe92 	bl	8003fa8 <set_reg>
		set_reg(STRIP1_COMPLEXITY,settings.strip1_complexity);
 8005284:	7ea1      	ldrb	r1, [r4, #26]
 8005286:	200f      	movs	r0, #15
 8005288:	f7fe fe8e 	bl	8003fa8 <set_reg>
		set_reg(STRIP1_V1,settings.strip1_v1);
 800528c:	7ee1      	ldrb	r1, [r4, #27]
 800528e:	2010      	movs	r0, #16
 8005290:	f7fe fe8a 	bl	8003fa8 <set_reg>
		set_reg(STRIP1_V2,settings.strip1_v2);
 8005294:	7f21      	ldrb	r1, [r4, #28]
 8005296:	2011      	movs	r0, #17
 8005298:	f7fe fe86 	bl	8003fa8 <set_reg>
		set_reg(STRIP1_V3,settings.strip1_v3);
 800529c:	7f61      	ldrb	r1, [r4, #29]
 800529e:	2012      	movs	r0, #18
 80052a0:	f7fe fe82 	bl	8003fa8 <set_reg>

		set_reg(STRIP2_PATTERN,settings.strip2_pattern);
 80052a4:	7fa1      	ldrb	r1, [r4, #30]
 80052a6:	2013      	movs	r0, #19
 80052a8:	f7fe fe7e 	bl	8003fa8 <set_reg>
		set_reg(STRIP2_SPEED,settings.strip2_speed);
 80052ac:	7fe1      	ldrb	r1, [r4, #31]
 80052ae:	2014      	movs	r0, #20
 80052b0:	f7fe fe7a 	bl	8003fa8 <set_reg>
		set_reg(STRIP2_SIZE,settings.strip2_size);
 80052b4:	f894 1020 	ldrb.w	r1, [r4, #32]
 80052b8:	2015      	movs	r0, #21
 80052ba:	f7fe fe75 	bl	8003fa8 <set_reg>
		set_reg(STRIP2_COMPLEXITY,settings.strip2_complexity);
 80052be:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 80052c2:	2016      	movs	r0, #22
 80052c4:	f7fe fe70 	bl	8003fa8 <set_reg>
		set_reg(STRIP2_V1,settings.strip2_v1);
 80052c8:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 80052cc:	2017      	movs	r0, #23
 80052ce:	f7fe fe6b 	bl	8003fa8 <set_reg>
		set_reg(STRIP2_V2,settings.strip2_v2);
 80052d2:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80052d6:	2018      	movs	r0, #24
 80052d8:	f7fe fe66 	bl	8003fa8 <set_reg>
		set_reg(STRIP2_V3,settings.strip2_v3);
 80052dc:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80052e0:	2019      	movs	r0, #25
	}
}
 80052e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		set_reg(STRIP2_V3,settings.strip2_v3);
 80052e6:	f7fe be5f 	b.w	8003fa8 <set_reg>
}
 80052ea:	bd10      	pop	{r4, pc}
 80052ec:	20000a70 	.word	0x20000a70

080052f0 <load_settings>:

void load_settings(void)
{
	EE_Reads(0,sizeof(settings_s),(uint32_t*)&settings);
 80052f0:	4a02      	ldr	r2, [pc, #8]	; (80052fc <load_settings+0xc>)
 80052f2:	214c      	movs	r1, #76	; 0x4c
 80052f4:	2000      	movs	r0, #0
 80052f6:	f7fe bf7f 	b.w	80041f8 <EE_Reads>
 80052fa:	bf00      	nop
 80052fc:	20000a70 	.word	0x20000a70

08005300 <save_settings>:
}

void save_settings(void)
{
	EE_Writes(0,256,(uint32_t*)&settings);
 8005300:	4a02      	ldr	r2, [pc, #8]	; (800530c <save_settings+0xc>)
 8005302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005306:	2000      	movs	r0, #0
 8005308:	f7fe bf8a 	b.w	8004220 <EE_Writes>
 800530c:	20000a70 	.word	0x20000a70

08005310 <print_settings>:
}

void print_settings(void)
{
 8005310:	b538      	push	{r3, r4, r5, lr}
	print("Defaults");
	print("-------");
 8005312:	4d89      	ldr	r5, [pc, #548]	; (8005538 <print_settings+0x228>)
	print("MAX_BRIGHTN: %d",settings.max_brightness);
 8005314:	4c89      	ldr	r4, [pc, #548]	; (800553c <print_settings+0x22c>)
	print("Defaults");
 8005316:	488a      	ldr	r0, [pc, #552]	; (8005540 <print_settings+0x230>)
 8005318:	f000 f9ea 	bl	80056f0 <print>
	print("-------");
 800531c:	4628      	mov	r0, r5
 800531e:	f000 f9e7 	bl	80056f0 <print>
	print("MAX_BRIGHTN: %d",settings.max_brightness);
 8005322:	8821      	ldrh	r1, [r4, #0]
 8005324:	4887      	ldr	r0, [pc, #540]	; (8005544 <print_settings+0x234>)
 8005326:	f000 f9e3 	bl	80056f0 <print>
	print("CH1_RED: %d",settings.pwm_ch1_r);
 800532a:	8861      	ldrh	r1, [r4, #2]
 800532c:	4886      	ldr	r0, [pc, #536]	; (8005548 <print_settings+0x238>)
 800532e:	f000 f9df 	bl	80056f0 <print>
	print("CH1_GREEN: %d",settings.pwm_ch1_g);
 8005332:	88a1      	ldrh	r1, [r4, #4]
 8005334:	4885      	ldr	r0, [pc, #532]	; (800554c <print_settings+0x23c>)
 8005336:	f000 f9db 	bl	80056f0 <print>
	print("CH1_BLUE: %d",settings.pwm_ch1_b);
 800533a:	88e1      	ldrh	r1, [r4, #6]
 800533c:	4884      	ldr	r0, [pc, #528]	; (8005550 <print_settings+0x240>)
 800533e:	f000 f9d7 	bl	80056f0 <print>
	print("CH2_RED: %d",settings.pwm_ch2_r);
 8005342:	8921      	ldrh	r1, [r4, #8]
 8005344:	4883      	ldr	r0, [pc, #524]	; (8005554 <print_settings+0x244>)
 8005346:	f000 f9d3 	bl	80056f0 <print>
	print("CH2_GREEN: %d",settings.pwm_ch2_g);
 800534a:	8961      	ldrh	r1, [r4, #10]
 800534c:	4882      	ldr	r0, [pc, #520]	; (8005558 <print_settings+0x248>)
 800534e:	f000 f9cf 	bl	80056f0 <print>
	print("CH2_BLUE: %d",settings.pwm_ch2_b);
 8005352:	89a1      	ldrh	r1, [r4, #12]
 8005354:	4881      	ldr	r0, [pc, #516]	; (800555c <print_settings+0x24c>)
 8005356:	f000 f9cb 	bl	80056f0 <print>
	print("CH3_RED: %d",settings.pwm_ch3_r);
 800535a:	89e1      	ldrh	r1, [r4, #14]
 800535c:	4880      	ldr	r0, [pc, #512]	; (8005560 <print_settings+0x250>)
 800535e:	f000 f9c7 	bl	80056f0 <print>
	print("CH3_GREEN: %d",settings.pwm_ch3_g);
 8005362:	8a21      	ldrh	r1, [r4, #16]
 8005364:	487f      	ldr	r0, [pc, #508]	; (8005564 <print_settings+0x254>)
 8005366:	f000 f9c3 	bl	80056f0 <print>
	print("CH3_BLUE: %d",settings.pwm_ch3_b);
 800536a:	8a61      	ldrh	r1, [r4, #18]
 800536c:	487e      	ldr	r0, [pc, #504]	; (8005568 <print_settings+0x258>)
 800536e:	f000 f9bf 	bl	80056f0 <print>
	print("CH3_WHITE: %d",settings.pwm_ch3_w);
 8005372:	8aa1      	ldrh	r1, [r4, #20]
 8005374:	487d      	ldr	r0, [pc, #500]	; (800556c <print_settings+0x25c>)
 8005376:	f000 f9bb 	bl	80056f0 <print>
	print("FX_SELECT: %d",settings.fx_select);
 800537a:	7da1      	ldrb	r1, [r4, #22]
 800537c:	487c      	ldr	r0, [pc, #496]	; (8005570 <print_settings+0x260>)
 800537e:	f000 f9b7 	bl	80056f0 <print>

	print("STRIP1_PATTERN: %d",settings.strip1_pattern);
 8005382:	7de1      	ldrb	r1, [r4, #23]
 8005384:	487b      	ldr	r0, [pc, #492]	; (8005574 <print_settings+0x264>)
 8005386:	f000 f9b3 	bl	80056f0 <print>
	print("STRIP1_SPEED: %d",settings.strip1_speed);
 800538a:	7e21      	ldrb	r1, [r4, #24]
 800538c:	487a      	ldr	r0, [pc, #488]	; (8005578 <print_settings+0x268>)
 800538e:	f000 f9af 	bl	80056f0 <print>
	print("STRIP1_SIZE: %d",settings.strip1_size);
 8005392:	7e61      	ldrb	r1, [r4, #25]
 8005394:	4879      	ldr	r0, [pc, #484]	; (800557c <print_settings+0x26c>)
 8005396:	f000 f9ab 	bl	80056f0 <print>
	print("STRIP1_COMPLEX: %d",settings.strip1_complexity);
 800539a:	7ea1      	ldrb	r1, [r4, #26]
 800539c:	4878      	ldr	r0, [pc, #480]	; (8005580 <print_settings+0x270>)
 800539e:	f000 f9a7 	bl	80056f0 <print>
	print("STRIP1_V1: %d",settings.strip1_v1);
 80053a2:	7ee1      	ldrb	r1, [r4, #27]
 80053a4:	4877      	ldr	r0, [pc, #476]	; (8005584 <print_settings+0x274>)
 80053a6:	f000 f9a3 	bl	80056f0 <print>
	print("STRIP1_V2: %d",settings.strip1_v2);
 80053aa:	7f21      	ldrb	r1, [r4, #28]
 80053ac:	4876      	ldr	r0, [pc, #472]	; (8005588 <print_settings+0x278>)
 80053ae:	f000 f99f 	bl	80056f0 <print>
	print("STRIP1_V3: %d",settings.strip1_v3);
 80053b2:	7f61      	ldrb	r1, [r4, #29]
 80053b4:	4875      	ldr	r0, [pc, #468]	; (800558c <print_settings+0x27c>)
 80053b6:	f000 f99b 	bl	80056f0 <print>

	print("STRIP2_PATTERN: %d",settings.strip2_pattern);
 80053ba:	7fa1      	ldrb	r1, [r4, #30]
 80053bc:	4874      	ldr	r0, [pc, #464]	; (8005590 <print_settings+0x280>)
 80053be:	f000 f997 	bl	80056f0 <print>
	print("STRIP2_SPEED: %d",settings.strip2_speed);
 80053c2:	7fe1      	ldrb	r1, [r4, #31]
 80053c4:	4873      	ldr	r0, [pc, #460]	; (8005594 <print_settings+0x284>)
 80053c6:	f000 f993 	bl	80056f0 <print>
	print("STRIP2_SIZE: %d",settings.strip2_size);
 80053ca:	f894 1020 	ldrb.w	r1, [r4, #32]
 80053ce:	4872      	ldr	r0, [pc, #456]	; (8005598 <print_settings+0x288>)
 80053d0:	f000 f98e 	bl	80056f0 <print>
	print("STRIP2_COMPLEX: %d",settings.strip2_complexity);
 80053d4:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 80053d8:	4870      	ldr	r0, [pc, #448]	; (800559c <print_settings+0x28c>)
 80053da:	f000 f989 	bl	80056f0 <print>
	print("STRIP2_V1: %d",settings.strip2_v1);
 80053de:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 80053e2:	486f      	ldr	r0, [pc, #444]	; (80055a0 <print_settings+0x290>)
 80053e4:	f000 f984 	bl	80056f0 <print>
	print("STRIP2_V2: %d",settings.strip2_v2);
 80053e8:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80053ec:	486d      	ldr	r0, [pc, #436]	; (80055a4 <print_settings+0x294>)
 80053ee:	f000 f97f 	bl	80056f0 <print>
	print("STRIP2_V3: %d",settings.strip2_v3);
 80053f2:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80053f6:	486c      	ldr	r0, [pc, #432]	; (80055a8 <print_settings+0x298>)
 80053f8:	f000 f97a 	bl	80056f0 <print>

	print("Settings");
 80053fc:	486b      	ldr	r0, [pc, #428]	; (80055ac <print_settings+0x29c>)
 80053fe:	f000 f977 	bl	80056f0 <print>
	print("-------");
 8005402:	4628      	mov	r0, r5
 8005404:	f000 f974 	bl	80056f0 <print>
	//FX Multiplier
	print("FX Multiplier: %d",settings.fx_multiplier);
 8005408:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 800540c:	4868      	ldr	r0, [pc, #416]	; (80055b0 <print_settings+0x2a0>)
 800540e:	f000 f96f 	bl	80056f0 <print>
	//Strips
	print("Strip 1 Length: %d",settings.strip1_length);
 8005412:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8005414:	4867      	ldr	r0, [pc, #412]	; (80055b4 <print_settings+0x2a4>)
 8005416:	f000 f96b 	bl	80056f0 <print>
	print("Strip 2 Length: %d",settings.strip2_length);
 800541a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800541c:	4866      	ldr	r0, [pc, #408]	; (80055b8 <print_settings+0x2a8>)
 800541e:	f000 f967 	bl	80056f0 <print>

	print("UART Mode Serial: %d",settings.UART_Mode_UART);
 8005422:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8005426:	4865      	ldr	r0, [pc, #404]	; (80055bc <print_settings+0x2ac>)
 8005428:	f000 f962 	bl	80056f0 <print>
	print("UART Mode USB: %d",settings.UART_Mode_USB);
 800542c:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 8005430:	4863      	ldr	r0, [pc, #396]	; (80055c0 <print_settings+0x2b0>)
 8005432:	f000 f95d 	bl	80056f0 <print>

	//Triggers
	print("Triggers");
 8005436:	4863      	ldr	r0, [pc, #396]	; (80055c4 <print_settings+0x2b4>)
 8005438:	f000 f95a 	bl	80056f0 <print>
	print("--------");
 800543c:	4862      	ldr	r0, [pc, #392]	; (80055c8 <print_settings+0x2b8>)
 800543e:	f000 f957 	bl	80056f0 <print>
	print("Trigger A0 Mode",settings.trigger_mode_A0);
 8005442:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8005446:	4861      	ldr	r0, [pc, #388]	; (80055cc <print_settings+0x2bc>)
 8005448:	f000 f952 	bl	80056f0 <print>
	print("Trigger A0 Reg: %d",settings.trigger_reg_A0);
 800544c:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8005450:	485f      	ldr	r0, [pc, #380]	; (80055d0 <print_settings+0x2c0>)
 8005452:	f000 f94d 	bl	80056f0 <print>
	print("Trigger A0 Reg Low->Hi: %d",settings.trigger_reg_lohi_A0);
 8005456:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800545a:	485e      	ldr	r0, [pc, #376]	; (80055d4 <print_settings+0x2c4>)
 800545c:	f000 f948 	bl	80056f0 <print>
	print("Trigger A0 Val Low->Hi: %d",settings.trigger_val_lohi_A0);
 8005460:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8005464:	485c      	ldr	r0, [pc, #368]	; (80055d8 <print_settings+0x2c8>)
 8005466:	f000 f943 	bl	80056f0 <print>
	print("Trigger A0 Reg Hi->Low: %d",settings.trigger_reg_hilo_A0);
 800546a:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800546e:	485b      	ldr	r0, [pc, #364]	; (80055dc <print_settings+0x2cc>)
 8005470:	f000 f93e 	bl	80056f0 <print>
	print("Trigger A0 Val Hi-Low: %d",settings.trigger_val_hilo_A0);
 8005474:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8005478:	4859      	ldr	r0, [pc, #356]	; (80055e0 <print_settings+0x2d0>)
 800547a:	f000 f939 	bl	80056f0 <print>
	print("Trigger A0 Level: %d",settings.trigger_level_A0);
 800547e:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 8005482:	4858      	ldr	r0, [pc, #352]	; (80055e4 <print_settings+0x2d4>)
 8005484:	f000 f934 	bl	80056f0 <print>

	print("Trigger A1 Mode",settings.trigger_mode_A1);
 8005488:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
 800548c:	4856      	ldr	r0, [pc, #344]	; (80055e8 <print_settings+0x2d8>)
 800548e:	f000 f92f 	bl	80056f0 <print>
	print("Trigger A1 Reg: %d",settings.trigger_reg_A1);
 8005492:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8005496:	4855      	ldr	r0, [pc, #340]	; (80055ec <print_settings+0x2dc>)
 8005498:	f000 f92a 	bl	80056f0 <print>
	print("Trigger A1 Reg Low->Hi: %d",settings.trigger_reg_lohi_A1);
 800549c:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 80054a0:	4853      	ldr	r0, [pc, #332]	; (80055f0 <print_settings+0x2e0>)
 80054a2:	f000 f925 	bl	80056f0 <print>
	print("Trigger A1 Val Low->Hi: %d",settings.trigger_val_lohi_A1);
 80054a6:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
 80054aa:	4852      	ldr	r0, [pc, #328]	; (80055f4 <print_settings+0x2e4>)
 80054ac:	f000 f920 	bl	80056f0 <print>
	print("Trigger A1 Reg Hi->Low: %d",settings.trigger_reg_hilo_A1);
 80054b0:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 80054b4:	4850      	ldr	r0, [pc, #320]	; (80055f8 <print_settings+0x2e8>)
 80054b6:	f000 f91b 	bl	80056f0 <print>
	print("Trigger A1 Val Hi-Low: %d",settings.trigger_val_hilo_A1);
 80054ba:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80054be:	484f      	ldr	r0, [pc, #316]	; (80055fc <print_settings+0x2ec>)
 80054c0:	f000 f916 	bl	80056f0 <print>
	print("Trigger A1 Level: %d",settings.trigger_level_A1);
 80054c4:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80054c8:	484d      	ldr	r0, [pc, #308]	; (8005600 <print_settings+0x2f0>)
 80054ca:	f000 f911 	bl	80056f0 <print>

    //Calibration
	print("Calibration");
 80054ce:	484d      	ldr	r0, [pc, #308]	; (8005604 <print_settings+0x2f4>)
 80054d0:	f000 f90e 	bl	80056f0 <print>
	print("-----------");
 80054d4:	484c      	ldr	r0, [pc, #304]	; (8005608 <print_settings+0x2f8>)
 80054d6:	f000 f90b 	bl	80056f0 <print>
	print("Offset Red: %d",settings.offset_red);
 80054da:	f9b4 103a 	ldrsh.w	r1, [r4, #58]	; 0x3a
 80054de:	484b      	ldr	r0, [pc, #300]	; (800560c <print_settings+0x2fc>)
 80054e0:	f000 f906 	bl	80056f0 <print>
	print("Gain Red: %d",settings.gain_red);
 80054e4:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 80054e8:	4849      	ldr	r0, [pc, #292]	; (8005610 <print_settings+0x300>)
 80054ea:	f000 f901 	bl	80056f0 <print>
	print("Gamma Red: %d",settings.gamma_red);
 80054ee:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
 80054f2:	4848      	ldr	r0, [pc, #288]	; (8005614 <print_settings+0x304>)
 80054f4:	f000 f8fc 	bl	80056f0 <print>
	print("Offset Green: %d",settings.offset_green);
 80054f8:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 80054fc:	4846      	ldr	r0, [pc, #280]	; (8005618 <print_settings+0x308>)
 80054fe:	f000 f8f7 	bl	80056f0 <print>
	print("Gain Green: %d",settings.gain_green);
 8005502:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
 8005506:	4845      	ldr	r0, [pc, #276]	; (800561c <print_settings+0x30c>)
 8005508:	f000 f8f2 	bl	80056f0 <print>
	print("Gamma Green: %d",settings.gamma_green);
 800550c:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
 8005510:	4843      	ldr	r0, [pc, #268]	; (8005620 <print_settings+0x310>)
 8005512:	f000 f8ed 	bl	80056f0 <print>
	print("Offset Blue: %d",settings.offset_blue);
 8005516:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
 800551a:	4842      	ldr	r0, [pc, #264]	; (8005624 <print_settings+0x314>)
 800551c:	f000 f8e8 	bl	80056f0 <print>
	print("Gain Blue: %d",settings.gain_blue);
 8005520:	f9b4 1048 	ldrsh.w	r1, [r4, #72]	; 0x48
 8005524:	4840      	ldr	r0, [pc, #256]	; (8005628 <print_settings+0x318>)
 8005526:	f000 f8e3 	bl	80056f0 <print>
	print("Gamma Blue: %d",settings.gamma_blue);
 800552a:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
 800552e:	483f      	ldr	r0, [pc, #252]	; (800562c <print_settings+0x31c>)
}
 8005530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	print("Gamma Blue: %d",settings.gamma_blue);
 8005534:	f000 b8dc 	b.w	80056f0 <print>
 8005538:	080080d0 	.word	0x080080d0
 800553c:	20000a70 	.word	0x20000a70
 8005540:	08007cb0 	.word	0x08007cb0
 8005544:	08007cb9 	.word	0x08007cb9
 8005548:	08007cc9 	.word	0x08007cc9
 800554c:	08007cd5 	.word	0x08007cd5
 8005550:	08007ce3 	.word	0x08007ce3
 8005554:	08007cf0 	.word	0x08007cf0
 8005558:	08007cfc 	.word	0x08007cfc
 800555c:	08007d0a 	.word	0x08007d0a
 8005560:	08007d17 	.word	0x08007d17
 8005564:	08007d23 	.word	0x08007d23
 8005568:	08007d31 	.word	0x08007d31
 800556c:	08007d3e 	.word	0x08007d3e
 8005570:	08007d4c 	.word	0x08007d4c
 8005574:	08007d5a 	.word	0x08007d5a
 8005578:	08007d6d 	.word	0x08007d6d
 800557c:	08007d7e 	.word	0x08007d7e
 8005580:	08007d8e 	.word	0x08007d8e
 8005584:	08007da1 	.word	0x08007da1
 8005588:	08007daf 	.word	0x08007daf
 800558c:	08007dbd 	.word	0x08007dbd
 8005590:	08007dcb 	.word	0x08007dcb
 8005594:	08007dde 	.word	0x08007dde
 8005598:	08007def 	.word	0x08007def
 800559c:	08007dff 	.word	0x08007dff
 80055a0:	08007e12 	.word	0x08007e12
 80055a4:	08007e20 	.word	0x08007e20
 80055a8:	08007e2e 	.word	0x08007e2e
 80055ac:	08007e3c 	.word	0x08007e3c
 80055b0:	08007e45 	.word	0x08007e45
 80055b4:	08007e57 	.word	0x08007e57
 80055b8:	08007e6a 	.word	0x08007e6a
 80055bc:	08007e7d 	.word	0x08007e7d
 80055c0:	08007e92 	.word	0x08007e92
 80055c4:	08007ea4 	.word	0x08007ea4
 80055c8:	080080cf 	.word	0x080080cf
 80055cc:	08007ead 	.word	0x08007ead
 80055d0:	08007ebd 	.word	0x08007ebd
 80055d4:	08007ed0 	.word	0x08007ed0
 80055d8:	08007eeb 	.word	0x08007eeb
 80055dc:	08007f06 	.word	0x08007f06
 80055e0:	08007f21 	.word	0x08007f21
 80055e4:	08007f3b 	.word	0x08007f3b
 80055e8:	08007f50 	.word	0x08007f50
 80055ec:	08007f60 	.word	0x08007f60
 80055f0:	08007f73 	.word	0x08007f73
 80055f4:	08007f8e 	.word	0x08007f8e
 80055f8:	08007fa9 	.word	0x08007fa9
 80055fc:	08007fc4 	.word	0x08007fc4
 8005600:	08007fde 	.word	0x08007fde
 8005604:	08007ff3 	.word	0x08007ff3
 8005608:	080080cc 	.word	0x080080cc
 800560c:	08007fff 	.word	0x08007fff
 8005610:	0800800e 	.word	0x0800800e
 8005614:	0800801b 	.word	0x0800801b
 8005618:	08008029 	.word	0x08008029
 800561c:	0800803a 	.word	0x0800803a
 8005620:	08008049 	.word	0x08008049
 8005624:	08008059 	.word	0x08008059
 8005628:	08008069 	.word	0x08008069
 800562c:	08008077 	.word	0x08008077

08005630 <cmd_buf_reset>:
    }
}

static void cmd_buf_reset(void)
{
    cmd_buf_idx = 0;
 8005630:	2100      	movs	r1, #0
 8005632:	4b03      	ldr	r3, [pc, #12]	; (8005640 <cmd_buf_reset+0x10>)
    memset(cmd_buf, 0, sizeof(cmd_buf));
 8005634:	2240      	movs	r2, #64	; 0x40
 8005636:	4803      	ldr	r0, [pc, #12]	; (8005644 <cmd_buf_reset+0x14>)
    cmd_buf_idx = 0;
 8005638:	6019      	str	r1, [r3, #0]
    memset(cmd_buf, 0, sizeof(cmd_buf));
 800563a:	f001 bbd4 	b.w	8006de6 <memset>
 800563e:	bf00      	nop
 8005640:	2000046c 	.word	0x2000046c
 8005644:	20000429 	.word	0x20000429

08005648 <send_vt100_key>:
    strncpy(cmd_buf, cmd_hist[cmd_hist_get_idx], sizeof(cmd_buf));
    cmd_buf_idx = strlen(cmd_buf);
}

static void send_vt100_key(vt100_key_t key)
{
 8005648:	b508      	push	{r3, lr}
    vt100_keycode_t * keycode = vt100_get_keycode(key);
 800564a:	f001 f8e5 	bl	8006818 <vt100_get_keycode>
    if (NULL != keycode)
 800564e:	b128      	cbz	r0, 800565c <send_vt100_key+0x14>
    {
        uart_send( keycode->code, keycode->code_len);
    }
}
 8005650:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tracer_puts(bytes,size);
 8005654:	7a01      	ldrb	r1, [r0, #8]
 8005656:	6840      	ldr	r0, [r0, #4]
 8005658:	f7ff bd78 	b.w	800514c <tracer_puts>
}
 800565c:	bd08      	pop	{r3, pc}
	...

08005660 <load_command_from_command_history>:
{
 8005660:	4919      	ldr	r1, [pc, #100]	; (80056c8 <load_command_from_command_history+0x68>)
 8005662:	4a1a      	ldr	r2, [pc, #104]	; (80056cc <load_command_from_command_history+0x6c>)
 8005664:	b510      	push	{r4, lr}
 8005666:	680b      	ldr	r3, [r1, #0]
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	460c      	mov	r4, r1
    if (0 == dir)
 800566c:	b9c0      	cbnz	r0, 80056a0 <load_command_from_command_history+0x40>
        if (0 == cmd_hist_get_idx)
 800566e:	b99b      	cbnz	r3, 8005698 <load_command_from_command_history+0x38>
            if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_put_idx)
 8005670:	2a07      	cmp	r2, #7
 8005672:	d014      	beq.n	800569e <load_command_from_command_history+0x3e>
            cmd_hist_get_idx = SHELL_CMD_HISTORY_LEN - 1;
 8005674:	2307      	movs	r3, #7
            cmd_hist_get_idx = 0;
 8005676:	6023      	str	r3, [r4, #0]
    cmd_buf_reset();
 8005678:	f7ff ffda 	bl	8005630 <cmd_buf_reset>
    strncpy(cmd_buf, cmd_hist[cmd_hist_get_idx], sizeof(cmd_buf));
 800567c:	4b14      	ldr	r3, [pc, #80]	; (80056d0 <load_command_from_command_history+0x70>)
 800567e:	6821      	ldr	r1, [r4, #0]
 8005680:	2240      	movs	r2, #64	; 0x40
 8005682:	eb03 1181 	add.w	r1, r3, r1, lsl #6
 8005686:	4813      	ldr	r0, [pc, #76]	; (80056d4 <load_command_from_command_history+0x74>)
 8005688:	f001 fc9b 	bl	8006fc2 <strncpy>
    cmd_buf_idx = strlen(cmd_buf);
 800568c:	4811      	ldr	r0, [pc, #68]	; (80056d4 <load_command_from_command_history+0x74>)
 800568e:	f7fa fd5d 	bl	800014c <strlen>
 8005692:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <load_command_from_command_history+0x78>)
 8005694:	6018      	str	r0, [r3, #0]
 8005696:	e002      	b.n	800569e <load_command_from_command_history+0x3e>
            if (cmd_hist_get_idx - 1 == cmd_hist_put_idx)
 8005698:	3b01      	subs	r3, #1
 800569a:	4293      	cmp	r3, r2
 800569c:	d1eb      	bne.n	8005676 <load_command_from_command_history+0x16>
}
 800569e:	bd10      	pop	{r4, pc}
        if (cmd_hist_get_idx == cmd_hist_put_idx)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d0fc      	beq.n	800569e <load_command_from_command_history+0x3e>
        if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_get_idx)
 80056a4:	2b07      	cmp	r3, #7
 80056a6:	d105      	bne.n	80056b4 <load_command_from_command_history+0x54>
            if (0 == cmd_hist_put_idx)
 80056a8:	b94a      	cbnz	r2, 80056be <load_command_from_command_history+0x5e>
                cmd_hist_get_idx = 0;
 80056aa:	600a      	str	r2, [r1, #0]
}
 80056ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                cmd_buf_reset();
 80056b0:	f7ff bfbe 	b.w	8005630 <cmd_buf_reset>
            if (cmd_hist_get_idx + 1 == cmd_hist_put_idx)
 80056b4:	1c58      	adds	r0, r3, #1
 80056b6:	4290      	cmp	r0, r2
 80056b8:	d101      	bne.n	80056be <load_command_from_command_history+0x5e>
                cmd_hist_get_idx++;
 80056ba:	6008      	str	r0, [r1, #0]
 80056bc:	e7f6      	b.n	80056ac <load_command_from_command_history+0x4c>
        cmd_hist_get_idx++;
 80056be:	3301      	adds	r3, #1
        if (SHELL_CMD_HISTORY_LEN == cmd_hist_get_idx)
 80056c0:	2b08      	cmp	r3, #8
            cmd_hist_get_idx = 0;
 80056c2:	bf08      	it	eq
 80056c4:	2300      	moveq	r3, #0
 80056c6:	e7d6      	b.n	8005676 <load_command_from_command_history+0x16>
 80056c8:	20000670 	.word	0x20000670
 80056cc:	20000674 	.word	0x20000674
 80056d0:	20000470 	.word	0x20000470
 80056d4:	20000429 	.word	0x20000429
 80056d8:	2000046c 	.word	0x2000046c

080056dc <uart_receive_byte>:
{
 80056dc:	b510      	push	{r4, lr}
 80056de:	4604      	mov	r4, r0
	unsigned char data = tracer_getchar();
 80056e0:	f7ff fd4a 	bl	8005178 <tracer_getchar>
		*byte = 0;
 80056e4:	7020      	strb	r0, [r4, #0]
	if (data == 0)
 80056e6:	b900      	cbnz	r0, 80056ea <uart_receive_byte+0xe>
}
 80056e8:	bd10      	pop	{r4, pc}
		return 1;
 80056ea:	2001      	movs	r0, #1
 80056ec:	e7fc      	b.n	80056e8 <uart_receive_byte+0xc>
	...

080056f0 <print>:
{	
 80056f0:	b40f      	push	{r0, r1, r2, r3}
 80056f2:	b513      	push	{r0, r1, r4, lr}
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80056f4:	4c0c      	ldr	r4, [pc, #48]	; (8005728 <print+0x38>)
{	
 80056f6:	ab04      	add	r3, sp, #16
 80056f8:	f853 2b04 	ldr.w	r2, [r3], #4
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80056fc:	217c      	movs	r1, #124	; 0x7c
 80056fe:	4620      	mov	r0, r4
    va_start(args, fmt);
 8005700:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 8005702:	f001 fd85 	bl	8007210 <vsniprintf>
    strcat(dbgMsg, "\r\n");
 8005706:	4909      	ldr	r1, [pc, #36]	; (800572c <print+0x3c>)
 8005708:	4620      	mov	r0, r4
 800570a:	f001 fc39 	bl	8006f80 <strcat>
    len = strlen(dbgMsg);
 800570e:	4620      	mov	r0, r4
 8005710:	f7fa fd1c 	bl	800014c <strlen>
	tracer_puts(bytes,size);
 8005714:	b281      	uxth	r1, r0
 8005716:	4620      	mov	r0, r4
 8005718:	f7ff fd18 	bl	800514c <tracer_puts>
}
 800571c:	b002      	add	sp, #8
 800571e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005722:	b004      	add	sp, #16
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20000678 	.word	0x20000678
 800572c:	08008086 	.word	0x08008086

08005730 <print_no_newline>:
{	
 8005730:	b40f      	push	{r0, r1, r2, r3}
 8005732:	b513      	push	{r0, r1, r4, lr}
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 8005734:	4c0a      	ldr	r4, [pc, #40]	; (8005760 <print_no_newline+0x30>)
{	
 8005736:	ab04      	add	r3, sp, #16
 8005738:	f853 2b04 	ldr.w	r2, [r3], #4
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 800573c:	217c      	movs	r1, #124	; 0x7c
 800573e:	4620      	mov	r0, r4
    va_start(args, fmt);
 8005740:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 8005742:	f001 fd65 	bl	8007210 <vsniprintf>
    (void) uart_send((uint8_t *)dbgMsg, (uint16_t) strlen(dbgMsg));		
 8005746:	4620      	mov	r0, r4
 8005748:	f7fa fd00 	bl	800014c <strlen>
	tracer_puts(bytes,size);
 800574c:	b281      	uxth	r1, r0
 800574e:	4620      	mov	r0, r4
 8005750:	f7ff fcfc 	bl	800514c <tracer_puts>
}
 8005754:	b002      	add	sp, #8
 8005756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800575a:	b004      	add	sp, #16
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	20000678 	.word	0x20000678

08005764 <shell_process>:
    
    cmd_buf_reset();
}

void shell_process(void)
{
 8005764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char byte;
	const char prompt[] = "DBG>";
 8005768:	4b72      	ldr	r3, [pc, #456]	; (8005934 <shell_process+0x1d0>)
{
 800576a:	b08f      	sub	sp, #60	; 0x3c
	const char prompt[] = "DBG>";
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	791b      	ldrb	r3, [r3, #4]
            print_no_newline(cmd_buf);
        }
        else if (VT100_KEY_CURSOR_DOWN == key)
        {
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 8005770:	4c71      	ldr	r4, [pc, #452]	; (8005938 <shell_process+0x1d4>)
            print(shell_cmd_list[i].cmd);
 8005772:	4e72      	ldr	r6, [pc, #456]	; (800593c <shell_process+0x1d8>)
	const char prompt[] = "DBG>";
 8005774:	9003      	str	r0, [sp, #12]
 8005776:	f88d 3010 	strb.w	r3, [sp, #16]
	while (1 == uart_receive_byte((uint8_t*)&byte))
 800577a:	f10d 000b 	add.w	r0, sp, #11
 800577e:	f7ff ffad 	bl	80056dc <uart_receive_byte>
 8005782:	2801      	cmp	r0, #1
 8005784:	d002      	beq.n	800578c <shell_process+0x28>
            }
            load_command_from_command_history(1);
            print_no_newline(cmd_buf);
        }
	}
}
 8005786:	b00f      	add	sp, #60	; 0x3c
 8005788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        vt100_key_t key = vt100_process_byte(byte);
 800578c:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8005790:	f001 f800 	bl	8006794 <vt100_process_byte>
        if (VT100_KEY_PRINTABLE == key)
 8005794:	2801      	cmp	r0, #1
 8005796:	d10e      	bne.n	80057b6 <shell_process+0x52>
    if ((unsigned int)cmd_buf_idx < sizeof(cmd_buf))
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	2b3f      	cmp	r3, #63	; 0x3f
 800579c:	d805      	bhi.n	80057aa <shell_process+0x46>
        cmd_buf[cmd_buf_idx++] = c;
 800579e:	1c5a      	adds	r2, r3, #1
            cmd_buf_add_char(byte);
 80057a0:	f89d 100b 	ldrb.w	r1, [sp, #11]
        cmd_buf[cmd_buf_idx++] = c;
 80057a4:	6022      	str	r2, [r4, #0]
 80057a6:	4a66      	ldr	r2, [pc, #408]	; (8005940 <shell_process+0x1dc>)
 80057a8:	54d1      	strb	r1, [r2, r3]
	tracer_puts(bytes,size);
 80057aa:	2101      	movs	r1, #1
 80057ac:	f10d 000b 	add.w	r0, sp, #11
 80057b0:	f7ff fccc 	bl	800514c <tracer_puts>
 80057b4:	e7e1      	b.n	800577a <shell_process+0x16>
        else if (VT100_KEY_ENTER == key)
 80057b6:	2808      	cmp	r0, #8
 80057b8:	d17e      	bne.n	80058b8 <shell_process+0x154>
			print("");
 80057ba:	4862      	ldr	r0, [pc, #392]	; (8005944 <shell_process+0x1e0>)
 80057bc:	f7ff ff98 	bl	80056f0 <print>
	if (0 != strlen(cmd_buf))
 80057c0:	495f      	ldr	r1, [pc, #380]	; (8005940 <shell_process+0x1dc>)
 80057c2:	780b      	ldrb	r3, [r1, #0]
 80057c4:	b183      	cbz	r3, 80057e8 <shell_process+0x84>
    strncpy(cmd_hist[cmd_hist_put_idx], cmd_buf, sizeof(cmd_buf));
 80057c6:	4f60      	ldr	r7, [pc, #384]	; (8005948 <shell_process+0x1e4>)
 80057c8:	4860      	ldr	r0, [pc, #384]	; (800594c <shell_process+0x1e8>)
 80057ca:	683d      	ldr	r5, [r7, #0]
 80057cc:	2240      	movs	r2, #64	; 0x40
 80057ce:	eb00 1085 	add.w	r0, r0, r5, lsl #6
    cmd_hist_put_idx++;
 80057d2:	3501      	adds	r5, #1
    strncpy(cmd_hist[cmd_hist_put_idx], cmd_buf, sizeof(cmd_buf));
 80057d4:	f001 fbf5 	bl	8006fc2 <strncpy>
    if (cmd_hist_put_idx >= SHELL_CMD_HISTORY_LEN)
 80057d8:	2d07      	cmp	r5, #7
        cmd_hist_put_idx = 0;
 80057da:	bfca      	itet	gt
 80057dc:	2300      	movgt	r3, #0
    cmd_hist_put_idx++;
 80057de:	603d      	strle	r5, [r7, #0]
        cmd_hist_put_idx = 0;
 80057e0:	603b      	strgt	r3, [r7, #0]
    cmd_hist_get_idx = cmd_hist_put_idx;
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	4b5a      	ldr	r3, [pc, #360]	; (8005950 <shell_process+0x1ec>)
 80057e6:	601a      	str	r2, [r3, #0]
	tokens[arg_num] = strtok(buffer, " ");
 80057e8:	495a      	ldr	r1, [pc, #360]	; (8005954 <shell_process+0x1f0>)
 80057ea:	4855      	ldr	r0, [pc, #340]	; (8005940 <shell_process+0x1dc>)
 80057ec:	f001 fbfe 	bl	8006fec <strtok>
	int arg_num = 0;
 80057f0:	2500      	movs	r5, #0
	tokens[arg_num] = strtok(buffer, " ");
 80057f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
		tokens[++arg_num] = strtok(NULL, " ");
 80057f6:	4f57      	ldr	r7, [pc, #348]	; (8005954 <shell_process+0x1f0>)
	tokens[arg_num] = strtok(buffer, " ");
 80057f8:	f848 0d24 	str.w	r0, [r8, #-36]!
	while(NULL != tokens[arg_num] && arg_num < (MAX_ARGUMENT_NUM-1))
 80057fc:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
 8005800:	b10b      	cbz	r3, 8005806 <shell_process+0xa2>
 8005802:	2d07      	cmp	r5, #7
 8005804:	d12c      	bne.n	8005860 <shell_process+0xfc>
    if (0 == strncmp(argv[0], "help", SHELL_CMD_BUF_LEN))
 8005806:	2240      	movs	r2, #64	; 0x40
 8005808:	4953      	ldr	r1, [pc, #332]	; (8005958 <shell_process+0x1f4>)
 800580a:	9805      	ldr	r0, [sp, #20]
 800580c:	f001 fbc7 	bl	8006f9e <strncmp>
 8005810:	4607      	mov	r7, r0
 8005812:	b368      	cbz	r0, 8005870 <shell_process+0x10c>
    if (0 == strncmp(argv[0], "cls", SHELL_CMD_BUF_LEN))
 8005814:	2240      	movs	r2, #64	; 0x40
 8005816:	4951      	ldr	r1, [pc, #324]	; (800595c <shell_process+0x1f8>)
 8005818:	9805      	ldr	r0, [sp, #20]
 800581a:	f001 fbc0 	bl	8006f9e <strncmp>
 800581e:	2800      	cmp	r0, #0
 8005820:	d038      	beq.n	8005894 <shell_process+0x130>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 8005822:	f04f 0900 	mov.w	r9, #0
 8005826:	f04f 0b0c 	mov.w	fp, #12
 800582a:	4b4d      	ldr	r3, [pc, #308]	; (8005960 <shell_process+0x1fc>)
 800582c:	681f      	ldr	r7, [r3, #0]
 800582e:	45b9      	cmp	r9, r7
 8005830:	da36      	bge.n	80058a0 <shell_process+0x13c>
 8005832:	fb0b f309 	mul.w	r3, fp, r9
            if(0 == strncmp(argv[0], shell_cmd_list[i].cmd, SHELL_CMD_BUF_LEN))
 8005836:	2240      	movs	r2, #64	; 0x40
 8005838:	5999      	ldr	r1, [r3, r6]
 800583a:	9805      	ldr	r0, [sp, #20]
 800583c:	eb03 0a06 	add.w	sl, r3, r6
 8005840:	f001 fbad 	bl	8006f9e <strncmp>
 8005844:	b948      	cbnz	r0, 800585a <shell_process+0xf6>
                if(0 == shell_cmd_list[i].handler(argc, argv))
 8005846:	f8da 3008 	ldr.w	r3, [sl, #8]
 800584a:	4641      	mov	r1, r8
 800584c:	1e68      	subs	r0, r5, #1
 800584e:	4798      	blx	r3
 8005850:	b918      	cbnz	r0, 800585a <shell_process+0xf6>
                    print(shell_cmd_list[i].desc);
 8005852:	f8da 0004 	ldr.w	r0, [sl, #4]
 8005856:	f7ff ff4b 	bl	80056f0 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 800585a:	f109 0901 	add.w	r9, r9, #1
 800585e:	e7e6      	b.n	800582e <shell_process+0xca>
		tokens[++arg_num] = strtok(NULL, " ");
 8005860:	4639      	mov	r1, r7
 8005862:	2000      	movs	r0, #0
 8005864:	f001 fbc2 	bl	8006fec <strtok>
 8005868:	3501      	adds	r5, #1
 800586a:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 800586e:	e7c5      	b.n	80057fc <shell_process+0x98>
            print(shell_cmd_list[i].cmd);
 8005870:	f04f 0a0c 	mov.w	sl, #12
        print("");
 8005874:	4833      	ldr	r0, [pc, #204]	; (8005944 <shell_process+0x1e0>)
 8005876:	f7ff ff3b 	bl	80056f0 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 800587a:	4b39      	ldr	r3, [pc, #228]	; (8005960 <shell_process+0x1fc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	9b01      	ldr	r3, [sp, #4]
 8005882:	429f      	cmp	r7, r3
 8005884:	dac6      	bge.n	8005814 <shell_process+0xb0>
            print(shell_cmd_list[i].cmd);
 8005886:	fb0a f307 	mul.w	r3, sl, r7
 800588a:	5998      	ldr	r0, [r3, r6]
 800588c:	f7ff ff30 	bl	80056f0 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 8005890:	3701      	adds	r7, #1
 8005892:	e7f5      	b.n	8005880 <shell_process+0x11c>
        send_vt100_key(VT100_KEY_CLEAR_SCREEN);
 8005894:	200d      	movs	r0, #13
 8005896:	f7ff fed7 	bl	8005648 <send_vt100_key>
        send_vt100_key(VT100_KEY_MOVE_CURSOR_HOME);
 800589a:	200e      	movs	r0, #14
 800589c:	f7ff fed4 	bl	8005648 <send_vt100_key>
    cmd_buf_reset();
 80058a0:	f7ff fec6 	bl	8005630 <cmd_buf_reset>
	tracer_puts(bytes,size);
 80058a4:	f10d 000b 	add.w	r0, sp, #11
 80058a8:	2101      	movs	r1, #1
 80058aa:	f7ff fc4f 	bl	800514c <tracer_puts>
			print_no_newline("\n%s", prompt);
 80058ae:	a903      	add	r1, sp, #12
 80058b0:	482c      	ldr	r0, [pc, #176]	; (8005964 <shell_process+0x200>)
 80058b2:	f7ff ff3d 	bl	8005730 <print_no_newline>
 80058b6:	e760      	b.n	800577a <shell_process+0x16>
        else if (VT100_KEY_INVALID == key)
 80058b8:	2800      	cmp	r0, #0
 80058ba:	f43f af5e 	beq.w	800577a <shell_process+0x16>
        else if (VT100_KEY_BACKSPACE == key)
 80058be:	2807      	cmp	r0, #7
 80058c0:	d10e      	bne.n	80058e0 <shell_process+0x17c>
    if (cmd_buf_idx > 0)
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	dd04      	ble.n	80058d2 <shell_process+0x16e>
        cmd_buf[--cmd_buf_idx] = 0;
 80058c8:	2100      	movs	r1, #0
 80058ca:	4a1d      	ldr	r2, [pc, #116]	; (8005940 <shell_process+0x1dc>)
 80058cc:	3b01      	subs	r3, #1
 80058ce:	6023      	str	r3, [r4, #0]
 80058d0:	54d1      	strb	r1, [r2, r3]
            send_vt100_key(VT100_KEY_BACKSPACE);
 80058d2:	2007      	movs	r0, #7
 80058d4:	f7ff feb8 	bl	8005648 <send_vt100_key>
            send_vt100_key(VT100_KEY_CLEAR_EOL);
 80058d8:	200a      	movs	r0, #10
 80058da:	f7ff feb5 	bl	8005648 <send_vt100_key>
 80058de:	e74c      	b.n	800577a <shell_process+0x16>
        else if (VT100_KEY_CURSOR_UP == key)
 80058e0:	2802      	cmp	r0, #2
 80058e2:	d116      	bne.n	8005912 <shell_process+0x1ae>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 80058e4:	200b      	movs	r0, #11
 80058e6:	f7ff feaf 	bl	8005648 <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 80058ea:	2500      	movs	r5, #0
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	3304      	adds	r3, #4
 80058f0:	42ab      	cmp	r3, r5
 80058f2:	d809      	bhi.n	8005908 <shell_process+0x1a4>
			print_no_newline(prompt);
 80058f4:	a803      	add	r0, sp, #12
 80058f6:	f7ff ff1b 	bl	8005730 <print_no_newline>
            load_command_from_command_history(0);
 80058fa:	2000      	movs	r0, #0
            load_command_from_command_history(1);
 80058fc:	f7ff feb0 	bl	8005660 <load_command_from_command_history>
            print_no_newline(cmd_buf);
 8005900:	480f      	ldr	r0, [pc, #60]	; (8005940 <shell_process+0x1dc>)
 8005902:	f7ff ff15 	bl	8005730 <print_no_newline>
 8005906:	e738      	b.n	800577a <shell_process+0x16>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 8005908:	200c      	movs	r0, #12
 800590a:	f7ff fe9d 	bl	8005648 <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 800590e:	3501      	adds	r5, #1
 8005910:	e7ec      	b.n	80058ec <shell_process+0x188>
        else if (VT100_KEY_CURSOR_DOWN == key)
 8005912:	2803      	cmp	r0, #3
 8005914:	f47f af31 	bne.w	800577a <shell_process+0x16>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 8005918:	200b      	movs	r0, #11
 800591a:	f7ff fe95 	bl	8005648 <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 800591e:	2500      	movs	r5, #0
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	42ab      	cmp	r3, r5
 8005924:	dc01      	bgt.n	800592a <shell_process+0x1c6>
            load_command_from_command_history(1);
 8005926:	2001      	movs	r0, #1
 8005928:	e7e8      	b.n	80058fc <shell_process+0x198>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 800592a:	200c      	movs	r0, #12
 800592c:	f7ff fe8c 	bl	8005648 <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 8005930:	3501      	adds	r5, #1
 8005932:	e7f5      	b.n	8005920 <shell_process+0x1bc>
 8005934:	08007c1b 	.word	0x08007c1b
 8005938:	2000046c 	.word	0x2000046c
 800593c:	08008130 	.word	0x08008130
 8005940:	20000429 	.word	0x20000429
 8005944:	08008088 	.word	0x08008088
 8005948:	20000674 	.word	0x20000674
 800594c:	20000470 	.word	0x20000470
 8005950:	20000670 	.word	0x20000670
 8005954:	08008aec 	.word	0x08008aec
 8005958:	08008089 	.word	0x08008089
 800595c:	0800808e 	.word	0x0800808e
 8005960:	08008098 	.word	0x08008098
 8005964:	08008092 	.word	0x08008092

08005968 <shell_cmd_dumpadc>:
}


//dumpconfig
static int shell_cmd_dumpadc(int argc, char ** argv)
{
 8005968:	b508      	push	{r3, lr}
	print_adc_data();
 800596a:	f000 fcc9 	bl	8006300 <print_adc_data>
	return 1;
}
 800596e:	2001      	movs	r0, #1
 8005970:	bd08      	pop	{r3, pc}
	...

08005974 <shell_cmd_storedefaultregs>:
	return 1;
}


static int shell_cmd_storedefaultregs(int argc, char ** argv)
{
 8005974:	b510      	push	{r4, lr}
	//Store the current register values to default settings
	settings.max_brightness = get_reg(MAX_BRIGHTNESS);
 8005976:	2000      	movs	r0, #0
 8005978:	f7fe fb24 	bl	8003fc4 <get_reg>
 800597c:	4c38      	ldr	r4, [pc, #224]	; (8005a60 <shell_cmd_storedefaultregs+0xec>)
 800597e:	8020      	strh	r0, [r4, #0]
	settings.pwm_ch1_r = get_reg(CH1_RED);
 8005980:	2001      	movs	r0, #1
 8005982:	f7fe fb1f 	bl	8003fc4 <get_reg>
 8005986:	8060      	strh	r0, [r4, #2]
	settings.pwm_ch1_g = get_reg(CH1_GREEN);
 8005988:	2002      	movs	r0, #2
 800598a:	f7fe fb1b 	bl	8003fc4 <get_reg>
 800598e:	80a0      	strh	r0, [r4, #4]
	settings.pwm_ch1_b = get_reg(CH1_BLUE);
 8005990:	2003      	movs	r0, #3
 8005992:	f7fe fb17 	bl	8003fc4 <get_reg>
 8005996:	80e0      	strh	r0, [r4, #6]
	settings.pwm_ch2_r = get_reg(CH2_RED);
 8005998:	2004      	movs	r0, #4
 800599a:	f7fe fb13 	bl	8003fc4 <get_reg>
 800599e:	8120      	strh	r0, [r4, #8]
	settings.pwm_ch2_g = get_reg(CH2_GREEN);
 80059a0:	2005      	movs	r0, #5
 80059a2:	f7fe fb0f 	bl	8003fc4 <get_reg>
 80059a6:	8160      	strh	r0, [r4, #10]
	settings.pwm_ch2_b = get_reg(CH2_BLUE);
 80059a8:	2006      	movs	r0, #6
 80059aa:	f7fe fb0b 	bl	8003fc4 <get_reg>
 80059ae:	81a0      	strh	r0, [r4, #12]
	settings.pwm_ch3_r = get_reg(CH3_RED);
 80059b0:	2007      	movs	r0, #7
 80059b2:	f7fe fb07 	bl	8003fc4 <get_reg>
 80059b6:	81e0      	strh	r0, [r4, #14]
	settings.pwm_ch3_g = get_reg(CH3_GREEN);
 80059b8:	2008      	movs	r0, #8
 80059ba:	f7fe fb03 	bl	8003fc4 <get_reg>
 80059be:	8220      	strh	r0, [r4, #16]
	settings.pwm_ch3_b = get_reg(CH3_BLUE);
 80059c0:	2009      	movs	r0, #9
 80059c2:	f7fe faff 	bl	8003fc4 <get_reg>
 80059c6:	8260      	strh	r0, [r4, #18]
	settings.pwm_ch3_w = get_reg(CH3_WHITE);
 80059c8:	200a      	movs	r0, #10
 80059ca:	f7fe fafb 	bl	8003fc4 <get_reg>
 80059ce:	82a0      	strh	r0, [r4, #20]

	//Deal with LED Strip Registers
	if (DMX_MODE2 == get_mode())
 80059d0:	f7fe fab8 	bl	8003f44 <get_mode>
 80059d4:	2801      	cmp	r0, #1
 80059d6:	d140      	bne.n	8005a5a <shell_cmd_storedefaultregs+0xe6>
	{
		settings.fx_select = get_reg(FX_SELECT);
 80059d8:	200b      	movs	r0, #11
 80059da:	f7fe faf3 	bl	8003fc4 <get_reg>
 80059de:	75a0      	strb	r0, [r4, #22]
		settings.strip1_pattern = get_reg(STRIP1_PATTERN);
 80059e0:	200c      	movs	r0, #12
 80059e2:	f7fe faef 	bl	8003fc4 <get_reg>
 80059e6:	75e0      	strb	r0, [r4, #23]
		settings.strip1_speed = get_reg(STRIP1_SPEED);
 80059e8:	200d      	movs	r0, #13
 80059ea:	f7fe faeb 	bl	8003fc4 <get_reg>
 80059ee:	7620      	strb	r0, [r4, #24]
		settings.strip1_size = get_reg(STRIP1_SIZE);
 80059f0:	200e      	movs	r0, #14
 80059f2:	f7fe fae7 	bl	8003fc4 <get_reg>
 80059f6:	7660      	strb	r0, [r4, #25]
		settings.strip1_complexity = get_reg(STRIP1_COMPLEXITY);
 80059f8:	200f      	movs	r0, #15
 80059fa:	f7fe fae3 	bl	8003fc4 <get_reg>
 80059fe:	76a0      	strb	r0, [r4, #26]
		settings.strip1_v1 = get_reg(STRIP1_V1);
 8005a00:	2010      	movs	r0, #16
 8005a02:	f7fe fadf 	bl	8003fc4 <get_reg>
 8005a06:	76e0      	strb	r0, [r4, #27]
		settings.strip1_v2 = get_reg(STRIP1_V2);
 8005a08:	2011      	movs	r0, #17
 8005a0a:	f7fe fadb 	bl	8003fc4 <get_reg>
 8005a0e:	7720      	strb	r0, [r4, #28]
		settings.strip1_v3 = get_reg(STRIP1_V3);
 8005a10:	2012      	movs	r0, #18
 8005a12:	f7fe fad7 	bl	8003fc4 <get_reg>
 8005a16:	7760      	strb	r0, [r4, #29]
		settings.strip2_pattern = get_reg(STRIP2_PATTERN);
 8005a18:	2013      	movs	r0, #19
 8005a1a:	f7fe fad3 	bl	8003fc4 <get_reg>
 8005a1e:	77a0      	strb	r0, [r4, #30]
		settings.strip2_speed = get_reg(STRIP2_SPEED);
 8005a20:	2014      	movs	r0, #20
 8005a22:	f7fe facf 	bl	8003fc4 <get_reg>
 8005a26:	77e0      	strb	r0, [r4, #31]
		settings.strip2_size = get_reg(STRIP2_SIZE);
 8005a28:	2015      	movs	r0, #21
 8005a2a:	f7fe facb 	bl	8003fc4 <get_reg>
 8005a2e:	f884 0020 	strb.w	r0, [r4, #32]
		settings.strip2_complexity = get_reg(STRIP2_COMPLEXITY);
 8005a32:	2016      	movs	r0, #22
 8005a34:	f7fe fac6 	bl	8003fc4 <get_reg>
 8005a38:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
		settings.strip2_v1 = get_reg(STRIP2_V1);
 8005a3c:	2017      	movs	r0, #23
 8005a3e:	f7fe fac1 	bl	8003fc4 <get_reg>
 8005a42:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
		settings.strip2_v2 = get_reg(STRIP2_V2);
 8005a46:	2018      	movs	r0, #24
 8005a48:	f7fe fabc 	bl	8003fc4 <get_reg>
 8005a4c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
		settings.strip2_v3 = get_reg(STRIP2_V3);
 8005a50:	2019      	movs	r0, #25
 8005a52:	f7fe fab7 	bl	8003fc4 <get_reg>
 8005a56:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	}
	return 1;
}
 8005a5a:	2001      	movs	r0, #1
 8005a5c:	bd10      	pop	{r4, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000a70 	.word	0x20000a70

08005a64 <shell_cmd_getmode>:
{
 8005a64:	b508      	push	{r3, lr}
	switch (get_mode())
 8005a66:	f7fe fa6d 	bl	8003f44 <get_mode>
 8005a6a:	b118      	cbz	r0, 8005a74 <shell_cmd_getmode+0x10>
 8005a6c:	2801      	cmp	r0, #1
 8005a6e:	d005      	beq.n	8005a7c <shell_cmd_getmode+0x18>
}
 8005a70:	2001      	movs	r0, #1
 8005a72:	bd08      	pop	{r3, pc}
		print("Mode 1 (PWM)");
 8005a74:	4802      	ldr	r0, [pc, #8]	; (8005a80 <shell_cmd_getmode+0x1c>)
		print("Mode 2 (PWM + Strip)");
 8005a76:	f7ff fe3b 	bl	80056f0 <print>
		break;
 8005a7a:	e7f9      	b.n	8005a70 <shell_cmd_getmode+0xc>
		print("Mode 2 (PWM + Strip)");
 8005a7c:	4801      	ldr	r0, [pc, #4]	; (8005a84 <shell_cmd_getmode+0x20>)
 8005a7e:	e7fa      	b.n	8005a76 <shell_cmd_getmode+0x12>
 8005a80:	0800810d 	.word	0x0800810d
 8005a84:	0800811a 	.word	0x0800811a

08005a88 <shell_cmd_savesettings>:
{
 8005a88:	b508      	push	{r3, lr}
		save_settings();
 8005a8a:	f7ff fc39 	bl	8005300 <save_settings>
}
 8005a8e:	2001      	movs	r0, #1
 8005a90:	bd08      	pop	{r3, pc}

08005a92 <shell_cmd_dumpsettings>:
{
 8005a92:	b508      	push	{r3, lr}
		print_settings();
 8005a94:	f7ff fc3c 	bl	8005310 <print_settings>
}
 8005a98:	2001      	movs	r0, #1
 8005a9a:	bd08      	pop	{r3, pc}

08005a9c <shell_cmd_getaddr>:
{
 8005a9c:	b508      	push	{r3, lr}
		print("DMX512 Address: %d",get_addr());
 8005a9e:	f7fe fa4b 	bl	8003f38 <get_addr>
 8005aa2:	4601      	mov	r1, r0
 8005aa4:	4802      	ldr	r0, [pc, #8]	; (8005ab0 <shell_cmd_getaddr+0x14>)
 8005aa6:	f7ff fe23 	bl	80056f0 <print>
}
 8005aaa:	2001      	movs	r0, #1
 8005aac:	bd08      	pop	{r3, pc}
 8005aae:	bf00      	nop
 8005ab0:	080080fa 	.word	0x080080fa

08005ab4 <shell_cmd_dumpregs>:
{
 8005ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		print("DMX512 Address: %d",get_addr());
 8005ab6:	f7fe fa3f 	bl	8003f38 <get_addr>
 8005aba:	4601      	mov	r1, r0
 8005abc:	4816      	ldr	r0, [pc, #88]	; (8005b18 <shell_cmd_dumpregs+0x64>)
 8005abe:	f7ff fe17 	bl	80056f0 <print>
		print("DMX512 Blocklength: %d",get_reg_length());
 8005ac2:	f7fe fa45 	bl	8003f50 <get_reg_length>
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	4814      	ldr	r0, [pc, #80]	; (8005b1c <shell_cmd_dumpregs+0x68>)
 8005aca:	f7ff fe11 	bl	80056f0 <print>
		print("Mode: %d",(uint8_t)get_mode());
 8005ace:	f7fe fa39 	bl	8003f44 <get_mode>
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	4812      	ldr	r0, [pc, #72]	; (8005b20 <shell_cmd_dumpregs+0x6c>)
 8005ad6:	f7ff fe0b 	bl	80056f0 <print>
		print("---------------------------");
 8005ada:	4812      	ldr	r0, [pc, #72]	; (8005b24 <shell_cmd_dumpregs+0x70>)
 8005adc:	f7ff fe08 	bl	80056f0 <print>
		for(int ii=0;ii< get_reg_length();ii++)
 8005ae0:	2400      	movs	r4, #0
			print("Reg: %d\t Addr:%d  \t (%s)\t Val: %d",ii,get_addr()+ii,get_reg_name(ii),get_reg(ii));
 8005ae2:	4d11      	ldr	r5, [pc, #68]	; (8005b28 <shell_cmd_dumpregs+0x74>)
		for(int ii=0;ii< get_reg_length();ii++)
 8005ae4:	f7fe fa34 	bl	8003f50 <get_reg_length>
 8005ae8:	42a0      	cmp	r0, r4
 8005aea:	d802      	bhi.n	8005af2 <shell_cmd_dumpregs+0x3e>
}
 8005aec:	2001      	movs	r0, #1
 8005aee:	b003      	add	sp, #12
 8005af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			print("Reg: %d\t Addr:%d  \t (%s)\t Val: %d",ii,get_addr()+ii,get_reg_name(ii),get_reg(ii));
 8005af2:	f7fe fa21 	bl	8003f38 <get_addr>
 8005af6:	1906      	adds	r6, r0, r4
 8005af8:	4620      	mov	r0, r4
 8005afa:	f7fe fa73 	bl	8003fe4 <get_reg_name>
 8005afe:	4607      	mov	r7, r0
 8005b00:	4620      	mov	r0, r4
 8005b02:	f7fe fa5f 	bl	8003fc4 <get_reg>
 8005b06:	4621      	mov	r1, r4
 8005b08:	9000      	str	r0, [sp, #0]
 8005b0a:	463b      	mov	r3, r7
 8005b0c:	4632      	mov	r2, r6
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f7ff fdee 	bl	80056f0 <print>
		for(int ii=0;ii< get_reg_length();ii++)
 8005b14:	3401      	adds	r4, #1
 8005b16:	e7e5      	b.n	8005ae4 <shell_cmd_dumpregs+0x30>
 8005b18:	080080fa 	.word	0x080080fa
 8005b1c:	0800809c 	.word	0x0800809c
 8005b20:	080080b3 	.word	0x080080b3
 8005b24:	080080bc 	.word	0x080080bc
 8005b28:	080080d8 	.word	0x080080d8

08005b2c <shell_cmd_switchuartmode>:


//Set UART Mode
static int shell_cmd_switchuartmode(int argc, char ** argv)
{
	if (argc == 2)
 8005b2c:	2802      	cmp	r0, #2
{
 8005b2e:	b508      	push	{r3, lr}
	if (argc == 2)
 8005b30:	d10d      	bne.n	8005b4e <shell_cmd_switchuartmode+0x22>
	{
		switch (atoi(argv[1]))
 8005b32:	6848      	ldr	r0, [r1, #4]
 8005b34:	f001 f905 	bl	8006d42 <atoi>
 8005b38:	b118      	cbz	r0, 8005b42 <shell_cmd_switchuartmode+0x16>
 8005b3a:	2801      	cmp	r0, #1
 8005b3c:	d005      	beq.n	8005b4a <shell_cmd_switchuartmode+0x1e>
 8005b3e:	2001      	movs	r0, #1
 8005b40:	e002      	b.n	8005b48 <shell_cmd_switchuartmode+0x1c>
		{
		case 0:
			UART_mode_SERIAL = (uint8_t)UART_MODE_DMX;
 8005b42:	2001      	movs	r0, #1
 8005b44:	4b03      	ldr	r3, [pc, #12]	; (8005b54 <shell_cmd_switchuartmode+0x28>)
			break;
		case 1:
			UART_mode_USB = (uint8_t)UART_MODE_DMX;
 8005b46:	6018      	str	r0, [r3, #0]
	else
	{
		return 0;
	}
	return 1;
}
 8005b48:	bd08      	pop	{r3, pc}
			UART_mode_USB = (uint8_t)UART_MODE_DMX;
 8005b4a:	4b03      	ldr	r3, [pc, #12]	; (8005b58 <shell_cmd_switchuartmode+0x2c>)
 8005b4c:	e7fb      	b.n	8005b46 <shell_cmd_switchuartmode+0x1a>
		return 0;
 8005b4e:	2000      	movs	r0, #0
 8005b50:	e7fa      	b.n	8005b48 <shell_cmd_switchuartmode+0x1c>
 8005b52:	bf00      	nop
 8005b54:	20000420 	.word	0x20000420
 8005b58:	20000421 	.word	0x20000421

08005b5c <shell_cmd_setuartmode>:
	if (argc == 2)
 8005b5c:	2802      	cmp	r0, #2
{
 8005b5e:	b538      	push	{r3, r4, r5, lr}
 8005b60:	460d      	mov	r5, r1
	if (argc == 2)
 8005b62:	d117      	bne.n	8005b94 <shell_cmd_setuartmode+0x38>
		switch (atoi(argv[1]))
 8005b64:	6848      	ldr	r0, [r1, #4]
 8005b66:	f001 f8ec 	bl	8006d42 <atoi>
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	b118      	cbz	r0, 8005b76 <shell_cmd_setuartmode+0x1a>
 8005b6e:	2801      	cmp	r0, #1
 8005b70:	d008      	beq.n	8005b84 <shell_cmd_setuartmode+0x28>
	return 1;
 8005b72:	2401      	movs	r4, #1
 8005b74:	e00c      	b.n	8005b90 <shell_cmd_setuartmode+0x34>
			settings.UART_Mode_UART = atoi(argv[2]);
 8005b76:	68a8      	ldr	r0, [r5, #8]
 8005b78:	f001 f8e3 	bl	8006d42 <atoi>
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <shell_cmd_setuartmode+0x3c>)
 8005b7e:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
 8005b82:	e7f6      	b.n	8005b72 <shell_cmd_setuartmode+0x16>
			settings.UART_Mode_USB = atoi(argv[2]);
 8005b84:	68a8      	ldr	r0, [r5, #8]
 8005b86:	f001 f8dc 	bl	8006d42 <atoi>
 8005b8a:	4b03      	ldr	r3, [pc, #12]	; (8005b98 <shell_cmd_setuartmode+0x3c>)
 8005b8c:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
}
 8005b90:	4620      	mov	r0, r4
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
 8005b94:	2400      	movs	r4, #0
 8005b96:	e7fb      	b.n	8005b90 <shell_cmd_setuartmode+0x34>
 8005b98:	20000a70 	.word	0x20000a70

08005b9c <shell_cmd_setstriplength>:
	if (argc == 2)
 8005b9c:	2802      	cmp	r0, #2
{
 8005b9e:	b538      	push	{r3, r4, r5, lr}
 8005ba0:	460d      	mov	r5, r1
	if (argc == 2)
 8005ba2:	d115      	bne.n	8005bd0 <shell_cmd_setstriplength+0x34>
		switch (atoi(argv[1]))
 8005ba4:	6848      	ldr	r0, [r1, #4]
 8005ba6:	f001 f8cc 	bl	8006d42 <atoi>
 8005baa:	4604      	mov	r4, r0
 8005bac:	b118      	cbz	r0, 8005bb6 <shell_cmd_setstriplength+0x1a>
 8005bae:	2801      	cmp	r0, #1
 8005bb0:	d007      	beq.n	8005bc2 <shell_cmd_setstriplength+0x26>
	return 1;
 8005bb2:	2401      	movs	r4, #1
 8005bb4:	e00a      	b.n	8005bcc <shell_cmd_setstriplength+0x30>
			settings.strip1_length = atoi(argv[2]);
 8005bb6:	68a8      	ldr	r0, [r5, #8]
 8005bb8:	f001 f8c3 	bl	8006d42 <atoi>
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <shell_cmd_setstriplength+0x38>)
 8005bbe:	84d8      	strh	r0, [r3, #38]	; 0x26
 8005bc0:	e7f7      	b.n	8005bb2 <shell_cmd_setstriplength+0x16>
			settings.strip2_length = atoi(argv[2]);
 8005bc2:	68a8      	ldr	r0, [r5, #8]
 8005bc4:	f001 f8bd 	bl	8006d42 <atoi>
 8005bc8:	4b02      	ldr	r3, [pc, #8]	; (8005bd4 <shell_cmd_setstriplength+0x38>)
 8005bca:	8518      	strh	r0, [r3, #40]	; 0x28
}
 8005bcc:	4620      	mov	r0, r4
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
 8005bd0:	2400      	movs	r4, #0
 8005bd2:	e7fb      	b.n	8005bcc <shell_cmd_setstriplength+0x30>
 8005bd4:	20000a70 	.word	0x20000a70

08005bd8 <shell_cmd_settriggerctrl>:
	if (argc == 5)
 8005bd8:	2805      	cmp	r0, #5
{
 8005bda:	b570      	push	{r4, r5, r6, lr}
 8005bdc:	460c      	mov	r4, r1
	if (argc == 5)
 8005bde:	d135      	bne.n	8005c4c <shell_cmd_settriggerctrl+0x74>
		switch (atoi(argv[1]))
 8005be0:	6848      	ldr	r0, [r1, #4]
 8005be2:	f001 f8ae 	bl	8006d42 <atoi>
 8005be6:	4605      	mov	r5, r0
 8005be8:	b118      	cbz	r0, 8005bf2 <shell_cmd_settriggerctrl+0x1a>
 8005bea:	2801      	cmp	r0, #1
 8005bec:	d017      	beq.n	8005c1e <shell_cmd_settriggerctrl+0x46>
	return 1;
 8005bee:	2501      	movs	r5, #1
 8005bf0:	e02a      	b.n	8005c48 <shell_cmd_settriggerctrl+0x70>
			settings.trigger_reg_hilo_A0 = atoi(argv[2]);
 8005bf2:	68a0      	ldr	r0, [r4, #8]
 8005bf4:	f001 f8a5 	bl	8006d42 <atoi>
 8005bf8:	4d15      	ldr	r5, [pc, #84]	; (8005c50 <shell_cmd_settriggerctrl+0x78>)
 8005bfa:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			settings.trigger_val_hilo_A0 = atoi(argv[3]);
 8005bfe:	68e0      	ldr	r0, [r4, #12]
 8005c00:	f001 f89f 	bl	8006d42 <atoi>
 8005c04:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
			settings.trigger_reg_lohi_A0 = atoi(argv[4]);
 8005c08:	6920      	ldr	r0, [r4, #16]
 8005c0a:	f001 f89a 	bl	8006d42 <atoi>
 8005c0e:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
			settings.trigger_val_lohi_A0 = atoi(argv[5]);
 8005c12:	6960      	ldr	r0, [r4, #20]
 8005c14:	f001 f895 	bl	8006d42 <atoi>
 8005c18:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
 8005c1c:	e7e7      	b.n	8005bee <shell_cmd_settriggerctrl+0x16>
			settings.trigger_reg_hilo_A1 = atoi(argv[2]);
 8005c1e:	68a0      	ldr	r0, [r4, #8]
 8005c20:	f001 f88f 	bl	8006d42 <atoi>
 8005c24:	4e0a      	ldr	r6, [pc, #40]	; (8005c50 <shell_cmd_settriggerctrl+0x78>)
 8005c26:	f886 0037 	strb.w	r0, [r6, #55]	; 0x37
			settings.trigger_val_hilo_A1 = atoi(argv[3]);
 8005c2a:	68e0      	ldr	r0, [r4, #12]
 8005c2c:	f001 f889 	bl	8006d42 <atoi>
 8005c30:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
			settings.trigger_reg_lohi_A1 = atoi(argv[4]);
 8005c34:	6920      	ldr	r0, [r4, #16]
 8005c36:	f001 f884 	bl	8006d42 <atoi>
 8005c3a:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
			settings.trigger_val_lohi_A1 = atoi(argv[5]);
 8005c3e:	6960      	ldr	r0, [r4, #20]
 8005c40:	f001 f87f 	bl	8006d42 <atoi>
 8005c44:	f886 0036 	strb.w	r0, [r6, #54]	; 0x36
}
 8005c48:	4628      	mov	r0, r5
 8005c4a:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 8005c4c:	2500      	movs	r5, #0
 8005c4e:	e7fb      	b.n	8005c48 <shell_cmd_settriggerctrl+0x70>
 8005c50:	20000a70 	.word	0x20000a70

08005c54 <shell_cmd_settriggerconfig>:
	if (argc == 4)
 8005c54:	2804      	cmp	r0, #4
{
 8005c56:	b570      	push	{r4, r5, r6, lr}
 8005c58:	460c      	mov	r4, r1
	if (argc == 4)
 8005c5a:	d12b      	bne.n	8005cb4 <shell_cmd_settriggerconfig+0x60>
		switch (atoi(argv[1]))
 8005c5c:	6848      	ldr	r0, [r1, #4]
 8005c5e:	f001 f870 	bl	8006d42 <atoi>
 8005c62:	4605      	mov	r5, r0
 8005c64:	b118      	cbz	r0, 8005c6e <shell_cmd_settriggerconfig+0x1a>
 8005c66:	2801      	cmp	r0, #1
 8005c68:	d012      	beq.n	8005c90 <shell_cmd_settriggerconfig+0x3c>
	return 1;
 8005c6a:	2501      	movs	r5, #1
 8005c6c:	e020      	b.n	8005cb0 <shell_cmd_settriggerconfig+0x5c>
			settings.trigger_mode_A0 = atoi(argv[2]);
 8005c6e:	68a0      	ldr	r0, [r4, #8]
 8005c70:	f001 f867 	bl	8006d42 <atoi>
 8005c74:	4d10      	ldr	r5, [pc, #64]	; (8005cb8 <shell_cmd_settriggerconfig+0x64>)
 8005c76:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
			settings.trigger_reg_A0 = atoi(argv[3]);
 8005c7a:	68e0      	ldr	r0, [r4, #12]
 8005c7c:	f001 f861 	bl	8006d42 <atoi>
 8005c80:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
			settings.trigger_level_A0 = atoi(argv[4]);
 8005c84:	6920      	ldr	r0, [r4, #16]
 8005c86:	f001 f85c 	bl	8006d42 <atoi>
 8005c8a:	f885 0032 	strb.w	r0, [r5, #50]	; 0x32
 8005c8e:	e7ec      	b.n	8005c6a <shell_cmd_settriggerconfig+0x16>
			settings.trigger_mode_A1 = atoi(argv[2]);
 8005c90:	68a0      	ldr	r0, [r4, #8]
 8005c92:	f001 f856 	bl	8006d42 <atoi>
 8005c96:	4e08      	ldr	r6, [pc, #32]	; (8005cb8 <shell_cmd_settriggerconfig+0x64>)
 8005c98:	f886 0033 	strb.w	r0, [r6, #51]	; 0x33
			settings.trigger_reg_A1 = atoi(argv[3]);
 8005c9c:	68e0      	ldr	r0, [r4, #12]
 8005c9e:	f001 f850 	bl	8006d42 <atoi>
 8005ca2:	f886 0034 	strb.w	r0, [r6, #52]	; 0x34
			settings.trigger_level_A1 = atoi(argv[4]);
 8005ca6:	6920      	ldr	r0, [r4, #16]
 8005ca8:	f001 f84b 	bl	8006d42 <atoi>
 8005cac:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
}
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 8005cb4:	2500      	movs	r5, #0
 8005cb6:	e7fb      	b.n	8005cb0 <shell_cmd_settriggerconfig+0x5c>
 8005cb8:	20000a70 	.word	0x20000a70

08005cbc <shell_cmd_setgamma>:
	if (argc == 2)
 8005cbc:	2802      	cmp	r0, #2
{
 8005cbe:	b538      	push	{r3, r4, r5, lr}
 8005cc0:	460c      	mov	r4, r1
	if (argc == 2)
 8005cc2:	d118      	bne.n	8005cf6 <shell_cmd_setgamma+0x3a>
		switch (atoi(argv[1]))
 8005cc4:	6848      	ldr	r0, [r1, #4]
 8005cc6:	f001 f83c 	bl	8006d42 <atoi>
 8005cca:	4d0c      	ldr	r5, [pc, #48]	; (8005cfc <shell_cmd_setgamma+0x40>)
 8005ccc:	b138      	cbz	r0, 8005cde <shell_cmd_setgamma+0x22>
 8005cce:	2802      	cmp	r0, #2
 8005cd0:	d00b      	beq.n	8005cea <shell_cmd_setgamma+0x2e>
			settings.gamma_green = atoi(argv[2]);
 8005cd2:	68a0      	ldr	r0, [r4, #8]
 8005cd4:	f001 f835 	bl	8006d42 <atoi>
 8005cd8:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
 8005cdc:	e003      	b.n	8005ce6 <shell_cmd_setgamma+0x2a>
			settings.gamma_red = atoi(argv[2]);
 8005cde:	68a0      	ldr	r0, [r4, #8]
 8005ce0:	f001 f82f 	bl	8006d42 <atoi>
 8005ce4:	87e8      	strh	r0, [r5, #62]	; 0x3e
	return 1;
 8005ce6:	2001      	movs	r0, #1
}
 8005ce8:	bd38      	pop	{r3, r4, r5, pc}
			settings.gamma_blue = atoi(argv[2]);
 8005cea:	68a0      	ldr	r0, [r4, #8]
 8005cec:	f001 f829 	bl	8006d42 <atoi>
 8005cf0:	f8a5 004a 	strh.w	r0, [r5, #74]	; 0x4a
 8005cf4:	e7f7      	b.n	8005ce6 <shell_cmd_setgamma+0x2a>
		return 0;
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	e7f6      	b.n	8005ce8 <shell_cmd_setgamma+0x2c>
 8005cfa:	bf00      	nop
 8005cfc:	20000a70 	.word	0x20000a70

08005d00 <shell_cmd_setoffset>:
	if (argc == 2)
 8005d00:	2802      	cmp	r0, #2
{
 8005d02:	b538      	push	{r3, r4, r5, lr}
 8005d04:	460c      	mov	r4, r1
	if (argc == 2)
 8005d06:	d118      	bne.n	8005d3a <shell_cmd_setoffset+0x3a>
		switch (atoi(argv[1]))
 8005d08:	6848      	ldr	r0, [r1, #4]
 8005d0a:	f001 f81a 	bl	8006d42 <atoi>
 8005d0e:	4d0c      	ldr	r5, [pc, #48]	; (8005d40 <shell_cmd_setoffset+0x40>)
 8005d10:	b138      	cbz	r0, 8005d22 <shell_cmd_setoffset+0x22>
 8005d12:	2802      	cmp	r0, #2
 8005d14:	d00b      	beq.n	8005d2e <shell_cmd_setoffset+0x2e>
			settings.offset_green = atoi(argv[2]);
 8005d16:	68a0      	ldr	r0, [r4, #8]
 8005d18:	f001 f813 	bl	8006d42 <atoi>
 8005d1c:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
 8005d20:	e003      	b.n	8005d2a <shell_cmd_setoffset+0x2a>
			settings.offset_red = atoi(argv[2]);
 8005d22:	68a0      	ldr	r0, [r4, #8]
 8005d24:	f001 f80d 	bl	8006d42 <atoi>
 8005d28:	8768      	strh	r0, [r5, #58]	; 0x3a
	return 1;
 8005d2a:	2001      	movs	r0, #1
}
 8005d2c:	bd38      	pop	{r3, r4, r5, pc}
			settings.offset_blue = atoi(argv[2]);
 8005d2e:	68a0      	ldr	r0, [r4, #8]
 8005d30:	f001 f807 	bl	8006d42 <atoi>
 8005d34:	f8a5 0046 	strh.w	r0, [r5, #70]	; 0x46
 8005d38:	e7f7      	b.n	8005d2a <shell_cmd_setoffset+0x2a>
		return 0;
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	e7f6      	b.n	8005d2c <shell_cmd_setoffset+0x2c>
 8005d3e:	bf00      	nop
 8005d40:	20000a70 	.word	0x20000a70

08005d44 <shell_cmd_setgain>:
	if (argc == 2)
 8005d44:	2802      	cmp	r0, #2
{
 8005d46:	b538      	push	{r3, r4, r5, lr}
 8005d48:	460c      	mov	r4, r1
	if (argc == 2)
 8005d4a:	d118      	bne.n	8005d7e <shell_cmd_setgain+0x3a>
		switch (atoi(argv[1]))
 8005d4c:	6848      	ldr	r0, [r1, #4]
 8005d4e:	f000 fff8 	bl	8006d42 <atoi>
 8005d52:	4d0c      	ldr	r5, [pc, #48]	; (8005d84 <shell_cmd_setgain+0x40>)
 8005d54:	b138      	cbz	r0, 8005d66 <shell_cmd_setgain+0x22>
 8005d56:	2802      	cmp	r0, #2
 8005d58:	d00b      	beq.n	8005d72 <shell_cmd_setgain+0x2e>
			settings.gain_green = atoi(argv[2]);
 8005d5a:	68a0      	ldr	r0, [r4, #8]
 8005d5c:	f000 fff1 	bl	8006d42 <atoi>
 8005d60:	f8a5 0042 	strh.w	r0, [r5, #66]	; 0x42
 8005d64:	e003      	b.n	8005d6e <shell_cmd_setgain+0x2a>
			settings.gain_red = atoi(argv[2]);
 8005d66:	68a0      	ldr	r0, [r4, #8]
 8005d68:	f000 ffeb 	bl	8006d42 <atoi>
 8005d6c:	87a8      	strh	r0, [r5, #60]	; 0x3c
	return 1;
 8005d6e:	2001      	movs	r0, #1
}
 8005d70:	bd38      	pop	{r3, r4, r5, pc}
			settings.gain_blue = atoi(argv[2]);
 8005d72:	68a0      	ldr	r0, [r4, #8]
 8005d74:	f000 ffe5 	bl	8006d42 <atoi>
 8005d78:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
 8005d7c:	e7f7      	b.n	8005d6e <shell_cmd_setgain+0x2a>
		return 0;
 8005d7e:	2000      	movs	r0, #0
 8005d80:	e7f6      	b.n	8005d70 <shell_cmd_setgain+0x2c>
 8005d82:	bf00      	nop
 8005d84:	20000a70 	.word	0x20000a70

08005d88 <shell_cmd_setfxmultiplier>:
{
 8005d88:	b510      	push	{r4, lr}
	uint8_t val = atoi(argv[1]);
 8005d8a:	6848      	ldr	r0, [r1, #4]
 8005d8c:	f000 ffd9 	bl	8006d42 <atoi>
 8005d90:	b2c0      	uxtb	r0, r0
	if ((val == 4) || (val == 2) || (val == 1))
 8005d92:	2804      	cmp	r0, #4
 8005d94:	4c07      	ldr	r4, [pc, #28]	; (8005db4 <shell_cmd_setfxmultiplier+0x2c>)
 8005d96:	d002      	beq.n	8005d9e <shell_cmd_setfxmultiplier+0x16>
 8005d98:	1e43      	subs	r3, r0, #1
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d803      	bhi.n	8005da6 <shell_cmd_setfxmultiplier+0x1e>
		settings.fx_multiplier = val;
 8005d9e:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
}
 8005da2:	2001      	movs	r0, #1
 8005da4:	bd10      	pop	{r4, pc}
		print("Invalid Multiplier");
 8005da6:	4804      	ldr	r0, [pc, #16]	; (8005db8 <shell_cmd_setfxmultiplier+0x30>)
 8005da8:	f7ff fca2 	bl	80056f0 <print>
		settings.fx_multiplier = 4;
 8005dac:	2304      	movs	r3, #4
 8005dae:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 8005db2:	e7f6      	b.n	8005da2 <shell_cmd_setfxmultiplier+0x1a>
 8005db4:	20000a70 	.word	0x20000a70
 8005db8:	08008220 	.word	0x08008220

08005dbc <shell_cmd_test>:
	if (argc == 1)
 8005dbc:	2801      	cmp	r0, #1
{
 8005dbe:	b510      	push	{r4, lr}
 8005dc0:	4604      	mov	r4, r0
	if (argc == 1)
 8005dc2:	d105      	bne.n	8005dd0 <shell_cmd_test+0x14>
		print("Loopback Data: %s",argv[1]);
 8005dc4:	6849      	ldr	r1, [r1, #4]
 8005dc6:	4803      	ldr	r0, [pc, #12]	; (8005dd4 <shell_cmd_test+0x18>)
 8005dc8:	f7ff fc92 	bl	80056f0 <print>
}
 8005dcc:	4620      	mov	r0, r4
 8005dce:	bd10      	pop	{r4, pc}
	return 0;
 8005dd0:	2400      	movs	r4, #0
 8005dd2:	e7fb      	b.n	8005dcc <shell_cmd_test+0x10>
 8005dd4:	08008233 	.word	0x08008233

08005dd8 <shell_cmd_setreg>:
	if (argc == 2)
 8005dd8:	2802      	cmp	r0, #2
{
 8005dda:	b538      	push	{r3, r4, r5, lr}
 8005ddc:	460c      	mov	r4, r1
	if (argc == 2)
 8005dde:	d10c      	bne.n	8005dfa <shell_cmd_setreg+0x22>
		set_reg(atoi(argv[1]),atoi(argv[2]));
 8005de0:	6848      	ldr	r0, [r1, #4]
 8005de2:	f000 ffae 	bl	8006d42 <atoi>
 8005de6:	4605      	mov	r5, r0
 8005de8:	68a0      	ldr	r0, [r4, #8]
 8005dea:	f000 ffaa 	bl	8006d42 <atoi>
 8005dee:	b2c1      	uxtb	r1, r0
 8005df0:	4628      	mov	r0, r5
 8005df2:	f7fe f8d9 	bl	8003fa8 <set_reg>
 8005df6:	2001      	movs	r0, #1
}
 8005df8:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	e7fc      	b.n	8005df8 <shell_cmd_setreg+0x20>

08005dfe <shell_cmd_setbrightness>:
	if (argc == 1)
 8005dfe:	2801      	cmp	r0, #1
{
 8005e00:	b510      	push	{r4, lr}
 8005e02:	4604      	mov	r4, r0
	if (argc == 1)
 8005e04:	d108      	bne.n	8005e18 <shell_cmd_setbrightness+0x1a>
		set_reg(MAX_BRIGHTNESS,(uint8_t) atoi(argv[1]));
 8005e06:	6848      	ldr	r0, [r1, #4]
 8005e08:	f000 ff9b 	bl	8006d42 <atoi>
 8005e0c:	b2c1      	uxtb	r1, r0
 8005e0e:	2000      	movs	r0, #0
 8005e10:	f7fe f8ca 	bl	8003fa8 <set_reg>
}
 8005e14:	4620      	mov	r0, r4
 8005e16:	bd10      	pop	{r4, pc}
		return 0;
 8005e18:	2400      	movs	r4, #0
 8005e1a:	e7fb      	b.n	8005e14 <shell_cmd_setbrightness+0x16>

08005e1c <shell_cmd_setpwm>:
	if (argc == 3)
 8005e1c:	2803      	cmp	r0, #3
{
 8005e1e:	b570      	push	{r4, r5, r6, lr}
 8005e20:	460c      	mov	r4, r1
	if (argc == 3)
 8005e22:	d111      	bne.n	8005e48 <shell_cmd_setpwm+0x2c>
		configPWM((pwmtimerid_t)atoi(argv[1]),(pwmchid_t)atoi(argv[2]), (uint16_t)atoi(argv[3]));
 8005e24:	6848      	ldr	r0, [r1, #4]
 8005e26:	f000 ff8c 	bl	8006d42 <atoi>
 8005e2a:	4605      	mov	r5, r0
 8005e2c:	68a0      	ldr	r0, [r4, #8]
 8005e2e:	f000 ff88 	bl	8006d42 <atoi>
 8005e32:	4606      	mov	r6, r0
 8005e34:	68e0      	ldr	r0, [r4, #12]
 8005e36:	f000 ff84 	bl	8006d42 <atoi>
 8005e3a:	b2f1      	uxtb	r1, r6
 8005e3c:	b282      	uxth	r2, r0
 8005e3e:	b2e8      	uxtb	r0, r5
 8005e40:	f7ff f86e 	bl	8004f20 <configPWM>
 8005e44:	2001      	movs	r0, #1
}
 8005e46:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 8005e48:	2000      	movs	r0, #0
 8005e4a:	e7fc      	b.n	8005e46 <shell_cmd_setpwm+0x2a>

08005e4c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e4c:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <HAL_MspInit+0x3c>)
{
 8005e4e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	619a      	str	r2, [r3, #24]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	f002 0201 	and.w	r2, r2, #1
 8005e5e:	9200      	str	r2, [sp, #0]
 8005e60:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e62:	69da      	ldr	r2, [r3, #28]
 8005e64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e68:	61da      	str	r2, [r3, #28]
 8005e6a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e6c:	4a07      	ldr	r2, [pc, #28]	; (8005e8c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e76:	6853      	ldr	r3, [r2, #4]
 8005e78:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005e7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e82:	b002      	add	sp, #8
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	40010000 	.word	0x40010000

08005e90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005e90:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e92:	2410      	movs	r4, #16
{
 8005e94:	4605      	mov	r5, r0
 8005e96:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e98:	4622      	mov	r2, r4
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	eb0d 0004 	add.w	r0, sp, r4
 8005ea0:	f000 ffa1 	bl	8006de6 <memset>
  if(hadc->Instance==ADC1)
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	4a1e      	ldr	r2, [pc, #120]	; (8005f20 <HAL_ADC_MspInit+0x90>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d11d      	bne.n	8005ee8 <HAL_ADC_MspInit+0x58>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005eac:	4b1d      	ldr	r3, [pc, #116]	; (8005f24 <HAL_ADC_MspInit+0x94>)
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = ANALOG_0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(ANALOG_0_GPIO_Port, &GPIO_InitStruct);
 8005eae:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb8:	619a      	str	r2, [r3, #24]
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005ec0:	9200      	str	r2, [sp, #0]
 8005ec2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	f042 0204 	orr.w	r2, r2, #4
 8005eca:	619a      	str	r2, [r3, #24]
 8005ecc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ece:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	9301      	str	r3, [sp, #4]
 8005ed6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e9cd 2304 	strd	r2, r3, [sp, #16]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN4 
    */
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8005ede:	4812      	ldr	r0, [pc, #72]	; (8005f28 <HAL_ADC_MspInit+0x98>)
 8005ee0:	f7fb f924 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005ee4:	b009      	add	sp, #36	; 0x24
 8005ee6:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 8005ee8:	4a10      	ldr	r2, [pc, #64]	; (8005f2c <HAL_ADC_MspInit+0x9c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d1fa      	bne.n	8005ee4 <HAL_ADC_MspInit+0x54>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005eee:	4b0d      	ldr	r3, [pc, #52]	; (8005f24 <HAL_ADC_MspInit+0x94>)
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8005ef0:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005ef2:	699a      	ldr	r2, [r3, #24]
 8005ef4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ef8:	619a      	str	r2, [r3, #24]
 8005efa:	699a      	ldr	r2, [r3, #24]
 8005efc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8005f00:	9202      	str	r2, [sp, #8]
 8005f02:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f04:	699a      	ldr	r2, [r3, #24]
 8005f06:	f042 0204 	orr.w	r2, r2, #4
 8005f0a:	619a      	str	r2, [r3, #24]
 8005f0c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8005f0e:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	9303      	str	r3, [sp, #12]
 8005f16:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	9305      	str	r3, [sp, #20]
 8005f1c:	e7df      	b.n	8005ede <HAL_ADC_MspInit+0x4e>
 8005f1e:	bf00      	nop
 8005f20:	40012400 	.word	0x40012400
 8005f24:	40021000 	.word	0x40021000
 8005f28:	40010800 	.word	0x40010800
 8005f2c:	40012800 	.word	0x40012800

08005f30 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f30:	2210      	movs	r2, #16
{
 8005f32:	b510      	push	{r4, lr}
 8005f34:	4604      	mov	r4, r0
 8005f36:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f38:	eb0d 0002 	add.w	r0, sp, r2
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	f000 ff52 	bl	8006de6 <memset>
  if(huart->Instance==USART1)
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	4a2a      	ldr	r2, [pc, #168]	; (8005ff0 <HAL_UART_MspInit+0xc0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d125      	bne.n	8005f96 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f4a:	4b2a      	ldr	r3, [pc, #168]	; (8005ff4 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = RS485_RXTX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f4c:	2040      	movs	r0, #64	; 0x40
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f4e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8005f50:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f56:	619a      	str	r2, [r3, #24]
 8005f58:	699a      	ldr	r2, [r3, #24]
 8005f5a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005f5e:	9200      	str	r2, [sp, #0]
 8005f60:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f62:	699a      	ldr	r2, [r3, #24]
 8005f64:	f042 0208 	orr.w	r2, r2, #8
 8005f68:	619a      	str	r2, [r3, #24]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	9301      	str	r3, [sp, #4]
 8005f72:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f74:	2312      	movs	r3, #18
 8005f76:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f7a:	2303      	movs	r3, #3
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8005f7c:	481e      	ldr	r0, [pc, #120]	; (8005ff8 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f7e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8005f80:	f7fb f8d4 	bl	800112c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8005f84:	4a1d      	ldr	r2, [pc, #116]	; (8005ffc <HAL_UART_MspInit+0xcc>)
 8005f86:	6853      	ldr	r3, [r2, #4]
 8005f88:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005f8c:	f043 0304 	orr.w	r3, r3, #4
 8005f90:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005f92:	b008      	add	sp, #32
 8005f94:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8005f96:	4a1a      	ldr	r2, [pc, #104]	; (8006000 <HAL_UART_MspInit+0xd0>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d1fa      	bne.n	8005f92 <HAL_UART_MspInit+0x62>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005f9c:	4b15      	ldr	r3, [pc, #84]	; (8005ff4 <HAL_UART_MspInit+0xc4>)
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 8005f9e:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8005fa0:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 8005fa2:	4815      	ldr	r0, [pc, #84]	; (8005ff8 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005fa4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005fa8:	61da      	str	r2, [r3, #28]
 8005faa:	69da      	ldr	r2, [r3, #28]
 8005fac:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005fb0:	9202      	str	r2, [sp, #8]
 8005fb2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	f042 0208 	orr.w	r2, r2, #8
 8005fba:	619a      	str	r2, [r3, #24]
 8005fbc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	9303      	str	r3, [sp, #12]
 8005fc8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 8005fd4:	f7fb f8aa 	bl	800112c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f44f 6100 	mov.w	r1, #2048	; 0x800
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 8005fde:	4806      	ldr	r0, [pc, #24]	; (8005ff8 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fe0:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 8005fe4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fe6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 8005fe8:	f7fb f8a0 	bl	800112c <HAL_GPIO_Init>
}
 8005fec:	e7d1      	b.n	8005f92 <HAL_UART_MspInit+0x62>
 8005fee:	bf00      	nop
 8005ff0:	40013800 	.word	0x40013800
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	40010c00 	.word	0x40010c00
 8005ffc:	40010000 	.word	0x40010000
 8006000:	40004800 	.word	0x40004800

08006004 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006004:	4770      	bx	lr

08006006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006006:	e7fe      	b.n	8006006 <HardFault_Handler>

08006008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006008:	e7fe      	b.n	8006008 <MemManage_Handler>

0800600a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800600a:	e7fe      	b.n	800600a <BusFault_Handler>

0800600c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800600c:	e7fe      	b.n	800600c <UsageFault_Handler>

0800600e <SVC_Handler>:
 800600e:	4770      	bx	lr

08006010 <DebugMon_Handler>:
 8006010:	4770      	bx	lr

08006012 <PendSV_Handler>:
 8006012:	4770      	bx	lr

08006014 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006014:	f7fa bb5c 	b.w	80006d0 <HAL_IncTick>

08006018 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006018:	4801      	ldr	r0, [pc, #4]	; (8006020 <DMA1_Channel3_IRQHandler+0x8>)
 800601a:	f7fa bec5 	b.w	8000da8 <HAL_DMA_IRQHandler>
 800601e:	bf00      	nop
 8006020:	20000cec 	.word	0x20000cec

08006024 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006024:	4801      	ldr	r0, [pc, #4]	; (800602c <DMA1_Channel4_IRQHandler+0x8>)
 8006026:	f7fa bebf 	b.w	8000da8 <HAL_DMA_IRQHandler>
 800602a:	bf00      	nop
 800602c:	20000ca8 	.word	0x20000ca8

08006030 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006030:	4801      	ldr	r0, [pc, #4]	; (8006038 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8006032:	f7fb ba97 	b.w	8001564 <HAL_PCD_IRQHandler>
 8006036:	bf00      	nop
 8006038:	200014bc 	.word	0x200014bc

0800603c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800603c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800603e:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <_sbrk+0x2c>)
{
 8006040:	4602      	mov	r2, r0
	if (heap_end == 0)
 8006042:	6819      	ldr	r1, [r3, #0]
 8006044:	b909      	cbnz	r1, 800604a <_sbrk+0xe>
		heap_end = &end;
 8006046:	4909      	ldr	r1, [pc, #36]	; (800606c <_sbrk+0x30>)
 8006048:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800604a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800604c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800604e:	4402      	add	r2, r0
 8006050:	428a      	cmp	r2, r1
 8006052:	d906      	bls.n	8006062 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006054:	f000 fe82 	bl	8006d5c <__errno>
 8006058:	230c      	movs	r3, #12
 800605a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800605c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8006060:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8006062:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8006064:	e7fc      	b.n	8006060 <_sbrk+0x24>
 8006066:	bf00      	nop
 8006068:	200006f8 	.word	0x200006f8
 800606c:	20001930 	.word	0x20001930

08006070 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006070:	4b0f      	ldr	r3, [pc, #60]	; (80060b0 <SystemInit+0x40>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	f042 0201 	orr.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800607a:	6859      	ldr	r1, [r3, #4]
 800607c:	4a0d      	ldr	r2, [pc, #52]	; (80060b4 <SystemInit+0x44>)
 800607e:	400a      	ands	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006088:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800608c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006094:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800609c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800609e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80060a2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80060a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060a8:	4b03      	ldr	r3, [pc, #12]	; (80060b8 <SystemInit+0x48>)
 80060aa:	609a      	str	r2, [r3, #8]
#endif 
}
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40021000 	.word	0x40021000
 80060b4:	f8ff0000 	.word	0xf8ff0000
 80060b8:	e000ed00 	.word	0xe000ed00

080060bc <lights_off>:
							 {PWM_CH3,CH_RED},{PWM_CH3,CH_GREEN},{PWM_CH3,CH_BLUE},{PWM_CH3,CH_WHITE}};



void lights_off(void)
{
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	2400      	movs	r4, #0
	for (uint8_t ii=0;ii<STATE_CNT;ii++)
		configPWM(states[ii].id,states[ii].ch, 0);
 80060c0:	4d05      	ldr	r5, [pc, #20]	; (80060d8 <lights_off+0x1c>)
 80060c2:	192b      	adds	r3, r5, r4
 80060c4:	5d28      	ldrb	r0, [r5, r4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	7859      	ldrb	r1, [r3, #1]
 80060ca:	3402      	adds	r4, #2
 80060cc:	f7fe ff28 	bl	8004f20 <configPWM>
	for (uint8_t ii=0;ii<STATE_CNT;ii++)
 80060d0:	2c14      	cmp	r4, #20
 80060d2:	d1f6      	bne.n	80060c2 <lights_off+0x6>
}
 80060d4:	bd38      	pop	{r3, r4, r5, pc}
 80060d6:	bf00      	nop
 80060d8:	20000189 	.word	0x20000189

080060dc <process_testmode>:

uint8_t process_testmode(void)
{
 80060dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t button_state = 1;

	if (done)
 80060e0:	4a21      	ldr	r2, [pc, #132]	; (8006168 <process_testmode+0x8c>)
 80060e2:	4b22      	ldr	r3, [pc, #136]	; (800616c <process_testmode+0x90>)
 80060e4:	7811      	ldrb	r1, [r2, #0]
 80060e6:	881c      	ldrh	r4, [r3, #0]
 80060e8:	461d      	mov	r5, r3
 80060ea:	4616      	mov	r6, r2
 80060ec:	b141      	cbz	r1, 8006100 <process_testmode+0x24>
	{
		if (cnt == 0)
 80060ee:	b91c      	cbnz	r4, 80060f8 <process_testmode+0x1c>
		{
			done = 0;
			return 0;
 80060f0:	4620      	mov	r0, r4
			done = 0;
 80060f2:	7014      	strb	r4, [r2, #0]
			done = 1;
		}
		last_button_state = button_state;
	}
	return 1;
}
 80060f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cnt--;
 80060f8:	3c01      	subs	r4, #1
 80060fa:	801c      	strh	r4, [r3, #0]
	return 1;
 80060fc:	2001      	movs	r0, #1
 80060fe:	e7f9      	b.n	80060f4 <process_testmode+0x18>
		if (cnt == 0)
 8006100:	b9bc      	cbnz	r4, 8006132 <process_testmode+0x56>
			cnt = STEP_CNT;
 8006102:	f64e 2360 	movw	r3, #60000	; 0xea60
			configPWM(states[state].id,states[state].ch, MAX_PWM);
 8006106:	4f1a      	ldr	r7, [pc, #104]	; (8006170 <process_testmode+0x94>)
			cnt = STEP_CNT;
 8006108:	802b      	strh	r3, [r5, #0]
			lights_off();
 800610a:	f7ff ffd7 	bl	80060bc <lights_off>
			configPWM(states[state].id,states[state].ch, MAX_PWM);
 800610e:	4b19      	ldr	r3, [pc, #100]	; (8006174 <process_testmode+0x98>)
 8006110:	7838      	ldrb	r0, [r7, #0]
 8006112:	f240 4234 	movw	r2, #1076	; 0x434
 8006116:	eb03 0140 	add.w	r1, r3, r0, lsl #1
 800611a:	7849      	ldrb	r1, [r1, #1]
 800611c:	f813 0010 	ldrb.w	r0, [r3, r0, lsl #1]
 8006120:	f7fe fefe 	bl	8004f20 <configPWM>
			state++;
 8006124:	783b      	ldrb	r3, [r7, #0]
 8006126:	3301      	adds	r3, #1
 8006128:	b2db      	uxtb	r3, r3
			if (state == STATE_CNT)
 800612a:	2b0a      	cmp	r3, #10
			state++;
 800612c:	bf14      	ite	ne
 800612e:	703b      	strbne	r3, [r7, #0]
				state = 0;
 8006130:	703c      	strbeq	r4, [r7, #0]
		cnt--;
 8006132:	882b      	ldrh	r3, [r5, #0]
		if ((last_button_state == 0) && (button_state == 1))
 8006134:	4c10      	ldr	r4, [pc, #64]	; (8006178 <process_testmode+0x9c>)
		cnt--;
 8006136:	3b01      	subs	r3, #1
 8006138:	802b      	strh	r3, [r5, #0]
		button_state = check_button();
 800613a:	f7fe f9cb 	bl	80044d4 <check_button>
		if ((last_button_state == 0) && (button_state == 1))
 800613e:	f894 8000 	ldrb.w	r8, [r4]
		button_state = check_button();
 8006142:	4607      	mov	r7, r0
		if ((last_button_state == 0) && (button_state == 1))
 8006144:	f1b8 0f00 	cmp.w	r8, #0
 8006148:	d10b      	bne.n	8006162 <process_testmode+0x86>
 800614a:	2801      	cmp	r0, #1
 800614c:	d109      	bne.n	8006162 <process_testmode+0x86>
			last_button_state = 1;
 800614e:	7020      	strb	r0, [r4, #0]
			lights_off();
 8006150:	f7ff ffb4 	bl	80060bc <lights_off>
			cnt = STEP_CNT;
 8006154:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006158:	802b      	strh	r3, [r5, #0]
			state = 0;
 800615a:	4b05      	ldr	r3, [pc, #20]	; (8006170 <process_testmode+0x94>)
			done = 1;
 800615c:	7037      	strb	r7, [r6, #0]
			state = 0;
 800615e:	f883 8000 	strb.w	r8, [r3]
		last_button_state = button_state;
 8006162:	7027      	strb	r7, [r4, #0]
 8006164:	e7ca      	b.n	80060fc <process_testmode+0x20>
 8006166:	bf00      	nop
 8006168:	200006fe 	.word	0x200006fe
 800616c:	200006fc 	.word	0x200006fc
 8006170:	200006ff 	.word	0x200006ff
 8006174:	20000189 	.word	0x20000189
 8006178:	20000188 	.word	0x20000188

0800617c <ADC1_2_IRQHandler>:
ADC_HandleTypeDef* currentADCHandler = &hadc1;

void ADC1_2_IRQHandler()
{
	//need to figure out where IRQ comes from here....
	HAL_ADC_IRQHandler(currentADCHandler);
 800617c:	4b01      	ldr	r3, [pc, #4]	; (8006184 <ADC1_2_IRQHandler+0x8>)
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	f7fa babc 	b.w	80006fc <HAL_ADC_IRQHandler>
 8006184:	200001a0 	.word	0x200001a0

08006188 <HAL_ADC_ConvCpltCallback>:
    //HAL_ADC_IRQHandler(&hadc1);
    //HAL_ADC_IRQHandler(&hadc2);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t adc = 0;
	uint32_t sum = 0;
	uint32_t adcval = 0;

	if (hadc->Instance == ADC2)
 800618a:	6804      	ldr	r4, [r0, #0]
 800618c:	4b1a      	ldr	r3, [pc, #104]	; (80061f8 <HAL_ADC_ConvCpltCallback+0x70>)
{
 800618e:	4605      	mov	r5, r0
	if (hadc->Instance == ADC2)
 8006190:	1ae3      	subs	r3, r4, r3
 8006192:	425c      	negs	r4, r3
 8006194:	415c      	adcs	r4, r3
	{
		adc = 1;
	}

	adcval = HAL_ADC_GetValue(hadc);
 8006196:	f7fa faad 	bl	80006f4 <HAL_ADC_GetValue>
	adcval = adcval / 16; //Convert to 8-bit...
	adcdata[adc].buf[adcdata[adc].bufcnt] = (uint16_t)adcval;
 800619a:	4a18      	ldr	r2, [pc, #96]	; (80061fc <HAL_ADC_ConvCpltCallback+0x74>)
 800619c:	0121      	lsls	r1, r4, #4
 800619e:	1857      	adds	r7, r2, r1
 80061a0:	7bbb      	ldrb	r3, [r7, #14]
 80061a2:	00e4      	lsls	r4, r4, #3
 80061a4:	18e6      	adds	r6, r4, r3
	adcdata[adc].bufcnt++;
 80061a6:	3301      	adds	r3, #1
 80061a8:	b2db      	uxtb	r3, r3
	adcdata[adc].buf[adcdata[adc].bufcnt] = (uint16_t)adcval;
 80061aa:	eb02 0646 	add.w	r6, r2, r6, lsl #1
	adcval = adcval / 16; //Convert to 8-bit...
 80061ae:	0900      	lsrs	r0, r0, #4

	//Calculate average over x samples to reduce noise
	if (ADC_BUF_SIZE == adcdata[adc].bufcnt)
 80061b0:	2b05      	cmp	r3, #5
	adcdata[adc].buf[adcdata[adc].bufcnt] = (uint16_t)adcval;
 80061b2:	80b0      	strh	r0, [r6, #4]
	adcdata[adc].bufcnt++;
 80061b4:	73bb      	strb	r3, [r7, #14]
	if (ADC_BUF_SIZE == adcdata[adc].bufcnt)
 80061b6:	d111      	bne.n	80061dc <HAL_ADC_ConvCpltCallback+0x54>
	uint32_t sum = 0;
 80061b8:	2000      	movs	r0, #0
 80061ba:	3406      	adds	r4, #6
 80061bc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80061c0:	3402      	adds	r4, #2
	{
		do
		{
			adcdata[adc].bufcnt--;
 80061c2:	3b01      	subs	r3, #1
			sum = sum + adcdata[adc].buf[adcdata[adc].bufcnt];
 80061c4:	f834 6d02 	ldrh.w	r6, [r4, #-2]!
		}
		while(adcdata[adc].bufcnt > 0);
 80061c8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			sum = sum + adcdata[adc].buf[adcdata[adc].bufcnt];
 80061cc:	4430      	add	r0, r6
		while(adcdata[adc].bufcnt > 0);
 80061ce:	d1f8      	bne.n	80061c2 <HAL_ADC_ConvCpltCallback+0x3a>
 80061d0:	1854      	adds	r4, r2, r1
 80061d2:	73a3      	strb	r3, [r4, #14]
		adcdata[adc].adc_val = (uint16_t)(sum / ADC_BUF_SIZE);
 80061d4:	2305      	movs	r3, #5
 80061d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80061da:	5250      	strh	r0, [r2, r1]
	}

	//swap ADC
	if (hadc->Instance == ADC1)
 80061dc:	682a      	ldr	r2, [r5, #0]
 80061de:	4b08      	ldr	r3, [pc, #32]	; (8006200 <HAL_ADC_ConvCpltCallback+0x78>)
 80061e0:	429a      	cmp	r2, r3
		currentADCHandler = &hadc2;
 80061e2:	bf08      	it	eq
 80061e4:	4a07      	ldreq	r2, [pc, #28]	; (8006204 <HAL_ADC_ConvCpltCallback+0x7c>)
 80061e6:	4b08      	ldr	r3, [pc, #32]	; (8006208 <HAL_ADC_ConvCpltCallback+0x80>)
	else
		currentADCHandler = &hadc1;
 80061e8:	bf18      	it	ne
 80061ea:	4a08      	ldrne	r2, [pc, #32]	; (800620c <HAL_ADC_ConvCpltCallback+0x84>)
 80061ec:	601a      	str	r2, [r3, #0]
	//Start ADC Again
    HAL_ADC_Start_IT(currentADCHandler);
 80061ee:	6818      	ldr	r0, [r3, #0]
}
 80061f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADC_Start_IT(currentADCHandler);
 80061f4:	f7fa bbae 	b.w	8000954 <HAL_ADC_Start_IT>
 80061f8:	40012800 	.word	0x40012800
 80061fc:	20000df0 	.word	0x20000df0
 8006200:	40012400 	.word	0x40012400
 8006204:	20000b6c 	.word	0x20000b6c
 8006208:	200001a0 	.word	0x200001a0
 800620c:	20000be0 	.word	0x20000be0

08006210 <init_trigger>:


void init_trigger(void)
{
 8006210:	b510      	push	{r4, lr}
	//Clear data
	for (uint8_t ii=0;ii<2;ii++)
		memset(&adcdata[ii], 0, sizeof(adcdata_s));
 8006212:	2410      	movs	r4, #16
 8006214:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <init_trigger+0x38>)
 8006216:	4622      	mov	r2, r4
 8006218:	4618      	mov	r0, r3
 800621a:	2100      	movs	r1, #0
 800621c:	f000 fde3 	bl	8006de6 <memset>
 8006220:	4622      	mov	r2, r4
 8006222:	2100      	movs	r1, #0
 8006224:	4420      	add	r0, r4
 8006226:	f000 fdde 	bl	8006de6 <memset>

	//Eanble IRQ's
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800622a:	2200      	movs	r2, #0
 800622c:	2012      	movs	r0, #18
 800622e:	4611      	mov	r1, r2
 8006230:	f7fa fcac 	bl	8000b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8006234:	2012      	movs	r0, #18
 8006236:	f7fa fcdd 	bl	8000bf4 <HAL_NVIC_EnableIRQ>

	//Setup IRQ's
	HAL_ADC_Start_IT(currentADCHandler);
}
 800623a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_Start_IT(currentADCHandler);
 800623e:	4b03      	ldr	r3, [pc, #12]	; (800624c <init_trigger+0x3c>)
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	f7fa bb87 	b.w	8000954 <HAL_ADC_Start_IT>
 8006246:	bf00      	nop
 8006248:	20000df0 	.word	0x20000df0
 800624c:	200001a0 	.word	0x200001a0

08006250 <process_trigger>:

void process_trigger(void)
{
 8006250:	b538      	push	{r3, r4, r5, lr}
	//check if ADC Value has changed
	if ((settings.trigger_mode_A0 != TRIGGERMODE_NONE) && (adcdata[0].adc_val != adcdata[0].last_adc_val))
 8006252:	4c29      	ldr	r4, [pc, #164]	; (80062f8 <process_trigger+0xa8>)
 8006254:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8006258:	b150      	cbz	r0, 8006270 <process_trigger+0x20>
 800625a:	4d28      	ldr	r5, [pc, #160]	; (80062fc <process_trigger+0xac>)
 800625c:	8829      	ldrh	r1, [r5, #0]
 800625e:	886a      	ldrh	r2, [r5, #2]
 8006260:	4291      	cmp	r1, r2
 8006262:	d005      	beq.n	8006270 <process_trigger+0x20>
	{
		//Based on Settings manipulate Registers
		switch(settings.trigger_mode_A0)
 8006264:	2801      	cmp	r0, #1
 8006266:	d012      	beq.n	800628e <process_trigger+0x3e>
 8006268:	2802      	cmp	r0, #2
 800626a:	d016      	beq.n	800629a <process_trigger+0x4a>
				}

				break;
		}
		//Store Last Value
		adcdata[0].last_adc_val = adcdata[0].adc_val;
 800626c:	882b      	ldrh	r3, [r5, #0]
 800626e:	806b      	strh	r3, [r5, #2]
	}

	//check if ADC Value has changed
	if ((settings.trigger_mode_A1 != TRIGGERMODE_NONE) && (adcdata[1].adc_val != adcdata[1].last_adc_val))
 8006270:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
 8006274:	b150      	cbz	r0, 800628c <process_trigger+0x3c>
 8006276:	4d21      	ldr	r5, [pc, #132]	; (80062fc <process_trigger+0xac>)
 8006278:	8a29      	ldrh	r1, [r5, #16]
 800627a:	8a6a      	ldrh	r2, [r5, #18]
 800627c:	4291      	cmp	r1, r2
 800627e:	d005      	beq.n	800628c <process_trigger+0x3c>
	{
		//Based on Settings manipulate Registers
		switch(settings.trigger_mode_A1)
 8006280:	2801      	cmp	r0, #1
 8006282:	d01e      	beq.n	80062c2 <process_trigger+0x72>
 8006284:	2802      	cmp	r0, #2
 8006286:	d022      	beq.n	80062ce <process_trigger+0x7e>
				}

				break;
		}
		//Store Last Value
		adcdata[1].last_adc_val = adcdata[1].adc_val;
 8006288:	8a2b      	ldrh	r3, [r5, #16]
 800628a:	826b      	strh	r3, [r5, #18]
	}
}
 800628c:	bd38      	pop	{r3, r4, r5, pc}
				set_reg(settings.trigger_reg_A0, adcdata[0].adc_val);
 800628e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8006292:	b2c9      	uxtb	r1, r1
					set_reg(settings.trigger_reg_hilo_A0, settings.trigger_val_hilo_A0);
 8006294:	f7fd fe88 	bl	8003fa8 <set_reg>
 8006298:	e7e8      	b.n	800626c <process_trigger+0x1c>
				if ((adcdata[0].adc_val > settings.trigger_level_A0) && (adcdata[0].last_adc_val < settings.trigger_level_A0))
 800629a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800629e:	4299      	cmp	r1, r3
 80062a0:	d906      	bls.n	80062b0 <process_trigger+0x60>
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d204      	bcs.n	80062b0 <process_trigger+0x60>
					set_reg(settings.trigger_reg_lohi_A0, settings.trigger_val_lohi_A0);
 80062a6:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80062aa:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 80062ae:	e7f1      	b.n	8006294 <process_trigger+0x44>
				else if ((adcdata[0].adc_val <settings. trigger_level_A0) && (adcdata[0].last_adc_val > settings.trigger_level_A0))
 80062b0:	4299      	cmp	r1, r3
 80062b2:	d2db      	bcs.n	800626c <process_trigger+0x1c>
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d9d9      	bls.n	800626c <process_trigger+0x1c>
					set_reg(settings.trigger_reg_hilo_A0, settings.trigger_val_hilo_A0);
 80062b8:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 80062bc:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 80062c0:	e7e8      	b.n	8006294 <process_trigger+0x44>
				set_reg(settings.trigger_reg_A1, adcdata[1].adc_val);
 80062c2:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80062c6:	b2c9      	uxtb	r1, r1
					set_reg(settings.trigger_reg_hilo_A1, settings.trigger_val_hilo_A1);
 80062c8:	f7fd fe6e 	bl	8003fa8 <set_reg>
 80062cc:	e7dc      	b.n	8006288 <process_trigger+0x38>
				if ((adcdata[1].adc_val > settings.trigger_level_A1) && (adcdata[1].last_adc_val < settings.trigger_level_A1))
 80062ce:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80062d2:	4299      	cmp	r1, r3
 80062d4:	d906      	bls.n	80062e4 <process_trigger+0x94>
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d204      	bcs.n	80062e4 <process_trigger+0x94>
					set_reg(settings.trigger_reg_lohi_A1, settings.trigger_val_lohi_A1);
 80062da:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
 80062de:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80062e2:	e7f1      	b.n	80062c8 <process_trigger+0x78>
				else if ((adcdata[1].adc_val < settings.trigger_level_A1) && (adcdata[1].last_adc_val > settings.trigger_level_A1))
 80062e4:	4299      	cmp	r1, r3
 80062e6:	d2cf      	bcs.n	8006288 <process_trigger+0x38>
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d9cd      	bls.n	8006288 <process_trigger+0x38>
					set_reg(settings.trigger_reg_hilo_A1, settings.trigger_val_hilo_A1);
 80062ec:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80062f0:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
 80062f4:	e7e8      	b.n	80062c8 <process_trigger+0x78>
 80062f6:	bf00      	nop
 80062f8:	20000a70 	.word	0x20000a70
 80062fc:	20000df0 	.word	0x20000df0

08006300 <print_adc_data>:
		return 0;
}

void print_adc_data(void)
{
	for (int ii=0;ii<2;ii++)
 8006300:	2300      	movs	r3, #0
{
 8006302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006306:	4c12      	ldr	r4, [pc, #72]	; (8006350 <print_adc_data+0x50>)
	{
		print("ADC %d",ii+1);
 8006308:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8006368 <print_adc_data+0x68>
		print("-------");
 800630c:	4f11      	ldr	r7, [pc, #68]	; (8006354 <print_adc_data+0x54>)
		print("ADC VAL: %d",adcdata[ii].adc_val);
 800630e:	4e12      	ldr	r6, [pc, #72]	; (8006358 <print_adc_data+0x58>)
		print("ADC %d",ii+1);
 8006310:	1c5d      	adds	r5, r3, #1
 8006312:	4629      	mov	r1, r5
 8006314:	4640      	mov	r0, r8
 8006316:	f7ff f9eb 	bl	80056f0 <print>
		print("-------");
 800631a:	4638      	mov	r0, r7
 800631c:	f7ff f9e8 	bl	80056f0 <print>
		print("ADC VAL: %d",adcdata[ii].adc_val);
 8006320:	8821      	ldrh	r1, [r4, #0]
 8006322:	4630      	mov	r0, r6
 8006324:	f7ff f9e4 	bl	80056f0 <print>
		print("ADC LAST VAL: %d",adcdata[ii].last_adc_val);
 8006328:	8861      	ldrh	r1, [r4, #2]
 800632a:	480c      	ldr	r0, [pc, #48]	; (800635c <print_adc_data+0x5c>)
 800632c:	f7ff f9e0 	bl	80056f0 <print>
		print("ADC BUFCNT: %d",adcdata[ii].bufcnt);
 8006330:	7ba1      	ldrb	r1, [r4, #14]
 8006332:	480b      	ldr	r0, [pc, #44]	; (8006360 <print_adc_data+0x60>)
 8006334:	f7ff f9dc 	bl	80056f0 <print>
		print("");
 8006338:	480a      	ldr	r0, [pc, #40]	; (8006364 <print_adc_data+0x64>)
 800633a:	f7ff f9d9 	bl	80056f0 <print>
	for (int ii=0;ii<2;ii++)
 800633e:	2d02      	cmp	r5, #2
 8006340:	f104 0410 	add.w	r4, r4, #16
 8006344:	f04f 0301 	mov.w	r3, #1
 8006348:	d1e2      	bne.n	8006310 <print_adc_data+0x10>
	}

}
 800634a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800634e:	bf00      	nop
 8006350:	20000df0 	.word	0x20000df0
 8006354:	080080d0 	.word	0x080080d0
 8006358:	0800862d 	.word	0x0800862d
 800635c:	08008639 	.word	0x08008639
 8006360:	0800864a 	.word	0x0800864a
 8006364:	08008088 	.word	0x08008088
 8006368:	08008626 	.word	0x08008626

0800636c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800636c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800636e:	2200      	movs	r2, #0
 8006370:	490e      	ldr	r1, [pc, #56]	; (80063ac <MX_USB_DEVICE_Init+0x40>)
 8006372:	480f      	ldr	r0, [pc, #60]	; (80063b0 <MX_USB_DEVICE_Init+0x44>)
 8006374:	f7fd fa46 	bl	8003804 <USBD_Init>
 8006378:	b108      	cbz	r0, 800637e <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800637a:	f7fe fd0d 	bl	8004d98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800637e:	490d      	ldr	r1, [pc, #52]	; (80063b4 <MX_USB_DEVICE_Init+0x48>)
 8006380:	480b      	ldr	r0, [pc, #44]	; (80063b0 <MX_USB_DEVICE_Init+0x44>)
 8006382:	f7fd fa54 	bl	800382e <USBD_RegisterClass>
 8006386:	b108      	cbz	r0, 800638c <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8006388:	f7fe fd06 	bl	8004d98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800638c:	490a      	ldr	r1, [pc, #40]	; (80063b8 <MX_USB_DEVICE_Init+0x4c>)
 800638e:	4808      	ldr	r0, [pc, #32]	; (80063b0 <MX_USB_DEVICE_Init+0x44>)
 8006390:	f7fd f9f7 	bl	8003782 <USBD_CDC_RegisterInterface>
 8006394:	b108      	cbz	r0, 800639a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8006396:	f7fe fcff 	bl	8004d98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800639a:	4805      	ldr	r0, [pc, #20]	; (80063b0 <MX_USB_DEVICE_Init+0x44>)
 800639c:	f7fd fa4e 	bl	800383c <USBD_Start>
 80063a0:	b118      	cbz	r0, 80063aa <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80063a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80063a6:	f7fe bcf7 	b.w	8004d98 <Error_Handler>
}
 80063aa:	bd08      	pop	{r3, pc}
 80063ac:	200001b4 	.word	0x200001b4
 80063b0:	20000e10 	.word	0x20000e10
 80063b4:	20000008 	.word	0x20000008
 80063b8:	200001a4 	.word	0x200001a4

080063bc <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80063bc:	2000      	movs	r0, #0
 80063be:	4770      	bx	lr

080063c0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80063c0:	2000      	movs	r0, #0
 80063c2:	4770      	bx	lr

080063c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	4605      	mov	r5, r0
  //Loopback Test
  //CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
  //Send Data to ring buffer
  ring_buffer_put(&rx_buff, Buf, *Len);

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80063c8:	4c07      	ldr	r4, [pc, #28]	; (80063e8 <CDC_Receive_FS+0x24>)
  ring_buffer_put(&rx_buff, Buf, *Len);
 80063ca:	680a      	ldr	r2, [r1, #0]
 80063cc:	4601      	mov	r1, r0
 80063ce:	4807      	ldr	r0, [pc, #28]	; (80063ec <CDC_Receive_FS+0x28>)
 80063d0:	f7fe fe0e 	bl	8004ff0 <ring_buffer_put>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80063d4:	4629      	mov	r1, r5
 80063d6:	4620      	mov	r0, r4
 80063d8:	f7fd f9e2 	bl	80037a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80063dc:	4620      	mov	r0, r4
 80063de:	f7fd f9fe 	bl	80037de <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80063e2:	2000      	movs	r0, #0
 80063e4:	bd38      	pop	{r3, r4, r5, pc}
 80063e6:	bf00      	nop
 80063e8:	20000e10 	.word	0x20000e10
 80063ec:	20000b14 	.word	0x20000b14

080063f0 <CDC_Init_FS>:
{
 80063f0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80063f2:	4c06      	ldr	r4, [pc, #24]	; (800640c <CDC_Init_FS+0x1c>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	4906      	ldr	r1, [pc, #24]	; (8006410 <CDC_Init_FS+0x20>)
 80063f8:	4620      	mov	r0, r4
 80063fa:	f7fd f9c9 	bl	8003790 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80063fe:	4905      	ldr	r1, [pc, #20]	; (8006414 <CDC_Init_FS+0x24>)
 8006400:	4620      	mov	r0, r4
 8006402:	f7fd f9cd 	bl	80037a0 <USBD_CDC_SetRxBuffer>
}
 8006406:	2000      	movs	r0, #0
 8006408:	bd10      	pop	{r4, pc}
 800640a:	bf00      	nop
 800640c:	20000e10 	.word	0x20000e10
 8006410:	200012c8 	.word	0x200012c8
 8006414:	200010d4 	.word	0x200010d4

08006418 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006418:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800641a:	4c09      	ldr	r4, [pc, #36]	; (8006440 <CDC_Transmit_FS+0x28>)
{
 800641c:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800641e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8006422:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006426:	b943      	cbnz	r3, 800643a <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006428:	4601      	mov	r1, r0
 800642a:	4620      	mov	r0, r4
 800642c:	f7fd f9b0 	bl	8003790 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006430:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8006432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006436:	f7fd b9b9 	b.w	80037ac <USBD_CDC_TransmitPacket>
}
 800643a:	2001      	movs	r0, #1
 800643c:	bd10      	pop	{r4, pc}
 800643e:	bf00      	nop
 8006440:	20000e10 	.word	0x20000e10

08006444 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006444:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8006446:	4b0e      	ldr	r3, [pc, #56]	; (8006480 <HAL_PCD_MspInit+0x3c>)
 8006448:	6802      	ldr	r2, [r0, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d115      	bne.n	800647a <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800644e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8006452:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006454:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8006456:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800645a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800645c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800645e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006460:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8006462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800646a:	f7fa fb8f 	bl	8000b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800646e:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006470:	b003      	add	sp, #12
 8006472:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006476:	f7fa bbbd 	b.w	8000bf4 <HAL_NVIC_EnableIRQ>
}
 800647a:	b003      	add	sp, #12
 800647c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006480:	40005c00 	.word	0x40005c00

08006484 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006484:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8006488:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800648c:	f7fd b9ed 	b.w	800386a <USBD_LL_SetupStage>

08006490 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006490:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8006494:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8006498:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800649c:	f7fd ba12 	b.w	80038c4 <USBD_LL_DataOutStage>

080064a0 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80064a0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80064a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064a6:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80064aa:	f7fd ba45 	b.w	8003938 <USBD_LL_DataInStage>

080064ae <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80064ae:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80064b2:	f7fd bad9 	b.w	8003a68 <USBD_LL_SOF>

080064b6 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80064b6:	6883      	ldr	r3, [r0, #8]
{ 
 80064b8:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80064ba:	2b02      	cmp	r3, #2
{ 
 80064bc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80064be:	d001      	beq.n	80064c4 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80064c0:	f7fe fc6a 	bl	8004d98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80064c4:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 80064c8:	2101      	movs	r1, #1
 80064ca:	f7fd fab7 	bl	8003a3c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80064ce:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 80064d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80064d6:	f7fd ba8a 	b.w	80039ee <USBD_LL_Reset>
	...

080064dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064dc:	b510      	push	{r4, lr}
 80064de:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80064e0:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80064e4:	f7fd faad 	bl	8003a42 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80064e8:	69a3      	ldr	r3, [r4, #24]
 80064ea:	b123      	cbz	r3, 80064f6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80064ec:	4a02      	ldr	r2, [pc, #8]	; (80064f8 <HAL_PCD_SuspendCallback+0x1c>)
 80064ee:	6913      	ldr	r3, [r2, #16]
 80064f0:	f043 0306 	orr.w	r3, r3, #6
 80064f4:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80064f6:	bd10      	pop	{r4, pc}
 80064f8:	e000ed00 	.word	0xe000ed00

080064fc <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80064fc:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006500:	f7fd baa8 	b.w	8003a54 <USBD_LL_Resume>

08006504 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006504:	2308      	movs	r3, #8
{
 8006506:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006508:	4a1d      	ldr	r2, [pc, #116]	; (8006580 <USBD_LL_Init+0x7c>)
{
 800650a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800650c:	481d      	ldr	r0, [pc, #116]	; (8006584 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800650e:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006512:	2302      	movs	r3, #2
 8006514:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006516:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8006518:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.pData = pdev;
 800651c:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006520:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006524:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006526:	f7fa feec 	bl	8001302 <HAL_PCD_Init>
 800652a:	b108      	cbz	r0, 8006530 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 800652c:	f7fe fc34 	bl	8004d98 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006530:	2200      	movs	r2, #0
 8006532:	2318      	movs	r3, #24
 8006534:	4611      	mov	r1, r2
 8006536:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800653a:	f7fb fa90 	bl	8001a5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800653e:	2358      	movs	r3, #88	; 0x58
 8006540:	2200      	movs	r2, #0
 8006542:	2180      	movs	r1, #128	; 0x80
 8006544:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006548:	f7fb fa89 	bl	8001a5e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800654c:	23c0      	movs	r3, #192	; 0xc0
 800654e:	2200      	movs	r2, #0
 8006550:	2181      	movs	r1, #129	; 0x81
 8006552:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006556:	f7fb fa82 	bl	8001a5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800655a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800655e:	2200      	movs	r2, #0
 8006560:	2101      	movs	r1, #1
 8006562:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006566:	f7fb fa7a 	bl	8001a5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800656a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800656e:	2200      	movs	r2, #0
 8006570:	2182      	movs	r1, #130	; 0x82
 8006572:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006576:	f7fb fa72 	bl	8001a5e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800657a:	2000      	movs	r0, #0
 800657c:	bd10      	pop	{r4, pc}
 800657e:	bf00      	nop
 8006580:	40005c00 	.word	0x40005c00
 8006584:	200014bc 	.word	0x200014bc

08006588 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006588:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800658a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800658e:	f7fa ff2d 	bl	80013ec <HAL_PCD_Start>
 8006592:	2803      	cmp	r0, #3
 8006594:	bf96      	itet	ls
 8006596:	4b02      	ldrls	r3, [pc, #8]	; (80065a0 <USBD_LL_Start+0x18>)
 8006598:	2002      	movhi	r0, #2
 800659a:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800659c:	bd08      	pop	{r3, pc}
 800659e:	bf00      	nop
 80065a0:	08008659 	.word	0x08008659

080065a4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80065a4:	b510      	push	{r4, lr}
 80065a6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80065a8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80065ac:	4613      	mov	r3, r2
 80065ae:	4622      	mov	r2, r4
 80065b0:	f7fa ff47 	bl	8001442 <HAL_PCD_EP_Open>
 80065b4:	2803      	cmp	r0, #3
 80065b6:	bf96      	itet	ls
 80065b8:	4b01      	ldrls	r3, [pc, #4]	; (80065c0 <USBD_LL_OpenEP+0x1c>)
 80065ba:	2002      	movhi	r0, #2
 80065bc:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 80065be:	bd10      	pop	{r4, pc}
 80065c0:	08008659 	.word	0x08008659

080065c4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065c4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80065c6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80065ca:	f7fa ff6d 	bl	80014a8 <HAL_PCD_EP_Close>
 80065ce:	2803      	cmp	r0, #3
 80065d0:	bf96      	itet	ls
 80065d2:	4b02      	ldrls	r3, [pc, #8]	; (80065dc <USBD_LL_CloseEP+0x18>)
 80065d4:	2002      	movhi	r0, #2
 80065d6:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 80065d8:	bd08      	pop	{r3, pc}
 80065da:	bf00      	nop
 80065dc:	08008659 	.word	0x08008659

080065e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065e0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80065e2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80065e6:	f7fb f9d3 	bl	8001990 <HAL_PCD_EP_SetStall>
 80065ea:	2803      	cmp	r0, #3
 80065ec:	bf96      	itet	ls
 80065ee:	4b02      	ldrls	r3, [pc, #8]	; (80065f8 <USBD_LL_StallEP+0x18>)
 80065f0:	2002      	movhi	r0, #2
 80065f2:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 80065f4:	bd08      	pop	{r3, pc}
 80065f6:	bf00      	nop
 80065f8:	08008659 	.word	0x08008659

080065fc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065fc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80065fe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006602:	f7fb f9f9 	bl	80019f8 <HAL_PCD_EP_ClrStall>
 8006606:	2803      	cmp	r0, #3
 8006608:	bf96      	itet	ls
 800660a:	4b02      	ldrls	r3, [pc, #8]	; (8006614 <USBD_LL_ClearStallEP+0x18>)
 800660c:	2002      	movhi	r0, #2
 800660e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8006610:	bd08      	pop	{r3, pc}
 8006612:	bf00      	nop
 8006614:	08008659 	.word	0x08008659

08006618 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8006618:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800661a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800661e:	bf45      	ittet	mi
 8006620:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8006624:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006628:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800662c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006630:	bf58      	it	pl
 8006632:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 8006636:	4770      	bx	lr

08006638 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006638:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800663a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800663e:	f7fa feec 	bl	800141a <HAL_PCD_SetAddress>
 8006642:	2803      	cmp	r0, #3
 8006644:	bf96      	itet	ls
 8006646:	4b02      	ldrls	r3, [pc, #8]	; (8006650 <USBD_LL_SetUSBAddress+0x18>)
 8006648:	2002      	movhi	r0, #2
 800664a:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 800664c:	bd08      	pop	{r3, pc}
 800664e:	bf00      	nop
 8006650:	08008659 	.word	0x08008659

08006654 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006654:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006656:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800665a:	f7fa ff6d 	bl	8001538 <HAL_PCD_EP_Transmit>
 800665e:	2803      	cmp	r0, #3
 8006660:	bf96      	itet	ls
 8006662:	4b02      	ldrls	r3, [pc, #8]	; (800666c <USBD_LL_Transmit+0x18>)
 8006664:	2002      	movhi	r0, #2
 8006666:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8006668:	bd08      	pop	{r3, pc}
 800666a:	bf00      	nop
 800666c:	08008659 	.word	0x08008659

08006670 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006670:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006672:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006676:	f7fa ff40 	bl	80014fa <HAL_PCD_EP_Receive>
 800667a:	2803      	cmp	r0, #3
 800667c:	bf96      	itet	ls
 800667e:	4b02      	ldrls	r3, [pc, #8]	; (8006688 <USBD_LL_PrepareReceive+0x18>)
 8006680:	2002      	movhi	r0, #2
 8006682:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8006684:	bd08      	pop	{r3, pc}
 8006686:	bf00      	nop
 8006688:	08008659 	.word	0x08008659

0800668c <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800668c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006690:	f7fa bf4b 	b.w	800152a <HAL_PCD_EP_GetRxCount>

08006694 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8006694:	4800      	ldr	r0, [pc, #0]	; (8006698 <USBD_static_malloc+0x4>)
 8006696:	4770      	bx	lr
 8006698:	20000700 	.word	0x20000700

0800669c <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 800669c:	4770      	bx	lr

0800669e <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800669e:	4770      	bx	lr

080066a0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80066a0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80066a2:	4801      	ldr	r0, [pc, #4]	; (80066a8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80066a4:	800b      	strh	r3, [r1, #0]
}
 80066a6:	4770      	bx	lr
 80066a8:	200001d0 	.word	0x200001d0

080066ac <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80066ac:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80066ae:	4801      	ldr	r0, [pc, #4]	; (80066b4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80066b0:	800b      	strh	r3, [r1, #0]
}
 80066b2:	4770      	bx	lr
 80066b4:	200001e4 	.word	0x200001e4

080066b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80066b8:	2300      	movs	r3, #0
 80066ba:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80066bc:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 80066be:	0f05      	lsrs	r5, r0, #28
 80066c0:	b2ec      	uxtb	r4, r5
 80066c2:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80066c4:	bf94      	ite	ls
 80066c6:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80066c8:	3437      	addhi	r4, #55	; 0x37
 80066ca:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80066ce:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80066d2:	3301      	adds	r3, #1
 80066d4:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 80066d6:	b2dc      	uxtb	r4, r3
 80066d8:	42a2      	cmp	r2, r4
    value = value << 4;
 80066da:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80066de:	d8ee      	bhi.n	80066be <IntToUnicode+0x6>
  }
}
 80066e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080066e4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80066e4:	231a      	movs	r3, #26
{
 80066e6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80066e8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80066ea:	4b09      	ldr	r3, [pc, #36]	; (8006710 <USBD_FS_SerialStrDescriptor+0x2c>)
 80066ec:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80066ee:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80066f0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80066f2:	18c0      	adds	r0, r0, r3
 80066f4:	d00a      	beq.n	800670c <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80066f6:	4b07      	ldr	r3, [pc, #28]	; (8006714 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80066f8:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80066fa:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80066fc:	4906      	ldr	r1, [pc, #24]	; (8006718 <USBD_FS_SerialStrDescriptor+0x34>)
 80066fe:	f7ff ffdb 	bl	80066b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006702:	2204      	movs	r2, #4
 8006704:	4905      	ldr	r1, [pc, #20]	; (800671c <USBD_FS_SerialStrDescriptor+0x38>)
 8006706:	4620      	mov	r0, r4
 8006708:	f7ff ffd6 	bl	80066b8 <IntToUnicode>
}
 800670c:	4804      	ldr	r0, [pc, #16]	; (8006720 <USBD_FS_SerialStrDescriptor+0x3c>)
 800670e:	bd10      	pop	{r4, pc}
 8006710:	1ffff7e8 	.word	0x1ffff7e8
 8006714:	1ffff7ec 	.word	0x1ffff7ec
 8006718:	200001ea 	.word	0x200001ea
 800671c:	200001fa 	.word	0x200001fa
 8006720:	200001e8 	.word	0x200001e8

08006724 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006724:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006726:	4c04      	ldr	r4, [pc, #16]	; (8006738 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006728:	460a      	mov	r2, r1
 800672a:	4804      	ldr	r0, [pc, #16]	; (800673c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800672c:	4621      	mov	r1, r4
 800672e:	f7fd fba4 	bl	8003e7a <USBD_GetString>
}
 8006732:	4620      	mov	r0, r4
 8006734:	bd10      	pop	{r4, pc}
 8006736:	bf00      	nop
 8006738:	20001728 	.word	0x20001728
 800673c:	08008676 	.word	0x08008676

08006740 <USBD_FS_ProductStrDescriptor>:
{
 8006740:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006742:	4c04      	ldr	r4, [pc, #16]	; (8006754 <USBD_FS_ProductStrDescriptor+0x14>)
 8006744:	460a      	mov	r2, r1
 8006746:	4804      	ldr	r0, [pc, #16]	; (8006758 <USBD_FS_ProductStrDescriptor+0x18>)
 8006748:	4621      	mov	r1, r4
 800674a:	f7fd fb96 	bl	8003e7a <USBD_GetString>
}
 800674e:	4620      	mov	r0, r4
 8006750:	bd10      	pop	{r4, pc}
 8006752:	bf00      	nop
 8006754:	20001728 	.word	0x20001728
 8006758:	08008689 	.word	0x08008689

0800675c <USBD_FS_ConfigStrDescriptor>:
{
 800675c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800675e:	4c04      	ldr	r4, [pc, #16]	; (8006770 <USBD_FS_ConfigStrDescriptor+0x14>)
 8006760:	460a      	mov	r2, r1
 8006762:	4804      	ldr	r0, [pc, #16]	; (8006774 <USBD_FS_ConfigStrDescriptor+0x18>)
 8006764:	4621      	mov	r1, r4
 8006766:	f7fd fb88 	bl	8003e7a <USBD_GetString>
}
 800676a:	4620      	mov	r0, r4
 800676c:	bd10      	pop	{r4, pc}
 800676e:	bf00      	nop
 8006770:	20001728 	.word	0x20001728
 8006774:	0800865d 	.word	0x0800865d

08006778 <USBD_FS_InterfaceStrDescriptor>:
{
 8006778:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800677a:	4c04      	ldr	r4, [pc, #16]	; (800678c <USBD_FS_InterfaceStrDescriptor+0x14>)
 800677c:	460a      	mov	r2, r1
 800677e:	4804      	ldr	r0, [pc, #16]	; (8006790 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8006780:	4621      	mov	r1, r4
 8006782:	f7fd fb7a 	bl	8003e7a <USBD_GetString>
}
 8006786:	4620      	mov	r0, r4
 8006788:	bd10      	pop	{r4, pc}
 800678a:	bf00      	nop
 800678c:	20001728 	.word	0x20001728
 8006790:	08008668 	.word	0x08008668

08006794 <vt100_process_byte>:
    
    return VT100_KEY_INVALID;
}

vt100_key_t vt100_process_byte(uint8_t byte)
{
 8006794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    static uint8_t cbuf[8] = {0};
    static uint8_t cbuf_idx = 0;
    
    if (0 == cbuf_idx && true == is_printable(byte))
 8006798:	4d1c      	ldr	r5, [pc, #112]	; (800680c <vt100_process_byte+0x78>)
 800679a:	782b      	ldrb	r3, [r5, #0]
 800679c:	b91b      	cbnz	r3, 80067a6 <vt100_process_byte+0x12>
 800679e:	f1a0 0220 	sub.w	r2, r0, #32
 80067a2:	2a5e      	cmp	r2, #94	; 0x5e
 80067a4:	d92e      	bls.n	8006804 <vt100_process_byte+0x70>
    {
        return VT100_KEY_PRINTABLE;
    }
    else if (0x0D == byte) /* Enter */
 80067a6:	280d      	cmp	r0, #13
 80067a8:	d02e      	beq.n	8006808 <vt100_process_byte+0x74>
        return VT100_KEY_ENTER;
    }
    else
    {
        vt100_key_t key = VT100_KEY_INVALID;
        cbuf[cbuf_idx++] = byte;
 80067aa:	4c19      	ldr	r4, [pc, #100]	; (8006810 <vt100_process_byte+0x7c>)
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 80067ac:	2700      	movs	r7, #0
 80067ae:	f04f 0a0c 	mov.w	sl, #12
            (0 == strncmp((const char*)vt100_keycodes[ii].code, (const char*)buf, len)))
 80067b2:	46a3      	mov	fp, r4
        cbuf[cbuf_idx++] = byte;
 80067b4:	1c5e      	adds	r6, r3, #1
 80067b6:	b2f6      	uxtb	r6, r6
 80067b8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8006814 <vt100_process_byte+0x80>
 80067bc:	702e      	strb	r6, [r5, #0]
 80067be:	54e0      	strb	r0, [r4, r3]
 80067c0:	fb0a 9807 	mla	r8, sl, r7, r9
        if ((len == vt100_keycodes[ii].code_len) &&
 80067c4:	f898 3008 	ldrb.w	r3, [r8, #8]
 80067c8:	42b3      	cmp	r3, r6
 80067ca:	d112      	bne.n	80067f2 <vt100_process_byte+0x5e>
            (0 == strncmp((const char*)vt100_keycodes[ii].code, (const char*)buf, len)))
 80067cc:	4632      	mov	r2, r6
 80067ce:	4659      	mov	r1, fp
 80067d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80067d4:	f000 fbe3 	bl	8006f9e <strncmp>
        if ((len == vt100_keycodes[ii].code_len) &&
 80067d8:	4603      	mov	r3, r0
 80067da:	b950      	cbnz	r0, 80067f2 <vt100_process_byte+0x5e>
            return vt100_keycodes[ii].key;
 80067dc:	f898 0000 	ldrb.w	r0, [r8]
        key = find_key(cbuf, cbuf_idx);
        if (VT100_KEY_INVALID != key)
 80067e0:	b958      	cbnz	r0, 80067fa <vt100_process_byte+0x66>
            memset(cbuf, 0, sizeof(cbuf));
            return key;
        }
        else
        {
            if (cbuf_idx >= sizeof(cbuf))
 80067e2:	2e07      	cmp	r6, #7
 80067e4:	f04f 0000 	mov.w	r0, #0
 80067e8:	d90a      	bls.n	8006800 <vt100_process_byte+0x6c>
            {
                cbuf_idx = 0;
 80067ea:	7028      	strb	r0, [r5, #0]
                memset(cbuf, 0, sizeof(cbuf));
 80067ec:	6020      	str	r0, [r4, #0]
 80067ee:	6060      	str	r0, [r4, #4]
 80067f0:	e006      	b.n	8006800 <vt100_process_byte+0x6c>
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 80067f2:	3701      	adds	r7, #1
 80067f4:	2f0f      	cmp	r7, #15
 80067f6:	d1e3      	bne.n	80067c0 <vt100_process_byte+0x2c>
 80067f8:	e7f3      	b.n	80067e2 <vt100_process_byte+0x4e>
            cbuf_idx = 0;
 80067fa:	702b      	strb	r3, [r5, #0]
            memset(cbuf, 0, sizeof(cbuf));
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	6063      	str	r3, [r4, #4]
            }
        }
    }

    return VT100_KEY_INVALID;
}
 8006800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return VT100_KEY_PRINTABLE;
 8006804:	2001      	movs	r0, #1
 8006806:	e7fb      	b.n	8006800 <vt100_process_byte+0x6c>
        return VT100_KEY_ENTER;
 8006808:	2008      	movs	r0, #8
 800680a:	e7f9      	b.n	8006800 <vt100_process_byte+0x6c>
 800680c:	20000928 	.word	0x20000928
 8006810:	20000920 	.word	0x20000920
 8006814:	080086b8 	.word	0x080086b8

08006818 <vt100_get_keycode>:

vt100_keycode_t * vt100_get_keycode(vt100_key_t key)
{
    if (key >= VT100_KEY_MAX) return NULL;
 8006818:	280e      	cmp	r0, #14
{
 800681a:	b530      	push	{r4, r5, lr}
    if (key >= VT100_KEY_MAX) return NULL;
 800681c:	d80c      	bhi.n	8006838 <vt100_get_keycode+0x20>
    
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 800681e:	2200      	movs	r2, #0
 8006820:	240c      	movs	r4, #12
    {
        if (vt100_keycodes[ii].key == key)
 8006822:	4b06      	ldr	r3, [pc, #24]	; (800683c <vt100_get_keycode+0x24>)
 8006824:	fb04 f102 	mul.w	r1, r4, r2
 8006828:	5ccd      	ldrb	r5, [r1, r3]
 800682a:	4285      	cmp	r5, r0
 800682c:	d101      	bne.n	8006832 <vt100_get_keycode+0x1a>
        {
            return (vt100_keycode_t*)&vt100_keycodes[ii];
 800682e:	1858      	adds	r0, r3, r1
        }
    }
    
    return NULL;
}
 8006830:	bd30      	pop	{r4, r5, pc}
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8006832:	3201      	adds	r2, #1
 8006834:	2a0f      	cmp	r2, #15
 8006836:	d1f5      	bne.n	8006824 <vt100_get_keycode+0xc>
    if (key >= VT100_KEY_MAX) return NULL;
 8006838:	2000      	movs	r0, #0
 800683a:	e7f9      	b.n	8006830 <vt100_get_keycode+0x18>
 800683c:	080086b8 	.word	0x080086b8

08006840 <fx_pwm_pulsing_light_run>:
t_fx_result fx_pwm_pulsing_light_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
	uint8_t ii = 0;
	int16_t val;

	switch(state)
 8006840:	2801      	cmp	r0, #1
{
 8006842:	b570      	push	{r4, r5, r6, lr}
	switch(state)
 8006844:	d00b      	beq.n	800685e <fx_pwm_pulsing_light_run+0x1e>
 8006846:	d303      	bcc.n	8006850 <fx_pwm_pulsing_light_run+0x10>
 8006848:	2802      	cmp	r0, #2
 800684a:	d029      	beq.n	80068a0 <fx_pwm_pulsing_light_run+0x60>
				set_pwm_light(ii, 0);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 800684c:	2003      	movs	r0, #3
 800684e:	e005      	b.n	800685c <fx_pwm_pulsing_light_run+0x1c>
			data = 0;
 8006850:	2400      	movs	r4, #0
 8006852:	4b18      	ldr	r3, [pc, #96]	; (80068b4 <fx_pwm_pulsing_light_run+0x74>)
 8006854:	701c      	strb	r4, [r3, #0]
			reset_frame_delay();
 8006856:	f000 f941 	bl	8006adc <reset_frame_delay>
			return FX_OK;
 800685a:	4620      	mov	r0, r4
}
 800685c:	bd70      	pop	{r4, r5, r6, pc}
				val = data + get_DMX_variable(DMX_STRIP1_COMPLEXITY);
 800685e:	4c15      	ldr	r4, [pc, #84]	; (80068b4 <fx_pwm_pulsing_light_run+0x74>)
 8006860:	200f      	movs	r0, #15
 8006862:	7825      	ldrb	r5, [r4, #0]
 8006864:	f000 f95c 	bl	8006b20 <get_DMX_variable>
 8006868:	4428      	add	r0, r5
				if (val>255)
 800686a:	b283      	uxth	r3, r0
 800686c:	2bff      	cmp	r3, #255	; 0xff
					data = 255;
 800686e:	bf8c      	ite	hi
 8006870:	23ff      	movhi	r3, #255	; 0xff
					data = val;
 8006872:	7020      	strbls	r0, [r4, #0]
			val = get_DMX_variable(DMX_STRIP1_SIZE);
 8006874:	f04f 000e 	mov.w	r0, #14
					data = 255;
 8006878:	bf88      	it	hi
 800687a:	7023      	strbhi	r3, [r4, #0]
			val = get_DMX_variable(DMX_STRIP1_SIZE);
 800687c:	f000 f950 	bl	8006b20 <get_DMX_variable>
 8006880:	b205      	sxth	r5, r0
 8006882:	2d09      	cmp	r5, #9
 8006884:	bfa8      	it	ge
 8006886:	2509      	movge	r5, #9
 8006888:	2600      	movs	r6, #0
 800688a:	b2f0      	uxtb	r0, r6
			for (ii=0;ii<val+1;ii++)
 800688c:	4285      	cmp	r5, r0
 800688e:	f106 0601 	add.w	r6, r6, #1
 8006892:	da01      	bge.n	8006898 <fx_pwm_pulsing_light_run+0x58>
 8006894:	2002      	movs	r0, #2
 8006896:	e7e1      	b.n	800685c <fx_pwm_pulsing_light_run+0x1c>
				set_pwm_light(ii, data);
 8006898:	7821      	ldrb	r1, [r4, #0]
 800689a:	f000 f93e 	bl	8006b1a <set_pwm_light>
 800689e:	e7f4      	b.n	800688a <fx_pwm_pulsing_light_run+0x4a>
	switch(state)
 80068a0:	2400      	movs	r4, #0
				set_pwm_light(ii, 0);
 80068a2:	b2e0      	uxtb	r0, r4
 80068a4:	2100      	movs	r1, #0
 80068a6:	3401      	adds	r4, #1
 80068a8:	f000 f937 	bl	8006b1a <set_pwm_light>
			for (ii=0;ii<10;ii++)
 80068ac:	2c0a      	cmp	r4, #10
 80068ae:	d1f8      	bne.n	80068a2 <fx_pwm_pulsing_light_run+0x62>
			return FX_COMPLETED;
 80068b0:	2001      	movs	r0, #1
 80068b2:	e7d3      	b.n	800685c <fx_pwm_pulsing_light_run+0x1c>
 80068b4:	20001928 	.word	0x20001928

080068b8 <fx_pwm_pulsing_light>:
	register_fx(&param1,fx_num);
 80068b8:	4601      	mov	r1, r0
 80068ba:	4801      	ldr	r0, [pc, #4]	; (80068c0 <fx_pwm_pulsing_light+0x8>)
 80068bc:	f7fd bcd8 	b.w	8004270 <register_fx>
 80068c0:	0800876c 	.word	0x0800876c

080068c4 <fx_pwm_pulsing_pulse_light>:
	register_fx(&param2,fx_num);
 80068c4:	4601      	mov	r1, r0
 80068c6:	4801      	ldr	r0, [pc, #4]	; (80068cc <fx_pwm_pulsing_pulse_light+0x8>)
 80068c8:	f7fd bcd2 	b.w	8004270 <register_fx>
 80068cc:	08008780 	.word	0x08008780

080068d0 <fx_pwm_running_light_run>:
t_fx_result fx_pwm_running_light_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
	uint8_t ii = 0;
	int16_t val;

	switch(state)
 80068d0:	2801      	cmp	r0, #1
{
 80068d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(state)
 80068d4:	d012      	beq.n	80068fc <fx_pwm_running_light_run+0x2c>
 80068d6:	d303      	bcc.n	80068e0 <fx_pwm_running_light_run+0x10>
 80068d8:	2802      	cmp	r0, #2
 80068da:	d051      	beq.n	8006980 <fx_pwm_running_light_run+0xb0>
			free(data);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 80068dc:	2003      	movs	r0, #3
 80068de:	e00c      	b.n	80068fa <fx_pwm_running_light_run+0x2a>
			data = malloc(11);
 80068e0:	200b      	movs	r0, #11
 80068e2:	f000 fa65 	bl	8006db0 <malloc>
			memset(data, 0, 11);
 80068e6:	2400      	movs	r4, #0
			data = malloc(11);
 80068e8:	4b28      	ldr	r3, [pc, #160]	; (800698c <fx_pwm_running_light_run+0xbc>)
			memset(data, 0, 11);
 80068ea:	e9c0 4400 	strd	r4, r4, [r0]
 80068ee:	f8c0 4007 	str.w	r4, [r0, #7]
			data = malloc(11);
 80068f2:	6018      	str	r0, [r3, #0]
			reset_frame_delay();
 80068f4:	f000 f8f2 	bl	8006adc <reset_frame_delay>
			return FX_OK;
 80068f8:	4620      	mov	r0, r4
}
 80068fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (!check_frame_delay(get_DMX_variable(DMX_STRIP1_SPEED))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 80068fc:	200d      	movs	r0, #13
 80068fe:	f000 f90f 	bl	8006b20 <get_DMX_variable>
 8006902:	f000 f8f1 	bl	8006ae8 <check_frame_delay>
 8006906:	b908      	cbnz	r0, 800690c <fx_pwm_running_light_run+0x3c>
				return FX_RUNNING;
 8006908:	2002      	movs	r0, #2
 800690a:	e7f6      	b.n	80068fa <fx_pwm_running_light_run+0x2a>
				val = data[ii] - (255 - get_DMX_variable(DMX_STRIP1_COMPLEXITY));
 800690c:	4e1f      	ldr	r6, [pc, #124]	; (800698c <fx_pwm_running_light_run+0xbc>)
 800690e:	2700      	movs	r7, #0
 8006910:	4635      	mov	r5, r6
 8006912:	6833      	ldr	r3, [r6, #0]
 8006914:	200f      	movs	r0, #15
 8006916:	5ddc      	ldrb	r4, [r3, r7]
 8006918:	f000 f902 	bl	8006b20 <get_DMX_variable>
 800691c:	38ff      	subs	r0, #255	; 0xff
 800691e:	4404      	add	r4, r0
 8006920:	b224      	sxth	r4, r4
				data[ii] = (uint8_t)val;
 8006922:	6833      	ldr	r3, [r6, #0]
 8006924:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006928:	55dc      	strb	r4, [r3, r7]
 800692a:	3701      	adds	r7, #1
			for (ii=0;ii<10;ii++)
 800692c:	2f0a      	cmp	r7, #10
 800692e:	d1f0      	bne.n	8006912 <fx_pwm_running_light_run+0x42>
			ii = get_DMX_variable(DMX_STRIP1_SIZE);
 8006930:	200e      	movs	r0, #14
 8006932:	f000 f8f5 	bl	8006b20 <get_DMX_variable>
 8006936:	2809      	cmp	r0, #9
 8006938:	bf28      	it	cs
 800693a:	2009      	movcs	r0, #9
 800693c:	b2c4      	uxtb	r4, r0
			if (get_DMX_variable(DMX_STRIP1_PATTERN))	//Reverse
 800693e:	200c      	movs	r0, #12
 8006940:	f000 f8ee 	bl	8006b20 <get_DMX_variable>
				if (data[10] == 0)
 8006944:	6833      	ldr	r3, [r6, #0]
 8006946:	7a9a      	ldrb	r2, [r3, #10]
			if (get_DMX_variable(DMX_STRIP1_PATTERN))	//Reverse
 8006948:	b198      	cbz	r0, 8006972 <fx_pwm_running_light_run+0xa2>
				if (data[10] == 0)
 800694a:	b90a      	cbnz	r2, 8006950 <fx_pwm_running_light_run+0x80>
					data[10] = ii + 1;
 800694c:	3401      	adds	r4, #1
 800694e:	729c      	strb	r4, [r3, #10]
				data[10]--;
 8006950:	7a9a      	ldrb	r2, [r3, #10]
 8006952:	3a01      	subs	r2, #1
			data[data[10]] = 255;
 8006954:	21ff      	movs	r1, #255	; 0xff
 8006956:	2400      	movs	r4, #0
				data[10]++;
 8006958:	729a      	strb	r2, [r3, #10]
			data[data[10]] = 255;
 800695a:	682b      	ldr	r3, [r5, #0]
 800695c:	7a9a      	ldrb	r2, [r3, #10]
 800695e:	5499      	strb	r1, [r3, r2]
				set_pwm_light(ii, data[ii]);
 8006960:	682b      	ldr	r3, [r5, #0]
 8006962:	b2e0      	uxtb	r0, r4
 8006964:	5d19      	ldrb	r1, [r3, r4]
 8006966:	3401      	adds	r4, #1
 8006968:	f000 f8d7 	bl	8006b1a <set_pwm_light>
			for (ii=0;ii<10;ii++)
 800696c:	2c0a      	cmp	r4, #10
 800696e:	d1f7      	bne.n	8006960 <fx_pwm_running_light_run+0x90>
 8006970:	e7ca      	b.n	8006908 <fx_pwm_running_light_run+0x38>
				if (data[10] == ii)
 8006972:	42a2      	cmp	r2, r4
					data[10] = 255;
 8006974:	bf04      	itt	eq
 8006976:	22ff      	moveq	r2, #255	; 0xff
 8006978:	729a      	strbeq	r2, [r3, #10]
				data[10]++;
 800697a:	7a9a      	ldrb	r2, [r3, #10]
 800697c:	3201      	adds	r2, #1
 800697e:	e7e9      	b.n	8006954 <fx_pwm_running_light_run+0x84>
			free(data);
 8006980:	4b02      	ldr	r3, [pc, #8]	; (800698c <fx_pwm_running_light_run+0xbc>)
 8006982:	6818      	ldr	r0, [r3, #0]
 8006984:	f000 fa1c 	bl	8006dc0 <free>
			return FX_COMPLETED;
 8006988:	2001      	movs	r0, #1
 800698a:	e7b6      	b.n	80068fa <fx_pwm_running_light_run+0x2a>
 800698c:	20001928 	.word	0x20001928

08006990 <fx_pwm_running_light>:
	register_fx(&param1, fx_num);
 8006990:	4601      	mov	r1, r0
 8006992:	4801      	ldr	r0, [pc, #4]	; (8006998 <fx_pwm_running_light+0x8>)
 8006994:	f7fd bc6c 	b.w	8004270 <register_fx>
 8006998:	08008794 	.word	0x08008794

0800699c <fx_pwm_running_pulse_light>:
	register_fx(&param2, fx_num);
 800699c:	4601      	mov	r1, r0
 800699e:	4801      	ldr	r0, [pc, #4]	; (80069a4 <fx_pwm_running_pulse_light+0x8>)
 80069a0:	f7fd bc66 	b.w	8004270 <register_fx>
 80069a4:	080087a8 	.word	0x080087a8

080069a8 <fx_strip_running_light_run>:
	register_fx(&param,fx_num);
}


t_fx_result fx_strip_running_light_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 80069a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static int16_t pos[CH_MAX] = {0,0};
	static int16_t step[CH_MAX] = {0,0};
	static uint32_t delay[CH_MAX] = {0,0};

	switch(state)
 80069ac:	2801      	cmp	r0, #1
{
 80069ae:	b085      	sub	sp, #20
	switch(state)
 80069b0:	d004      	beq.n	80069bc <fx_strip_running_light_run+0x14>
 80069b2:	d35a      	bcc.n	8006a6a <fx_strip_running_light_run+0xc2>
 80069b4:	2802      	cmp	r0, #2
 80069b6:	d07a      	beq.n	8006aae <fx_strip_running_light_run+0x106>
			WS2812B_clear(CH2);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 80069b8:	2003      	movs	r0, #3
 80069ba:	e044      	b.n	8006a46 <fx_strip_running_light_run+0x9e>
	switch(state)
 80069bc:	2400      	movs	r4, #0
 80069be:	4e40      	ldr	r6, [pc, #256]	; (8006ac0 <fx_strip_running_light_run+0x118>)
				if (check_custom_frame_delay(&delay[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SPEED]))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 80069c0:	f8df b108 	ldr.w	fp, [pc, #264]	; 8006acc <fx_strip_running_light_run+0x124>
					WS2812B_setPixelColor((t_stripchannel)ii,pos[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V1]), get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V2]), get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V3]));
 80069c4:	4d3f      	ldr	r5, [pc, #252]	; (8006ac4 <fx_strip_running_light_run+0x11c>)
					pos[ii] = pos[ii] + step[ii];
 80069c6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8006ac8 <fx_strip_running_light_run+0x120>
				if (check_custom_frame_delay(&delay[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SPEED]))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 80069ca:	7870      	ldrb	r0, [r6, #1]
 80069cc:	f000 f8a8 	bl	8006b20 <get_DMX_variable>
 80069d0:	4601      	mov	r1, r0
 80069d2:	eb0b 0084 	add.w	r0, fp, r4, lsl #2
 80069d6:	fa5f fa84 	uxtb.w	sl, r4
 80069da:	f000 f893 	bl	8006b04 <check_custom_frame_delay>
 80069de:	b378      	cbz	r0, 8006a40 <fx_strip_running_light_run+0x98>
					WS2812B_clear((t_stripchannel)ii);
 80069e0:	4650      	mov	r0, sl
 80069e2:	f000 f8ff 	bl	8006be4 <WS2812B_clear>
					WS2812B_setPixelColor((t_stripchannel)ii,pos[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V1]), get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V2]), get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V3]));
 80069e6:	7930      	ldrb	r0, [r6, #4]
 80069e8:	f835 7014 	ldrh.w	r7, [r5, r4, lsl #1]
 80069ec:	f000 f898 	bl	8006b20 <get_DMX_variable>
 80069f0:	9003      	str	r0, [sp, #12]
 80069f2:	7970      	ldrb	r0, [r6, #5]
 80069f4:	f000 f894 	bl	8006b20 <get_DMX_variable>
 80069f8:	9002      	str	r0, [sp, #8]
 80069fa:	79b0      	ldrb	r0, [r6, #6]
 80069fc:	f000 f890 	bl	8006b20 <get_DMX_variable>
 8006a00:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006a04:	4639      	mov	r1, r7
 8006a06:	9000      	str	r0, [sp, #0]
 8006a08:	4650      	mov	r0, sl
 8006a0a:	f000 f8b5 	bl	8006b78 <WS2812B_setPixelColor>
					pos[ii] = pos[ii] + step[ii];
 8006a0e:	f835 7014 	ldrh.w	r7, [r5, r4, lsl #1]
 8006a12:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
					if (pos[ii] > WS2812B_numPixels((t_stripchannel)ii))
 8006a16:	4650      	mov	r0, sl
					pos[ii] = pos[ii] + step[ii];
 8006a18:	441f      	add	r7, r3
 8006a1a:	b23f      	sxth	r7, r7
 8006a1c:	f825 7014 	strh.w	r7, [r5, r4, lsl #1]
					if (pos[ii] > WS2812B_numPixels((t_stripchannel)ii))
 8006a20:	f000 f8d8 	bl	8006bd4 <WS2812B_numPixels>
 8006a24:	4287      	cmp	r7, r0
 8006a26:	ea4f 0944 	mov.w	r9, r4, lsl #1
 8006a2a:	dd11      	ble.n	8006a50 <fx_strip_running_light_run+0xa8>
						step[ii] = -step[ii];
 8006a2c:	f838 2014 	ldrh.w	r2, [r8, r4, lsl #1]
 8006a30:	4253      	negs	r3, r2
 8006a32:	f828 3014 	strh.w	r3, [r8, r4, lsl #1]
						pos[ii] = pos[ii] + step[ii];
 8006a36:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
 8006a40:	3607      	adds	r6, #7
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 8006a42:	b11c      	cbz	r4, 8006a4c <fx_strip_running_light_run+0xa4>
 8006a44:	2002      	movs	r0, #2
}
 8006a46:	b005      	add	sp, #20
 8006a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 8006a4c:	2401      	movs	r4, #1
 8006a4e:	e7bc      	b.n	80069ca <fx_strip_running_light_run+0x22>
					else if (pos[ii] < 0)
 8006a50:	f935 3014 	ldrsh.w	r3, [r5, r4, lsl #1]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	daf3      	bge.n	8006a40 <fx_strip_running_light_run+0x98>
						step[ii] = -step[ii];
 8006a58:	f839 2008 	ldrh.w	r2, [r9, r8]
 8006a5c:	4251      	negs	r1, r2
						pos[ii] = pos[ii] + step[ii];
 8006a5e:	1a9b      	subs	r3, r3, r2
						step[ii] = -step[ii];
 8006a60:	f829 1008 	strh.w	r1, [r9, r8]
						pos[ii] = pos[ii] + step[ii];
 8006a64:	f829 3005 	strh.w	r3, [r9, r5]
 8006a68:	e7ea      	b.n	8006a40 <fx_strip_running_light_run+0x98>
	switch(state)
 8006a6a:	2400      	movs	r4, #0
				step[ii] = get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SIZE]);
 8006a6c:	4f14      	ldr	r7, [pc, #80]	; (8006ac0 <fx_strip_running_light_run+0x118>)
 8006a6e:	4e16      	ldr	r6, [pc, #88]	; (8006ac8 <fx_strip_running_light_run+0x120>)
				  pos[ii] = WS2812B_numPixels((t_stripchannel)ii);
 8006a70:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8006ac4 <fx_strip_running_light_run+0x11c>
 8006a74:	00e5      	lsls	r5, r4, #3
 8006a76:	1b2d      	subs	r5, r5, r4
				step[ii] = get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SIZE]);
 8006a78:	19eb      	adds	r3, r5, r7
 8006a7a:	7898      	ldrb	r0, [r3, #2]
 8006a7c:	f000 f850 	bl	8006b20 <get_DMX_variable>
 8006a80:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
				if (0 != get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_PATTERN]))
 8006a84:	5d78      	ldrb	r0, [r7, r5]
 8006a86:	fa5f f984 	uxtb.w	r9, r4
 8006a8a:	f000 f849 	bl	8006b20 <get_DMX_variable>
 8006a8e:	b148      	cbz	r0, 8006aa4 <fx_strip_running_light_run+0xfc>
				  pos[ii] = WS2812B_numPixels((t_stripchannel)ii);
 8006a90:	4648      	mov	r0, r9
 8006a92:	f000 f89f 	bl	8006bd4 <WS2812B_numPixels>
				  step[ii] = -step[ii];
 8006a96:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
				  pos[ii] = WS2812B_numPixels((t_stripchannel)ii);
 8006a9a:	f828 0014 	strh.w	r0, [r8, r4, lsl #1]
				  step[ii] = -step[ii];
 8006a9e:	425b      	negs	r3, r3
 8006aa0:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 8006aa4:	b10c      	cbz	r4, 8006aaa <fx_strip_running_light_run+0x102>
			return FX_OK;
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	e7cd      	b.n	8006a46 <fx_strip_running_light_run+0x9e>
 8006aaa:	2401      	movs	r4, #1
 8006aac:	e7e2      	b.n	8006a74 <fx_strip_running_light_run+0xcc>
			WS2812B_clear(CH1);
 8006aae:	2000      	movs	r0, #0
 8006ab0:	f000 f898 	bl	8006be4 <WS2812B_clear>
			WS2812B_clear(CH2);
 8006ab4:	2001      	movs	r0, #1
 8006ab6:	f000 f895 	bl	8006be4 <WS2812B_clear>
			return FX_COMPLETED;
 8006aba:	2001      	movs	r0, #1
 8006abc:	e7c3      	b.n	8006a46 <fx_strip_running_light_run+0x9e>
 8006abe:	bf00      	nop
 8006ac0:	080087d0 	.word	0x080087d0
 8006ac4:	20000934 	.word	0x20000934
 8006ac8:	20000938 	.word	0x20000938
 8006acc:	2000092c 	.word	0x2000092c

08006ad0 <fx_strip_running_light>:
	register_fx(&param,fx_num);
 8006ad0:	4601      	mov	r1, r0
 8006ad2:	4801      	ldr	r0, [pc, #4]	; (8006ad8 <fx_strip_running_light+0x8>)
 8006ad4:	f7fd bbcc 	b.w	8004270 <register_fx>
 8006ad8:	080087bc 	.word	0x080087bc

08006adc <reset_frame_delay>:


//Reset the Frame Delay Counter
void reset_frame_delay(void)
{
	 delay_count = 0;
 8006adc:	2200      	movs	r2, #0
 8006ade:	4b01      	ldr	r3, [pc, #4]	; (8006ae4 <reset_frame_delay+0x8>)
 8006ae0:	601a      	str	r2, [r3, #0]
}
 8006ae2:	4770      	bx	lr
 8006ae4:	2000093c 	.word	0x2000093c

08006ae8 <check_frame_delay>:

//Returns true if "delay" frames have passed, else false
uint8_t check_frame_delay(uint32_t delay)
{
	if (delay == delay_count)
 8006ae8:	4a05      	ldr	r2, [pc, #20]	; (8006b00 <check_frame_delay+0x18>)
 8006aea:	6813      	ldr	r3, [r2, #0]
 8006aec:	4283      	cmp	r3, r0
 8006aee:	f04f 0000 	mov.w	r0, #0
	{
		delay_count = 0;
		return 1;
	}
	delay_count++;
 8006af2:	bf15      	itete	ne
 8006af4:	3301      	addne	r3, #1
		delay_count = 0;
 8006af6:	6010      	streq	r0, [r2, #0]
	delay_count++;
 8006af8:	6013      	strne	r3, [r2, #0]
		return 1;
 8006afa:	2001      	moveq	r0, #1
	return 0;
}
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	2000093c 	.word	0x2000093c

08006b04 <check_custom_frame_delay>:


//Custom Delay with on Variable
uint8_t check_custom_frame_delay(uint32_t* count, uint32_t delay)
{
 8006b04:	2300      	movs	r3, #0
	if (delay == *count)
 8006b06:	6802      	ldr	r2, [r0, #0]
 8006b08:	428a      	cmp	r2, r1
	{
		*count = 0;
		return 1;
	}
	*count = *count + 1;
 8006b0a:	bf15      	itete	ne
 8006b0c:	3201      	addne	r2, #1
		*count = 0;
 8006b0e:	6003      	streq	r3, [r0, #0]
	*count = *count + 1;
 8006b10:	6002      	strne	r2, [r0, #0]
		return 1;
 8006b12:	2001      	moveq	r0, #1
	return 0;
 8006b14:	bf18      	it	ne
 8006b16:	4618      	movne	r0, r3
}
 8006b18:	4770      	bx	lr

08006b1a <set_pwm_light>:


//Set Light by index (0..9)
void set_pwm_light(uint8_t index, uint8_t val)
{
	set_reg(index+1, val);
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	f7fd ba44 	b.w	8003fa8 <set_reg>

08006b20 <get_DMX_variable>:
}

//Get a DMX Variable
uint8_t get_DMX_variable(t_dmx_var var)
{
	return get_reg((uint32_t)var);
 8006b20:	f7fd ba50 	b.w	8003fc4 <get_reg>

08006b24 <WS2812B_show>:
  uint32_t loopcnt = 0;

  //SPI.dmaSendAsync(pixels,numBytes);// Start the DMA transfer of the current pixel buffer to the LEDs and return immediately.

  //Wait for last transfer to finish
  while(__HAL_SPI_GET_FLAG(stripchannel[ch].phspi, SPI_FLAG_BSY ))
 8006b24:	231c      	movs	r3, #28
{
 8006b26:	b510      	push	{r4, lr}
  while(__HAL_SPI_GET_FLAG(stripchannel[ch].phspi, SPI_FLAG_BSY ))
 8006b28:	4c12      	ldr	r4, [pc, #72]	; (8006b74 <WS2812B_show+0x50>)
 8006b2a:	fb03 4300 	mla	r3, r3, r0, r4
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	6893      	ldr	r3, [r2, #8]
 8006b34:	061b      	lsls	r3, r3, #24
 8006b36:	d4fc      	bmi.n	8006b32 <WS2812B_show+0xe>
  {
	  loopcnt++;
  }

  while (HAL_GetTick()<stripchannel[ch].time)
 8006b38:	231c      	movs	r3, #28
 8006b3a:	fb03 4400 	mla	r4, r3, r0, r4
 8006b3e:	f7f9 fdd3 	bl	80006e8 <HAL_GetTick>
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	4298      	cmp	r0, r3
 8006b46:	d3fa      	bcc.n	8006b3e <WS2812B_show+0x1a>

  //we know how long the transfer takes..
  //(440ns per bit) * 8 bits * 3 colors * number of pixels...

  //Send Data via DMA
  HAL_SPI_Transmit_DMA(stripchannel[ch].phspi, stripchannel[ch].pixels, stripchannel[ch].numBytes );
 8006b48:	88e2      	ldrh	r2, [r4, #6]
 8006b4a:	68e1      	ldr	r1, [r4, #12]
 8006b4c:	6960      	ldr	r0, [r4, #20]
 8006b4e:	f7fb fbd9 	bl	8002304 <HAL_SPI_Transmit_DMA>
  stripchannel[ch].time = HAL_GetTick() + 6;  //we need to wait at least XXX systicks for the colors to latch in after the last transfer.
 8006b52:	f7f9 fdc9 	bl	80006e8 <HAL_GetTick>
 8006b56:	88e2      	ldrh	r2, [r4, #6]
 8006b58:	3006      	adds	r0, #6
 8006b5a:	6020      	str	r0, [r4, #0]
  	  	  	  	  	  	  	 //The added 6 ms here are purely experimental...

  // Need to copy the last / current buffer to the other half of the double buffer as most API code does not rebuild the entire contents
  // from scratch. Often just a few pixels are changed e.g in a chaser effect

  if (stripchannel[ch].pixels==stripchannel[ch].doubleBuffer)
 8006b5c:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8006b60:	4281      	cmp	r1, r0
  {
	// pixels was using the first buffer
	  stripchannel[ch].pixels = stripchannel[ch].doubleBuffer+stripchannel[ch].numBytes;  // set pixels to second buffer
 8006b62:	bf07      	ittee	eq
 8006b64:	1888      	addeq	r0, r1, r2
 8006b66:	60e0      	streq	r0, [r4, #12]
	memcpy(stripchannel[ch].pixels,stripchannel[ch].doubleBuffer,stripchannel[ch].numBytes);// copy first buffer to second buffer
  }
  else
  {
	// pixels was using the second buffer
	  stripchannel[ch].pixels	= stripchannel[ch].doubleBuffer;  // set pixels to first buffer
 8006b68:	60e0      	strne	r0, [r4, #12]
	memcpy(stripchannel[ch].pixels,stripchannel[ch].doubleBuffer+stripchannel[ch].numBytes,stripchannel[ch].numBytes);	 // copy second buffer to first buffer
 8006b6a:	1881      	addne	r1, r0, r2
  }
}
 8006b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memcpy(stripchannel[ch].pixels,stripchannel[ch].doubleBuffer+stripchannel[ch].numBytes,stripchannel[ch].numBytes);	 // copy second buffer to first buffer
 8006b70:	f000 b92e 	b.w	8006dd0 <memcpy>
 8006b74:	20000ba8 	.word	0x20000ba8

08006b78 <WS2812B_setPixelColor>:

//Sets a specific pixel to a specific r,g,b colour
//Because the pixels buffer contains the encoded bitstream, which is in triplets
//the lookup table need to be used to find the correct pattern for each byte in the 3 byte sequence.
void WS2812B_setPixelColor(t_stripchannel ch,uint16_t n, uint8_t r, uint8_t g, uint8_t b)
 {
 8006b78:	b5f0      	push	{r4, r5, r6, r7, lr}
   uint8_t *bptr = stripchannel[ch].pixels + (n<<3) + n +1;
 8006b7a:	241c      	movs	r4, #28
 8006b7c:	4e13      	ldr	r6, [pc, #76]	; (8006bcc <WS2812B_setPixelColor+0x54>)
   uint8_t *tPtr = (uint8_t *)encoderLookup + g*2 + g;// need to index 3 x g into the lookup
 8006b7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   uint8_t *bptr = stripchannel[ch].pixels + (n<<3) + n +1;
 8006b82:	fb04 6000 	mla	r0, r4, r0, r6
   uint8_t *tPtr = (uint8_t *)encoderLookup + g*2 + g;// need to index 3 x g into the lookup
 8006b86:	4c12      	ldr	r4, [pc, #72]	; (8006bd0 <WS2812B_setPixelColor+0x58>)
   uint8_t *bptr = stripchannel[ch].pixels + (n<<3) + n +1;
 8006b88:	68c7      	ldr	r7, [r0, #12]
   uint8_t *tPtr = (uint8_t *)encoderLookup + g*2 + g;// need to index 3 x g into the lookup
 8006b8a:	18e6      	adds	r6, r4, r3
   uint8_t *bptr = stripchannel[ch].pixels + (n<<3) + n +1;
 8006b8c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3

   *bptr++ = *tPtr++;
 8006b90:	5ce3      	ldrb	r3, [r4, r3]
   uint8_t *bptr = stripchannel[ch].pixels + (n<<3) + n +1;
 8006b92:	3101      	adds	r1, #1
   *bptr++ = *tPtr++;
 8006b94:	547b      	strb	r3, [r7, r1]
   *bptr++ = *tPtr++;
 8006b96:	7873      	ldrb	r3, [r6, #1]
   uint8_t *bptr = stripchannel[ch].pixels + (n<<3) + n +1;
 8006b98:	1878      	adds	r0, r7, r1
   *bptr++ = *tPtr++;
 8006b9a:	7043      	strb	r3, [r0, #1]
   *bptr++ = *tPtr++;
 8006b9c:	78b3      	ldrb	r3, [r6, #2]

   tPtr = (uint8_t *)encoderLookup + r*2 + r;
 8006b9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   *bptr++ = *tPtr++;
 8006ba2:	7083      	strb	r3, [r0, #2]
   tPtr = (uint8_t *)encoderLookup + r*2 + r;
 8006ba4:	18a3      	adds	r3, r4, r2
   *bptr++ = *tPtr++;
 8006ba6:	5ca2      	ldrb	r2, [r4, r2]
 {
 8006ba8:	f89d 5014 	ldrb.w	r5, [sp, #20]
   *bptr++ = *tPtr++;
 8006bac:	70c2      	strb	r2, [r0, #3]
   *bptr++ = *tPtr++;
 8006bae:	785a      	ldrb	r2, [r3, #1]
   *bptr++ = *tPtr++;

   tPtr = (uint8_t *)encoderLookup + b*2 + b;
 8006bb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   *bptr++ = *tPtr++;
 8006bb4:	7102      	strb	r2, [r0, #4]
   *bptr++ = *tPtr++;
 8006bb6:	789b      	ldrb	r3, [r3, #2]
 8006bb8:	7143      	strb	r3, [r0, #5]
   *bptr++ = *tPtr++;
 8006bba:	5d62      	ldrb	r2, [r4, r5]
   tPtr = (uint8_t *)encoderLookup + b*2 + b;
 8006bbc:	1963      	adds	r3, r4, r5
   *bptr++ = *tPtr++;
 8006bbe:	7182      	strb	r2, [r0, #6]
   *bptr++ = *tPtr++;
 8006bc0:	785a      	ldrb	r2, [r3, #1]
 8006bc2:	71c2      	strb	r2, [r0, #7]
   *bptr++ = *tPtr++;
 8006bc4:	789b      	ldrb	r3, [r3, #2]
 8006bc6:	7203      	strb	r3, [r0, #8]
 }
 8006bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20000ba8 	.word	0x20000ba8
 8006bd0:	080087de 	.word	0x080087de

08006bd4 <WS2812B_numPixels>:
}

//Get the number of pixels
uint16_t WS2812B_numPixels(t_stripchannel ch)
{
  return stripchannel[ch].numLEDs;
 8006bd4:	231c      	movs	r3, #28
 8006bd6:	4a02      	ldr	r2, [pc, #8]	; (8006be0 <WS2812B_numPixels+0xc>)
 8006bd8:	fb03 2000 	mla	r0, r3, r0, r2
}
 8006bdc:	8880      	ldrh	r0, [r0, #4]
 8006bde:	4770      	bx	lr
 8006be0:	20000ba8 	.word	0x20000ba8

08006be4 <WS2812B_clear>:
}

//Sets the encoded pixel data to turn all the LEDs off.
void WS2812B_clear(t_stripchannel ch)
{
	uint8_t * bptr= stripchannel[ch].pixels+1;// Note first byte in the buffer is a preable and is always zero. hence the +1
 8006be4:	231c      	movs	r3, #28
{
 8006be6:	b570      	push	{r4, r5, r6, lr}
	uint8_t *tPtr;

	for(int i=0;i< (stripchannel[ch].numLEDs *3);i++)
 8006be8:	2100      	movs	r1, #0
	{
    tPtr = (uint8_t *)encoderLookup;
    *bptr++ = *tPtr++;
 8006bea:	2492      	movs	r4, #146	; 0x92
    *bptr++ = *tPtr++;
 8006bec:	2549      	movs	r5, #73	; 0x49
    *bptr++ = *tPtr++;
 8006bee:	2624      	movs	r6, #36	; 0x24
	uint8_t * bptr= stripchannel[ch].pixels+1;// Note first byte in the buffer is a preable and is always zero. hence the +1
 8006bf0:	4a09      	ldr	r2, [pc, #36]	; (8006c18 <WS2812B_clear+0x34>)
 8006bf2:	fb03 2000 	mla	r0, r3, r0, r2
 8006bf6:	68c3      	ldr	r3, [r0, #12]
 8006bf8:	3301      	adds	r3, #1
	for(int i=0;i< (stripchannel[ch].numLEDs *3);i++)
 8006bfa:	8882      	ldrh	r2, [r0, #4]
 8006bfc:	3303      	adds	r3, #3
 8006bfe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006c02:	428a      	cmp	r2, r1
 8006c04:	dc00      	bgt.n	8006c08 <WS2812B_clear+0x24>
	}
}
 8006c06:	bd70      	pop	{r4, r5, r6, pc}
    *bptr++ = *tPtr++;
 8006c08:	f803 4c03 	strb.w	r4, [r3, #-3]
    *bptr++ = *tPtr++;
 8006c0c:	f803 5c02 	strb.w	r5, [r3, #-2]
    *bptr++ = *tPtr++;
 8006c10:	f803 6c01 	strb.w	r6, [r3, #-1]
	for(int i=0;i< (stripchannel[ch].numLEDs *3);i++)
 8006c14:	3101      	adds	r1, #1
 8006c16:	e7f0      	b.n	8006bfa <WS2812B_clear+0x16>
 8006c18:	20000ba8 	.word	0x20000ba8

08006c1c <WS2812B_init>:
{
 8006c1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	stripchannel[ch].brightness = 0;
 8006c20:	221c      	movs	r2, #28
{
 8006c22:	4688      	mov	r8, r1
	stripchannel[ch].brightness = 0;
 8006c24:	2100      	movs	r1, #0
 8006c26:	4342      	muls	r2, r0
 8006c28:	4d2c      	ldr	r5, [pc, #176]	; (8006cdc <WS2812B_init+0xc0>)
{
 8006c2a:	4604      	mov	r4, r0
	stripchannel[ch].brightness = 0;
 8006c2c:	18ab      	adds	r3, r5, r2
 8006c2e:	7219      	strb	r1, [r3, #8]
	stripchannel[ch].doubleBuffer = NULL;
 8006c30:	e9c3 1103 	strd	r1, r1, [r3, #12]
	stripchannel[ch].time = 0;
 8006c34:	50a9      	str	r1, [r5, r2]
	if (ch == CH1)
 8006c36:	bb20      	cbnz	r0, 8006c82 <WS2812B_init+0x66>
		stripchannel[ch].phspi = &hspi1;
 8006c38:	4b29      	ldr	r3, [pc, #164]	; (8006ce0 <WS2812B_init+0xc4>)
 8006c3a:	616b      	str	r3, [r5, #20]
		stripchannel[ch].phdma_spi_tx = &hdma_spi1_tx;
 8006c3c:	4b29      	ldr	r3, [pc, #164]	; (8006ce4 <WS2812B_init+0xc8>)
 8006c3e:	61ab      	str	r3, [r5, #24]
  stripchannel[ch].numBytes = (number_of_leds<<3) + number_of_leds + 2; // 9 encoded bytes per pixel. 1 byte empty peamble to fix issue with SPI MOSI and on byte at the end to clear down MOSI
 8006c40:	261c      	movs	r6, #28
  uint8_t buffer0[2] = { 0, 0 };
 8006c42:	f04f 0900 	mov.w	r9, #0
  stripchannel[ch].numBytes = (number_of_leds<<3) + number_of_leds + 2; // 9 encoded bytes per pixel. 1 byte empty peamble to fix issue with SPI MOSI and on byte at the end to clear down MOSI
 8006c46:	fb06 5604 	mla	r6, r6, r4, r5
 8006c4a:	f108 0002 	add.w	r0, r8, #2
 8006c4e:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 8006c52:	b287      	uxth	r7, r0
 8006c54:	80f7      	strh	r7, [r6, #6]
  if((stripchannel[ch].doubleBuffer = (uint8_t *)malloc(stripchannel[ch].numBytes*2)))
 8006c56:	0078      	lsls	r0, r7, #1
  uint8_t buffer0[2] = { 0, 0 };
 8006c58:	f8ad 9004 	strh.w	r9, [sp, #4]
  if((stripchannel[ch].doubleBuffer = (uint8_t *)malloc(stripchannel[ch].numBytes*2)))
 8006c5c:	f000 f8a8 	bl	8006db0 <malloc>
 8006c60:	6130      	str	r0, [r6, #16]
 8006c62:	b198      	cbz	r0, 8006c8c <WS2812B_init+0x70>
	stripchannel[ch].pixels = stripchannel[ch].doubleBuffer;
 8006c64:	60f0      	str	r0, [r6, #12]
    *stripchannel[ch].pixels=0;//clear the preamble byte
 8006c66:	f880 9000 	strb.w	r9, [r0]
    *(stripchannel[ch].pixels+stripchannel[ch].numBytes-1)=0;// clear the post send cleardown byte.
 8006c6a:	4438      	add	r0, r7
 8006c6c:	f800 9c01 	strb.w	r9, [r0, #-1]
	stripchannel[ch].numLEDs = number_of_leds;
 8006c70:	f8a6 8004 	strh.w	r8, [r6, #4]
    WS2812B_clear(ch);// Set the encoded data to all encoded zeros
 8006c74:	4620      	mov	r0, r4
 8006c76:	f7ff ffb5 	bl	8006be4 <WS2812B_clear>
  if (ch == CH1)
 8006c7a:	b15c      	cbz	r4, 8006c94 <WS2812B_init+0x78>
	  stripchannel[ch].phdma_spi_tx->Instance = DMA1_Channel4;
 8006c7c:	69b3      	ldr	r3, [r6, #24]
 8006c7e:	4a1a      	ldr	r2, [pc, #104]	; (8006ce8 <WS2812B_init+0xcc>)
 8006c80:	e00a      	b.n	8006c98 <WS2812B_init+0x7c>
		stripchannel[ch].phspi = &hspi2;
 8006c82:	4a1a      	ldr	r2, [pc, #104]	; (8006cec <WS2812B_init+0xd0>)
 8006c84:	615a      	str	r2, [r3, #20]
		stripchannel[ch].phdma_spi_tx = &hdma_spi2_tx;
 8006c86:	4a1a      	ldr	r2, [pc, #104]	; (8006cf0 <WS2812B_init+0xd4>)
 8006c88:	619a      	str	r2, [r3, #24]
 8006c8a:	e7d9      	b.n	8006c40 <WS2812B_init+0x24>
	  stripchannel[ch].numLEDs = stripchannel[ch].numBytes = 0;
 8006c8c:	6070      	str	r0, [r6, #4]
}
 8006c8e:	b003      	add	sp, #12
 8006c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  stripchannel[ch].phdma_spi_tx->Instance = DMA1_Channel3;
 8006c94:	69ab      	ldr	r3, [r5, #24]
 8006c96:	4a17      	ldr	r2, [pc, #92]	; (8006cf4 <WS2812B_init+0xd8>)
	  stripchannel[ch].phdma_spi_tx->Instance = DMA1_Channel4;
 8006c98:	601a      	str	r2, [r3, #0]
  stripchannel[ch].phdma_spi_tx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c9a:	231c      	movs	r3, #28
 8006c9c:	fb03 5504 	mla	r5, r3, r4, r5
  stripchannel[ch].phdma_spi_tx->Init.PeriphInc = DMA_PINC_DISABLE;
 8006ca0:	2400      	movs	r4, #0
 8006ca2:	2310      	movs	r3, #16
  stripchannel[ch].phdma_spi_tx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ca4:	69a8      	ldr	r0, [r5, #24]
  stripchannel[ch].phdma_spi_tx->Init.PeriphInc = DMA_PINC_DISABLE;
 8006ca6:	e9c0 3401 	strd	r3, r4, [r0, #4]
  stripchannel[ch].phdma_spi_tx->Init.MemInc = DMA_MINC_ENABLE;
 8006caa:	2380      	movs	r3, #128	; 0x80
  stripchannel[ch].phdma_spi_tx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006cac:	e9c0 3403 	strd	r3, r4, [r0, #12]
  stripchannel[ch].phdma_spi_tx->Init.Priority = DMA_PRIORITY_MEDIUM;
 8006cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  stripchannel[ch].phdma_spi_tx->Init.Mode = DMA_NORMAL;
 8006cb4:	e9c0 4405 	strd	r4, r4, [r0, #20]
  stripchannel[ch].phdma_spi_tx->Init.Priority = DMA_PRIORITY_MEDIUM;
 8006cb8:	61c3      	str	r3, [r0, #28]
  if (HAL_DMA_Init(stripchannel[ch].phdma_spi_tx) != HAL_OK)
 8006cba:	f7f9 ffbf 	bl	8000c3c <HAL_DMA_Init>
 8006cbe:	b110      	cbz	r0, 8006cc6 <WS2812B_init+0xaa>
	    stripchannel[ch].numLEDs = stripchannel[ch].numBytes = 0;
 8006cc0:	606c      	str	r4, [r5, #4]
	    return 0;
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	e7e3      	b.n	8006c8e <WS2812B_init+0x72>
  __HAL_LINKDMA(stripchannel[ch].phspi,hdmatx,*stripchannel[ch].phdma_spi_tx);
 8006cc6:	e9d5 0305 	ldrd	r0, r3, [r5, #20]
   HAL_SPI_Transmit(stripchannel[ch].phspi, buffer0, 1, 100 );
 8006cca:	2201      	movs	r2, #1
  __HAL_LINKDMA(stripchannel[ch].phspi,hdmatx,*stripchannel[ch].phdma_spi_tx);
 8006ccc:	6483      	str	r3, [r0, #72]	; 0x48
   HAL_SPI_Transmit(stripchannel[ch].phspi, buffer0, 1, 100 );
 8006cce:	a901      	add	r1, sp, #4
  __HAL_LINKDMA(stripchannel[ch].phspi,hdmatx,*stripchannel[ch].phdma_spi_tx);
 8006cd0:	6258      	str	r0, [r3, #36]	; 0x24
   HAL_SPI_Transmit(stripchannel[ch].phspi, buffer0, 1, 100 );
 8006cd2:	2364      	movs	r3, #100	; 0x64
 8006cd4:	f7fb fa6d 	bl	80021b2 <HAL_SPI_Transmit>
   return 1;
 8006cd8:	2001      	movs	r0, #1
 8006cda:	e7d8      	b.n	8006c8e <WS2812B_init+0x72>
 8006cdc:	20000ba8 	.word	0x20000ba8
 8006ce0:	20000c50 	.word	0x20000c50
 8006ce4:	20000cec 	.word	0x20000cec
 8006ce8:	40020044 	.word	0x40020044
 8006cec:	20000abc 	.word	0x20000abc
 8006cf0:	20000ca8 	.word	0x20000ca8
 8006cf4:	40020030 	.word	0x40020030

08006cf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006cf8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006cfa:	e003      	b.n	8006d04 <LoopCopyDataInit>

08006cfc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006cfc:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006cfe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006d00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006d02:	3104      	adds	r1, #4

08006d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006d04:	480a      	ldr	r0, [pc, #40]	; (8006d30 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006d06:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006d08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006d0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006d0c:	d3f6      	bcc.n	8006cfc <CopyDataInit>
  ldr r2, =_sbss
 8006d0e:	4a0a      	ldr	r2, [pc, #40]	; (8006d38 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006d10:	e002      	b.n	8006d18 <LoopFillZerobss>

08006d12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006d12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006d14:	f842 3b04 	str.w	r3, [r2], #4

08006d18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006d18:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006d1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006d1c:	d3f9      	bcc.n	8006d12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006d1e:	f7ff f9a7 	bl	8006070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d22:	f000 f821 	bl	8006d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006d26:	f7fd fdd1 	bl	80048cc <main>
  bx lr
 8006d2a:	4770      	bx	lr
  ldr r3, =_sidata
 8006d2c:	08008c24 	.word	0x08008c24
  ldr r0, =_sdata
 8006d30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006d34:	200003d4 	.word	0x200003d4
  ldr r2, =_sbss
 8006d38:	200003d8 	.word	0x200003d8
  ldr r3, = _ebss
 8006d3c:	20001930 	.word	0x20001930

08006d40 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006d40:	e7fe      	b.n	8006d40 <CAN1_RX1_IRQHandler>

08006d42 <atoi>:
 8006d42:	220a      	movs	r2, #10
 8006d44:	2100      	movs	r1, #0
 8006d46:	f000 ba21 	b.w	800718c <strtol>
	...

08006d4c <calloc>:
 8006d4c:	4b02      	ldr	r3, [pc, #8]	; (8006d58 <calloc+0xc>)
 8006d4e:	460a      	mov	r2, r1
 8006d50:	4601      	mov	r1, r0
 8006d52:	6818      	ldr	r0, [r3, #0]
 8006d54:	f000 b84f 	b.w	8006df6 <_calloc_r>
 8006d58:	20000204 	.word	0x20000204

08006d5c <__errno>:
 8006d5c:	4b01      	ldr	r3, [pc, #4]	; (8006d64 <__errno+0x8>)
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	20000204 	.word	0x20000204

08006d68 <__libc_init_array>:
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	2500      	movs	r5, #0
 8006d6c:	4e0c      	ldr	r6, [pc, #48]	; (8006da0 <__libc_init_array+0x38>)
 8006d6e:	4c0d      	ldr	r4, [pc, #52]	; (8006da4 <__libc_init_array+0x3c>)
 8006d70:	1ba4      	subs	r4, r4, r6
 8006d72:	10a4      	asrs	r4, r4, #2
 8006d74:	42a5      	cmp	r5, r4
 8006d76:	d109      	bne.n	8006d8c <__libc_init_array+0x24>
 8006d78:	f000 fdac 	bl	80078d4 <_init>
 8006d7c:	2500      	movs	r5, #0
 8006d7e:	4e0a      	ldr	r6, [pc, #40]	; (8006da8 <__libc_init_array+0x40>)
 8006d80:	4c0a      	ldr	r4, [pc, #40]	; (8006dac <__libc_init_array+0x44>)
 8006d82:	1ba4      	subs	r4, r4, r6
 8006d84:	10a4      	asrs	r4, r4, #2
 8006d86:	42a5      	cmp	r5, r4
 8006d88:	d105      	bne.n	8006d96 <__libc_init_array+0x2e>
 8006d8a:	bd70      	pop	{r4, r5, r6, pc}
 8006d8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d90:	4798      	blx	r3
 8006d92:	3501      	adds	r5, #1
 8006d94:	e7ee      	b.n	8006d74 <__libc_init_array+0xc>
 8006d96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d9a:	4798      	blx	r3
 8006d9c:	3501      	adds	r5, #1
 8006d9e:	e7f2      	b.n	8006d86 <__libc_init_array+0x1e>
 8006da0:	08008c1c 	.word	0x08008c1c
 8006da4:	08008c1c 	.word	0x08008c1c
 8006da8:	08008c1c 	.word	0x08008c1c
 8006dac:	08008c20 	.word	0x08008c20

08006db0 <malloc>:
 8006db0:	4b02      	ldr	r3, [pc, #8]	; (8006dbc <malloc+0xc>)
 8006db2:	4601      	mov	r1, r0
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	f000 b879 	b.w	8006eac <_malloc_r>
 8006dba:	bf00      	nop
 8006dbc:	20000204 	.word	0x20000204

08006dc0 <free>:
 8006dc0:	4b02      	ldr	r3, [pc, #8]	; (8006dcc <free+0xc>)
 8006dc2:	4601      	mov	r1, r0
 8006dc4:	6818      	ldr	r0, [r3, #0]
 8006dc6:	f000 b825 	b.w	8006e14 <_free_r>
 8006dca:	bf00      	nop
 8006dcc:	20000204 	.word	0x20000204

08006dd0 <memcpy>:
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	1e43      	subs	r3, r0, #1
 8006dd4:	440a      	add	r2, r1
 8006dd6:	4291      	cmp	r1, r2
 8006dd8:	d100      	bne.n	8006ddc <memcpy+0xc>
 8006dda:	bd10      	pop	{r4, pc}
 8006ddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006de0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006de4:	e7f7      	b.n	8006dd6 <memcpy+0x6>

08006de6 <memset>:
 8006de6:	4603      	mov	r3, r0
 8006de8:	4402      	add	r2, r0
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d100      	bne.n	8006df0 <memset+0xa>
 8006dee:	4770      	bx	lr
 8006df0:	f803 1b01 	strb.w	r1, [r3], #1
 8006df4:	e7f9      	b.n	8006dea <memset+0x4>

08006df6 <_calloc_r>:
 8006df6:	b538      	push	{r3, r4, r5, lr}
 8006df8:	fb02 f401 	mul.w	r4, r2, r1
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	f000 f855 	bl	8006eac <_malloc_r>
 8006e02:	4605      	mov	r5, r0
 8006e04:	b118      	cbz	r0, 8006e0e <_calloc_r+0x18>
 8006e06:	4622      	mov	r2, r4
 8006e08:	2100      	movs	r1, #0
 8006e0a:	f7ff ffec 	bl	8006de6 <memset>
 8006e0e:	4628      	mov	r0, r5
 8006e10:	bd38      	pop	{r3, r4, r5, pc}
	...

08006e14 <_free_r>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	4605      	mov	r5, r0
 8006e18:	2900      	cmp	r1, #0
 8006e1a:	d043      	beq.n	8006ea4 <_free_r+0x90>
 8006e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e20:	1f0c      	subs	r4, r1, #4
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	bfb8      	it	lt
 8006e26:	18e4      	addlt	r4, r4, r3
 8006e28:	f000 fa15 	bl	8007256 <__malloc_lock>
 8006e2c:	4a1e      	ldr	r2, [pc, #120]	; (8006ea8 <_free_r+0x94>)
 8006e2e:	6813      	ldr	r3, [r2, #0]
 8006e30:	4610      	mov	r0, r2
 8006e32:	b933      	cbnz	r3, 8006e42 <_free_r+0x2e>
 8006e34:	6063      	str	r3, [r4, #4]
 8006e36:	6014      	str	r4, [r2, #0]
 8006e38:	4628      	mov	r0, r5
 8006e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e3e:	f000 ba0b 	b.w	8007258 <__malloc_unlock>
 8006e42:	42a3      	cmp	r3, r4
 8006e44:	d90b      	bls.n	8006e5e <_free_r+0x4a>
 8006e46:	6821      	ldr	r1, [r4, #0]
 8006e48:	1862      	adds	r2, r4, r1
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	bf01      	itttt	eq
 8006e4e:	681a      	ldreq	r2, [r3, #0]
 8006e50:	685b      	ldreq	r3, [r3, #4]
 8006e52:	1852      	addeq	r2, r2, r1
 8006e54:	6022      	streq	r2, [r4, #0]
 8006e56:	6063      	str	r3, [r4, #4]
 8006e58:	6004      	str	r4, [r0, #0]
 8006e5a:	e7ed      	b.n	8006e38 <_free_r+0x24>
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	b10a      	cbz	r2, 8006e66 <_free_r+0x52>
 8006e62:	42a2      	cmp	r2, r4
 8006e64:	d9fa      	bls.n	8006e5c <_free_r+0x48>
 8006e66:	6819      	ldr	r1, [r3, #0]
 8006e68:	1858      	adds	r0, r3, r1
 8006e6a:	42a0      	cmp	r0, r4
 8006e6c:	d10b      	bne.n	8006e86 <_free_r+0x72>
 8006e6e:	6820      	ldr	r0, [r4, #0]
 8006e70:	4401      	add	r1, r0
 8006e72:	1858      	adds	r0, r3, r1
 8006e74:	4282      	cmp	r2, r0
 8006e76:	6019      	str	r1, [r3, #0]
 8006e78:	d1de      	bne.n	8006e38 <_free_r+0x24>
 8006e7a:	6810      	ldr	r0, [r2, #0]
 8006e7c:	6852      	ldr	r2, [r2, #4]
 8006e7e:	4401      	add	r1, r0
 8006e80:	6019      	str	r1, [r3, #0]
 8006e82:	605a      	str	r2, [r3, #4]
 8006e84:	e7d8      	b.n	8006e38 <_free_r+0x24>
 8006e86:	d902      	bls.n	8006e8e <_free_r+0x7a>
 8006e88:	230c      	movs	r3, #12
 8006e8a:	602b      	str	r3, [r5, #0]
 8006e8c:	e7d4      	b.n	8006e38 <_free_r+0x24>
 8006e8e:	6820      	ldr	r0, [r4, #0]
 8006e90:	1821      	adds	r1, r4, r0
 8006e92:	428a      	cmp	r2, r1
 8006e94:	bf01      	itttt	eq
 8006e96:	6811      	ldreq	r1, [r2, #0]
 8006e98:	6852      	ldreq	r2, [r2, #4]
 8006e9a:	1809      	addeq	r1, r1, r0
 8006e9c:	6021      	streq	r1, [r4, #0]
 8006e9e:	6062      	str	r2, [r4, #4]
 8006ea0:	605c      	str	r4, [r3, #4]
 8006ea2:	e7c9      	b.n	8006e38 <_free_r+0x24>
 8006ea4:	bd38      	pop	{r3, r4, r5, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000940 	.word	0x20000940

08006eac <_malloc_r>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	1ccd      	adds	r5, r1, #3
 8006eb0:	f025 0503 	bic.w	r5, r5, #3
 8006eb4:	3508      	adds	r5, #8
 8006eb6:	2d0c      	cmp	r5, #12
 8006eb8:	bf38      	it	cc
 8006eba:	250c      	movcc	r5, #12
 8006ebc:	2d00      	cmp	r5, #0
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	db01      	blt.n	8006ec6 <_malloc_r+0x1a>
 8006ec2:	42a9      	cmp	r1, r5
 8006ec4:	d903      	bls.n	8006ece <_malloc_r+0x22>
 8006ec6:	230c      	movs	r3, #12
 8006ec8:	6033      	str	r3, [r6, #0]
 8006eca:	2000      	movs	r0, #0
 8006ecc:	bd70      	pop	{r4, r5, r6, pc}
 8006ece:	f000 f9c2 	bl	8007256 <__malloc_lock>
 8006ed2:	4a21      	ldr	r2, [pc, #132]	; (8006f58 <_malloc_r+0xac>)
 8006ed4:	6814      	ldr	r4, [r2, #0]
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	b991      	cbnz	r1, 8006f00 <_malloc_r+0x54>
 8006eda:	4c20      	ldr	r4, [pc, #128]	; (8006f5c <_malloc_r+0xb0>)
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	b91b      	cbnz	r3, 8006ee8 <_malloc_r+0x3c>
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	f000 f83d 	bl	8006f60 <_sbrk_r>
 8006ee6:	6020      	str	r0, [r4, #0]
 8006ee8:	4629      	mov	r1, r5
 8006eea:	4630      	mov	r0, r6
 8006eec:	f000 f838 	bl	8006f60 <_sbrk_r>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d124      	bne.n	8006f3e <_malloc_r+0x92>
 8006ef4:	230c      	movs	r3, #12
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	6033      	str	r3, [r6, #0]
 8006efa:	f000 f9ad 	bl	8007258 <__malloc_unlock>
 8006efe:	e7e4      	b.n	8006eca <_malloc_r+0x1e>
 8006f00:	680b      	ldr	r3, [r1, #0]
 8006f02:	1b5b      	subs	r3, r3, r5
 8006f04:	d418      	bmi.n	8006f38 <_malloc_r+0x8c>
 8006f06:	2b0b      	cmp	r3, #11
 8006f08:	d90f      	bls.n	8006f2a <_malloc_r+0x7e>
 8006f0a:	600b      	str	r3, [r1, #0]
 8006f0c:	18cc      	adds	r4, r1, r3
 8006f0e:	50cd      	str	r5, [r1, r3]
 8006f10:	4630      	mov	r0, r6
 8006f12:	f000 f9a1 	bl	8007258 <__malloc_unlock>
 8006f16:	f104 000b 	add.w	r0, r4, #11
 8006f1a:	1d23      	adds	r3, r4, #4
 8006f1c:	f020 0007 	bic.w	r0, r0, #7
 8006f20:	1ac3      	subs	r3, r0, r3
 8006f22:	d0d3      	beq.n	8006ecc <_malloc_r+0x20>
 8006f24:	425a      	negs	r2, r3
 8006f26:	50e2      	str	r2, [r4, r3]
 8006f28:	e7d0      	b.n	8006ecc <_malloc_r+0x20>
 8006f2a:	684b      	ldr	r3, [r1, #4]
 8006f2c:	428c      	cmp	r4, r1
 8006f2e:	bf16      	itet	ne
 8006f30:	6063      	strne	r3, [r4, #4]
 8006f32:	6013      	streq	r3, [r2, #0]
 8006f34:	460c      	movne	r4, r1
 8006f36:	e7eb      	b.n	8006f10 <_malloc_r+0x64>
 8006f38:	460c      	mov	r4, r1
 8006f3a:	6849      	ldr	r1, [r1, #4]
 8006f3c:	e7cc      	b.n	8006ed8 <_malloc_r+0x2c>
 8006f3e:	1cc4      	adds	r4, r0, #3
 8006f40:	f024 0403 	bic.w	r4, r4, #3
 8006f44:	42a0      	cmp	r0, r4
 8006f46:	d005      	beq.n	8006f54 <_malloc_r+0xa8>
 8006f48:	1a21      	subs	r1, r4, r0
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f000 f808 	bl	8006f60 <_sbrk_r>
 8006f50:	3001      	adds	r0, #1
 8006f52:	d0cf      	beq.n	8006ef4 <_malloc_r+0x48>
 8006f54:	6025      	str	r5, [r4, #0]
 8006f56:	e7db      	b.n	8006f10 <_malloc_r+0x64>
 8006f58:	20000940 	.word	0x20000940
 8006f5c:	20000944 	.word	0x20000944

08006f60 <_sbrk_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	2300      	movs	r3, #0
 8006f64:	4c05      	ldr	r4, [pc, #20]	; (8006f7c <_sbrk_r+0x1c>)
 8006f66:	4605      	mov	r5, r0
 8006f68:	4608      	mov	r0, r1
 8006f6a:	6023      	str	r3, [r4, #0]
 8006f6c:	f7ff f866 	bl	800603c <_sbrk>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d102      	bne.n	8006f7a <_sbrk_r+0x1a>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	b103      	cbz	r3, 8006f7a <_sbrk_r+0x1a>
 8006f78:	602b      	str	r3, [r5, #0]
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	2000192c 	.word	0x2000192c

08006f80 <strcat>:
 8006f80:	4603      	mov	r3, r0
 8006f82:	b510      	push	{r4, lr}
 8006f84:	781a      	ldrb	r2, [r3, #0]
 8006f86:	1c5c      	adds	r4, r3, #1
 8006f88:	b93a      	cbnz	r2, 8006f9a <strcat+0x1a>
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f90:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f94:	2a00      	cmp	r2, #0
 8006f96:	d1f9      	bne.n	8006f8c <strcat+0xc>
 8006f98:	bd10      	pop	{r4, pc}
 8006f9a:	4623      	mov	r3, r4
 8006f9c:	e7f2      	b.n	8006f84 <strcat+0x4>

08006f9e <strncmp>:
 8006f9e:	b510      	push	{r4, lr}
 8006fa0:	b16a      	cbz	r2, 8006fbe <strncmp+0x20>
 8006fa2:	3901      	subs	r1, #1
 8006fa4:	1884      	adds	r4, r0, r2
 8006fa6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006faa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d103      	bne.n	8006fba <strncmp+0x1c>
 8006fb2:	42a0      	cmp	r0, r4
 8006fb4:	d001      	beq.n	8006fba <strncmp+0x1c>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f5      	bne.n	8006fa6 <strncmp+0x8>
 8006fba:	1a98      	subs	r0, r3, r2
 8006fbc:	bd10      	pop	{r4, pc}
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	e7fc      	b.n	8006fbc <strncmp+0x1e>

08006fc2 <strncpy>:
 8006fc2:	b570      	push	{r4, r5, r6, lr}
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	3901      	subs	r1, #1
 8006fc8:	b902      	cbnz	r2, 8006fcc <strncpy+0xa>
 8006fca:	bd70      	pop	{r4, r5, r6, pc}
 8006fcc:	4623      	mov	r3, r4
 8006fce:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8006fd2:	1e56      	subs	r6, r2, #1
 8006fd4:	f803 5b01 	strb.w	r5, [r3], #1
 8006fd8:	b92d      	cbnz	r5, 8006fe6 <strncpy+0x24>
 8006fda:	4414      	add	r4, r2
 8006fdc:	42a3      	cmp	r3, r4
 8006fde:	d0f4      	beq.n	8006fca <strncpy+0x8>
 8006fe0:	f803 5b01 	strb.w	r5, [r3], #1
 8006fe4:	e7fa      	b.n	8006fdc <strncpy+0x1a>
 8006fe6:	461c      	mov	r4, r3
 8006fe8:	4632      	mov	r2, r6
 8006fea:	e7ed      	b.n	8006fc8 <strncpy+0x6>

08006fec <strtok>:
 8006fec:	4b13      	ldr	r3, [pc, #76]	; (800703c <strtok+0x50>)
 8006fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff2:	681d      	ldr	r5, [r3, #0]
 8006ff4:	4606      	mov	r6, r0
 8006ff6:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006ff8:	460f      	mov	r7, r1
 8006ffa:	b9b4      	cbnz	r4, 800702a <strtok+0x3e>
 8006ffc:	2050      	movs	r0, #80	; 0x50
 8006ffe:	f7ff fed7 	bl	8006db0 <malloc>
 8007002:	65a8      	str	r0, [r5, #88]	; 0x58
 8007004:	e9c0 4400 	strd	r4, r4, [r0]
 8007008:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800700c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007010:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007014:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007018:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800701c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007020:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007024:	6184      	str	r4, [r0, #24]
 8007026:	7704      	strb	r4, [r0, #28]
 8007028:	6244      	str	r4, [r0, #36]	; 0x24
 800702a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800702c:	4639      	mov	r1, r7
 800702e:	4630      	mov	r0, r6
 8007030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007034:	2301      	movs	r3, #1
 8007036:	f000 b803 	b.w	8007040 <__strtok_r>
 800703a:	bf00      	nop
 800703c:	20000204 	.word	0x20000204

08007040 <__strtok_r>:
 8007040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007042:	b918      	cbnz	r0, 800704c <__strtok_r+0xc>
 8007044:	6810      	ldr	r0, [r2, #0]
 8007046:	b908      	cbnz	r0, 800704c <__strtok_r+0xc>
 8007048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800704a:	4620      	mov	r0, r4
 800704c:	4604      	mov	r4, r0
 800704e:	460f      	mov	r7, r1
 8007050:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007054:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007058:	b91e      	cbnz	r6, 8007062 <__strtok_r+0x22>
 800705a:	b96d      	cbnz	r5, 8007078 <__strtok_r+0x38>
 800705c:	6015      	str	r5, [r2, #0]
 800705e:	4628      	mov	r0, r5
 8007060:	e7f2      	b.n	8007048 <__strtok_r+0x8>
 8007062:	42b5      	cmp	r5, r6
 8007064:	d1f6      	bne.n	8007054 <__strtok_r+0x14>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1ef      	bne.n	800704a <__strtok_r+0xa>
 800706a:	6014      	str	r4, [r2, #0]
 800706c:	7003      	strb	r3, [r0, #0]
 800706e:	e7eb      	b.n	8007048 <__strtok_r+0x8>
 8007070:	462b      	mov	r3, r5
 8007072:	e00d      	b.n	8007090 <__strtok_r+0x50>
 8007074:	b926      	cbnz	r6, 8007080 <__strtok_r+0x40>
 8007076:	461c      	mov	r4, r3
 8007078:	4623      	mov	r3, r4
 800707a:	460f      	mov	r7, r1
 800707c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007080:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007084:	42b5      	cmp	r5, r6
 8007086:	d1f5      	bne.n	8007074 <__strtok_r+0x34>
 8007088:	2d00      	cmp	r5, #0
 800708a:	d0f1      	beq.n	8007070 <__strtok_r+0x30>
 800708c:	2100      	movs	r1, #0
 800708e:	7021      	strb	r1, [r4, #0]
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	e7d9      	b.n	8007048 <__strtok_r+0x8>

08007094 <_strtol_l.isra.0>:
 8007094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007098:	4680      	mov	r8, r0
 800709a:	4689      	mov	r9, r1
 800709c:	4692      	mov	sl, r2
 800709e:	461e      	mov	r6, r3
 80070a0:	460f      	mov	r7, r1
 80070a2:	463d      	mov	r5, r7
 80070a4:	9808      	ldr	r0, [sp, #32]
 80070a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070aa:	f000 f8bf 	bl	800722c <__locale_ctype_ptr_l>
 80070ae:	4420      	add	r0, r4
 80070b0:	7843      	ldrb	r3, [r0, #1]
 80070b2:	f013 0308 	ands.w	r3, r3, #8
 80070b6:	d132      	bne.n	800711e <_strtol_l.isra.0+0x8a>
 80070b8:	2c2d      	cmp	r4, #45	; 0x2d
 80070ba:	d132      	bne.n	8007122 <_strtol_l.isra.0+0x8e>
 80070bc:	2201      	movs	r2, #1
 80070be:	787c      	ldrb	r4, [r7, #1]
 80070c0:	1cbd      	adds	r5, r7, #2
 80070c2:	2e00      	cmp	r6, #0
 80070c4:	d05d      	beq.n	8007182 <_strtol_l.isra.0+0xee>
 80070c6:	2e10      	cmp	r6, #16
 80070c8:	d109      	bne.n	80070de <_strtol_l.isra.0+0x4a>
 80070ca:	2c30      	cmp	r4, #48	; 0x30
 80070cc:	d107      	bne.n	80070de <_strtol_l.isra.0+0x4a>
 80070ce:	782b      	ldrb	r3, [r5, #0]
 80070d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80070d4:	2b58      	cmp	r3, #88	; 0x58
 80070d6:	d14f      	bne.n	8007178 <_strtol_l.isra.0+0xe4>
 80070d8:	2610      	movs	r6, #16
 80070da:	786c      	ldrb	r4, [r5, #1]
 80070dc:	3502      	adds	r5, #2
 80070de:	2a00      	cmp	r2, #0
 80070e0:	bf14      	ite	ne
 80070e2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80070e6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80070ea:	2700      	movs	r7, #0
 80070ec:	fbb1 fcf6 	udiv	ip, r1, r6
 80070f0:	4638      	mov	r0, r7
 80070f2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80070f6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80070fa:	2b09      	cmp	r3, #9
 80070fc:	d817      	bhi.n	800712e <_strtol_l.isra.0+0x9a>
 80070fe:	461c      	mov	r4, r3
 8007100:	42a6      	cmp	r6, r4
 8007102:	dd23      	ble.n	800714c <_strtol_l.isra.0+0xb8>
 8007104:	1c7b      	adds	r3, r7, #1
 8007106:	d007      	beq.n	8007118 <_strtol_l.isra.0+0x84>
 8007108:	4584      	cmp	ip, r0
 800710a:	d31c      	bcc.n	8007146 <_strtol_l.isra.0+0xb2>
 800710c:	d101      	bne.n	8007112 <_strtol_l.isra.0+0x7e>
 800710e:	45a6      	cmp	lr, r4
 8007110:	db19      	blt.n	8007146 <_strtol_l.isra.0+0xb2>
 8007112:	2701      	movs	r7, #1
 8007114:	fb00 4006 	mla	r0, r0, r6, r4
 8007118:	f815 4b01 	ldrb.w	r4, [r5], #1
 800711c:	e7eb      	b.n	80070f6 <_strtol_l.isra.0+0x62>
 800711e:	462f      	mov	r7, r5
 8007120:	e7bf      	b.n	80070a2 <_strtol_l.isra.0+0xe>
 8007122:	2c2b      	cmp	r4, #43	; 0x2b
 8007124:	bf04      	itt	eq
 8007126:	1cbd      	addeq	r5, r7, #2
 8007128:	787c      	ldrbeq	r4, [r7, #1]
 800712a:	461a      	mov	r2, r3
 800712c:	e7c9      	b.n	80070c2 <_strtol_l.isra.0+0x2e>
 800712e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007132:	2b19      	cmp	r3, #25
 8007134:	d801      	bhi.n	800713a <_strtol_l.isra.0+0xa6>
 8007136:	3c37      	subs	r4, #55	; 0x37
 8007138:	e7e2      	b.n	8007100 <_strtol_l.isra.0+0x6c>
 800713a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800713e:	2b19      	cmp	r3, #25
 8007140:	d804      	bhi.n	800714c <_strtol_l.isra.0+0xb8>
 8007142:	3c57      	subs	r4, #87	; 0x57
 8007144:	e7dc      	b.n	8007100 <_strtol_l.isra.0+0x6c>
 8007146:	f04f 37ff 	mov.w	r7, #4294967295
 800714a:	e7e5      	b.n	8007118 <_strtol_l.isra.0+0x84>
 800714c:	1c7b      	adds	r3, r7, #1
 800714e:	d108      	bne.n	8007162 <_strtol_l.isra.0+0xce>
 8007150:	2322      	movs	r3, #34	; 0x22
 8007152:	4608      	mov	r0, r1
 8007154:	f8c8 3000 	str.w	r3, [r8]
 8007158:	f1ba 0f00 	cmp.w	sl, #0
 800715c:	d107      	bne.n	800716e <_strtol_l.isra.0+0xda>
 800715e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007162:	b102      	cbz	r2, 8007166 <_strtol_l.isra.0+0xd2>
 8007164:	4240      	negs	r0, r0
 8007166:	f1ba 0f00 	cmp.w	sl, #0
 800716a:	d0f8      	beq.n	800715e <_strtol_l.isra.0+0xca>
 800716c:	b10f      	cbz	r7, 8007172 <_strtol_l.isra.0+0xde>
 800716e:	f105 39ff 	add.w	r9, r5, #4294967295
 8007172:	f8ca 9000 	str.w	r9, [sl]
 8007176:	e7f2      	b.n	800715e <_strtol_l.isra.0+0xca>
 8007178:	2430      	movs	r4, #48	; 0x30
 800717a:	2e00      	cmp	r6, #0
 800717c:	d1af      	bne.n	80070de <_strtol_l.isra.0+0x4a>
 800717e:	2608      	movs	r6, #8
 8007180:	e7ad      	b.n	80070de <_strtol_l.isra.0+0x4a>
 8007182:	2c30      	cmp	r4, #48	; 0x30
 8007184:	d0a3      	beq.n	80070ce <_strtol_l.isra.0+0x3a>
 8007186:	260a      	movs	r6, #10
 8007188:	e7a9      	b.n	80070de <_strtol_l.isra.0+0x4a>
	...

0800718c <strtol>:
 800718c:	4b08      	ldr	r3, [pc, #32]	; (80071b0 <strtol+0x24>)
 800718e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007190:	681c      	ldr	r4, [r3, #0]
 8007192:	4d08      	ldr	r5, [pc, #32]	; (80071b4 <strtol+0x28>)
 8007194:	6a23      	ldr	r3, [r4, #32]
 8007196:	2b00      	cmp	r3, #0
 8007198:	bf08      	it	eq
 800719a:	462b      	moveq	r3, r5
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	4613      	mov	r3, r2
 80071a0:	460a      	mov	r2, r1
 80071a2:	4601      	mov	r1, r0
 80071a4:	4620      	mov	r0, r4
 80071a6:	f7ff ff75 	bl	8007094 <_strtol_l.isra.0>
 80071aa:	b003      	add	sp, #12
 80071ac:	bd30      	pop	{r4, r5, pc}
 80071ae:	bf00      	nop
 80071b0:	20000204 	.word	0x20000204
 80071b4:	20000268 	.word	0x20000268

080071b8 <_vsniprintf_r>:
 80071b8:	b530      	push	{r4, r5, lr}
 80071ba:	1e14      	subs	r4, r2, #0
 80071bc:	4605      	mov	r5, r0
 80071be:	b09b      	sub	sp, #108	; 0x6c
 80071c0:	4618      	mov	r0, r3
 80071c2:	da05      	bge.n	80071d0 <_vsniprintf_r+0x18>
 80071c4:	238b      	movs	r3, #139	; 0x8b
 80071c6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ca:	602b      	str	r3, [r5, #0]
 80071cc:	b01b      	add	sp, #108	; 0x6c
 80071ce:	bd30      	pop	{r4, r5, pc}
 80071d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80071d4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80071d8:	bf0c      	ite	eq
 80071da:	4623      	moveq	r3, r4
 80071dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80071e0:	9302      	str	r3, [sp, #8]
 80071e2:	9305      	str	r3, [sp, #20]
 80071e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071e8:	9100      	str	r1, [sp, #0]
 80071ea:	9104      	str	r1, [sp, #16]
 80071ec:	f8ad 300e 	strh.w	r3, [sp, #14]
 80071f0:	4602      	mov	r2, r0
 80071f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80071f4:	4669      	mov	r1, sp
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 f88a 	bl	8007310 <_svfiprintf_r>
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	bfbc      	itt	lt
 8007200:	238b      	movlt	r3, #139	; 0x8b
 8007202:	602b      	strlt	r3, [r5, #0]
 8007204:	2c00      	cmp	r4, #0
 8007206:	d0e1      	beq.n	80071cc <_vsniprintf_r+0x14>
 8007208:	2200      	movs	r2, #0
 800720a:	9b00      	ldr	r3, [sp, #0]
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	e7dd      	b.n	80071cc <_vsniprintf_r+0x14>

08007210 <vsniprintf>:
 8007210:	b507      	push	{r0, r1, r2, lr}
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	4613      	mov	r3, r2
 8007216:	460a      	mov	r2, r1
 8007218:	4601      	mov	r1, r0
 800721a:	4803      	ldr	r0, [pc, #12]	; (8007228 <vsniprintf+0x18>)
 800721c:	6800      	ldr	r0, [r0, #0]
 800721e:	f7ff ffcb 	bl	80071b8 <_vsniprintf_r>
 8007222:	b003      	add	sp, #12
 8007224:	f85d fb04 	ldr.w	pc, [sp], #4
 8007228:	20000204 	.word	0x20000204

0800722c <__locale_ctype_ptr_l>:
 800722c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007230:	4770      	bx	lr

08007232 <__ascii_mbtowc>:
 8007232:	b082      	sub	sp, #8
 8007234:	b901      	cbnz	r1, 8007238 <__ascii_mbtowc+0x6>
 8007236:	a901      	add	r1, sp, #4
 8007238:	b142      	cbz	r2, 800724c <__ascii_mbtowc+0x1a>
 800723a:	b14b      	cbz	r3, 8007250 <__ascii_mbtowc+0x1e>
 800723c:	7813      	ldrb	r3, [r2, #0]
 800723e:	600b      	str	r3, [r1, #0]
 8007240:	7812      	ldrb	r2, [r2, #0]
 8007242:	1c10      	adds	r0, r2, #0
 8007244:	bf18      	it	ne
 8007246:	2001      	movne	r0, #1
 8007248:	b002      	add	sp, #8
 800724a:	4770      	bx	lr
 800724c:	4610      	mov	r0, r2
 800724e:	e7fb      	b.n	8007248 <__ascii_mbtowc+0x16>
 8007250:	f06f 0001 	mvn.w	r0, #1
 8007254:	e7f8      	b.n	8007248 <__ascii_mbtowc+0x16>

08007256 <__malloc_lock>:
 8007256:	4770      	bx	lr

08007258 <__malloc_unlock>:
 8007258:	4770      	bx	lr

0800725a <__ssputs_r>:
 800725a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800725e:	688e      	ldr	r6, [r1, #8]
 8007260:	4682      	mov	sl, r0
 8007262:	429e      	cmp	r6, r3
 8007264:	460c      	mov	r4, r1
 8007266:	4690      	mov	r8, r2
 8007268:	4699      	mov	r9, r3
 800726a:	d837      	bhi.n	80072dc <__ssputs_r+0x82>
 800726c:	898a      	ldrh	r2, [r1, #12]
 800726e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007272:	d031      	beq.n	80072d8 <__ssputs_r+0x7e>
 8007274:	2302      	movs	r3, #2
 8007276:	6825      	ldr	r5, [r4, #0]
 8007278:	6909      	ldr	r1, [r1, #16]
 800727a:	1a6f      	subs	r7, r5, r1
 800727c:	6965      	ldr	r5, [r4, #20]
 800727e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007282:	fb95 f5f3 	sdiv	r5, r5, r3
 8007286:	f109 0301 	add.w	r3, r9, #1
 800728a:	443b      	add	r3, r7
 800728c:	429d      	cmp	r5, r3
 800728e:	bf38      	it	cc
 8007290:	461d      	movcc	r5, r3
 8007292:	0553      	lsls	r3, r2, #21
 8007294:	d530      	bpl.n	80072f8 <__ssputs_r+0x9e>
 8007296:	4629      	mov	r1, r5
 8007298:	f7ff fe08 	bl	8006eac <_malloc_r>
 800729c:	4606      	mov	r6, r0
 800729e:	b950      	cbnz	r0, 80072b6 <__ssputs_r+0x5c>
 80072a0:	230c      	movs	r3, #12
 80072a2:	f04f 30ff 	mov.w	r0, #4294967295
 80072a6:	f8ca 3000 	str.w	r3, [sl]
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b0:	81a3      	strh	r3, [r4, #12]
 80072b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b6:	463a      	mov	r2, r7
 80072b8:	6921      	ldr	r1, [r4, #16]
 80072ba:	f7ff fd89 	bl	8006dd0 <memcpy>
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c8:	81a3      	strh	r3, [r4, #12]
 80072ca:	6126      	str	r6, [r4, #16]
 80072cc:	443e      	add	r6, r7
 80072ce:	6026      	str	r6, [r4, #0]
 80072d0:	464e      	mov	r6, r9
 80072d2:	6165      	str	r5, [r4, #20]
 80072d4:	1bed      	subs	r5, r5, r7
 80072d6:	60a5      	str	r5, [r4, #8]
 80072d8:	454e      	cmp	r6, r9
 80072da:	d900      	bls.n	80072de <__ssputs_r+0x84>
 80072dc:	464e      	mov	r6, r9
 80072de:	4632      	mov	r2, r6
 80072e0:	4641      	mov	r1, r8
 80072e2:	6820      	ldr	r0, [r4, #0]
 80072e4:	f000 faaf 	bl	8007846 <memmove>
 80072e8:	68a3      	ldr	r3, [r4, #8]
 80072ea:	2000      	movs	r0, #0
 80072ec:	1b9b      	subs	r3, r3, r6
 80072ee:	60a3      	str	r3, [r4, #8]
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	441e      	add	r6, r3
 80072f4:	6026      	str	r6, [r4, #0]
 80072f6:	e7dc      	b.n	80072b2 <__ssputs_r+0x58>
 80072f8:	462a      	mov	r2, r5
 80072fa:	f000 fabd 	bl	8007878 <_realloc_r>
 80072fe:	4606      	mov	r6, r0
 8007300:	2800      	cmp	r0, #0
 8007302:	d1e2      	bne.n	80072ca <__ssputs_r+0x70>
 8007304:	6921      	ldr	r1, [r4, #16]
 8007306:	4650      	mov	r0, sl
 8007308:	f7ff fd84 	bl	8006e14 <_free_r>
 800730c:	e7c8      	b.n	80072a0 <__ssputs_r+0x46>
	...

08007310 <_svfiprintf_r>:
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	461d      	mov	r5, r3
 8007316:	898b      	ldrh	r3, [r1, #12]
 8007318:	b09d      	sub	sp, #116	; 0x74
 800731a:	061f      	lsls	r7, r3, #24
 800731c:	4680      	mov	r8, r0
 800731e:	460c      	mov	r4, r1
 8007320:	4616      	mov	r6, r2
 8007322:	d50f      	bpl.n	8007344 <_svfiprintf_r+0x34>
 8007324:	690b      	ldr	r3, [r1, #16]
 8007326:	b96b      	cbnz	r3, 8007344 <_svfiprintf_r+0x34>
 8007328:	2140      	movs	r1, #64	; 0x40
 800732a:	f7ff fdbf 	bl	8006eac <_malloc_r>
 800732e:	6020      	str	r0, [r4, #0]
 8007330:	6120      	str	r0, [r4, #16]
 8007332:	b928      	cbnz	r0, 8007340 <_svfiprintf_r+0x30>
 8007334:	230c      	movs	r3, #12
 8007336:	f8c8 3000 	str.w	r3, [r8]
 800733a:	f04f 30ff 	mov.w	r0, #4294967295
 800733e:	e0c8      	b.n	80074d2 <_svfiprintf_r+0x1c2>
 8007340:	2340      	movs	r3, #64	; 0x40
 8007342:	6163      	str	r3, [r4, #20]
 8007344:	2300      	movs	r3, #0
 8007346:	9309      	str	r3, [sp, #36]	; 0x24
 8007348:	2320      	movs	r3, #32
 800734a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800734e:	2330      	movs	r3, #48	; 0x30
 8007350:	f04f 0b01 	mov.w	fp, #1
 8007354:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007358:	9503      	str	r5, [sp, #12]
 800735a:	4637      	mov	r7, r6
 800735c:	463d      	mov	r5, r7
 800735e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007362:	b10b      	cbz	r3, 8007368 <_svfiprintf_r+0x58>
 8007364:	2b25      	cmp	r3, #37	; 0x25
 8007366:	d13e      	bne.n	80073e6 <_svfiprintf_r+0xd6>
 8007368:	ebb7 0a06 	subs.w	sl, r7, r6
 800736c:	d00b      	beq.n	8007386 <_svfiprintf_r+0x76>
 800736e:	4653      	mov	r3, sl
 8007370:	4632      	mov	r2, r6
 8007372:	4621      	mov	r1, r4
 8007374:	4640      	mov	r0, r8
 8007376:	f7ff ff70 	bl	800725a <__ssputs_r>
 800737a:	3001      	adds	r0, #1
 800737c:	f000 80a4 	beq.w	80074c8 <_svfiprintf_r+0x1b8>
 8007380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007382:	4453      	add	r3, sl
 8007384:	9309      	str	r3, [sp, #36]	; 0x24
 8007386:	783b      	ldrb	r3, [r7, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 809d 	beq.w	80074c8 <_svfiprintf_r+0x1b8>
 800738e:	2300      	movs	r3, #0
 8007390:	f04f 32ff 	mov.w	r2, #4294967295
 8007394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007398:	9304      	str	r3, [sp, #16]
 800739a:	9307      	str	r3, [sp, #28]
 800739c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073a0:	931a      	str	r3, [sp, #104]	; 0x68
 80073a2:	462f      	mov	r7, r5
 80073a4:	2205      	movs	r2, #5
 80073a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80073aa:	4850      	ldr	r0, [pc, #320]	; (80074ec <_svfiprintf_r+0x1dc>)
 80073ac:	f000 fa3d 	bl	800782a <memchr>
 80073b0:	9b04      	ldr	r3, [sp, #16]
 80073b2:	b9d0      	cbnz	r0, 80073ea <_svfiprintf_r+0xda>
 80073b4:	06d9      	lsls	r1, r3, #27
 80073b6:	bf44      	itt	mi
 80073b8:	2220      	movmi	r2, #32
 80073ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073be:	071a      	lsls	r2, r3, #28
 80073c0:	bf44      	itt	mi
 80073c2:	222b      	movmi	r2, #43	; 0x2b
 80073c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073c8:	782a      	ldrb	r2, [r5, #0]
 80073ca:	2a2a      	cmp	r2, #42	; 0x2a
 80073cc:	d015      	beq.n	80073fa <_svfiprintf_r+0xea>
 80073ce:	462f      	mov	r7, r5
 80073d0:	2000      	movs	r0, #0
 80073d2:	250a      	movs	r5, #10
 80073d4:	9a07      	ldr	r2, [sp, #28]
 80073d6:	4639      	mov	r1, r7
 80073d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073dc:	3b30      	subs	r3, #48	; 0x30
 80073de:	2b09      	cmp	r3, #9
 80073e0:	d94d      	bls.n	800747e <_svfiprintf_r+0x16e>
 80073e2:	b1b8      	cbz	r0, 8007414 <_svfiprintf_r+0x104>
 80073e4:	e00f      	b.n	8007406 <_svfiprintf_r+0xf6>
 80073e6:	462f      	mov	r7, r5
 80073e8:	e7b8      	b.n	800735c <_svfiprintf_r+0x4c>
 80073ea:	4a40      	ldr	r2, [pc, #256]	; (80074ec <_svfiprintf_r+0x1dc>)
 80073ec:	463d      	mov	r5, r7
 80073ee:	1a80      	subs	r0, r0, r2
 80073f0:	fa0b f000 	lsl.w	r0, fp, r0
 80073f4:	4318      	orrs	r0, r3
 80073f6:	9004      	str	r0, [sp, #16]
 80073f8:	e7d3      	b.n	80073a2 <_svfiprintf_r+0x92>
 80073fa:	9a03      	ldr	r2, [sp, #12]
 80073fc:	1d11      	adds	r1, r2, #4
 80073fe:	6812      	ldr	r2, [r2, #0]
 8007400:	9103      	str	r1, [sp, #12]
 8007402:	2a00      	cmp	r2, #0
 8007404:	db01      	blt.n	800740a <_svfiprintf_r+0xfa>
 8007406:	9207      	str	r2, [sp, #28]
 8007408:	e004      	b.n	8007414 <_svfiprintf_r+0x104>
 800740a:	4252      	negs	r2, r2
 800740c:	f043 0302 	orr.w	r3, r3, #2
 8007410:	9207      	str	r2, [sp, #28]
 8007412:	9304      	str	r3, [sp, #16]
 8007414:	783b      	ldrb	r3, [r7, #0]
 8007416:	2b2e      	cmp	r3, #46	; 0x2e
 8007418:	d10c      	bne.n	8007434 <_svfiprintf_r+0x124>
 800741a:	787b      	ldrb	r3, [r7, #1]
 800741c:	2b2a      	cmp	r3, #42	; 0x2a
 800741e:	d133      	bne.n	8007488 <_svfiprintf_r+0x178>
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	3702      	adds	r7, #2
 8007424:	1d1a      	adds	r2, r3, #4
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	9203      	str	r2, [sp, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	bfb8      	it	lt
 800742e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007432:	9305      	str	r3, [sp, #20]
 8007434:	4d2e      	ldr	r5, [pc, #184]	; (80074f0 <_svfiprintf_r+0x1e0>)
 8007436:	2203      	movs	r2, #3
 8007438:	7839      	ldrb	r1, [r7, #0]
 800743a:	4628      	mov	r0, r5
 800743c:	f000 f9f5 	bl	800782a <memchr>
 8007440:	b138      	cbz	r0, 8007452 <_svfiprintf_r+0x142>
 8007442:	2340      	movs	r3, #64	; 0x40
 8007444:	1b40      	subs	r0, r0, r5
 8007446:	fa03 f000 	lsl.w	r0, r3, r0
 800744a:	9b04      	ldr	r3, [sp, #16]
 800744c:	3701      	adds	r7, #1
 800744e:	4303      	orrs	r3, r0
 8007450:	9304      	str	r3, [sp, #16]
 8007452:	7839      	ldrb	r1, [r7, #0]
 8007454:	2206      	movs	r2, #6
 8007456:	4827      	ldr	r0, [pc, #156]	; (80074f4 <_svfiprintf_r+0x1e4>)
 8007458:	1c7e      	adds	r6, r7, #1
 800745a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800745e:	f000 f9e4 	bl	800782a <memchr>
 8007462:	2800      	cmp	r0, #0
 8007464:	d038      	beq.n	80074d8 <_svfiprintf_r+0x1c8>
 8007466:	4b24      	ldr	r3, [pc, #144]	; (80074f8 <_svfiprintf_r+0x1e8>)
 8007468:	bb13      	cbnz	r3, 80074b0 <_svfiprintf_r+0x1a0>
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	3307      	adds	r3, #7
 800746e:	f023 0307 	bic.w	r3, r3, #7
 8007472:	3308      	adds	r3, #8
 8007474:	9303      	str	r3, [sp, #12]
 8007476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007478:	444b      	add	r3, r9
 800747a:	9309      	str	r3, [sp, #36]	; 0x24
 800747c:	e76d      	b.n	800735a <_svfiprintf_r+0x4a>
 800747e:	fb05 3202 	mla	r2, r5, r2, r3
 8007482:	2001      	movs	r0, #1
 8007484:	460f      	mov	r7, r1
 8007486:	e7a6      	b.n	80073d6 <_svfiprintf_r+0xc6>
 8007488:	2300      	movs	r3, #0
 800748a:	250a      	movs	r5, #10
 800748c:	4619      	mov	r1, r3
 800748e:	3701      	adds	r7, #1
 8007490:	9305      	str	r3, [sp, #20]
 8007492:	4638      	mov	r0, r7
 8007494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007498:	3a30      	subs	r2, #48	; 0x30
 800749a:	2a09      	cmp	r2, #9
 800749c:	d903      	bls.n	80074a6 <_svfiprintf_r+0x196>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0c8      	beq.n	8007434 <_svfiprintf_r+0x124>
 80074a2:	9105      	str	r1, [sp, #20]
 80074a4:	e7c6      	b.n	8007434 <_svfiprintf_r+0x124>
 80074a6:	fb05 2101 	mla	r1, r5, r1, r2
 80074aa:	2301      	movs	r3, #1
 80074ac:	4607      	mov	r7, r0
 80074ae:	e7f0      	b.n	8007492 <_svfiprintf_r+0x182>
 80074b0:	ab03      	add	r3, sp, #12
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	4622      	mov	r2, r4
 80074b6:	4b11      	ldr	r3, [pc, #68]	; (80074fc <_svfiprintf_r+0x1ec>)
 80074b8:	a904      	add	r1, sp, #16
 80074ba:	4640      	mov	r0, r8
 80074bc:	f3af 8000 	nop.w
 80074c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80074c4:	4681      	mov	r9, r0
 80074c6:	d1d6      	bne.n	8007476 <_svfiprintf_r+0x166>
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	065b      	lsls	r3, r3, #25
 80074cc:	f53f af35 	bmi.w	800733a <_svfiprintf_r+0x2a>
 80074d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074d2:	b01d      	add	sp, #116	; 0x74
 80074d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d8:	ab03      	add	r3, sp, #12
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	4622      	mov	r2, r4
 80074de:	4b07      	ldr	r3, [pc, #28]	; (80074fc <_svfiprintf_r+0x1ec>)
 80074e0:	a904      	add	r1, sp, #16
 80074e2:	4640      	mov	r0, r8
 80074e4:	f000 f882 	bl	80075ec <_printf_i>
 80074e8:	e7ea      	b.n	80074c0 <_svfiprintf_r+0x1b0>
 80074ea:	bf00      	nop
 80074ec:	08008ae8 	.word	0x08008ae8
 80074f0:	08008aee 	.word	0x08008aee
 80074f4:	08008af2 	.word	0x08008af2
 80074f8:	00000000 	.word	0x00000000
 80074fc:	0800725b 	.word	0x0800725b

08007500 <_printf_common>:
 8007500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007504:	4691      	mov	r9, r2
 8007506:	461f      	mov	r7, r3
 8007508:	688a      	ldr	r2, [r1, #8]
 800750a:	690b      	ldr	r3, [r1, #16]
 800750c:	4606      	mov	r6, r0
 800750e:	4293      	cmp	r3, r2
 8007510:	bfb8      	it	lt
 8007512:	4613      	movlt	r3, r2
 8007514:	f8c9 3000 	str.w	r3, [r9]
 8007518:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800751c:	460c      	mov	r4, r1
 800751e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007522:	b112      	cbz	r2, 800752a <_printf_common+0x2a>
 8007524:	3301      	adds	r3, #1
 8007526:	f8c9 3000 	str.w	r3, [r9]
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	0699      	lsls	r1, r3, #26
 800752e:	bf42      	ittt	mi
 8007530:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007534:	3302      	addmi	r3, #2
 8007536:	f8c9 3000 	strmi.w	r3, [r9]
 800753a:	6825      	ldr	r5, [r4, #0]
 800753c:	f015 0506 	ands.w	r5, r5, #6
 8007540:	d107      	bne.n	8007552 <_printf_common+0x52>
 8007542:	f104 0a19 	add.w	sl, r4, #25
 8007546:	68e3      	ldr	r3, [r4, #12]
 8007548:	f8d9 2000 	ldr.w	r2, [r9]
 800754c:	1a9b      	subs	r3, r3, r2
 800754e:	42ab      	cmp	r3, r5
 8007550:	dc29      	bgt.n	80075a6 <_printf_common+0xa6>
 8007552:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007556:	6822      	ldr	r2, [r4, #0]
 8007558:	3300      	adds	r3, #0
 800755a:	bf18      	it	ne
 800755c:	2301      	movne	r3, #1
 800755e:	0692      	lsls	r2, r2, #26
 8007560:	d42e      	bmi.n	80075c0 <_printf_common+0xc0>
 8007562:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007566:	4639      	mov	r1, r7
 8007568:	4630      	mov	r0, r6
 800756a:	47c0      	blx	r8
 800756c:	3001      	adds	r0, #1
 800756e:	d021      	beq.n	80075b4 <_printf_common+0xb4>
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	68e5      	ldr	r5, [r4, #12]
 8007574:	f003 0306 	and.w	r3, r3, #6
 8007578:	2b04      	cmp	r3, #4
 800757a:	bf18      	it	ne
 800757c:	2500      	movne	r5, #0
 800757e:	f8d9 2000 	ldr.w	r2, [r9]
 8007582:	f04f 0900 	mov.w	r9, #0
 8007586:	bf08      	it	eq
 8007588:	1aad      	subeq	r5, r5, r2
 800758a:	68a3      	ldr	r3, [r4, #8]
 800758c:	6922      	ldr	r2, [r4, #16]
 800758e:	bf08      	it	eq
 8007590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007594:	4293      	cmp	r3, r2
 8007596:	bfc4      	itt	gt
 8007598:	1a9b      	subgt	r3, r3, r2
 800759a:	18ed      	addgt	r5, r5, r3
 800759c:	341a      	adds	r4, #26
 800759e:	454d      	cmp	r5, r9
 80075a0:	d11a      	bne.n	80075d8 <_printf_common+0xd8>
 80075a2:	2000      	movs	r0, #0
 80075a4:	e008      	b.n	80075b8 <_printf_common+0xb8>
 80075a6:	2301      	movs	r3, #1
 80075a8:	4652      	mov	r2, sl
 80075aa:	4639      	mov	r1, r7
 80075ac:	4630      	mov	r0, r6
 80075ae:	47c0      	blx	r8
 80075b0:	3001      	adds	r0, #1
 80075b2:	d103      	bne.n	80075bc <_printf_common+0xbc>
 80075b4:	f04f 30ff 	mov.w	r0, #4294967295
 80075b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075bc:	3501      	adds	r5, #1
 80075be:	e7c2      	b.n	8007546 <_printf_common+0x46>
 80075c0:	2030      	movs	r0, #48	; 0x30
 80075c2:	18e1      	adds	r1, r4, r3
 80075c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075ce:	4422      	add	r2, r4
 80075d0:	3302      	adds	r3, #2
 80075d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075d6:	e7c4      	b.n	8007562 <_printf_common+0x62>
 80075d8:	2301      	movs	r3, #1
 80075da:	4622      	mov	r2, r4
 80075dc:	4639      	mov	r1, r7
 80075de:	4630      	mov	r0, r6
 80075e0:	47c0      	blx	r8
 80075e2:	3001      	adds	r0, #1
 80075e4:	d0e6      	beq.n	80075b4 <_printf_common+0xb4>
 80075e6:	f109 0901 	add.w	r9, r9, #1
 80075ea:	e7d8      	b.n	800759e <_printf_common+0x9e>

080075ec <_printf_i>:
 80075ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80075f4:	460c      	mov	r4, r1
 80075f6:	7e09      	ldrb	r1, [r1, #24]
 80075f8:	b085      	sub	sp, #20
 80075fa:	296e      	cmp	r1, #110	; 0x6e
 80075fc:	4617      	mov	r7, r2
 80075fe:	4606      	mov	r6, r0
 8007600:	4698      	mov	r8, r3
 8007602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007604:	f000 80b3 	beq.w	800776e <_printf_i+0x182>
 8007608:	d822      	bhi.n	8007650 <_printf_i+0x64>
 800760a:	2963      	cmp	r1, #99	; 0x63
 800760c:	d036      	beq.n	800767c <_printf_i+0x90>
 800760e:	d80a      	bhi.n	8007626 <_printf_i+0x3a>
 8007610:	2900      	cmp	r1, #0
 8007612:	f000 80b9 	beq.w	8007788 <_printf_i+0x19c>
 8007616:	2958      	cmp	r1, #88	; 0x58
 8007618:	f000 8083 	beq.w	8007722 <_printf_i+0x136>
 800761c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007620:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007624:	e032      	b.n	800768c <_printf_i+0xa0>
 8007626:	2964      	cmp	r1, #100	; 0x64
 8007628:	d001      	beq.n	800762e <_printf_i+0x42>
 800762a:	2969      	cmp	r1, #105	; 0x69
 800762c:	d1f6      	bne.n	800761c <_printf_i+0x30>
 800762e:	6820      	ldr	r0, [r4, #0]
 8007630:	6813      	ldr	r3, [r2, #0]
 8007632:	0605      	lsls	r5, r0, #24
 8007634:	f103 0104 	add.w	r1, r3, #4
 8007638:	d52a      	bpl.n	8007690 <_printf_i+0xa4>
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6011      	str	r1, [r2, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	da03      	bge.n	800764a <_printf_i+0x5e>
 8007642:	222d      	movs	r2, #45	; 0x2d
 8007644:	425b      	negs	r3, r3
 8007646:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800764a:	486f      	ldr	r0, [pc, #444]	; (8007808 <_printf_i+0x21c>)
 800764c:	220a      	movs	r2, #10
 800764e:	e039      	b.n	80076c4 <_printf_i+0xd8>
 8007650:	2973      	cmp	r1, #115	; 0x73
 8007652:	f000 809d 	beq.w	8007790 <_printf_i+0x1a4>
 8007656:	d808      	bhi.n	800766a <_printf_i+0x7e>
 8007658:	296f      	cmp	r1, #111	; 0x6f
 800765a:	d020      	beq.n	800769e <_printf_i+0xb2>
 800765c:	2970      	cmp	r1, #112	; 0x70
 800765e:	d1dd      	bne.n	800761c <_printf_i+0x30>
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	f043 0320 	orr.w	r3, r3, #32
 8007666:	6023      	str	r3, [r4, #0]
 8007668:	e003      	b.n	8007672 <_printf_i+0x86>
 800766a:	2975      	cmp	r1, #117	; 0x75
 800766c:	d017      	beq.n	800769e <_printf_i+0xb2>
 800766e:	2978      	cmp	r1, #120	; 0x78
 8007670:	d1d4      	bne.n	800761c <_printf_i+0x30>
 8007672:	2378      	movs	r3, #120	; 0x78
 8007674:	4865      	ldr	r0, [pc, #404]	; (800780c <_printf_i+0x220>)
 8007676:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800767a:	e055      	b.n	8007728 <_printf_i+0x13c>
 800767c:	6813      	ldr	r3, [r2, #0]
 800767e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007682:	1d19      	adds	r1, r3, #4
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6011      	str	r1, [r2, #0]
 8007688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800768c:	2301      	movs	r3, #1
 800768e:	e08c      	b.n	80077aa <_printf_i+0x1be>
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007696:	6011      	str	r1, [r2, #0]
 8007698:	bf18      	it	ne
 800769a:	b21b      	sxthne	r3, r3
 800769c:	e7cf      	b.n	800763e <_printf_i+0x52>
 800769e:	6813      	ldr	r3, [r2, #0]
 80076a0:	6825      	ldr	r5, [r4, #0]
 80076a2:	1d18      	adds	r0, r3, #4
 80076a4:	6010      	str	r0, [r2, #0]
 80076a6:	0628      	lsls	r0, r5, #24
 80076a8:	d501      	bpl.n	80076ae <_printf_i+0xc2>
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	e002      	b.n	80076b4 <_printf_i+0xc8>
 80076ae:	0668      	lsls	r0, r5, #25
 80076b0:	d5fb      	bpl.n	80076aa <_printf_i+0xbe>
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	296f      	cmp	r1, #111	; 0x6f
 80076b6:	bf14      	ite	ne
 80076b8:	220a      	movne	r2, #10
 80076ba:	2208      	moveq	r2, #8
 80076bc:	4852      	ldr	r0, [pc, #328]	; (8007808 <_printf_i+0x21c>)
 80076be:	2100      	movs	r1, #0
 80076c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076c4:	6865      	ldr	r5, [r4, #4]
 80076c6:	2d00      	cmp	r5, #0
 80076c8:	60a5      	str	r5, [r4, #8]
 80076ca:	f2c0 8095 	blt.w	80077f8 <_printf_i+0x20c>
 80076ce:	6821      	ldr	r1, [r4, #0]
 80076d0:	f021 0104 	bic.w	r1, r1, #4
 80076d4:	6021      	str	r1, [r4, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d13d      	bne.n	8007756 <_printf_i+0x16a>
 80076da:	2d00      	cmp	r5, #0
 80076dc:	f040 808e 	bne.w	80077fc <_printf_i+0x210>
 80076e0:	4665      	mov	r5, ip
 80076e2:	2a08      	cmp	r2, #8
 80076e4:	d10b      	bne.n	80076fe <_printf_i+0x112>
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	07db      	lsls	r3, r3, #31
 80076ea:	d508      	bpl.n	80076fe <_printf_i+0x112>
 80076ec:	6923      	ldr	r3, [r4, #16]
 80076ee:	6862      	ldr	r2, [r4, #4]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	bfde      	ittt	le
 80076f4:	2330      	movle	r3, #48	; 0x30
 80076f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076fe:	ebac 0305 	sub.w	r3, ip, r5
 8007702:	6123      	str	r3, [r4, #16]
 8007704:	f8cd 8000 	str.w	r8, [sp]
 8007708:	463b      	mov	r3, r7
 800770a:	aa03      	add	r2, sp, #12
 800770c:	4621      	mov	r1, r4
 800770e:	4630      	mov	r0, r6
 8007710:	f7ff fef6 	bl	8007500 <_printf_common>
 8007714:	3001      	adds	r0, #1
 8007716:	d14d      	bne.n	80077b4 <_printf_i+0x1c8>
 8007718:	f04f 30ff 	mov.w	r0, #4294967295
 800771c:	b005      	add	sp, #20
 800771e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007722:	4839      	ldr	r0, [pc, #228]	; (8007808 <_printf_i+0x21c>)
 8007724:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007728:	6813      	ldr	r3, [r2, #0]
 800772a:	6821      	ldr	r1, [r4, #0]
 800772c:	1d1d      	adds	r5, r3, #4
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6015      	str	r5, [r2, #0]
 8007732:	060a      	lsls	r2, r1, #24
 8007734:	d50b      	bpl.n	800774e <_printf_i+0x162>
 8007736:	07ca      	lsls	r2, r1, #31
 8007738:	bf44      	itt	mi
 800773a:	f041 0120 	orrmi.w	r1, r1, #32
 800773e:	6021      	strmi	r1, [r4, #0]
 8007740:	b91b      	cbnz	r3, 800774a <_printf_i+0x15e>
 8007742:	6822      	ldr	r2, [r4, #0]
 8007744:	f022 0220 	bic.w	r2, r2, #32
 8007748:	6022      	str	r2, [r4, #0]
 800774a:	2210      	movs	r2, #16
 800774c:	e7b7      	b.n	80076be <_printf_i+0xd2>
 800774e:	064d      	lsls	r5, r1, #25
 8007750:	bf48      	it	mi
 8007752:	b29b      	uxthmi	r3, r3
 8007754:	e7ef      	b.n	8007736 <_printf_i+0x14a>
 8007756:	4665      	mov	r5, ip
 8007758:	fbb3 f1f2 	udiv	r1, r3, r2
 800775c:	fb02 3311 	mls	r3, r2, r1, r3
 8007760:	5cc3      	ldrb	r3, [r0, r3]
 8007762:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007766:	460b      	mov	r3, r1
 8007768:	2900      	cmp	r1, #0
 800776a:	d1f5      	bne.n	8007758 <_printf_i+0x16c>
 800776c:	e7b9      	b.n	80076e2 <_printf_i+0xf6>
 800776e:	6813      	ldr	r3, [r2, #0]
 8007770:	6825      	ldr	r5, [r4, #0]
 8007772:	1d18      	adds	r0, r3, #4
 8007774:	6961      	ldr	r1, [r4, #20]
 8007776:	6010      	str	r0, [r2, #0]
 8007778:	0628      	lsls	r0, r5, #24
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	d501      	bpl.n	8007782 <_printf_i+0x196>
 800777e:	6019      	str	r1, [r3, #0]
 8007780:	e002      	b.n	8007788 <_printf_i+0x19c>
 8007782:	066a      	lsls	r2, r5, #25
 8007784:	d5fb      	bpl.n	800777e <_printf_i+0x192>
 8007786:	8019      	strh	r1, [r3, #0]
 8007788:	2300      	movs	r3, #0
 800778a:	4665      	mov	r5, ip
 800778c:	6123      	str	r3, [r4, #16]
 800778e:	e7b9      	b.n	8007704 <_printf_i+0x118>
 8007790:	6813      	ldr	r3, [r2, #0]
 8007792:	1d19      	adds	r1, r3, #4
 8007794:	6011      	str	r1, [r2, #0]
 8007796:	681d      	ldr	r5, [r3, #0]
 8007798:	6862      	ldr	r2, [r4, #4]
 800779a:	2100      	movs	r1, #0
 800779c:	4628      	mov	r0, r5
 800779e:	f000 f844 	bl	800782a <memchr>
 80077a2:	b108      	cbz	r0, 80077a8 <_printf_i+0x1bc>
 80077a4:	1b40      	subs	r0, r0, r5
 80077a6:	6060      	str	r0, [r4, #4]
 80077a8:	6863      	ldr	r3, [r4, #4]
 80077aa:	6123      	str	r3, [r4, #16]
 80077ac:	2300      	movs	r3, #0
 80077ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b2:	e7a7      	b.n	8007704 <_printf_i+0x118>
 80077b4:	6923      	ldr	r3, [r4, #16]
 80077b6:	462a      	mov	r2, r5
 80077b8:	4639      	mov	r1, r7
 80077ba:	4630      	mov	r0, r6
 80077bc:	47c0      	blx	r8
 80077be:	3001      	adds	r0, #1
 80077c0:	d0aa      	beq.n	8007718 <_printf_i+0x12c>
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	079b      	lsls	r3, r3, #30
 80077c6:	d413      	bmi.n	80077f0 <_printf_i+0x204>
 80077c8:	68e0      	ldr	r0, [r4, #12]
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	4298      	cmp	r0, r3
 80077ce:	bfb8      	it	lt
 80077d0:	4618      	movlt	r0, r3
 80077d2:	e7a3      	b.n	800771c <_printf_i+0x130>
 80077d4:	2301      	movs	r3, #1
 80077d6:	464a      	mov	r2, r9
 80077d8:	4639      	mov	r1, r7
 80077da:	4630      	mov	r0, r6
 80077dc:	47c0      	blx	r8
 80077de:	3001      	adds	r0, #1
 80077e0:	d09a      	beq.n	8007718 <_printf_i+0x12c>
 80077e2:	3501      	adds	r5, #1
 80077e4:	68e3      	ldr	r3, [r4, #12]
 80077e6:	9a03      	ldr	r2, [sp, #12]
 80077e8:	1a9b      	subs	r3, r3, r2
 80077ea:	42ab      	cmp	r3, r5
 80077ec:	dcf2      	bgt.n	80077d4 <_printf_i+0x1e8>
 80077ee:	e7eb      	b.n	80077c8 <_printf_i+0x1dc>
 80077f0:	2500      	movs	r5, #0
 80077f2:	f104 0919 	add.w	r9, r4, #25
 80077f6:	e7f5      	b.n	80077e4 <_printf_i+0x1f8>
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1ac      	bne.n	8007756 <_printf_i+0x16a>
 80077fc:	7803      	ldrb	r3, [r0, #0]
 80077fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007802:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007806:	e76c      	b.n	80076e2 <_printf_i+0xf6>
 8007808:	08008af9 	.word	0x08008af9
 800780c:	08008b0a 	.word	0x08008b0a

08007810 <__ascii_wctomb>:
 8007810:	b149      	cbz	r1, 8007826 <__ascii_wctomb+0x16>
 8007812:	2aff      	cmp	r2, #255	; 0xff
 8007814:	bf8b      	itete	hi
 8007816:	238a      	movhi	r3, #138	; 0x8a
 8007818:	700a      	strbls	r2, [r1, #0]
 800781a:	6003      	strhi	r3, [r0, #0]
 800781c:	2001      	movls	r0, #1
 800781e:	bf88      	it	hi
 8007820:	f04f 30ff 	movhi.w	r0, #4294967295
 8007824:	4770      	bx	lr
 8007826:	4608      	mov	r0, r1
 8007828:	4770      	bx	lr

0800782a <memchr>:
 800782a:	b510      	push	{r4, lr}
 800782c:	b2c9      	uxtb	r1, r1
 800782e:	4402      	add	r2, r0
 8007830:	4290      	cmp	r0, r2
 8007832:	4603      	mov	r3, r0
 8007834:	d101      	bne.n	800783a <memchr+0x10>
 8007836:	2300      	movs	r3, #0
 8007838:	e003      	b.n	8007842 <memchr+0x18>
 800783a:	781c      	ldrb	r4, [r3, #0]
 800783c:	3001      	adds	r0, #1
 800783e:	428c      	cmp	r4, r1
 8007840:	d1f6      	bne.n	8007830 <memchr+0x6>
 8007842:	4618      	mov	r0, r3
 8007844:	bd10      	pop	{r4, pc}

08007846 <memmove>:
 8007846:	4288      	cmp	r0, r1
 8007848:	b510      	push	{r4, lr}
 800784a:	eb01 0302 	add.w	r3, r1, r2
 800784e:	d807      	bhi.n	8007860 <memmove+0x1a>
 8007850:	1e42      	subs	r2, r0, #1
 8007852:	4299      	cmp	r1, r3
 8007854:	d00a      	beq.n	800786c <memmove+0x26>
 8007856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800785a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800785e:	e7f8      	b.n	8007852 <memmove+0xc>
 8007860:	4283      	cmp	r3, r0
 8007862:	d9f5      	bls.n	8007850 <memmove+0xa>
 8007864:	1881      	adds	r1, r0, r2
 8007866:	1ad2      	subs	r2, r2, r3
 8007868:	42d3      	cmn	r3, r2
 800786a:	d100      	bne.n	800786e <memmove+0x28>
 800786c:	bd10      	pop	{r4, pc}
 800786e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007872:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007876:	e7f7      	b.n	8007868 <memmove+0x22>

08007878 <_realloc_r>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	4607      	mov	r7, r0
 800787c:	4614      	mov	r4, r2
 800787e:	460e      	mov	r6, r1
 8007880:	b921      	cbnz	r1, 800788c <_realloc_r+0x14>
 8007882:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007886:	4611      	mov	r1, r2
 8007888:	f7ff bb10 	b.w	8006eac <_malloc_r>
 800788c:	b922      	cbnz	r2, 8007898 <_realloc_r+0x20>
 800788e:	f7ff fac1 	bl	8006e14 <_free_r>
 8007892:	4625      	mov	r5, r4
 8007894:	4628      	mov	r0, r5
 8007896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007898:	f000 f814 	bl	80078c4 <_malloc_usable_size_r>
 800789c:	42a0      	cmp	r0, r4
 800789e:	d20f      	bcs.n	80078c0 <_realloc_r+0x48>
 80078a0:	4621      	mov	r1, r4
 80078a2:	4638      	mov	r0, r7
 80078a4:	f7ff fb02 	bl	8006eac <_malloc_r>
 80078a8:	4605      	mov	r5, r0
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d0f2      	beq.n	8007894 <_realloc_r+0x1c>
 80078ae:	4631      	mov	r1, r6
 80078b0:	4622      	mov	r2, r4
 80078b2:	f7ff fa8d 	bl	8006dd0 <memcpy>
 80078b6:	4631      	mov	r1, r6
 80078b8:	4638      	mov	r0, r7
 80078ba:	f7ff faab 	bl	8006e14 <_free_r>
 80078be:	e7e9      	b.n	8007894 <_realloc_r+0x1c>
 80078c0:	4635      	mov	r5, r6
 80078c2:	e7e7      	b.n	8007894 <_realloc_r+0x1c>

080078c4 <_malloc_usable_size_r>:
 80078c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078c8:	1f18      	subs	r0, r3, #4
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	bfbc      	itt	lt
 80078ce:	580b      	ldrlt	r3, [r1, r0]
 80078d0:	18c0      	addlt	r0, r0, r3
 80078d2:	4770      	bx	lr

080078d4 <_init>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	bf00      	nop
 80078d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078da:	bc08      	pop	{r3}
 80078dc:	469e      	mov	lr, r3
 80078de:	4770      	bx	lr

080078e0 <_fini>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	bf00      	nop
 80078e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e6:	bc08      	pop	{r3}
 80078e8:	469e      	mov	lr, r3
 80078ea:	4770      	bx	lr
