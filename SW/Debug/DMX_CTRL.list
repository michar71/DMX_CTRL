
DMX_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000579c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000988  080058a8  080058a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000248  20000000  08006238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a10  20000248  08006480  00020248  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000c58  08006480  00020c58  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
  9 .debug_info   00021bd5  00000000  00000000  00020271  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005542  00000000  00000000  00041e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b982  00000000  00000000  00047388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001170  00000000  00000000  00052d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000019c0  00000000  00000000  00053e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009f3d  00000000  00000000  00055840  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005dcd  00000000  00000000  0005f77d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006554a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003610  00000000  00000000  000655c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000248 	.word	0x20000248
 8000128:	00000000 	.word	0x00000000
 800012c:	08005890 	.word	0x08005890

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000024c 	.word	0x2000024c
 8000148:	08005890 	.word	0x08005890

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_llsr>:
 800015c:	40d0      	lsrs	r0, r2
 800015e:	1c0b      	adds	r3, r1, #0
 8000160:	40d1      	lsrs	r1, r2
 8000162:	469c      	mov	ip, r3
 8000164:	3a20      	subs	r2, #32
 8000166:	40d3      	lsrs	r3, r2
 8000168:	4318      	orrs	r0, r3
 800016a:	4252      	negs	r2, r2
 800016c:	4663      	mov	r3, ip
 800016e:	4093      	lsls	r3, r2
 8000170:	4318      	orrs	r0, r3
 8000172:	4770      	bx	lr

08000174 <__aeabi_frsub>:
 8000174:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__addsf3>
 800017a:	bf00      	nop

0800017c <__aeabi_fsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000180 <__addsf3>:
 8000180:	0042      	lsls	r2, r0, #1
 8000182:	bf1f      	itttt	ne
 8000184:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000188:	ea92 0f03 	teqne	r2, r3
 800018c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000190:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000194:	d06a      	beq.n	800026c <__addsf3+0xec>
 8000196:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800019a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019e:	bfc1      	itttt	gt
 80001a0:	18d2      	addgt	r2, r2, r3
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	4048      	eorgt	r0, r1
 80001a6:	4041      	eorgt	r1, r0
 80001a8:	bfb8      	it	lt
 80001aa:	425b      	neglt	r3, r3
 80001ac:	2b19      	cmp	r3, #25
 80001ae:	bf88      	it	hi
 80001b0:	4770      	bxhi	lr
 80001b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001be:	bf18      	it	ne
 80001c0:	4240      	negne	r0, r0
 80001c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ce:	bf18      	it	ne
 80001d0:	4249      	negne	r1, r1
 80001d2:	ea92 0f03 	teq	r2, r3
 80001d6:	d03f      	beq.n	8000258 <__addsf3+0xd8>
 80001d8:	f1a2 0201 	sub.w	r2, r2, #1
 80001dc:	fa41 fc03 	asr.w	ip, r1, r3
 80001e0:	eb10 000c 	adds.w	r0, r0, ip
 80001e4:	f1c3 0320 	rsb	r3, r3, #32
 80001e8:	fa01 f103 	lsl.w	r1, r1, r3
 80001ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f0:	d502      	bpl.n	80001f8 <__addsf3+0x78>
 80001f2:	4249      	negs	r1, r1
 80001f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001fc:	d313      	bcc.n	8000226 <__addsf3+0xa6>
 80001fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000202:	d306      	bcc.n	8000212 <__addsf3+0x92>
 8000204:	0840      	lsrs	r0, r0, #1
 8000206:	ea4f 0131 	mov.w	r1, r1, rrx
 800020a:	f102 0201 	add.w	r2, r2, #1
 800020e:	2afe      	cmp	r2, #254	; 0xfe
 8000210:	d251      	bcs.n	80002b6 <__addsf3+0x136>
 8000212:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000216:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800021a:	bf08      	it	eq
 800021c:	f020 0001 	biceq.w	r0, r0, #1
 8000220:	ea40 0003 	orr.w	r0, r0, r3
 8000224:	4770      	bx	lr
 8000226:	0049      	lsls	r1, r1, #1
 8000228:	eb40 0000 	adc.w	r0, r0, r0
 800022c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000230:	f1a2 0201 	sub.w	r2, r2, #1
 8000234:	d1ed      	bne.n	8000212 <__addsf3+0x92>
 8000236:	fab0 fc80 	clz	ip, r0
 800023a:	f1ac 0c08 	sub.w	ip, ip, #8
 800023e:	ebb2 020c 	subs.w	r2, r2, ip
 8000242:	fa00 f00c 	lsl.w	r0, r0, ip
 8000246:	bfaa      	itet	ge
 8000248:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800024c:	4252      	neglt	r2, r2
 800024e:	4318      	orrge	r0, r3
 8000250:	bfbc      	itt	lt
 8000252:	40d0      	lsrlt	r0, r2
 8000254:	4318      	orrlt	r0, r3
 8000256:	4770      	bx	lr
 8000258:	f092 0f00 	teq	r2, #0
 800025c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000260:	bf06      	itte	eq
 8000262:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000266:	3201      	addeq	r2, #1
 8000268:	3b01      	subne	r3, #1
 800026a:	e7b5      	b.n	80001d8 <__addsf3+0x58>
 800026c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000270:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000274:	bf18      	it	ne
 8000276:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800027a:	d021      	beq.n	80002c0 <__addsf3+0x140>
 800027c:	ea92 0f03 	teq	r2, r3
 8000280:	d004      	beq.n	800028c <__addsf3+0x10c>
 8000282:	f092 0f00 	teq	r2, #0
 8000286:	bf08      	it	eq
 8000288:	4608      	moveq	r0, r1
 800028a:	4770      	bx	lr
 800028c:	ea90 0f01 	teq	r0, r1
 8000290:	bf1c      	itt	ne
 8000292:	2000      	movne	r0, #0
 8000294:	4770      	bxne	lr
 8000296:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800029a:	d104      	bne.n	80002a6 <__addsf3+0x126>
 800029c:	0040      	lsls	r0, r0, #1
 800029e:	bf28      	it	cs
 80002a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	4770      	bx	lr
 80002a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002aa:	bf3c      	itt	cc
 80002ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b0:	4770      	bxcc	lr
 80002b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002be:	4770      	bx	lr
 80002c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c4:	bf16      	itet	ne
 80002c6:	4608      	movne	r0, r1
 80002c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002cc:	4601      	movne	r1, r0
 80002ce:	0242      	lsls	r2, r0, #9
 80002d0:	bf06      	itte	eq
 80002d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d6:	ea90 0f01 	teqeq	r0, r1
 80002da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002de:	4770      	bx	lr

080002e0 <__aeabi_ui2f>:
 80002e0:	f04f 0300 	mov.w	r3, #0
 80002e4:	e004      	b.n	80002f0 <__aeabi_i2f+0x8>
 80002e6:	bf00      	nop

080002e8 <__aeabi_i2f>:
 80002e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002ec:	bf48      	it	mi
 80002ee:	4240      	negmi	r0, r0
 80002f0:	ea5f 0c00 	movs.w	ip, r0
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002fc:	4601      	mov	r1, r0
 80002fe:	f04f 0000 	mov.w	r0, #0
 8000302:	e01c      	b.n	800033e <__aeabi_l2f+0x2a>

08000304 <__aeabi_ul2f>:
 8000304:	ea50 0201 	orrs.w	r2, r0, r1
 8000308:	bf08      	it	eq
 800030a:	4770      	bxeq	lr
 800030c:	f04f 0300 	mov.w	r3, #0
 8000310:	e00a      	b.n	8000328 <__aeabi_l2f+0x14>
 8000312:	bf00      	nop

08000314 <__aeabi_l2f>:
 8000314:	ea50 0201 	orrs.w	r2, r0, r1
 8000318:	bf08      	it	eq
 800031a:	4770      	bxeq	lr
 800031c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000320:	d502      	bpl.n	8000328 <__aeabi_l2f+0x14>
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	ea5f 0c01 	movs.w	ip, r1
 800032c:	bf02      	ittt	eq
 800032e:	4684      	moveq	ip, r0
 8000330:	4601      	moveq	r1, r0
 8000332:	2000      	moveq	r0, #0
 8000334:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000338:	bf08      	it	eq
 800033a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000342:	fabc f28c 	clz	r2, ip
 8000346:	3a08      	subs	r2, #8
 8000348:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800034c:	db10      	blt.n	8000370 <__aeabi_l2f+0x5c>
 800034e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000352:	4463      	add	r3, ip
 8000354:	fa00 fc02 	lsl.w	ip, r0, r2
 8000358:	f1c2 0220 	rsb	r2, r2, #32
 800035c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000360:	fa20 f202 	lsr.w	r2, r0, r2
 8000364:	eb43 0002 	adc.w	r0, r3, r2
 8000368:	bf08      	it	eq
 800036a:	f020 0001 	biceq.w	r0, r0, #1
 800036e:	4770      	bx	lr
 8000370:	f102 0220 	add.w	r2, r2, #32
 8000374:	fa01 fc02 	lsl.w	ip, r1, r2
 8000378:	f1c2 0220 	rsb	r2, r2, #32
 800037c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000380:	fa21 f202 	lsr.w	r2, r1, r2
 8000384:	eb43 0002 	adc.w	r0, r3, r2
 8000388:	bf08      	it	eq
 800038a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038e:	4770      	bx	lr

08000390 <__aeabi_fmul>:
 8000390:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000394:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000398:	bf1e      	ittt	ne
 800039a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039e:	ea92 0f0c 	teqne	r2, ip
 80003a2:	ea93 0f0c 	teqne	r3, ip
 80003a6:	d06f      	beq.n	8000488 <__aeabi_fmul+0xf8>
 80003a8:	441a      	add	r2, r3
 80003aa:	ea80 0c01 	eor.w	ip, r0, r1
 80003ae:	0240      	lsls	r0, r0, #9
 80003b0:	bf18      	it	ne
 80003b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b6:	d01e      	beq.n	80003f6 <__aeabi_fmul+0x66>
 80003b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c4:	fba0 3101 	umull	r3, r1, r0, r1
 80003c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d0:	bf3e      	ittt	cc
 80003d2:	0049      	lslcc	r1, r1, #1
 80003d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d8:	005b      	lslcc	r3, r3, #1
 80003da:	ea40 0001 	orr.w	r0, r0, r1
 80003de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003e2:	2afd      	cmp	r2, #253	; 0xfd
 80003e4:	d81d      	bhi.n	8000422 <__aeabi_fmul+0x92>
 80003e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ee:	bf08      	it	eq
 80003f0:	f020 0001 	biceq.w	r0, r0, #1
 80003f4:	4770      	bx	lr
 80003f6:	f090 0f00 	teq	r0, #0
 80003fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fe:	bf08      	it	eq
 8000400:	0249      	lsleq	r1, r1, #9
 8000402:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000406:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800040a:	3a7f      	subs	r2, #127	; 0x7f
 800040c:	bfc2      	ittt	gt
 800040e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000412:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000416:	4770      	bxgt	lr
 8000418:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800041c:	f04f 0300 	mov.w	r3, #0
 8000420:	3a01      	subs	r2, #1
 8000422:	dc5d      	bgt.n	80004e0 <__aeabi_fmul+0x150>
 8000424:	f112 0f19 	cmn.w	r2, #25
 8000428:	bfdc      	itt	le
 800042a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042e:	4770      	bxle	lr
 8000430:	f1c2 0200 	rsb	r2, r2, #0
 8000434:	0041      	lsls	r1, r0, #1
 8000436:	fa21 f102 	lsr.w	r1, r1, r2
 800043a:	f1c2 0220 	rsb	r2, r2, #32
 800043e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000442:	ea5f 0031 	movs.w	r0, r1, rrx
 8000446:	f140 0000 	adc.w	r0, r0, #0
 800044a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044e:	bf08      	it	eq
 8000450:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000454:	4770      	bx	lr
 8000456:	f092 0f00 	teq	r2, #0
 800045a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0040      	lsleq	r0, r0, #1
 8000462:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000466:	3a01      	subeq	r2, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xce>
 800046a:	ea40 000c 	orr.w	r0, r0, ip
 800046e:	f093 0f00 	teq	r3, #0
 8000472:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000476:	bf02      	ittt	eq
 8000478:	0049      	lsleq	r1, r1, #1
 800047a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047e:	3b01      	subeq	r3, #1
 8000480:	d0f9      	beq.n	8000476 <__aeabi_fmul+0xe6>
 8000482:	ea41 010c 	orr.w	r1, r1, ip
 8000486:	e78f      	b.n	80003a8 <__aeabi_fmul+0x18>
 8000488:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800048c:	ea92 0f0c 	teq	r2, ip
 8000490:	bf18      	it	ne
 8000492:	ea93 0f0c 	teqne	r3, ip
 8000496:	d00a      	beq.n	80004ae <__aeabi_fmul+0x11e>
 8000498:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800049c:	bf18      	it	ne
 800049e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004a2:	d1d8      	bne.n	8000456 <__aeabi_fmul+0xc6>
 80004a4:	ea80 0001 	eor.w	r0, r0, r1
 80004a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ac:	4770      	bx	lr
 80004ae:	f090 0f00 	teq	r0, #0
 80004b2:	bf17      	itett	ne
 80004b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b8:	4608      	moveq	r0, r1
 80004ba:	f091 0f00 	teqne	r1, #0
 80004be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004c2:	d014      	beq.n	80004ee <__aeabi_fmul+0x15e>
 80004c4:	ea92 0f0c 	teq	r2, ip
 80004c8:	d101      	bne.n	80004ce <__aeabi_fmul+0x13e>
 80004ca:	0242      	lsls	r2, r0, #9
 80004cc:	d10f      	bne.n	80004ee <__aeabi_fmul+0x15e>
 80004ce:	ea93 0f0c 	teq	r3, ip
 80004d2:	d103      	bne.n	80004dc <__aeabi_fmul+0x14c>
 80004d4:	024b      	lsls	r3, r1, #9
 80004d6:	bf18      	it	ne
 80004d8:	4608      	movne	r0, r1
 80004da:	d108      	bne.n	80004ee <__aeabi_fmul+0x15e>
 80004dc:	ea80 0001 	eor.w	r0, r0, r1
 80004e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004ec:	4770      	bx	lr
 80004ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_fdiv>:
 80004f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000500:	bf1e      	ittt	ne
 8000502:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000506:	ea92 0f0c 	teqne	r2, ip
 800050a:	ea93 0f0c 	teqne	r3, ip
 800050e:	d069      	beq.n	80005e4 <__aeabi_fdiv+0xec>
 8000510:	eba2 0203 	sub.w	r2, r2, r3
 8000514:	ea80 0c01 	eor.w	ip, r0, r1
 8000518:	0249      	lsls	r1, r1, #9
 800051a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051e:	d037      	beq.n	8000590 <__aeabi_fdiv+0x98>
 8000520:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000524:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000528:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800052c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000530:	428b      	cmp	r3, r1
 8000532:	bf38      	it	cc
 8000534:	005b      	lslcc	r3, r3, #1
 8000536:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800053a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053e:	428b      	cmp	r3, r1
 8000540:	bf24      	itt	cs
 8000542:	1a5b      	subcs	r3, r3, r1
 8000544:	ea40 000c 	orrcs.w	r0, r0, ip
 8000548:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800054c:	bf24      	itt	cs
 800054e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000552:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000556:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800055a:	bf24      	itt	cs
 800055c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000560:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000564:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000568:	bf24      	itt	cs
 800056a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	bf18      	it	ne
 8000576:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800057a:	d1e0      	bne.n	800053e <__aeabi_fdiv+0x46>
 800057c:	2afd      	cmp	r2, #253	; 0xfd
 800057e:	f63f af50 	bhi.w	8000422 <__aeabi_fmul+0x92>
 8000582:	428b      	cmp	r3, r1
 8000584:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000588:	bf08      	it	eq
 800058a:	f020 0001 	biceq.w	r0, r0, #1
 800058e:	4770      	bx	lr
 8000590:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000594:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000598:	327f      	adds	r2, #127	; 0x7f
 800059a:	bfc2      	ittt	gt
 800059c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a4:	4770      	bxgt	lr
 80005a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005aa:	f04f 0300 	mov.w	r3, #0
 80005ae:	3a01      	subs	r2, #1
 80005b0:	e737      	b.n	8000422 <__aeabi_fmul+0x92>
 80005b2:	f092 0f00 	teq	r2, #0
 80005b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0040      	lsleq	r0, r0, #1
 80005be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005c2:	3a01      	subeq	r2, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xc2>
 80005c6:	ea40 000c 	orr.w	r0, r0, ip
 80005ca:	f093 0f00 	teq	r3, #0
 80005ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005d2:	bf02      	ittt	eq
 80005d4:	0049      	lsleq	r1, r1, #1
 80005d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005da:	3b01      	subeq	r3, #1
 80005dc:	d0f9      	beq.n	80005d2 <__aeabi_fdiv+0xda>
 80005de:	ea41 010c 	orr.w	r1, r1, ip
 80005e2:	e795      	b.n	8000510 <__aeabi_fdiv+0x18>
 80005e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e8:	ea92 0f0c 	teq	r2, ip
 80005ec:	d108      	bne.n	8000600 <__aeabi_fdiv+0x108>
 80005ee:	0242      	lsls	r2, r0, #9
 80005f0:	f47f af7d 	bne.w	80004ee <__aeabi_fmul+0x15e>
 80005f4:	ea93 0f0c 	teq	r3, ip
 80005f8:	f47f af70 	bne.w	80004dc <__aeabi_fmul+0x14c>
 80005fc:	4608      	mov	r0, r1
 80005fe:	e776      	b.n	80004ee <__aeabi_fmul+0x15e>
 8000600:	ea93 0f0c 	teq	r3, ip
 8000604:	d104      	bne.n	8000610 <__aeabi_fdiv+0x118>
 8000606:	024b      	lsls	r3, r1, #9
 8000608:	f43f af4c 	beq.w	80004a4 <__aeabi_fmul+0x114>
 800060c:	4608      	mov	r0, r1
 800060e:	e76e      	b.n	80004ee <__aeabi_fmul+0x15e>
 8000610:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000614:	bf18      	it	ne
 8000616:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800061a:	d1ca      	bne.n	80005b2 <__aeabi_fdiv+0xba>
 800061c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000620:	f47f af5c 	bne.w	80004dc <__aeabi_fmul+0x14c>
 8000624:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000628:	f47f af3c 	bne.w	80004a4 <__aeabi_fmul+0x114>
 800062c:	e75f      	b.n	80004ee <__aeabi_fmul+0x15e>
 800062e:	bf00      	nop

08000630 <__aeabi_f2iz>:
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000638:	d30f      	bcc.n	800065a <__aeabi_f2iz+0x2a>
 800063a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800063e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000642:	d90d      	bls.n	8000660 <__aeabi_f2iz+0x30>
 8000644:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000648:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800064c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000650:	fa23 f002 	lsr.w	r0, r3, r2
 8000654:	bf18      	it	ne
 8000656:	4240      	negne	r0, r0
 8000658:	4770      	bx	lr
 800065a:	f04f 0000 	mov.w	r0, #0
 800065e:	4770      	bx	lr
 8000660:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000664:	d101      	bne.n	800066a <__aeabi_f2iz+0x3a>
 8000666:	0242      	lsls	r2, r0, #9
 8000668:	d105      	bne.n	8000676 <__aeabi_f2iz+0x46>
 800066a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800066e:	bf08      	it	eq
 8000670:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000674:	4770      	bx	lr
 8000676:	f04f 0000 	mov.w	r0, #0
 800067a:	4770      	bx	lr

0800067c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800067c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <HAL_InitTick+0x3c>)
{
 8000680:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000682:	7818      	ldrb	r0, [r3, #0]
 8000684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000688:	fbb3 f3f0 	udiv	r3, r3, r0
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <HAL_InitTick+0x40>)
 800068e:	6810      	ldr	r0, [r2, #0]
 8000690:	fbb0 f0f3 	udiv	r0, r0, r3
 8000694:	f000 fa52 	bl	8000b3c <HAL_SYSTICK_Config>
 8000698:	4604      	mov	r4, r0
 800069a:	b958      	cbnz	r0, 80006b4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069c:	2d0f      	cmp	r5, #15
 800069e:	d809      	bhi.n	80006b4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a0:	4602      	mov	r2, r0
 80006a2:	4629      	mov	r1, r5
 80006a4:	f04f 30ff 	mov.w	r0, #4294967295
 80006a8:	f000 fa06 	bl	8000ab8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <HAL_InitTick+0x44>)
 80006ae:	4620      	mov	r0, r4
 80006b0:	601d      	str	r5, [r3, #0]
 80006b2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80006b4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006b6:	bd38      	pop	{r3, r4, r5, pc}
 80006b8:	20000000 	.word	0x20000000
 80006bc:	20000074 	.word	0x20000074
 80006c0:	20000004 	.word	0x20000004

080006c4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <HAL_Init+0x20>)
{
 80006c6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ca:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	f043 0310 	orr.w	r3, r3, #16
 80006d0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d2:	f000 f9df 	bl	8000a94 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff ffd0 	bl	800067c <HAL_InitTick>
  HAL_MspInit();
 80006dc:	f004 f840 	bl	8004760 <HAL_MspInit>
}
 80006e0:	2000      	movs	r0, #0
 80006e2:	bd08      	pop	{r3, pc}
 80006e4:	40022000 	.word	0x40022000

080006e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006e8:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <HAL_IncTick+0x10>)
 80006ea:	4b04      	ldr	r3, [pc, #16]	; (80006fc <HAL_IncTick+0x14>)
 80006ec:	6811      	ldr	r1, [r2, #0]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	440b      	add	r3, r1
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	200007ac 	.word	0x200007ac
 80006fc:	20000000 	.word	0x20000000

08000700 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000700:	4b01      	ldr	r3, [pc, #4]	; (8000708 <HAL_GetTick+0x8>)
 8000702:	6818      	ldr	r0, [r3, #0]
}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	200007ac 	.word	0x200007ac

0800070c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800070c:	2300      	movs	r3, #0
{ 
 800070e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000710:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000712:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000716:	2b01      	cmp	r3, #1
 8000718:	d074      	beq.n	8000804 <HAL_ADC_ConfigChannel+0xf8>
 800071a:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800071c:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800071e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000722:	2d06      	cmp	r5, #6
 8000724:	6802      	ldr	r2, [r0, #0]
 8000726:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800072a:	680c      	ldr	r4, [r1, #0]
 800072c:	d825      	bhi.n	800077a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800072e:	442b      	add	r3, r5
 8000730:	251f      	movs	r5, #31
 8000732:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000734:	3b05      	subs	r3, #5
 8000736:	409d      	lsls	r5, r3
 8000738:	ea26 0505 	bic.w	r5, r6, r5
 800073c:	fa04 f303 	lsl.w	r3, r4, r3
 8000740:	432b      	orrs	r3, r5
 8000742:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000744:	2c09      	cmp	r4, #9
 8000746:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800074a:	688d      	ldr	r5, [r1, #8]
 800074c:	d92f      	bls.n	80007ae <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800074e:	2607      	movs	r6, #7
 8000750:	4423      	add	r3, r4
 8000752:	68d1      	ldr	r1, [r2, #12]
 8000754:	3b1e      	subs	r3, #30
 8000756:	409e      	lsls	r6, r3
 8000758:	ea21 0106 	bic.w	r1, r1, r6
 800075c:	fa05 f303 	lsl.w	r3, r5, r3
 8000760:	430b      	orrs	r3, r1
 8000762:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000764:	f1a4 0310 	sub.w	r3, r4, #16
 8000768:	2b01      	cmp	r3, #1
 800076a:	d92b      	bls.n	80007c4 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800076c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800076e:	2200      	movs	r2, #0
 8000770:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000774:	4618      	mov	r0, r3
 8000776:	b002      	add	sp, #8
 8000778:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800077a:	2d0c      	cmp	r5, #12
 800077c:	d80b      	bhi.n	8000796 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800077e:	442b      	add	r3, r5
 8000780:	251f      	movs	r5, #31
 8000782:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000784:	3b23      	subs	r3, #35	; 0x23
 8000786:	409d      	lsls	r5, r3
 8000788:	ea26 0505 	bic.w	r5, r6, r5
 800078c:	fa04 f303 	lsl.w	r3, r4, r3
 8000790:	432b      	orrs	r3, r5
 8000792:	6313      	str	r3, [r2, #48]	; 0x30
 8000794:	e7d6      	b.n	8000744 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000796:	442b      	add	r3, r5
 8000798:	251f      	movs	r5, #31
 800079a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800079c:	3b41      	subs	r3, #65	; 0x41
 800079e:	409d      	lsls	r5, r3
 80007a0:	ea26 0505 	bic.w	r5, r6, r5
 80007a4:	fa04 f303 	lsl.w	r3, r4, r3
 80007a8:	432b      	orrs	r3, r5
 80007aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ac:	e7ca      	b.n	8000744 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80007ae:	2607      	movs	r6, #7
 80007b0:	6911      	ldr	r1, [r2, #16]
 80007b2:	4423      	add	r3, r4
 80007b4:	409e      	lsls	r6, r3
 80007b6:	ea21 0106 	bic.w	r1, r1, r6
 80007ba:	fa05 f303 	lsl.w	r3, r5, r3
 80007be:	430b      	orrs	r3, r1
 80007c0:	6113      	str	r3, [r2, #16]
 80007c2:	e7cf      	b.n	8000764 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80007c4:	4b10      	ldr	r3, [pc, #64]	; (8000808 <HAL_ADC_ConfigChannel+0xfc>)
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d116      	bne.n	80007f8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80007ca:	6893      	ldr	r3, [r2, #8]
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	d4cd      	bmi.n	800076c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80007d0:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80007d2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80007d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007d8:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80007da:	d1c7      	bne.n	800076c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <HAL_ADC_ConfigChannel+0x100>)
 80007de:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <HAL_ADC_ConfigChannel+0x104>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80007e6:	230a      	movs	r3, #10
 80007e8:	4353      	muls	r3, r2
            wait_loop_index--;
 80007ea:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80007ec:	9b01      	ldr	r3, [sp, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0bc      	beq.n	800076c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80007f2:	9b01      	ldr	r3, [sp, #4]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	e7f8      	b.n	80007ea <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80007fa:	f043 0320 	orr.w	r3, r3, #32
 80007fe:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000800:	2301      	movs	r3, #1
 8000802:	e7b4      	b.n	800076e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000804:	2302      	movs	r3, #2
 8000806:	e7b5      	b.n	8000774 <HAL_ADC_ConfigChannel+0x68>
 8000808:	40012400 	.word	0x40012400
 800080c:	20000074 	.word	0x20000074
 8000810:	000f4240 	.word	0x000f4240

08000814 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000814:	2300      	movs	r3, #0
{
 8000816:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000818:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800081a:	6803      	ldr	r3, [r0, #0]
{
 800081c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	07d2      	lsls	r2, r2, #31
 8000822:	d502      	bpl.n	800082a <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000824:	2000      	movs	r0, #0
}
 8000826:	b002      	add	sp, #8
 8000828:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800082a:	689a      	ldr	r2, [r3, #8]
 800082c:	f042 0201 	orr.w	r2, r2, #1
 8000830:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <ADC_Enable+0x68>)
 8000834:	4a12      	ldr	r2, [pc, #72]	; (8000880 <ADC_Enable+0x6c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800083c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800083e:	9b01      	ldr	r3, [sp, #4]
 8000840:	b9c3      	cbnz	r3, 8000874 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000842:	f7ff ff5d 	bl	8000700 <HAL_GetTick>
 8000846:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000848:	6823      	ldr	r3, [r4, #0]
 800084a:	689d      	ldr	r5, [r3, #8]
 800084c:	f015 0501 	ands.w	r5, r5, #1
 8000850:	d1e8      	bne.n	8000824 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000852:	f7ff ff55 	bl	8000700 <HAL_GetTick>
 8000856:	1b80      	subs	r0, r0, r6
 8000858:	2802      	cmp	r0, #2
 800085a:	d9f5      	bls.n	8000848 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800085c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800085e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000862:	f043 0310 	orr.w	r3, r3, #16
 8000866:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000868:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800086a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000872:	e7d8      	b.n	8000826 <ADC_Enable+0x12>
      wait_loop_index--;
 8000874:	9b01      	ldr	r3, [sp, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	e7e0      	b.n	800083c <ADC_Enable+0x28>
 800087a:	bf00      	nop
 800087c:	20000074 	.word	0x20000074
 8000880:	000f4240 	.word	0x000f4240

08000884 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 8000884:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000888:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800088a:	2b01      	cmp	r3, #1
{
 800088c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800088e:	d058      	beq.n	8000942 <HAL_ADC_Start_IT+0xbe>
 8000890:	2301      	movs	r3, #1
 8000892:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000896:	f7ff ffbd 	bl	8000814 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800089a:	2800      	cmp	r0, #0
 800089c:	d14d      	bne.n	800093a <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 800089e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008a0:	4a29      	ldr	r2, [pc, #164]	; (8000948 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 80008a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80008a6:	f023 0301 	bic.w	r3, r3, #1
 80008aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ae:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d104      	bne.n	80008c0 <HAL_ADC_Start_IT+0x3c>
 80008b6:	4925      	ldr	r1, [pc, #148]	; (800094c <HAL_ADC_Start_IT+0xc8>)
 80008b8:	684a      	ldr	r2, [r1, #4]
 80008ba:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80008be:	d132      	bne.n	8000926 <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80008c2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80008c6:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80008c8:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80008ca:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80008cc:	bf41      	itttt	mi
 80008ce:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80008d0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80008d4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80008d8:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80008dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80008e0:	bf1c      	itt	ne
 80008e2:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80008e4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80008e8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80008f0:	f06f 0202 	mvn.w	r2, #2
 80008f4:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	f042 0220 	orr.w	r2, r2, #32
 80008fc:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80008fe:	689a      	ldr	r2, [r3, #8]
 8000900:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000904:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000908:	d113      	bne.n	8000932 <HAL_ADC_Start_IT+0xae>
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_ADC_Start_IT+0xc4>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d105      	bne.n	800091c <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000910:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000914:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000916:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800091a:	d10a      	bne.n	8000932 <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800091c:	689a      	ldr	r2, [r3, #8]
 800091e:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000926:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000928:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800092c:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800092e:	684a      	ldr	r2, [r1, #4]
 8000930:	e7cb      	b.n	80008ca <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000938:	e7f3      	b.n	8000922 <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 800093a:	2300      	movs	r3, #0
 800093c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000940:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000942:	2002      	movs	r0, #2
}
 8000944:	bd10      	pop	{r4, pc}
 8000946:	bf00      	nop
 8000948:	40012800 	.word	0x40012800
 800094c:	40012400 	.word	0x40012400

08000950 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000950:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000952:	6803      	ldr	r3, [r0, #0]
{
 8000954:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	07d2      	lsls	r2, r2, #31
 800095a:	d401      	bmi.n	8000960 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800095c:	2000      	movs	r0, #0
 800095e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	f022 0201 	bic.w	r2, r2, #1
 8000966:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000968:	f7ff feca 	bl	8000700 <HAL_GetTick>
 800096c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800096e:	6823      	ldr	r3, [r4, #0]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	07db      	lsls	r3, r3, #31
 8000974:	d5f2      	bpl.n	800095c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000976:	f7ff fec3 	bl	8000700 <HAL_GetTick>
 800097a:	1b40      	subs	r0, r0, r5
 800097c:	2802      	cmp	r0, #2
 800097e:	d9f6      	bls.n	800096e <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000980:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000982:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000984:	f043 0310 	orr.w	r3, r3, #16
 8000988:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800098a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000992:	bd38      	pop	{r3, r4, r5, pc}

08000994 <HAL_ADC_Init>:
{
 8000994:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000996:	4604      	mov	r4, r0
 8000998:	2800      	cmp	r0, #0
 800099a:	d071      	beq.n	8000a80 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800099c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800099e:	b923      	cbnz	r3, 80009aa <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80009a0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80009a2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80009a6:	f003 fefd 	bl	80047a4 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009aa:	4620      	mov	r0, r4
 80009ac:	f7ff ffd0 	bl	8000950 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009b2:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80009b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009b8:	d164      	bne.n	8000a84 <HAL_ADC_Init+0xf0>
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d162      	bne.n	8000a84 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009be:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80009c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009c4:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80009c6:	f023 0302 	bic.w	r3, r3, #2
 80009ca:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009ce:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009d0:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80009d2:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009d4:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009d6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009da:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009de:	d038      	beq.n	8000a52 <HAL_ADC_Init+0xbe>
 80009e0:	2901      	cmp	r1, #1
 80009e2:	bf14      	ite	ne
 80009e4:	4606      	movne	r6, r0
 80009e6:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009ea:	7d25      	ldrb	r5, [r4, #20]
 80009ec:	2d01      	cmp	r5, #1
 80009ee:	d107      	bne.n	8000a00 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d130      	bne.n	8000a56 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009f4:	69a3      	ldr	r3, [r4, #24]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80009fc:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000a00:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a02:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000a06:	685d      	ldr	r5, [r3, #4]
 8000a08:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000a0c:	ea45 0506 	orr.w	r5, r5, r6
 8000a10:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000a12:	689e      	ldr	r6, [r3, #8]
 8000a14:	4d1d      	ldr	r5, [pc, #116]	; (8000a8c <HAL_ADC_Init+0xf8>)
 8000a16:	ea05 0506 	and.w	r5, r5, r6
 8000a1a:	ea45 0502 	orr.w	r5, r5, r2
 8000a1e:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a20:	d001      	beq.n	8000a26 <HAL_ADC_Init+0x92>
 8000a22:	2901      	cmp	r1, #1
 8000a24:	d120      	bne.n	8000a68 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a26:	6921      	ldr	r1, [r4, #16]
 8000a28:	3901      	subs	r1, #1
 8000a2a:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000a2c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000a2e:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000a32:	4329      	orrs	r1, r5
 8000a34:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a36:	6899      	ldr	r1, [r3, #8]
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_ADC_Init+0xfc>)
 8000a3a:	400b      	ands	r3, r1
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d115      	bne.n	8000a6c <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000a40:	2300      	movs	r3, #0
 8000a42:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000a44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a46:	f023 0303 	bic.w	r3, r3, #3
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a52:	460e      	mov	r6, r1
 8000a54:	e7c9      	b.n	80009ea <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a58:	f043 0320 	orr.w	r3, r3, #32
 8000a5c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a66:	e7cb      	b.n	8000a00 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e7df      	b.n	8000a2c <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000a6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a6e:	f023 0312 	bic.w	r3, r3, #18
 8000a72:	f043 0310 	orr.w	r3, r3, #16
 8000a76:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000a80:	2001      	movs	r0, #1
}
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a84:	f043 0310 	orr.w	r3, r3, #16
 8000a88:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a8a:	e7f9      	b.n	8000a80 <HAL_ADC_Init+0xec>
 8000a8c:	ffe1f7fd 	.word	0xffe1f7fd
 8000a90:	ff1f0efe 	.word	0xff1f0efe

08000a94 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a96:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a9a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000aa2:	041b      	lsls	r3, r3, #16
 8000aa4:	0c1b      	lsrs	r3, r3, #16
 8000aa6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000aae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ab0:	60d3      	str	r3, [r2, #12]
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aba:	b530      	push	{r4, r5, lr}
 8000abc:	68dc      	ldr	r4, [r3, #12]
 8000abe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	bf28      	it	cs
 8000acc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad4:	bf98      	it	ls
 8000ad6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	fa05 f303 	lsl.w	r3, r5, r3
 8000adc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae0:	bf88      	it	hi
 8000ae2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4019      	ands	r1, r3
 8000ae6:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	fa05 f404 	lsl.w	r4, r5, r4
 8000aec:	3c01      	subs	r4, #1
 8000aee:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000af0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af2:	ea42 0201 	orr.w	r2, r2, r1
 8000af6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	bfa9      	itett	ge
 8000afc:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	4b06      	ldrlt	r3, [pc, #24]	; (8000b1c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	b2d2      	uxtbge	r2, r2
 8000b04:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	bfbb      	ittet	lt
 8000b0a:	f000 000f 	andlt.w	r0, r0, #15
 8000b0e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	541a      	strblt	r2, [r3, r0]
 8000b16:	bd30      	pop	{r4, r5, pc}
 8000b18:	e000ed00 	.word	0xe000ed00
 8000b1c:	e000ed14 	.word	0xe000ed14

08000b20 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b20:	2800      	cmp	r0, #0
 8000b22:	db08      	blt.n	8000b36 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b24:	2301      	movs	r3, #1
 8000b26:	0942      	lsrs	r2, r0, #5
 8000b28:	f000 001f 	and.w	r0, r0, #31
 8000b2c:	fa03 f000 	lsl.w	r0, r3, r0
 8000b30:	4b01      	ldr	r3, [pc, #4]	; (8000b38 <HAL_NVIC_EnableIRQ+0x18>)
 8000b32:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000b36:	4770      	bx	lr
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b42:	d20a      	bcs.n	8000b5a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b44:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b50:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b52:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b54:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b5a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e010 	.word	0xe000e010
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b68:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000b6c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d003      	beq.n	8000b7a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b72:	2304      	movs	r3, #4
 8000b74:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b76:	2001      	movs	r0, #1
 8000b78:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b7a:	6803      	ldr	r3, [r0, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	f022 020e 	bic.w	r2, r2, #14
 8000b82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	f022 0201 	bic.w	r2, r2, #1
 8000b8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b8c:	4a18      	ldr	r2, [pc, #96]	; (8000bf0 <HAL_DMA_Abort_IT+0x88>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d01f      	beq.n	8000bd2 <HAL_DMA_Abort_IT+0x6a>
 8000b92:	3214      	adds	r2, #20
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d01e      	beq.n	8000bd6 <HAL_DMA_Abort_IT+0x6e>
 8000b98:	3214      	adds	r2, #20
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d01d      	beq.n	8000bda <HAL_DMA_Abort_IT+0x72>
 8000b9e:	3214      	adds	r2, #20
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d01d      	beq.n	8000be0 <HAL_DMA_Abort_IT+0x78>
 8000ba4:	3214      	adds	r2, #20
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d01d      	beq.n	8000be6 <HAL_DMA_Abort_IT+0x7e>
 8000baa:	3214      	adds	r2, #20
 8000bac:	4293      	cmp	r3, r2
 8000bae:	bf0c      	ite	eq
 8000bb0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000bb4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bba:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bbc:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bc4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000bc6:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000bca:	b17b      	cbz	r3, 8000bec <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000bcc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000bce:	4620      	mov	r0, r4
 8000bd0:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e7f0      	b.n	8000bb8 <HAL_DMA_Abort_IT+0x50>
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	e7ee      	b.n	8000bb8 <HAL_DMA_Abort_IT+0x50>
 8000bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bde:	e7eb      	b.n	8000bb8 <HAL_DMA_Abort_IT+0x50>
 8000be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be4:	e7e8      	b.n	8000bb8 <HAL_DMA_Abort_IT+0x50>
 8000be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bea:	e7e5      	b.n	8000bb8 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000bec:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000bee:	bd10      	pop	{r4, pc}
 8000bf0:	40020008 	.word	0x40020008
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000bf8:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <FLASH_SetErrorCode+0x48>)
 8000bfa:	68d3      	ldr	r3, [r2, #12]
 8000bfc:	f013 0310 	ands.w	r3, r3, #16
 8000c00:	d005      	beq.n	8000c0e <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000c02:	4910      	ldr	r1, [pc, #64]	; (8000c44 <FLASH_SetErrorCode+0x4c>)
 8000c04:	69cb      	ldr	r3, [r1, #28]
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000c0c:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000c0e:	68d2      	ldr	r2, [r2, #12]
 8000c10:	0750      	lsls	r0, r2, #29
 8000c12:	d506      	bpl.n	8000c22 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000c14:	490b      	ldr	r1, [pc, #44]	; (8000c44 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000c16:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000c1a:	69ca      	ldr	r2, [r1, #28]
 8000c1c:	f042 0201 	orr.w	r2, r2, #1
 8000c20:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <FLASH_SetErrorCode+0x48>)
 8000c24:	69d1      	ldr	r1, [r2, #28]
 8000c26:	07c9      	lsls	r1, r1, #31
 8000c28:	d508      	bpl.n	8000c3c <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <FLASH_SetErrorCode+0x4c>)
 8000c2c:	69c1      	ldr	r1, [r0, #28]
 8000c2e:	f041 0104 	orr.w	r1, r1, #4
 8000c32:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000c34:	69d1      	ldr	r1, [r2, #28]
 8000c36:	f021 0101 	bic.w	r1, r1, #1
 8000c3a:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000c3c:	60d3      	str	r3, [r2, #12]
 8000c3e:	4770      	bx	lr
 8000c40:	40022000 	.word	0x40022000
 8000c44:	200007b0 	.word	0x200007b0

08000c48 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_FLASH_Unlock+0x1c>)
 8000c4a:	6918      	ldr	r0, [r3, #16]
 8000c4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c50:	d007      	beq.n	8000c62 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <HAL_FLASH_Unlock+0x20>)
 8000c54:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000c56:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000c5a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c5c:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000c5e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000c62:	4770      	bx	lr
 8000c64:	40022000 	.word	0x40022000
 8000c68:	45670123 	.word	0x45670123

08000c6c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000c6c:	4a03      	ldr	r2, [pc, #12]	; (8000c7c <HAL_FLASH_Lock+0x10>)
}
 8000c6e:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000c70:	6913      	ldr	r3, [r2, #16]
 8000c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c76:	6113      	str	r3, [r2, #16]
}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40022000 	.word	0x40022000

08000c80 <FLASH_WaitForLastOperation>:
{
 8000c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c82:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8000c84:	f7ff fd3c 	bl	8000700 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c88:	4c11      	ldr	r4, [pc, #68]	; (8000cd0 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8000c8a:	4607      	mov	r7, r0
 8000c8c:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c8e:	68e3      	ldr	r3, [r4, #12]
 8000c90:	07d8      	lsls	r0, r3, #31
 8000c92:	d412      	bmi.n	8000cba <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000c94:	68e3      	ldr	r3, [r4, #12]
 8000c96:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000c98:	bf44      	itt	mi
 8000c9a:	2320      	movmi	r3, #32
 8000c9c:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000c9e:	68eb      	ldr	r3, [r5, #12]
 8000ca0:	06da      	lsls	r2, r3, #27
 8000ca2:	d406      	bmi.n	8000cb2 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000ca4:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ca6:	07db      	lsls	r3, r3, #31
 8000ca8:	d403      	bmi.n	8000cb2 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000caa:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000cac:	f010 0004 	ands.w	r0, r0, #4
 8000cb0:	d002      	beq.n	8000cb8 <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 8000cb2:	f7ff ffa1 	bl	8000bf8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000cb6:	2001      	movs	r0, #1
}
 8000cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000cba:	1c73      	adds	r3, r6, #1
 8000cbc:	d0e7      	beq.n	8000c8e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000cbe:	b90e      	cbnz	r6, 8000cc4 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000cc4:	f7ff fd1c 	bl	8000700 <HAL_GetTick>
 8000cc8:	1bc0      	subs	r0, r0, r7
 8000cca:	4286      	cmp	r6, r0
 8000ccc:	d2df      	bcs.n	8000c8e <FLASH_WaitForLastOperation+0xe>
 8000cce:	e7f7      	b.n	8000cc0 <FLASH_WaitForLastOperation+0x40>
 8000cd0:	40022000 	.word	0x40022000

08000cd4 <HAL_FLASH_Program>:
{
 8000cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8000cd8:	4c1f      	ldr	r4, [pc, #124]	; (8000d58 <HAL_FLASH_Program+0x84>)
{
 8000cda:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8000cdc:	7e23      	ldrb	r3, [r4, #24]
{
 8000cde:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000ce0:	2b01      	cmp	r3, #1
{
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8000ce6:	d033      	beq.n	8000d50 <HAL_FLASH_Program+0x7c>
 8000ce8:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cea:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000cee:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cf0:	f7ff ffc6 	bl	8000c80 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000cf4:	bb40      	cbnz	r0, 8000d48 <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000cf6:	2d01      	cmp	r5, #1
 8000cf8:	d003      	beq.n	8000d02 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8000cfa:	2d02      	cmp	r5, #2
 8000cfc:	bf0c      	ite	eq
 8000cfe:	2502      	moveq	r5, #2
 8000d00:	2504      	movne	r5, #4
 8000d02:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d04:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d06:	f8df b054 	ldr.w	fp, [pc, #84]	; 8000d5c <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d0a:	0132      	lsls	r2, r6, #4
 8000d0c:	4640      	mov	r0, r8
 8000d0e:	4649      	mov	r1, r9
 8000d10:	f7ff fa24 	bl	800015c <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d14:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d18:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d1c:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 8000d26:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d2a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d2e:	f7ff ffa7 	bl	8000c80 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000d32:	f8db 3010 	ldr.w	r3, [fp, #16]
 8000d36:	f023 0301 	bic.w	r3, r3, #1
 8000d3a:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 8000d3e:	b918      	cbnz	r0, 8000d48 <HAL_FLASH_Program+0x74>
 8000d40:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 8000d42:	b2f3      	uxtb	r3, r6
 8000d44:	429d      	cmp	r5, r3
 8000d46:	d8e0      	bhi.n	8000d0a <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 8000d48:	2300      	movs	r3, #0
 8000d4a:	7623      	strb	r3, [r4, #24]
  return status;
 8000d4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000d50:	2002      	movs	r0, #2
}
 8000d52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d56:	bf00      	nop
 8000d58:	200007b0 	.word	0x200007b0
 8000d5c:	40022000 	.word	0x40022000

08000d60 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d60:	2200      	movs	r2, #0
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <FLASH_MassErase.isra.0+0x1c>)
 8000d64:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <FLASH_MassErase.isra.0+0x20>)
 8000d68:	691a      	ldr	r2, [r3, #16]
 8000d6a:	f042 0204 	orr.w	r2, r2, #4
 8000d6e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000d70:	691a      	ldr	r2, [r3, #16]
 8000d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d76:	611a      	str	r2, [r3, #16]
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	200007b0 	.word	0x200007b0
 8000d80:	40022000 	.word	0x40022000

08000d84 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d84:	2200      	movs	r2, #0
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <FLASH_PageErase+0x1c>)
 8000d88:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <FLASH_PageErase+0x20>)
 8000d8c:	691a      	ldr	r2, [r3, #16]
 8000d8e:	f042 0202 	orr.w	r2, r2, #2
 8000d92:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000d94:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000d96:	691a      	ldr	r2, [r3, #16]
 8000d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	4770      	bx	lr
 8000da0:	200007b0 	.word	0x200007b0
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_FLASHEx_Erase>:
{
 8000da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000dac:	4d23      	ldr	r5, [pc, #140]	; (8000e3c <HAL_FLASHEx_Erase+0x94>)
{
 8000dae:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 8000db0:	7e2b      	ldrb	r3, [r5, #24]
{
 8000db2:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d03d      	beq.n	8000e34 <HAL_FLASHEx_Erase+0x8c>
 8000db8:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000dba:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 8000dbc:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000dbe:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000dc0:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000dc4:	d113      	bne.n	8000dee <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000dc6:	f7ff ff5b 	bl	8000c80 <FLASH_WaitForLastOperation>
 8000dca:	b120      	cbz	r0, 8000dd6 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000dcc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000dce:	2300      	movs	r3, #0
 8000dd0:	762b      	strb	r3, [r5, #24]
  return status;
 8000dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 8000dd6:	f7ff ffc3 	bl	8000d60 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000dda:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000dde:	f7ff ff4f 	bl	8000c80 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000de2:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <HAL_FLASHEx_Erase+0x98>)
 8000de4:	6913      	ldr	r3, [r2, #16]
 8000de6:	f023 0304 	bic.w	r3, r3, #4
 8000dea:	6113      	str	r3, [r2, #16]
 8000dec:	e7ef      	b.n	8000dce <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000dee:	f7ff ff47 	bl	8000c80 <FLASH_WaitForLastOperation>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d1ea      	bne.n	8000dcc <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000dfe:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8000e00:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000e02:	4c0f      	ldr	r4, [pc, #60]	; (8000e40 <HAL_FLASHEx_Erase+0x98>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8000e0c:	429e      	cmp	r6, r3
 8000e0e:	d2de      	bcs.n	8000dce <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8000e10:	4630      	mov	r0, r6
 8000e12:	f7ff ffb7 	bl	8000d84 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e1a:	f7ff ff31 	bl	8000c80 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000e1e:	6923      	ldr	r3, [r4, #16]
 8000e20:	f023 0302 	bic.w	r3, r3, #2
 8000e24:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000e26:	b110      	cbz	r0, 8000e2e <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8000e28:	f8c8 6000 	str.w	r6, [r8]
            break;
 8000e2c:	e7cf      	b.n	8000dce <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8000e2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e32:	e7e7      	b.n	8000e04 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8000e34:	2002      	movs	r0, #2
}
 8000e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200007b0 	.word	0x200007b0
 8000e40:	40022000 	.word	0x40022000

08000e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e48:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000e4a:	4626      	mov	r6, r4
 8000e4c:	4b66      	ldr	r3, [pc, #408]	; (8000fe8 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e4e:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000ff8 <HAL_GPIO_Init+0x1b4>
 8000e52:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000ffc <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e56:	680a      	ldr	r2, [r1, #0]
 8000e58:	fa32 f506 	lsrs.w	r5, r2, r6
 8000e5c:	d102      	bne.n	8000e64 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000e5e:	b003      	add	sp, #12
 8000e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000e64:	f04f 0801 	mov.w	r8, #1
 8000e68:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000e70:	4590      	cmp	r8, r2
 8000e72:	d17f      	bne.n	8000f74 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000e74:	684d      	ldr	r5, [r1, #4]
 8000e76:	2d12      	cmp	r5, #18
 8000e78:	f000 80aa 	beq.w	8000fd0 <HAL_GPIO_Init+0x18c>
 8000e7c:	f200 8083 	bhi.w	8000f86 <HAL_GPIO_Init+0x142>
 8000e80:	2d02      	cmp	r5, #2
 8000e82:	f000 80a2 	beq.w	8000fca <HAL_GPIO_Init+0x186>
 8000e86:	d877      	bhi.n	8000f78 <HAL_GPIO_Init+0x134>
 8000e88:	2d00      	cmp	r5, #0
 8000e8a:	f000 8089 	beq.w	8000fa0 <HAL_GPIO_Init+0x15c>
 8000e8e:	2d01      	cmp	r5, #1
 8000e90:	f000 8099 	beq.w	8000fc6 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e94:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e98:	2aff      	cmp	r2, #255	; 0xff
 8000e9a:	bf93      	iteet	ls
 8000e9c:	4682      	movls	sl, r0
 8000e9e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000ea2:	3d08      	subhi	r5, #8
 8000ea4:	f8d0 b000 	ldrls.w	fp, [r0]
 8000ea8:	bf92      	itee	ls
 8000eaa:	00b5      	lslls	r5, r6, #2
 8000eac:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000eb0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eb2:	fa09 f805 	lsl.w	r8, r9, r5
 8000eb6:	ea2b 0808 	bic.w	r8, fp, r8
 8000eba:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ebe:	bf88      	it	hi
 8000ec0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ec4:	ea48 0505 	orr.w	r5, r8, r5
 8000ec8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ecc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000ed0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000ed4:	d04e      	beq.n	8000f74 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed6:	4d45      	ldr	r5, [pc, #276]	; (8000fec <HAL_GPIO_Init+0x1a8>)
 8000ed8:	4f44      	ldr	r7, [pc, #272]	; (8000fec <HAL_GPIO_Init+0x1a8>)
 8000eda:	69ad      	ldr	r5, [r5, #24]
 8000edc:	f026 0803 	bic.w	r8, r6, #3
 8000ee0:	f045 0501 	orr.w	r5, r5, #1
 8000ee4:	61bd      	str	r5, [r7, #24]
 8000ee6:	69bd      	ldr	r5, [r7, #24]
 8000ee8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000eec:	f005 0501 	and.w	r5, r5, #1
 8000ef0:	9501      	str	r5, [sp, #4]
 8000ef2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ef6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000efa:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000efc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000f00:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f04:	fa09 f90b 	lsl.w	r9, r9, fp
 8000f08:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f0c:	4d38      	ldr	r5, [pc, #224]	; (8000ff0 <HAL_GPIO_Init+0x1ac>)
 8000f0e:	42a8      	cmp	r0, r5
 8000f10:	d063      	beq.n	8000fda <HAL_GPIO_Init+0x196>
 8000f12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f16:	42a8      	cmp	r0, r5
 8000f18:	d061      	beq.n	8000fde <HAL_GPIO_Init+0x19a>
 8000f1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f1e:	42a8      	cmp	r0, r5
 8000f20:	d05f      	beq.n	8000fe2 <HAL_GPIO_Init+0x19e>
 8000f22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f26:	42a8      	cmp	r0, r5
 8000f28:	bf0c      	ite	eq
 8000f2a:	2503      	moveq	r5, #3
 8000f2c:	2504      	movne	r5, #4
 8000f2e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f32:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000f36:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000f3a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f3c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000f40:	bf14      	ite	ne
 8000f42:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f44:	4395      	biceq	r5, r2
 8000f46:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000f48:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f4a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000f4e:	bf14      	ite	ne
 8000f50:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f52:	4395      	biceq	r5, r2
 8000f54:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f56:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f58:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f5c:	bf14      	ite	ne
 8000f5e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f60:	4395      	biceq	r5, r2
 8000f62:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f64:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f66:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f6a:	bf14      	ite	ne
 8000f6c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f6e:	ea25 0202 	biceq.w	r2, r5, r2
 8000f72:	60da      	str	r2, [r3, #12]
	position++;
 8000f74:	3601      	adds	r6, #1
 8000f76:	e76e      	b.n	8000e56 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000f78:	2d03      	cmp	r5, #3
 8000f7a:	d022      	beq.n	8000fc2 <HAL_GPIO_Init+0x17e>
 8000f7c:	2d11      	cmp	r5, #17
 8000f7e:	d189      	bne.n	8000e94 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f80:	68cc      	ldr	r4, [r1, #12]
 8000f82:	3404      	adds	r4, #4
          break;
 8000f84:	e786      	b.n	8000e94 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000f86:	4f1b      	ldr	r7, [pc, #108]	; (8000ff4 <HAL_GPIO_Init+0x1b0>)
 8000f88:	42bd      	cmp	r5, r7
 8000f8a:	d009      	beq.n	8000fa0 <HAL_GPIO_Init+0x15c>
 8000f8c:	d812      	bhi.n	8000fb4 <HAL_GPIO_Init+0x170>
 8000f8e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001000 <HAL_GPIO_Init+0x1bc>
 8000f92:	454d      	cmp	r5, r9
 8000f94:	d004      	beq.n	8000fa0 <HAL_GPIO_Init+0x15c>
 8000f96:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000f9a:	454d      	cmp	r5, r9
 8000f9c:	f47f af7a 	bne.w	8000e94 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fa0:	688c      	ldr	r4, [r1, #8]
 8000fa2:	b1c4      	cbz	r4, 8000fd6 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fa4:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000fa6:	bf0c      	ite	eq
 8000fa8:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000fac:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb0:	2408      	movs	r4, #8
 8000fb2:	e76f      	b.n	8000e94 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000fb4:	4575      	cmp	r5, lr
 8000fb6:	d0f3      	beq.n	8000fa0 <HAL_GPIO_Init+0x15c>
 8000fb8:	4565      	cmp	r5, ip
 8000fba:	d0f1      	beq.n	8000fa0 <HAL_GPIO_Init+0x15c>
 8000fbc:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001004 <HAL_GPIO_Init+0x1c0>
 8000fc0:	e7eb      	b.n	8000f9a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fc2:	2400      	movs	r4, #0
 8000fc4:	e766      	b.n	8000e94 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc6:	68cc      	ldr	r4, [r1, #12]
          break;
 8000fc8:	e764      	b.n	8000e94 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fca:	68cc      	ldr	r4, [r1, #12]
 8000fcc:	3408      	adds	r4, #8
          break;
 8000fce:	e761      	b.n	8000e94 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fd0:	68cc      	ldr	r4, [r1, #12]
 8000fd2:	340c      	adds	r4, #12
          break;
 8000fd4:	e75e      	b.n	8000e94 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fd6:	2404      	movs	r4, #4
 8000fd8:	e75c      	b.n	8000e94 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fda:	2500      	movs	r5, #0
 8000fdc:	e7a7      	b.n	8000f2e <HAL_GPIO_Init+0xea>
 8000fde:	2501      	movs	r5, #1
 8000fe0:	e7a5      	b.n	8000f2e <HAL_GPIO_Init+0xea>
 8000fe2:	2502      	movs	r5, #2
 8000fe4:	e7a3      	b.n	8000f2e <HAL_GPIO_Init+0xea>
 8000fe6:	bf00      	nop
 8000fe8:	40010400 	.word	0x40010400
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	10210000 	.word	0x10210000
 8000ff8:	10310000 	.word	0x10310000
 8000ffc:	10320000 	.word	0x10320000
 8001000:	10110000 	.word	0x10110000
 8001004:	10220000 	.word	0x10220000

08001008 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001008:	6883      	ldr	r3, [r0, #8]
 800100a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800100c:	bf14      	ite	ne
 800100e:	2001      	movne	r0, #1
 8001010:	2000      	moveq	r0, #0
 8001012:	4770      	bx	lr

08001014 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001014:	b10a      	cbz	r2, 800101a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001016:	6101      	str	r1, [r0, #16]
 8001018:	4770      	bx	lr
 800101a:	0409      	lsls	r1, r1, #16
 800101c:	e7fb      	b.n	8001016 <HAL_GPIO_WritePin+0x2>

0800101e <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800101e:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 8001022:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001024:	2a01      	cmp	r2, #1
{
 8001026:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001028:	d00b      	beq.n	8001042 <HAL_PCD_SetAddress+0x24>
 800102a:	2201      	movs	r2, #1
 800102c:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8001030:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001034:	6800      	ldr	r0, [r0, #0]
 8001036:	f001 fce2 	bl	80029fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800103a:	2000      	movs	r0, #0
 800103c:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 8001040:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001042:	2002      	movs	r0, #2
  return HAL_OK;
}
 8001044:	bd10      	pop	{r4, pc}

08001046 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001046:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001048:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800104c:	4604      	mov	r4, r0
 800104e:	f001 0007 	and.w	r0, r1, #7
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001052:	ea4f 1540 	mov.w	r5, r0, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 8001056:	d01f      	beq.n	8001098 <HAL_PCD_EP_Open+0x52>
    ep->is_in = 1U;
 8001058:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800105a:	f105 0128 	add.w	r1, r5, #40	; 0x28
    ep->is_in = 1U;
 800105e:	4425      	add	r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001060:	4421      	add	r1, r4
    ep->is_in = 1U;
 8001062:	f885 6029 	strb.w	r6, [r5, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8001066:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8001068:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800106a:	b2c0      	uxtb	r0, r0
 800106c:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 800106e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001070:	b102      	cbz	r2, 8001074 <HAL_PCD_EP_Open+0x2e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001072:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001074:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8001076:	bf04      	itt	eq
 8001078:	2300      	moveq	r3, #0
 800107a:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 800107c:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001080:	2b01      	cmp	r3, #1
 8001082:	d011      	beq.n	80010a8 <HAL_PCD_EP_Open+0x62>
 8001084:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001086:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001088:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800108c:	f001 fad4 	bl	8002638 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001090:	2000      	movs	r0, #0
 8001092:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 8001096:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8001098:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800109a:	f505 7194 	add.w	r1, r5, #296	; 0x128
    ep->is_in = 0U;
 800109e:	4425      	add	r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010a0:	4421      	add	r1, r4
    ep->is_in = 0U;
 80010a2:	f885 6129 	strb.w	r6, [r5, #297]	; 0x129
 80010a6:	e7de      	b.n	8001066 <HAL_PCD_EP_Open+0x20>
  __HAL_LOCK(hpcd);
 80010a8:	2002      	movs	r0, #2
}
 80010aa:	bd70      	pop	{r4, r5, r6, pc}

080010ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010ac:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80010ae:	2600      	movs	r6, #0
 80010b0:	f001 0107 	and.w	r1, r1, #7
 80010b4:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 80010b6:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 80010b8:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010bc:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010c0:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80010c2:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 80010c6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 80010ca:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 80010ce:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010d2:	6800      	ldr	r0, [r0, #0]
 80010d4:	f001 fcb0 	bl	8002a38 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80010d8:	4630      	mov	r0, r6
 80010da:	bd70      	pop	{r4, r5, r6, pc}

080010dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010dc:	f001 0107 	and.w	r1, r1, #7
 80010e0:	b570      	push	{r4, r5, r6, lr}
 80010e2:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80010e4:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80010e6:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80010e8:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80010ea:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80010ec:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010f0:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010f4:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80010f6:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80010f8:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80010fa:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010fe:	6800      	ldr	r0, [r0, #0]
 8001100:	f001 fc9a 	bl	8002a38 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001104:	4630      	mov	r0, r6
 8001106:	bd70      	pop	{r4, r5, r6, pc}

08001108 <HAL_PCD_IRQHandler>:
{
 8001108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800110c:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800110e:	6800      	ldr	r0, [r0, #0]
 8001110:	f001 fc7b 	bl	8002a0a <USB_ReadInterrupts>
 8001114:	0402      	lsls	r2, r0, #16
 8001116:	f100 8210 	bmi.w	800153a <HAL_PCD_IRQHandler+0x432>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800111a:	6820      	ldr	r0, [r4, #0]
 800111c:	f001 fc75 	bl	8002a0a <USB_ReadInterrupts>
 8001120:	0543      	lsls	r3, r0, #21
 8001122:	d50f      	bpl.n	8001144 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001124:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001126:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001128:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800112c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001130:	041b      	lsls	r3, r3, #16
 8001132:	0c1b      	lsrs	r3, r3, #16
 8001134:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001138:	f003 fcd3 	bl	8004ae2 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800113c:	2100      	movs	r1, #0
 800113e:	4620      	mov	r0, r4
 8001140:	f7ff ff6d 	bl	800101e <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001144:	6820      	ldr	r0, [r4, #0]
 8001146:	f001 fc60 	bl	8002a0a <USB_ReadInterrupts>
 800114a:	0447      	lsls	r7, r0, #17
 800114c:	d508      	bpl.n	8001160 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800114e:	6822      	ldr	r2, [r4, #0]
 8001150:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001154:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001158:	041b      	lsls	r3, r3, #16
 800115a:	0c1b      	lsrs	r3, r3, #16
 800115c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001160:	6820      	ldr	r0, [r4, #0]
 8001162:	f001 fc52 	bl	8002a0a <USB_ReadInterrupts>
 8001166:	0486      	lsls	r6, r0, #18
 8001168:	d508      	bpl.n	800117c <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800116a:	6822      	ldr	r2, [r4, #0]
 800116c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001174:	041b      	lsls	r3, r3, #16
 8001176:	0c1b      	lsrs	r3, r3, #16
 8001178:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800117c:	6820      	ldr	r0, [r4, #0]
 800117e:	f001 fc44 	bl	8002a0a <USB_ReadInterrupts>
 8001182:	04c5      	lsls	r5, r0, #19
 8001184:	d51c      	bpl.n	80011c0 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001186:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8001188:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800118a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800118e:	f023 0304 	bic.w	r3, r3, #4
 8001192:	041b      	lsls	r3, r3, #16
 8001194:	0c1b      	lsrs	r3, r3, #16
 8001196:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800119a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800119e:	f023 0308 	bic.w	r3, r3, #8
 80011a2:	041b      	lsls	r3, r3, #16
 80011a4:	0c1b      	lsrs	r3, r3, #16
 80011a6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80011aa:	f003 fcbd 	bl	8004b28 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011ae:	6822      	ldr	r2, [r4, #0]
 80011b0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011b8:	041b      	lsls	r3, r3, #16
 80011ba:	0c1b      	lsrs	r3, r3, #16
 80011bc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80011c0:	6820      	ldr	r0, [r4, #0]
 80011c2:	f001 fc22 	bl	8002a0a <USB_ReadInterrupts>
 80011c6:	0500      	lsls	r0, r0, #20
 80011c8:	d526      	bpl.n	8001218 <HAL_PCD_IRQHandler+0x110>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80011ca:	6820      	ldr	r0, [r4, #0]
 80011cc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	f043 0308 	orr.w	r3, r3, #8
 80011d6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011da:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80011de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011e2:	041b      	lsls	r3, r3, #16
 80011e4:	0c1b      	lsrs	r3, r3, #16
 80011e6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80011ea:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80011f8:	f001 fc07 	bl	8002a0a <USB_ReadInterrupts>
 80011fc:	04c1      	lsls	r1, r0, #19
 80011fe:	d508      	bpl.n	8001212 <HAL_PCD_IRQHandler+0x10a>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001200:	6822      	ldr	r2, [r4, #0]
 8001202:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	0c1b      	lsrs	r3, r3, #16
 800120e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8001212:	4620      	mov	r0, r4
 8001214:	f003 fc78 	bl	8004b08 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001218:	6820      	ldr	r0, [r4, #0]
 800121a:	f001 fbf6 	bl	8002a0a <USB_ReadInterrupts>
 800121e:	0582      	lsls	r2, r0, #22
 8001220:	d50b      	bpl.n	800123a <HAL_PCD_IRQHandler+0x132>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001222:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001224:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001226:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800122a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800122e:	041b      	lsls	r3, r3, #16
 8001230:	0c1b      	lsrs	r3, r3, #16
 8001232:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001236:	f003 fc50 	bl	8004ada <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800123a:	6820      	ldr	r0, [r4, #0]
 800123c:	f001 fbe5 	bl	8002a0a <USB_ReadInterrupts>
 8001240:	05c3      	lsls	r3, r0, #23
 8001242:	d508      	bpl.n	8001256 <HAL_PCD_IRQHandler+0x14e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001244:	6822      	ldr	r2, [r4, #0]
 8001246:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800124a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800124e:	041b      	lsls	r3, r3, #16
 8001250:	0c1b      	lsrs	r3, r3, #16
 8001252:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 800125a:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 800125e:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8001260:	f011 060f 	ands.w	r6, r1, #15
 8001264:	f040 80b7 	bne.w	80013d6 <HAL_PCD_IRQHandler+0x2ce>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001268:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800126a:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800126e:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001270:	d12c      	bne.n	80012cc <HAL_PCD_IRQHandler+0x1c4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001272:	ea03 0309 	and.w	r3, r3, r9
 8001276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127a:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800127c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001280:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001284:	b29b      	uxth	r3, r3
 8001286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800128a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800128e:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001292:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001298:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800129a:	4413      	add	r3, r2
 800129c:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800129e:	4620      	mov	r0, r4
 80012a0:	f003 fc14 	bl	8004acc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80012a4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80012a8:	b153      	cbz	r3, 80012c0 <HAL_PCD_IRQHandler+0x1b8>
 80012aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012ac:	b942      	cbnz	r2, 80012c0 <HAL_PCD_IRQHandler+0x1b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80012ae:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80012b2:	6821      	ldr	r1, [r4, #0]
 80012b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b8:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80012bc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80012c0:	6820      	ldr	r0, [r4, #0]
 80012c2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80012c6:	041b      	lsls	r3, r3, #16
 80012c8:	d4c7      	bmi.n	800125a <HAL_PCD_IRQHandler+0x152>
 80012ca:	e726      	b.n	800111a <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80012cc:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 80012d0:	d021      	beq.n	8001316 <HAL_PCD_IRQHandler+0x20e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012d2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80012d6:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 80012da:	b29b      	uxth	r3, r3
 80012dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80012e0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80012e4:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80012e8:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80012ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012f0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80012f4:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80012f8:	f001 fc86 	bl	8002c08 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80012fc:	6822      	ldr	r2, [r4, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80012fe:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001300:	8813      	ldrh	r3, [r2, #0]
 8001302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001306:	051b      	lsls	r3, r3, #20
 8001308:	0d1b      	lsrs	r3, r3, #20
 800130a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001310:	f003 fbce 	bl	8004ab0 <HAL_PCD_SetupStageCallback>
 8001314:	e7d4      	b.n	80012c0 <HAL_PCD_IRQHandler+0x1b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001316:	041f      	lsls	r7, r3, #16
 8001318:	d5d2      	bpl.n	80012c0 <HAL_PCD_IRQHandler+0x1b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800131a:	8803      	ldrh	r3, [r0, #0]
 800131c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001320:	051b      	lsls	r3, r3, #20
 8001322:	0d1b      	lsrs	r3, r3, #20
 8001324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001328:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800132a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800132e:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8001332:	b29b      	uxth	r3, r3
 8001334:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001338:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800133c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001344:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001348:	b18b      	cbz	r3, 800136e <HAL_PCD_IRQHandler+0x266>
 800134a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800134e:	b171      	cbz	r1, 800136e <HAL_PCD_IRQHandler+0x266>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001350:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8001354:	f001 fc58 	bl	8002c08 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8001358:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800135c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001360:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8001362:	4413      	add	r3, r2
 8001364:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001368:	4620      	mov	r0, r4
 800136a:	f003 fba7 	bl	8004abc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800136e:	6821      	ldr	r1, [r4, #0]
 8001370:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 8001374:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001378:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 800137c:	b29b      	uxth	r3, r3
 800137e:	b9cd      	cbnz	r5, 80013b4 <HAL_PCD_IRQHandler+0x2ac>
 8001380:	5ac2      	ldrh	r2, [r0, r3]
 8001382:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001386:	0412      	lsls	r2, r2, #16
 8001388:	0c12      	lsrs	r2, r2, #16
 800138a:	52c2      	strh	r2, [r0, r3]
 800138c:	5ac2      	ldrh	r2, [r0, r3]
 800138e:	b292      	uxth	r2, r2
 8001390:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001394:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001396:	880b      	ldrh	r3, [r1, #0]
 8001398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800139c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013a0:	041b      	lsls	r3, r3, #16
 80013a2:	0c1b      	lsrs	r3, r3, #16
 80013a4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80013a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b0:	800b      	strh	r3, [r1, #0]
 80013b2:	e785      	b.n	80012c0 <HAL_PCD_IRQHandler+0x1b8>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80013b4:	2d3e      	cmp	r5, #62	; 0x3e
 80013b6:	d806      	bhi.n	80013c6 <HAL_PCD_IRQHandler+0x2be>
 80013b8:	086a      	lsrs	r2, r5, #1
 80013ba:	07ee      	lsls	r6, r5, #31
 80013bc:	bf48      	it	mi
 80013be:	3201      	addmi	r2, #1
 80013c0:	0292      	lsls	r2, r2, #10
 80013c2:	b292      	uxth	r2, r2
 80013c4:	e7e6      	b.n	8001394 <HAL_PCD_IRQHandler+0x28c>
 80013c6:	096a      	lsrs	r2, r5, #5
 80013c8:	06ed      	lsls	r5, r5, #27
 80013ca:	bf08      	it	eq
 80013cc:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80013d0:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 80013d4:	e7f5      	b.n	80013c2 <HAL_PCD_IRQHandler+0x2ba>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80013d6:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 80013da:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80013de:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 80013e2:	d03d      	beq.n	8001460 <HAL_PCD_IRQHandler+0x358>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80013e4:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80013e8:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80013ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013ee:	051b      	lsls	r3, r3, #20
 80013f0:	0d1b      	lsrs	r3, r3, #20
 80013f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f6:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80013fa:	19e1      	adds	r1, r4, r7
 80013fc:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 8001400:	2b00      	cmp	r3, #0
 8001402:	d158      	bne.n	80014b6 <HAL_PCD_IRQHandler+0x3ae>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001404:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001408:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 800140c:	b29b      	uxth	r3, r3
 800140e:	3306      	adds	r3, #6
 8001410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001414:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001418:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 800141c:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8001420:	b135      	cbz	r5, 8001430 <HAL_PCD_IRQHandler+0x328>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001422:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8001426:	462b      	mov	r3, r5
 8001428:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 800142c:	f001 fbec 	bl	8002c08 <USB_ReadPMA>
 8001430:	19e1      	adds	r1, r4, r7
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001432:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 8001436:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 800143a:	442b      	add	r3, r5
 800143c:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001440:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 8001444:	442a      	add	r2, r5
 8001446:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800144a:	b11b      	cbz	r3, 8001454 <HAL_PCD_IRQHandler+0x34c>
 800144c:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8001450:	4285      	cmp	r5, r0
 8001452:	d269      	bcs.n	8001528 <HAL_PCD_IRQHandler+0x420>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001454:	4427      	add	r7, r4
 8001456:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 800145a:	4620      	mov	r0, r4
 800145c:	f003 fb2e 	bl	8004abc <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001460:	f018 0f80 	tst.w	r8, #128	; 0x80
 8001464:	f43f af2c 	beq.w	80012c0 <HAL_PCD_IRQHandler+0x1b8>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001468:	6821      	ldr	r1, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800146a:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800146c:	f831 2026 	ldrh.w	r2, [r1, r6, lsl #2]
 8001470:	b292      	uxth	r2, r2
 8001472:	ea02 0209 	and.w	r2, r2, r9
 8001476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800147a:	f821 2026 	strh.w	r2, [r1, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800147e:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001482:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8001486:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800148a:	b29b      	uxth	r3, r3
 800148c:	3302      	adds	r3, #2
 800148e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001492:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8001496:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 800149a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800149c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80014a0:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80014a2:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 80014a4:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 80014a6:	63f2      	str	r2, [r6, #60]	; 0x3c
 80014a8:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
        if (ep->xfer_len == 0U)
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d141      	bne.n	8001534 <HAL_PCD_IRQHandler+0x42c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80014b0:	f003 fb0c 	bl	8004acc <HAL_PCD_DataInStageCallback>
 80014b4:	e704      	b.n	80012c0 <HAL_PCD_IRQHandler+0x1b8>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80014b6:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 80014ba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80014c4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80014c8:	b292      	uxth	r2, r2
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80014ca:	d01f      	beq.n	800150c <HAL_PCD_IRQHandler+0x404>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80014cc:	3202      	adds	r2, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80014d4:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 80014d8:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80014dc:	b135      	cbz	r5, 80014ec <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80014de:	462b      	mov	r3, r5
 80014e0:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80014e4:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80014e8:	f001 fb8e 	bl	8002c08 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80014ec:	19e3      	adds	r3, r4, r7
 80014ee:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 80014f2:	6822      	ldr	r2, [r4, #0]
 80014f4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	ea03 030b 	and.w	r3, r3, fp
 80014fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001502:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001506:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800150a:	e791      	b.n	8001430 <HAL_PCD_IRQHandler+0x328>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800150c:	3206      	adds	r2, #6
 800150e:	4413      	add	r3, r2
 8001510:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001514:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8001518:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 800151c:	2d00      	cmp	r5, #0
 800151e:	d0e5      	beq.n	80014ec <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001520:	462b      	mov	r3, r5
 8001522:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 8001526:	e7dd      	b.n	80014e4 <HAL_PCD_IRQHandler+0x3dc>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001528:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 800152c:	4620      	mov	r0, r4
 800152e:	f7ff fdbd 	bl	80010ac <HAL_PCD_EP_Receive>
 8001532:	e795      	b.n	8001460 <HAL_PCD_IRQHandler+0x358>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001534:	f7ff fdd2 	bl	80010dc <HAL_PCD_EP_Transmit>
 8001538:	e6c2      	b.n	80012c0 <HAL_PCD_IRQHandler+0x1b8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800153a:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8001548 <HAL_PCD_IRQHandler+0x440>
 800153e:	f8df a00c 	ldr.w	sl, [pc, #12]	; 800154c <HAL_PCD_IRQHandler+0x444>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001542:	f8df b00c 	ldr.w	fp, [pc, #12]	; 8001550 <HAL_PCD_IRQHandler+0x448>
 8001546:	e6bb      	b.n	80012c0 <HAL_PCD_IRQHandler+0x1b8>
 8001548:	ffff8f0f 	.word	0xffff8f0f
 800154c:	ffff8000 	.word	0xffff8000
 8001550:	ffff8f8f 	.word	0xffff8f8f

08001554 <HAL_PCD_EP_SetStall>:
{
 8001554:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001556:	6843      	ldr	r3, [r0, #4]
 8001558:	f001 0507 	and.w	r5, r1, #7
 800155c:	429d      	cmp	r5, r3
{
 800155e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001560:	d828      	bhi.n	80015b4 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8001562:	060b      	lsls	r3, r1, #24
 8001564:	d51d      	bpl.n	80015a2 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8001566:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001568:	016b      	lsls	r3, r5, #5
 800156a:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 800156e:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001570:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001572:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8001576:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001578:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800157a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800157c:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001580:	429a      	cmp	r2, r3
 8001582:	d019      	beq.n	80015b8 <HAL_PCD_EP_SetStall+0x64>
 8001584:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001588:	6820      	ldr	r0, [r4, #0]
 800158a:	f001 f9cd 	bl	8002928 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800158e:	b925      	cbnz	r5, 800159a <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001590:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8001594:	6820      	ldr	r0, [r4, #0]
 8001596:	f001 fa3c 	bl	8002a12 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800159a:	2000      	movs	r0, #0
 800159c:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 80015a0:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80015a2:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80015a4:	014b      	lsls	r3, r1, #5
 80015a6:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 80015aa:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80015ac:	4401      	add	r1, r0
    ep->is_in = 0U;
 80015ae:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 80015b2:	e7e0      	b.n	8001576 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80015b4:	2001      	movs	r0, #1
 80015b6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80015b8:	2002      	movs	r0, #2
}
 80015ba:	bd38      	pop	{r3, r4, r5, pc}

080015bc <HAL_PCD_EP_ClrStall>:
{
 80015bc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015be:	6843      	ldr	r3, [r0, #4]
 80015c0:	f001 020f 	and.w	r2, r1, #15
 80015c4:	429a      	cmp	r2, r3
{
 80015c6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015c8:	d826      	bhi.n	8001618 <HAL_PCD_EP_ClrStall+0x5c>
 80015ca:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 80015ce:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015d2:	ea4f 1243 	mov.w	r2, r3, lsl #5
  if ((0x80U & ep_addr) == 0x80U)
 80015d6:	d017      	beq.n	8001608 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015d8:	f102 0128 	add.w	r1, r2, #40	; 0x28
 80015dc:	4401      	add	r1, r0
    ep->is_in = 1U;
 80015de:	4402      	add	r2, r0
 80015e0:	2001      	movs	r0, #1
 80015e2:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  ep->is_stall = 0U;
 80015e6:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80015e8:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 80015ea:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80015ec:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d013      	beq.n	800161c <HAL_PCD_EP_ClrStall+0x60>
 80015f4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80015f6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80015f8:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80015fc:	f001 f9b4 	bl	8002968 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001600:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 8001604:	4628      	mov	r0, r5
 8001606:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001608:	f502 7194 	add.w	r1, r2, #296	; 0x128
 800160c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800160e:	4402      	add	r2, r0
 8001610:	2000      	movs	r0, #0
 8001612:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 8001616:	e7e6      	b.n	80015e6 <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 8001618:	2001      	movs	r0, #1
 800161a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800161c:	2002      	movs	r0, #2
}
 800161e:	bd38      	pop	{r3, r4, r5, pc}

08001620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001624:	4605      	mov	r5, r0
 8001626:	b908      	cbnz	r0, 800162c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001628:	2001      	movs	r0, #1
 800162a:	e03c      	b.n	80016a6 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162c:	6803      	ldr	r3, [r0, #0]
 800162e:	07db      	lsls	r3, r3, #31
 8001630:	d410      	bmi.n	8001654 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001632:	682b      	ldr	r3, [r5, #0]
 8001634:	079f      	lsls	r7, r3, #30
 8001636:	d45d      	bmi.n	80016f4 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001638:	682b      	ldr	r3, [r5, #0]
 800163a:	0719      	lsls	r1, r3, #28
 800163c:	f100 8094 	bmi.w	8001768 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001640:	682b      	ldr	r3, [r5, #0]
 8001642:	075a      	lsls	r2, r3, #29
 8001644:	f100 80be 	bmi.w	80017c4 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001648:	69e8      	ldr	r0, [r5, #28]
 800164a:	2800      	cmp	r0, #0
 800164c:	f040 812c 	bne.w	80018a8 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001650:	2000      	movs	r0, #0
 8001652:	e028      	b.n	80016a6 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001654:	4c8f      	ldr	r4, [pc, #572]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001656:	6863      	ldr	r3, [r4, #4]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b04      	cmp	r3, #4
 800165e:	d007      	beq.n	8001670 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001660:	6863      	ldr	r3, [r4, #4]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b08      	cmp	r3, #8
 8001668:	d109      	bne.n	800167e <HAL_RCC_OscConfig+0x5e>
 800166a:	6863      	ldr	r3, [r4, #4]
 800166c:	03de      	lsls	r6, r3, #15
 800166e:	d506      	bpl.n	800167e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	039c      	lsls	r4, r3, #14
 8001674:	d5dd      	bpl.n	8001632 <HAL_RCC_OscConfig+0x12>
 8001676:	686b      	ldr	r3, [r5, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1da      	bne.n	8001632 <HAL_RCC_OscConfig+0x12>
 800167c:	e7d4      	b.n	8001628 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167e:	686b      	ldr	r3, [r5, #4]
 8001680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001684:	d112      	bne.n	80016ac <HAL_RCC_OscConfig+0x8c>
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800168e:	f7ff f837 	bl	8000700 <HAL_GetTick>
 8001692:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	0398      	lsls	r0, r3, #14
 8001698:	d4cb      	bmi.n	8001632 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800169a:	f7ff f831 	bl	8000700 <HAL_GetTick>
 800169e:	1b80      	subs	r0, r0, r6
 80016a0:	2864      	cmp	r0, #100	; 0x64
 80016a2:	d9f7      	bls.n	8001694 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80016a4:	2003      	movs	r0, #3
}
 80016a6:	b002      	add	sp, #8
 80016a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ac:	b99b      	cbnz	r3, 80016d6 <HAL_RCC_OscConfig+0xb6>
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b4:	6023      	str	r3, [r4, #0]
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016be:	f7ff f81f 	bl	8000700 <HAL_GetTick>
 80016c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	0399      	lsls	r1, r3, #14
 80016c8:	d5b3      	bpl.n	8001632 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ca:	f7ff f819 	bl	8000700 <HAL_GetTick>
 80016ce:	1b80      	subs	r0, r0, r6
 80016d0:	2864      	cmp	r0, #100	; 0x64
 80016d2:	d9f7      	bls.n	80016c4 <HAL_RCC_OscConfig+0xa4>
 80016d4:	e7e6      	b.n	80016a4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016da:	6823      	ldr	r3, [r4, #0]
 80016dc:	d103      	bne.n	80016e6 <HAL_RCC_OscConfig+0xc6>
 80016de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e2:	6023      	str	r3, [r4, #0]
 80016e4:	e7cf      	b.n	8001686 <HAL_RCC_OscConfig+0x66>
 80016e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ea:	6023      	str	r3, [r4, #0]
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f2:	e7cb      	b.n	800168c <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f4:	4c67      	ldr	r4, [pc, #412]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80016f6:	6863      	ldr	r3, [r4, #4]
 80016f8:	f013 0f0c 	tst.w	r3, #12
 80016fc:	d007      	beq.n	800170e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016fe:	6863      	ldr	r3, [r4, #4]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b08      	cmp	r3, #8
 8001706:	d110      	bne.n	800172a <HAL_RCC_OscConfig+0x10a>
 8001708:	6863      	ldr	r3, [r4, #4]
 800170a:	03da      	lsls	r2, r3, #15
 800170c:	d40d      	bmi.n	800172a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	6823      	ldr	r3, [r4, #0]
 8001710:	079b      	lsls	r3, r3, #30
 8001712:	d502      	bpl.n	800171a <HAL_RCC_OscConfig+0xfa>
 8001714:	692b      	ldr	r3, [r5, #16]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d186      	bne.n	8001628 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171a:	6823      	ldr	r3, [r4, #0]
 800171c:	696a      	ldr	r2, [r5, #20]
 800171e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001722:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001726:	6023      	str	r3, [r4, #0]
 8001728:	e786      	b.n	8001638 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172a:	692a      	ldr	r2, [r5, #16]
 800172c:	4b5a      	ldr	r3, [pc, #360]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800172e:	b16a      	cbz	r2, 800174c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001734:	f7fe ffe4 	bl	8000700 <HAL_GetTick>
 8001738:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	079f      	lsls	r7, r3, #30
 800173e:	d4ec      	bmi.n	800171a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001740:	f7fe ffde 	bl	8000700 <HAL_GetTick>
 8001744:	1b80      	subs	r0, r0, r6
 8001746:	2802      	cmp	r0, #2
 8001748:	d9f7      	bls.n	800173a <HAL_RCC_OscConfig+0x11a>
 800174a:	e7ab      	b.n	80016a4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800174c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800174e:	f7fe ffd7 	bl	8000700 <HAL_GetTick>
 8001752:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	0798      	lsls	r0, r3, #30
 8001758:	f57f af6e 	bpl.w	8001638 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175c:	f7fe ffd0 	bl	8000700 <HAL_GetTick>
 8001760:	1b80      	subs	r0, r0, r6
 8001762:	2802      	cmp	r0, #2
 8001764:	d9f6      	bls.n	8001754 <HAL_RCC_OscConfig+0x134>
 8001766:	e79d      	b.n	80016a4 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001768:	69aa      	ldr	r2, [r5, #24]
 800176a:	4c4a      	ldr	r4, [pc, #296]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 800176c:	4b4b      	ldr	r3, [pc, #300]	; (800189c <HAL_RCC_OscConfig+0x27c>)
 800176e:	b1da      	cbz	r2, 80017a8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001774:	f7fe ffc4 	bl	8000700 <HAL_GetTick>
 8001778:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800177c:	079b      	lsls	r3, r3, #30
 800177e:	d50d      	bpl.n	800179c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001780:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001784:	4b46      	ldr	r3, [pc, #280]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	fbb3 f3f2 	udiv	r3, r3, r2
 800178c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800178e:	bf00      	nop
  }
  while (Delay --);
 8001790:	9b01      	ldr	r3, [sp, #4]
 8001792:	1e5a      	subs	r2, r3, #1
 8001794:	9201      	str	r2, [sp, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f9      	bne.n	800178e <HAL_RCC_OscConfig+0x16e>
 800179a:	e751      	b.n	8001640 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179c:	f7fe ffb0 	bl	8000700 <HAL_GetTick>
 80017a0:	1b80      	subs	r0, r0, r6
 80017a2:	2802      	cmp	r0, #2
 80017a4:	d9e9      	bls.n	800177a <HAL_RCC_OscConfig+0x15a>
 80017a6:	e77d      	b.n	80016a4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80017a8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017aa:	f7fe ffa9 	bl	8000700 <HAL_GetTick>
 80017ae:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017b2:	079f      	lsls	r7, r3, #30
 80017b4:	f57f af44 	bpl.w	8001640 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b8:	f7fe ffa2 	bl	8000700 <HAL_GetTick>
 80017bc:	1b80      	subs	r0, r0, r6
 80017be:	2802      	cmp	r0, #2
 80017c0:	d9f6      	bls.n	80017b0 <HAL_RCC_OscConfig+0x190>
 80017c2:	e76f      	b.n	80016a4 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c4:	4c33      	ldr	r4, [pc, #204]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80017c6:	69e3      	ldr	r3, [r4, #28]
 80017c8:	00d8      	lsls	r0, r3, #3
 80017ca:	d424      	bmi.n	8001816 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80017cc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	69e3      	ldr	r3, [r4, #28]
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	61e3      	str	r3, [r4, #28]
 80017d6:	69e3      	ldr	r3, [r4, #28]
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	4e30      	ldr	r6, [pc, #192]	; (80018a4 <HAL_RCC_OscConfig+0x284>)
 80017e2:	6833      	ldr	r3, [r6, #0]
 80017e4:	05d9      	lsls	r1, r3, #23
 80017e6:	d518      	bpl.n	800181a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e8:	68eb      	ldr	r3, [r5, #12]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d126      	bne.n	800183c <HAL_RCC_OscConfig+0x21c>
 80017ee:	6a23      	ldr	r3, [r4, #32]
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80017f6:	f7fe ff83 	bl	8000700 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80017fe:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001800:	6a23      	ldr	r3, [r4, #32]
 8001802:	079b      	lsls	r3, r3, #30
 8001804:	d53f      	bpl.n	8001886 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001806:	2f00      	cmp	r7, #0
 8001808:	f43f af1e 	beq.w	8001648 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800180c:	69e3      	ldr	r3, [r4, #28]
 800180e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001812:	61e3      	str	r3, [r4, #28]
 8001814:	e718      	b.n	8001648 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2700      	movs	r7, #0
 8001818:	e7e2      	b.n	80017e0 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181a:	6833      	ldr	r3, [r6, #0]
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001822:	f7fe ff6d 	bl	8000700 <HAL_GetTick>
 8001826:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001828:	6833      	ldr	r3, [r6, #0]
 800182a:	05da      	lsls	r2, r3, #23
 800182c:	d4dc      	bmi.n	80017e8 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182e:	f7fe ff67 	bl	8000700 <HAL_GetTick>
 8001832:	eba0 0008 	sub.w	r0, r0, r8
 8001836:	2864      	cmp	r0, #100	; 0x64
 8001838:	d9f6      	bls.n	8001828 <HAL_RCC_OscConfig+0x208>
 800183a:	e733      	b.n	80016a4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183c:	b9ab      	cbnz	r3, 800186a <HAL_RCC_OscConfig+0x24a>
 800183e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001840:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	6223      	str	r3, [r4, #32]
 800184a:	6a23      	ldr	r3, [r4, #32]
 800184c:	f023 0304 	bic.w	r3, r3, #4
 8001850:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001852:	f7fe ff55 	bl	8000700 <HAL_GetTick>
 8001856:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001858:	6a23      	ldr	r3, [r4, #32]
 800185a:	0798      	lsls	r0, r3, #30
 800185c:	d5d3      	bpl.n	8001806 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7fe ff4f 	bl	8000700 <HAL_GetTick>
 8001862:	1b80      	subs	r0, r0, r6
 8001864:	4540      	cmp	r0, r8
 8001866:	d9f7      	bls.n	8001858 <HAL_RCC_OscConfig+0x238>
 8001868:	e71c      	b.n	80016a4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186a:	2b05      	cmp	r3, #5
 800186c:	6a23      	ldr	r3, [r4, #32]
 800186e:	d103      	bne.n	8001878 <HAL_RCC_OscConfig+0x258>
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	6223      	str	r3, [r4, #32]
 8001876:	e7ba      	b.n	80017ee <HAL_RCC_OscConfig+0x1ce>
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	6223      	str	r3, [r4, #32]
 800187e:	6a23      	ldr	r3, [r4, #32]
 8001880:	f023 0304 	bic.w	r3, r3, #4
 8001884:	e7b6      	b.n	80017f4 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7fe ff3b 	bl	8000700 <HAL_GetTick>
 800188a:	eba0 0008 	sub.w	r0, r0, r8
 800188e:	42b0      	cmp	r0, r6
 8001890:	d9b6      	bls.n	8001800 <HAL_RCC_OscConfig+0x1e0>
 8001892:	e707      	b.n	80016a4 <HAL_RCC_OscConfig+0x84>
 8001894:	40021000 	.word	0x40021000
 8001898:	42420000 	.word	0x42420000
 800189c:	42420480 	.word	0x42420480
 80018a0:	20000074 	.word	0x20000074
 80018a4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <HAL_RCC_OscConfig+0x334>)
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	461c      	mov	r4, r3
 80018ae:	f002 020c 	and.w	r2, r2, #12
 80018b2:	2a08      	cmp	r2, #8
 80018b4:	d03d      	beq.n	8001932 <HAL_RCC_OscConfig+0x312>
 80018b6:	2300      	movs	r3, #0
 80018b8:	4e27      	ldr	r6, [pc, #156]	; (8001958 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ba:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80018bc:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018be:	d12b      	bne.n	8001918 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80018c0:	f7fe ff1e 	bl	8000700 <HAL_GetTick>
 80018c4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	0199      	lsls	r1, r3, #6
 80018ca:	d41f      	bmi.n	800190c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018cc:	6a2b      	ldr	r3, [r5, #32]
 80018ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d2:	d105      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018d4:	6862      	ldr	r2, [r4, #4]
 80018d6:	68a9      	ldr	r1, [r5, #8]
 80018d8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80018dc:	430a      	orrs	r2, r1
 80018de:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80018e2:	6862      	ldr	r2, [r4, #4]
 80018e4:	430b      	orrs	r3, r1
 80018e6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80018ea:	4313      	orrs	r3, r2
 80018ec:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80018ee:	2301      	movs	r3, #1
 80018f0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80018f2:	f7fe ff05 	bl	8000700 <HAL_GetTick>
 80018f6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	019a      	lsls	r2, r3, #6
 80018fc:	f53f aea8 	bmi.w	8001650 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7fe fefe 	bl	8000700 <HAL_GetTick>
 8001904:	1b40      	subs	r0, r0, r5
 8001906:	2802      	cmp	r0, #2
 8001908:	d9f6      	bls.n	80018f8 <HAL_RCC_OscConfig+0x2d8>
 800190a:	e6cb      	b.n	80016a4 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190c:	f7fe fef8 	bl	8000700 <HAL_GetTick>
 8001910:	1bc0      	subs	r0, r0, r7
 8001912:	2802      	cmp	r0, #2
 8001914:	d9d7      	bls.n	80018c6 <HAL_RCC_OscConfig+0x2a6>
 8001916:	e6c5      	b.n	80016a4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001918:	f7fe fef2 	bl	8000700 <HAL_GetTick>
 800191c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	019b      	lsls	r3, r3, #6
 8001922:	f57f ae95 	bpl.w	8001650 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001926:	f7fe feeb 	bl	8000700 <HAL_GetTick>
 800192a:	1b40      	subs	r0, r0, r5
 800192c:	2802      	cmp	r0, #2
 800192e:	d9f6      	bls.n	800191e <HAL_RCC_OscConfig+0x2fe>
 8001930:	e6b8      	b.n	80016a4 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001932:	2801      	cmp	r0, #1
 8001934:	f43f aeb7 	beq.w	80016a6 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001938:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	6a2b      	ldr	r3, [r5, #32]
 800193c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001940:	429a      	cmp	r2, r3
 8001942:	f47f ae71 	bne.w	8001628 <HAL_RCC_OscConfig+0x8>
 8001946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001948:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 800194c:	1ac0      	subs	r0, r0, r3
 800194e:	bf18      	it	ne
 8001950:	2001      	movne	r0, #1
 8001952:	e6a8      	b.n	80016a6 <HAL_RCC_OscConfig+0x86>
 8001954:	40021000 	.word	0x40021000
 8001958:	42420060 	.word	0x42420060

0800195c <HAL_RCC_GetSysClockFreq>:
{
 800195c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800195e:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001960:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001962:	ac02      	add	r4, sp, #8
 8001964:	f103 0510 	add.w	r5, r3, #16
 8001968:	4622      	mov	r2, r4
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	6859      	ldr	r1, [r3, #4]
 800196e:	3308      	adds	r3, #8
 8001970:	c203      	stmia	r2!, {r0, r1}
 8001972:	42ab      	cmp	r3, r5
 8001974:	4614      	mov	r4, r2
 8001976:	d1f7      	bne.n	8001968 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001978:	2301      	movs	r3, #1
 800197a:	f88d 3004 	strb.w	r3, [sp, #4]
 800197e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001980:	4911      	ldr	r1, [pc, #68]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001982:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001986:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001988:	f003 020c 	and.w	r2, r3, #12
 800198c:	2a08      	cmp	r2, #8
 800198e:	d117      	bne.n	80019c0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001990:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001994:	a806      	add	r0, sp, #24
 8001996:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001998:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800199a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800199e:	d50c      	bpl.n	80019ba <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019a0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019a2:	480a      	ldr	r0, [pc, #40]	; (80019cc <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019a4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019a8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019aa:	aa06      	add	r2, sp, #24
 80019ac:	4413      	add	r3, r2
 80019ae:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019b2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80019b6:	b007      	add	sp, #28
 80019b8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x74>)
 80019bc:	4350      	muls	r0, r2
 80019be:	e7fa      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80019c2:	e7f8      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x5a>
 80019c4:	080058a8 	.word	0x080058a8
 80019c8:	40021000 	.word	0x40021000
 80019cc:	007a1200 	.word	0x007a1200
 80019d0:	003d0900 	.word	0x003d0900

080019d4 <HAL_RCC_ClockConfig>:
{
 80019d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019d8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80019da:	4604      	mov	r4, r0
 80019dc:	b910      	cbnz	r0, 80019e4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019de:	2001      	movs	r0, #1
 80019e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e4:	4a45      	ldr	r2, [pc, #276]	; (8001afc <HAL_RCC_ClockConfig+0x128>)
 80019e6:	6813      	ldr	r3, [r2, #0]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	428b      	cmp	r3, r1
 80019ee:	d329      	bcc.n	8001a44 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f0:	6821      	ldr	r1, [r4, #0]
 80019f2:	078e      	lsls	r6, r1, #30
 80019f4:	d431      	bmi.n	8001a5a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f6:	07ca      	lsls	r2, r1, #31
 80019f8:	d444      	bmi.n	8001a84 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019fa:	4a40      	ldr	r2, [pc, #256]	; (8001afc <HAL_RCC_ClockConfig+0x128>)
 80019fc:	6813      	ldr	r3, [r2, #0]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	429d      	cmp	r5, r3
 8001a04:	d367      	bcc.n	8001ad6 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a06:	6822      	ldr	r2, [r4, #0]
 8001a08:	4d3d      	ldr	r5, [pc, #244]	; (8001b00 <HAL_RCC_ClockConfig+0x12c>)
 8001a0a:	f012 0f04 	tst.w	r2, #4
 8001a0e:	d16e      	bne.n	8001aee <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a10:	0713      	lsls	r3, r2, #28
 8001a12:	d506      	bpl.n	8001a22 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a14:	686b      	ldr	r3, [r5, #4]
 8001a16:	6922      	ldr	r2, [r4, #16]
 8001a18:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a20:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a22:	f7ff ff9b 	bl	800195c <HAL_RCC_GetSysClockFreq>
 8001a26:	686b      	ldr	r3, [r5, #4]
 8001a28:	4a36      	ldr	r2, [pc, #216]	; (8001b04 <HAL_RCC_ClockConfig+0x130>)
 8001a2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	40d8      	lsrs	r0, r3
 8001a32:	4b35      	ldr	r3, [pc, #212]	; (8001b08 <HAL_RCC_ClockConfig+0x134>)
 8001a34:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <HAL_RCC_ClockConfig+0x138>)
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	f7fe fe1f 	bl	800067c <HAL_InitTick>
  return HAL_OK;
 8001a3e:	2000      	movs	r0, #0
 8001a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a44:	6813      	ldr	r3, [r2, #0]
 8001a46:	f023 0307 	bic.w	r3, r3, #7
 8001a4a:	430b      	orrs	r3, r1
 8001a4c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	6813      	ldr	r3, [r2, #0]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4299      	cmp	r1, r3
 8001a56:	d1c2      	bne.n	80019de <HAL_RCC_ClockConfig+0xa>
 8001a58:	e7ca      	b.n	80019f0 <HAL_RCC_ClockConfig+0x1c>
 8001a5a:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a60:	bf1e      	ittt	ne
 8001a62:	685a      	ldrne	r2, [r3, #4]
 8001a64:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001a68:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6a:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a6c:	bf42      	ittt	mi
 8001a6e:	685a      	ldrmi	r2, [r3, #4]
 8001a70:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001a74:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	68a0      	ldr	r0, [r4, #8]
 8001a7a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a7e:	4302      	orrs	r2, r0
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	e7b8      	b.n	80019f6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a84:	6862      	ldr	r2, [r4, #4]
 8001a86:	4e1e      	ldr	r6, [pc, #120]	; (8001b00 <HAL_RCC_ClockConfig+0x12c>)
 8001a88:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8c:	d11b      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a92:	d0a4      	beq.n	80019de <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a94:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a96:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001aa2:	f7fe fe2d 	bl	8000700 <HAL_GetTick>
 8001aa6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa8:	6873      	ldr	r3, [r6, #4]
 8001aaa:	6862      	ldr	r2, [r4, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ab4:	d0a1      	beq.n	80019fa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab6:	f7fe fe23 	bl	8000700 <HAL_GetTick>
 8001aba:	1bc0      	subs	r0, r0, r7
 8001abc:	4540      	cmp	r0, r8
 8001abe:	d9f3      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001ac0:	2003      	movs	r0, #3
}
 8001ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac6:	2a02      	cmp	r2, #2
 8001ac8:	d102      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ace:	e7e0      	b.n	8001a92 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad0:	f013 0f02 	tst.w	r3, #2
 8001ad4:	e7dd      	b.n	8001a92 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	6813      	ldr	r3, [r2, #0]
 8001ad8:	f023 0307 	bic.w	r3, r3, #7
 8001adc:	432b      	orrs	r3, r5
 8001ade:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae0:	6813      	ldr	r3, [r2, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	429d      	cmp	r5, r3
 8001ae8:	f47f af79 	bne.w	80019de <HAL_RCC_ClockConfig+0xa>
 8001aec:	e78b      	b.n	8001a06 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aee:	686b      	ldr	r3, [r5, #4]
 8001af0:	68e1      	ldr	r1, [r4, #12]
 8001af2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001af6:	430b      	orrs	r3, r1
 8001af8:	606b      	str	r3, [r5, #4]
 8001afa:	e789      	b.n	8001a10 <HAL_RCC_ClockConfig+0x3c>
 8001afc:	40022000 	.word	0x40022000
 8001b00:	40021000 	.word	0x40021000
 8001b04:	08005ffc 	.word	0x08005ffc
 8001b08:	20000074 	.word	0x20000074
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	4a03      	ldr	r2, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b1e:	6810      	ldr	r0, [r2, #0]
}
 8001b20:	40d8      	lsrs	r0, r3
 8001b22:	4770      	bx	lr
 8001b24:	40021000 	.word	0x40021000
 8001b28:	0800600c 	.word	0x0800600c
 8001b2c:	20000074 	.word	0x20000074

08001b30 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001b3a:	5cd3      	ldrb	r3, [r2, r3]
 8001b3c:	4a03      	ldr	r2, [pc, #12]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b3e:	6810      	ldr	r0, [r2, #0]
}
 8001b40:	40d8      	lsrs	r0, r3
 8001b42:	4770      	bx	lr
 8001b44:	40021000 	.word	0x40021000
 8001b48:	0800600c 	.word	0x0800600c
 8001b4c:	20000074 	.word	0x20000074

08001b50 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b50:	6803      	ldr	r3, [r0, #0]
{
 8001b52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b56:	07d9      	lsls	r1, r3, #31
{
 8001b58:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b5a:	d520      	bpl.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5c:	4c35      	ldr	r4, [pc, #212]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001b5e:	69e3      	ldr	r3, [r4, #28]
 8001b60:	00da      	lsls	r2, r3, #3
 8001b62:	d432      	bmi.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001b64:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	69e3      	ldr	r3, [r4, #28]
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	61e3      	str	r3, [r4, #28]
 8001b6e:	69e3      	ldr	r3, [r4, #28]
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	4e2f      	ldr	r6, [pc, #188]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001b7a:	6833      	ldr	r3, [r6, #0]
 8001b7c:	05db      	lsls	r3, r3, #23
 8001b7e:	d526      	bpl.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b80:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b82:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b86:	d136      	bne.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b88:	6a23      	ldr	r3, [r4, #32]
 8001b8a:	686a      	ldr	r2, [r5, #4]
 8001b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b90:	4313      	orrs	r3, r2
 8001b92:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b94:	b11f      	cbz	r7, 8001b9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b96:	69e3      	ldr	r3, [r4, #28]
 8001b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b9e:	6828      	ldr	r0, [r5, #0]
 8001ba0:	0783      	lsls	r3, r0, #30
 8001ba2:	d506      	bpl.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ba4:	4a23      	ldr	r2, [pc, #140]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001ba6:	68a9      	ldr	r1, [r5, #8]
 8001ba8:	6853      	ldr	r3, [r2, #4]
 8001baa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bae:	430b      	orrs	r3, r1
 8001bb0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001bb2:	f010 0010 	ands.w	r0, r0, #16
 8001bb6:	d01b      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bb8:	4a1e      	ldr	r2, [pc, #120]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001bba:	68e9      	ldr	r1, [r5, #12]
 8001bbc:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001bbe:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bc0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	6053      	str	r3, [r2, #4]
 8001bc8:	e012      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001bca:	2700      	movs	r7, #0
 8001bcc:	e7d4      	b.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bce:	6833      	ldr	r3, [r6, #0]
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001bd6:	f7fe fd93 	bl	8000700 <HAL_GetTick>
 8001bda:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	6833      	ldr	r3, [r6, #0]
 8001bde:	05d8      	lsls	r0, r3, #23
 8001be0:	d4ce      	bmi.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be2:	f7fe fd8d 	bl	8000700 <HAL_GetTick>
 8001be6:	eba0 0008 	sub.w	r0, r0, r8
 8001bea:	2864      	cmp	r0, #100	; 0x64
 8001bec:	d9f6      	bls.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001bee:	2003      	movs	r0, #3
}
 8001bf0:	b002      	add	sp, #8
 8001bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bf6:	686a      	ldr	r2, [r5, #4]
 8001bf8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d0c3      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c00:	2001      	movs	r0, #1
 8001c02:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c04:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c06:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c08:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c0e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001c10:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c12:	07d9      	lsls	r1, r3, #31
 8001c14:	d5b8      	bpl.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001c16:	f7fe fd73 	bl	8000700 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001c1e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	6a23      	ldr	r3, [r4, #32]
 8001c22:	079a      	lsls	r2, r3, #30
 8001c24:	d4b0      	bmi.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7fe fd6b 	bl	8000700 <HAL_GetTick>
 8001c2a:	1b80      	subs	r0, r0, r6
 8001c2c:	4540      	cmp	r0, r8
 8001c2e:	d9f7      	bls.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001c30:	e7dd      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40007000 	.word	0x40007000
 8001c3c:	42420440 	.word	0x42420440

08001c40 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c40:	6a03      	ldr	r3, [r0, #32]
{
 8001c42:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c4a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c4c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c4e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c50:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c52:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001c56:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c58:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001c5a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001c5e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c60:	4d0a      	ldr	r5, [pc, #40]	; (8001c8c <TIM_OC1_SetConfig+0x4c>)
 8001c62:	42a8      	cmp	r0, r5
 8001c64:	d10b      	bne.n	8001c7e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001c66:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c68:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001c6c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c6e:	698e      	ldr	r6, [r1, #24]
 8001c70:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c72:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c76:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c78:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c7c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c7e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c80:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c82:	684a      	ldr	r2, [r1, #4]
 8001c84:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c86:	6203      	str	r3, [r0, #32]
 8001c88:	bd70      	pop	{r4, r5, r6, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40012c00 	.word	0x40012c00

08001c90 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c90:	6a03      	ldr	r3, [r0, #32]
{
 8001c92:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c98:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c9a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c9c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c9e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ca0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ca2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001ca6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ca8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001caa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001cae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001cb2:	4d0b      	ldr	r5, [pc, #44]	; (8001ce0 <TIM_OC3_SetConfig+0x50>)
 8001cb4:	42a8      	cmp	r0, r5
 8001cb6:	d10d      	bne.n	8001cd4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001cb8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001cba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001cbe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001cc2:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001cc4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001cc6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001cca:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ccc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001cd0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cd4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cd6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001cd8:	684a      	ldr	r2, [r1, #4]
 8001cda:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cdc:	6203      	str	r3, [r0, #32]
 8001cde:	bd70      	pop	{r4, r5, r6, pc}
 8001ce0:	40012c00 	.word	0x40012c00

08001ce4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ce4:	6a03      	ldr	r3, [r0, #32]
{
 8001ce6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cf0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cf2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cf4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001cf6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cfa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001cfe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001d00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d04:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d08:	4d06      	ldr	r5, [pc, #24]	; (8001d24 <TIM_OC4_SetConfig+0x40>)
 8001d0a:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d0c:	bf02      	ittt	eq
 8001d0e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001d10:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d14:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d18:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d1a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001d1c:	684a      	ldr	r2, [r1, #4]
 8001d1e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d20:	6203      	str	r3, [r0, #32]
 8001d22:	bd30      	pop	{r4, r5, pc}
 8001d24:	40012c00 	.word	0x40012c00

08001d28 <HAL_TIM_Base_MspInit>:
 8001d28:	4770      	bx	lr

08001d2a <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d30:	6803      	ldr	r3, [r0, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d38:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001d3a:	bf1e      	ittt	ne
 8001d3c:	681a      	ldrne	r2, [r3, #0]
 8001d3e:	f042 0201 	orrne.w	r2, r2, #1
 8001d42:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	4770      	bx	lr

08001d4e <HAL_TIM_PWM_MspInit>:
 8001d4e:	4770      	bx	lr

08001d50 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d50:	4a1a      	ldr	r2, [pc, #104]	; (8001dbc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001d52:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d54:	4290      	cmp	r0, r2
 8001d56:	d00a      	beq.n	8001d6e <TIM_Base_SetConfig+0x1e>
 8001d58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d5c:	d007      	beq.n	8001d6e <TIM_Base_SetConfig+0x1e>
 8001d5e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d62:	4290      	cmp	r0, r2
 8001d64:	d003      	beq.n	8001d6e <TIM_Base_SetConfig+0x1e>
 8001d66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d6a:	4290      	cmp	r0, r2
 8001d6c:	d115      	bne.n	8001d9a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001d6e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d74:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d76:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <TIM_Base_SetConfig+0x6c>)
 8001d78:	4290      	cmp	r0, r2
 8001d7a:	d00a      	beq.n	8001d92 <TIM_Base_SetConfig+0x42>
 8001d7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d80:	d007      	beq.n	8001d92 <TIM_Base_SetConfig+0x42>
 8001d82:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d86:	4290      	cmp	r0, r2
 8001d88:	d003      	beq.n	8001d92 <TIM_Base_SetConfig+0x42>
 8001d8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d8e:	4290      	cmp	r0, r2
 8001d90:	d103      	bne.n	8001d9a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d92:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d98:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d9a:	694a      	ldr	r2, [r1, #20]
 8001d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001da0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001da2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001da4:	688b      	ldr	r3, [r1, #8]
 8001da6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001da8:	680b      	ldr	r3, [r1, #0]
 8001daa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <TIM_Base_SetConfig+0x6c>)
 8001dae:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001db0:	bf04      	itt	eq
 8001db2:	690b      	ldreq	r3, [r1, #16]
 8001db4:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001db6:	2301      	movs	r3, #1
 8001db8:	6143      	str	r3, [r0, #20]
 8001dba:	4770      	bx	lr
 8001dbc:	40012c00 	.word	0x40012c00

08001dc0 <HAL_TIM_Base_Init>:
{
 8001dc0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	b1a0      	cbz	r0, 8001df0 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001dc6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001dca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dce:	b91b      	cbnz	r3, 8001dd8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001dd0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001dd4:	f7ff ffa8 	bl	8001d28 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dda:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001ddc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001de0:	1d21      	adds	r1, r4, #4
 8001de2:	f7ff ffb5 	bl	8001d50 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001de6:	2301      	movs	r3, #1
  return HAL_OK;
 8001de8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001dea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001dee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001df0:	2001      	movs	r0, #1
}
 8001df2:	bd10      	pop	{r4, pc}

08001df4 <HAL_TIM_PWM_Init>:
{
 8001df4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001df6:	4604      	mov	r4, r0
 8001df8:	b1a0      	cbz	r0, 8001e24 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001dfa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001dfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e02:	b91b      	cbnz	r3, 8001e0c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e04:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001e08:	f7ff ffa1 	bl	8001d4e <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e0e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001e10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e14:	1d21      	adds	r1, r4, #4
 8001e16:	f7ff ff9b 	bl	8001d50 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001e1a:	2301      	movs	r3, #1
  return HAL_OK;
 8001e1c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e24:	2001      	movs	r0, #1
}
 8001e26:	bd10      	pop	{r4, pc}

08001e28 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e28:	6a03      	ldr	r3, [r0, #32]
{
 8001e2a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e2c:	f023 0310 	bic.w	r3, r3, #16
 8001e30:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001e32:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001e34:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001e36:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e38:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e3a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e3e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e42:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001e44:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e48:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e4c:	4d0b      	ldr	r5, [pc, #44]	; (8001e7c <TIM_OC2_SetConfig+0x54>)
 8001e4e:	42a8      	cmp	r0, r5
 8001e50:	d10d      	bne.n	8001e6e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e52:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e58:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e5c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e5e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e60:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e64:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e6a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001e6e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001e70:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001e72:	684a      	ldr	r2, [r1, #4]
 8001e74:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001e76:	6203      	str	r3, [r0, #32]
 8001e78:	bd70      	pop	{r4, r5, r6, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40012c00 	.word	0x40012c00

08001e80 <HAL_TIM_PWM_ConfigChannel>:
{
 8001e80:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001e82:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001e86:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	f04f 0002 	mov.w	r0, #2
 8001e8e:	d025      	beq.n	8001edc <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001e90:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001e92:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001e96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001e9a:	2a0c      	cmp	r2, #12
 8001e9c:	d818      	bhi.n	8001ed0 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001e9e:	e8df f002 	tbb	[pc, r2]
 8001ea2:	1707      	.short	0x1707
 8001ea4:	171e1717 	.word	0x171e1717
 8001ea8:	172f1717 	.word	0x172f1717
 8001eac:	1717      	.short	0x1717
 8001eae:	40          	.byte	0x40
 8001eaf:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001eb0:	6820      	ldr	r0, [r4, #0]
 8001eb2:	f7ff fec5 	bl	8001c40 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001eb6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001eb8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001eba:	699a      	ldr	r2, [r3, #24]
 8001ebc:	f042 0208 	orr.w	r2, r2, #8
 8001ec0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ec2:	699a      	ldr	r2, [r3, #24]
 8001ec4:	f022 0204 	bic.w	r2, r2, #4
 8001ec8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001eca:	699a      	ldr	r2, [r3, #24]
 8001ecc:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ece:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001ed0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001ed2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001ed4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001ed8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001edc:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ede:	6820      	ldr	r0, [r4, #0]
 8001ee0:	f7ff ffa2 	bl	8001e28 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ee4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ee6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ef8:	699a      	ldr	r2, [r3, #24]
 8001efa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001efe:	e7e6      	b.n	8001ece <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f00:	6820      	ldr	r0, [r4, #0]
 8001f02:	f7ff fec5 	bl	8001c90 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f06:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f08:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f0a:	69da      	ldr	r2, [r3, #28]
 8001f0c:	f042 0208 	orr.w	r2, r2, #8
 8001f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	f022 0204 	bic.w	r2, r2, #4
 8001f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f1a:	69da      	ldr	r2, [r3, #28]
 8001f1c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f1e:	61da      	str	r2, [r3, #28]
      break;
 8001f20:	e7d6      	b.n	8001ed0 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f22:	6820      	ldr	r0, [r4, #0]
 8001f24:	f7ff fede 	bl	8001ce4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f28:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f2a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f2c:	69da      	ldr	r2, [r3, #28]
 8001f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f34:	69da      	ldr	r2, [r3, #28]
 8001f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f42:	e7ec      	b.n	8001f1e <HAL_TIM_PWM_ConfigChannel+0x9e>

08001f44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f44:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f46:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f48:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f4a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f4e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001f52:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f54:	6083      	str	r3, [r0, #8]
 8001f56:	bd10      	pop	{r4, pc}

08001f58 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001f58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001f5c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001f5e:	2b01      	cmp	r3, #1
{
 8001f60:	4604      	mov	r4, r0
 8001f62:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001f66:	d019      	beq.n	8001f9c <HAL_TIM_ConfigClockSource+0x44>
 8001f68:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001f6a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001f6e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001f70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001f74:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001f7e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f80:	680b      	ldr	r3, [r1, #0]
 8001f82:	2b40      	cmp	r3, #64	; 0x40
 8001f84:	d065      	beq.n	8002052 <HAL_TIM_ConfigClockSource+0xfa>
 8001f86:	d815      	bhi.n	8001fb4 <HAL_TIM_ConfigClockSource+0x5c>
 8001f88:	2b10      	cmp	r3, #16
 8001f8a:	d00c      	beq.n	8001fa6 <HAL_TIM_ConfigClockSource+0x4e>
 8001f8c:	d807      	bhi.n	8001f9e <HAL_TIM_ConfigClockSource+0x46>
 8001f8e:	b153      	cbz	r3, 8001fa6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001f90:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001f92:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001f94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001f98:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001f9c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d001      	beq.n	8001fa6 <HAL_TIM_ConfigClockSource+0x4e>
 8001fa2:	2b30      	cmp	r3, #48	; 0x30
 8001fa4:	d1f4      	bne.n	8001f90 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8001fa6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fa8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	e01a      	b.n	8001fea <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001fb4:	2b60      	cmp	r3, #96	; 0x60
 8001fb6:	d034      	beq.n	8002022 <HAL_TIM_ConfigClockSource+0xca>
 8001fb8:	d819      	bhi.n	8001fee <HAL_TIM_ConfigClockSource+0x96>
 8001fba:	2b50      	cmp	r3, #80	; 0x50
 8001fbc:	d1e8      	bne.n	8001f90 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fbe:	684a      	ldr	r2, [r1, #4]
 8001fc0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001fc2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fc4:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fc6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fca:	f025 0501 	bic.w	r5, r5, #1
 8001fce:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fd0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001fd2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fd8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001fdc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001fde:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001fe0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fe6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001fea:	6083      	str	r3, [r0, #8]
 8001fec:	e7d0      	b.n	8001f90 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001fee:	2b70      	cmp	r3, #112	; 0x70
 8001ff0:	d00c      	beq.n	800200c <HAL_TIM_ConfigClockSource+0xb4>
 8001ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ff6:	d1cb      	bne.n	8001f90 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001ff8:	68cb      	ldr	r3, [r1, #12]
 8001ffa:	684a      	ldr	r2, [r1, #4]
 8001ffc:	6889      	ldr	r1, [r1, #8]
 8001ffe:	f7ff ffa1 	bl	8001f44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002002:	6822      	ldr	r2, [r4, #0]
 8002004:	6893      	ldr	r3, [r2, #8]
 8002006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200a:	e008      	b.n	800201e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800200c:	68cb      	ldr	r3, [r1, #12]
 800200e:	684a      	ldr	r2, [r1, #4]
 8002010:	6889      	ldr	r1, [r1, #8]
 8002012:	f7ff ff97 	bl	8001f44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002016:	6822      	ldr	r2, [r4, #0]
 8002018:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800201a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800201e:	6093      	str	r3, [r2, #8]
      break;
 8002020:	e7b6      	b.n	8001f90 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002022:	684d      	ldr	r5, [r1, #4]
 8002024:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002026:	6a01      	ldr	r1, [r0, #32]
 8002028:	f021 0110 	bic.w	r1, r1, #16
 800202c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800202e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002030:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002032:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002036:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800203a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800203e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002042:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002044:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002046:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800204c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002050:	e7cb      	b.n	8001fea <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002052:	684a      	ldr	r2, [r1, #4]
 8002054:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002056:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002058:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800205a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800205e:	f025 0501 	bic.w	r5, r5, #1
 8002062:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002064:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002066:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002068:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800206c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002070:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002072:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002074:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800207a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800207e:	e7b4      	b.n	8001fea <HAL_TIM_ConfigClockSource+0x92>

08002080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002080:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002082:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002084:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002086:	f001 011f 	and.w	r1, r1, #31
 800208a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800208c:	ea23 0304 	bic.w	r3, r3, r4
 8002090:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002092:	6a03      	ldr	r3, [r0, #32]
 8002094:	408a      	lsls	r2, r1
 8002096:	431a      	orrs	r2, r3
 8002098:	6202      	str	r2, [r0, #32]
 800209a:	bd10      	pop	{r4, pc}

0800209c <HAL_TIM_PWM_Start>:
{
 800209c:	b510      	push	{r4, lr}
 800209e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020a0:	2201      	movs	r2, #1
 80020a2:	6800      	ldr	r0, [r0, #0]
 80020a4:	f7ff ffec 	bl	8002080 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <HAL_TIM_PWM_Start+0x34>)
}
 80020ac:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020ae:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80020b0:	bf02      	ittt	eq
 80020b2:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80020b4:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80020b8:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c0:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80020c2:	bf1e      	ittt	ne
 80020c4:	681a      	ldrne	r2, [r3, #0]
 80020c6:	f042 0201 	orrne.w	r2, r2, #1
 80020ca:	601a      	strne	r2, [r3, #0]
}
 80020cc:	bd10      	pop	{r4, pc}
 80020ce:	bf00      	nop
 80020d0:	40012c00 	.word	0x40012c00

080020d4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020d4:	6803      	ldr	r3, [r0, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80020dc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	f022 0201 	bic.w	r2, r2, #1
 80020e4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020e6:	2320      	movs	r3, #32
 80020e8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80020ec:	4770      	bx	lr
	...

080020f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020f0:	b538      	push	{r3, r4, r5, lr}
 80020f2:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020f4:	6803      	ldr	r3, [r0, #0]
 80020f6:	68c1      	ldr	r1, [r0, #12]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	2419      	movs	r4, #25
 80020fc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002100:	430a      	orrs	r2, r1
 8002102:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002104:	6882      	ldr	r2, [r0, #8]
 8002106:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002108:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800210a:	4302      	orrs	r2, r0
 800210c:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 800210e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002112:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002116:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002118:	430a      	orrs	r2, r1
 800211a:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	69a9      	ldr	r1, [r5, #24]
 8002120:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002124:	430a      	orrs	r2, r1
 8002126:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002128:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <UART_SetConfig+0x70>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d114      	bne.n	8002158 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800212e:	f7ff fcff 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002132:	4360      	muls	r0, r4
 8002134:	686c      	ldr	r4, [r5, #4]
 8002136:	2264      	movs	r2, #100	; 0x64
 8002138:	00a4      	lsls	r4, r4, #2
 800213a:	fbb0 f0f4 	udiv	r0, r0, r4
 800213e:	fbb0 f4f2 	udiv	r4, r0, r2
 8002142:	fb02 0314 	mls	r3, r2, r4, r0
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	3332      	adds	r3, #50	; 0x32
 800214a:	fbb3 f3f2 	udiv	r3, r3, r2
 800214e:	6829      	ldr	r1, [r5, #0]
 8002150:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002154:	608b      	str	r3, [r1, #8]
 8002156:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002158:	f7ff fcda 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 800215c:	e7e9      	b.n	8002132 <UART_SetConfig+0x42>
 800215e:	bf00      	nop
 8002160:	40013800 	.word	0x40013800

08002164 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002166:	4604      	mov	r4, r0
 8002168:	460e      	mov	r6, r1
 800216a:	4617      	mov	r7, r2
 800216c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800216e:	6821      	ldr	r1, [r4, #0]
 8002170:	680b      	ldr	r3, [r1, #0]
 8002172:	ea36 0303 	bics.w	r3, r6, r3
 8002176:	d101      	bne.n	800217c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002178:	2000      	movs	r0, #0
}
 800217a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800217c:	1c6b      	adds	r3, r5, #1
 800217e:	d0f7      	beq.n	8002170 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002180:	b995      	cbnz	r5, 80021a8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002182:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002184:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800218c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002196:	2320      	movs	r3, #32
 8002198:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800219c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80021a0:	2300      	movs	r3, #0
 80021a2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80021a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021a8:	f7fe faaa 	bl	8000700 <HAL_GetTick>
 80021ac:	1bc0      	subs	r0, r0, r7
 80021ae:	4285      	cmp	r5, r0
 80021b0:	d2dd      	bcs.n	800216e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80021b2:	e7e6      	b.n	8002182 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080021b4 <HAL_UART_Init>:
{
 80021b4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80021b6:	4604      	mov	r4, r0
 80021b8:	b340      	cbz	r0, 800220c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80021ba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021c2:	b91b      	cbnz	r3, 80021cc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80021c4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80021c8:	f002 fb3c 	bl	8004844 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80021cc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80021ce:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80021d4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80021d6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80021d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021dc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021de:	f7ff ff87 	bl	80020f0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021f4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021fc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80021fe:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002200:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002202:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002206:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800220a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800220c:	2001      	movs	r0, #1
}
 800220e:	bd10      	pop	{r4, pc}

08002210 <HAL_HalfDuplex_Init>:
{
 8002210:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002212:	4604      	mov	r4, r0
 8002214:	b360      	cbz	r0, 8002270 <HAL_HalfDuplex_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002216:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800221a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800221e:	b91b      	cbnz	r3, 8002228 <HAL_HalfDuplex_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002220:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002224:	f002 fb0e 	bl	8004844 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002228:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800222a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800222c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002230:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002232:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002234:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002238:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800223a:	f7ff ff59 	bl	80020f0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800223e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002240:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800224a:	695a      	ldr	r2, [r3, #20]
 800224c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002250:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	f042 0208 	orr.w	r2, r2, #8
 8002258:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002260:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002262:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002264:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002266:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800226a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800226e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002270:	2001      	movs	r0, #1
}
 8002272:	bd10      	pop	{r4, pc}

08002274 <HAL_UART_Transmit>:
{
 8002274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002278:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800227a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800227e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002280:	2b20      	cmp	r3, #32
{
 8002282:	460d      	mov	r5, r1
 8002284:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002286:	d14e      	bne.n	8002326 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8002288:	2900      	cmp	r1, #0
 800228a:	d049      	beq.n	8002320 <HAL_UART_Transmit+0xac>
 800228c:	2a00      	cmp	r2, #0
 800228e:	d047      	beq.n	8002320 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002290:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002294:	2b01      	cmp	r3, #1
 8002296:	d046      	beq.n	8002326 <HAL_UART_Transmit+0xb2>
 8002298:	2301      	movs	r3, #1
 800229a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800229e:	2300      	movs	r3, #0
 80022a0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022a2:	2321      	movs	r3, #33	; 0x21
 80022a4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80022a8:	f7fe fa2a 	bl	8000700 <HAL_GetTick>
 80022ac:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80022ae:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80022b2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022b6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	b96b      	cbnz	r3, 80022d8 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022bc:	463b      	mov	r3, r7
 80022be:	4632      	mov	r2, r6
 80022c0:	2140      	movs	r1, #64	; 0x40
 80022c2:	4620      	mov	r0, r4
 80022c4:	f7ff ff4e 	bl	8002164 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022c8:	b9a8      	cbnz	r0, 80022f6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80022ca:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80022cc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80022d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80022d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80022d8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022da:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29b      	uxth	r3, r3
 80022e0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022e2:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022e4:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022ea:	4620      	mov	r0, r4
 80022ec:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022ee:	d10e      	bne.n	800230e <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022f0:	f7ff ff38 	bl	8002164 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022f4:	b110      	cbz	r0, 80022fc <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80022f6:	2003      	movs	r0, #3
 80022f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80022fc:	882b      	ldrh	r3, [r5, #0]
 80022fe:	6822      	ldr	r2, [r4, #0]
 8002300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002304:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002306:	6923      	ldr	r3, [r4, #16]
 8002308:	b943      	cbnz	r3, 800231c <HAL_UART_Transmit+0xa8>
          pData += 2U;
 800230a:	3502      	adds	r5, #2
 800230c:	e7d3      	b.n	80022b6 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800230e:	f7ff ff29 	bl	8002164 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002312:	2800      	cmp	r0, #0
 8002314:	d1ef      	bne.n	80022f6 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	782a      	ldrb	r2, [r5, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	3501      	adds	r5, #1
 800231e:	e7ca      	b.n	80022b6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002320:	2001      	movs	r0, #1
 8002322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002326:	2002      	movs	r0, #2
}
 8002328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800232c <HAL_UART_Receive>:
{
 800232c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002330:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002332:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8002336:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8002338:	2b20      	cmp	r3, #32
{
 800233a:	460d      	mov	r5, r1
 800233c:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800233e:	d151      	bne.n	80023e4 <HAL_UART_Receive+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8002340:	2900      	cmp	r1, #0
 8002342:	d04c      	beq.n	80023de <HAL_UART_Receive+0xb2>
 8002344:	2a00      	cmp	r2, #0
 8002346:	d04a      	beq.n	80023de <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 8002348:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800234c:	2b01      	cmp	r3, #1
 800234e:	d049      	beq.n	80023e4 <HAL_UART_Receive+0xb8>
 8002350:	2301      	movs	r3, #1
 8002352:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002356:	2300      	movs	r3, #0
 8002358:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800235a:	2322      	movs	r3, #34	; 0x22
 800235c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8002360:	f7fe f9ce 	bl	8000700 <HAL_GetTick>
 8002364:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 8002366:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800236a:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800236e:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8002370:	b280      	uxth	r0, r0
 8002372:	b930      	cbnz	r0, 8002382 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8002374:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002376:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 800237a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 800237e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8002382:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002384:	4632      	mov	r2, r6
      huart->RxXferCount--;
 8002386:	3b01      	subs	r3, #1
 8002388:	b29b      	uxth	r3, r3
 800238a:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800238c:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800238e:	2120      	movs	r1, #32
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002394:	4620      	mov	r0, r4
 8002396:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002398:	d112      	bne.n	80023c0 <HAL_UART_Receive+0x94>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800239a:	f7ff fee3 	bl	8002164 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800239e:	b110      	cbz	r0, 80023a6 <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 80023a0:	2003      	movs	r0, #3
 80023a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023a6:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023a8:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023aa:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023ac:	b922      	cbnz	r2, 80023b8 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023b2:	f825 3b02 	strh.w	r3, [r5], #2
 80023b6:	e7da      	b.n	800236e <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f825 3b01 	strh.w	r3, [r5], #1
 80023be:	e7d6      	b.n	800236e <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023c0:	f7ff fed0 	bl	8002164 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80023c4:	2800      	cmp	r0, #0
 80023c6:	d1eb      	bne.n	80023a0 <HAL_UART_Receive+0x74>
 80023c8:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023ca:	6921      	ldr	r1, [r4, #16]
 80023cc:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023ce:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023d0:	b911      	cbnz	r1, 80023d8 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023d2:	702b      	strb	r3, [r5, #0]
 80023d4:	4615      	mov	r5, r2
 80023d6:	e7ca      	b.n	800236e <HAL_UART_Receive+0x42>
 80023d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023dc:	e7f9      	b.n	80023d2 <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 80023de:	2001      	movs	r0, #1
 80023e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80023e4:	2002      	movs	r0, #2
}
 80023e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080023ea <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80023ea:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	d120      	bne.n	8002434 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80023f2:	b1e9      	cbz	r1, 8002430 <HAL_UART_Receive_IT+0x46>
 80023f4:	b1e2      	cbz	r2, 8002430 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80023f6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d01a      	beq.n	8002434 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80023fe:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8002400:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002402:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002404:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002406:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002408:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800240c:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 800240e:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002410:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8002412:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002416:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800241a:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800241c:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 800241e:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002420:	f041 0101 	orr.w	r1, r1, #1
 8002424:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002426:	68d1      	ldr	r1, [r2, #12]
 8002428:	f041 0120 	orr.w	r1, r1, #32
 800242c:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 800242e:	4770      	bx	lr
      return HAL_ERROR;
 8002430:	2001      	movs	r0, #1
 8002432:	4770      	bx	lr
    return HAL_BUSY;
 8002434:	2002      	movs	r0, #2
}
 8002436:	4770      	bx	lr

08002438 <HAL_UART_TxCpltCallback>:
 8002438:	4770      	bx	lr

0800243a <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800243a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800243e:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002440:	2b22      	cmp	r3, #34	; 0x22
 8002442:	d136      	bne.n	80024b2 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002444:	6883      	ldr	r3, [r0, #8]
 8002446:	6901      	ldr	r1, [r0, #16]
 8002448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244c:	6802      	ldr	r2, [r0, #0]
 800244e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002450:	d123      	bne.n	800249a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002452:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002454:	b9e9      	cbnz	r1, 8002492 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002456:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800245a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800245e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002460:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002462:	3c01      	subs	r4, #1
 8002464:	b2a4      	uxth	r4, r4
 8002466:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002468:	b98c      	cbnz	r4, 800248e <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800246a:	6803      	ldr	r3, [r0, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	f022 0220 	bic.w	r2, r2, #32
 8002472:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800247a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002484:	2320      	movs	r3, #32
 8002486:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800248a:	f000 ff9d 	bl	80033c8 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800248e:	2000      	movs	r0, #0
}
 8002490:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	f823 2b01 	strh.w	r2, [r3], #1
 8002498:	e7e1      	b.n	800245e <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800249a:	b921      	cbnz	r1, 80024a6 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800249c:	1c59      	adds	r1, r3, #1
 800249e:	6852      	ldr	r2, [r2, #4]
 80024a0:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e7dc      	b.n	8002460 <UART_Receive_IT+0x26>
 80024a6:	6852      	ldr	r2, [r2, #4]
 80024a8:	1c59      	adds	r1, r3, #1
 80024aa:	6281      	str	r1, [r0, #40]	; 0x28
 80024ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024b0:	e7f7      	b.n	80024a2 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80024b2:	2002      	movs	r0, #2
 80024b4:	bd10      	pop	{r4, pc}

080024b6 <HAL_UART_ErrorCallback>:
 80024b6:	4770      	bx	lr

080024b8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024b8:	6803      	ldr	r3, [r0, #0]
{
 80024ba:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024bc:	681a      	ldr	r2, [r3, #0]
{
 80024be:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80024c0:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024c2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024c4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80024c6:	d107      	bne.n	80024d8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024c8:	0696      	lsls	r6, r2, #26
 80024ca:	d55a      	bpl.n	8002582 <HAL_UART_IRQHandler+0xca>
 80024cc:	068d      	lsls	r5, r1, #26
 80024ce:	d558      	bpl.n	8002582 <HAL_UART_IRQHandler+0xca>
}
 80024d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80024d4:	f7ff bfb1 	b.w	800243a <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024d8:	f015 0501 	ands.w	r5, r5, #1
 80024dc:	d102      	bne.n	80024e4 <HAL_UART_IRQHandler+0x2c>
 80024de:	f411 7f90 	tst.w	r1, #288	; 0x120
 80024e2:	d04e      	beq.n	8002582 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024e4:	07d3      	lsls	r3, r2, #31
 80024e6:	d505      	bpl.n	80024f4 <HAL_UART_IRQHandler+0x3c>
 80024e8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024ea:	bf42      	ittt	mi
 80024ec:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80024ee:	f043 0301 	orrmi.w	r3, r3, #1
 80024f2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024f4:	0750      	lsls	r0, r2, #29
 80024f6:	d504      	bpl.n	8002502 <HAL_UART_IRQHandler+0x4a>
 80024f8:	b11d      	cbz	r5, 8002502 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002502:	0793      	lsls	r3, r2, #30
 8002504:	d504      	bpl.n	8002510 <HAL_UART_IRQHandler+0x58>
 8002506:	b11d      	cbz	r5, 8002510 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002508:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800250a:	f043 0304 	orr.w	r3, r3, #4
 800250e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002510:	0716      	lsls	r6, r2, #28
 8002512:	d504      	bpl.n	800251e <HAL_UART_IRQHandler+0x66>
 8002514:	b11d      	cbz	r5, 800251e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002516:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002518:	f043 0308 	orr.w	r3, r3, #8
 800251c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800251e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002520:	2b00      	cmp	r3, #0
 8002522:	d066      	beq.n	80025f2 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002524:	0695      	lsls	r5, r2, #26
 8002526:	d504      	bpl.n	8002532 <HAL_UART_IRQHandler+0x7a>
 8002528:	0688      	lsls	r0, r1, #26
 800252a:	d502      	bpl.n	8002532 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800252c:	4620      	mov	r0, r4
 800252e:	f7ff ff84 	bl	800243a <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002532:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002534:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002536:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002538:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800253a:	0711      	lsls	r1, r2, #28
 800253c:	d402      	bmi.n	8002544 <HAL_UART_IRQHandler+0x8c>
 800253e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002542:	d01a      	beq.n	800257a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002544:	f7ff fdc6 	bl	80020d4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	0652      	lsls	r2, r2, #25
 800254e:	d510      	bpl.n	8002572 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002550:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002552:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002558:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800255a:	b150      	cbz	r0, 8002572 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800255c:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <HAL_UART_IRQHandler+0x13c>)
 800255e:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002560:	f7fe fb02 	bl	8000b68 <HAL_DMA_Abort_IT>
 8002564:	2800      	cmp	r0, #0
 8002566:	d044      	beq.n	80025f2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002568:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800256a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800256e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002570:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002572:	4620      	mov	r0, r4
 8002574:	f7ff ff9f 	bl	80024b6 <HAL_UART_ErrorCallback>
 8002578:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800257a:	f7ff ff9c 	bl	80024b6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002580:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002582:	0616      	lsls	r6, r2, #24
 8002584:	d527      	bpl.n	80025d6 <HAL_UART_IRQHandler+0x11e>
 8002586:	060d      	lsls	r5, r1, #24
 8002588:	d525      	bpl.n	80025d6 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800258a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800258e:	2a21      	cmp	r2, #33	; 0x21
 8002590:	d12f      	bne.n	80025f2 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002592:	68a2      	ldr	r2, [r4, #8]
 8002594:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002598:	6a22      	ldr	r2, [r4, #32]
 800259a:	d117      	bne.n	80025cc <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800259c:	8811      	ldrh	r1, [r2, #0]
 800259e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80025a2:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80025a4:	6921      	ldr	r1, [r4, #16]
 80025a6:	b979      	cbnz	r1, 80025c8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80025a8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80025aa:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80025ac:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80025ae:	3a01      	subs	r2, #1
 80025b0:	b292      	uxth	r2, r2
 80025b2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80025b4:	b9ea      	cbnz	r2, 80025f2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025bc:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80025c8:	3201      	adds	r2, #1
 80025ca:	e7ee      	b.n	80025aa <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025cc:	1c51      	adds	r1, r2, #1
 80025ce:	6221      	str	r1, [r4, #32]
 80025d0:	7812      	ldrb	r2, [r2, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	e7ea      	b.n	80025ac <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025d6:	0650      	lsls	r0, r2, #25
 80025d8:	d50b      	bpl.n	80025f2 <HAL_UART_IRQHandler+0x13a>
 80025da:	064a      	lsls	r2, r1, #25
 80025dc:	d509      	bpl.n	80025f2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025de:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80025e0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80025e8:	2320      	movs	r3, #32
 80025ea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80025ee:	f7ff ff23 	bl	8002438 <HAL_UART_TxCpltCallback>
 80025f2:	bd70      	pop	{r4, r5, r6, pc}
 80025f4:	080025f9 	.word	0x080025f9

080025f8 <UART_DMAAbortOnError>:
{
 80025f8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80025fa:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80025fe:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002600:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002602:	f7ff ff58 	bl	80024b6 <HAL_UART_ErrorCallback>
 8002606:	bd08      	pop	{r3, pc}

08002608 <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 8002608:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800260c:	2b01      	cmp	r3, #1
 800260e:	d011      	beq.n	8002634 <HAL_HalfDuplex_EnableReceiver+0x2c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002610:	2324      	movs	r3, #36	; 0x24
  tmpreg = huart->Instance->CR1;
 8002612:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002614:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpreg = huart->Instance->CR1;
 8002618:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800261a:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_RE;
 800261e:	f043 0304 	orr.w	r3, r3, #4
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002622:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002624:	2320      	movs	r3, #32
 8002626:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 800262a:	2300      	movs	r3, #0
 800262c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8002630:	4618      	mov	r0, r3
 8002632:	4770      	bx	lr
  __HAL_LOCK(huart);
 8002634:	2002      	movs	r0, #2
}
 8002636:	4770      	bx	lr

08002638 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002638:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800263a:	780d      	ldrb	r5, [r1, #0]
{
 800263c:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800263e:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8002642:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002644:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002648:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800264c:	0412      	lsls	r2, r2, #16
 800264e:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8002650:	2803      	cmp	r0, #3
 8002652:	d84e      	bhi.n	80026f2 <USB_ActivateEndpoint+0xba>
 8002654:	e8df f000 	tbb	[pc, r0]
 8002658:	47044a02 	.word	0x47044a02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800265c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8002660:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002662:	f248 0480 	movw	r4, #32896	; 0x8080
 8002666:	4322      	orrs	r2, r4
 8002668:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800266c:	780e      	ldrb	r6, [r1, #0]
 800266e:	4dab      	ldr	r5, [pc, #684]	; (800291c <USB_ActivateEndpoint+0x2e4>)
 8002670:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8002674:	4334      	orrs	r4, r6
 8002676:	b292      	uxth	r2, r2
 8002678:	402a      	ands	r2, r5
 800267a:	4322      	orrs	r2, r4
 800267c:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8002680:	7b0c      	ldrb	r4, [r1, #12]
 8002682:	780a      	ldrb	r2, [r1, #0]
 8002684:	2c00      	cmp	r4, #0
 8002686:	f040 8088 	bne.w	800279a <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 800268a:	784e      	ldrb	r6, [r1, #1]
 800268c:	88cc      	ldrh	r4, [r1, #6]
 800268e:	b396      	cbz	r6, 80026f6 <USB_ActivateEndpoint+0xbe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002690:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002694:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002698:	f024 0401 	bic.w	r4, r4, #1
 800269c:	b2b6      	uxth	r6, r6
 800269e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026a2:	b2a4      	uxth	r4, r4
 80026a4:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80026a6:	780c      	ldrb	r4, [r1, #0]
 80026a8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80026ac:	0656      	lsls	r6, r2, #25
 80026ae:	d509      	bpl.n	80026c4 <USB_ActivateEndpoint+0x8c>
 80026b0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80026b4:	b292      	uxth	r2, r2
 80026b6:	402a      	ands	r2, r5
 80026b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026bc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80026c0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80026c4:	78ca      	ldrb	r2, [r1, #3]
 80026c6:	7809      	ldrb	r1, [r1, #0]
 80026c8:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80026ca:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80026ce:	4c94      	ldr	r4, [pc, #592]	; (8002920 <USB_ActivateEndpoint+0x2e8>)
 80026d0:	b292      	uxth	r2, r2
 80026d2:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 80026d6:	d001      	beq.n	80026dc <USB_ActivateEndpoint+0xa4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80026d8:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80026dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026e4:	e0cb      	b.n	800287e <USB_ActivateEndpoint+0x246>
      wEpRegVal |= USB_EP_INTERRUPT;
 80026e6:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80026ea:	e7b9      	b.n	8002660 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80026ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026f0:	e7b6      	b.n	8002660 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 80026f2:	2001      	movs	r0, #1
 80026f4:	e7b5      	b.n	8002662 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80026f6:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80026fa:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80026fe:	f024 0401 	bic.w	r4, r4, #1
 8002702:	b2ad      	uxth	r5, r5
 8002704:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8002708:	b2a4      	uxth	r4, r4
 800270a:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800270c:	780a      	ldrb	r2, [r1, #0]
 800270e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002712:	690d      	ldr	r5, [r1, #16]
 8002714:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002718:	b2b6      	uxth	r6, r6
 800271a:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800271e:	bb5d      	cbnz	r5, 8002778 <USB_ActivateEndpoint+0x140>
 8002720:	5b94      	ldrh	r4, [r2, r6]
 8002722:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8002726:	0424      	lsls	r4, r4, #16
 8002728:	0c24      	lsrs	r4, r4, #16
 800272a:	5394      	strh	r4, [r2, r6]
 800272c:	5b94      	ldrh	r4, [r2, r6]
 800272e:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8002732:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002736:	b2a4      	uxth	r4, r4
 8002738:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800273a:	780c      	ldrb	r4, [r1, #0]
 800273c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002740:	0455      	lsls	r5, r2, #17
 8002742:	d50d      	bpl.n	8002760 <USB_ActivateEndpoint+0x128>
 8002744:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002748:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800274c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002750:	0412      	lsls	r2, r2, #16
 8002752:	0c12      	lsrs	r2, r2, #16
 8002754:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800275c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002760:	7809      	ldrb	r1, [r1, #0]
 8002762:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002766:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800276a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800276e:	0412      	lsls	r2, r2, #16
 8002770:	0c12      	lsrs	r2, r2, #16
 8002772:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002776:	e7b1      	b.n	80026dc <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002778:	2d3e      	cmp	r5, #62	; 0x3e
 800277a:	d805      	bhi.n	8002788 <USB_ActivateEndpoint+0x150>
 800277c:	086c      	lsrs	r4, r5, #1
 800277e:	07ed      	lsls	r5, r5, #31
 8002780:	bf48      	it	mi
 8002782:	3401      	addmi	r4, #1
 8002784:	02a4      	lsls	r4, r4, #10
 8002786:	e7d6      	b.n	8002736 <USB_ActivateEndpoint+0xfe>
 8002788:	096f      	lsrs	r7, r5, #5
 800278a:	06ec      	lsls	r4, r5, #27
 800278c:	4c65      	ldr	r4, [pc, #404]	; (8002924 <USB_ActivateEndpoint+0x2ec>)
 800278e:	bf08      	it	eq
 8002790:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002794:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 8002798:	e7cd      	b.n	8002736 <USB_ActivateEndpoint+0xfe>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800279a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800279e:	b2a4      	uxth	r4, r4
 80027a0:	402c      	ands	r4, r5
 80027a2:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80027a6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80027aa:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80027ae:	780a      	ldrb	r2, [r1, #0]
 80027b0:	890c      	ldrh	r4, [r1, #8]
 80027b2:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80027b6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80027ba:	f024 0401 	bic.w	r4, r4, #1
 80027be:	b2b6      	uxth	r6, r6
 80027c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027c4:	b2a4      	uxth	r4, r4
 80027c6:	5394      	strh	r4, [r2, r6]
 80027c8:	780a      	ldrb	r2, [r1, #0]
 80027ca:	894c      	ldrh	r4, [r1, #10]
 80027cc:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80027d0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80027d4:	f024 0401 	bic.w	r4, r4, #1
 80027d8:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 80027dc:	b2a4      	uxth	r4, r4
 80027de:	b2b6      	uxth	r6, r6
 80027e0:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 80027e2:	784a      	ldrb	r2, [r1, #1]
 80027e4:	780c      	ldrb	r4, [r1, #0]
 80027e6:	2a00      	cmp	r2, #0
 80027e8:	d14c      	bne.n	8002884 <USB_ActivateEndpoint+0x24c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80027ea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027ee:	0452      	lsls	r2, r2, #17
 80027f0:	d509      	bpl.n	8002806 <USB_ActivateEndpoint+0x1ce>
 80027f2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027f6:	b292      	uxth	r2, r2
 80027f8:	402a      	ands	r2, r5
 80027fa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80027fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002802:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002806:	780c      	ldrb	r4, [r1, #0]
 8002808:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800280c:	0657      	lsls	r7, r2, #25
 800280e:	d50d      	bpl.n	800282c <USB_ActivateEndpoint+0x1f4>
 8002810:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002814:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002818:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800281c:	0412      	lsls	r2, r2, #16
 800281e:	0c12      	lsrs	r2, r2, #16
 8002820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002824:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002828:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800282c:	780c      	ldrb	r4, [r1, #0]
 800282e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002832:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002836:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800283a:	0412      	lsls	r2, r2, #16
 800283c:	0c12      	lsrs	r2, r2, #16
 800283e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002842:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002846:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800284a:	f248 0480 	movw	r4, #32896	; 0x8080
 800284e:	780d      	ldrb	r5, [r1, #0]
 8002850:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002854:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002858:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800285c:	0412      	lsls	r2, r2, #16
 800285e:	0c12      	lsrs	r2, r2, #16
 8002860:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002864:	4322      	orrs	r2, r4
 8002866:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800286a:	7809      	ldrb	r1, [r1, #0]
 800286c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002870:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002878:	0412      	lsls	r2, r2, #16
 800287a:	0c12      	lsrs	r2, r2, #16
 800287c:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800287e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 8002882:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002884:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002888:	0456      	lsls	r6, r2, #17
 800288a:	d509      	bpl.n	80028a0 <USB_ActivateEndpoint+0x268>
 800288c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002890:	b292      	uxth	r2, r2
 8002892:	402a      	ands	r2, r5
 8002894:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002898:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800289c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028a0:	780c      	ldrb	r4, [r1, #0]
 80028a2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80028a6:	0652      	lsls	r2, r2, #25
 80028a8:	d50d      	bpl.n	80028c6 <USB_ActivateEndpoint+0x28e>
 80028aa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80028ae:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80028b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028b6:	0412      	lsls	r2, r2, #16
 80028b8:	0c12      	lsrs	r2, r2, #16
 80028ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028be:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80028c2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80028c6:	780c      	ldrb	r4, [r1, #0]
 80028c8:	4d15      	ldr	r5, [pc, #84]	; (8002920 <USB_ActivateEndpoint+0x2e8>)
 80028ca:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80028ce:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80028d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028d6:	0412      	lsls	r2, r2, #16
 80028d8:	0c12      	lsrs	r2, r2, #16
 80028da:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80028de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028e2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80028e6:	78ca      	ldrb	r2, [r1, #3]
 80028e8:	780c      	ldrb	r4, [r1, #0]
 80028ea:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80028ec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80028f0:	b292      	uxth	r2, r2
 80028f2:	ea02 0205 	and.w	r2, r2, r5
 80028f6:	bf18      	it	ne
 80028f8:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80028fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002900:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002904:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002908:	7809      	ldrb	r1, [r1, #0]
 800290a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800290e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002912:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002916:	0412      	lsls	r2, r2, #16
 8002918:	0c12      	lsrs	r2, r2, #16
 800291a:	e6df      	b.n	80026dc <USB_ActivateEndpoint+0xa4>
 800291c:	ffff8f8f 	.word	0xffff8f8f
 8002920:	ffff8fbf 	.word	0xffff8fbf
 8002924:	ffff8000 	.word	0xffff8000

08002928 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8002928:	784b      	ldrb	r3, [r1, #1]
 800292a:	780a      	ldrb	r2, [r1, #0]
 800292c:	b18b      	cbz	r3, 8002952 <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800292e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800293a:	041b      	lsls	r3, r3, #16
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800294e:	2000      	movs	r0, #0
 8002950:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002952:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	041b      	lsls	r3, r3, #16
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002966:	e7ec      	b.n	8002942 <USB_EPSetStall+0x1a>

08002968 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002968:	7b0b      	ldrb	r3, [r1, #12]
 800296a:	bb43      	cbnz	r3, 80029be <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 800296c:	784b      	ldrb	r3, [r1, #1]
 800296e:	780a      	ldrb	r2, [r1, #0]
 8002970:	b33b      	cbz	r3, 80029c2 <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002972:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002976:	065b      	lsls	r3, r3, #25
 8002978:	d50d      	bpl.n	8002996 <USB_EPClearStall+0x2e>
 800297a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800297e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002986:	041b      	lsls	r3, r3, #16
 8002988:	0c1b      	lsrs	r3, r3, #16
 800298a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002992:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002996:	78cb      	ldrb	r3, [r1, #3]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d010      	beq.n	80029be <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800299c:	780a      	ldrb	r2, [r1, #0]
 800299e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80029be:	2000      	movs	r0, #0
 80029c0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029c6:	045b      	lsls	r3, r3, #17
 80029c8:	d50d      	bpl.n	80029e6 <USB_EPClearStall+0x7e>
 80029ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029e6:	780a      	ldrb	r2, [r1, #0]
 80029e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	0c1b      	lsrs	r3, r3, #16
 80029f8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80029fc:	e7d9      	b.n	80029b2 <USB_EPClearStall+0x4a>

080029fe <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80029fe:	b911      	cbnz	r1, 8002a06 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8002a06:	2000      	movs	r0, #0
 8002a08:	4770      	bx	lr

08002a0a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002a0a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002a0e:	b280      	uxth	r0, r0
 8002a10:	4770      	bx	lr

08002a12 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002a12:	2000      	movs	r0, #0
 8002a14:	4770      	bx	lr

08002a16 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002a16:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002a1a:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002a1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d100      	bne.n	8002a2c <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8002a2a:	4770      	bx	lr
 8002a2c:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8002a30:	f822 0b04 	strh.w	r0, [r2], #4
 8002a34:	e7f7      	b.n	8002a26 <USB_WritePMA+0x10>
	...

08002a38 <USB_EPStartXfer>:
{
 8002a38:	b570      	push	{r4, r5, r6, lr}
 8002a3a:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8002a3c:	7849      	ldrb	r1, [r1, #1]
{
 8002a3e:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8002a40:	2901      	cmp	r1, #1
 8002a42:	69aa      	ldr	r2, [r5, #24]
 8002a44:	692b      	ldr	r3, [r5, #16]
 8002a46:	7b28      	ldrb	r0, [r5, #12]
 8002a48:	d166      	bne.n	8002b18 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8002a4a:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8002a4c:	bf9d      	ittte	ls
 8002a4e:	2300      	movls	r3, #0
 8002a50:	61ab      	strls	r3, [r5, #24]
 8002a52:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8002a54:	1ad2      	subhi	r2, r2, r3
 8002a56:	bf88      	it	hi
 8002a58:	61aa      	strhi	r2, [r5, #24]
 8002a5a:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8002a5c:	bb08      	cbnz	r0, 8002aa2 <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002a5e:	4633      	mov	r3, r6
 8002a60:	88ea      	ldrh	r2, [r5, #6]
 8002a62:	6969      	ldr	r1, [r5, #20]
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7ff ffd6 	bl	8002a16 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002a6a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002a6e:	782a      	ldrb	r2, [r5, #0]
 8002a70:	b299      	uxth	r1, r3
 8002a72:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	440b      	add	r3, r1
 8002a7a:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002a7c:	782a      	ldrb	r2, [r5, #0]
 8002a7e:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a8a:	041b      	lsls	r3, r3, #16
 8002a8c:	0c1b      	lsrs	r3, r3, #16
 8002a8e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002aa2:	782b      	ldrb	r3, [r5, #0]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002aa4:	4620      	mov	r0, r4
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002aa6:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002ab0:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002ab4:	b291      	uxth	r1, r2
 8002ab6:	bf15      	itete	ne
 8002ab8:	f204 420c 	addwne	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002abc:	f204 4204 	addweq	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002ac0:	1852      	addne	r2, r2, r1
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002ac2:	1852      	addeq	r2, r2, r1
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002ac4:	bf15      	itete	ne
 8002ac6:	52d6      	strhne	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002ac8:	52d6      	strheq	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 8002aca:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8002acc:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ace:	4633      	mov	r3, r6
 8002ad0:	6969      	ldr	r1, [r5, #20]
 8002ad2:	f7ff ffa0 	bl	8002a16 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002ad6:	786b      	ldrb	r3, [r5, #1]
 8002ad8:	782a      	ldrb	r2, [r5, #0]
 8002ada:	b973      	cbnz	r3, 8002afa <USB_EPStartXfer+0xc2>
 8002adc:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae8:	041b      	lsls	r3, r3, #16
 8002aea:	0c1b      	lsrs	r3, r3, #16
 8002aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002af4:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8002af8:	e7c0      	b.n	8002a7c <USB_EPStartXfer+0x44>
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d1be      	bne.n	8002a7c <USB_EPStartXfer+0x44>
 8002afe:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0a:	041b      	lsls	r3, r3, #16
 8002b0c:	0c1b      	lsrs	r3, r3, #16
 8002b0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b16:	e7ed      	b.n	8002af4 <USB_EPStartXfer+0xbc>
    if (ep->xfer_len > ep->maxpacket)
 8002b18:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8002b1a:	bf93      	iteet	ls
 8002b1c:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8002b1e:	1ad2      	subhi	r2, r2, r3
 8002b20:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8002b22:	61ab      	strls	r3, [r5, #24]
 8002b24:	bf98      	it	ls
 8002b26:	4613      	movls	r3, r2
 8002b28:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8002b2a:	b9b0      	cbnz	r0, 8002b5a <USB_EPStartXfer+0x122>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002b2c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8002b30:	0112      	lsls	r2, r2, #4
 8002b32:	b281      	uxth	r1, r0
 8002b34:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8002b38:	4408      	add	r0, r1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d144      	bne.n	8002bc8 <USB_EPStartXfer+0x190>
 8002b3e:	5a83      	ldrh	r3, [r0, r2]
 8002b40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b44:	041b      	lsls	r3, r3, #16
 8002b46:	0c1b      	lsrs	r3, r3, #16
 8002b48:	5283      	strh	r3, [r0, r2]
 8002b4a:	5a83      	ldrh	r3, [r0, r2]
 8002b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	5283      	strh	r3, [r0, r2]
 8002b58:	e03f      	b.n	8002bda <USB_EPStartXfer+0x1a2>
 8002b5a:	b9a1      	cbnz	r1, 8002b86 <USB_EPStartXfer+0x14e>
 8002b5c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	b281      	uxth	r1, r0
 8002b64:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8002b68:	4408      	add	r0, r1
 8002b6a:	b9e3      	cbnz	r3, 8002ba6 <USB_EPStartXfer+0x16e>
 8002b6c:	5a81      	ldrh	r1, [r0, r2]
 8002b6e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002b72:	0409      	lsls	r1, r1, #16
 8002b74:	0c09      	lsrs	r1, r1, #16
 8002b76:	5281      	strh	r1, [r0, r2]
 8002b78:	5a81      	ldrh	r1, [r0, r2]
 8002b7a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002b7e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002b82:	b289      	uxth	r1, r1
 8002b84:	5281      	strh	r1, [r0, r2]
 8002b86:	7869      	ldrb	r1, [r5, #1]
 8002b88:	782a      	ldrb	r2, [r5, #0]
 8002b8a:	2900      	cmp	r1, #0
 8002b8c:	d0ce      	beq.n	8002b2c <USB_EPStartXfer+0xf4>
 8002b8e:	2901      	cmp	r1, #1
 8002b90:	d123      	bne.n	8002bda <USB_EPStartXfer+0x1a2>
 8002b92:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b288      	uxth	r0, r1
 8002b9a:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8002b9e:	4401      	add	r1, r0
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	528b      	strh	r3, [r1, r2]
 8002ba4:	e019      	b.n	8002bda <USB_EPStartXfer+0x1a2>
 8002ba6:	2b3e      	cmp	r3, #62	; 0x3e
 8002ba8:	d805      	bhi.n	8002bb6 <USB_EPStartXfer+0x17e>
 8002baa:	0859      	lsrs	r1, r3, #1
 8002bac:	07de      	lsls	r6, r3, #31
 8002bae:	bf48      	it	mi
 8002bb0:	3101      	addmi	r1, #1
 8002bb2:	0289      	lsls	r1, r1, #10
 8002bb4:	e7e5      	b.n	8002b82 <USB_EPStartXfer+0x14a>
 8002bb6:	095e      	lsrs	r6, r3, #5
 8002bb8:	06d9      	lsls	r1, r3, #27
 8002bba:	4912      	ldr	r1, [pc, #72]	; (8002c04 <USB_EPStartXfer+0x1cc>)
 8002bbc:	bf08      	it	eq
 8002bbe:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002bc2:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002bc6:	e7dc      	b.n	8002b82 <USB_EPStartXfer+0x14a>
 8002bc8:	2b3e      	cmp	r3, #62	; 0x3e
 8002bca:	d812      	bhi.n	8002bf2 <USB_EPStartXfer+0x1ba>
 8002bcc:	0859      	lsrs	r1, r3, #1
 8002bce:	07de      	lsls	r6, r3, #31
 8002bd0:	bf48      	it	mi
 8002bd2:	3101      	addmi	r1, #1
 8002bd4:	0289      	lsls	r1, r1, #10
 8002bd6:	b289      	uxth	r1, r1
 8002bd8:	5281      	strh	r1, [r0, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002bda:	782a      	ldrb	r2, [r5, #0]
 8002bdc:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	0c1b      	lsrs	r3, r3, #16
 8002bec:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002bf0:	e74f      	b.n	8002a92 <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002bf2:	0959      	lsrs	r1, r3, #5
 8002bf4:	06db      	lsls	r3, r3, #27
 8002bf6:	4b03      	ldr	r3, [pc, #12]	; (8002c04 <USB_EPStartXfer+0x1cc>)
 8002bf8:	bf08      	it	eq
 8002bfa:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002bfe:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002c02:	e7a7      	b.n	8002b54 <USB_EPStartXfer+0x11c>
 8002c04:	ffff8000 	.word	0xffff8000

08002c08 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002c08:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8002c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002c0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002c12:	085d      	lsrs	r5, r3, #1
 8002c14:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002c16:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8002c18:	462e      	mov	r6, r5
 8002c1a:	3002      	adds	r0, #2
 8002c1c:	b936      	cbnz	r6, 8002c2c <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8002c1e:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8002c20:	bf44      	itt	mi
 8002c22:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002c26:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 8002c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8002c2c:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8002c30:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8002c32:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002c34:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002c38:	0a24      	lsrs	r4, r4, #8
 8002c3a:	f800 4c01 	strb.w	r4, [r0, #-1]
 8002c3e:	e7ec      	b.n	8002c1a <USB_ReadPMA+0x12>

08002c40 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002c40:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002c42:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002c46:	b90b      	cbnz	r3, 8002c4c <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002c48:	2002      	movs	r0, #2
 8002c4a:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4798      	blx	r3
 8002c50:	2800      	cmp	r0, #0
 8002c52:	d1f9      	bne.n	8002c48 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002c54:	bd08      	pop	{r3, pc}

08002c56 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002c56:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002c58:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4798      	blx	r3

  return USBD_OK;
}
 8002c60:	2000      	movs	r0, #0
 8002c62:	bd08      	pop	{r3, pc}

08002c64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002c64:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002c66:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8002c6a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	f000 fae1 	bl	8003234 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002c72:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002c74:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8002c78:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8002c7c:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8002c80:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8002c84:	f001 031f 	and.w	r3, r1, #31
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d00e      	beq.n	8002caa <USBD_LL_SetupStage+0x46>
 8002c8c:	d307      	bcc.n	8002c9e <USBD_LL_SetupStage+0x3a>
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d010      	beq.n	8002cb4 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002c92:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002c96:	4620      	mov	r0, r4
 8002c98:	f001 ff5a 	bl	8004b50 <USBD_LL_StallEP>
      break;
 8002c9c:	e003      	b.n	8002ca6 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f000 f8f5 	bl	8002e90 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8002caa:	4629      	mov	r1, r5
 8002cac:	4620      	mov	r0, r4
 8002cae:	f000 fa13 	bl	80030d8 <USBD_StdItfReq>
      break;
 8002cb2:	e7f8      	b.n	8002ca6 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f000 fa33 	bl	8003122 <USBD_StdEPReq>
      break;
 8002cbc:	e7f3      	b.n	8002ca6 <USBD_LL_SetupStage+0x42>

08002cbe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002cbe:	b570      	push	{r4, r5, r6, lr}
 8002cc0:	4605      	mov	r5, r0
 8002cc2:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002cc4:	bb49      	cbnz	r1, 8002d1a <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002cc6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d11e      	bne.n	8002d0c <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8002cce:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8002cd2:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d90b      	bls.n	8002cf2 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8002cda:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8002cdc:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8002cde:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8002ce2:	bf8c      	ite	hi
 8002ce4:	b29a      	uxthhi	r2, r3
 8002ce6:	b292      	uxthls	r2, r2
 8002ce8:	4631      	mov	r1, r6
 8002cea:	f000 facc 	bl	8003286 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002cee:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8002cf0:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8002cf2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	b123      	cbz	r3, 8002d04 <USBD_LL_DataOutStage+0x46>
 8002cfa:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002cfe:	2a03      	cmp	r2, #3
 8002d00:	d100      	bne.n	8002d04 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8002d02:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002d04:	4628      	mov	r0, r5
 8002d06:	f000 fac6 	bl	8003296 <USBD_CtlSendStatus>
 8002d0a:	e7f0      	b.n	8002cee <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d1ee      	bne.n	8002cee <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8002d10:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8002d14:	f001 ff1c 	bl	8004b50 <USBD_LL_StallEP>
 8002d18:	e7e9      	b.n	8002cee <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8002d1a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	b12b      	cbz	r3, 8002d2e <USBD_LL_DataOutStage+0x70>
 8002d22:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002d26:	2a03      	cmp	r2, #3
 8002d28:	d101      	bne.n	8002d2e <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8002d2a:	4798      	blx	r3
 8002d2c:	e7df      	b.n	8002cee <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8002d2e:	2002      	movs	r0, #2
}
 8002d30:	bd70      	pop	{r4, r5, r6, pc}

08002d32 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8002d32:	b570      	push	{r4, r5, r6, lr}
 8002d34:	4613      	mov	r3, r2
 8002d36:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002d38:	460e      	mov	r6, r1
 8002d3a:	2900      	cmp	r1, #0
 8002d3c:	d147      	bne.n	8002dce <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002d3e:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8002d42:	2a02      	cmp	r2, #2
 8002d44:	d13c      	bne.n	8002dc0 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8002d46:	6a05      	ldr	r5, [r0, #32]
 8002d48:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002d4a:	4295      	cmp	r5, r2
 8002d4c:	d913      	bls.n	8002d76 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8002d4e:	1aaa      	subs	r2, r5, r2
 8002d50:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002d52:	4619      	mov	r1, r3
 8002d54:	b292      	uxth	r2, r2
 8002d56:	f000 fa8e 	bl	8003276 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002d5a:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4620      	mov	r0, r4
 8002d62:	f001 ff3d 	bl	8004be0 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002d66:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d13a      	bne.n	8002de6 <USBD_LL_DataInStage+0xb4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002d70:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8002d74:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8002d76:	69c3      	ldr	r3, [r0, #28]
 8002d78:	fbb3 f5f2 	udiv	r5, r3, r2
 8002d7c:	fb02 3515 	mls	r5, r2, r5, r3
 8002d80:	b965      	cbnz	r5, 8002d9c <USBD_LL_DataInStage+0x6a>
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d80a      	bhi.n	8002d9c <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8002d86:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d206      	bcs.n	8002d9c <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002d8e:	462a      	mov	r2, r5
 8002d90:	f000 fa71 	bl	8003276 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002d94:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002d98:	462b      	mov	r3, r5
 8002d9a:	e7df      	b.n	8002d5c <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8002d9c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	b12b      	cbz	r3, 8002db0 <USBD_LL_DataInStage+0x7e>
 8002da4:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8002da8:	2a03      	cmp	r2, #3
 8002daa:	d101      	bne.n	8002db0 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8002dac:	4620      	mov	r0, r4
 8002dae:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002db0:	2180      	movs	r1, #128	; 0x80
 8002db2:	4620      	mov	r0, r4
 8002db4:	f001 fecc 	bl	8004b50 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002db8:	4620      	mov	r0, r4
 8002dba:	f000 fa77 	bl	80032ac <USBD_CtlReceiveStatus>
 8002dbe:	e7d2      	b.n	8002d66 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002dc0:	f032 0304 	bics.w	r3, r2, #4
 8002dc4:	d1cf      	bne.n	8002d66 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	f001 fec2 	bl	8004b50 <USBD_LL_StallEP>
 8002dcc:	e7cb      	b.n	8002d66 <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8002dce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	b133      	cbz	r3, 8002de4 <USBD_LL_DataInStage+0xb2>
 8002dd6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002dda:	2a03      	cmp	r2, #3
 8002ddc:	d102      	bne.n	8002de4 <USBD_LL_DataInStage+0xb2>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8002dde:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002de0:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8002de2:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8002de4:	2002      	movs	r0, #2
}
 8002de6:	bd70      	pop	{r4, r5, r6, pc}

08002de8 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002de8:	2200      	movs	r2, #0
{
 8002dea:	b570      	push	{r4, r5, r6, lr}
 8002dec:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002dee:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002df0:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002df2:	4611      	mov	r1, r2
 8002df4:	2340      	movs	r3, #64	; 0x40
 8002df6:	f001 fe9b 	bl	8004b30 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002dfa:	4633      	mov	r3, r6
 8002dfc:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002dfe:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002e02:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002e06:	2200      	movs	r2, #0
 8002e08:	4620      	mov	r0, r4
 8002e0a:	f001 fe91 	bl	8004b30 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8002e0e:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002e10:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002e14:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002e16:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002e18:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8002e1c:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8002e20:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002e22:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8002e26:	b123      	cbz	r3, 8002e32 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002e28:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002e32:	2000      	movs	r0, #0
 8002e34:	bd70      	pop	{r4, r5, r6, pc}

08002e36 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002e36:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8002e38:	2000      	movs	r0, #0
 8002e3a:	4770      	bx	lr

08002e3c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002e3c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002e40:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002e44:	2304      	movs	r3, #4
 8002e46:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	4770      	bx	lr

08002e4e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8002e4e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002e52:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8002e54:	bf04      	itt	eq
 8002e56:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8002e5a:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8002e5e:	2000      	movs	r0, #0
 8002e60:	4770      	bx	lr

08002e62 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8002e62:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e64:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002e68:	2a03      	cmp	r2, #3
 8002e6a:	d104      	bne.n	8002e76 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8002e6c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	b103      	cbz	r3, 8002e76 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002e74:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8002e76:	2000      	movs	r0, #0
 8002e78:	bd08      	pop	{r3, pc}

08002e7a <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8002e7a:	b510      	push	{r4, lr}
 8002e7c:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8002e7e:	2180      	movs	r1, #128	; 0x80
 8002e80:	f001 fe66 	bl	8004b50 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002e84:	4620      	mov	r0, r4
}
 8002e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	f001 be60 	b.w	8004b50 <USBD_LL_StallEP>

08002e90 <USBD_StdDevReq>:
{
 8002e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e92:	780b      	ldrb	r3, [r1, #0]
{
 8002e94:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002e9a:	2b20      	cmp	r3, #32
{
 8002e9c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e9e:	d012      	beq.n	8002ec6 <USBD_StdDevReq+0x36>
 8002ea0:	2b40      	cmp	r3, #64	; 0x40
 8002ea2:	d010      	beq.n	8002ec6 <USBD_StdDevReq+0x36>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d15c      	bne.n	8002f62 <USBD_StdDevReq+0xd2>
      switch (req->bRequest)
 8002ea8:	784b      	ldrb	r3, [r1, #1]
 8002eaa:	2b09      	cmp	r3, #9
 8002eac:	d858      	bhi.n	8002f60 <USBD_StdDevReq+0xd0>
 8002eae:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002eb2:	00e9      	.short	0x00e9
 8002eb4:	00570105 	.word	0x00570105
 8002eb8:	005700fe 	.word	0x005700fe
 8002ebc:	00130084 	.word	0x00130084
 8002ec0:	00d20057 	.word	0x00d20057
 8002ec4:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 8002ec6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	4620      	mov	r0, r4
 8002ed0:	4798      	blx	r3
}
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	b003      	add	sp, #12
 8002ed6:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8002ede:	884b      	ldrh	r3, [r1, #2]
 8002ee0:	0a1a      	lsrs	r2, r3, #8
 8002ee2:	3a01      	subs	r2, #1
 8002ee4:	2a06      	cmp	r2, #6
 8002ee6:	d83b      	bhi.n	8002f60 <USBD_StdDevReq+0xd0>
 8002ee8:	e8df f002 	tbb	[pc, r2]
 8002eec:	3a2d2004 	.word	0x3a2d2004
 8002ef0:	523a      	.short	0x523a
 8002ef2:	5c          	.byte	0x5c
 8002ef3:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002ef4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002ef8:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002efa:	f10d 0106 	add.w	r1, sp, #6
 8002efe:	7c20      	ldrb	r0, [r4, #16]
 8002f00:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8002f02:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002f06:	b152      	cbz	r2, 8002f1e <USBD_StdDevReq+0x8e>
 8002f08:	88eb      	ldrh	r3, [r5, #6]
 8002f0a:	b143      	cbz	r3, 8002f1e <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	bf28      	it	cs
 8002f10:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002f12:	4601      	mov	r1, r0
 8002f14:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8002f16:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002f1a:	f000 f99f 	bl	800325c <USBD_CtlSendData>
    if (req->wLength == 0U)
 8002f1e:	88eb      	ldrh	r3, [r5, #6]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1d6      	bne.n	8002ed2 <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8002f24:	4620      	mov	r0, r4
 8002f26:	f000 f9b6 	bl	8003296 <USBD_CtlSendStatus>
 8002f2a:	e7d2      	b.n	8002ed2 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f2c:	7c02      	ldrb	r2, [r0, #16]
 8002f2e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002f32:	b932      	cbnz	r2, 8002f42 <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002f36:	f10d 0006 	add.w	r0, sp, #6
 8002f3a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002f3c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002f3e:	7043      	strb	r3, [r0, #1]
 8002f40:	e7df      	b.n	8002f02 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	e7f7      	b.n	8002f36 <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b05      	cmp	r3, #5
 8002f4a:	d809      	bhi.n	8002f60 <USBD_StdDevReq+0xd0>
 8002f4c:	e8df f003 	tbb	[pc, r3]
 8002f50:	14100c03 	.word	0x14100c03
 8002f54:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8002f56:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002f5a:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1cc      	bne.n	8002efa <USBD_StdDevReq+0x6a>
          USBD_CtlError(pdev, req);
 8002f60:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 8002f62:	f7ff ff8a 	bl	8002e7a <USBD_CtlError.constprop.1>
  return ret;
 8002f66:	e7b4      	b.n	8002ed2 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8002f68:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	e7f5      	b.n	8002f5c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8002f70:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	e7f1      	b.n	8002f5c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8002f78:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	e7ed      	b.n	8002f5c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8002f80:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	e7e9      	b.n	8002f5c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002f88:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	e7e5      	b.n	8002f5c <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f90:	7c03      	ldrb	r3, [r0, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1e4      	bne.n	8002f60 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002f96:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002f9a:	f10d 0006 	add.w	r0, sp, #6
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa0:	4798      	blx	r3
 8002fa2:	e7ae      	b.n	8002f02 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002fa4:	7c03      	ldrb	r3, [r0, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1da      	bne.n	8002f60 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002faa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002fae:	f10d 0006 	add.w	r0, sp, #6
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002fb6:	2307      	movs	r3, #7
 8002fb8:	e7c1      	b.n	8002f3e <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002fba:	888b      	ldrh	r3, [r1, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1cf      	bne.n	8002f60 <USBD_StdDevReq+0xd0>
 8002fc0:	88cb      	ldrh	r3, [r1, #6]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1cc      	bne.n	8002f60 <USBD_StdDevReq+0xd0>
 8002fc6:	884d      	ldrh	r5, [r1, #2]
 8002fc8:	2d7f      	cmp	r5, #127	; 0x7f
 8002fca:	d8c9      	bhi.n	8002f60 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002fcc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002fd0:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d0c4      	beq.n	8002f60 <USBD_StdDevReq+0xd0>
      pdev->dev_address = dev_addr;
 8002fd6:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002fda:	f001 fde5 	bl	8004ba8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f000 f959 	bl	8003296 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8002fe4:	b11d      	cbz	r5, 8002fee <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002fe6:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002fe8:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8002fec:	e771      	b.n	8002ed2 <USBD_StdDevReq+0x42>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e7fa      	b.n	8002fe8 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8002ff2:	7889      	ldrb	r1, [r1, #2]
 8002ff4:	4d37      	ldr	r5, [pc, #220]	; (80030d4 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002ff6:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8002ff8:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002ffa:	d8b1      	bhi.n	8002f60 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8002ffc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003000:	2b02      	cmp	r3, #2
 8003002:	d008      	beq.n	8003016 <USBD_StdDevReq+0x186>
 8003004:	2b03      	cmp	r3, #3
 8003006:	d014      	beq.n	8003032 <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8003008:	f7ff ff37 	bl	8002e7a <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 800300c:	7829      	ldrb	r1, [r5, #0]
 800300e:	4620      	mov	r0, r4
 8003010:	f7ff fe21 	bl	8002c56 <USBD_ClrClassConfig>
 8003014:	e75d      	b.n	8002ed2 <USBD_StdDevReq+0x42>
        if (cfgidx)
 8003016:	2900      	cmp	r1, #0
 8003018:	d084      	beq.n	8002f24 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 800301a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800301c:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800301e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003020:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003024:	4620      	mov	r0, r4
 8003026:	f7ff fe0b 	bl	8002c40 <USBD_SetClassConfig>
 800302a:	2802      	cmp	r0, #2
 800302c:	f47f af7a 	bne.w	8002f24 <USBD_StdDevReq+0x94>
 8003030:	e796      	b.n	8002f60 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 8003032:	b931      	cbnz	r1, 8003042 <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003034:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8003036:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003038:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 800303c:	f7ff fe0b 	bl	8002c56 <USBD_ClrClassConfig>
 8003040:	e770      	b.n	8002f24 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 8003042:	6841      	ldr	r1, [r0, #4]
 8003044:	2901      	cmp	r1, #1
 8003046:	f43f af6d 	beq.w	8002f24 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800304a:	b2c9      	uxtb	r1, r1
 800304c:	f7ff fe03 	bl	8002c56 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003050:	7829      	ldrb	r1, [r5, #0]
 8003052:	6061      	str	r1, [r4, #4]
 8003054:	e7e6      	b.n	8003024 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 8003056:	88ca      	ldrh	r2, [r1, #6]
 8003058:	2a01      	cmp	r2, #1
 800305a:	d181      	bne.n	8002f60 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 800305c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003060:	2b00      	cmp	r3, #0
 8003062:	f43f af7d 	beq.w	8002f60 <USBD_StdDevReq+0xd0>
 8003066:	2b02      	cmp	r3, #2
 8003068:	d904      	bls.n	8003074 <USBD_StdDevReq+0x1e4>
 800306a:	2b03      	cmp	r3, #3
 800306c:	f47f af78 	bne.w	8002f60 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003070:	1d01      	adds	r1, r0, #4
 8003072:	e003      	b.n	800307c <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 8003074:	4601      	mov	r1, r0
 8003076:	2300      	movs	r3, #0
 8003078:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800307c:	4620      	mov	r0, r4
 800307e:	f000 f8ed 	bl	800325c <USBD_CtlSendData>
 8003082:	e726      	b.n	8002ed2 <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 8003084:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003088:	3b01      	subs	r3, #1
 800308a:	2b02      	cmp	r3, #2
 800308c:	f63f af68 	bhi.w	8002f60 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8003090:	88cb      	ldrh	r3, [r1, #6]
 8003092:	2b02      	cmp	r3, #2
 8003094:	f47f af64 	bne.w	8002f60 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003098:	2301      	movs	r3, #1
 800309a:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800309c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80030a0:	b10b      	cbz	r3, 80030a6 <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80030a2:	2303      	movs	r3, #3
 80030a4:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80030a6:	2202      	movs	r2, #2
 80030a8:	f104 010c 	add.w	r1, r4, #12
 80030ac:	e7e6      	b.n	800307c <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80030ae:	884b      	ldrh	r3, [r1, #2]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	f47f af0e 	bne.w	8002ed2 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80030b6:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80030ba:	e733      	b.n	8002f24 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 80030bc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80030c0:	3b01      	subs	r3, #1
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	f63f af4c 	bhi.w	8002f60 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80030c8:	884b      	ldrh	r3, [r1, #2]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	f47f af01 	bne.w	8002ed2 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e7f0      	b.n	80030b6 <USBD_StdDevReq+0x226>
 80030d4:	20000264 	.word	0x20000264

080030d8 <USBD_StdItfReq>:
{
 80030d8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80030da:	780b      	ldrb	r3, [r1, #0]
{
 80030dc:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80030de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80030e2:	2b20      	cmp	r3, #32
{
 80030e4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80030e6:	d002      	beq.n	80030ee <USBD_StdItfReq+0x16>
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d000      	beq.n	80030ee <USBD_StdItfReq+0x16>
 80030ec:	b9b3      	cbnz	r3, 800311c <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 80030ee:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80030f2:	3b01      	subs	r3, #1
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d810      	bhi.n	800311a <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80030f8:	792b      	ldrb	r3, [r5, #4]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d80d      	bhi.n	800311a <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80030fe:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003102:	4629      	mov	r1, r5
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	4620      	mov	r0, r4
 8003108:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800310a:	88eb      	ldrh	r3, [r5, #6]
 800310c:	b91b      	cbnz	r3, 8003116 <USBD_StdItfReq+0x3e>
 800310e:	b910      	cbnz	r0, 8003116 <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8003110:	4620      	mov	r0, r4
 8003112:	f000 f8c0 	bl	8003296 <USBD_CtlSendStatus>
}
 8003116:	2000      	movs	r0, #0
 8003118:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800311a:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 800311c:	f7ff fead 	bl	8002e7a <USBD_CtlError.constprop.1>
      break;
 8003120:	e7f9      	b.n	8003116 <USBD_StdItfReq+0x3e>

08003122 <USBD_StdEPReq>:
{
 8003122:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003124:	780a      	ldrb	r2, [r1, #0]
{
 8003126:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003128:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800312c:	2a20      	cmp	r2, #32
{
 800312e:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003130:	d013      	beq.n	800315a <USBD_StdEPReq+0x38>
 8003132:	2a40      	cmp	r2, #64	; 0x40
 8003134:	d011      	beq.n	800315a <USBD_StdEPReq+0x38>
 8003136:	b96a      	cbnz	r2, 8003154 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8003138:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800313a:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 800313c:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 800313e:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8003140:	d01f      	beq.n	8003182 <USBD_StdEPReq+0x60>
 8003142:	d335      	bcc.n	80031b0 <USBD_StdEPReq+0x8e>
 8003144:	2d03      	cmp	r5, #3
 8003146:	d105      	bne.n	8003154 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8003148:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800314c:	2a02      	cmp	r2, #2
 800314e:	d026      	beq.n	800319e <USBD_StdEPReq+0x7c>
 8003150:	2a03      	cmp	r2, #3
 8003152:	d00a      	beq.n	800316a <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 8003154:	f7ff fe91 	bl	8002e7a <USBD_CtlError.constprop.1>
      break;
 8003158:	e005      	b.n	8003166 <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 800315a:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 800315e:	4619      	mov	r1, r3
 8003160:	6892      	ldr	r2, [r2, #8]
 8003162:	4620      	mov	r0, r4
 8003164:	4790      	blx	r2
}
 8003166:	2000      	movs	r0, #0
 8003168:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 800316a:	885a      	ldrh	r2, [r3, #2]
 800316c:	b92a      	cbnz	r2, 800317a <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 800316e:	064a      	lsls	r2, r1, #25
 8003170:	d003      	beq.n	800317a <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003172:	88db      	ldrh	r3, [r3, #6]
 8003174:	b90b      	cbnz	r3, 800317a <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003176:	f001 fceb 	bl	8004b50 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800317a:	4620      	mov	r0, r4
 800317c:	f000 f88b 	bl	8003296 <USBD_CtlSendStatus>
              break;
 8003180:	e7f1      	b.n	8003166 <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8003182:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003186:	2a02      	cmp	r2, #2
 8003188:	d009      	beq.n	800319e <USBD_StdEPReq+0x7c>
 800318a:	2a03      	cmp	r2, #3
 800318c:	d1e2      	bne.n	8003154 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800318e:	885b      	ldrh	r3, [r3, #2]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e8      	bne.n	8003166 <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003194:	064d      	lsls	r5, r1, #25
 8003196:	d0f0      	beq.n	800317a <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003198:	f001 fce8 	bl	8004b6c <USBD_LL_ClearStallEP>
 800319c:	e7ed      	b.n	800317a <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800319e:	064b      	lsls	r3, r1, #25
 80031a0:	d016      	beq.n	80031d0 <USBD_StdEPReq+0xae>
                USBD_LL_StallEP(pdev, ep_addr);
 80031a2:	f001 fcd5 	bl	8004b50 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80031a6:	2180      	movs	r1, #128	; 0x80
 80031a8:	4620      	mov	r0, r4
 80031aa:	f001 fcd1 	bl	8004b50 <USBD_LL_StallEP>
 80031ae:	e7da      	b.n	8003166 <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 80031b0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d00d      	beq.n	80031d4 <USBD_StdEPReq+0xb2>
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d1cb      	bne.n	8003154 <USBD_StdEPReq+0x32>
 80031bc:	2314      	movs	r3, #20
              if ((ep_addr & 0x80U) == 0x80U)
 80031be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80031c2:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80031c6:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80031ca:	d014      	beq.n	80031f6 <USBD_StdEPReq+0xd4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80031cc:	6992      	ldr	r2, [r2, #24]
 80031ce:	b9ea      	cbnz	r2, 800320c <USBD_StdEPReq+0xea>
                USBD_CtlError(pdev, req);
 80031d0:	4620      	mov	r0, r4
 80031d2:	e7bf      	b.n	8003154 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80031d4:	0649      	lsls	r1, r1, #25
 80031d6:	d1fb      	bne.n	80031d0 <USBD_StdEPReq+0xae>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80031d8:	0613      	lsls	r3, r2, #24
              pep->status = 0x0000U;
 80031da:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80031de:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80031e2:	bf4c      	ite	mi
 80031e4:	f100 0114 	addmi.w	r1, r0, #20
 80031e8:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 80031ec:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80031ee:	4620      	mov	r0, r4
 80031f0:	f000 f834 	bl	800325c <USBD_CtlSendData>
              break;
 80031f4:	e7b7      	b.n	8003166 <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80031f6:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 80031fa:	2a00      	cmp	r2, #0
 80031fc:	d0e8      	beq.n	80031d0 <USBD_StdEPReq+0xae>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80031fe:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003202:	fb03 0505 	mla	r5, r3, r5, r0
 8003206:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800320a:	e004      	b.n	8003216 <USBD_StdEPReq+0xf4>
 800320c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003210:	fb05 3503 	mla	r5, r5, r3, r3
 8003214:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003216:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800321a:	d103      	bne.n	8003224 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 800321c:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800321e:	2202      	movs	r2, #2
 8003220:	4629      	mov	r1, r5
 8003222:	e7e4      	b.n	80031ee <USBD_StdEPReq+0xcc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003224:	4620      	mov	r0, r4
 8003226:	f001 fcaf 	bl	8004b88 <USBD_LL_IsStallEP>
 800322a:	b108      	cbz	r0, 8003230 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 800322c:	2301      	movs	r3, #1
 800322e:	e7f5      	b.n	800321c <USBD_StdEPReq+0xfa>
                pep->status = 0x0000U;
 8003230:	6028      	str	r0, [r5, #0]
 8003232:	e7f4      	b.n	800321e <USBD_StdEPReq+0xfc>

08003234 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8003234:	780b      	ldrb	r3, [r1, #0]
 8003236:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003238:	784b      	ldrb	r3, [r1, #1]
 800323a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800323c:	78ca      	ldrb	r2, [r1, #3]
 800323e:	788b      	ldrb	r3, [r1, #2]
 8003240:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003244:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8003246:	794a      	ldrb	r2, [r1, #5]
 8003248:	790b      	ldrb	r3, [r1, #4]
 800324a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800324e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003250:	79ca      	ldrb	r2, [r1, #7]
 8003252:	798b      	ldrb	r3, [r1, #6]
 8003254:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003258:	80c3      	strh	r3, [r0, #6]
 800325a:	4770      	bx	lr

0800325c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800325c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800325e:	2202      	movs	r2, #2
{
 8003260:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003262:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8003266:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003268:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800326a:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800326c:	2100      	movs	r1, #0
 800326e:	f001 fca9 	bl	8004bc4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003272:	2000      	movs	r0, #0
 8003274:	bd10      	pop	{r4, pc}

08003276 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8003276:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003278:	4613      	mov	r3, r2
 800327a:	460a      	mov	r2, r1
 800327c:	2100      	movs	r1, #0
 800327e:	f001 fca1 	bl	8004bc4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003282:	2000      	movs	r0, #0
 8003284:	bd08      	pop	{r3, pc}

08003286 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8003286:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003288:	4613      	mov	r3, r2
 800328a:	460a      	mov	r2, r1
 800328c:	2100      	movs	r1, #0
 800328e:	f001 fca7 	bl	8004be0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003292:	2000      	movs	r0, #0
 8003294:	bd08      	pop	{r3, pc}

08003296 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003296:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003298:	2304      	movs	r3, #4
 800329a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800329e:	2300      	movs	r3, #0
 80032a0:	461a      	mov	r2, r3
 80032a2:	4619      	mov	r1, r3
 80032a4:	f001 fc8e 	bl	8004bc4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80032a8:	2000      	movs	r0, #0
 80032aa:	bd08      	pop	{r3, pc}

080032ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80032ac:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80032ae:	2305      	movs	r3, #5
 80032b0:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80032b4:	2300      	movs	r3, #0
 80032b6:	461a      	mov	r2, r3
 80032b8:	4619      	mov	r1, r3
 80032ba:	f001 fc91 	bl	8004be0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80032be:	2000      	movs	r0, #0
 80032c0:	bd08      	pop	{r3, pc}
	...

080032c4 <get_addr>:
}

uint32_t get_addr(void)
{
	return reg_addr;
}
 80032c4:	4b01      	ldr	r3, [pc, #4]	; (80032cc <get_addr+0x8>)
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000268 	.word	0x20000268

080032d0 <get_mode>:

dmxmode_t get_mode(void)
{
	return dmx_mode;
}
 80032d0:	4b01      	ldr	r3, [pc, #4]	; (80032d8 <get_mode+0x8>)
 80032d2:	7818      	ldrb	r0, [r3, #0]
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000265 	.word	0x20000265

080032dc <get_reg_length>:
}

uint32_t get_reg_length(void)
{
	return reg_len;
}
 80032dc:	4b01      	ldr	r3, [pc, #4]	; (80032e4 <get_reg_length+0x8>)
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000270 	.word	0x20000270

080032e8 <init_regs>:

void init_regs(void)
{
 80032e8:	b538      	push	{r3, r4, r5, lr}
	//allocate memory
	if (reg_data != NULL)
 80032ea:	4c08      	ldr	r4, [pc, #32]	; (800330c <init_regs+0x24>)
 80032ec:	6820      	ldr	r0, [r4, #0]
 80032ee:	b108      	cbz	r0, 80032f4 <init_regs+0xc>
		free(reg_data);
 80032f0:	f001 fd3c 	bl	8004d6c <free>

	reg_data = malloc(reg_len);
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <init_regs+0x28>)
 80032f6:	681d      	ldr	r5, [r3, #0]
 80032f8:	4628      	mov	r0, r5
 80032fa:	f001 fd2f 	bl	8004d5c <malloc>
	memset(reg_data, 0, reg_len);
 80032fe:	462a      	mov	r2, r5
	reg_data = malloc(reg_len);
 8003300:	6020      	str	r0, [r4, #0]
	memset(reg_data, 0, reg_len);
 8003302:	2100      	movs	r1, #0
}
 8003304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(reg_data, 0, reg_len);
 8003308:	f001 bd38 	b.w	8004d7c <memset>
 800330c:	2000026c 	.word	0x2000026c
 8003310:	20000270 	.word	0x20000270

08003314 <dmx512_init>:
	dmx_mode = DMX_MODE1;
 8003314:	2201      	movs	r2, #1
	reg_addr = addr;
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <dmx512_init+0x1c>)
	switch (mode)
 8003318:	2802      	cmp	r0, #2
	reg_addr = addr;
 800331a:	6019      	str	r1, [r3, #0]
	dmx_mode = DMX_MODE1;
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <dmx512_init+0x20>)
 800331e:	701a      	strb	r2, [r3, #0]
	reg_len = len;
 8003320:	bf14      	ite	ne
 8003322:	220b      	movne	r2, #11
 8003324:	221a      	moveq	r2, #26
 8003326:	4b04      	ldr	r3, [pc, #16]	; (8003338 <dmx512_init+0x24>)
 8003328:	601a      	str	r2, [r3, #0]
	init_regs();
 800332a:	f7ff bfdd 	b.w	80032e8 <init_regs>
 800332e:	bf00      	nop
 8003330:	20000268 	.word	0x20000268
 8003334:	20000265 	.word	0x20000265
 8003338:	20000270 	.word	0x20000270

0800333c <set_reg>:

void set_reg(uint32_t reg, uint8_t val)
{
	if ((reg_data != NULL) && (reg<reg_len))
 800333c:	4b04      	ldr	r3, [pc, #16]	; (8003350 <set_reg+0x14>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	b123      	cbz	r3, 800334c <set_reg+0x10>
 8003342:	4a04      	ldr	r2, [pc, #16]	; (8003354 <set_reg+0x18>)
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	4282      	cmp	r2, r0
	{
		reg_data[reg] = val;
 8003348:	bf88      	it	hi
 800334a:	5419      	strbhi	r1, [r3, r0]
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	2000026c 	.word	0x2000026c
 8003354:	20000270 	.word	0x20000270

08003358 <get_reg>:
	}
}

uint8_t get_reg(uint32_t reg)
{
	if ((reg_data != NULL) && (reg<reg_len))
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <get_reg+0x18>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	b12b      	cbz	r3, 800336a <get_reg+0x12>
 800335e:	4a05      	ldr	r2, [pc, #20]	; (8003374 <get_reg+0x1c>)
 8003360:	6812      	ldr	r2, [r2, #0]
 8003362:	4282      	cmp	r2, r0
 8003364:	d901      	bls.n	800336a <get_reg+0x12>
	{
		return reg_data[reg];
 8003366:	5c18      	ldrb	r0, [r3, r0]
 8003368:	4770      	bx	lr
	}
	else
	{
		return 0;
 800336a:	2000      	movs	r0, #0
	}
}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	2000026c 	.word	0x2000026c
 8003374:	20000270 	.word	0x20000270

08003378 <get_reg_name>:
}


const char* get_reg_name(uint32_t reg)
{
	if (reg<reg_len)
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <get_reg_name+0x14>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4283      	cmp	r3, r0
		return regnames[reg];
 800337e:	bf86      	itte	hi
 8003380:	4b03      	ldrhi	r3, [pc, #12]	; (8003390 <get_reg_name+0x18>)
 8003382:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
	else
		return 0;
 8003386:	2000      	movls	r0, #0
}
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000270 	.word	0x20000270
 8003390:	20000008 	.word	0x20000008

08003394 <USART1_IRQHandler>:
//END TODO
#endif

/* UART1 Interrupt Service Routine */
void USART1_IRQHandler(void)
{
 8003394:	b507      	push	{r0, r1, r2, lr}
	//Get the received byte and clear Frame Error IRQ flag
	//On Framing Error restart Timer to search for a start condition
	if (__HAL_UART_GET_FLAG(&huart1,UART_FLAG_FE))
 8003396:	480a      	ldr	r0, [pc, #40]	; (80033c0 <USART1_IRQHandler+0x2c>)
 8003398:	6803      	ldr	r3, [r0, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	0792      	lsls	r2, r2, #30
 800339e:	d509      	bpl.n	80033b4 <USART1_IRQHandler+0x20>
	{
		__HAL_UART_CLEAR_FEFLAG(&huart1);
 80033a0:	2200      	movs	r2, #0
 80033a2:	9201      	str	r2, [sp, #4]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	9201      	str	r2, [sp, #4]
#ifdef USE_TIMER
		TIM_ITConfig(TIM1, TIM_IT_CC1, ENABLE);
#else
		start_flag = 1;
 80033a8:	2201      	movs	r2, #1
		__HAL_UART_CLEAR_FEFLAG(&huart1);
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	9b01      	ldr	r3, [sp, #4]
		start_flag = 1;
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <USART1_IRQHandler+0x30>)
 80033b2:	701a      	strb	r2, [r3, #0]
#endif
		HAL_UART_IRQHandler(&huart1);
		return;
	}
	HAL_UART_IRQHandler(&huart1);
 80033b4:	f7ff f880 	bl	80024b8 <HAL_UART_IRQHandler>
}
 80033b8:	b003      	add	sp, #12
 80033ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80033be:	bf00      	nop
 80033c0:	200008c8 	.word	0x200008c8
 80033c4:	20000280 	.word	0x20000280

080033c8 <HAL_UART_RxCpltCallback>:
//UART IRQ Triggered by incoming characters
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	volatile uint8_t rx_byte;

	if (huart->Instance == USART1)
 80033c8:	6802      	ldr	r2, [r0, #0]
 80033ca:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <HAL_UART_RxCpltCallback+0xbc>)
{
 80033cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (huart->Instance == USART1)
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d130      	bne.n	8003434 <HAL_UART_RxCpltCallback+0x6c>
    {
		rx_byte = buffer;
 80033d2:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <HAL_UART_RxCpltCallback+0xc0>)

		//Timer has signaled a start flag.
		//We can start to capture data.
		if (start_flag)
 80033d4:	4d2d      	ldr	r5, [pc, #180]	; (800348c <HAL_UART_RxCpltCallback+0xc4>)
		rx_byte = buffer;
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	4c2d      	ldr	r4, [pc, #180]	; (8003490 <HAL_UART_RxCpltCallback+0xc8>)
 80033da:	f88d 3007 	strb.w	r3, [sp, #7]
		if (start_flag)
 80033de:	782b      	ldrb	r3, [r5, #0]
 80033e0:	b363      	cbz	r3, 800343c <HAL_UART_RxCpltCallback+0x74>
		{
			//On every incoming start packet we invert the LED to signal incoming data
			msg_cnt++;
 80033e2:	4a2c      	ldr	r2, [pc, #176]	; (8003494 <HAL_UART_RxCpltCallback+0xcc>)
 80033e4:	7813      	ldrb	r3, [r2, #0]
 80033e6:	3301      	adds	r3, #1
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	7013      	strb	r3, [r2, #0]
			if (msg_cnt == 44)
 80033ec:	7813      	ldrb	r3, [r2, #0]
 80033ee:	2b2c      	cmp	r3, #44	; 0x2c
 80033f0:	d10d      	bne.n	800340e <HAL_UART_RxCpltCallback+0x46>
			{
				msg_cnt = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	7013      	strb	r3, [r2, #0]
				led_status =!led_status;
 80033f6:	4a28      	ldr	r2, [pc, #160]	; (8003498 <HAL_UART_RxCpltCallback+0xd0>)
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 80033f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
				led_status =!led_status;
 80033fc:	7813      	ldrb	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 80033fe:	4827      	ldr	r0, [pc, #156]	; (800349c <HAL_UART_RxCpltCallback+0xd4>)
				led_status =!led_status;
 8003400:	fab3 f383 	clz	r3, r3
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	7013      	strb	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 8003408:	7812      	ldrb	r2, [r2, #0]
 800340a:	f7fd fe03 	bl	8001014 <HAL_GPIO_WritePin>
			}

			//Reset Variables
			dmx_error = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	4923      	ldr	r1, [pc, #140]	; (80034a0 <HAL_UART_RxCpltCallback+0xd8>)
 8003412:	700b      	strb	r3, [r1, #0]
			byte_count = 0;
 8003414:	8023      	strh	r3, [r4, #0]
			start_flag = 0;
 8003416:	702b      	strb	r3, [r5, #0]

			/* first byte determines packet type */
			switch (rx_byte)
 8003418:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800341c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8003420:	b152      	cbz	r2, 8003438 <HAL_UART_RxCpltCallback+0x70>
 8003422:	2b17      	cmp	r3, #23
 8003424:	f04f 0201 	mov.w	r2, #1
 8003428:	d028      	beq.n	800347c <HAL_UART_RxCpltCallback+0xb4>
			case 0x17:
				packet_type = TEST_PACKET;
				break;
			default:
				//Anything else we declare an error....
				dmx_error = 1;
 800342a:	700a      	strb	r2, [r1, #0]
		}
		//Increase Counter
		byte_count++;

		//Get more data
		HAL_UART_Receive_IT(&huart1, &buffer, 1);
 800342c:	4916      	ldr	r1, [pc, #88]	; (8003488 <HAL_UART_RxCpltCallback+0xc0>)
 800342e:	481d      	ldr	r0, [pc, #116]	; (80034a4 <HAL_UART_RxCpltCallback+0xdc>)
 8003430:	f7fe ffdb 	bl	80023ea <HAL_UART_Receive_IT>
    }
}
 8003434:	b002      	add	sp, #8
 8003436:	bd70      	pop	{r4, r5, r6, pc}
				packet_type = DATA_PACKET;
 8003438:	4a1b      	ldr	r2, [pc, #108]	; (80034a8 <HAL_UART_RxCpltCallback+0xe0>)
 800343a:	7013      	strb	r3, [r2, #0]
		if (packet_type == DATA_PACKET)
 800343c:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <HAL_UART_RxCpltCallback+0xe0>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	b9b3      	cbnz	r3, 8003470 <HAL_UART_RxCpltCallback+0xa8>
			if (byte_count >= start_addr && byte_count < start_addr + get_reg_length())
 8003442:	4d1a      	ldr	r5, [pc, #104]	; (80034ac <HAL_UART_RxCpltCallback+0xe4>)
 8003444:	8823      	ldrh	r3, [r4, #0]
 8003446:	682a      	ldr	r2, [r5, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	4293      	cmp	r3, r2
 800344c:	d310      	bcc.n	8003470 <HAL_UART_RxCpltCallback+0xa8>
 800344e:	8826      	ldrh	r6, [r4, #0]
 8003450:	f7ff ff44 	bl	80032dc <get_reg_length>
 8003454:	682b      	ldr	r3, [r5, #0]
 8003456:	b2b6      	uxth	r6, r6
 8003458:	4418      	add	r0, r3
 800345a:	4286      	cmp	r6, r0
 800345c:	d208      	bcs.n	8003470 <HAL_UART_RxCpltCallback+0xa8>
				set_reg(byte_count - start_addr-1, rx_byte);
 800345e:	8820      	ldrh	r0, [r4, #0]
 8003460:	682b      	ldr	r3, [r5, #0]
 8003462:	b280      	uxth	r0, r0
 8003464:	1ac0      	subs	r0, r0, r3
 8003466:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800346a:	3801      	subs	r0, #1
 800346c:	f7ff ff66 	bl	800333c <set_reg>
		byte_count++;
 8003470:	8823      	ldrh	r3, [r4, #0]
		HAL_UART_Receive_IT(&huart1, &buffer, 1);
 8003472:	2201      	movs	r2, #1
		byte_count++;
 8003474:	3301      	adds	r3, #1
 8003476:	b29b      	uxth	r3, r3
 8003478:	8023      	strh	r3, [r4, #0]
 800347a:	e7d7      	b.n	800342c <HAL_UART_RxCpltCallback+0x64>
				packet_type = TEST_PACKET;
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_UART_RxCpltCallback+0xe0>)
 800347e:	701a      	strb	r2, [r3, #0]
				break;
 8003480:	e7dc      	b.n	800343c <HAL_UART_RxCpltCallback+0x74>
 8003482:	bf00      	nop
 8003484:	40013800 	.word	0x40013800
 8003488:	20000274 	.word	0x20000274
 800348c:	20000280 	.word	0x20000280
 8003490:	20000276 	.word	0x20000276
 8003494:	20000279 	.word	0x20000279
 8003498:	20000278 	.word	0x20000278
 800349c:	40011000 	.word	0x40011000
 80034a0:	20000070 	.word	0x20000070
 80034a4:	200008c8 	.word	0x200008c8
 80034a8:	2000027a 	.word	0x2000027a
 80034ac:	2000027c 	.word	0x2000027c

080034b0 <dmx512_setRx>:
}



void dmx512_setRx(void)
{
 80034b0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 80034b2:	4805      	ldr	r0, [pc, #20]	; (80034c8 <dmx512_setRx+0x18>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	2180      	movs	r1, #128	; 0x80
 80034b8:	f7fd fdac 	bl	8001014 <HAL_GPIO_WritePin>
    HAL_HalfDuplex_EnableReceiver(&huart1);
}
 80034bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_HalfDuplex_EnableReceiver(&huart1);
 80034c0:	4802      	ldr	r0, [pc, #8]	; (80034cc <dmx512_setRx+0x1c>)
 80034c2:	f7ff b8a1 	b.w	8002608 <HAL_HalfDuplex_EnableReceiver>
 80034c6:	bf00      	nop
 80034c8:	40010c00 	.word	0x40010c00
 80034cc:	200008c8 	.word	0x200008c8

080034d0 <dmx512_rec_enable.part.0>:
{
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_SET);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
}

void dmx512_rec_enable(uint8_t on)
 80034d0:	b508      	push	{r3, lr}
{
	if (on)
	{
		//Determine Start Addr
		start_addr = get_addr();
 80034d2:	f7ff fef7 	bl	80032c4 <get_addr>
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <dmx512_rec_enable.part.0+0x1c>)
 80034d8:	6018      	str	r0, [r3, #0]

		//Set Receiver to input
		dmx512_setRx();
 80034da:	f7ff ffe9 	bl	80034b0 <dmx512_setRx>
		//Disable Timer
#ifdef USE_TIMER
		TIM_ITConfig(dmx512_config.tim, TIM_IT_CC1, DISABLE);
#endif
	}
}
 80034de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	HAL_UART_Receive_IT(&huart1, &buffer, 1);
 80034e2:	2201      	movs	r2, #1
 80034e4:	4902      	ldr	r1, [pc, #8]	; (80034f0 <dmx512_rec_enable.part.0+0x20>)
 80034e6:	4803      	ldr	r0, [pc, #12]	; (80034f4 <dmx512_rec_enable.part.0+0x24>)
 80034e8:	f7fe bf7f 	b.w	80023ea <HAL_UART_Receive_IT>
 80034ec:	2000027c 	.word	0x2000027c
 80034f0:	20000274 	.word	0x20000274
 80034f4:	200008c8 	.word	0x200008c8

080034f8 <dmx512_rec_init>:
{
 80034f8:	f7ff bfea 	b.w	80034d0 <dmx512_rec_enable.part.0>

080034fc <EE_LL_Format>:
//##########################################################################################################
//##########################################################################################################


bool    EE_LL_Format(uint16_t startpage, uint16_t pages)
{
 80034fc:	b530      	push	{r4, r5, lr}
 80034fe:	4604      	mov	r4, r0
  uint32_t    error;
    HAL_FLASH_Unlock();
    FLASH_EraseInitTypeDef  flashErase;
    flashErase.NbPages=pages;
    flashErase.Banks = FLASH_BANK_1;
    flashErase.PageAddress = (ADDR_FLASH_PAGE_0|(_EEPROM_FLASH_PAGE_SIZE*startpage));
 8003500:	02a4      	lsls	r4, r4, #10
{
 8003502:	b087      	sub	sp, #28
    flashErase.PageAddress = (ADDR_FLASH_PAGE_0|(_EEPROM_FLASH_PAGE_SIZE*startpage));
 8003504:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
{
 8003508:	460d      	mov	r5, r1
    HAL_FLASH_Unlock();
 800350a:	f7fd fb9d 	bl	8000c48 <HAL_FLASH_Unlock>
    flashErase.Banks = FLASH_BANK_1;
 800350e:	2301      	movs	r3, #1
    flashErase.PageAddress = (ADDR_FLASH_PAGE_0|(_EEPROM_FLASH_PAGE_SIZE*startpage));
 8003510:	9404      	str	r4, [sp, #16]
    flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8003512:	2400      	movs	r4, #0
    if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 8003514:	a901      	add	r1, sp, #4
 8003516:	a802      	add	r0, sp, #8
    flashErase.NbPages=pages;
 8003518:	9505      	str	r5, [sp, #20]
    flashErase.Banks = FLASH_BANK_1;
 800351a:	9303      	str	r3, [sp, #12]
    flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 800351c:	9402      	str	r4, [sp, #8]
    if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 800351e:	f7fd fc43 	bl	8000da8 <HAL_FLASHEx_Erase>
 8003522:	b938      	cbnz	r0, 8003534 <EE_LL_Format+0x38>
    {
        HAL_FLASH_Lock();
 8003524:	f7fd fba2 	bl	8000c6c <HAL_FLASH_Lock>
        if(error != 0xFFFFFFFF)
 8003528:	9801      	ldr	r0, [sp, #4]
 800352a:	1c43      	adds	r3, r0, #1
 800352c:	4258      	negs	r0, r3
 800352e:	4158      	adcs	r0, r3
        else
            return true;
    }
    HAL_FLASH_Lock();
    return false;
}
 8003530:	b007      	add	sp, #28
 8003532:	bd30      	pop	{r4, r5, pc}
    HAL_FLASH_Lock();
 8003534:	f7fd fb9a 	bl	8000c6c <HAL_FLASH_Lock>
    return false;
 8003538:	4620      	mov	r0, r4
 800353a:	e7f9      	b.n	8003530 <EE_LL_Format+0x34>

0800353c <EE_Format>:
//##########################################################################################################
//##########################################################################################################

bool	EE_Format()
{
  return EE_LL_Format(_EEPROM_USE_FLASH_PAGE,1);
 800353c:	2101      	movs	r1, #1
 800353e:	207f      	movs	r0, #127	; 0x7f
 8003540:	f7ff bfdc 	b.w	80034fc <EE_LL_Format>

08003544 <EE_Reads>:
}

//##########################################################################################################
bool EE_Reads(uint16_t VirtualAddress,uint16_t HowMuchToRead,uint32_t* Data)
{
	if((VirtualAddress+HowMuchToRead) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 8003544:	4401      	add	r1, r0
 8003546:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800354a:	dd0b      	ble.n	8003564 <EE_Reads+0x20>
		return false;
 800354c:	2000      	movs	r0, #0
	{
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
		Data++;
	}
	return true;
}
 800354e:	4770      	bx	lr
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8003550:	0083      	lsls	r3, r0, #2
 8003552:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003556:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 800355a:	681b      	ldr	r3, [r3, #0]
	for(uint16_t	i=VirtualAddress ; i<HowMuchToRead+VirtualAddress ; i++)
 800355c:	3001      	adds	r0, #1
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 800355e:	f842 3b04 	str.w	r3, [r2], #4
	for(uint16_t	i=VirtualAddress ; i<HowMuchToRead+VirtualAddress ; i++)
 8003562:	b280      	uxth	r0, r0
 8003564:	4281      	cmp	r1, r0
 8003566:	dcf3      	bgt.n	8003550 <EE_Reads+0xc>
	return true;
 8003568:	2001      	movs	r0, #1
 800356a:	4770      	bx	lr

0800356c <EE_Writes>:

//##########################################################################################################
bool 	EE_Writes(uint16_t VirtualAddress,uint16_t HowMuchToWrite,uint32_t* Data)
{
	if((VirtualAddress+HowMuchToWrite) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 800356c:	4401      	add	r1, r0
 800356e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8003572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003574:	4616      	mov	r6, r2
	if((VirtualAddress+HowMuchToWrite) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 8003576:	dd02      	ble.n	800357e <EE_Writes+0x12>
	for(uint16_t	i=0 ; i<(_EEPROM_FLASH_PAGE_SIZE/4); i++)
	{
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(i*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)*Data)!=HAL_OK)
		{
			HAL_FLASH_Lock();
			return false;
 8003578:	2400      	movs	r4, #0
		}
		Data++;
	}
	HAL_FLASH_Lock();
	return true;
}
 800357a:	4620      	mov	r0, r4
 800357c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(EE_Format()==false)
 800357e:	f7ff ffdd 	bl	800353c <EE_Format>
 8003582:	4604      	mov	r4, r0
 8003584:	2800      	cmp	r0, #0
 8003586:	d0f7      	beq.n	8003578 <EE_Writes+0xc>
	HAL_FLASH_Unlock();
 8003588:	f7fd fb5e 	bl	8000c48 <HAL_FLASH_Unlock>
 800358c:	4d09      	ldr	r5, [pc, #36]	; (80035b4 <EE_Writes+0x48>)
	for(uint16_t	i=0 ; i<(_EEPROM_FLASH_PAGE_SIZE/4); i++)
 800358e:	4f0a      	ldr	r7, [pc, #40]	; (80035b8 <EE_Writes+0x4c>)
 8003590:	3e04      	subs	r6, #4
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(i*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)*Data)!=HAL_OK)
 8003592:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8003596:	2300      	movs	r3, #0
 8003598:	4629      	mov	r1, r5
 800359a:	2002      	movs	r0, #2
 800359c:	f7fd fb9a 	bl	8000cd4 <HAL_FLASH_Program>
 80035a0:	b110      	cbz	r0, 80035a8 <EE_Writes+0x3c>
			HAL_FLASH_Lock();
 80035a2:	f7fd fb63 	bl	8000c6c <HAL_FLASH_Lock>
 80035a6:	e7e7      	b.n	8003578 <EE_Writes+0xc>
 80035a8:	3504      	adds	r5, #4
	for(uint16_t	i=0 ; i<(_EEPROM_FLASH_PAGE_SIZE/4); i++)
 80035aa:	42bd      	cmp	r5, r7
 80035ac:	d1f1      	bne.n	8003592 <EE_Writes+0x26>
	HAL_FLASH_Lock();
 80035ae:	f7fd fb5d 	bl	8000c6c <HAL_FLASH_Lock>
	return true;
 80035b2:	e7e2      	b.n	800357a <EE_Writes+0xe>
 80035b4:	0801fc00 	.word	0x0801fc00
 80035b8:	08020000 	.word	0x08020000

080035bc <get_mode_from_pins>:
#include <stm32f103xb.h>
#include <stm32f1xx.h>
#include <stm32f1xx_hal_gpio.h>

uint8_t get_mode_from_pins(void)
{
 80035bc:	b510      	push	{r4, lr}
	uint8_t mode = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_0_GPIO_Port, MODE_0_Pin))
 80035be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035c2:	4808      	ldr	r0, [pc, #32]	; (80035e4 <get_mode_from_pins+0x28>)
 80035c4:	f7fd fd20 	bl	8001008 <HAL_GPIO_ReadPin>
	uint8_t mode = 0;
 80035c8:	fab0 f480 	clz	r4, r0
		mode = mode | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_1_GPIO_Port, MODE_1_Pin))
 80035cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035d0:	4804      	ldr	r0, [pc, #16]	; (80035e4 <get_mode_from_pins+0x28>)
	uint8_t mode = 0;
 80035d2:	0964      	lsrs	r4, r4, #5
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_1_GPIO_Port, MODE_1_Pin))
 80035d4:	f7fd fd18 	bl	8001008 <HAL_GPIO_ReadPin>
 80035d8:	b908      	cbnz	r0, 80035de <get_mode_from_pins+0x22>
		mode = mode | 0x02;
 80035da:	f044 0402 	orr.w	r4, r4, #2
	return mode;
}
 80035de:	4620      	mov	r0, r4
 80035e0:	bd10      	pop	{r4, pc}
 80035e2:	bf00      	nop
 80035e4:	40011000 	.word	0x40011000

080035e8 <get_addr_from_pins>:

uint8_t get_addr_from_pins(void)
{
 80035e8:	b510      	push	{r4, lr}
	uint8_t addr = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_0_GPIO_Port, ADDR_0_Pin))
 80035ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035ee:	481f      	ldr	r0, [pc, #124]	; (800366c <get_addr_from_pins+0x84>)
 80035f0:	f7fd fd0a 	bl	8001008 <HAL_GPIO_ReadPin>
	uint8_t addr = 0;
 80035f4:	fab0 f480 	clz	r4, r0
		addr = addr | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_1_GPIO_Port, ADDR_1_Pin))
 80035f8:	2108      	movs	r1, #8
 80035fa:	481d      	ldr	r0, [pc, #116]	; (8003670 <get_addr_from_pins+0x88>)
	uint8_t addr = 0;
 80035fc:	0964      	lsrs	r4, r4, #5
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_1_GPIO_Port, ADDR_1_Pin))
 80035fe:	f7fd fd03 	bl	8001008 <HAL_GPIO_ReadPin>
 8003602:	b908      	cbnz	r0, 8003608 <get_addr_from_pins+0x20>
		addr = addr | 0x02;
 8003604:	f044 0402 	orr.w	r4, r4, #2
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_2_GPIO_Port, ADDR_2_Pin))
 8003608:	2110      	movs	r1, #16
 800360a:	4819      	ldr	r0, [pc, #100]	; (8003670 <get_addr_from_pins+0x88>)
 800360c:	f7fd fcfc 	bl	8001008 <HAL_GPIO_ReadPin>
 8003610:	b908      	cbnz	r0, 8003616 <get_addr_from_pins+0x2e>
		addr = addr | 0x04;
 8003612:	f044 0404 	orr.w	r4, r4, #4
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_3_GPIO_Port, ADDR_3_Pin))
 8003616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800361a:	4815      	ldr	r0, [pc, #84]	; (8003670 <get_addr_from_pins+0x88>)
 800361c:	f7fd fcf4 	bl	8001008 <HAL_GPIO_ReadPin>
 8003620:	b908      	cbnz	r0, 8003626 <get_addr_from_pins+0x3e>
		addr = addr | 0x08;
 8003622:	f044 0408 	orr.w	r4, r4, #8
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_4_GPIO_Port, ADDR_4_Pin))
 8003626:	f44f 7100 	mov.w	r1, #512	; 0x200
 800362a:	4811      	ldr	r0, [pc, #68]	; (8003670 <get_addr_from_pins+0x88>)
 800362c:	f7fd fcec 	bl	8001008 <HAL_GPIO_ReadPin>
 8003630:	b908      	cbnz	r0, 8003636 <get_addr_from_pins+0x4e>
		addr = addr | 0x10;
 8003632:	f044 0410 	orr.w	r4, r4, #16
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_5_GPIO_Port, ADDR_5_Pin))
 8003636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800363a:	480d      	ldr	r0, [pc, #52]	; (8003670 <get_addr_from_pins+0x88>)
 800363c:	f7fd fce4 	bl	8001008 <HAL_GPIO_ReadPin>
 8003640:	b908      	cbnz	r0, 8003646 <get_addr_from_pins+0x5e>
		addr = addr | 0x20;
 8003642:	f044 0420 	orr.w	r4, r4, #32
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_6_GPIO_Port, ADDR_6_Pin))
 8003646:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800364a:	4809      	ldr	r0, [pc, #36]	; (8003670 <get_addr_from_pins+0x88>)
 800364c:	f7fd fcdc 	bl	8001008 <HAL_GPIO_ReadPin>
 8003650:	b908      	cbnz	r0, 8003656 <get_addr_from_pins+0x6e>
		addr = addr | 0x40;
 8003652:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_7_GPIO_Port, ADDR_7_Pin))
 8003656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800365a:	4805      	ldr	r0, [pc, #20]	; (8003670 <get_addr_from_pins+0x88>)
 800365c:	f7fd fcd4 	bl	8001008 <HAL_GPIO_ReadPin>
 8003660:	b908      	cbnz	r0, 8003666 <get_addr_from_pins+0x7e>
		addr = addr | 0x80;
 8003662:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	return addr;
}
 8003666:	4620      	mov	r0, r4
 8003668:	bd10      	pop	{r4, pc}
 800366a:	bf00      	nop
 800366c:	40010800 	.word	0x40010800
 8003670:	40010c00 	.word	0x40010c00

08003674 <check_button>:

uint8_t check_button(void)
{
 8003674:	b508      	push	{r3, lr}
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin))
 8003676:	2120      	movs	r1, #32
 8003678:	4803      	ldr	r0, [pc, #12]	; (8003688 <check_button+0x14>)
 800367a:	f7fd fcc5 	bl	8001008 <HAL_GPIO_ReadPin>
		return 1;

	return 0;
}
 800367e:	fab0 f080 	clz	r0, r0
 8003682:	0940      	lsrs	r0, r0, #5
 8003684:	bd08      	pop	{r3, pc}
 8003686:	bf00      	nop
 8003688:	40010800 	.word	0x40010800

0800368c <scale_value>:
	reg_shadow[MAX_BRIGHTNESS] = 255;
	update_pwm_lights(1);
}

uint16_t scale_value( uint8_t val,int16_t offset, int16_t gain, int16_t gamma)
{
 800368c:	b570      	push	{r4, r5, r6, lr}
	int32_t res = 0;
	//1) Scale input between 0 and max
	res = ((uint32_t)val * (uint32_t) MAX_PWM)/(uint32_t)255;
 800368e:	f240 4434 	movw	r4, #1076	; 0x434
 8003692:	23ff      	movs	r3, #255	; 0xff
 8003694:	4360      	muls	r0, r4
 8003696:	fbb0 f3f3 	udiv	r3, r0, r3
{
 800369a:	4616      	mov	r6, r2
	res = (res * (uint32_t)brightness_scale) / (uint32_t) MAX_PWM;
 800369c:	4a0e      	ldr	r2, [pc, #56]	; (80036d8 <scale_value+0x4c>)
 800369e:	8810      	ldrh	r0, [r2, #0]
 80036a0:	4358      	muls	r0, r3
 80036a2:	fbb0 f0f4 	udiv	r0, r0, r4

	//Subtract offset
	res = res - offset;

	//Apply Gain
	res = (int16_t) ((float)res * ((float)gain)/100);
 80036a6:	1a40      	subs	r0, r0, r1
 80036a8:	f7fc fe1e 	bl	80002e8 <__aeabi_i2f>
 80036ac:	4605      	mov	r5, r0
 80036ae:	4630      	mov	r0, r6
 80036b0:	f7fc fe1a 	bl	80002e8 <__aeabi_i2f>
 80036b4:	4601      	mov	r1, r0
 80036b6:	4628      	mov	r0, r5
 80036b8:	f7fc fe6a 	bl	8000390 <__aeabi_fmul>
 80036bc:	4907      	ldr	r1, [pc, #28]	; (80036dc <scale_value+0x50>)
 80036be:	f7fc ff1b 	bl	80004f8 <__aeabi_fdiv>
 80036c2:	f7fc ffb5 	bl	8000630 <__aeabi_f2iz>
 80036c6:	b200      	sxth	r0, r0
 80036c8:	42a0      	cmp	r0, r4
 80036ca:	bfa8      	it	ge
 80036cc:	4620      	movge	r0, r4
	//Limit output to valid range
	if (res<0)
		res = 0;
	if (res > MAX_PWM)
		res = MAX_PWM;
	return res;
 80036ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80036d2:	b280      	uxth	r0, r0
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
 80036d6:	bf00      	nop
 80036d8:	20000282 	.word	0x20000282
 80036dc:	42c80000 	.word	0x42c80000

080036e0 <update_pwm_lights>:

//Check what has changed and update Lights
//We only update parameters that have changed otherwise we might have waveform-artifacts...
void update_pwm_lights(uint8_t force)
{
 80036e0:	b570      	push	{r4, r5, r6, lr}
	//Check if global brightness has changed and scale value
	if ((reg_shadow[MAX_BRIGHTNESS])!= get_reg(MAX_BRIGHTNESS) || force)
 80036e2:	4ca3      	ldr	r4, [pc, #652]	; (8003970 <update_pwm_lights+0x290>)
{
 80036e4:	4605      	mov	r5, r0
	if ((reg_shadow[MAX_BRIGHTNESS])!= get_reg(MAX_BRIGHTNESS) || force)
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	2000      	movs	r0, #0
 80036ea:	781e      	ldrb	r6, [r3, #0]
 80036ec:	f7ff fe34 	bl	8003358 <get_reg>
 80036f0:	4286      	cmp	r6, r0
 80036f2:	d100      	bne.n	80036f6 <update_pwm_lights+0x16>
 80036f4:	b185      	cbz	r5, 8003718 <update_pwm_lights+0x38>
	{
		brightness_scale = ((uint32_t)get_reg(MAX_BRIGHTNESS) * (uint32_t) MAX_PWM)/(uint32_t)255;
 80036f6:	2000      	movs	r0, #0
 80036f8:	f7ff fe2e 	bl	8003358 <get_reg>
 80036fc:	f240 4334 	movw	r3, #1076	; 0x434
 8003700:	4358      	muls	r0, r3
 8003702:	23ff      	movs	r3, #255	; 0xff
 8003704:	fbb0 f0f3 	udiv	r0, r0, r3
 8003708:	4b9a      	ldr	r3, [pc, #616]	; (8003974 <update_pwm_lights+0x294>)
		//After a brightness update we need to update all the over PWM outputs
		force = 1;
		reg_shadow[MAX_BRIGHTNESS] = get_reg(MAX_BRIGHTNESS);
 800370a:	6825      	ldr	r5, [r4, #0]
		brightness_scale = ((uint32_t)get_reg(MAX_BRIGHTNESS) * (uint32_t) MAX_PWM)/(uint32_t)255;
 800370c:	8018      	strh	r0, [r3, #0]
		reg_shadow[MAX_BRIGHTNESS] = get_reg(MAX_BRIGHTNESS);
 800370e:	2000      	movs	r0, #0
 8003710:	f7ff fe22 	bl	8003358 <get_reg>
 8003714:	7028      	strb	r0, [r5, #0]
		force = 1;
 8003716:	2501      	movs	r5, #1
	}

	//Update PWM Values if needed
	if ((reg_shadow[CH1_RED])!= get_reg(CH1_RED) || force)
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	2001      	movs	r0, #1
 800371c:	785e      	ldrb	r6, [r3, #1]
 800371e:	f7ff fe1b 	bl	8003358 <get_reg>
 8003722:	4286      	cmp	r6, r0
 8003724:	d100      	bne.n	8003728 <update_pwm_lights+0x48>
 8003726:	b1ad      	cbz	r5, 8003754 <update_pwm_lights+0x74>
	{
		configPWM(PWM_CH1,CH_RED,scale_value(get_reg(CH1_RED),settings.offset_red,settings.gain_red,settings.gamma_red));
 8003728:	2001      	movs	r0, #1
 800372a:	f7ff fe15 	bl	8003358 <get_reg>
 800372e:	4992      	ldr	r1, [pc, #584]	; (8003978 <update_pwm_lights+0x298>)
 8003730:	f9b1 303c 	ldrsh.w	r3, [r1, #60]	; 0x3c
 8003734:	f9b1 203a 	ldrsh.w	r2, [r1, #58]	; 0x3a
 8003738:	f9b1 1038 	ldrsh.w	r1, [r1, #56]	; 0x38
 800373c:	f7ff ffa6 	bl	800368c <scale_value>
 8003740:	2100      	movs	r1, #0
 8003742:	4602      	mov	r2, r0
 8003744:	4608      	mov	r0, r1
 8003746:	f000 fbb1 	bl	8003eac <configPWM>
		reg_shadow[CH1_RED] = get_reg(CH1_RED);
 800374a:	2001      	movs	r0, #1
 800374c:	6826      	ldr	r6, [r4, #0]
 800374e:	f7ff fe03 	bl	8003358 <get_reg>
 8003752:	7070      	strb	r0, [r6, #1]
	}

	if ((reg_shadow[CH1_GREEN])!= get_reg(CH1_GREEN) || force)
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	2002      	movs	r0, #2
 8003758:	789e      	ldrb	r6, [r3, #2]
 800375a:	f7ff fdfd 	bl	8003358 <get_reg>
 800375e:	4286      	cmp	r6, r0
 8003760:	d100      	bne.n	8003764 <update_pwm_lights+0x84>
 8003762:	b1ad      	cbz	r5, 8003790 <update_pwm_lights+0xb0>
	{
		configPWM(PWM_CH1,CH_GREEN,scale_value(get_reg(CH1_GREEN),settings.offset_green,settings.gain_green,settings.gamma_green));
 8003764:	2002      	movs	r0, #2
 8003766:	f7ff fdf7 	bl	8003358 <get_reg>
 800376a:	4983      	ldr	r1, [pc, #524]	; (8003978 <update_pwm_lights+0x298>)
 800376c:	f9b1 3042 	ldrsh.w	r3, [r1, #66]	; 0x42
 8003770:	f9b1 2040 	ldrsh.w	r2, [r1, #64]	; 0x40
 8003774:	f9b1 103e 	ldrsh.w	r1, [r1, #62]	; 0x3e
 8003778:	f7ff ff88 	bl	800368c <scale_value>
 800377c:	2101      	movs	r1, #1
 800377e:	4602      	mov	r2, r0
 8003780:	2000      	movs	r0, #0
 8003782:	f000 fb93 	bl	8003eac <configPWM>
		reg_shadow[CH1_GREEN] = get_reg(CH1_GREEN);
 8003786:	2002      	movs	r0, #2
 8003788:	6826      	ldr	r6, [r4, #0]
 800378a:	f7ff fde5 	bl	8003358 <get_reg>
 800378e:	70b0      	strb	r0, [r6, #2]
	}

	if ((reg_shadow[CH1_BLUE])!= get_reg(CH1_BLUE) || force)
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	2003      	movs	r0, #3
 8003794:	78de      	ldrb	r6, [r3, #3]
 8003796:	f7ff fddf 	bl	8003358 <get_reg>
 800379a:	4286      	cmp	r6, r0
 800379c:	d100      	bne.n	80037a0 <update_pwm_lights+0xc0>
 800379e:	b1ad      	cbz	r5, 80037cc <update_pwm_lights+0xec>
	{
		configPWM(PWM_CH1,CH_BLUE,scale_value(get_reg(CH1_BLUE),settings.offset_blue,settings.gain_blue,settings.gamma_blue));
 80037a0:	2003      	movs	r0, #3
 80037a2:	f7ff fdd9 	bl	8003358 <get_reg>
 80037a6:	4974      	ldr	r1, [pc, #464]	; (8003978 <update_pwm_lights+0x298>)
 80037a8:	f9b1 3048 	ldrsh.w	r3, [r1, #72]	; 0x48
 80037ac:	f9b1 2046 	ldrsh.w	r2, [r1, #70]	; 0x46
 80037b0:	f9b1 1044 	ldrsh.w	r1, [r1, #68]	; 0x44
 80037b4:	f7ff ff6a 	bl	800368c <scale_value>
 80037b8:	2102      	movs	r1, #2
 80037ba:	4602      	mov	r2, r0
 80037bc:	2000      	movs	r0, #0
 80037be:	f000 fb75 	bl	8003eac <configPWM>
		reg_shadow[CH1_BLUE] = get_reg(CH1_BLUE);
 80037c2:	2003      	movs	r0, #3
 80037c4:	6826      	ldr	r6, [r4, #0]
 80037c6:	f7ff fdc7 	bl	8003358 <get_reg>
 80037ca:	70f0      	strb	r0, [r6, #3]
	}

	if ((reg_shadow[CH2_RED])!= get_reg(CH2_RED) || force)
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	2004      	movs	r0, #4
 80037d0:	791e      	ldrb	r6, [r3, #4]
 80037d2:	f7ff fdc1 	bl	8003358 <get_reg>
 80037d6:	4286      	cmp	r6, r0
 80037d8:	d100      	bne.n	80037dc <update_pwm_lights+0xfc>
 80037da:	b1ad      	cbz	r5, 8003808 <update_pwm_lights+0x128>
	{
		configPWM(PWM_CH2,CH_RED,scale_value(get_reg(CH2_RED),settings.offset_red,settings.gain_red,settings.gamma_red));
 80037dc:	2004      	movs	r0, #4
 80037de:	f7ff fdbb 	bl	8003358 <get_reg>
 80037e2:	4965      	ldr	r1, [pc, #404]	; (8003978 <update_pwm_lights+0x298>)
 80037e4:	f9b1 303c 	ldrsh.w	r3, [r1, #60]	; 0x3c
 80037e8:	f9b1 203a 	ldrsh.w	r2, [r1, #58]	; 0x3a
 80037ec:	f9b1 1038 	ldrsh.w	r1, [r1, #56]	; 0x38
 80037f0:	f7ff ff4c 	bl	800368c <scale_value>
 80037f4:	2100      	movs	r1, #0
 80037f6:	4602      	mov	r2, r0
 80037f8:	2001      	movs	r0, #1
 80037fa:	f000 fb57 	bl	8003eac <configPWM>
		reg_shadow[CH2_RED] = get_reg(CH2_RED);
 80037fe:	2004      	movs	r0, #4
 8003800:	6826      	ldr	r6, [r4, #0]
 8003802:	f7ff fda9 	bl	8003358 <get_reg>
 8003806:	7130      	strb	r0, [r6, #4]
	}

	if ((reg_shadow[CH2_GREEN])!= get_reg(CH2_GREEN) || force)
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	2005      	movs	r0, #5
 800380c:	795e      	ldrb	r6, [r3, #5]
 800380e:	f7ff fda3 	bl	8003358 <get_reg>
 8003812:	4286      	cmp	r6, r0
 8003814:	d100      	bne.n	8003818 <update_pwm_lights+0x138>
 8003816:	b1ad      	cbz	r5, 8003844 <update_pwm_lights+0x164>
	{
		configPWM(PWM_CH2,CH_GREEN,scale_value(get_reg(CH2_GREEN),settings.offset_green,settings.gain_green,settings.gamma_green));
 8003818:	2005      	movs	r0, #5
 800381a:	f7ff fd9d 	bl	8003358 <get_reg>
 800381e:	4956      	ldr	r1, [pc, #344]	; (8003978 <update_pwm_lights+0x298>)
 8003820:	f9b1 3042 	ldrsh.w	r3, [r1, #66]	; 0x42
 8003824:	f9b1 2040 	ldrsh.w	r2, [r1, #64]	; 0x40
 8003828:	f9b1 103e 	ldrsh.w	r1, [r1, #62]	; 0x3e
 800382c:	f7ff ff2e 	bl	800368c <scale_value>
 8003830:	2101      	movs	r1, #1
 8003832:	4602      	mov	r2, r0
 8003834:	4608      	mov	r0, r1
 8003836:	f000 fb39 	bl	8003eac <configPWM>
		reg_shadow[CH2_GREEN] = get_reg(CH2_GREEN);
 800383a:	2005      	movs	r0, #5
 800383c:	6826      	ldr	r6, [r4, #0]
 800383e:	f7ff fd8b 	bl	8003358 <get_reg>
 8003842:	7170      	strb	r0, [r6, #5]
	}

	if ((reg_shadow[CH2_BLUE])!= get_reg(CH2_BLUE) || force)
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	2006      	movs	r0, #6
 8003848:	799e      	ldrb	r6, [r3, #6]
 800384a:	f7ff fd85 	bl	8003358 <get_reg>
 800384e:	4286      	cmp	r6, r0
 8003850:	d100      	bne.n	8003854 <update_pwm_lights+0x174>
 8003852:	b1ad      	cbz	r5, 8003880 <update_pwm_lights+0x1a0>
	{
		configPWM(PWM_CH2,CH_BLUE,scale_value(get_reg(CH2_BLUE),settings.offset_blue,settings.gain_blue,settings.gamma_blue));
 8003854:	2006      	movs	r0, #6
 8003856:	f7ff fd7f 	bl	8003358 <get_reg>
 800385a:	4947      	ldr	r1, [pc, #284]	; (8003978 <update_pwm_lights+0x298>)
 800385c:	f9b1 3048 	ldrsh.w	r3, [r1, #72]	; 0x48
 8003860:	f9b1 2046 	ldrsh.w	r2, [r1, #70]	; 0x46
 8003864:	f9b1 1044 	ldrsh.w	r1, [r1, #68]	; 0x44
 8003868:	f7ff ff10 	bl	800368c <scale_value>
 800386c:	2102      	movs	r1, #2
 800386e:	4602      	mov	r2, r0
 8003870:	2001      	movs	r0, #1
 8003872:	f000 fb1b 	bl	8003eac <configPWM>
		reg_shadow[CH2_BLUE] = get_reg(CH2_BLUE);
 8003876:	2006      	movs	r0, #6
 8003878:	6826      	ldr	r6, [r4, #0]
 800387a:	f7ff fd6d 	bl	8003358 <get_reg>
 800387e:	71b0      	strb	r0, [r6, #6]
	}

	if ((reg_shadow[CH3_RED])!= get_reg(CH3_RED) || force)
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	2007      	movs	r0, #7
 8003884:	79de      	ldrb	r6, [r3, #7]
 8003886:	f7ff fd67 	bl	8003358 <get_reg>
 800388a:	4286      	cmp	r6, r0
 800388c:	d100      	bne.n	8003890 <update_pwm_lights+0x1b0>
 800388e:	b1ad      	cbz	r5, 80038bc <update_pwm_lights+0x1dc>
	{
		configPWM(PWM_CH3,CH_RED,scale_value(get_reg(CH3_RED),settings.offset_red,settings.gain_red,settings.gamma_red));
 8003890:	2007      	movs	r0, #7
 8003892:	f7ff fd61 	bl	8003358 <get_reg>
 8003896:	4938      	ldr	r1, [pc, #224]	; (8003978 <update_pwm_lights+0x298>)
 8003898:	f9b1 303c 	ldrsh.w	r3, [r1, #60]	; 0x3c
 800389c:	f9b1 203a 	ldrsh.w	r2, [r1, #58]	; 0x3a
 80038a0:	f9b1 1038 	ldrsh.w	r1, [r1, #56]	; 0x38
 80038a4:	f7ff fef2 	bl	800368c <scale_value>
 80038a8:	2100      	movs	r1, #0
 80038aa:	4602      	mov	r2, r0
 80038ac:	2002      	movs	r0, #2
 80038ae:	f000 fafd 	bl	8003eac <configPWM>
		reg_shadow[CH3_RED] = get_reg(CH3_RED);
 80038b2:	2007      	movs	r0, #7
 80038b4:	6826      	ldr	r6, [r4, #0]
 80038b6:	f7ff fd4f 	bl	8003358 <get_reg>
 80038ba:	71f0      	strb	r0, [r6, #7]
	}

	if ((reg_shadow[CH3_GREEN])!= get_reg(CH3_GREEN) || force)
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	2008      	movs	r0, #8
 80038c0:	7a1e      	ldrb	r6, [r3, #8]
 80038c2:	f7ff fd49 	bl	8003358 <get_reg>
 80038c6:	4286      	cmp	r6, r0
 80038c8:	d100      	bne.n	80038cc <update_pwm_lights+0x1ec>
 80038ca:	b1ad      	cbz	r5, 80038f8 <update_pwm_lights+0x218>
	{
		configPWM(PWM_CH3,CH_GREEN,scale_value(get_reg(CH3_GREEN),settings.offset_green,settings.gain_green,settings.gamma_green));
 80038cc:	2008      	movs	r0, #8
 80038ce:	f7ff fd43 	bl	8003358 <get_reg>
 80038d2:	4929      	ldr	r1, [pc, #164]	; (8003978 <update_pwm_lights+0x298>)
 80038d4:	f9b1 3042 	ldrsh.w	r3, [r1, #66]	; 0x42
 80038d8:	f9b1 2040 	ldrsh.w	r2, [r1, #64]	; 0x40
 80038dc:	f9b1 103e 	ldrsh.w	r1, [r1, #62]	; 0x3e
 80038e0:	f7ff fed4 	bl	800368c <scale_value>
 80038e4:	2101      	movs	r1, #1
 80038e6:	4602      	mov	r2, r0
 80038e8:	2002      	movs	r0, #2
 80038ea:	f000 fadf 	bl	8003eac <configPWM>
		reg_shadow[CH3_GREEN] = get_reg(CH3_GREEN);
 80038ee:	2008      	movs	r0, #8
 80038f0:	6826      	ldr	r6, [r4, #0]
 80038f2:	f7ff fd31 	bl	8003358 <get_reg>
 80038f6:	7230      	strb	r0, [r6, #8]
	}

	if ((reg_shadow[CH3_BLUE])!= get_reg(CH3_BLUE) || force)
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	2009      	movs	r0, #9
 80038fc:	7a5e      	ldrb	r6, [r3, #9]
 80038fe:	f7ff fd2b 	bl	8003358 <get_reg>
 8003902:	4286      	cmp	r6, r0
 8003904:	d100      	bne.n	8003908 <update_pwm_lights+0x228>
 8003906:	b1ad      	cbz	r5, 8003934 <update_pwm_lights+0x254>
	{
		configPWM(PWM_CH3,CH_BLUE,scale_value(get_reg(CH3_BLUE),settings.offset_blue,settings.gain_blue,settings.gamma_blue));
 8003908:	2009      	movs	r0, #9
 800390a:	f7ff fd25 	bl	8003358 <get_reg>
 800390e:	491a      	ldr	r1, [pc, #104]	; (8003978 <update_pwm_lights+0x298>)
 8003910:	f9b1 3048 	ldrsh.w	r3, [r1, #72]	; 0x48
 8003914:	f9b1 2046 	ldrsh.w	r2, [r1, #70]	; 0x46
 8003918:	f9b1 1044 	ldrsh.w	r1, [r1, #68]	; 0x44
 800391c:	f7ff feb6 	bl	800368c <scale_value>
 8003920:	2102      	movs	r1, #2
 8003922:	4602      	mov	r2, r0
 8003924:	4608      	mov	r0, r1
 8003926:	f000 fac1 	bl	8003eac <configPWM>
		reg_shadow[CH3_BLUE] = get_reg(CH3_BLUE);
 800392a:	2009      	movs	r0, #9
 800392c:	6826      	ldr	r6, [r4, #0]
 800392e:	f7ff fd13 	bl	8003358 <get_reg>
 8003932:	7270      	strb	r0, [r6, #9]
	}

	if ((reg_shadow[CH3_WHITE])!= get_reg(CH3_WHITE) || force)
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	200a      	movs	r0, #10
 8003938:	7a9e      	ldrb	r6, [r3, #10]
 800393a:	f7ff fd0d 	bl	8003358 <get_reg>
 800393e:	4286      	cmp	r6, r0
 8003940:	d100      	bne.n	8003944 <update_pwm_lights+0x264>
 8003942:	b18d      	cbz	r5, 8003968 <update_pwm_lights+0x288>
	{
		configPWM(PWM_CH3,CH_WHITE,scale_value(get_reg(CH3_WHITE),0,100,220));  //TBD, no settings?
 8003944:	200a      	movs	r0, #10
 8003946:	f7ff fd07 	bl	8003358 <get_reg>
 800394a:	23dc      	movs	r3, #220	; 0xdc
 800394c:	2264      	movs	r2, #100	; 0x64
 800394e:	2100      	movs	r1, #0
 8003950:	f7ff fe9c 	bl	800368c <scale_value>
 8003954:	2103      	movs	r1, #3
 8003956:	4602      	mov	r2, r0
 8003958:	2002      	movs	r0, #2
 800395a:	f000 faa7 	bl	8003eac <configPWM>
		reg_shadow[CH3_WHITE] = get_reg(CH3_WHITE);
 800395e:	200a      	movs	r0, #10
 8003960:	6824      	ldr	r4, [r4, #0]
 8003962:	f7ff fcf9 	bl	8003358 <get_reg>
 8003966:	72a0      	strb	r0, [r4, #10]
	//Deal with LED Strip Registers
	if (DMX_MODE2 == get_mode())
	{

	}
}
 8003968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (DMX_MODE2 == get_mode())
 800396c:	f7ff bcb0 	b.w	80032d0 <get_mode>
 8003970:	20000284 	.word	0x20000284
 8003974:	20000282 	.word	0x20000282
 8003978:	200007d0 	.word	0x200007d0

0800397c <init_update_lights>:
{
 800397c:	b538      	push	{r3, r4, r5, lr}
	if (reg_shadow != NULL)
 800397e:	4c0d      	ldr	r4, [pc, #52]	; (80039b4 <init_update_lights+0x38>)
 8003980:	6820      	ldr	r0, [r4, #0]
 8003982:	b108      	cbz	r0, 8003988 <init_update_lights+0xc>
		free(reg_shadow);
 8003984:	f001 f9f2 	bl	8004d6c <free>
	reg_shadow = malloc(get_reg_length()+1);
 8003988:	f7ff fca8 	bl	80032dc <get_reg_length>
 800398c:	3001      	adds	r0, #1
 800398e:	f001 f9e5 	bl	8004d5c <malloc>
 8003992:	4605      	mov	r5, r0
 8003994:	6020      	str	r0, [r4, #0]
	memset(reg_shadow,0,get_reg_length());
 8003996:	f7ff fca1 	bl	80032dc <get_reg_length>
 800399a:	2100      	movs	r1, #0
 800399c:	4602      	mov	r2, r0
 800399e:	4628      	mov	r0, r5
 80039a0:	f001 f9ec 	bl	8004d7c <memset>
	reg_shadow[MAX_BRIGHTNESS] = 255;
 80039a4:	22ff      	movs	r2, #255	; 0xff
 80039a6:	6823      	ldr	r3, [r4, #0]
	update_pwm_lights(1);
 80039a8:	2001      	movs	r0, #1
	reg_shadow[MAX_BRIGHTNESS] = 255;
 80039aa:	701a      	strb	r2, [r3, #0]
}
 80039ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	update_pwm_lights(1);
 80039b0:	f7ff be96 	b.w	80036e0 <update_pwm_lights>
 80039b4:	20000284 	.word	0x20000284

080039b8 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039b8:	2228      	movs	r2, #40	; 0x28
{
 80039ba:	b530      	push	{r4, r5, lr}
 80039bc:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039be:	eb0d 0002 	add.w	r0, sp, r2
 80039c2:	2100      	movs	r1, #0
 80039c4:	f001 f9da 	bl	8004d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039c8:	2214      	movs	r2, #20
 80039ca:	2100      	movs	r1, #0
 80039cc:	eb0d 0002 	add.w	r0, sp, r2
 80039d0:	f001 f9d4 	bl	8004d7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039d4:	2100      	movs	r1, #0
 80039d6:	2210      	movs	r2, #16
 80039d8:	a801      	add	r0, sp, #4
 80039da:	f001 f9cf 	bl	8004d7c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80039de:	2309      	movs	r3, #9
 80039e0:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039e6:	2201      	movs	r2, #1
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039e8:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039ea:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039ec:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80039ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039f2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039f4:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80039f6:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80039f8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039fa:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039fc:	f7fd fe10 	bl	8001620 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a00:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a02:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a04:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a0e:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a10:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a12:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a14:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a16:	f7fd ffdd 	bl	80019d4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8003a1a:	2312      	movs	r3, #18
 8003a1c:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a22:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003a24:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003a26:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a28:	f7fe f892 	bl	8001b50 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003a2c:	b015      	add	sp, #84	; 0x54
 8003a2e:	bd30      	pop	{r4, r5, pc}

08003a30 <main>:
{
 8003a30:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003a34:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8003a36:	f7fc fe45 	bl	80006c4 <HAL_Init>
  SystemClock_Config();
 8003a3a:	f7ff ffbd 	bl	80039b8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a3e:	2210      	movs	r2, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a40:	4d9e      	ldr	r5, [pc, #632]	; (8003cbc <main+0x28c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a42:	eb0d 0002 	add.w	r0, sp, r2
 8003a46:	2100      	movs	r1, #0
 8003a48:	f001 f998 	bl	8004d7c <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a4c:	2701      	movs	r7, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4e:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a50:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 8003a52:	f04f 0880 	mov.w	r8, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a56:	f043 0310 	orr.w	r3, r3, #16
 8003a5a:	61ab      	str	r3, [r5, #24]
 8003a5c:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8003a5e:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a68:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8003a6a:	4895      	ldr	r0, [pc, #596]	; (8003cc0 <main+0x290>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a6c:	f043 0320 	orr.w	r3, r3, #32
 8003a70:	61ab      	str	r3, [r5, #24]
 8003a72:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin MODE_0_Pin MODE_1_Pin */
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a74:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7e:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LED_Pin;
 8003a80:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a84:	f043 0304 	orr.w	r3, r3, #4
 8003a88:	61ab      	str	r3, [r5, #24]
 8003a8a:	69ab      	ldr	r3, [r5, #24]
  /*Configure GPIO pins : CH1_R_Pin CH1_G_Pin CH1_B_Pin CH2_R_Pin 
                           CH2_G_Pin CH3_R_Pin CH3_G_Pin CH3_B_Pin */
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
                          |CH2_G_Pin|CH3_R_Pin|CH3_G_Pin|CH3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a8c:	f04f 0a03 	mov.w	sl, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	9302      	str	r3, [sp, #8]
 8003a96:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a98:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : BUTTON_Pin ADDR_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|ADDR_0_Pin;
 8003a9a:	f248 0b20 	movw	fp, #32800	; 0x8020
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a9e:	f043 0308 	orr.w	r3, r3, #8
 8003aa2:	61ab      	str	r3, [r5, #24]
 8003aa4:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa6:	9607      	str	r6, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	9303      	str	r3, [sp, #12]
 8003aae:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 8003ab0:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab4:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8003ab6:	f7fd f9c5 	bl	8000e44 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8003aba:	2200      	movs	r2, #0
 8003abc:	4641      	mov	r1, r8
 8003abe:	4880      	ldr	r0, [pc, #512]	; (8003cc0 <main+0x290>)
 8003ac0:	f7fd faa8 	bl	8001014 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
 8003ac4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ac8:	a904      	add	r1, sp, #16
 8003aca:	487e      	ldr	r0, [pc, #504]	; (8003cc4 <main+0x294>)
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
 8003acc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ace:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ad2:	f7fd f9b7 	bl	8000e44 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ad6:	a904      	add	r1, sp, #16
 8003ad8:	487a      	ldr	r0, [pc, #488]	; (8003cc4 <main+0x294>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ada:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pin = LED_Pin;
 8003adc:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae0:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae2:	f7fd f9af 	bl	8000e44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
 8003ae6:	f240 73ce 	movw	r3, #1998	; 0x7ce
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aea:	a904      	add	r1, sp, #16
 8003aec:	4876      	ldr	r0, [pc, #472]	; (8003cc8 <main+0x298>)
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
 8003aee:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af0:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003af2:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af6:	f7fd f9a5 	bl	8000e44 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afa:	a904      	add	r1, sp, #16
 8003afc:	4870      	ldr	r0, [pc, #448]	; (8003cc0 <main+0x290>)
  GPIO_InitStruct.Pin = CH2_B_Pin|CH2_W_Pin;
 8003afe:	f8cd a010 	str.w	sl, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b02:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b04:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b08:	f7fd f99c 	bl	8000e44 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0c:	a904      	add	r1, sp, #16
 8003b0e:	486e      	ldr	r0, [pc, #440]	; (8003cc8 <main+0x298>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b10:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUTTON_Pin|ADDR_0_Pin;
 8003b12:	f8cd b010 	str.w	fp, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b16:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b18:	f7fd f994 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR_5_Pin ADDR_6_Pin ADDR_7_Pin ADDR_1_Pin 
                           ADDR_2_Pin ADDR_3_Pin ADDR_4_Pin */
  GPIO_InitStruct.Pin = ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_1_Pin 
 8003b1c:	f247 3318 	movw	r3, #29464	; 0x7318
                          |ADDR_2_Pin|ADDR_3_Pin|ADDR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b20:	a904      	add	r1, sp, #16
 8003b22:	4867      	ldr	r0, [pc, #412]	; (8003cc0 <main+0x290>)
  GPIO_InitStruct.Pin = ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_1_Pin 
 8003b24:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b26:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b28:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2a:	f7fd f98b 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : WS8212_CH2_Pin WS8212_CH1_Pin */
  GPIO_InitStruct.Pin = WS8212_CH2_Pin|WS8212_CH1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2e:	a904      	add	r1, sp, #16
 8003b30:	4863      	ldr	r0, [pc, #396]	; (8003cc0 <main+0x290>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b32:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b34:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Pin = WS8212_CH2_Pin|WS8212_CH1_Pin;
 8003b38:	f8cd b010 	str.w	fp, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b3c:	f7fd f982 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DIR_Pin */
  GPIO_InitStruct.Pin = RS232_TX_Pin;
 8003b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b44:	f44f 2a60 	mov.w	sl, #917504	; 0xe0000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8003b48:	a904      	add	r1, sp, #16
 8003b4a:	485d      	ldr	r0, [pc, #372]	; (8003cc0 <main+0x290>)
  GPIO_InitStruct.Pin = RS232_TX_Pin;
 8003b4c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b50:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b52:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8003b54:	f7fd f976 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003b58:	4a5c      	ldr	r2, [pc, #368]	; (8003ccc <main+0x29c>)
  hadc1.Instance = ADC1;
 8003b5a:	4e5d      	ldr	r6, [pc, #372]	; (8003cd0 <main+0x2a0>)
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003b5c:	6853      	ldr	r3, [r2, #4]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003b5e:	4649      	mov	r1, r9
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003b60:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003b64:	433b      	orrs	r3, r7
 8003b66:	6053      	str	r3, [r2, #4]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003b68:	4856      	ldr	r0, [pc, #344]	; (8003cc4 <main+0x294>)
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	f7fd fa52 	bl	8001014 <HAL_GPIO_WritePin>
  hadc1.Instance = ADC1;
 8003b70:	4b58      	ldr	r3, [pc, #352]	; (8003cd4 <main+0x2a4>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b72:	4630      	mov	r0, r6
  hadc1.Instance = ADC1;
 8003b74:	6033      	str	r3, [r6, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003b76:	60b4      	str	r4, [r6, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003b78:	7334      	strb	r4, [r6, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b7a:	7534      	strb	r4, [r6, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b7c:	6074      	str	r4, [r6, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003b7e:	9404      	str	r4, [sp, #16]
 8003b80:	9405      	str	r4, [sp, #20]
 8003b82:	9406      	str	r4, [sp, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b84:	f8c6 a01c 	str.w	sl, [r6, #28]
  hadc1.Init.NbrOfConversion = 1;
 8003b88:	6137      	str	r7, [r6, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b8a:	f7fc ff03 	bl	8000994 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b8e:	a904      	add	r1, sp, #16
 8003b90:	4630      	mov	r0, r6
  hadc2.Instance = ADC2;
 8003b92:	4e51      	ldr	r6, [pc, #324]	; (8003cd8 <main+0x2a8>)
  sConfig.Channel = ADC_CHANNEL_0;
 8003b94:	9404      	str	r4, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003b96:	9406      	str	r4, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b98:	9705      	str	r7, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b9a:	f7fc fdb7 	bl	800070c <HAL_ADC_ConfigChannel>
  hadc2.Instance = ADC2;
 8003b9e:	4b4f      	ldr	r3, [pc, #316]	; (8003cdc <main+0x2ac>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003ba0:	4630      	mov	r0, r6
  hadc2.Instance = ADC2;
 8003ba2:	6033      	str	r3, [r6, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003ba4:	60b4      	str	r4, [r6, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003ba6:	7334      	strb	r4, [r6, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003ba8:	7534      	strb	r4, [r6, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003baa:	6074      	str	r4, [r6, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003bac:	9404      	str	r4, [sp, #16]
 8003bae:	9405      	str	r4, [sp, #20]
 8003bb0:	9406      	str	r4, [sp, #24]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003bb2:	f8c6 a01c 	str.w	sl, [r6, #28]
  hadc2.Init.NbrOfConversion = 1;
 8003bb6:	6137      	str	r7, [r6, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003bb8:	f7fc feec 	bl	8000994 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 8003bbc:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003bbe:	4630      	mov	r0, r6
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bc0:	260c      	movs	r6, #12
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003bc2:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_4;
 8003bc4:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003bc6:	9406      	str	r4, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003bc8:	9705      	str	r7, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003bca:	f7fc fd9f 	bl	800070c <HAL_ADC_ConfigChannel>
  huart1.Instance = USART1;
 8003bce:	4844      	ldr	r0, [pc, #272]	; (8003ce0 <main+0x2b0>)
  huart1.Init.BaudRate = 250000;
 8003bd0:	4b44      	ldr	r3, [pc, #272]	; (8003ce4 <main+0x2b4>)
 8003bd2:	4a45      	ldr	r2, [pc, #276]	; (8003ce8 <main+0x2b8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bd4:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 250000;
 8003bd6:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bda:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bdc:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bde:	61c4      	str	r4, [r0, #28]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8003be0:	f8c0 900c 	str.w	r9, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003be4:	6146      	str	r6, [r0, #20]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8003be6:	f7fe fb13 	bl	8002210 <HAL_HalfDuplex_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003bea:	4622      	mov	r2, r4
 8003bec:	4621      	mov	r1, r4
 8003bee:	2025      	movs	r0, #37	; 0x25
 8003bf0:	f7fc ff62 	bl	8000ab8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bf4:	2025      	movs	r0, #37	; 0x25
 8003bf6:	f7fc ff93 	bl	8000b20 <HAL_NVIC_EnableIRQ>
  huart3.Init.BaudRate = 115200;
 8003bfa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003bfe:	493b      	ldr	r1, [pc, #236]	; (8003cec <main+0x2bc>)
  huart3.Instance = USART3;
 8003c00:	483b      	ldr	r0, [pc, #236]	; (8003cf0 <main+0x2c0>)
  huart3.Init.BaudRate = 115200;
 8003c02:	e880 000a 	stmia.w	r0, {r1, r3}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c06:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c08:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003c0a:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c0c:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c0e:	61c4      	str	r4, [r0, #28]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c10:	6146      	str	r6, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c12:	f7fe facf 	bl	80021b4 <HAL_UART_Init>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c16:	4b37      	ldr	r3, [pc, #220]	; (8003cf4 <main+0x2c4>)
  print("");
 8003c18:	4837      	ldr	r0, [pc, #220]	; (8003cf8 <main+0x2c8>)
 8003c1a:	f8c3 8004 	str.w	r8, [r3, #4]
 8003c1e:	f000 fb63 	bl	80042e8 <print>
  print("-------------");
 8003c22:	4836      	ldr	r0, [pc, #216]	; (8003cfc <main+0x2cc>)
 8003c24:	f000 fb60 	bl	80042e8 <print>
  print("DMX CTRL V1.0");
 8003c28:	4835      	ldr	r0, [pc, #212]	; (8003d00 <main+0x2d0>)
 8003c2a:	f000 fb5d 	bl	80042e8 <print>
  print("-------------");
 8003c2e:	4833      	ldr	r0, [pc, #204]	; (8003cfc <main+0x2cc>)
 8003c30:	f000 fb5a 	bl	80042e8 <print>
  print("");
 8003c34:	4830      	ldr	r0, [pc, #192]	; (8003cf8 <main+0x2c8>)
 8003c36:	f000 fb57 	bl	80042e8 <print>
 if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == SET)
 8003c3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  init_timers();
 8003c3c:	f000 f90a 	bl	8003e54 <init_timers>
  print("Timer Init complete");
 8003c40:	4830      	ldr	r0, [pc, #192]	; (8003d04 <main+0x2d4>)
 8003c42:	f000 fb51 	bl	80042e8 <print>
  dmx512_init((dmxmode_t)get_mode_from_pins(),get_addr_from_pins());
 8003c46:	f7ff fcb9 	bl	80035bc <get_mode_from_pins>
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	f7ff fccc 	bl	80035e8 <get_addr_from_pins>
 8003c50:	4601      	mov	r1, r0
 8003c52:	4620      	mov	r0, r4
 8003c54:	f7ff fb5e 	bl	8003314 <dmx512_init>
  print("DMX512 Config complete");
 8003c58:	482b      	ldr	r0, [pc, #172]	; (8003d08 <main+0x2d8>)
 8003c5a:	f000 fb45 	bl	80042e8 <print>
  dmx512_rec_init();
 8003c5e:	f7ff fc4b 	bl	80034f8 <dmx512_rec_init>
  print("DMX512 Init complete");
 8003c62:	482a      	ldr	r0, [pc, #168]	; (8003d0c <main+0x2dc>)
 8003c64:	f000 fb40 	bl	80042e8 <print>
  init_update_lights();
 8003c68:	f7ff fe88 	bl	800397c <init_update_lights>
  print("PWM Update Init complete");
 8003c6c:	4828      	ldr	r0, [pc, #160]	; (8003d10 <main+0x2e0>)
 8003c6e:	f000 fb3b 	bl	80042e8 <print>
  init_trigger();
 8003c72:	f000 fea1 	bl	80049b8 <init_trigger>
  print("Trigger Init complete");
 8003c76:	4827      	ldr	r0, [pc, #156]	; (8003d14 <main+0x2e4>)
 8003c78:	f000 fb36 	bl	80042e8 <print>
  init_settings();
 8003c7c:	f000 f94e 	bl	8003f1c <init_settings>
  if (0 == check_button())
 8003c80:	f7ff fcf8 	bl	8003674 <check_button>
 8003c84:	b908      	cbnz	r0, 8003c8a <main+0x25a>
	  load_settings();
 8003c86:	f000 f9ef 	bl	8004068 <load_settings>
  apply_settings();
 8003c8a:	f000 f975 	bl	8003f78 <apply_settings>
  print("Settings complete");
 8003c8e:	4822      	ldr	r0, [pc, #136]	; (8003d18 <main+0x2e8>)
 8003c90:	f000 fb2a 	bl	80042e8 <print>
  print("Shell Active");
 8003c94:	4821      	ldr	r0, [pc, #132]	; (8003d1c <main+0x2ec>)
 8003c96:	f000 fb27 	bl	80042e8 <print>
  print_no_newline("DBG>");
 8003c9a:	4821      	ldr	r0, [pc, #132]	; (8003d20 <main+0x2f0>)
 8003c9c:	f000 fb44 	bl	8004328 <print_no_newline>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ca6:	4807      	ldr	r0, [pc, #28]	; (8003cc4 <main+0x294>)
 8003ca8:	f7fd f9b4 	bl	8001014 <HAL_GPIO_WritePin>
	shell_process();
 8003cac:	f000 fb56 	bl	800435c <shell_process>
		process_trigger();
 8003cb0:	f000 fea6 	bl	8004a00 <process_trigger>
	    update_pwm_lights(0);
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	f7ff fd13 	bl	80036e0 <update_pwm_lights>
 8003cba:	e7f7      	b.n	8003cac <main+0x27c>
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40010c00 	.word	0x40010c00
 8003cc4:	40011000 	.word	0x40011000
 8003cc8:	40010800 	.word	0x40010800
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	20000898 	.word	0x20000898
 8003cd4:	40012400 	.word	0x40012400
 8003cd8:	2000085c 	.word	0x2000085c
 8003cdc:	40012800 	.word	0x40012800
 8003ce0:	200008c8 	.word	0x200008c8
 8003ce4:	0003d090 	.word	0x0003d090
 8003ce8:	40013800 	.word	0x40013800
 8003cec:	40004800 	.word	0x40004800
 8003cf0:	2000081c 	.word	0x2000081c
 8003cf4:	e000e100 	.word	0xe000e100
 8003cf8:	08005d17 	.word	0x08005d17
 8003cfc:	08005d5a 	.word	0x08005d5a
 8003d00:	080059d4 	.word	0x080059d4
 8003d04:	080059e2 	.word	0x080059e2
 8003d08:	080059f6 	.word	0x080059f6
 8003d0c:	08005a0d 	.word	0x08005a0d
 8003d10:	08005a22 	.word	0x08005a22
 8003d14:	08005a3b 	.word	0x08005a3b
 8003d18:	08005a51 	.word	0x08005a51
 8003d1c:	08005a63 	.word	0x08005a63
 8003d20:	08005a70 	.word	0x08005a70

08003d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d24:	4770      	bx	lr
	...

08003d28 <PWM_Timer_Init>:

	  TIM_MasterConfigTypeDef sMasterConfig;
	  TIM_OC_InitTypeDef sConfigOC;
	  TIM_ClockConfigTypeDef sClockSourceConfig;

	  memset(&sConfigOC, 0, sizeof(sConfigOC));
 8003d28:	221c      	movs	r2, #28
{
 8003d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d2e:	b08e      	sub	sp, #56	; 0x38
 8003d30:	4606      	mov	r6, r0
	  memset(&sConfigOC, 0, sizeof(sConfigOC));
 8003d32:	2100      	movs	r1, #0
 8003d34:	eb0d 0002 	add.w	r0, sp, r2
 8003d38:	f001 f820 	bl	8004d7c <memset>
	  memset(&sMasterConfig, 0, sizeof(sMasterConfig));
 8003d3c:	2100      	movs	r1, #0
	  memset(&sClockSourceConfig, 0, sizeof(sClockSourceConfig));
 8003d3e:	2210      	movs	r2, #16
 8003d40:	a803      	add	r0, sp, #12
	  memset(&sMasterConfig, 0, sizeof(sMasterConfig));
 8003d42:	9101      	str	r1, [sp, #4]
 8003d44:	9102      	str	r1, [sp, #8]
	  memset(&sClockSourceConfig, 0, sizeof(sClockSourceConfig));
 8003d46:	f001 f819 	bl	8004d7c <memset>

	  switch(ID)
 8003d4a:	2e01      	cmp	r6, #1
 8003d4c:	4c38      	ldr	r4, [pc, #224]	; (8003e30 <PWM_Timer_Init+0x108>)
 8003d4e:	d067      	beq.n	8003e20 <PWM_Timer_Init+0xf8>
 8003d50:	d362      	bcc.n	8003e18 <PWM_Timer_Init+0xf0>
 8003d52:	2e02      	cmp	r6, #2
 8003d54:	d067      	beq.n	8003e26 <PWM_Timer_Init+0xfe>
	  	  case PWM_CH3:
	  		timerinfo[ID].Instance = TIM1;
		  break;
	  }

	  timerinfo[(uint8_t)ID].Init.Prescaler = 0;
 8003d56:	2300      	movs	r3, #0
	  timerinfo[(uint8_t)ID].Init.CounterMode = TIM_COUNTERMODE_UP;
	  timerinfo[(uint8_t)ID].Init.Period = 1066; //TBD....
 8003d58:	f240 422a 	movw	r2, #1066	; 0x42a
	  timerinfo[(uint8_t)ID].Init.Prescaler = 0;
 8003d5c:	eb04 1486 	add.w	r4, r4, r6, lsl #6
 8003d60:	6063      	str	r3, [r4, #4]
	  timerinfo[(uint8_t)ID].Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d62:	60a3      	str	r3, [r4, #8]
	  timerinfo[(uint8_t)ID].Init.Period = 1066; //TBD....
 8003d64:	60e2      	str	r2, [r4, #12]
	  timerinfo[(uint8_t)ID].Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d66:	6123      	str	r3, [r4, #16]
	  timerinfo[(uint8_t)ID].Init.RepetitionCounter = 0;
 8003d68:	6163      	str	r3, [r4, #20]
	  if (HAL_TIM_Base_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)/* to use the Timer to generate a simple time base for TIM1 */
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f7fe f828 	bl	8001dc0 <HAL_TIM_Base_Init>
 8003d70:	b110      	cbz	r0, 8003d78 <PWM_Timer_Init+0x50>
	  {
		  print("Timer Init Error 1");
 8003d72:	4830      	ldr	r0, [pc, #192]	; (8003e34 <PWM_Timer_Init+0x10c>)
 8003d74:	f000 fab8 	bl	80042e8 <print>
	  }

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;//the default clock is the internal clock from the APBx, using this function
 8003d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&timerinfo[(uint8_t)ID], &sClockSourceConfig) != HAL_OK)//Initializes the TIM PWM Time Base according to the specified
 8003d7c:	a903      	add	r1, sp, #12
 8003d7e:	4620      	mov	r0, r4
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;//the default clock is the internal clock from the APBx, using this function
 8003d80:	9303      	str	r3, [sp, #12]
	  if (HAL_TIM_ConfigClockSource(&timerinfo[(uint8_t)ID], &sClockSourceConfig) != HAL_OK)//Initializes the TIM PWM Time Base according to the specified
 8003d82:	f7fe f8e9 	bl	8001f58 <HAL_TIM_ConfigClockSource>
 8003d86:	b110      	cbz	r0, 8003d8e <PWM_Timer_Init+0x66>
	 //parameters in the TIM_HandleTypeDef and create the associated handle.
	   {
		  print("Timer Init Error 2");
 8003d88:	482b      	ldr	r0, [pc, #172]	; (8003e38 <PWM_Timer_Init+0x110>)
 8003d8a:	f000 faad 	bl	80042e8 <print>
	   }


	  if (HAL_TIM_PWM_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)
 8003d8e:	4620      	mov	r0, r4
 8003d90:	f7fe f830 	bl	8001df4 <HAL_TIM_PWM_Init>
 8003d94:	b110      	cbz	r0, 8003d9c <PWM_Timer_Init+0x74>
	  {
		  print("Timer Init Error 3");
 8003d96:	4829      	ldr	r0, [pc, #164]	; (8003e3c <PWM_Timer_Init+0x114>)
 8003d98:	f000 faa6 	bl	80042e8 <print>
	  }


	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d9c:	2360      	movs	r3, #96	; 0x60
 8003d9e:	9307      	str	r3, [sp, #28]
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
	  sConfigOC.Pulse = MAX_PWM/2; /* 50% duty cycle is 538, set to 0 initially*///
 8003da0:	f240 231a 	movw	r3, #538	; 0x21a
 8003da4:	9308      	str	r3, [sp, #32]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003da6:	2304      	movs	r3, #4
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003da8:	2500      	movs	r5, #0
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003daa:	930b      	str	r3, [sp, #44]	; 0x2c
 8003dac:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <PWM_Timer_Init+0x118>)
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
		  {
			  if (HAL_OK != HAL_TIM_PWM_ConfigChannel(&timerinfo[(uint8_t)ID], &sConfigOC, channelinfo[(int8_t)ID][ii]))
			  {
				  print("Timer Init Error 4");
 8003dae:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8003e4c <PWM_Timer_Init+0x124>
 8003db2:	eb03 1706 	add.w	r7, r3, r6, lsl #4
 8003db6:	b276      	sxtb	r6, r6
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003db8:	9509      	str	r5, [sp, #36]	; 0x24
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003dba:	950a      	str	r5, [sp, #40]	; 0x28
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003dbc:	950c      	str	r5, [sp, #48]	; 0x30
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003dbe:	950d      	str	r5, [sp, #52]	; 0x34
 8003dc0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 8003dc4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8003dc8:	2bff      	cmp	r3, #255	; 0xff
 8003dca:	d009      	beq.n	8003de0 <PWM_Timer_Init+0xb8>
			  if (HAL_OK != HAL_TIM_PWM_ConfigChannel(&timerinfo[(uint8_t)ID], &sConfigOC, channelinfo[(int8_t)ID][ii]))
 8003dcc:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 8003dd0:	a907      	add	r1, sp, #28
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	f7fe f854 	bl	8001e80 <HAL_TIM_PWM_ConfigChannel>
 8003dd8:	b110      	cbz	r0, 8003de0 <PWM_Timer_Init+0xb8>
				  print("Timer Init Error 4");
 8003dda:	4640      	mov	r0, r8
 8003ddc:	f000 fa84 	bl	80042e8 <print>
	  for (int ii=0;ii<4;ii++)
 8003de0:	3501      	adds	r5, #1
 8003de2:	2d04      	cmp	r5, #4
 8003de4:	d1ee      	bne.n	8003dc4 <PWM_Timer_Init+0x9c>

		  }
	  }

	 // HAL_TIM_MspPostInit(&timerinfo[(uint8_t)ID]);//output pin assignment
	  HAL_TIM_Base_Start(&timerinfo[(uint8_t)ID]); //Starts the TIM Base generation
 8003de6:	4620      	mov	r0, r4
 8003de8:	f7fd ff9f 	bl	8001d2a <HAL_TIM_Base_Start>

	  for (int ii=0;ii<4;ii++)
 8003dec:	2500      	movs	r5, #0
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
		  {
			  if (HAL_OK != HAL_TIM_PWM_Start(&timerinfo[(uint8_t)ID], channelinfo[(int8_t)ID][ii]))
			  {
				  print("Timer Init Error 5");
 8003dee:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8003e50 <PWM_Timer_Init+0x128>
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 8003df2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8003df6:	2bff      	cmp	r3, #255	; 0xff
 8003df8:	d008      	beq.n	8003e0c <PWM_Timer_Init+0xe4>
			  if (HAL_OK != HAL_TIM_PWM_Start(&timerinfo[(uint8_t)ID], channelinfo[(int8_t)ID][ii]))
 8003dfa:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f7fe f94c 	bl	800209c <HAL_TIM_PWM_Start>
 8003e04:	b110      	cbz	r0, 8003e0c <PWM_Timer_Init+0xe4>
				  print("Timer Init Error 5");
 8003e06:	4640      	mov	r0, r8
 8003e08:	f000 fa6e 	bl	80042e8 <print>
	  for (int ii=0;ii<4;ii++)
 8003e0c:	3501      	adds	r5, #1
 8003e0e:	2d04      	cmp	r5, #4
 8003e10:	d1ef      	bne.n	8003df2 <PWM_Timer_Init+0xca>
			  }

		  }
	  }
}
 8003e12:	b00e      	add	sp, #56	; 0x38
 8003e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  		timerinfo[ID].Instance = TIM2;
 8003e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e1c:	6023      	str	r3, [r4, #0]
		  break;
 8003e1e:	e79a      	b.n	8003d56 <PWM_Timer_Init+0x2e>
	  		timerinfo[ID].Instance = TIM3;
 8003e20:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <PWM_Timer_Init+0x11c>)
 8003e22:	6423      	str	r3, [r4, #64]	; 0x40
		  break;
 8003e24:	e797      	b.n	8003d56 <PWM_Timer_Init+0x2e>
	  		timerinfo[ID].Instance = TIM1;
 8003e26:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <PWM_Timer_Init+0x120>)
 8003e28:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		  break;
 8003e2c:	e793      	b.n	8003d56 <PWM_Timer_Init+0x2e>
 8003e2e:	bf00      	nop
 8003e30:	20000908 	.word	0x20000908
 8003e34:	08005a75 	.word	0x08005a75
 8003e38:	08005a88 	.word	0x08005a88
 8003e3c:	08005a9b 	.word	0x08005a9b
 8003e40:	08005ad4 	.word	0x08005ad4
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40012c00 	.word	0x40012c00
 8003e4c:	08005aae 	.word	0x08005aae
 8003e50:	08005ac1 	.word	0x08005ac1

08003e54 <init_timers>:
{
 8003e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__HAL_RCC_TIM1_CLK_ENABLE();
 8003e56:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <init_timers+0x54>)
	PWM_Timer_Init(PWM_CH1);
 8003e58:	2000      	movs	r0, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e60:	619a      	str	r2, [r3, #24]
 8003e62:	699a      	ldr	r2, [r3, #24]
 8003e64:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e68:	9201      	str	r2, [sp, #4]
 8003e6a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8003e6c:	69da      	ldr	r2, [r3, #28]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	61da      	str	r2, [r3, #28]
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	f002 0201 	and.w	r2, r2, #1
 8003e7a:	9202      	str	r2, [sp, #8]
 8003e7c:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8003e7e:	69da      	ldr	r2, [r3, #28]
 8003e80:	f042 0201 	orr.w	r2, r2, #1
 8003e84:	61da      	str	r2, [r3, #28]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	9303      	str	r3, [sp, #12]
 8003e8e:	9b03      	ldr	r3, [sp, #12]
	PWM_Timer_Init(PWM_CH1);
 8003e90:	f7ff ff4a 	bl	8003d28 <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH2);
 8003e94:	2001      	movs	r0, #1
 8003e96:	f7ff ff47 	bl	8003d28 <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH3);
 8003e9a:	2002      	movs	r0, #2
 8003e9c:	f7ff ff44 	bl	8003d28 <PWM_Timer_Init>
}
 8003ea0:	b005      	add	sp, #20
 8003ea2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000

08003eac <configPWM>:


//Setup PWM
void configPWM(pwmtimerid_t ID,pwmchid_t channel, uint16_t duty)
{
	  if (channelinfo[(uint8_t) ID][channel] != 255)
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <configPWM+0x30>)
 8003eae:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8003eb2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003eb6:	29ff      	cmp	r1, #255	; 0xff
 8003eb8:	d00e      	beq.n	8003ed8 <configPWM+0x2c>
 8003eba:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <configPWM+0x34>)
 8003ebc:	0180      	lsls	r0, r0, #6
	  {
	  __HAL_TIM_SET_COMPARE(&timerinfo[ID],  channelinfo[(uint8_t)ID][(uint8_t)channel], duty);
 8003ebe:	581b      	ldr	r3, [r3, r0]
 8003ec0:	b909      	cbnz	r1, 8003ec6 <configPWM+0x1a>
 8003ec2:	635a      	str	r2, [r3, #52]	; 0x34
 8003ec4:	4770      	bx	lr
 8003ec6:	2904      	cmp	r1, #4
 8003ec8:	d101      	bne.n	8003ece <configPWM+0x22>
 8003eca:	639a      	str	r2, [r3, #56]	; 0x38
 8003ecc:	4770      	bx	lr
 8003ece:	2908      	cmp	r1, #8
 8003ed0:	d101      	bne.n	8003ed6 <configPWM+0x2a>
 8003ed2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ed4:	4770      	bx	lr
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	08005ad4 	.word	0x08005ad4
 8003ee0:	20000908 	.word	0x20000908

08003ee4 <tracer_puts>:
	HAL_UART_Transmit(&huart3, &ch, 1, 5000);
}

void tracer_puts(uint8_t *str,const uint16_t size)
{
	HAL_UART_Transmit(&huart3,str,size, 5000);
 8003ee4:	460a      	mov	r2, r1
 8003ee6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003eea:	4601      	mov	r1, r0
 8003eec:	4801      	ldr	r0, [pc, #4]	; (8003ef4 <tracer_puts+0x10>)
 8003eee:	f7fe b9c1 	b.w	8002274 <HAL_UART_Transmit>
 8003ef2:	bf00      	nop
 8003ef4:	2000081c 	.word	0x2000081c

08003ef8 <tracer_getchar>:
}


uint8_t tracer_getchar(void)
{
 8003ef8:	b507      	push	{r0, r1, r2, lr}
	uint8_t data;
	if (HAL_OK == HAL_UART_Receive(&huart3, &data, 1, 0))
 8003efa:	2300      	movs	r3, #0
 8003efc:	2201      	movs	r2, #1
 8003efe:	f10d 0107 	add.w	r1, sp, #7
 8003f02:	4805      	ldr	r0, [pc, #20]	; (8003f18 <tracer_getchar+0x20>)
 8003f04:	f7fe fa12 	bl	800232c <HAL_UART_Receive>
 8003f08:	b920      	cbnz	r0, 8003f14 <tracer_getchar+0x1c>
		return data;
 8003f0a:	f89d 0007 	ldrb.w	r0, [sp, #7]
	else
		return 0;
}
 8003f0e:	b003      	add	sp, #12
 8003f10:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
 8003f14:	2000      	movs	r0, #0
 8003f16:	e7fa      	b.n	8003f0e <tracer_getchar+0x16>
 8003f18:	2000081c 	.word	0x2000081c

08003f1c <init_settings>:
#define PAGE_SETTING_START 123
#define PAGE_SETTING_COUNT 4


void init_settings(void)
{
 8003f1c:	b510      	push	{r4, lr}
	//Set everything to 0....
	memset(&settings,0,sizeof(settings_s));
 8003f1e:	4c15      	ldr	r4, [pc, #84]	; (8003f74 <init_settings+0x58>)
 8003f20:	224a      	movs	r2, #74	; 0x4a
 8003f22:	2100      	movs	r1, #0
 8003f24:	4620      	mov	r0, r4
 8003f26:	f000 ff29 	bl	8004d7c <memset>

	//Set deviations from 0...
	settings.max_brightness = 255;
 8003f2a:	23ff      	movs	r3, #255	; 0xff
 8003f2c:	8023      	strh	r3, [r4, #0]
	settings.strip1_speed = 10;
 8003f2e:	230a      	movs	r3, #10
 8003f30:	7623      	strb	r3, [r4, #24]
	settings.strip1_size = 10;;
 8003f32:	7663      	strb	r3, [r4, #25]
	settings.strip1_complexity = 10;
 8003f34:	76a3      	strb	r3, [r4, #26]
	settings.strip2_speed = 10;
 8003f36:	77e3      	strb	r3, [r4, #31]
	settings.strip2_size = 10;
 8003f38:	f884 3020 	strb.w	r3, [r4, #32]
	settings.strip2_complexity = 10;
 8003f3c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21


	settings.strip1_length = 300;
 8003f40:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003f44:	84e3      	strh	r3, [r4, #38]	; 0x26
	settings.strip2_length = 300;
 8003f46:	8523      	strh	r3, [r4, #40]	; 0x28

	settings.offset_red = -100;
 8003f48:	f64f 739c 	movw	r3, #65436	; 0xff9c
	settings.gain_red = 100;    //Gain * 100
 8003f4c:	2264      	movs	r2, #100	; 0x64
	settings.gamma_red = 220;   //Gamma * 100
	settings.offset_green = -80;
 8003f4e:	f64f 71b0 	movw	r1, #65456	; 0xffb0
	settings.offset_red = -100;
 8003f52:	8723      	strh	r3, [r4, #56]	; 0x38
	settings.gamma_red = 220;   //Gamma * 100
 8003f54:	23dc      	movs	r3, #220	; 0xdc
	settings.gain_red = 100;    //Gain * 100
 8003f56:	8762      	strh	r2, [r4, #58]	; 0x3a
	settings.gamma_red = 220;   //Gamma * 100
 8003f58:	87a3      	strh	r3, [r4, #60]	; 0x3c
	settings.offset_green = -80;
 8003f5a:	87e1      	strh	r1, [r4, #62]	; 0x3e
	settings.gain_green =100;    //Gain * 100
 8003f5c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
	settings.gamma_green = 220;   //Gamma * 100
 8003f60:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
	settings.offset_blue = -80;
 8003f64:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
	settings.gain_blue = 100;    //Gain * 100
 8003f68:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	settings.gamma_blue = 220;   //Gamma * 100
 8003f6c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8003f70:	bd10      	pop	{r4, pc}
 8003f72:	bf00      	nop
 8003f74:	200007d0 	.word	0x200007d0

08003f78 <apply_settings>:
}

void apply_settings(void)
{
 8003f78:	b510      	push	{r4, lr}
	//Apply settings to registers
	set_reg(MAX_BRIGHTNESS,settings.max_brightness);
 8003f7a:	4c3a      	ldr	r4, [pc, #232]	; (8004064 <apply_settings+0xec>)
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	7821      	ldrb	r1, [r4, #0]
 8003f80:	f7ff f9dc 	bl	800333c <set_reg>
	set_reg(CH1_RED,settings.pwm_ch1_r);
 8003f84:	78a1      	ldrb	r1, [r4, #2]
 8003f86:	2001      	movs	r0, #1
 8003f88:	f7ff f9d8 	bl	800333c <set_reg>
	set_reg(CH1_GREEN,settings.pwm_ch1_g);
 8003f8c:	7921      	ldrb	r1, [r4, #4]
 8003f8e:	2002      	movs	r0, #2
 8003f90:	f7ff f9d4 	bl	800333c <set_reg>
	set_reg(CH1_BLUE,settings.pwm_ch1_b);
 8003f94:	79a1      	ldrb	r1, [r4, #6]
 8003f96:	2003      	movs	r0, #3
 8003f98:	f7ff f9d0 	bl	800333c <set_reg>
	set_reg(CH2_RED,settings.pwm_ch2_r);
 8003f9c:	7a21      	ldrb	r1, [r4, #8]
 8003f9e:	2004      	movs	r0, #4
 8003fa0:	f7ff f9cc 	bl	800333c <set_reg>
	set_reg(CH2_GREEN,settings.pwm_ch2_g);
 8003fa4:	7aa1      	ldrb	r1, [r4, #10]
 8003fa6:	2005      	movs	r0, #5
 8003fa8:	f7ff f9c8 	bl	800333c <set_reg>
	set_reg(CH2_BLUE,settings.pwm_ch2_b);
 8003fac:	7b21      	ldrb	r1, [r4, #12]
 8003fae:	2006      	movs	r0, #6
 8003fb0:	f7ff f9c4 	bl	800333c <set_reg>
	set_reg(CH3_RED,settings.pwm_ch3_r);
 8003fb4:	7ba1      	ldrb	r1, [r4, #14]
 8003fb6:	2007      	movs	r0, #7
 8003fb8:	f7ff f9c0 	bl	800333c <set_reg>
	set_reg(CH3_GREEN,settings.pwm_ch3_g);
 8003fbc:	7c21      	ldrb	r1, [r4, #16]
 8003fbe:	2008      	movs	r0, #8
 8003fc0:	f7ff f9bc 	bl	800333c <set_reg>
	set_reg(CH3_BLUE,settings.pwm_ch3_b);
 8003fc4:	7ca1      	ldrb	r1, [r4, #18]
 8003fc6:	2009      	movs	r0, #9
 8003fc8:	f7ff f9b8 	bl	800333c <set_reg>
	set_reg(CH3_WHITE,settings.pwm_ch3_w);
 8003fcc:	7d21      	ldrb	r1, [r4, #20]
 8003fce:	200a      	movs	r0, #10
 8003fd0:	f7ff f9b4 	bl	800333c <set_reg>

	//Deal with LED Strip Registers
	if (DMX_MODE2 == get_mode())
 8003fd4:	f7ff f97c 	bl	80032d0 <get_mode>
 8003fd8:	2802      	cmp	r0, #2
 8003fda:	d142      	bne.n	8004062 <apply_settings+0xea>
	{
		set_reg(STRIP_BITS,settings.strip_bits);
 8003fdc:	7da1      	ldrb	r1, [r4, #22]
 8003fde:	200b      	movs	r0, #11
 8003fe0:	f7ff f9ac 	bl	800333c <set_reg>

		set_reg(STRIP1_PATTERN,settings.strip1_pattern);
 8003fe4:	7de1      	ldrb	r1, [r4, #23]
 8003fe6:	200c      	movs	r0, #12
 8003fe8:	f7ff f9a8 	bl	800333c <set_reg>
		set_reg(STRIP1_SPEED,settings.strip1_speed);
 8003fec:	7e21      	ldrb	r1, [r4, #24]
 8003fee:	200d      	movs	r0, #13
 8003ff0:	f7ff f9a4 	bl	800333c <set_reg>
		set_reg(STRIP1_SIZE,settings.strip1_size);
 8003ff4:	7e61      	ldrb	r1, [r4, #25]
 8003ff6:	200e      	movs	r0, #14
 8003ff8:	f7ff f9a0 	bl	800333c <set_reg>
		set_reg(STRIP1_COMPLEXITY,settings.strip1_complexity);
 8003ffc:	7ea1      	ldrb	r1, [r4, #26]
 8003ffe:	200f      	movs	r0, #15
 8004000:	f7ff f99c 	bl	800333c <set_reg>
		set_reg(STRIP1_V1,settings.strip1_v1);
 8004004:	7ee1      	ldrb	r1, [r4, #27]
 8004006:	2010      	movs	r0, #16
 8004008:	f7ff f998 	bl	800333c <set_reg>
		set_reg(STRIP1_V2,settings.strip1_v2);
 800400c:	7f21      	ldrb	r1, [r4, #28]
 800400e:	2011      	movs	r0, #17
 8004010:	f7ff f994 	bl	800333c <set_reg>
		set_reg(STRIP1_V3,settings.strip1_v3);
 8004014:	7f61      	ldrb	r1, [r4, #29]
 8004016:	2012      	movs	r0, #18
 8004018:	f7ff f990 	bl	800333c <set_reg>

		set_reg(STRIP2_PATTERN,settings.strip2_pattern);
 800401c:	7fa1      	ldrb	r1, [r4, #30]
 800401e:	2013      	movs	r0, #19
 8004020:	f7ff f98c 	bl	800333c <set_reg>
		set_reg(STRIP2_SPEED,settings.strip2_speed);
 8004024:	7fe1      	ldrb	r1, [r4, #31]
 8004026:	2014      	movs	r0, #20
 8004028:	f7ff f988 	bl	800333c <set_reg>
		set_reg(STRIP2_SIZE,settings.strip2_size);
 800402c:	f894 1020 	ldrb.w	r1, [r4, #32]
 8004030:	2015      	movs	r0, #21
 8004032:	f7ff f983 	bl	800333c <set_reg>
		set_reg(STRIP2_COMPLEXITY,settings.strip2_complexity);
 8004036:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 800403a:	2016      	movs	r0, #22
 800403c:	f7ff f97e 	bl	800333c <set_reg>
		set_reg(STRIP2_V1,settings.strip2_v1);
 8004040:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 8004044:	2017      	movs	r0, #23
 8004046:	f7ff f979 	bl	800333c <set_reg>
		set_reg(STRIP2_V2,settings.strip2_v2);
 800404a:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 800404e:	2018      	movs	r0, #24
 8004050:	f7ff f974 	bl	800333c <set_reg>
		set_reg(STRIP2_V3,settings.strip2_v3);
 8004054:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8004058:	2019      	movs	r0, #25
	}
}
 800405a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		set_reg(STRIP2_V3,settings.strip2_v3);
 800405e:	f7ff b96d 	b.w	800333c <set_reg>
 8004062:	bd10      	pop	{r4, pc}
 8004064:	200007d0 	.word	0x200007d0

08004068 <load_settings>:

void load_settings(void)
{
	EE_Reads(0,sizeof(settings_s),(uint32_t*)&settings);
 8004068:	4a02      	ldr	r2, [pc, #8]	; (8004074 <load_settings+0xc>)
 800406a:	214a      	movs	r1, #74	; 0x4a
 800406c:	2000      	movs	r0, #0
 800406e:	f7ff ba69 	b.w	8003544 <EE_Reads>
 8004072:	bf00      	nop
 8004074:	200007d0 	.word	0x200007d0

08004078 <save_settings>:
}

void save_settings(void)
{
	EE_Writes(0,256,(uint32_t*)&settings);
 8004078:	4a02      	ldr	r2, [pc, #8]	; (8004084 <save_settings+0xc>)
 800407a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800407e:	2000      	movs	r0, #0
 8004080:	f7ff ba74 	b.w	800356c <EE_Writes>
 8004084:	200007d0 	.word	0x200007d0

08004088 <print_settings>:
}

void print_settings(void)
{
 8004088:	b510      	push	{r4, lr}
	print("Settings");
 800408a:	4848      	ldr	r0, [pc, #288]	; (80041ac <print_settings+0x124>)
	print("-------");
	//Strips
	print("Strip 1 Length: %d",settings.strip1_length);
 800408c:	4c48      	ldr	r4, [pc, #288]	; (80041b0 <print_settings+0x128>)
	print("Settings");
 800408e:	f000 f92b 	bl	80042e8 <print>
	print("-------");
 8004092:	4848      	ldr	r0, [pc, #288]	; (80041b4 <print_settings+0x12c>)
 8004094:	f000 f928 	bl	80042e8 <print>
	print("Strip 1 Length: %d",settings.strip1_length);
 8004098:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800409a:	4847      	ldr	r0, [pc, #284]	; (80041b8 <print_settings+0x130>)
 800409c:	f000 f924 	bl	80042e8 <print>
	print("Strip 2 Length: %d",settings.strip2_length);
 80040a0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80040a2:	4846      	ldr	r0, [pc, #280]	; (80041bc <print_settings+0x134>)
 80040a4:	f000 f920 	bl	80042e8 <print>

	//Triggers
	print("Triggers");
 80040a8:	4845      	ldr	r0, [pc, #276]	; (80041c0 <print_settings+0x138>)
 80040aa:	f000 f91d 	bl	80042e8 <print>
	print("--------");
 80040ae:	4845      	ldr	r0, [pc, #276]	; (80041c4 <print_settings+0x13c>)
 80040b0:	f000 f91a 	bl	80042e8 <print>
	print("Trigger A0 Mode",settings.trigger_mode_A0);
 80040b4:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 80040b8:	4843      	ldr	r0, [pc, #268]	; (80041c8 <print_settings+0x140>)
 80040ba:	f000 f915 	bl	80042e8 <print>
	print("Trigger A0 Reg: %d",settings.trigger_reg_A0);
 80040be:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 80040c2:	4842      	ldr	r0, [pc, #264]	; (80041cc <print_settings+0x144>)
 80040c4:	f000 f910 	bl	80042e8 <print>
	print("Trigger A0 Reg Low->Hi: %d",settings.trigger_reg_lohi_A0);
 80040c8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80040cc:	4840      	ldr	r0, [pc, #256]	; (80041d0 <print_settings+0x148>)
 80040ce:	f000 f90b 	bl	80042e8 <print>
	print("Trigger A0 Val Low->Hi: %d",settings.trigger_val_lohi_A0);
 80040d2:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 80040d6:	483f      	ldr	r0, [pc, #252]	; (80041d4 <print_settings+0x14c>)
 80040d8:	f000 f906 	bl	80042e8 <print>
	print("Trigger A0 Reg Hi->Low: %d",settings.trigger_reg_hilo_A0);
 80040dc:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 80040e0:	483d      	ldr	r0, [pc, #244]	; (80041d8 <print_settings+0x150>)
 80040e2:	f000 f901 	bl	80042e8 <print>
	print("Trigger A0 Val Hi-Low: %d",settings.trigger_val_hilo_A0);
 80040e6:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80040ea:	483c      	ldr	r0, [pc, #240]	; (80041dc <print_settings+0x154>)
 80040ec:	f000 f8fc 	bl	80042e8 <print>
	print("Trigger A0 Level: %d",settings.trigger_level_A0);
 80040f0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80040f4:	483a      	ldr	r0, [pc, #232]	; (80041e0 <print_settings+0x158>)
 80040f6:	f000 f8f7 	bl	80042e8 <print>

	print("Trigger A1 Mode",settings.trigger_mode_A1);
 80040fa:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 80040fe:	4839      	ldr	r0, [pc, #228]	; (80041e4 <print_settings+0x15c>)
 8004100:	f000 f8f2 	bl	80042e8 <print>
	print("Trigger A1 Reg: %d",settings.trigger_reg_A1);
 8004104:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 8004108:	4837      	ldr	r0, [pc, #220]	; (80041e8 <print_settings+0x160>)
 800410a:	f000 f8ed 	bl	80042e8 <print>
	print("Trigger A1 Reg Low->Hi: %d",settings.trigger_reg_lohi_A1);
 800410e:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
 8004112:	4836      	ldr	r0, [pc, #216]	; (80041ec <print_settings+0x164>)
 8004114:	f000 f8e8 	bl	80042e8 <print>
	print("Trigger A1 Val Low->Hi: %d",settings.trigger_val_lohi_A1);
 8004118:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800411c:	4834      	ldr	r0, [pc, #208]	; (80041f0 <print_settings+0x168>)
 800411e:	f000 f8e3 	bl	80042e8 <print>
	print("Trigger A1 Reg Hi->Low: %d",settings.trigger_reg_hilo_A1);
 8004122:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 8004126:	4833      	ldr	r0, [pc, #204]	; (80041f4 <print_settings+0x16c>)
 8004128:	f000 f8de 	bl	80042e8 <print>
	print("Trigger A1 Val Hi-Low: %d",settings.trigger_val_hilo_A1);
 800412c:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
 8004130:	4831      	ldr	r0, [pc, #196]	; (80041f8 <print_settings+0x170>)
 8004132:	f000 f8d9 	bl	80042e8 <print>
	print("Trigger A1 Level: %d",settings.trigger_level_A1);
 8004136:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 800413a:	4830      	ldr	r0, [pc, #192]	; (80041fc <print_settings+0x174>)
 800413c:	f000 f8d4 	bl	80042e8 <print>

    //Calibration
	print("Calibration");
 8004140:	482f      	ldr	r0, [pc, #188]	; (8004200 <print_settings+0x178>)
 8004142:	f000 f8d1 	bl	80042e8 <print>
	print("-----------");
 8004146:	482f      	ldr	r0, [pc, #188]	; (8004204 <print_settings+0x17c>)
 8004148:	f000 f8ce 	bl	80042e8 <print>
	print("Offset Red: %d",settings.offset_red);
 800414c:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8004150:	482d      	ldr	r0, [pc, #180]	; (8004208 <print_settings+0x180>)
 8004152:	f000 f8c9 	bl	80042e8 <print>
	print("Gain Red: %d",settings.gain_red);
 8004156:	f9b4 103a 	ldrsh.w	r1, [r4, #58]	; 0x3a
 800415a:	482c      	ldr	r0, [pc, #176]	; (800420c <print_settings+0x184>)
 800415c:	f000 f8c4 	bl	80042e8 <print>
	print("Gamma Red: %d",settings.gamma_red);
 8004160:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8004164:	482a      	ldr	r0, [pc, #168]	; (8004210 <print_settings+0x188>)
 8004166:	f000 f8bf 	bl	80042e8 <print>
	print("Offset Green: %d",settings.offset_green);
 800416a:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
 800416e:	4829      	ldr	r0, [pc, #164]	; (8004214 <print_settings+0x18c>)
 8004170:	f000 f8ba 	bl	80042e8 <print>
	print("Gain Green: %d",settings.gain_green);
 8004174:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8004178:	4827      	ldr	r0, [pc, #156]	; (8004218 <print_settings+0x190>)
 800417a:	f000 f8b5 	bl	80042e8 <print>
	print("Gamma Green: %d",settings.gamma_green);
 800417e:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
 8004182:	4826      	ldr	r0, [pc, #152]	; (800421c <print_settings+0x194>)
 8004184:	f000 f8b0 	bl	80042e8 <print>
	print("Offset Blue: %d",settings.offset_blue);
 8004188:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
 800418c:	4824      	ldr	r0, [pc, #144]	; (8004220 <print_settings+0x198>)
 800418e:	f000 f8ab 	bl	80042e8 <print>
	print("Gain Blue: %d",settings.gain_blue);
 8004192:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
 8004196:	4823      	ldr	r0, [pc, #140]	; (8004224 <print_settings+0x19c>)
 8004198:	f000 f8a6 	bl	80042e8 <print>
	print("Gamma Blue: %d",settings.gamma_blue);
 800419c:	f9b4 1048 	ldrsh.w	r1, [r4, #72]	; 0x48
 80041a0:	4821      	ldr	r0, [pc, #132]	; (8004228 <print_settings+0x1a0>)
}
 80041a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	print("Gamma Blue: %d",settings.gamma_blue);
 80041a6:	f000 b89f 	b.w	80042e8 <print>
 80041aa:	bf00      	nop
 80041ac:	08005b04 	.word	0x08005b04
 80041b0:	200007d0 	.word	0x200007d0
 80041b4:	08005d60 	.word	0x08005d60
 80041b8:	08005b0d 	.word	0x08005b0d
 80041bc:	08005b20 	.word	0x08005b20
 80041c0:	08005b33 	.word	0x08005b33
 80041c4:	08005d5f 	.word	0x08005d5f
 80041c8:	08005b3c 	.word	0x08005b3c
 80041cc:	08005b4c 	.word	0x08005b4c
 80041d0:	08005b5f 	.word	0x08005b5f
 80041d4:	08005b7a 	.word	0x08005b7a
 80041d8:	08005b95 	.word	0x08005b95
 80041dc:	08005bb0 	.word	0x08005bb0
 80041e0:	08005bca 	.word	0x08005bca
 80041e4:	08005bdf 	.word	0x08005bdf
 80041e8:	08005bef 	.word	0x08005bef
 80041ec:	08005c02 	.word	0x08005c02
 80041f0:	08005c1d 	.word	0x08005c1d
 80041f4:	08005c38 	.word	0x08005c38
 80041f8:	08005c53 	.word	0x08005c53
 80041fc:	08005c6d 	.word	0x08005c6d
 8004200:	08005c82 	.word	0x08005c82
 8004204:	08005d5c 	.word	0x08005d5c
 8004208:	08005c8e 	.word	0x08005c8e
 800420c:	08005c9d 	.word	0x08005c9d
 8004210:	08005caa 	.word	0x08005caa
 8004214:	08005cb8 	.word	0x08005cb8
 8004218:	08005cc9 	.word	0x08005cc9
 800421c:	08005cd8 	.word	0x08005cd8
 8004220:	08005ce8 	.word	0x08005ce8
 8004224:	08005cf8 	.word	0x08005cf8
 8004228:	08005d06 	.word	0x08005d06

0800422c <cmd_buf_reset>:
    }
}

static void cmd_buf_reset(void)
{
    cmd_buf_idx = 0;
 800422c:	2100      	movs	r1, #0
 800422e:	4b03      	ldr	r3, [pc, #12]	; (800423c <cmd_buf_reset+0x10>)
    memset(cmd_buf, 0, sizeof(cmd_buf));
 8004230:	2280      	movs	r2, #128	; 0x80
 8004232:	4803      	ldr	r0, [pc, #12]	; (8004240 <cmd_buf_reset+0x14>)
    cmd_buf_idx = 0;
 8004234:	6019      	str	r1, [r3, #0]
    memset(cmd_buf, 0, sizeof(cmd_buf));
 8004236:	f000 bda1 	b.w	8004d7c <memset>
 800423a:	bf00      	nop
 800423c:	20000308 	.word	0x20000308
 8004240:	20000288 	.word	0x20000288

08004244 <load_command_from_command_history>:
    }
    cmd_hist_get_idx = cmd_hist_put_idx;
}

static void load_command_from_command_history(uint8_t dir)
{
 8004244:	b510      	push	{r4, lr}
 8004246:	4c19      	ldr	r4, [pc, #100]	; (80042ac <load_command_from_command_history+0x68>)
 8004248:	4a19      	ldr	r2, [pc, #100]	; (80042b0 <load_command_from_command_history+0x6c>)
    /* backwards */
    if (0 == dir)
    {
        if (0 == cmd_hist_get_idx)
 800424a:	6823      	ldr	r3, [r4, #0]
    if (0 == dir)
 800424c:	b9d0      	cbnz	r0, 8004284 <load_command_from_command_history+0x40>
        if (0 == cmd_hist_get_idx)
 800424e:	b9a3      	cbnz	r3, 800427a <load_command_from_command_history+0x36>
        {
            if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_put_idx)
 8004250:	6813      	ldr	r3, [r2, #0]
 8004252:	2b07      	cmp	r3, #7
 8004254:	d015      	beq.n	8004282 <load_command_from_command_history+0x3e>
            {
                return;
            }
            cmd_hist_get_idx = SHELL_CMD_HISTORY_LEN - 1;
 8004256:	2307      	movs	r3, #7
        }
        
        cmd_hist_get_idx++;
        if (SHELL_CMD_HISTORY_LEN == cmd_hist_get_idx)
        {
            cmd_hist_get_idx = 0;
 8004258:	6023      	str	r3, [r4, #0]
        }
    }
    
    cmd_buf_reset();
 800425a:	f7ff ffe7 	bl	800422c <cmd_buf_reset>
    strncpy(cmd_buf, cmd_hist[cmd_hist_get_idx], sizeof(cmd_buf));
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <load_command_from_command_history+0x70>)
 8004260:	6821      	ldr	r1, [r4, #0]
 8004262:	2280      	movs	r2, #128	; 0x80
 8004264:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 8004268:	4813      	ldr	r0, [pc, #76]	; (80042b8 <load_command_from_command_history+0x74>)
 800426a:	f000 fe6a 	bl	8004f42 <strncpy>
    cmd_buf_idx = strlen(cmd_buf);
 800426e:	4812      	ldr	r0, [pc, #72]	; (80042b8 <load_command_from_command_history+0x74>)
 8004270:	f7fb ff6c 	bl	800014c <strlen>
 8004274:	4b11      	ldr	r3, [pc, #68]	; (80042bc <load_command_from_command_history+0x78>)
 8004276:	6018      	str	r0, [r3, #0]
 8004278:	e003      	b.n	8004282 <load_command_from_command_history+0x3e>
            if (cmd_hist_get_idx - 1 == cmd_hist_put_idx)
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	3b01      	subs	r3, #1
 800427e:	4293      	cmp	r3, r2
 8004280:	d1ea      	bne.n	8004258 <load_command_from_command_history+0x14>
 8004282:	bd10      	pop	{r4, pc}
        if (cmd_hist_get_idx == cmd_hist_put_idx)
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	4293      	cmp	r3, r2
 8004288:	d0fb      	beq.n	8004282 <load_command_from_command_history+0x3e>
        if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_get_idx)
 800428a:	2b07      	cmp	r3, #7
 800428c:	d105      	bne.n	800429a <load_command_from_command_history+0x56>
            if (0 == cmd_hist_put_idx)
 800428e:	b93a      	cbnz	r2, 80042a0 <load_command_from_command_history+0x5c>
                cmd_hist_get_idx++;
 8004290:	6022      	str	r2, [r4, #0]
}
 8004292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                cmd_buf_reset();
 8004296:	f7ff bfc9 	b.w	800422c <cmd_buf_reset>
            if (cmd_hist_get_idx + 1 == cmd_hist_put_idx)
 800429a:	1c59      	adds	r1, r3, #1
 800429c:	428a      	cmp	r2, r1
 800429e:	d0f7      	beq.n	8004290 <load_command_from_command_history+0x4c>
        cmd_hist_get_idx++;
 80042a0:	3301      	adds	r3, #1
        if (SHELL_CMD_HISTORY_LEN == cmd_hist_get_idx)
 80042a2:	2b08      	cmp	r3, #8
            cmd_hist_get_idx = 0;
 80042a4:	bf08      	it	eq
 80042a6:	2300      	moveq	r3, #0
 80042a8:	e7d6      	b.n	8004258 <load_command_from_command_history+0x14>
 80042aa:	bf00      	nop
 80042ac:	2000070c 	.word	0x2000070c
 80042b0:	20000710 	.word	0x20000710
 80042b4:	2000030c 	.word	0x2000030c
 80042b8:	20000288 	.word	0x20000288
 80042bc:	20000308 	.word	0x20000308

080042c0 <send_vt100_key>:

static void send_vt100_key(vt100_key_t key)
{
 80042c0:	b508      	push	{r3, lr}
    vt100_keycode_t * keycode = vt100_get_keycode(key);
 80042c2:	f000 fce3 	bl	8004c8c <vt100_get_keycode>
    if (NULL != keycode)
 80042c6:	b128      	cbz	r0, 80042d4 <send_vt100_key+0x14>
    {
        uart_send( keycode->code, keycode->code_len);
    }
}
 80042c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tracer_puts(bytes,size);
 80042cc:	7a01      	ldrb	r1, [r0, #8]
 80042ce:	6840      	ldr	r0, [r0, #4]
 80042d0:	f7ff be08 	b.w	8003ee4 <tracer_puts>
 80042d4:	bd08      	pop	{r3, pc}

080042d6 <uart_receive_byte>:
{
 80042d6:	b510      	push	{r4, lr}
 80042d8:	4604      	mov	r4, r0
	unsigned char data = tracer_getchar();
 80042da:	f7ff fe0d 	bl	8003ef8 <tracer_getchar>
		*byte = 0;
 80042de:	7020      	strb	r0, [r4, #0]
	if (data == 0)
 80042e0:	b900      	cbnz	r0, 80042e4 <uart_receive_byte+0xe>
		return 0;
 80042e2:	bd10      	pop	{r4, pc}
		return 1;
 80042e4:	2001      	movs	r0, #1
}
 80042e6:	bd10      	pop	{r4, pc}

080042e8 <print>:
{	
 80042e8:	b40f      	push	{r0, r1, r2, r3}
 80042ea:	b513      	push	{r0, r1, r4, lr}
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80042ec:	4c0c      	ldr	r4, [pc, #48]	; (8004320 <print+0x38>)
{	
 80042ee:	ab04      	add	r3, sp, #16
 80042f0:	f853 2b04 	ldr.w	r2, [r3], #4
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80042f4:	217c      	movs	r1, #124	; 0x7c
 80042f6:	4620      	mov	r0, r4
    va_start(args, fmt);
 80042f8:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80042fa:	f000 ff4d 	bl	8005198 <vsniprintf>
    strcat(dbgMsg, "\r\n");
 80042fe:	4909      	ldr	r1, [pc, #36]	; (8004324 <print+0x3c>)
 8004300:	4620      	mov	r0, r4
 8004302:	f000 fdfd 	bl	8004f00 <strcat>
    len = strlen(dbgMsg);
 8004306:	4620      	mov	r0, r4
 8004308:	f7fb ff20 	bl	800014c <strlen>
	tracer_puts(bytes,size);
 800430c:	b281      	uxth	r1, r0
 800430e:	4620      	mov	r0, r4
 8004310:	f7ff fde8 	bl	8003ee4 <tracer_puts>
}
 8004314:	b002      	add	sp, #8
 8004316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800431a:	b004      	add	sp, #16
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000714 	.word	0x20000714
 8004324:	08005d15 	.word	0x08005d15

08004328 <print_no_newline>:
{	
 8004328:	b40f      	push	{r0, r1, r2, r3}
 800432a:	b513      	push	{r0, r1, r4, lr}
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 800432c:	4c0a      	ldr	r4, [pc, #40]	; (8004358 <print_no_newline+0x30>)
{	
 800432e:	ab04      	add	r3, sp, #16
 8004330:	f853 2b04 	ldr.w	r2, [r3], #4
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 8004334:	217c      	movs	r1, #124	; 0x7c
 8004336:	4620      	mov	r0, r4
    va_start(args, fmt);
 8004338:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 800433a:	f000 ff2d 	bl	8005198 <vsniprintf>
    (void) uart_send((uint8_t *)dbgMsg, (uint16_t) strlen(dbgMsg));		
 800433e:	4620      	mov	r0, r4
 8004340:	f7fb ff04 	bl	800014c <strlen>
	tracer_puts(bytes,size);
 8004344:	b281      	uxth	r1, r0
 8004346:	4620      	mov	r0, r4
 8004348:	f7ff fdcc 	bl	8003ee4 <tracer_puts>
}
 800434c:	b002      	add	sp, #8
 800434e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004352:	b004      	add	sp, #16
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	20000714 	.word	0x20000714

0800435c <shell_process>:
    
    cmd_buf_reset();
}

void shell_process(void)
{
 800435c:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
	char byte;
	const char prompt[] = "DBG>";
 8004360:	4b70      	ldr	r3, [pc, #448]	; (8004524 <shell_process+0x1c8>)
{
 8004362:	b097      	sub	sp, #92	; 0x5c
	const char prompt[] = "DBG>";
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	791b      	ldrb	r3, [r3, #4]
            print_no_newline(cmd_buf);
        }
        else if (VT100_KEY_CURSOR_DOWN == key)
        {
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 8004368:	4d6f      	ldr	r5, [pc, #444]	; (8004528 <shell_process+0x1cc>)
            print(shell_cmd_list[i].cmd);
 800436a:	4e70      	ldr	r6, [pc, #448]	; (800452c <shell_process+0x1d0>)
	const char prompt[] = "DBG>";
 800436c:	9003      	str	r0, [sp, #12]
 800436e:	f88d 3010 	strb.w	r3, [sp, #16]
	while (1 == uart_receive_byte((uint8_t*)&byte))
 8004372:	f10d 000b 	add.w	r0, sp, #11
 8004376:	f7ff ffae 	bl	80042d6 <uart_receive_byte>
 800437a:	2801      	cmp	r0, #1
 800437c:	d002      	beq.n	8004384 <shell_process+0x28>
            }
            load_command_from_command_history(1);
            print_no_newline(cmd_buf);
        }
	}
}
 800437e:	b017      	add	sp, #92	; 0x5c
 8004380:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
        vt100_key_t key = vt100_process_byte(byte);
 8004384:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8004388:	f000 fc38 	bl	8004bfc <vt100_process_byte>
        if (VT100_KEY_PRINTABLE == key)
 800438c:	2801      	cmp	r0, #1
 800438e:	d10e      	bne.n	80043ae <shell_process+0x52>
    if ((unsigned int)cmd_buf_idx < sizeof(cmd_buf))
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	2b7f      	cmp	r3, #127	; 0x7f
 8004394:	d805      	bhi.n	80043a2 <shell_process+0x46>
        cmd_buf[cmd_buf_idx++] = c;
 8004396:	1c5a      	adds	r2, r3, #1
            cmd_buf_add_char(byte);
 8004398:	f89d 100b 	ldrb.w	r1, [sp, #11]
        cmd_buf[cmd_buf_idx++] = c;
 800439c:	602a      	str	r2, [r5, #0]
 800439e:	4a64      	ldr	r2, [pc, #400]	; (8004530 <shell_process+0x1d4>)
 80043a0:	54d1      	strb	r1, [r2, r3]
	tracer_puts(bytes,size);
 80043a2:	2101      	movs	r1, #1
 80043a4:	f10d 000b 	add.w	r0, sp, #11
 80043a8:	f7ff fd9c 	bl	8003ee4 <tracer_puts>
 80043ac:	e7e1      	b.n	8004372 <shell_process+0x16>
        else if (VT100_KEY_ENTER == key)
 80043ae:	2808      	cmp	r0, #8
 80043b0:	d17a      	bne.n	80044a8 <shell_process+0x14c>
			print("");
 80043b2:	4860      	ldr	r0, [pc, #384]	; (8004534 <shell_process+0x1d8>)
 80043b4:	f7ff ff98 	bl	80042e8 <print>
	if (0 != strlen(cmd_buf))
 80043b8:	495d      	ldr	r1, [pc, #372]	; (8004530 <shell_process+0x1d4>)
 80043ba:	780b      	ldrb	r3, [r1, #0]
 80043bc:	b183      	cbz	r3, 80043e0 <shell_process+0x84>
    strncpy(cmd_hist[cmd_hist_put_idx], cmd_buf, sizeof(cmd_buf));
 80043be:	4f5e      	ldr	r7, [pc, #376]	; (8004538 <shell_process+0x1dc>)
 80043c0:	485e      	ldr	r0, [pc, #376]	; (800453c <shell_process+0x1e0>)
 80043c2:	683c      	ldr	r4, [r7, #0]
 80043c4:	2280      	movs	r2, #128	; 0x80
 80043c6:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    cmd_hist_put_idx++;
 80043ca:	3401      	adds	r4, #1
    strncpy(cmd_hist[cmd_hist_put_idx], cmd_buf, sizeof(cmd_buf));
 80043cc:	f000 fdb9 	bl	8004f42 <strncpy>
    if (cmd_hist_put_idx >= SHELL_CMD_HISTORY_LEN)
 80043d0:	2c07      	cmp	r4, #7
        cmd_hist_put_idx = 0;
 80043d2:	bfca      	itet	gt
 80043d4:	2300      	movgt	r3, #0
    cmd_hist_put_idx++;
 80043d6:	603c      	strle	r4, [r7, #0]
        cmd_hist_put_idx = 0;
 80043d8:	603b      	strgt	r3, [r7, #0]
    cmd_hist_get_idx = cmd_hist_put_idx;
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	4b58      	ldr	r3, [pc, #352]	; (8004540 <shell_process+0x1e4>)
 80043de:	601a      	str	r2, [r3, #0]
	tokens[arg_num] = strtok(buffer, " ");
 80043e0:	4958      	ldr	r1, [pc, #352]	; (8004544 <shell_process+0x1e8>)
 80043e2:	4853      	ldr	r0, [pc, #332]	; (8004530 <shell_process+0x1d4>)
 80043e4:	f000 fdc2 	bl	8004f6c <strtok>
	int arg_num = 0;
 80043e8:	2400      	movs	r4, #0
	tokens[arg_num] = strtok(buffer, " ");
 80043ea:	f10d 0958 	add.w	r9, sp, #88	; 0x58
		tokens[++arg_num] = strtok(NULL, " ");
 80043ee:	4f55      	ldr	r7, [pc, #340]	; (8004544 <shell_process+0x1e8>)
	tokens[arg_num] = strtok(buffer, " ");
 80043f0:	f849 0d44 	str.w	r0, [r9, #-68]!
	while(NULL != tokens[arg_num] && arg_num < (MAX_ARGUMENT_NUM-1))
 80043f4:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
 80043f8:	b10b      	cbz	r3, 80043fe <shell_process+0xa2>
 80043fa:	2c0f      	cmp	r4, #15
 80043fc:	d11f      	bne.n	800443e <shell_process+0xe2>
    if (0 == strncmp(argv[0], "help", SHELL_CMD_BUF_LEN))
 80043fe:	2280      	movs	r2, #128	; 0x80
 8004400:	4951      	ldr	r1, [pc, #324]	; (8004548 <shell_process+0x1ec>)
 8004402:	9805      	ldr	r0, [sp, #20]
 8004404:	f000 fd8b 	bl	8004f1e <strncmp>
	return arg_num - 1;
 8004408:	3c01      	subs	r4, #1
    if (0 == strncmp(argv[0], "help", SHELL_CMD_BUF_LEN))
 800440a:	4607      	mov	r7, r0
 800440c:	b1f8      	cbz	r0, 800444e <shell_process+0xf2>
    if (0 == strncmp(argv[0], "cls", SHELL_CMD_BUF_LEN))
 800440e:	2280      	movs	r2, #128	; 0x80
 8004410:	494e      	ldr	r1, [pc, #312]	; (800454c <shell_process+0x1f0>)
 8004412:	9805      	ldr	r0, [sp, #20]
 8004414:	f000 fd83 	bl	8004f1e <strncmp>
 8004418:	bb58      	cbnz	r0, 8004472 <shell_process+0x116>
        send_vt100_key(VT100_KEY_CLEAR_SCREEN);
 800441a:	200d      	movs	r0, #13
 800441c:	f7ff ff50 	bl	80042c0 <send_vt100_key>
        send_vt100_key(VT100_KEY_MOVE_CURSOR_HOME);
 8004420:	200e      	movs	r0, #14
 8004422:	f7ff ff4d 	bl	80042c0 <send_vt100_key>
    cmd_buf_reset();
 8004426:	f7ff ff01 	bl	800422c <cmd_buf_reset>
	tracer_puts(bytes,size);
 800442a:	f10d 000b 	add.w	r0, sp, #11
 800442e:	2101      	movs	r1, #1
 8004430:	f7ff fd58 	bl	8003ee4 <tracer_puts>
			print_no_newline("\n%s", prompt);
 8004434:	a903      	add	r1, sp, #12
 8004436:	4846      	ldr	r0, [pc, #280]	; (8004550 <shell_process+0x1f4>)
 8004438:	f7ff ff76 	bl	8004328 <print_no_newline>
 800443c:	e799      	b.n	8004372 <shell_process+0x16>
		tokens[++arg_num] = strtok(NULL, " ");
 800443e:	4639      	mov	r1, r7
 8004440:	2000      	movs	r0, #0
 8004442:	f000 fd93 	bl	8004f6c <strtok>
 8004446:	3401      	adds	r4, #1
 8004448:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
 800444c:	e7d2      	b.n	80043f4 <shell_process+0x98>
            print(shell_cmd_list[i].cmd);
 800444e:	f04f 0a0c 	mov.w	sl, #12
        print("");
 8004452:	4838      	ldr	r0, [pc, #224]	; (8004534 <shell_process+0x1d8>)
 8004454:	f7ff ff48 	bl	80042e8 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 8004458:	4b3e      	ldr	r3, [pc, #248]	; (8004554 <shell_process+0x1f8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	9b01      	ldr	r3, [sp, #4]
 8004460:	429f      	cmp	r7, r3
 8004462:	dad4      	bge.n	800440e <shell_process+0xb2>
            print(shell_cmd_list[i].cmd);
 8004464:	fb0a f307 	mul.w	r3, sl, r7
 8004468:	5998      	ldr	r0, [r3, r6]
 800446a:	f7ff ff3d 	bl	80042e8 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 800446e:	3701      	adds	r7, #1
 8004470:	e7f5      	b.n	800445e <shell_process+0x102>
    if (0 == strncmp(argv[0], "cls", SHELL_CMD_BUF_LEN))
 8004472:	f04f 0a00 	mov.w	sl, #0
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 8004476:	4b37      	ldr	r3, [pc, #220]	; (8004554 <shell_process+0x1f8>)
 8004478:	4f2c      	ldr	r7, [pc, #176]	; (800452c <shell_process+0x1d0>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	9b01      	ldr	r3, [sp, #4]
 8004480:	459a      	cmp	sl, r3
 8004482:	dad0      	bge.n	8004426 <shell_process+0xca>
            if(0 == strncmp(argv[0], shell_cmd_list[i].cmd, SHELL_CMD_BUF_LEN))
 8004484:	2280      	movs	r2, #128	; 0x80
 8004486:	6839      	ldr	r1, [r7, #0]
 8004488:	9805      	ldr	r0, [sp, #20]
 800448a:	f000 fd48 	bl	8004f1e <strncmp>
 800448e:	b938      	cbnz	r0, 80044a0 <shell_process+0x144>
                if(0 == shell_cmd_list[i].handler(argc, argv))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4649      	mov	r1, r9
 8004494:	4620      	mov	r0, r4
 8004496:	4798      	blx	r3
 8004498:	b910      	cbnz	r0, 80044a0 <shell_process+0x144>
                    print(shell_cmd_list[i].desc);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff ff24 	bl	80042e8 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 80044a0:	f10a 0a01 	add.w	sl, sl, #1
 80044a4:	370c      	adds	r7, #12
 80044a6:	e7ea      	b.n	800447e <shell_process+0x122>
        else if (VT100_KEY_INVALID == key)
 80044a8:	2800      	cmp	r0, #0
 80044aa:	f43f af62 	beq.w	8004372 <shell_process+0x16>
        else if (VT100_KEY_BACKSPACE == key)
 80044ae:	2807      	cmp	r0, #7
 80044b0:	d10e      	bne.n	80044d0 <shell_process+0x174>
    if (cmd_buf_idx > 0)
 80044b2:	682b      	ldr	r3, [r5, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	dd04      	ble.n	80044c2 <shell_process+0x166>
        cmd_buf[--cmd_buf_idx] = 0;
 80044b8:	2100      	movs	r1, #0
 80044ba:	4a1d      	ldr	r2, [pc, #116]	; (8004530 <shell_process+0x1d4>)
 80044bc:	3b01      	subs	r3, #1
 80044be:	602b      	str	r3, [r5, #0]
 80044c0:	54d1      	strb	r1, [r2, r3]
            send_vt100_key(VT100_KEY_BACKSPACE);
 80044c2:	2007      	movs	r0, #7
 80044c4:	f7ff fefc 	bl	80042c0 <send_vt100_key>
            send_vt100_key(VT100_KEY_CLEAR_EOL);
 80044c8:	200a      	movs	r0, #10
 80044ca:	f7ff fef9 	bl	80042c0 <send_vt100_key>
 80044ce:	e750      	b.n	8004372 <shell_process+0x16>
        else if (VT100_KEY_CURSOR_UP == key)
 80044d0:	2802      	cmp	r0, #2
 80044d2:	d116      	bne.n	8004502 <shell_process+0x1a6>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 80044d4:	200b      	movs	r0, #11
 80044d6:	f7ff fef3 	bl	80042c0 <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 80044da:	2400      	movs	r4, #0
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	3304      	adds	r3, #4
 80044e0:	429c      	cmp	r4, r3
 80044e2:	d309      	bcc.n	80044f8 <shell_process+0x19c>
			print_no_newline(prompt);
 80044e4:	a803      	add	r0, sp, #12
 80044e6:	f7ff ff1f 	bl	8004328 <print_no_newline>
            load_command_from_command_history(0);
 80044ea:	2000      	movs	r0, #0
            load_command_from_command_history(1);
 80044ec:	f7ff feaa 	bl	8004244 <load_command_from_command_history>
            print_no_newline(cmd_buf);
 80044f0:	480f      	ldr	r0, [pc, #60]	; (8004530 <shell_process+0x1d4>)
 80044f2:	f7ff ff19 	bl	8004328 <print_no_newline>
 80044f6:	e73c      	b.n	8004372 <shell_process+0x16>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 80044f8:	200c      	movs	r0, #12
 80044fa:	f7ff fee1 	bl	80042c0 <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 80044fe:	3401      	adds	r4, #1
 8004500:	e7ec      	b.n	80044dc <shell_process+0x180>
        else if (VT100_KEY_CURSOR_DOWN == key)
 8004502:	2803      	cmp	r0, #3
 8004504:	f47f af35 	bne.w	8004372 <shell_process+0x16>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 8004508:	200b      	movs	r0, #11
 800450a:	f7ff fed9 	bl	80042c0 <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 800450e:	2400      	movs	r4, #0
 8004510:	682b      	ldr	r3, [r5, #0]
 8004512:	429c      	cmp	r4, r3
 8004514:	db01      	blt.n	800451a <shell_process+0x1be>
            load_command_from_command_history(1);
 8004516:	2001      	movs	r0, #1
 8004518:	e7e8      	b.n	80044ec <shell_process+0x190>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 800451a:	200c      	movs	r0, #12
 800451c:	f7ff fed0 	bl	80042c0 <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 8004520:	3401      	adds	r4, #1
 8004522:	e7f5      	b.n	8004510 <shell_process+0x1b4>
 8004524:	08005a70 	.word	0x08005a70
 8004528:	20000308 	.word	0x20000308
 800452c:	08005ddc 	.word	0x08005ddc
 8004530:	20000288 	.word	0x20000288
 8004534:	08005d17 	.word	0x08005d17
 8004538:	20000710 	.word	0x20000710
 800453c:	2000030c 	.word	0x2000030c
 8004540:	2000070c 	.word	0x2000070c
 8004544:	080060fe 	.word	0x080060fe
 8004548:	08005d18 	.word	0x08005d18
 800454c:	08005d1d 	.word	0x08005d1d
 8004550:	08005d21 	.word	0x08005d21
 8004554:	08005d28 	.word	0x08005d28

08004558 <shell_cmd_savesettings>:
	return 1;
}

//savesettings
static int shell_cmd_savesettings(int argc, char ** argv)
{
 8004558:	b508      	push	{r3, lr}
		//TBD Yes/No Confirmation Check
		save_settings();
 800455a:	f7ff fd8d 	bl	8004078 <save_settings>
		return 1;
}
 800455e:	2001      	movs	r0, #1
 8004560:	bd08      	pop	{r3, pc}

08004562 <shell_cmd_dumpconfig>:
{
 8004562:	b508      	push	{r3, lr}
		print_settings();
 8004564:	f7ff fd90 	bl	8004088 <print_settings>
}
 8004568:	2001      	movs	r0, #1
 800456a:	bd08      	pop	{r3, pc}

0800456c <shell_cmd_getaddr>:
{
 800456c:	b508      	push	{r3, lr}
		print("DMX512 Address: %d",get_addr());
 800456e:	f7fe fea9 	bl	80032c4 <get_addr>
 8004572:	4601      	mov	r1, r0
 8004574:	4802      	ldr	r0, [pc, #8]	; (8004580 <shell_cmd_getaddr+0x14>)
 8004576:	f7ff feb7 	bl	80042e8 <print>
}
 800457a:	2001      	movs	r0, #1
 800457c:	bd08      	pop	{r3, pc}
 800457e:	bf00      	nop
 8004580:	08005d8a 	.word	0x08005d8a

08004584 <shell_cmd_getmode>:
{
 8004584:	b508      	push	{r3, lr}
	switch (get_mode())
 8004586:	f7fe fea3 	bl	80032d0 <get_mode>
 800458a:	2801      	cmp	r0, #1
 800458c:	d008      	beq.n	80045a0 <shell_cmd_getmode+0x1c>
 800458e:	d303      	bcc.n	8004598 <shell_cmd_getmode+0x14>
 8004590:	2802      	cmp	r0, #2
 8004592:	d007      	beq.n	80045a4 <shell_cmd_getmode+0x20>
}
 8004594:	2001      	movs	r0, #1
 8004596:	bd08      	pop	{r3, pc}
		print("Mode None (Uninitialized)");
 8004598:	4803      	ldr	r0, [pc, #12]	; (80045a8 <shell_cmd_getmode+0x24>)
		print("Mode 2 (PWM + Strip)");
 800459a:	f7ff fea5 	bl	80042e8 <print>
		break;
 800459e:	e7f9      	b.n	8004594 <shell_cmd_getmode+0x10>
		print("Mode 1 (PWM)");
 80045a0:	4802      	ldr	r0, [pc, #8]	; (80045ac <shell_cmd_getmode+0x28>)
 80045a2:	e7fa      	b.n	800459a <shell_cmd_getmode+0x16>
		print("Mode 2 (PWM + Strip)");
 80045a4:	4802      	ldr	r0, [pc, #8]	; (80045b0 <shell_cmd_getmode+0x2c>)
 80045a6:	e7f8      	b.n	800459a <shell_cmd_getmode+0x16>
 80045a8:	08005d9d 	.word	0x08005d9d
 80045ac:	08005db7 	.word	0x08005db7
 80045b0:	08005dc4 	.word	0x08005dc4

080045b4 <shell_cmd_dumpregs>:
{
 80045b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		print("DMX512 Address: %d",get_addr());
 80045b6:	f7fe fe85 	bl	80032c4 <get_addr>
 80045ba:	4601      	mov	r1, r0
 80045bc:	4816      	ldr	r0, [pc, #88]	; (8004618 <shell_cmd_dumpregs+0x64>)
 80045be:	f7ff fe93 	bl	80042e8 <print>
		print("DMX512 Blocklength: %d",get_reg_length());
 80045c2:	f7fe fe8b 	bl	80032dc <get_reg_length>
 80045c6:	4601      	mov	r1, r0
 80045c8:	4814      	ldr	r0, [pc, #80]	; (800461c <shell_cmd_dumpregs+0x68>)
 80045ca:	f7ff fe8d 	bl	80042e8 <print>
		print("Mode: %d",(uint8_t)get_mode());
 80045ce:	f7fe fe7f 	bl	80032d0 <get_mode>
 80045d2:	4601      	mov	r1, r0
 80045d4:	4812      	ldr	r0, [pc, #72]	; (8004620 <shell_cmd_dumpregs+0x6c>)
 80045d6:	f7ff fe87 	bl	80042e8 <print>
		print("---------------------------");
 80045da:	4812      	ldr	r0, [pc, #72]	; (8004624 <shell_cmd_dumpregs+0x70>)
 80045dc:	f7ff fe84 	bl	80042e8 <print>
		for(int ii=0;ii< get_reg_length();ii++)
 80045e0:	2400      	movs	r4, #0
			print("Reg: %d\t Addr:%d  \t (%s)\t Val: %d",ii,get_addr()+ii,get_reg_name(ii),get_reg(ii));
 80045e2:	4d11      	ldr	r5, [pc, #68]	; (8004628 <shell_cmd_dumpregs+0x74>)
		for(int ii=0;ii< get_reg_length();ii++)
 80045e4:	f7fe fe7a 	bl	80032dc <get_reg_length>
 80045e8:	42a0      	cmp	r0, r4
 80045ea:	d802      	bhi.n	80045f2 <shell_cmd_dumpregs+0x3e>
}
 80045ec:	2001      	movs	r0, #1
 80045ee:	b003      	add	sp, #12
 80045f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			print("Reg: %d\t Addr:%d  \t (%s)\t Val: %d",ii,get_addr()+ii,get_reg_name(ii),get_reg(ii));
 80045f2:	f7fe fe67 	bl	80032c4 <get_addr>
 80045f6:	1826      	adds	r6, r4, r0
 80045f8:	4620      	mov	r0, r4
 80045fa:	f7fe febd 	bl	8003378 <get_reg_name>
 80045fe:	4607      	mov	r7, r0
 8004600:	4620      	mov	r0, r4
 8004602:	f7fe fea9 	bl	8003358 <get_reg>
 8004606:	4621      	mov	r1, r4
 8004608:	9000      	str	r0, [sp, #0]
 800460a:	463b      	mov	r3, r7
 800460c:	4632      	mov	r2, r6
 800460e:	4628      	mov	r0, r5
 8004610:	f7ff fe6a 	bl	80042e8 <print>
		for(int ii=0;ii< get_reg_length();ii++)
 8004614:	3401      	adds	r4, #1
 8004616:	e7e5      	b.n	80045e4 <shell_cmd_dumpregs+0x30>
 8004618:	08005d8a 	.word	0x08005d8a
 800461c:	08005d2c 	.word	0x08005d2c
 8004620:	08005d43 	.word	0x08005d43
 8004624:	08005d4c 	.word	0x08005d4c
 8004628:	08005d68 	.word	0x08005d68

0800462c <shell_cmd_setgamma>:
}

//setgamma
static int shell_cmd_setgamma(int argc, char ** argv)
{
	if (argc == 2)
 800462c:	2802      	cmp	r0, #2
{
 800462e:	b538      	push	{r3, r4, r5, lr}
 8004630:	460c      	mov	r4, r1
	if (argc == 2)
 8004632:	d118      	bne.n	8004666 <shell_cmd_setgamma+0x3a>
	{
		switch (atoi(argv[1]))
 8004634:	6848      	ldr	r0, [r1, #4]
 8004636:	f000 fb62 	bl	8004cfe <atoi>
 800463a:	4d0c      	ldr	r5, [pc, #48]	; (800466c <shell_cmd_setgamma+0x40>)
 800463c:	b138      	cbz	r0, 800464e <shell_cmd_setgamma+0x22>
 800463e:	2802      	cmp	r0, #2
 8004640:	d00b      	beq.n	800465a <shell_cmd_setgamma+0x2e>
		case 0:
			settings.gamma_red = atoi(argv[2]);
			break;
		default:
		case 1:
			settings.gamma_green = atoi(argv[2]);
 8004642:	68a0      	ldr	r0, [r4, #8]
 8004644:	f000 fb5b 	bl	8004cfe <atoi>
 8004648:	f8a5 0042 	strh.w	r0, [r5, #66]	; 0x42
 800464c:	e003      	b.n	8004656 <shell_cmd_setgamma+0x2a>
			settings.gamma_red = atoi(argv[2]);
 800464e:	68a0      	ldr	r0, [r4, #8]
 8004650:	f000 fb55 	bl	8004cfe <atoi>
 8004654:	87a8      	strh	r0, [r5, #60]	; 0x3c
	}
	else
	{
		return 0;
	}
	return 1;
 8004656:	2001      	movs	r0, #1
			break;
 8004658:	bd38      	pop	{r3, r4, r5, pc}
			settings.gamma_blue = atoi(argv[2]);
 800465a:	68a0      	ldr	r0, [r4, #8]
 800465c:	f000 fb4f 	bl	8004cfe <atoi>
 8004660:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
 8004664:	e7f7      	b.n	8004656 <shell_cmd_setgamma+0x2a>
		return 0;
 8004666:	2000      	movs	r0, #0
}
 8004668:	bd38      	pop	{r3, r4, r5, pc}
 800466a:	bf00      	nop
 800466c:	200007d0 	.word	0x200007d0

08004670 <shell_cmd_setoffset>:
	if (argc == 2)
 8004670:	2802      	cmp	r0, #2
{
 8004672:	b538      	push	{r3, r4, r5, lr}
 8004674:	460c      	mov	r4, r1
	if (argc == 2)
 8004676:	d117      	bne.n	80046a8 <shell_cmd_setoffset+0x38>
		switch (atoi(argv[1]))
 8004678:	6848      	ldr	r0, [r1, #4]
 800467a:	f000 fb40 	bl	8004cfe <atoi>
 800467e:	4d0b      	ldr	r5, [pc, #44]	; (80046ac <shell_cmd_setoffset+0x3c>)
 8004680:	b130      	cbz	r0, 8004690 <shell_cmd_setoffset+0x20>
 8004682:	2802      	cmp	r0, #2
 8004684:	d00a      	beq.n	800469c <shell_cmd_setoffset+0x2c>
			settings.offset_green = atoi(argv[2]);
 8004686:	68a0      	ldr	r0, [r4, #8]
 8004688:	f000 fb39 	bl	8004cfe <atoi>
 800468c:	87e8      	strh	r0, [r5, #62]	; 0x3e
 800468e:	e003      	b.n	8004698 <shell_cmd_setoffset+0x28>
			settings.offset_red = atoi(argv[2]);
 8004690:	68a0      	ldr	r0, [r4, #8]
 8004692:	f000 fb34 	bl	8004cfe <atoi>
 8004696:	8728      	strh	r0, [r5, #56]	; 0x38
	return 1;
 8004698:	2001      	movs	r0, #1
			break;
 800469a:	bd38      	pop	{r3, r4, r5, pc}
			settings.offset_blue = atoi(argv[2]);
 800469c:	68a0      	ldr	r0, [r4, #8]
 800469e:	f000 fb2e 	bl	8004cfe <atoi>
 80046a2:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
 80046a6:	e7f7      	b.n	8004698 <shell_cmd_setoffset+0x28>
		return 0;
 80046a8:	2000      	movs	r0, #0
}
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	200007d0 	.word	0x200007d0

080046b0 <shell_cmd_setgain>:
	if (argc == 2)
 80046b0:	2802      	cmp	r0, #2
{
 80046b2:	b538      	push	{r3, r4, r5, lr}
 80046b4:	460c      	mov	r4, r1
	if (argc == 2)
 80046b6:	d118      	bne.n	80046ea <shell_cmd_setgain+0x3a>
		switch (atoi(argv[1]))
 80046b8:	6848      	ldr	r0, [r1, #4]
 80046ba:	f000 fb20 	bl	8004cfe <atoi>
 80046be:	4d0c      	ldr	r5, [pc, #48]	; (80046f0 <shell_cmd_setgain+0x40>)
 80046c0:	b138      	cbz	r0, 80046d2 <shell_cmd_setgain+0x22>
 80046c2:	2802      	cmp	r0, #2
 80046c4:	d00b      	beq.n	80046de <shell_cmd_setgain+0x2e>
			settings.gain_green = atoi(argv[2]);
 80046c6:	68a0      	ldr	r0, [r4, #8]
 80046c8:	f000 fb19 	bl	8004cfe <atoi>
 80046cc:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
 80046d0:	e003      	b.n	80046da <shell_cmd_setgain+0x2a>
			settings.gain_red = atoi(argv[2]);
 80046d2:	68a0      	ldr	r0, [r4, #8]
 80046d4:	f000 fb13 	bl	8004cfe <atoi>
 80046d8:	8768      	strh	r0, [r5, #58]	; 0x3a
	return 1;
 80046da:	2001      	movs	r0, #1
			break;
 80046dc:	bd38      	pop	{r3, r4, r5, pc}
			settings.gain_blue = atoi(argv[2]);
 80046de:	68a0      	ldr	r0, [r4, #8]
 80046e0:	f000 fb0d 	bl	8004cfe <atoi>
 80046e4:	f8a5 0046 	strh.w	r0, [r5, #70]	; 0x46
 80046e8:	e7f7      	b.n	80046da <shell_cmd_setgain+0x2a>
		return 0;
 80046ea:	2000      	movs	r0, #0
}
 80046ec:	bd38      	pop	{r3, r4, r5, pc}
 80046ee:	bf00      	nop
 80046f0:	200007d0 	.word	0x200007d0

080046f4 <shell_cmd_setbrightness>:
	if (argc == 1)
 80046f4:	2801      	cmp	r0, #1
{
 80046f6:	b510      	push	{r4, lr}
 80046f8:	4604      	mov	r4, r0
	if (argc == 1)
 80046fa:	d108      	bne.n	800470e <shell_cmd_setbrightness+0x1a>
		set_reg(MAX_BRIGHTNESS,(uint8_t) atoi(argv[1]));
 80046fc:	6848      	ldr	r0, [r1, #4]
 80046fe:	f000 fafe 	bl	8004cfe <atoi>
 8004702:	b2c1      	uxtb	r1, r0
 8004704:	2000      	movs	r0, #0
 8004706:	f7fe fe19 	bl	800333c <set_reg>
}
 800470a:	4620      	mov	r0, r4
 800470c:	bd10      	pop	{r4, pc}
		return 0;
 800470e:	2400      	movs	r4, #0
 8004710:	e7fb      	b.n	800470a <shell_cmd_setbrightness+0x16>

08004712 <shell_cmd_setpwm>:
	if (argc == 3)
 8004712:	2803      	cmp	r0, #3
{
 8004714:	b570      	push	{r4, r5, r6, lr}
 8004716:	460c      	mov	r4, r1
	if (argc == 3)
 8004718:	d111      	bne.n	800473e <shell_cmd_setpwm+0x2c>
		configPWM((pwmtimerid_t)atoi(argv[1]),(pwmchid_t)atoi(argv[2]), (uint16_t)atoi(argv[3]));
 800471a:	6848      	ldr	r0, [r1, #4]
 800471c:	f000 faef 	bl	8004cfe <atoi>
 8004720:	4605      	mov	r5, r0
 8004722:	68a0      	ldr	r0, [r4, #8]
 8004724:	f000 faeb 	bl	8004cfe <atoi>
 8004728:	4606      	mov	r6, r0
 800472a:	68e0      	ldr	r0, [r4, #12]
 800472c:	f000 fae7 	bl	8004cfe <atoi>
 8004730:	b2f1      	uxtb	r1, r6
 8004732:	b282      	uxth	r2, r0
 8004734:	b2e8      	uxtb	r0, r5
 8004736:	f7ff fbb9 	bl	8003eac <configPWM>
 800473a:	2001      	movs	r0, #1
 800473c:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 800473e:	2000      	movs	r0, #0
}
 8004740:	bd70      	pop	{r4, r5, r6, pc}
	...

08004744 <shell_cmd_test>:
	if (argc == 1)
 8004744:	2801      	cmp	r0, #1
{
 8004746:	b510      	push	{r4, lr}
 8004748:	4604      	mov	r4, r0
	if (argc == 1)
 800474a:	d105      	bne.n	8004758 <shell_cmd_test+0x14>
		print("Loopback Data: %s",argv[1]);
 800474c:	6849      	ldr	r1, [r1, #4]
 800474e:	4803      	ldr	r0, [pc, #12]	; (800475c <shell_cmd_test+0x18>)
 8004750:	f7ff fdca 	bl	80042e8 <print>
}
 8004754:	4620      	mov	r0, r4
 8004756:	bd10      	pop	{r4, pc}
	return 0;
 8004758:	2400      	movs	r4, #0
 800475a:	e7fb      	b.n	8004754 <shell_cmd_test+0x10>
 800475c:	08005e60 	.word	0x08005e60

08004760 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004760:	4b0e      	ldr	r3, [pc, #56]	; (800479c <HAL_MspInit+0x3c>)
{
 8004762:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	619a      	str	r2, [r3, #24]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	f002 0201 	and.w	r2, r2, #1
 8004772:	9200      	str	r2, [sp, #0]
 8004774:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800477c:	61da      	str	r2, [r3, #28]
 800477e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004780:	4a07      	ldr	r2, [pc, #28]	; (80047a0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800478a:	6853      	ldr	r3, [r2, #4]
 800478c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004790:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004794:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004796:	b002      	add	sp, #8
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40021000 	.word	0x40021000
 80047a0:	40010000 	.word	0x40010000

080047a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80047a4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a6:	2410      	movs	r4, #16
{
 80047a8:	4605      	mov	r5, r0
 80047aa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ac:	4622      	mov	r2, r4
 80047ae:	2100      	movs	r1, #0
 80047b0:	eb0d 0004 	add.w	r0, sp, r4
 80047b4:	f000 fae2 	bl	8004d7c <memset>
  if(hadc->Instance==ADC1)
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <HAL_ADC_MspInit+0x90>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d11d      	bne.n	80047fc <HAL_ADC_MspInit+0x58>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80047c0:	4b1d      	ldr	r3, [pc, #116]	; (8004838 <HAL_ADC_MspInit+0x94>)
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = ANALOG_0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(ANALOG_0_GPIO_Port, &GPIO_InitStruct);
 80047c2:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_ADC1_CLK_ENABLE();
 80047c6:	699a      	ldr	r2, [r3, #24]
 80047c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047cc:	619a      	str	r2, [r3, #24]
 80047ce:	699a      	ldr	r2, [r3, #24]
 80047d0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80047d4:	9200      	str	r2, [sp, #0]
 80047d6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	f042 0204 	orr.w	r2, r2, #4
 80047de:	619a      	str	r2, [r3, #24]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ANALOG_0_Pin;
 80047ea:	2301      	movs	r3, #1
 80047ec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047ee:	2303      	movs	r3, #3
 80047f0:	9305      	str	r3, [sp, #20]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN4 
    */
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 80047f2:	4812      	ldr	r0, [pc, #72]	; (800483c <HAL_ADC_MspInit+0x98>)
 80047f4:	f7fc fb26 	bl	8000e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80047f8:	b009      	add	sp, #36	; 0x24
 80047fa:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 80047fc:	4a10      	ldr	r2, [pc, #64]	; (8004840 <HAL_ADC_MspInit+0x9c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d1fa      	bne.n	80047f8 <HAL_ADC_MspInit+0x54>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004802:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <HAL_ADC_MspInit+0x94>)
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8004804:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800480c:	619a      	str	r2, [r3, #24]
 800480e:	699a      	ldr	r2, [r3, #24]
 8004810:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8004814:	9202      	str	r2, [sp, #8]
 8004816:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	f042 0204 	orr.w	r2, r2, #4
 800481e:	619a      	str	r2, [r3, #24]
 8004820:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8004822:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	9303      	str	r3, [sp, #12]
 800482a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800482c:	2303      	movs	r3, #3
 800482e:	9305      	str	r3, [sp, #20]
 8004830:	e7df      	b.n	80047f2 <HAL_ADC_MspInit+0x4e>
 8004832:	bf00      	nop
 8004834:	40012400 	.word	0x40012400
 8004838:	40021000 	.word	0x40021000
 800483c:	40010800 	.word	0x40010800
 8004840:	40012800 	.word	0x40012800

08004844 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004844:	2210      	movs	r2, #16
{
 8004846:	b510      	push	{r4, lr}
 8004848:	4604      	mov	r4, r0
 800484a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800484c:	eb0d 0002 	add.w	r0, sp, r2
 8004850:	2100      	movs	r1, #0
 8004852:	f000 fa93 	bl	8004d7c <memset>
  if(huart->Instance==USART1)
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <HAL_UART_MspInit+0xc0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d125      	bne.n	80048aa <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800485e:	4b2a      	ldr	r3, [pc, #168]	; (8004908 <HAL_UART_MspInit+0xc4>)
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = RS485_RXTX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8004860:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8004862:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8004864:	4829      	ldr	r0, [pc, #164]	; (800490c <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800486a:	619a      	str	r2, [r3, #24]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004872:	9200      	str	r2, [sp, #0]
 8004874:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004876:	699a      	ldr	r2, [r3, #24]
 8004878:	f042 0208 	orr.w	r2, r2, #8
 800487c:	619a      	str	r2, [r3, #24]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = RS485_RXTX_Pin;
 8004888:	2340      	movs	r3, #64	; 0x40
 800488a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800488c:	2312      	movs	r3, #18
 800488e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004890:	2303      	movs	r3, #3
 8004892:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8004894:	f7fc fad6 	bl	8000e44 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8004898:	4a1d      	ldr	r2, [pc, #116]	; (8004910 <HAL_UART_MspInit+0xcc>)
 800489a:	6853      	ldr	r3, [r2, #4]
 800489c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80048a0:	f043 0304 	orr.w	r3, r3, #4
 80048a4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80048a6:	b008      	add	sp, #32
 80048a8:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80048aa:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <HAL_UART_MspInit+0xd0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d1fa      	bne.n	80048a6 <HAL_UART_MspInit+0x62>
    __HAL_RCC_USART3_CLK_ENABLE();
 80048b0:	4b15      	ldr	r3, [pc, #84]	; (8004908 <HAL_UART_MspInit+0xc4>)
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 80048b2:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 80048b4:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 80048b6:	4815      	ldr	r0, [pc, #84]	; (800490c <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80048b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80048bc:	61da      	str	r2, [r3, #28]
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80048c4:	9202      	str	r2, [sp, #8]
 80048c6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	f042 0208 	orr.w	r2, r2, #8
 80048ce:	619a      	str	r2, [r3, #24]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	9303      	str	r3, [sp, #12]
 80048d8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = RS232_TX_Pin;
 80048da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e0:	2302      	movs	r3, #2
 80048e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048e4:	2303      	movs	r3, #3
 80048e6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 80048e8:	f7fc faac 	bl	8000e44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS232_RX_Pin;
 80048ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048f2:	2300      	movs	r3, #0
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 80048f4:	a904      	add	r1, sp, #16
 80048f6:	4805      	ldr	r0, [pc, #20]	; (800490c <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048fa:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 80048fc:	f7fc faa2 	bl	8000e44 <HAL_GPIO_Init>
}
 8004900:	e7d1      	b.n	80048a6 <HAL_UART_MspInit+0x62>
 8004902:	bf00      	nop
 8004904:	40013800 	.word	0x40013800
 8004908:	40021000 	.word	0x40021000
 800490c:	40010c00 	.word	0x40010c00
 8004910:	40010000 	.word	0x40010000
 8004914:	40004800 	.word	0x40004800

08004918 <NMI_Handler>:
 8004918:	4770      	bx	lr

0800491a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800491a:	e7fe      	b.n	800491a <HardFault_Handler>

0800491c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800491c:	e7fe      	b.n	800491c <MemManage_Handler>

0800491e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800491e:	e7fe      	b.n	800491e <BusFault_Handler>

08004920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004920:	e7fe      	b.n	8004920 <UsageFault_Handler>

08004922 <SVC_Handler>:
 8004922:	4770      	bx	lr

08004924 <DebugMon_Handler>:
 8004924:	4770      	bx	lr

08004926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004926:	4770      	bx	lr

08004928 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004928:	f7fb bede 	b.w	80006e8 <HAL_IncTick>

0800492c <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800492c:	4801      	ldr	r0, [pc, #4]	; (8004934 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 800492e:	f7fc bbeb 	b.w	8001108 <HAL_PCD_IRQHandler>
 8004932:	bf00      	nop
 8004934:	200009e8 	.word	0x200009e8

08004938 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004938:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <_sbrk+0x2c>)
{
 800493c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800493e:	6819      	ldr	r1, [r3, #0]
 8004940:	b909      	cbnz	r1, 8004946 <_sbrk+0xe>
		heap_end = &end;
 8004942:	4909      	ldr	r1, [pc, #36]	; (8004968 <_sbrk+0x30>)
 8004944:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8004946:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8004948:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800494a:	4402      	add	r2, r0
 800494c:	428a      	cmp	r2, r1
 800494e:	d906      	bls.n	800495e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004950:	f000 f9da 	bl	8004d08 <__errno>
 8004954:	230c      	movs	r3, #12
 8004956:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004958:	f04f 30ff 	mov.w	r0, #4294967295
 800495c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800495e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004960:	bd08      	pop	{r3, pc}
 8004962:	bf00      	nop
 8004964:	20000794 	.word	0x20000794
 8004968:	20000c58 	.word	0x20000c58

0800496c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800496c:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <SystemInit+0x40>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	f042 0201 	orr.w	r2, r2, #1
 8004974:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004976:	6859      	ldr	r1, [r3, #4]
 8004978:	4a0d      	ldr	r2, [pc, #52]	; (80049b0 <SystemInit+0x44>)
 800497a:	400a      	ands	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004984:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004988:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004990:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004998:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800499a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800499e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80049a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049a4:	4b03      	ldr	r3, [pc, #12]	; (80049b4 <SystemInit+0x48>)
 80049a6:	609a      	str	r2, [r3, #8]
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000
 80049b0:	f8ff0000 	.word	0xf8ff0000
 80049b4:	e000ed00 	.word	0xe000ed00

080049b8 <init_trigger>:
    HAL_ADC_Start_IT(hadc);
}


void init_trigger(void)
{
 80049b8:	b538      	push	{r3, r4, r5, lr}
	//Clear data
	for (uint8_t ii=0;ii<2;ii++)
		memset(&adcdata[ii], 0, sizeof(adcdata_s));
 80049ba:	2510      	movs	r5, #16
 80049bc:	4c0d      	ldr	r4, [pc, #52]	; (80049f4 <init_trigger+0x3c>)
 80049be:	462a      	mov	r2, r5
 80049c0:	2100      	movs	r1, #0
 80049c2:	4620      	mov	r0, r4
 80049c4:	f000 f9da 	bl	8004d7c <memset>
 80049c8:	462a      	mov	r2, r5
 80049ca:	2100      	movs	r1, #0
 80049cc:	1960      	adds	r0, r4, r5
 80049ce:	f000 f9d5 	bl	8004d7c <memset>

	//Eanble IRQ's
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80049d2:	2200      	movs	r2, #0
 80049d4:	2012      	movs	r0, #18
 80049d6:	4611      	mov	r1, r2
 80049d8:	f7fc f86e 	bl	8000ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80049dc:	2012      	movs	r0, #18
 80049de:	f7fc f89f 	bl	8000b20 <HAL_NVIC_EnableIRQ>

	//Setup IRQ's
	HAL_ADC_Start_IT(&hadc1);
 80049e2:	4805      	ldr	r0, [pc, #20]	; (80049f8 <init_trigger+0x40>)
 80049e4:	f7fb ff4e 	bl	8000884 <HAL_ADC_Start_IT>
	HAL_ADC_Start_IT(&hadc2);
}
 80049e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_ADC_Start_IT(&hadc2);
 80049ec:	4803      	ldr	r0, [pc, #12]	; (80049fc <init_trigger+0x44>)
 80049ee:	f7fb bf49 	b.w	8000884 <HAL_ADC_Start_IT>
 80049f2:	bf00      	nop
 80049f4:	200009c8 	.word	0x200009c8
 80049f8:	20000898 	.word	0x20000898
 80049fc:	2000085c 	.word	0x2000085c

08004a00 <process_trigger>:

void process_trigger(void)
{
 8004a00:	b538      	push	{r3, r4, r5, lr}
	//check if ADC Value has changed
	if ((settings.trigger_mode_A0 != TRIGGERMODE_NONE) && (adcdata[0].adc_val != adcdata[0].last_adc_val))
 8004a02:	4c29      	ldr	r4, [pc, #164]	; (8004aa8 <process_trigger+0xa8>)
 8004a04:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8004a08:	b150      	cbz	r0, 8004a20 <process_trigger+0x20>
 8004a0a:	4d28      	ldr	r5, [pc, #160]	; (8004aac <process_trigger+0xac>)
 8004a0c:	8829      	ldrh	r1, [r5, #0]
 8004a0e:	886a      	ldrh	r2, [r5, #2]
 8004a10:	4291      	cmp	r1, r2
 8004a12:	d005      	beq.n	8004a20 <process_trigger+0x20>
	{
		//Based on Settings manipulate Registers
		switch(settings.trigger_mode_A0)
 8004a14:	2801      	cmp	r0, #1
 8004a16:	d012      	beq.n	8004a3e <process_trigger+0x3e>
 8004a18:	2802      	cmp	r0, #2
 8004a1a:	d016      	beq.n	8004a4a <process_trigger+0x4a>
				}

				break;
		}
		//Store Last Value
		adcdata[0].last_adc_val = adcdata[0].adc_val;
 8004a1c:	882b      	ldrh	r3, [r5, #0]
 8004a1e:	806b      	strh	r3, [r5, #2]
	}

	//check if ADC Value has changed
	if ((settings.trigger_mode_A1 != TRIGGERMODE_NONE) && (adcdata[1].adc_val != adcdata[1].last_adc_val))
 8004a20:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 8004a24:	b150      	cbz	r0, 8004a3c <process_trigger+0x3c>
 8004a26:	4d21      	ldr	r5, [pc, #132]	; (8004aac <process_trigger+0xac>)
 8004a28:	8a29      	ldrh	r1, [r5, #16]
 8004a2a:	8a6a      	ldrh	r2, [r5, #18]
 8004a2c:	4291      	cmp	r1, r2
 8004a2e:	d005      	beq.n	8004a3c <process_trigger+0x3c>
	{
		//Based on Settings manipulate Registers
		switch(settings.trigger_mode_A1)
 8004a30:	2801      	cmp	r0, #1
 8004a32:	d01e      	beq.n	8004a72 <process_trigger+0x72>
 8004a34:	2802      	cmp	r0, #2
 8004a36:	d022      	beq.n	8004a7e <process_trigger+0x7e>
				}

				break;
		}
		//Store Last Value
		adcdata[1].last_adc_val = adcdata[1].adc_val;
 8004a38:	8a2b      	ldrh	r3, [r5, #16]
 8004a3a:	826b      	strh	r3, [r5, #18]
 8004a3c:	bd38      	pop	{r3, r4, r5, pc}
				set_reg(settings.trigger_reg_A0, adcdata[0].adc_val);
 8004a3e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 8004a42:	b2c9      	uxtb	r1, r1
					set_reg(settings.trigger_reg_hilo_A0, settings.trigger_val_hilo_A0);
 8004a44:	f7fe fc7a 	bl	800333c <set_reg>
 8004a48:	e7e8      	b.n	8004a1c <process_trigger+0x1c>
				if ((adcdata[0].adc_val > settings.trigger_level_A0) && (adcdata[0].last_adc_val < settings.trigger_level_A0))
 8004a4a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004a4e:	4299      	cmp	r1, r3
 8004a50:	d906      	bls.n	8004a60 <process_trigger+0x60>
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d204      	bcs.n	8004a60 <process_trigger+0x60>
					set_reg(settings.trigger_reg_lohi_A0, settings.trigger_val_lohi_A0);
 8004a56:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8004a5a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8004a5e:	e7f1      	b.n	8004a44 <process_trigger+0x44>
				else if ((adcdata[0].adc_val <settings. trigger_level_A0) && (adcdata[0].last_adc_val > settings.trigger_level_A0))
 8004a60:	4299      	cmp	r1, r3
 8004a62:	d2db      	bcs.n	8004a1c <process_trigger+0x1c>
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d9d9      	bls.n	8004a1c <process_trigger+0x1c>
					set_reg(settings.trigger_reg_hilo_A0, settings.trigger_val_hilo_A0);
 8004a68:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8004a6c:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8004a70:	e7e8      	b.n	8004a44 <process_trigger+0x44>
				set_reg(settings.trigger_reg_A1, adcdata[1].adc_val);
 8004a72:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8004a76:	b2c9      	uxtb	r1, r1
					set_reg(settings.trigger_reg_hilo_A1, settings.trigger_val_hilo_A1);
 8004a78:	f7fe fc60 	bl	800333c <set_reg>
 8004a7c:	e7dc      	b.n	8004a38 <process_trigger+0x38>
				if ((adcdata[1].adc_val > settings.trigger_level_A1) && (adcdata[1].last_adc_val < settings.trigger_level_A1))
 8004a7e:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8004a82:	4299      	cmp	r1, r3
 8004a84:	d906      	bls.n	8004a94 <process_trigger+0x94>
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d204      	bcs.n	8004a94 <process_trigger+0x94>
					set_reg(settings.trigger_reg_lohi_A1, settings.trigger_val_lohi_A1);
 8004a8a:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8004a8e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
 8004a92:	e7f1      	b.n	8004a78 <process_trigger+0x78>
				else if ((adcdata[1].adc_val < settings.trigger_level_A1) && (adcdata[1].last_adc_val > settings.trigger_level_A1))
 8004a94:	4299      	cmp	r1, r3
 8004a96:	d2cf      	bcs.n	8004a38 <process_trigger+0x38>
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d9cd      	bls.n	8004a38 <process_trigger+0x38>
					set_reg(settings.trigger_reg_hilo_A1, settings.trigger_val_hilo_A1);
 8004a9c:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
 8004aa0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8004aa4:	e7e8      	b.n	8004a78 <process_trigger+0x78>
 8004aa6:	bf00      	nop
 8004aa8:	200007d0 	.word	0x200007d0
 8004aac:	200009c8 	.word	0x200009c8

08004ab0 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004ab0:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8004ab4:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004ab8:	f7fe b8d4 	b.w	8002c64 <USBD_LL_SetupStage>

08004abc <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004abc:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004ac0:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8004ac4:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004ac8:	f7fe b8f9 	b.w	8002cbe <USBD_LL_DataOutStage>

08004acc <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004acc:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004ad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ad2:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004ad6:	f7fe b92c 	b.w	8002d32 <USBD_LL_DataInStage>

08004ada <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004ada:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004ade:	f7fe b9c0 	b.w	8002e62 <USBD_LL_SOF>

08004ae2 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004ae2:	6883      	ldr	r3, [r0, #8]
{ 
 8004ae4:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004ae6:	2b02      	cmp	r3, #2
{ 
 8004ae8:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004aea:	d001      	beq.n	8004af0 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8004aec:	f7ff f91a 	bl	8003d24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004af0:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8004af4:	2101      	movs	r1, #1
 8004af6:	f7fe f99e 	bl	8002e36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004afa:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8004afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004b02:	f7fe b971 	b.w	8002de8 <USBD_LL_Reset>
	...

08004b08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004b08:	b510      	push	{r4, lr}
 8004b0a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004b0c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004b10:	f7fe f994 	bl	8002e3c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004b14:	69a3      	ldr	r3, [r4, #24]
 8004b16:	b123      	cbz	r3, 8004b22 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004b18:	4a02      	ldr	r2, [pc, #8]	; (8004b24 <HAL_PCD_SuspendCallback+0x1c>)
 8004b1a:	6913      	ldr	r3, [r2, #16]
 8004b1c:	f043 0306 	orr.w	r3, r3, #6
 8004b20:	6113      	str	r3, [r2, #16]
 8004b22:	bd10      	pop	{r4, pc}
 8004b24:	e000ed00 	.word	0xe000ed00

08004b28 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004b28:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004b2c:	f7fe b98f 	b.w	8002e4e <USBD_LL_Resume>

08004b30 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004b30:	b510      	push	{r4, lr}
 8004b32:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004b34:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b38:	4613      	mov	r3, r2
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	f7fc fa83 	bl	8001046 <HAL_PCD_EP_Open>
 8004b40:	2803      	cmp	r0, #3
 8004b42:	bf9a      	itte	ls
 8004b44:	4b01      	ldrls	r3, [pc, #4]	; (8004b4c <USBD_LL_OpenEP+0x1c>)
 8004b46:	5c18      	ldrbls	r0, [r3, r0]
 8004b48:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8004b4a:	bd10      	pop	{r4, pc}
 8004b4c:	08006014 	.word	0x08006014

08004b50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b50:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004b52:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b56:	f7fc fcfd 	bl	8001554 <HAL_PCD_EP_SetStall>
 8004b5a:	2803      	cmp	r0, #3
 8004b5c:	bf9a      	itte	ls
 8004b5e:	4b02      	ldrls	r3, [pc, #8]	; (8004b68 <USBD_LL_StallEP+0x18>)
 8004b60:	5c18      	ldrbls	r0, [r3, r0]
 8004b62:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8004b64:	bd08      	pop	{r3, pc}
 8004b66:	bf00      	nop
 8004b68:	08006014 	.word	0x08006014

08004b6c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b6c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004b6e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b72:	f7fc fd23 	bl	80015bc <HAL_PCD_EP_ClrStall>
 8004b76:	2803      	cmp	r0, #3
 8004b78:	bf9a      	itte	ls
 8004b7a:	4b02      	ldrls	r3, [pc, #8]	; (8004b84 <USBD_LL_ClearStallEP+0x18>)
 8004b7c:	5c18      	ldrbls	r0, [r3, r0]
 8004b7e:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8004b80:	bd08      	pop	{r3, pc}
 8004b82:	bf00      	nop
 8004b84:	08006014 	.word	0x08006014

08004b88 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004b88:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004b8a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004b8e:	bf45      	ittet	mi
 8004b90:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8004b94:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004b98:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004b9c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004ba0:	bf58      	it	pl
 8004ba2:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 8004ba6:	4770      	bx	lr

08004ba8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004ba8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004baa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004bae:	f7fc fa36 	bl	800101e <HAL_PCD_SetAddress>
 8004bb2:	2803      	cmp	r0, #3
 8004bb4:	bf9a      	itte	ls
 8004bb6:	4b02      	ldrls	r3, [pc, #8]	; (8004bc0 <USBD_LL_SetUSBAddress+0x18>)
 8004bb8:	5c18      	ldrbls	r0, [r3, r0]
 8004bba:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8004bbc:	bd08      	pop	{r3, pc}
 8004bbe:	bf00      	nop
 8004bc0:	08006014 	.word	0x08006014

08004bc4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004bc4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004bc6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004bca:	f7fc fa87 	bl	80010dc <HAL_PCD_EP_Transmit>
 8004bce:	2803      	cmp	r0, #3
 8004bd0:	bf9a      	itte	ls
 8004bd2:	4b02      	ldrls	r3, [pc, #8]	; (8004bdc <USBD_LL_Transmit+0x18>)
 8004bd4:	5c18      	ldrbls	r0, [r3, r0]
 8004bd6:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8004bd8:	bd08      	pop	{r3, pc}
 8004bda:	bf00      	nop
 8004bdc:	08006014 	.word	0x08006014

08004be0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004be0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004be2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004be6:	f7fc fa61 	bl	80010ac <HAL_PCD_EP_Receive>
 8004bea:	2803      	cmp	r0, #3
 8004bec:	bf9a      	itte	ls
 8004bee:	4b02      	ldrls	r3, [pc, #8]	; (8004bf8 <USBD_LL_PrepareReceive+0x18>)
 8004bf0:	5c18      	ldrbls	r0, [r3, r0]
 8004bf2:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8004bf4:	bd08      	pop	{r3, pc}
 8004bf6:	bf00      	nop
 8004bf8:	08006014 	.word	0x08006014

08004bfc <vt100_process_byte>:
    
    return VT100_KEY_INVALID;
}

vt100_key_t vt100_process_byte(uint8_t byte)
{
 8004bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    static uint8_t cbuf[8] = {0};
    static uint8_t cbuf_idx = 0;
    
    if (0 == cbuf_idx && true == is_printable(byte))
 8004c00:	4d1f      	ldr	r5, [pc, #124]	; (8004c80 <vt100_process_byte+0x84>)
 8004c02:	782b      	ldrb	r3, [r5, #0]
 8004c04:	b91b      	cbnz	r3, 8004c0e <vt100_process_byte+0x12>
 8004c06:	f1a0 0220 	sub.w	r2, r0, #32
 8004c0a:	2a5e      	cmp	r2, #94	; 0x5e
 8004c0c:	d931      	bls.n	8004c72 <vt100_process_byte+0x76>
    {
        return VT100_KEY_PRINTABLE;
    }
    else if (0x0D == byte) /* Enter */
 8004c0e:	280d      	cmp	r0, #13
 8004c10:	d032      	beq.n	8004c78 <vt100_process_byte+0x7c>
        return VT100_KEY_ENTER;
    }
    else
    {
        vt100_key_t key = VT100_KEY_INVALID;
        cbuf[cbuf_idx++] = byte;
 8004c12:	4c1c      	ldr	r4, [pc, #112]	; (8004c84 <vt100_process_byte+0x88>)
 8004c14:	4f1c      	ldr	r7, [pc, #112]	; (8004c88 <vt100_process_byte+0x8c>)
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8004c16:	f04f 0800 	mov.w	r8, #0
 8004c1a:	46b9      	mov	r9, r7
            (0 == strncmp((const char*)vt100_keycodes[ii].code, (const char*)buf, len)))
 8004c1c:	46a2      	mov	sl, r4
        cbuf[cbuf_idx++] = byte;
 8004c1e:	1c5e      	adds	r6, r3, #1
 8004c20:	b2f6      	uxtb	r6, r6
 8004c22:	702e      	strb	r6, [r5, #0]
 8004c24:	54e0      	strb	r0, [r4, r3]
        if ((len == vt100_keycodes[ii].code_len) &&
 8004c26:	7a3b      	ldrb	r3, [r7, #8]
 8004c28:	42b3      	cmp	r3, r6
 8004c2a:	d115      	bne.n	8004c58 <vt100_process_byte+0x5c>
            (0 == strncmp((const char*)vt100_keycodes[ii].code, (const char*)buf, len)))
 8004c2c:	4632      	mov	r2, r6
 8004c2e:	4651      	mov	r1, sl
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f974 	bl	8004f1e <strncmp>
        if ((len == vt100_keycodes[ii].code_len) &&
 8004c36:	4603      	mov	r3, r0
 8004c38:	b970      	cbnz	r0, 8004c58 <vt100_process_byte+0x5c>
            return vt100_keycodes[ii].key;
 8004c3a:	220c      	movs	r2, #12
 8004c3c:	fb02 f808 	mul.w	r8, r2, r8
 8004c40:	f819 0008 	ldrb.w	r0, [r9, r8]
        key = find_key(cbuf, cbuf_idx);
        if (VT100_KEY_INVALID != key)
 8004c44:	b980      	cbnz	r0, 8004c68 <vt100_process_byte+0x6c>
            memset(cbuf, 0, sizeof(cbuf));
            return key;
        }
        else
        {
            if (cbuf_idx >= sizeof(cbuf))
 8004c46:	2e07      	cmp	r6, #7
 8004c48:	f04f 0000 	mov.w	r0, #0
 8004c4c:	d915      	bls.n	8004c7a <vt100_process_byte+0x7e>
            {
                cbuf_idx = 0;
 8004c4e:	7028      	strb	r0, [r5, #0]
                memset(cbuf, 0, sizeof(cbuf));
 8004c50:	6020      	str	r0, [r4, #0]
 8004c52:	6060      	str	r0, [r4, #4]
 8004c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8004c58:	f108 0801 	add.w	r8, r8, #1
 8004c5c:	f1b8 0f0f 	cmp.w	r8, #15
 8004c60:	f107 070c 	add.w	r7, r7, #12
 8004c64:	d1df      	bne.n	8004c26 <vt100_process_byte+0x2a>
 8004c66:	e7ee      	b.n	8004c46 <vt100_process_byte+0x4a>
            cbuf_idx = 0;
 8004c68:	702b      	strb	r3, [r5, #0]
            memset(cbuf, 0, sizeof(cbuf));
 8004c6a:	6023      	str	r3, [r4, #0]
 8004c6c:	6063      	str	r3, [r4, #4]
            return key;
 8004c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return VT100_KEY_PRINTABLE;
 8004c72:	2001      	movs	r0, #1
 8004c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return VT100_KEY_ENTER;
 8004c78:	2008      	movs	r0, #8
            }
        }
    }

    return VT100_KEY_INVALID;
}
 8004c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7e:	bf00      	nop
 8004c80:	200007a0 	.word	0x200007a0
 8004c84:	20000798 	.word	0x20000798
 8004c88:	0800603c 	.word	0x0800603c

08004c8c <vt100_get_keycode>:

vt100_keycode_t * vt100_get_keycode(vt100_key_t key)
{
    if (key >= VT100_KEY_MAX) return NULL;
 8004c8c:	280e      	cmp	r0, #14
{
 8004c8e:	b530      	push	{r4, r5, lr}
    if (key >= VT100_KEY_MAX) return NULL;
 8004c90:	d80c      	bhi.n	8004cac <vt100_get_keycode+0x20>
 8004c92:	2200      	movs	r2, #0
 8004c94:	240c      	movs	r4, #12
    
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
    {
        if (vt100_keycodes[ii].key == key)
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <vt100_get_keycode+0x24>)
 8004c98:	fb04 f102 	mul.w	r1, r4, r2
 8004c9c:	5ccd      	ldrb	r5, [r1, r3]
 8004c9e:	4285      	cmp	r5, r0
 8004ca0:	d101      	bne.n	8004ca6 <vt100_get_keycode+0x1a>
        {
            return (vt100_keycode_t*)&vt100_keycodes[ii];
 8004ca2:	1858      	adds	r0, r3, r1
 8004ca4:	bd30      	pop	{r4, r5, pc}
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8004ca6:	3201      	adds	r2, #1
 8004ca8:	2a0f      	cmp	r2, #15
 8004caa:	d1f5      	bne.n	8004c98 <vt100_get_keycode+0xc>
    if (key >= VT100_KEY_MAX) return NULL;
 8004cac:	2000      	movs	r0, #0
        }
    }
    
    return NULL;
}
 8004cae:	bd30      	pop	{r4, r5, pc}
 8004cb0:	0800603c 	.word	0x0800603c

08004cb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004cb4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004cb6:	e003      	b.n	8004cc0 <LoopCopyDataInit>

08004cb8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004cba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004cbc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004cbe:	3104      	adds	r1, #4

08004cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004cc0:	480a      	ldr	r0, [pc, #40]	; (8004cec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004cc4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004cc6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004cc8:	d3f6      	bcc.n	8004cb8 <CopyDataInit>
  ldr r2, =_sbss
 8004cca:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004ccc:	e002      	b.n	8004cd4 <LoopFillZerobss>

08004cce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004cce:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004cd0:	f842 3b04 	str.w	r3, [r2], #4

08004cd4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004cd4:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004cd6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004cd8:	d3f9      	bcc.n	8004cce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004cda:	f7ff fe47 	bl	800496c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cde:	f000 f819 	bl	8004d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ce2:	f7fe fea5 	bl	8003a30 <main>
  bx lr
 8004ce6:	4770      	bx	lr
  ldr r3, =_sidata
 8004ce8:	08006238 	.word	0x08006238
  ldr r0, =_sdata
 8004cec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004cf0:	20000248 	.word	0x20000248
  ldr r2, =_sbss
 8004cf4:	20000248 	.word	0x20000248
  ldr r3, = _ebss
 8004cf8:	20000c58 	.word	0x20000c58

08004cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004cfc:	e7fe      	b.n	8004cfc <ADC1_2_IRQHandler>

08004cfe <atoi>:
 8004cfe:	220a      	movs	r2, #10
 8004d00:	2100      	movs	r1, #0
 8004d02:	f000 ba07 	b.w	8005114 <strtol>
	...

08004d08 <__errno>:
 8004d08:	4b01      	ldr	r3, [pc, #4]	; (8004d10 <__errno+0x8>)
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000078 	.word	0x20000078

08004d14 <__libc_init_array>:
 8004d14:	b570      	push	{r4, r5, r6, lr}
 8004d16:	2500      	movs	r5, #0
 8004d18:	4e0c      	ldr	r6, [pc, #48]	; (8004d4c <__libc_init_array+0x38>)
 8004d1a:	4c0d      	ldr	r4, [pc, #52]	; (8004d50 <__libc_init_array+0x3c>)
 8004d1c:	1ba4      	subs	r4, r4, r6
 8004d1e:	10a4      	asrs	r4, r4, #2
 8004d20:	42a5      	cmp	r5, r4
 8004d22:	d109      	bne.n	8004d38 <__libc_init_array+0x24>
 8004d24:	f000 fdb4 	bl	8005890 <_init>
 8004d28:	2500      	movs	r5, #0
 8004d2a:	4e0a      	ldr	r6, [pc, #40]	; (8004d54 <__libc_init_array+0x40>)
 8004d2c:	4c0a      	ldr	r4, [pc, #40]	; (8004d58 <__libc_init_array+0x44>)
 8004d2e:	1ba4      	subs	r4, r4, r6
 8004d30:	10a4      	asrs	r4, r4, #2
 8004d32:	42a5      	cmp	r5, r4
 8004d34:	d105      	bne.n	8004d42 <__libc_init_array+0x2e>
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
 8004d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d3c:	4798      	blx	r3
 8004d3e:	3501      	adds	r5, #1
 8004d40:	e7ee      	b.n	8004d20 <__libc_init_array+0xc>
 8004d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d46:	4798      	blx	r3
 8004d48:	3501      	adds	r5, #1
 8004d4a:	e7f2      	b.n	8004d32 <__libc_init_array+0x1e>
 8004d4c:	08006230 	.word	0x08006230
 8004d50:	08006230 	.word	0x08006230
 8004d54:	08006230 	.word	0x08006230
 8004d58:	08006234 	.word	0x08006234

08004d5c <malloc>:
 8004d5c:	4b02      	ldr	r3, [pc, #8]	; (8004d68 <malloc+0xc>)
 8004d5e:	4601      	mov	r1, r0
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	f000 b85f 	b.w	8004e24 <_malloc_r>
 8004d66:	bf00      	nop
 8004d68:	20000078 	.word	0x20000078

08004d6c <free>:
 8004d6c:	4b02      	ldr	r3, [pc, #8]	; (8004d78 <free+0xc>)
 8004d6e:	4601      	mov	r1, r0
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	f000 b80b 	b.w	8004d8c <_free_r>
 8004d76:	bf00      	nop
 8004d78:	20000078 	.word	0x20000078

08004d7c <memset>:
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	4402      	add	r2, r0
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d100      	bne.n	8004d86 <memset+0xa>
 8004d84:	4770      	bx	lr
 8004d86:	f803 1b01 	strb.w	r1, [r3], #1
 8004d8a:	e7f9      	b.n	8004d80 <memset+0x4>

08004d8c <_free_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	4605      	mov	r5, r0
 8004d90:	2900      	cmp	r1, #0
 8004d92:	d043      	beq.n	8004e1c <_free_r+0x90>
 8004d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d98:	1f0c      	subs	r4, r1, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bfb8      	it	lt
 8004d9e:	18e4      	addlt	r4, r4, r3
 8004da0:	f000 fa1d 	bl	80051de <__malloc_lock>
 8004da4:	4a1e      	ldr	r2, [pc, #120]	; (8004e20 <_free_r+0x94>)
 8004da6:	6813      	ldr	r3, [r2, #0]
 8004da8:	4610      	mov	r0, r2
 8004daa:	b933      	cbnz	r3, 8004dba <_free_r+0x2e>
 8004dac:	6063      	str	r3, [r4, #4]
 8004dae:	6014      	str	r4, [r2, #0]
 8004db0:	4628      	mov	r0, r5
 8004db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004db6:	f000 ba13 	b.w	80051e0 <__malloc_unlock>
 8004dba:	42a3      	cmp	r3, r4
 8004dbc:	d90b      	bls.n	8004dd6 <_free_r+0x4a>
 8004dbe:	6821      	ldr	r1, [r4, #0]
 8004dc0:	1862      	adds	r2, r4, r1
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	bf01      	itttt	eq
 8004dc6:	681a      	ldreq	r2, [r3, #0]
 8004dc8:	685b      	ldreq	r3, [r3, #4]
 8004dca:	1852      	addeq	r2, r2, r1
 8004dcc:	6022      	streq	r2, [r4, #0]
 8004dce:	6063      	str	r3, [r4, #4]
 8004dd0:	6004      	str	r4, [r0, #0]
 8004dd2:	e7ed      	b.n	8004db0 <_free_r+0x24>
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	b10a      	cbz	r2, 8004dde <_free_r+0x52>
 8004dda:	42a2      	cmp	r2, r4
 8004ddc:	d9fa      	bls.n	8004dd4 <_free_r+0x48>
 8004dde:	6819      	ldr	r1, [r3, #0]
 8004de0:	1858      	adds	r0, r3, r1
 8004de2:	42a0      	cmp	r0, r4
 8004de4:	d10b      	bne.n	8004dfe <_free_r+0x72>
 8004de6:	6820      	ldr	r0, [r4, #0]
 8004de8:	4401      	add	r1, r0
 8004dea:	1858      	adds	r0, r3, r1
 8004dec:	4282      	cmp	r2, r0
 8004dee:	6019      	str	r1, [r3, #0]
 8004df0:	d1de      	bne.n	8004db0 <_free_r+0x24>
 8004df2:	6810      	ldr	r0, [r2, #0]
 8004df4:	6852      	ldr	r2, [r2, #4]
 8004df6:	4401      	add	r1, r0
 8004df8:	6019      	str	r1, [r3, #0]
 8004dfa:	605a      	str	r2, [r3, #4]
 8004dfc:	e7d8      	b.n	8004db0 <_free_r+0x24>
 8004dfe:	d902      	bls.n	8004e06 <_free_r+0x7a>
 8004e00:	230c      	movs	r3, #12
 8004e02:	602b      	str	r3, [r5, #0]
 8004e04:	e7d4      	b.n	8004db0 <_free_r+0x24>
 8004e06:	6820      	ldr	r0, [r4, #0]
 8004e08:	1821      	adds	r1, r4, r0
 8004e0a:	428a      	cmp	r2, r1
 8004e0c:	bf01      	itttt	eq
 8004e0e:	6811      	ldreq	r1, [r2, #0]
 8004e10:	6852      	ldreq	r2, [r2, #4]
 8004e12:	1809      	addeq	r1, r1, r0
 8004e14:	6021      	streq	r1, [r4, #0]
 8004e16:	6062      	str	r2, [r4, #4]
 8004e18:	605c      	str	r4, [r3, #4]
 8004e1a:	e7c9      	b.n	8004db0 <_free_r+0x24>
 8004e1c:	bd38      	pop	{r3, r4, r5, pc}
 8004e1e:	bf00      	nop
 8004e20:	200007a4 	.word	0x200007a4

08004e24 <_malloc_r>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	1ccd      	adds	r5, r1, #3
 8004e28:	f025 0503 	bic.w	r5, r5, #3
 8004e2c:	3508      	adds	r5, #8
 8004e2e:	2d0c      	cmp	r5, #12
 8004e30:	bf38      	it	cc
 8004e32:	250c      	movcc	r5, #12
 8004e34:	2d00      	cmp	r5, #0
 8004e36:	4606      	mov	r6, r0
 8004e38:	db01      	blt.n	8004e3e <_malloc_r+0x1a>
 8004e3a:	42a9      	cmp	r1, r5
 8004e3c:	d903      	bls.n	8004e46 <_malloc_r+0x22>
 8004e3e:	230c      	movs	r3, #12
 8004e40:	6033      	str	r3, [r6, #0]
 8004e42:	2000      	movs	r0, #0
 8004e44:	bd70      	pop	{r4, r5, r6, pc}
 8004e46:	f000 f9ca 	bl	80051de <__malloc_lock>
 8004e4a:	4a23      	ldr	r2, [pc, #140]	; (8004ed8 <_malloc_r+0xb4>)
 8004e4c:	6814      	ldr	r4, [r2, #0]
 8004e4e:	4621      	mov	r1, r4
 8004e50:	b991      	cbnz	r1, 8004e78 <_malloc_r+0x54>
 8004e52:	4c22      	ldr	r4, [pc, #136]	; (8004edc <_malloc_r+0xb8>)
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	b91b      	cbnz	r3, 8004e60 <_malloc_r+0x3c>
 8004e58:	4630      	mov	r0, r6
 8004e5a:	f000 f841 	bl	8004ee0 <_sbrk_r>
 8004e5e:	6020      	str	r0, [r4, #0]
 8004e60:	4629      	mov	r1, r5
 8004e62:	4630      	mov	r0, r6
 8004e64:	f000 f83c 	bl	8004ee0 <_sbrk_r>
 8004e68:	1c43      	adds	r3, r0, #1
 8004e6a:	d126      	bne.n	8004eba <_malloc_r+0x96>
 8004e6c:	230c      	movs	r3, #12
 8004e6e:	4630      	mov	r0, r6
 8004e70:	6033      	str	r3, [r6, #0]
 8004e72:	f000 f9b5 	bl	80051e0 <__malloc_unlock>
 8004e76:	e7e4      	b.n	8004e42 <_malloc_r+0x1e>
 8004e78:	680b      	ldr	r3, [r1, #0]
 8004e7a:	1b5b      	subs	r3, r3, r5
 8004e7c:	d41a      	bmi.n	8004eb4 <_malloc_r+0x90>
 8004e7e:	2b0b      	cmp	r3, #11
 8004e80:	d90f      	bls.n	8004ea2 <_malloc_r+0x7e>
 8004e82:	600b      	str	r3, [r1, #0]
 8004e84:	18cc      	adds	r4, r1, r3
 8004e86:	50cd      	str	r5, [r1, r3]
 8004e88:	4630      	mov	r0, r6
 8004e8a:	f000 f9a9 	bl	80051e0 <__malloc_unlock>
 8004e8e:	f104 000b 	add.w	r0, r4, #11
 8004e92:	1d23      	adds	r3, r4, #4
 8004e94:	f020 0007 	bic.w	r0, r0, #7
 8004e98:	1ac3      	subs	r3, r0, r3
 8004e9a:	d01b      	beq.n	8004ed4 <_malloc_r+0xb0>
 8004e9c:	425a      	negs	r2, r3
 8004e9e:	50e2      	str	r2, [r4, r3]
 8004ea0:	bd70      	pop	{r4, r5, r6, pc}
 8004ea2:	428c      	cmp	r4, r1
 8004ea4:	bf0b      	itete	eq
 8004ea6:	6863      	ldreq	r3, [r4, #4]
 8004ea8:	684b      	ldrne	r3, [r1, #4]
 8004eaa:	6013      	streq	r3, [r2, #0]
 8004eac:	6063      	strne	r3, [r4, #4]
 8004eae:	bf18      	it	ne
 8004eb0:	460c      	movne	r4, r1
 8004eb2:	e7e9      	b.n	8004e88 <_malloc_r+0x64>
 8004eb4:	460c      	mov	r4, r1
 8004eb6:	6849      	ldr	r1, [r1, #4]
 8004eb8:	e7ca      	b.n	8004e50 <_malloc_r+0x2c>
 8004eba:	1cc4      	adds	r4, r0, #3
 8004ebc:	f024 0403 	bic.w	r4, r4, #3
 8004ec0:	42a0      	cmp	r0, r4
 8004ec2:	d005      	beq.n	8004ed0 <_malloc_r+0xac>
 8004ec4:	1a21      	subs	r1, r4, r0
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f000 f80a 	bl	8004ee0 <_sbrk_r>
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d0cd      	beq.n	8004e6c <_malloc_r+0x48>
 8004ed0:	6025      	str	r5, [r4, #0]
 8004ed2:	e7d9      	b.n	8004e88 <_malloc_r+0x64>
 8004ed4:	bd70      	pop	{r4, r5, r6, pc}
 8004ed6:	bf00      	nop
 8004ed8:	200007a4 	.word	0x200007a4
 8004edc:	200007a8 	.word	0x200007a8

08004ee0 <_sbrk_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	4c05      	ldr	r4, [pc, #20]	; (8004efc <_sbrk_r+0x1c>)
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	4608      	mov	r0, r1
 8004eea:	6023      	str	r3, [r4, #0]
 8004eec:	f7ff fd24 	bl	8004938 <_sbrk>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	d102      	bne.n	8004efa <_sbrk_r+0x1a>
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	b103      	cbz	r3, 8004efa <_sbrk_r+0x1a>
 8004ef8:	602b      	str	r3, [r5, #0]
 8004efa:	bd38      	pop	{r3, r4, r5, pc}
 8004efc:	20000c54 	.word	0x20000c54

08004f00 <strcat>:
 8004f00:	4602      	mov	r2, r0
 8004f02:	b510      	push	{r4, lr}
 8004f04:	4613      	mov	r3, r2
 8004f06:	781c      	ldrb	r4, [r3, #0]
 8004f08:	3201      	adds	r2, #1
 8004f0a:	2c00      	cmp	r4, #0
 8004f0c:	d1fa      	bne.n	8004f04 <strcat+0x4>
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f18:	2a00      	cmp	r2, #0
 8004f1a:	d1f9      	bne.n	8004f10 <strcat+0x10>
 8004f1c:	bd10      	pop	{r4, pc}

08004f1e <strncmp>:
 8004f1e:	b510      	push	{r4, lr}
 8004f20:	b16a      	cbz	r2, 8004f3e <strncmp+0x20>
 8004f22:	3901      	subs	r1, #1
 8004f24:	1884      	adds	r4, r0, r2
 8004f26:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004f2a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d103      	bne.n	8004f3a <strncmp+0x1c>
 8004f32:	42a0      	cmp	r0, r4
 8004f34:	d001      	beq.n	8004f3a <strncmp+0x1c>
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f5      	bne.n	8004f26 <strncmp+0x8>
 8004f3a:	1a98      	subs	r0, r3, r2
 8004f3c:	bd10      	pop	{r4, pc}
 8004f3e:	4610      	mov	r0, r2
 8004f40:	bd10      	pop	{r4, pc}

08004f42 <strncpy>:
 8004f42:	b570      	push	{r4, r5, r6, lr}
 8004f44:	4604      	mov	r4, r0
 8004f46:	b902      	cbnz	r2, 8004f4a <strncpy+0x8>
 8004f48:	bd70      	pop	{r4, r5, r6, pc}
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	f811 5b01 	ldrb.w	r5, [r1], #1
 8004f50:	1e56      	subs	r6, r2, #1
 8004f52:	f803 5b01 	strb.w	r5, [r3], #1
 8004f56:	b91d      	cbnz	r5, 8004f60 <strncpy+0x1e>
 8004f58:	4414      	add	r4, r2
 8004f5a:	42a3      	cmp	r3, r4
 8004f5c:	d103      	bne.n	8004f66 <strncpy+0x24>
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}
 8004f60:	461c      	mov	r4, r3
 8004f62:	4632      	mov	r2, r6
 8004f64:	e7ef      	b.n	8004f46 <strncpy+0x4>
 8004f66:	f803 5b01 	strb.w	r5, [r3], #1
 8004f6a:	e7f6      	b.n	8004f5a <strncpy+0x18>

08004f6c <strtok>:
 8004f6c:	4b13      	ldr	r3, [pc, #76]	; (8004fbc <strtok+0x50>)
 8004f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f72:	681d      	ldr	r5, [r3, #0]
 8004f74:	4606      	mov	r6, r0
 8004f76:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004f78:	460f      	mov	r7, r1
 8004f7a:	b9b4      	cbnz	r4, 8004faa <strtok+0x3e>
 8004f7c:	2050      	movs	r0, #80	; 0x50
 8004f7e:	f7ff feed 	bl	8004d5c <malloc>
 8004f82:	65a8      	str	r0, [r5, #88]	; 0x58
 8004f84:	6004      	str	r4, [r0, #0]
 8004f86:	6044      	str	r4, [r0, #4]
 8004f88:	6084      	str	r4, [r0, #8]
 8004f8a:	60c4      	str	r4, [r0, #12]
 8004f8c:	6104      	str	r4, [r0, #16]
 8004f8e:	6144      	str	r4, [r0, #20]
 8004f90:	6184      	str	r4, [r0, #24]
 8004f92:	6284      	str	r4, [r0, #40]	; 0x28
 8004f94:	62c4      	str	r4, [r0, #44]	; 0x2c
 8004f96:	6304      	str	r4, [r0, #48]	; 0x30
 8004f98:	6344      	str	r4, [r0, #52]	; 0x34
 8004f9a:	6384      	str	r4, [r0, #56]	; 0x38
 8004f9c:	63c4      	str	r4, [r0, #60]	; 0x3c
 8004f9e:	6404      	str	r4, [r0, #64]	; 0x40
 8004fa0:	6444      	str	r4, [r0, #68]	; 0x44
 8004fa2:	6484      	str	r4, [r0, #72]	; 0x48
 8004fa4:	64c4      	str	r4, [r0, #76]	; 0x4c
 8004fa6:	7704      	strb	r4, [r0, #28]
 8004fa8:	6244      	str	r4, [r0, #36]	; 0x24
 8004faa:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004fac:	4639      	mov	r1, r7
 8004fae:	4630      	mov	r0, r6
 8004fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f000 b803 	b.w	8004fc0 <__strtok_r>
 8004fba:	bf00      	nop
 8004fbc:	20000078 	.word	0x20000078

08004fc0 <__strtok_r>:
 8004fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc2:	b918      	cbnz	r0, 8004fcc <__strtok_r+0xc>
 8004fc4:	6810      	ldr	r0, [r2, #0]
 8004fc6:	b908      	cbnz	r0, 8004fcc <__strtok_r+0xc>
 8004fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fca:	4620      	mov	r0, r4
 8004fcc:	4604      	mov	r4, r0
 8004fce:	460f      	mov	r7, r1
 8004fd0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004fd4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004fd8:	b91e      	cbnz	r6, 8004fe2 <__strtok_r+0x22>
 8004fda:	b965      	cbnz	r5, 8004ff6 <__strtok_r+0x36>
 8004fdc:	6015      	str	r5, [r2, #0]
 8004fde:	4628      	mov	r0, r5
 8004fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe2:	42b5      	cmp	r5, r6
 8004fe4:	d1f6      	bne.n	8004fd4 <__strtok_r+0x14>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1ef      	bne.n	8004fca <__strtok_r+0xa>
 8004fea:	6014      	str	r4, [r2, #0]
 8004fec:	7003      	strb	r3, [r0, #0]
 8004fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ff0:	461c      	mov	r4, r3
 8004ff2:	e00c      	b.n	800500e <__strtok_r+0x4e>
 8004ff4:	b915      	cbnz	r5, 8004ffc <__strtok_r+0x3c>
 8004ff6:	460e      	mov	r6, r1
 8004ff8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ffc:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005000:	42ab      	cmp	r3, r5
 8005002:	d1f7      	bne.n	8004ff4 <__strtok_r+0x34>
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f3      	beq.n	8004ff0 <__strtok_r+0x30>
 8005008:	2300      	movs	r3, #0
 800500a:	f804 3c01 	strb.w	r3, [r4, #-1]
 800500e:	6014      	str	r4, [r2, #0]
 8005010:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005012 <_strtol_l.isra.0>:
 8005012:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005016:	4680      	mov	r8, r0
 8005018:	4689      	mov	r9, r1
 800501a:	4692      	mov	sl, r2
 800501c:	461f      	mov	r7, r3
 800501e:	468b      	mov	fp, r1
 8005020:	465d      	mov	r5, fp
 8005022:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005024:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005028:	f000 f8c4 	bl	80051b4 <__locale_ctype_ptr_l>
 800502c:	4420      	add	r0, r4
 800502e:	7846      	ldrb	r6, [r0, #1]
 8005030:	f016 0608 	ands.w	r6, r6, #8
 8005034:	d10b      	bne.n	800504e <_strtol_l.isra.0+0x3c>
 8005036:	2c2d      	cmp	r4, #45	; 0x2d
 8005038:	d10b      	bne.n	8005052 <_strtol_l.isra.0+0x40>
 800503a:	2601      	movs	r6, #1
 800503c:	782c      	ldrb	r4, [r5, #0]
 800503e:	f10b 0502 	add.w	r5, fp, #2
 8005042:	b167      	cbz	r7, 800505e <_strtol_l.isra.0+0x4c>
 8005044:	2f10      	cmp	r7, #16
 8005046:	d114      	bne.n	8005072 <_strtol_l.isra.0+0x60>
 8005048:	2c30      	cmp	r4, #48	; 0x30
 800504a:	d00a      	beq.n	8005062 <_strtol_l.isra.0+0x50>
 800504c:	e011      	b.n	8005072 <_strtol_l.isra.0+0x60>
 800504e:	46ab      	mov	fp, r5
 8005050:	e7e6      	b.n	8005020 <_strtol_l.isra.0+0xe>
 8005052:	2c2b      	cmp	r4, #43	; 0x2b
 8005054:	bf04      	itt	eq
 8005056:	782c      	ldrbeq	r4, [r5, #0]
 8005058:	f10b 0502 	addeq.w	r5, fp, #2
 800505c:	e7f1      	b.n	8005042 <_strtol_l.isra.0+0x30>
 800505e:	2c30      	cmp	r4, #48	; 0x30
 8005060:	d127      	bne.n	80050b2 <_strtol_l.isra.0+0xa0>
 8005062:	782b      	ldrb	r3, [r5, #0]
 8005064:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005068:	2b58      	cmp	r3, #88	; 0x58
 800506a:	d14b      	bne.n	8005104 <_strtol_l.isra.0+0xf2>
 800506c:	2710      	movs	r7, #16
 800506e:	786c      	ldrb	r4, [r5, #1]
 8005070:	3502      	adds	r5, #2
 8005072:	2e00      	cmp	r6, #0
 8005074:	bf0c      	ite	eq
 8005076:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800507a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800507e:	2200      	movs	r2, #0
 8005080:	fbb1 fef7 	udiv	lr, r1, r7
 8005084:	4610      	mov	r0, r2
 8005086:	fb07 1c1e 	mls	ip, r7, lr, r1
 800508a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800508e:	2b09      	cmp	r3, #9
 8005090:	d811      	bhi.n	80050b6 <_strtol_l.isra.0+0xa4>
 8005092:	461c      	mov	r4, r3
 8005094:	42a7      	cmp	r7, r4
 8005096:	dd1d      	ble.n	80050d4 <_strtol_l.isra.0+0xc2>
 8005098:	1c53      	adds	r3, r2, #1
 800509a:	d007      	beq.n	80050ac <_strtol_l.isra.0+0x9a>
 800509c:	4586      	cmp	lr, r0
 800509e:	d316      	bcc.n	80050ce <_strtol_l.isra.0+0xbc>
 80050a0:	d101      	bne.n	80050a6 <_strtol_l.isra.0+0x94>
 80050a2:	45a4      	cmp	ip, r4
 80050a4:	db13      	blt.n	80050ce <_strtol_l.isra.0+0xbc>
 80050a6:	2201      	movs	r2, #1
 80050a8:	fb00 4007 	mla	r0, r0, r7, r4
 80050ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050b0:	e7eb      	b.n	800508a <_strtol_l.isra.0+0x78>
 80050b2:	270a      	movs	r7, #10
 80050b4:	e7dd      	b.n	8005072 <_strtol_l.isra.0+0x60>
 80050b6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80050ba:	2b19      	cmp	r3, #25
 80050bc:	d801      	bhi.n	80050c2 <_strtol_l.isra.0+0xb0>
 80050be:	3c37      	subs	r4, #55	; 0x37
 80050c0:	e7e8      	b.n	8005094 <_strtol_l.isra.0+0x82>
 80050c2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80050c6:	2b19      	cmp	r3, #25
 80050c8:	d804      	bhi.n	80050d4 <_strtol_l.isra.0+0xc2>
 80050ca:	3c57      	subs	r4, #87	; 0x57
 80050cc:	e7e2      	b.n	8005094 <_strtol_l.isra.0+0x82>
 80050ce:	f04f 32ff 	mov.w	r2, #4294967295
 80050d2:	e7eb      	b.n	80050ac <_strtol_l.isra.0+0x9a>
 80050d4:	1c53      	adds	r3, r2, #1
 80050d6:	d108      	bne.n	80050ea <_strtol_l.isra.0+0xd8>
 80050d8:	2322      	movs	r3, #34	; 0x22
 80050da:	4608      	mov	r0, r1
 80050dc:	f8c8 3000 	str.w	r3, [r8]
 80050e0:	f1ba 0f00 	cmp.w	sl, #0
 80050e4:	d107      	bne.n	80050f6 <_strtol_l.isra.0+0xe4>
 80050e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ea:	b106      	cbz	r6, 80050ee <_strtol_l.isra.0+0xdc>
 80050ec:	4240      	negs	r0, r0
 80050ee:	f1ba 0f00 	cmp.w	sl, #0
 80050f2:	d00c      	beq.n	800510e <_strtol_l.isra.0+0xfc>
 80050f4:	b122      	cbz	r2, 8005100 <_strtol_l.isra.0+0xee>
 80050f6:	3d01      	subs	r5, #1
 80050f8:	f8ca 5000 	str.w	r5, [sl]
 80050fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005100:	464d      	mov	r5, r9
 8005102:	e7f9      	b.n	80050f8 <_strtol_l.isra.0+0xe6>
 8005104:	2430      	movs	r4, #48	; 0x30
 8005106:	2f00      	cmp	r7, #0
 8005108:	d1b3      	bne.n	8005072 <_strtol_l.isra.0+0x60>
 800510a:	2708      	movs	r7, #8
 800510c:	e7b1      	b.n	8005072 <_strtol_l.isra.0+0x60>
 800510e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005114 <strtol>:
 8005114:	4b08      	ldr	r3, [pc, #32]	; (8005138 <strtol+0x24>)
 8005116:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005118:	681c      	ldr	r4, [r3, #0]
 800511a:	4d08      	ldr	r5, [pc, #32]	; (800513c <strtol+0x28>)
 800511c:	6a23      	ldr	r3, [r4, #32]
 800511e:	2b00      	cmp	r3, #0
 8005120:	bf08      	it	eq
 8005122:	462b      	moveq	r3, r5
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	4613      	mov	r3, r2
 8005128:	460a      	mov	r2, r1
 800512a:	4601      	mov	r1, r0
 800512c:	4620      	mov	r0, r4
 800512e:	f7ff ff70 	bl	8005012 <_strtol_l.isra.0>
 8005132:	b003      	add	sp, #12
 8005134:	bd30      	pop	{r4, r5, pc}
 8005136:	bf00      	nop
 8005138:	20000078 	.word	0x20000078
 800513c:	200000dc 	.word	0x200000dc

08005140 <_vsniprintf_r>:
 8005140:	b530      	push	{r4, r5, lr}
 8005142:	1e14      	subs	r4, r2, #0
 8005144:	4605      	mov	r5, r0
 8005146:	b09b      	sub	sp, #108	; 0x6c
 8005148:	4618      	mov	r0, r3
 800514a:	da05      	bge.n	8005158 <_vsniprintf_r+0x18>
 800514c:	238b      	movs	r3, #139	; 0x8b
 800514e:	f04f 30ff 	mov.w	r0, #4294967295
 8005152:	602b      	str	r3, [r5, #0]
 8005154:	b01b      	add	sp, #108	; 0x6c
 8005156:	bd30      	pop	{r4, r5, pc}
 8005158:	f44f 7302 	mov.w	r3, #520	; 0x208
 800515c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005160:	bf0c      	ite	eq
 8005162:	4623      	moveq	r3, r4
 8005164:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005168:	9302      	str	r3, [sp, #8]
 800516a:	9305      	str	r3, [sp, #20]
 800516c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005170:	9100      	str	r1, [sp, #0]
 8005172:	9104      	str	r1, [sp, #16]
 8005174:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005178:	4602      	mov	r2, r0
 800517a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800517c:	4669      	mov	r1, sp
 800517e:	4628      	mov	r0, r5
 8005180:	f000 f88a 	bl	8005298 <_svfiprintf_r>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	bfbc      	itt	lt
 8005188:	238b      	movlt	r3, #139	; 0x8b
 800518a:	602b      	strlt	r3, [r5, #0]
 800518c:	2c00      	cmp	r4, #0
 800518e:	d0e1      	beq.n	8005154 <_vsniprintf_r+0x14>
 8005190:	2200      	movs	r2, #0
 8005192:	9b00      	ldr	r3, [sp, #0]
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	e7dd      	b.n	8005154 <_vsniprintf_r+0x14>

08005198 <vsniprintf>:
 8005198:	b507      	push	{r0, r1, r2, lr}
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	4613      	mov	r3, r2
 800519e:	460a      	mov	r2, r1
 80051a0:	4601      	mov	r1, r0
 80051a2:	4803      	ldr	r0, [pc, #12]	; (80051b0 <vsniprintf+0x18>)
 80051a4:	6800      	ldr	r0, [r0, #0]
 80051a6:	f7ff ffcb 	bl	8005140 <_vsniprintf_r>
 80051aa:	b003      	add	sp, #12
 80051ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80051b0:	20000078 	.word	0x20000078

080051b4 <__locale_ctype_ptr_l>:
 80051b4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80051b8:	4770      	bx	lr

080051ba <__ascii_mbtowc>:
 80051ba:	b082      	sub	sp, #8
 80051bc:	b901      	cbnz	r1, 80051c0 <__ascii_mbtowc+0x6>
 80051be:	a901      	add	r1, sp, #4
 80051c0:	b142      	cbz	r2, 80051d4 <__ascii_mbtowc+0x1a>
 80051c2:	b14b      	cbz	r3, 80051d8 <__ascii_mbtowc+0x1e>
 80051c4:	7813      	ldrb	r3, [r2, #0]
 80051c6:	600b      	str	r3, [r1, #0]
 80051c8:	7812      	ldrb	r2, [r2, #0]
 80051ca:	1c10      	adds	r0, r2, #0
 80051cc:	bf18      	it	ne
 80051ce:	2001      	movne	r0, #1
 80051d0:	b002      	add	sp, #8
 80051d2:	4770      	bx	lr
 80051d4:	4610      	mov	r0, r2
 80051d6:	e7fb      	b.n	80051d0 <__ascii_mbtowc+0x16>
 80051d8:	f06f 0001 	mvn.w	r0, #1
 80051dc:	e7f8      	b.n	80051d0 <__ascii_mbtowc+0x16>

080051de <__malloc_lock>:
 80051de:	4770      	bx	lr

080051e0 <__malloc_unlock>:
 80051e0:	4770      	bx	lr

080051e2 <__ssputs_r>:
 80051e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e6:	688e      	ldr	r6, [r1, #8]
 80051e8:	4682      	mov	sl, r0
 80051ea:	429e      	cmp	r6, r3
 80051ec:	460c      	mov	r4, r1
 80051ee:	4691      	mov	r9, r2
 80051f0:	4698      	mov	r8, r3
 80051f2:	d835      	bhi.n	8005260 <__ssputs_r+0x7e>
 80051f4:	898a      	ldrh	r2, [r1, #12]
 80051f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051fa:	d031      	beq.n	8005260 <__ssputs_r+0x7e>
 80051fc:	2302      	movs	r3, #2
 80051fe:	6825      	ldr	r5, [r4, #0]
 8005200:	6909      	ldr	r1, [r1, #16]
 8005202:	1a6f      	subs	r7, r5, r1
 8005204:	6965      	ldr	r5, [r4, #20]
 8005206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800520a:	fb95 f5f3 	sdiv	r5, r5, r3
 800520e:	f108 0301 	add.w	r3, r8, #1
 8005212:	443b      	add	r3, r7
 8005214:	429d      	cmp	r5, r3
 8005216:	bf38      	it	cc
 8005218:	461d      	movcc	r5, r3
 800521a:	0553      	lsls	r3, r2, #21
 800521c:	d531      	bpl.n	8005282 <__ssputs_r+0xa0>
 800521e:	4629      	mov	r1, r5
 8005220:	f7ff fe00 	bl	8004e24 <_malloc_r>
 8005224:	4606      	mov	r6, r0
 8005226:	b950      	cbnz	r0, 800523e <__ssputs_r+0x5c>
 8005228:	230c      	movs	r3, #12
 800522a:	f8ca 3000 	str.w	r3, [sl]
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005238:	81a3      	strh	r3, [r4, #12]
 800523a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800523e:	463a      	mov	r2, r7
 8005240:	6921      	ldr	r1, [r4, #16]
 8005242:	f000 fad0 	bl	80057e6 <memcpy>
 8005246:	89a3      	ldrh	r3, [r4, #12]
 8005248:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800524c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005250:	81a3      	strh	r3, [r4, #12]
 8005252:	6126      	str	r6, [r4, #16]
 8005254:	443e      	add	r6, r7
 8005256:	6026      	str	r6, [r4, #0]
 8005258:	4646      	mov	r6, r8
 800525a:	6165      	str	r5, [r4, #20]
 800525c:	1bed      	subs	r5, r5, r7
 800525e:	60a5      	str	r5, [r4, #8]
 8005260:	4546      	cmp	r6, r8
 8005262:	bf28      	it	cs
 8005264:	4646      	movcs	r6, r8
 8005266:	4649      	mov	r1, r9
 8005268:	4632      	mov	r2, r6
 800526a:	6820      	ldr	r0, [r4, #0]
 800526c:	f000 fac6 	bl	80057fc <memmove>
 8005270:	68a3      	ldr	r3, [r4, #8]
 8005272:	2000      	movs	r0, #0
 8005274:	1b9b      	subs	r3, r3, r6
 8005276:	60a3      	str	r3, [r4, #8]
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	441e      	add	r6, r3
 800527c:	6026      	str	r6, [r4, #0]
 800527e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005282:	462a      	mov	r2, r5
 8005284:	f000 fad4 	bl	8005830 <_realloc_r>
 8005288:	4606      	mov	r6, r0
 800528a:	2800      	cmp	r0, #0
 800528c:	d1e1      	bne.n	8005252 <__ssputs_r+0x70>
 800528e:	6921      	ldr	r1, [r4, #16]
 8005290:	4650      	mov	r0, sl
 8005292:	f7ff fd7b 	bl	8004d8c <_free_r>
 8005296:	e7c7      	b.n	8005228 <__ssputs_r+0x46>

08005298 <_svfiprintf_r>:
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	b09d      	sub	sp, #116	; 0x74
 800529e:	9303      	str	r3, [sp, #12]
 80052a0:	898b      	ldrh	r3, [r1, #12]
 80052a2:	4680      	mov	r8, r0
 80052a4:	061c      	lsls	r4, r3, #24
 80052a6:	460d      	mov	r5, r1
 80052a8:	4616      	mov	r6, r2
 80052aa:	d50f      	bpl.n	80052cc <_svfiprintf_r+0x34>
 80052ac:	690b      	ldr	r3, [r1, #16]
 80052ae:	b96b      	cbnz	r3, 80052cc <_svfiprintf_r+0x34>
 80052b0:	2140      	movs	r1, #64	; 0x40
 80052b2:	f7ff fdb7 	bl	8004e24 <_malloc_r>
 80052b6:	6028      	str	r0, [r5, #0]
 80052b8:	6128      	str	r0, [r5, #16]
 80052ba:	b928      	cbnz	r0, 80052c8 <_svfiprintf_r+0x30>
 80052bc:	230c      	movs	r3, #12
 80052be:	f8c8 3000 	str.w	r3, [r8]
 80052c2:	f04f 30ff 	mov.w	r0, #4294967295
 80052c6:	e0c4      	b.n	8005452 <_svfiprintf_r+0x1ba>
 80052c8:	2340      	movs	r3, #64	; 0x40
 80052ca:	616b      	str	r3, [r5, #20]
 80052cc:	2300      	movs	r3, #0
 80052ce:	9309      	str	r3, [sp, #36]	; 0x24
 80052d0:	2320      	movs	r3, #32
 80052d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052d6:	2330      	movs	r3, #48	; 0x30
 80052d8:	f04f 0b01 	mov.w	fp, #1
 80052dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052e0:	4637      	mov	r7, r6
 80052e2:	463c      	mov	r4, r7
 80052e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d13c      	bne.n	8005366 <_svfiprintf_r+0xce>
 80052ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80052f0:	d00b      	beq.n	800530a <_svfiprintf_r+0x72>
 80052f2:	4653      	mov	r3, sl
 80052f4:	4632      	mov	r2, r6
 80052f6:	4629      	mov	r1, r5
 80052f8:	4640      	mov	r0, r8
 80052fa:	f7ff ff72 	bl	80051e2 <__ssputs_r>
 80052fe:	3001      	adds	r0, #1
 8005300:	f000 80a2 	beq.w	8005448 <_svfiprintf_r+0x1b0>
 8005304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005306:	4453      	add	r3, sl
 8005308:	9309      	str	r3, [sp, #36]	; 0x24
 800530a:	783b      	ldrb	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 809b 	beq.w	8005448 <_svfiprintf_r+0x1b0>
 8005312:	2300      	movs	r3, #0
 8005314:	f04f 32ff 	mov.w	r2, #4294967295
 8005318:	9304      	str	r3, [sp, #16]
 800531a:	9307      	str	r3, [sp, #28]
 800531c:	9205      	str	r2, [sp, #20]
 800531e:	9306      	str	r3, [sp, #24]
 8005320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005324:	931a      	str	r3, [sp, #104]	; 0x68
 8005326:	2205      	movs	r2, #5
 8005328:	7821      	ldrb	r1, [r4, #0]
 800532a:	4850      	ldr	r0, [pc, #320]	; (800546c <_svfiprintf_r+0x1d4>)
 800532c:	f000 fa4d 	bl	80057ca <memchr>
 8005330:	1c67      	adds	r7, r4, #1
 8005332:	9b04      	ldr	r3, [sp, #16]
 8005334:	b9d8      	cbnz	r0, 800536e <_svfiprintf_r+0xd6>
 8005336:	06d9      	lsls	r1, r3, #27
 8005338:	bf44      	itt	mi
 800533a:	2220      	movmi	r2, #32
 800533c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005340:	071a      	lsls	r2, r3, #28
 8005342:	bf44      	itt	mi
 8005344:	222b      	movmi	r2, #43	; 0x2b
 8005346:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800534a:	7822      	ldrb	r2, [r4, #0]
 800534c:	2a2a      	cmp	r2, #42	; 0x2a
 800534e:	d016      	beq.n	800537e <_svfiprintf_r+0xe6>
 8005350:	2100      	movs	r1, #0
 8005352:	200a      	movs	r0, #10
 8005354:	9a07      	ldr	r2, [sp, #28]
 8005356:	4627      	mov	r7, r4
 8005358:	783b      	ldrb	r3, [r7, #0]
 800535a:	3401      	adds	r4, #1
 800535c:	3b30      	subs	r3, #48	; 0x30
 800535e:	2b09      	cmp	r3, #9
 8005360:	d950      	bls.n	8005404 <_svfiprintf_r+0x16c>
 8005362:	b1c9      	cbz	r1, 8005398 <_svfiprintf_r+0x100>
 8005364:	e011      	b.n	800538a <_svfiprintf_r+0xf2>
 8005366:	2b25      	cmp	r3, #37	; 0x25
 8005368:	d0c0      	beq.n	80052ec <_svfiprintf_r+0x54>
 800536a:	4627      	mov	r7, r4
 800536c:	e7b9      	b.n	80052e2 <_svfiprintf_r+0x4a>
 800536e:	4a3f      	ldr	r2, [pc, #252]	; (800546c <_svfiprintf_r+0x1d4>)
 8005370:	463c      	mov	r4, r7
 8005372:	1a80      	subs	r0, r0, r2
 8005374:	fa0b f000 	lsl.w	r0, fp, r0
 8005378:	4318      	orrs	r0, r3
 800537a:	9004      	str	r0, [sp, #16]
 800537c:	e7d3      	b.n	8005326 <_svfiprintf_r+0x8e>
 800537e:	9a03      	ldr	r2, [sp, #12]
 8005380:	1d11      	adds	r1, r2, #4
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	9103      	str	r1, [sp, #12]
 8005386:	2a00      	cmp	r2, #0
 8005388:	db01      	blt.n	800538e <_svfiprintf_r+0xf6>
 800538a:	9207      	str	r2, [sp, #28]
 800538c:	e004      	b.n	8005398 <_svfiprintf_r+0x100>
 800538e:	4252      	negs	r2, r2
 8005390:	f043 0302 	orr.w	r3, r3, #2
 8005394:	9207      	str	r2, [sp, #28]
 8005396:	9304      	str	r3, [sp, #16]
 8005398:	783b      	ldrb	r3, [r7, #0]
 800539a:	2b2e      	cmp	r3, #46	; 0x2e
 800539c:	d10d      	bne.n	80053ba <_svfiprintf_r+0x122>
 800539e:	787b      	ldrb	r3, [r7, #1]
 80053a0:	1c79      	adds	r1, r7, #1
 80053a2:	2b2a      	cmp	r3, #42	; 0x2a
 80053a4:	d132      	bne.n	800540c <_svfiprintf_r+0x174>
 80053a6:	9b03      	ldr	r3, [sp, #12]
 80053a8:	3702      	adds	r7, #2
 80053aa:	1d1a      	adds	r2, r3, #4
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	9203      	str	r2, [sp, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bfb8      	it	lt
 80053b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80053b8:	9305      	str	r3, [sp, #20]
 80053ba:	4c2d      	ldr	r4, [pc, #180]	; (8005470 <_svfiprintf_r+0x1d8>)
 80053bc:	2203      	movs	r2, #3
 80053be:	7839      	ldrb	r1, [r7, #0]
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 fa02 	bl	80057ca <memchr>
 80053c6:	b138      	cbz	r0, 80053d8 <_svfiprintf_r+0x140>
 80053c8:	2340      	movs	r3, #64	; 0x40
 80053ca:	1b00      	subs	r0, r0, r4
 80053cc:	fa03 f000 	lsl.w	r0, r3, r0
 80053d0:	9b04      	ldr	r3, [sp, #16]
 80053d2:	3701      	adds	r7, #1
 80053d4:	4303      	orrs	r3, r0
 80053d6:	9304      	str	r3, [sp, #16]
 80053d8:	7839      	ldrb	r1, [r7, #0]
 80053da:	2206      	movs	r2, #6
 80053dc:	4825      	ldr	r0, [pc, #148]	; (8005474 <_svfiprintf_r+0x1dc>)
 80053de:	1c7e      	adds	r6, r7, #1
 80053e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053e4:	f000 f9f1 	bl	80057ca <memchr>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d035      	beq.n	8005458 <_svfiprintf_r+0x1c0>
 80053ec:	4b22      	ldr	r3, [pc, #136]	; (8005478 <_svfiprintf_r+0x1e0>)
 80053ee:	b9fb      	cbnz	r3, 8005430 <_svfiprintf_r+0x198>
 80053f0:	9b03      	ldr	r3, [sp, #12]
 80053f2:	3307      	adds	r3, #7
 80053f4:	f023 0307 	bic.w	r3, r3, #7
 80053f8:	3308      	adds	r3, #8
 80053fa:	9303      	str	r3, [sp, #12]
 80053fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053fe:	444b      	add	r3, r9
 8005400:	9309      	str	r3, [sp, #36]	; 0x24
 8005402:	e76d      	b.n	80052e0 <_svfiprintf_r+0x48>
 8005404:	fb00 3202 	mla	r2, r0, r2, r3
 8005408:	2101      	movs	r1, #1
 800540a:	e7a4      	b.n	8005356 <_svfiprintf_r+0xbe>
 800540c:	2300      	movs	r3, #0
 800540e:	240a      	movs	r4, #10
 8005410:	4618      	mov	r0, r3
 8005412:	9305      	str	r3, [sp, #20]
 8005414:	460f      	mov	r7, r1
 8005416:	783a      	ldrb	r2, [r7, #0]
 8005418:	3101      	adds	r1, #1
 800541a:	3a30      	subs	r2, #48	; 0x30
 800541c:	2a09      	cmp	r2, #9
 800541e:	d903      	bls.n	8005428 <_svfiprintf_r+0x190>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0ca      	beq.n	80053ba <_svfiprintf_r+0x122>
 8005424:	9005      	str	r0, [sp, #20]
 8005426:	e7c8      	b.n	80053ba <_svfiprintf_r+0x122>
 8005428:	fb04 2000 	mla	r0, r4, r0, r2
 800542c:	2301      	movs	r3, #1
 800542e:	e7f1      	b.n	8005414 <_svfiprintf_r+0x17c>
 8005430:	ab03      	add	r3, sp, #12
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	462a      	mov	r2, r5
 8005436:	4b11      	ldr	r3, [pc, #68]	; (800547c <_svfiprintf_r+0x1e4>)
 8005438:	a904      	add	r1, sp, #16
 800543a:	4640      	mov	r0, r8
 800543c:	f3af 8000 	nop.w
 8005440:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005444:	4681      	mov	r9, r0
 8005446:	d1d9      	bne.n	80053fc <_svfiprintf_r+0x164>
 8005448:	89ab      	ldrh	r3, [r5, #12]
 800544a:	065b      	lsls	r3, r3, #25
 800544c:	f53f af39 	bmi.w	80052c2 <_svfiprintf_r+0x2a>
 8005450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005452:	b01d      	add	sp, #116	; 0x74
 8005454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005458:	ab03      	add	r3, sp, #12
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	462a      	mov	r2, r5
 800545e:	4b07      	ldr	r3, [pc, #28]	; (800547c <_svfiprintf_r+0x1e4>)
 8005460:	a904      	add	r1, sp, #16
 8005462:	4640      	mov	r0, r8
 8005464:	f000 f884 	bl	8005570 <_printf_i>
 8005468:	e7ea      	b.n	8005440 <_svfiprintf_r+0x1a8>
 800546a:	bf00      	nop
 800546c:	080060fa 	.word	0x080060fa
 8005470:	08006100 	.word	0x08006100
 8005474:	08006104 	.word	0x08006104
 8005478:	00000000 	.word	0x00000000
 800547c:	080051e3 	.word	0x080051e3

08005480 <_printf_common>:
 8005480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005484:	4691      	mov	r9, r2
 8005486:	461f      	mov	r7, r3
 8005488:	688a      	ldr	r2, [r1, #8]
 800548a:	690b      	ldr	r3, [r1, #16]
 800548c:	4606      	mov	r6, r0
 800548e:	4293      	cmp	r3, r2
 8005490:	bfb8      	it	lt
 8005492:	4613      	movlt	r3, r2
 8005494:	f8c9 3000 	str.w	r3, [r9]
 8005498:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800549c:	460c      	mov	r4, r1
 800549e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054a2:	b112      	cbz	r2, 80054aa <_printf_common+0x2a>
 80054a4:	3301      	adds	r3, #1
 80054a6:	f8c9 3000 	str.w	r3, [r9]
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	0699      	lsls	r1, r3, #26
 80054ae:	bf42      	ittt	mi
 80054b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80054b4:	3302      	addmi	r3, #2
 80054b6:	f8c9 3000 	strmi.w	r3, [r9]
 80054ba:	6825      	ldr	r5, [r4, #0]
 80054bc:	f015 0506 	ands.w	r5, r5, #6
 80054c0:	d107      	bne.n	80054d2 <_printf_common+0x52>
 80054c2:	f104 0a19 	add.w	sl, r4, #25
 80054c6:	68e3      	ldr	r3, [r4, #12]
 80054c8:	f8d9 2000 	ldr.w	r2, [r9]
 80054cc:	1a9b      	subs	r3, r3, r2
 80054ce:	429d      	cmp	r5, r3
 80054d0:	db2a      	blt.n	8005528 <_printf_common+0xa8>
 80054d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80054d6:	6822      	ldr	r2, [r4, #0]
 80054d8:	3300      	adds	r3, #0
 80054da:	bf18      	it	ne
 80054dc:	2301      	movne	r3, #1
 80054de:	0692      	lsls	r2, r2, #26
 80054e0:	d42f      	bmi.n	8005542 <_printf_common+0xc2>
 80054e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054e6:	4639      	mov	r1, r7
 80054e8:	4630      	mov	r0, r6
 80054ea:	47c0      	blx	r8
 80054ec:	3001      	adds	r0, #1
 80054ee:	d022      	beq.n	8005536 <_printf_common+0xb6>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	68e5      	ldr	r5, [r4, #12]
 80054f4:	f003 0306 	and.w	r3, r3, #6
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	bf18      	it	ne
 80054fc:	2500      	movne	r5, #0
 80054fe:	f8d9 2000 	ldr.w	r2, [r9]
 8005502:	f04f 0900 	mov.w	r9, #0
 8005506:	bf08      	it	eq
 8005508:	1aad      	subeq	r5, r5, r2
 800550a:	68a3      	ldr	r3, [r4, #8]
 800550c:	6922      	ldr	r2, [r4, #16]
 800550e:	bf08      	it	eq
 8005510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005514:	4293      	cmp	r3, r2
 8005516:	bfc4      	itt	gt
 8005518:	1a9b      	subgt	r3, r3, r2
 800551a:	18ed      	addgt	r5, r5, r3
 800551c:	341a      	adds	r4, #26
 800551e:	454d      	cmp	r5, r9
 8005520:	d11b      	bne.n	800555a <_printf_common+0xda>
 8005522:	2000      	movs	r0, #0
 8005524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005528:	2301      	movs	r3, #1
 800552a:	4652      	mov	r2, sl
 800552c:	4639      	mov	r1, r7
 800552e:	4630      	mov	r0, r6
 8005530:	47c0      	blx	r8
 8005532:	3001      	adds	r0, #1
 8005534:	d103      	bne.n	800553e <_printf_common+0xbe>
 8005536:	f04f 30ff 	mov.w	r0, #4294967295
 800553a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553e:	3501      	adds	r5, #1
 8005540:	e7c1      	b.n	80054c6 <_printf_common+0x46>
 8005542:	2030      	movs	r0, #48	; 0x30
 8005544:	18e1      	adds	r1, r4, r3
 8005546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005550:	4422      	add	r2, r4
 8005552:	3302      	adds	r3, #2
 8005554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005558:	e7c3      	b.n	80054e2 <_printf_common+0x62>
 800555a:	2301      	movs	r3, #1
 800555c:	4622      	mov	r2, r4
 800555e:	4639      	mov	r1, r7
 8005560:	4630      	mov	r0, r6
 8005562:	47c0      	blx	r8
 8005564:	3001      	adds	r0, #1
 8005566:	d0e6      	beq.n	8005536 <_printf_common+0xb6>
 8005568:	f109 0901 	add.w	r9, r9, #1
 800556c:	e7d7      	b.n	800551e <_printf_common+0x9e>
	...

08005570 <_printf_i>:
 8005570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005574:	4617      	mov	r7, r2
 8005576:	7e0a      	ldrb	r2, [r1, #24]
 8005578:	b085      	sub	sp, #20
 800557a:	2a6e      	cmp	r2, #110	; 0x6e
 800557c:	4698      	mov	r8, r3
 800557e:	4606      	mov	r6, r0
 8005580:	460c      	mov	r4, r1
 8005582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005584:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005588:	f000 80bc 	beq.w	8005704 <_printf_i+0x194>
 800558c:	d81a      	bhi.n	80055c4 <_printf_i+0x54>
 800558e:	2a63      	cmp	r2, #99	; 0x63
 8005590:	d02e      	beq.n	80055f0 <_printf_i+0x80>
 8005592:	d80a      	bhi.n	80055aa <_printf_i+0x3a>
 8005594:	2a00      	cmp	r2, #0
 8005596:	f000 80c8 	beq.w	800572a <_printf_i+0x1ba>
 800559a:	2a58      	cmp	r2, #88	; 0x58
 800559c:	f000 808a 	beq.w	80056b4 <_printf_i+0x144>
 80055a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055a4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80055a8:	e02a      	b.n	8005600 <_printf_i+0x90>
 80055aa:	2a64      	cmp	r2, #100	; 0x64
 80055ac:	d001      	beq.n	80055b2 <_printf_i+0x42>
 80055ae:	2a69      	cmp	r2, #105	; 0x69
 80055b0:	d1f6      	bne.n	80055a0 <_printf_i+0x30>
 80055b2:	6821      	ldr	r1, [r4, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80055ba:	d023      	beq.n	8005604 <_printf_i+0x94>
 80055bc:	1d11      	adds	r1, r2, #4
 80055be:	6019      	str	r1, [r3, #0]
 80055c0:	6813      	ldr	r3, [r2, #0]
 80055c2:	e027      	b.n	8005614 <_printf_i+0xa4>
 80055c4:	2a73      	cmp	r2, #115	; 0x73
 80055c6:	f000 80b4 	beq.w	8005732 <_printf_i+0x1c2>
 80055ca:	d808      	bhi.n	80055de <_printf_i+0x6e>
 80055cc:	2a6f      	cmp	r2, #111	; 0x6f
 80055ce:	d02a      	beq.n	8005626 <_printf_i+0xb6>
 80055d0:	2a70      	cmp	r2, #112	; 0x70
 80055d2:	d1e5      	bne.n	80055a0 <_printf_i+0x30>
 80055d4:	680a      	ldr	r2, [r1, #0]
 80055d6:	f042 0220 	orr.w	r2, r2, #32
 80055da:	600a      	str	r2, [r1, #0]
 80055dc:	e003      	b.n	80055e6 <_printf_i+0x76>
 80055de:	2a75      	cmp	r2, #117	; 0x75
 80055e0:	d021      	beq.n	8005626 <_printf_i+0xb6>
 80055e2:	2a78      	cmp	r2, #120	; 0x78
 80055e4:	d1dc      	bne.n	80055a0 <_printf_i+0x30>
 80055e6:	2278      	movs	r2, #120	; 0x78
 80055e8:	496f      	ldr	r1, [pc, #444]	; (80057a8 <_printf_i+0x238>)
 80055ea:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80055ee:	e064      	b.n	80056ba <_printf_i+0x14a>
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80055f6:	1d11      	adds	r1, r2, #4
 80055f8:	6019      	str	r1, [r3, #0]
 80055fa:	6813      	ldr	r3, [r2, #0]
 80055fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005600:	2301      	movs	r3, #1
 8005602:	e0a3      	b.n	800574c <_printf_i+0x1dc>
 8005604:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005608:	f102 0104 	add.w	r1, r2, #4
 800560c:	6019      	str	r1, [r3, #0]
 800560e:	d0d7      	beq.n	80055c0 <_printf_i+0x50>
 8005610:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005614:	2b00      	cmp	r3, #0
 8005616:	da03      	bge.n	8005620 <_printf_i+0xb0>
 8005618:	222d      	movs	r2, #45	; 0x2d
 800561a:	425b      	negs	r3, r3
 800561c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005620:	4962      	ldr	r1, [pc, #392]	; (80057ac <_printf_i+0x23c>)
 8005622:	220a      	movs	r2, #10
 8005624:	e017      	b.n	8005656 <_printf_i+0xe6>
 8005626:	6820      	ldr	r0, [r4, #0]
 8005628:	6819      	ldr	r1, [r3, #0]
 800562a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800562e:	d003      	beq.n	8005638 <_printf_i+0xc8>
 8005630:	1d08      	adds	r0, r1, #4
 8005632:	6018      	str	r0, [r3, #0]
 8005634:	680b      	ldr	r3, [r1, #0]
 8005636:	e006      	b.n	8005646 <_printf_i+0xd6>
 8005638:	f010 0f40 	tst.w	r0, #64	; 0x40
 800563c:	f101 0004 	add.w	r0, r1, #4
 8005640:	6018      	str	r0, [r3, #0]
 8005642:	d0f7      	beq.n	8005634 <_printf_i+0xc4>
 8005644:	880b      	ldrh	r3, [r1, #0]
 8005646:	2a6f      	cmp	r2, #111	; 0x6f
 8005648:	bf14      	ite	ne
 800564a:	220a      	movne	r2, #10
 800564c:	2208      	moveq	r2, #8
 800564e:	4957      	ldr	r1, [pc, #348]	; (80057ac <_printf_i+0x23c>)
 8005650:	2000      	movs	r0, #0
 8005652:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005656:	6865      	ldr	r5, [r4, #4]
 8005658:	2d00      	cmp	r5, #0
 800565a:	60a5      	str	r5, [r4, #8]
 800565c:	f2c0 809c 	blt.w	8005798 <_printf_i+0x228>
 8005660:	6820      	ldr	r0, [r4, #0]
 8005662:	f020 0004 	bic.w	r0, r0, #4
 8005666:	6020      	str	r0, [r4, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d13f      	bne.n	80056ec <_printf_i+0x17c>
 800566c:	2d00      	cmp	r5, #0
 800566e:	f040 8095 	bne.w	800579c <_printf_i+0x22c>
 8005672:	4675      	mov	r5, lr
 8005674:	2a08      	cmp	r2, #8
 8005676:	d10b      	bne.n	8005690 <_printf_i+0x120>
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	07da      	lsls	r2, r3, #31
 800567c:	d508      	bpl.n	8005690 <_printf_i+0x120>
 800567e:	6923      	ldr	r3, [r4, #16]
 8005680:	6862      	ldr	r2, [r4, #4]
 8005682:	429a      	cmp	r2, r3
 8005684:	bfde      	ittt	le
 8005686:	2330      	movle	r3, #48	; 0x30
 8005688:	f805 3c01 	strble.w	r3, [r5, #-1]
 800568c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005690:	ebae 0305 	sub.w	r3, lr, r5
 8005694:	6123      	str	r3, [r4, #16]
 8005696:	f8cd 8000 	str.w	r8, [sp]
 800569a:	463b      	mov	r3, r7
 800569c:	aa03      	add	r2, sp, #12
 800569e:	4621      	mov	r1, r4
 80056a0:	4630      	mov	r0, r6
 80056a2:	f7ff feed 	bl	8005480 <_printf_common>
 80056a6:	3001      	adds	r0, #1
 80056a8:	d155      	bne.n	8005756 <_printf_i+0x1e6>
 80056aa:	f04f 30ff 	mov.w	r0, #4294967295
 80056ae:	b005      	add	sp, #20
 80056b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056b4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80056b8:	493c      	ldr	r1, [pc, #240]	; (80057ac <_printf_i+0x23c>)
 80056ba:	6822      	ldr	r2, [r4, #0]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80056c2:	f100 0504 	add.w	r5, r0, #4
 80056c6:	601d      	str	r5, [r3, #0]
 80056c8:	d001      	beq.n	80056ce <_printf_i+0x15e>
 80056ca:	6803      	ldr	r3, [r0, #0]
 80056cc:	e002      	b.n	80056d4 <_printf_i+0x164>
 80056ce:	0655      	lsls	r5, r2, #25
 80056d0:	d5fb      	bpl.n	80056ca <_printf_i+0x15a>
 80056d2:	8803      	ldrh	r3, [r0, #0]
 80056d4:	07d0      	lsls	r0, r2, #31
 80056d6:	bf44      	itt	mi
 80056d8:	f042 0220 	orrmi.w	r2, r2, #32
 80056dc:	6022      	strmi	r2, [r4, #0]
 80056de:	b91b      	cbnz	r3, 80056e8 <_printf_i+0x178>
 80056e0:	6822      	ldr	r2, [r4, #0]
 80056e2:	f022 0220 	bic.w	r2, r2, #32
 80056e6:	6022      	str	r2, [r4, #0]
 80056e8:	2210      	movs	r2, #16
 80056ea:	e7b1      	b.n	8005650 <_printf_i+0xe0>
 80056ec:	4675      	mov	r5, lr
 80056ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80056f2:	fb02 3310 	mls	r3, r2, r0, r3
 80056f6:	5ccb      	ldrb	r3, [r1, r3]
 80056f8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80056fc:	4603      	mov	r3, r0
 80056fe:	2800      	cmp	r0, #0
 8005700:	d1f5      	bne.n	80056ee <_printf_i+0x17e>
 8005702:	e7b7      	b.n	8005674 <_printf_i+0x104>
 8005704:	6808      	ldr	r0, [r1, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	f010 0f80 	tst.w	r0, #128	; 0x80
 800570c:	6949      	ldr	r1, [r1, #20]
 800570e:	d004      	beq.n	800571a <_printf_i+0x1aa>
 8005710:	1d10      	adds	r0, r2, #4
 8005712:	6018      	str	r0, [r3, #0]
 8005714:	6813      	ldr	r3, [r2, #0]
 8005716:	6019      	str	r1, [r3, #0]
 8005718:	e007      	b.n	800572a <_printf_i+0x1ba>
 800571a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800571e:	f102 0004 	add.w	r0, r2, #4
 8005722:	6018      	str	r0, [r3, #0]
 8005724:	6813      	ldr	r3, [r2, #0]
 8005726:	d0f6      	beq.n	8005716 <_printf_i+0x1a6>
 8005728:	8019      	strh	r1, [r3, #0]
 800572a:	2300      	movs	r3, #0
 800572c:	4675      	mov	r5, lr
 800572e:	6123      	str	r3, [r4, #16]
 8005730:	e7b1      	b.n	8005696 <_printf_i+0x126>
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	1d11      	adds	r1, r2, #4
 8005736:	6019      	str	r1, [r3, #0]
 8005738:	6815      	ldr	r5, [r2, #0]
 800573a:	2100      	movs	r1, #0
 800573c:	6862      	ldr	r2, [r4, #4]
 800573e:	4628      	mov	r0, r5
 8005740:	f000 f843 	bl	80057ca <memchr>
 8005744:	b108      	cbz	r0, 800574a <_printf_i+0x1da>
 8005746:	1b40      	subs	r0, r0, r5
 8005748:	6060      	str	r0, [r4, #4]
 800574a:	6863      	ldr	r3, [r4, #4]
 800574c:	6123      	str	r3, [r4, #16]
 800574e:	2300      	movs	r3, #0
 8005750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005754:	e79f      	b.n	8005696 <_printf_i+0x126>
 8005756:	6923      	ldr	r3, [r4, #16]
 8005758:	462a      	mov	r2, r5
 800575a:	4639      	mov	r1, r7
 800575c:	4630      	mov	r0, r6
 800575e:	47c0      	blx	r8
 8005760:	3001      	adds	r0, #1
 8005762:	d0a2      	beq.n	80056aa <_printf_i+0x13a>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	079b      	lsls	r3, r3, #30
 8005768:	d507      	bpl.n	800577a <_printf_i+0x20a>
 800576a:	2500      	movs	r5, #0
 800576c:	f104 0919 	add.w	r9, r4, #25
 8005770:	68e3      	ldr	r3, [r4, #12]
 8005772:	9a03      	ldr	r2, [sp, #12]
 8005774:	1a9b      	subs	r3, r3, r2
 8005776:	429d      	cmp	r5, r3
 8005778:	db05      	blt.n	8005786 <_printf_i+0x216>
 800577a:	68e0      	ldr	r0, [r4, #12]
 800577c:	9b03      	ldr	r3, [sp, #12]
 800577e:	4298      	cmp	r0, r3
 8005780:	bfb8      	it	lt
 8005782:	4618      	movlt	r0, r3
 8005784:	e793      	b.n	80056ae <_printf_i+0x13e>
 8005786:	2301      	movs	r3, #1
 8005788:	464a      	mov	r2, r9
 800578a:	4639      	mov	r1, r7
 800578c:	4630      	mov	r0, r6
 800578e:	47c0      	blx	r8
 8005790:	3001      	adds	r0, #1
 8005792:	d08a      	beq.n	80056aa <_printf_i+0x13a>
 8005794:	3501      	adds	r5, #1
 8005796:	e7eb      	b.n	8005770 <_printf_i+0x200>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1a7      	bne.n	80056ec <_printf_i+0x17c>
 800579c:	780b      	ldrb	r3, [r1, #0]
 800579e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a6:	e765      	b.n	8005674 <_printf_i+0x104>
 80057a8:	0800611c 	.word	0x0800611c
 80057ac:	0800610b 	.word	0x0800610b

080057b0 <__ascii_wctomb>:
 80057b0:	b149      	cbz	r1, 80057c6 <__ascii_wctomb+0x16>
 80057b2:	2aff      	cmp	r2, #255	; 0xff
 80057b4:	bf8b      	itete	hi
 80057b6:	238a      	movhi	r3, #138	; 0x8a
 80057b8:	700a      	strbls	r2, [r1, #0]
 80057ba:	6003      	strhi	r3, [r0, #0]
 80057bc:	2001      	movls	r0, #1
 80057be:	bf88      	it	hi
 80057c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80057c4:	4770      	bx	lr
 80057c6:	4608      	mov	r0, r1
 80057c8:	4770      	bx	lr

080057ca <memchr>:
 80057ca:	b510      	push	{r4, lr}
 80057cc:	b2c9      	uxtb	r1, r1
 80057ce:	4402      	add	r2, r0
 80057d0:	4290      	cmp	r0, r2
 80057d2:	4603      	mov	r3, r0
 80057d4:	d101      	bne.n	80057da <memchr+0x10>
 80057d6:	2000      	movs	r0, #0
 80057d8:	bd10      	pop	{r4, pc}
 80057da:	781c      	ldrb	r4, [r3, #0]
 80057dc:	3001      	adds	r0, #1
 80057de:	428c      	cmp	r4, r1
 80057e0:	d1f6      	bne.n	80057d0 <memchr+0x6>
 80057e2:	4618      	mov	r0, r3
 80057e4:	bd10      	pop	{r4, pc}

080057e6 <memcpy>:
 80057e6:	b510      	push	{r4, lr}
 80057e8:	1e43      	subs	r3, r0, #1
 80057ea:	440a      	add	r2, r1
 80057ec:	4291      	cmp	r1, r2
 80057ee:	d100      	bne.n	80057f2 <memcpy+0xc>
 80057f0:	bd10      	pop	{r4, pc}
 80057f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057fa:	e7f7      	b.n	80057ec <memcpy+0x6>

080057fc <memmove>:
 80057fc:	4288      	cmp	r0, r1
 80057fe:	b510      	push	{r4, lr}
 8005800:	eb01 0302 	add.w	r3, r1, r2
 8005804:	d803      	bhi.n	800580e <memmove+0x12>
 8005806:	1e42      	subs	r2, r0, #1
 8005808:	4299      	cmp	r1, r3
 800580a:	d10c      	bne.n	8005826 <memmove+0x2a>
 800580c:	bd10      	pop	{r4, pc}
 800580e:	4298      	cmp	r0, r3
 8005810:	d2f9      	bcs.n	8005806 <memmove+0xa>
 8005812:	1881      	adds	r1, r0, r2
 8005814:	1ad2      	subs	r2, r2, r3
 8005816:	42d3      	cmn	r3, r2
 8005818:	d100      	bne.n	800581c <memmove+0x20>
 800581a:	bd10      	pop	{r4, pc}
 800581c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005820:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005824:	e7f7      	b.n	8005816 <memmove+0x1a>
 8005826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800582a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800582e:	e7eb      	b.n	8005808 <memmove+0xc>

08005830 <_realloc_r>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	4607      	mov	r7, r0
 8005834:	4614      	mov	r4, r2
 8005836:	460e      	mov	r6, r1
 8005838:	b921      	cbnz	r1, 8005844 <_realloc_r+0x14>
 800583a:	4611      	mov	r1, r2
 800583c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005840:	f7ff baf0 	b.w	8004e24 <_malloc_r>
 8005844:	b922      	cbnz	r2, 8005850 <_realloc_r+0x20>
 8005846:	f7ff faa1 	bl	8004d8c <_free_r>
 800584a:	4625      	mov	r5, r4
 800584c:	4628      	mov	r0, r5
 800584e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005850:	f000 f814 	bl	800587c <_malloc_usable_size_r>
 8005854:	4284      	cmp	r4, r0
 8005856:	d90f      	bls.n	8005878 <_realloc_r+0x48>
 8005858:	4621      	mov	r1, r4
 800585a:	4638      	mov	r0, r7
 800585c:	f7ff fae2 	bl	8004e24 <_malloc_r>
 8005860:	4605      	mov	r5, r0
 8005862:	2800      	cmp	r0, #0
 8005864:	d0f2      	beq.n	800584c <_realloc_r+0x1c>
 8005866:	4631      	mov	r1, r6
 8005868:	4622      	mov	r2, r4
 800586a:	f7ff ffbc 	bl	80057e6 <memcpy>
 800586e:	4631      	mov	r1, r6
 8005870:	4638      	mov	r0, r7
 8005872:	f7ff fa8b 	bl	8004d8c <_free_r>
 8005876:	e7e9      	b.n	800584c <_realloc_r+0x1c>
 8005878:	4635      	mov	r5, r6
 800587a:	e7e7      	b.n	800584c <_realloc_r+0x1c>

0800587c <_malloc_usable_size_r>:
 800587c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005880:	2800      	cmp	r0, #0
 8005882:	f1a0 0004 	sub.w	r0, r0, #4
 8005886:	bfbc      	itt	lt
 8005888:	580b      	ldrlt	r3, [r1, r0]
 800588a:	18c0      	addlt	r0, r0, r3
 800588c:	4770      	bx	lr
	...

08005890 <_init>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	bf00      	nop
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr

0800589c <_fini>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr
