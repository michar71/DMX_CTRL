
DMX_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018d8  0800c1d8  0800c1d8  0001c1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800dab0  0800dab0  0001dab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800dab4  0800dab4  0001dab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000003e4  20000000  0800dab8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000015c4  200003e8  0800de9c  000203e8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200019ac  0800de9c  000219ac  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000203e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003ba86  00000000  00000000  0002040d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007e9f  00000000  00000000  0005be93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00012676  00000000  00000000  00063d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001ca8  00000000  00000000  000763a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001bd8  00000000  00000000  00078050  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001ec03  00000000  00000000  00079c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000215ac  00000000  00000000  0009882b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000826a4  00000000  00000000  000b9dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0013c47b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000056ac  00000000  00000000  0013c4f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003e8 	.word	0x200003e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c1c0 	.word	0x0800c1c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003ec 	.word	0x200003ec
 800014c:	0800c1c0 	.word	0x0800c1c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b510      	push	{r4, lr}
 800115e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_InitTick+0x40>)
 8001162:	7818      	ldrb	r0, [r3, #0]
 8001164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001168:	fbb3 f3f0 	udiv	r3, r3, r0
 800116c:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <HAL_InitTick+0x44>)
 800116e:	6810      	ldr	r0, [r2, #0]
 8001170:	fbb0 f0f3 	udiv	r0, r0, r3
 8001174:	f000 fb22 	bl	80017bc <HAL_SYSTICK_Config>
 8001178:	b968      	cbnz	r0, 8001196 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	2c0f      	cmp	r4, #15
 800117c:	d901      	bls.n	8001182 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800117e:	2001      	movs	r0, #1
 8001180:	e00a      	b.n	8001198 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001182:	2200      	movs	r2, #0
 8001184:	4621      	mov	r1, r4
 8001186:	f04f 30ff 	mov.w	r0, #4294967295
 800118a:	f000 fad5 	bl	8001738 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_InitTick+0x48>)
 8001190:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001192:	2000      	movs	r0, #0
 8001194:	e000      	b.n	8001198 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001196:	2001      	movs	r0, #1
}
 8001198:	bd10      	pop	{r4, pc}
 800119a:	bf00      	nop
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000184 	.word	0x20000184
 80011a4:	20000004 	.word	0x20000004

080011a8 <HAL_Init>:
{
 80011a8:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011aa:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_Init+0x20>)
 80011ac:	6813      	ldr	r3, [r2, #0]
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 faad 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff ffce 	bl	800115c <HAL_InitTick>
  HAL_MspInit();
 80011c0:	f006 fdd8 	bl	8007d74 <HAL_MspInit>
}
 80011c4:	2000      	movs	r0, #0
 80011c6:	bd08      	pop	{r3, pc}
 80011c8:	40022000 	.word	0x40022000

080011cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011cc:	4a03      	ldr	r2, [pc, #12]	; (80011dc <HAL_IncTick+0x10>)
 80011ce:	6811      	ldr	r1, [r2, #0]
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_IncTick+0x14>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	440b      	add	r3, r1
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	200009a4 	.word	0x200009a4
 80011e0:	20000000 	.word	0x20000000

080011e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011e4:	4b01      	ldr	r3, [pc, #4]	; (80011ec <HAL_GetTick+0x8>)
 80011e6:	6818      	ldr	r0, [r3, #0]
}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	200009a4 	.word	0x200009a4

080011f0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011f0:	6803      	ldr	r3, [r0, #0]
 80011f2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80011f4:	4770      	bx	lr

080011f6 <HAL_ADC_LevelOutOfWindowCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80011f6:	4770      	bx	lr

080011f8 <HAL_ADC_IRQHandler>:
{
 80011f8:	b510      	push	{r4, lr}
 80011fa:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80011fc:	6803      	ldr	r3, [r0, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	f012 0f20 	tst.w	r2, #32
 8001204:	d018      	beq.n	8001238 <HAL_ADC_IRQHandler+0x40>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	f012 0f02 	tst.w	r2, #2
 800120c:	d014      	beq.n	8001238 <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800120e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001210:	f012 0f10 	tst.w	r2, #16
 8001214:	d103      	bne.n	800121e <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001216:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800121c:	6282      	str	r2, [r0, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001224:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001228:	d038      	beq.n	800129c <HAL_ADC_IRQHandler+0xa4>
      HAL_ADC_ConvCpltCallback(hadc);
 800122a:	4620      	mov	r0, r4
 800122c:	f006 ff5c 	bl	80080e8 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	f06f 0212 	mvn.w	r2, #18
 8001236:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001240:	d022      	beq.n	8001288 <HAL_ADC_IRQHandler+0x90>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	f012 0f04 	tst.w	r2, #4
 8001248:	d01e      	beq.n	8001288 <HAL_ADC_IRQHandler+0x90>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800124a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800124c:	f012 0f10 	tst.w	r2, #16
 8001250:	d103      	bne.n	800125a <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001252:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001258:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8001260:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8001264:	d031      	beq.n	80012ca <HAL_ADC_IRQHandler+0xd2>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001266:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001268:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800126c:	d105      	bne.n	800127a <HAL_ADC_IRQHandler+0x82>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001274:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001278:	d024      	beq.n	80012c4 <HAL_ADC_IRQHandler+0xcc>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800127a:	4620      	mov	r0, r4
 800127c:	f000 fa48 	bl	8001710 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	f06f 020c 	mvn.w	r2, #12
 8001286:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001290:	d003      	beq.n	800129a <HAL_ADC_IRQHandler+0xa2>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f013 0f01 	tst.w	r3, #1
 8001298:	d128      	bne.n	80012ec <HAL_ADC_IRQHandler+0xf4>
}
 800129a:	bd10      	pop	{r4, pc}
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800129c:	7b22      	ldrb	r2, [r4, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800129e:	2a00      	cmp	r2, #0
 80012a0:	d1c3      	bne.n	800122a <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	f022 0220 	bic.w	r2, r2, #32
 80012a8:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012b0:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012b4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80012b8:	d1b7      	bne.n	800122a <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80012c2:	e7b2      	b.n	800122a <HAL_ADC_IRQHandler+0x32>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80012c4:	7b22      	ldrb	r2, [r4, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d1d7      	bne.n	800127a <HAL_ADC_IRQHandler+0x82>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012d0:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012d8:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012e0:	d1cb      	bne.n	800127a <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80012ea:	e7c6      	b.n	800127a <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f2:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012f4:	4620      	mov	r0, r4
 80012f6:	f7ff ff7e 	bl	80011f6 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	f06f 0201 	mvn.w	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
}
 8001302:	e7ca      	b.n	800129a <HAL_ADC_IRQHandler+0xa2>

08001304 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001304:	b430      	push	{r4, r5}
 8001306:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800130c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001310:	2b01      	cmp	r3, #1
 8001312:	f000 808b 	beq.w	800142c <HAL_ADC_ConfigChannel+0x128>
 8001316:	4602      	mov	r2, r0
 8001318:	2301      	movs	r3, #1
 800131a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800131e:	684b      	ldr	r3, [r1, #4]
 8001320:	2b06      	cmp	r3, #6
 8001322:	d829      	bhi.n	8001378 <HAL_ADC_ConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001324:	6805      	ldr	r5, [r0, #0]
 8001326:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001328:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800132c:	3b05      	subs	r3, #5
 800132e:	241f      	movs	r4, #31
 8001330:	409c      	lsls	r4, r3
 8001332:	ea20 0004 	bic.w	r0, r0, r4
 8001336:	680c      	ldr	r4, [r1, #0]
 8001338:	fa04 f303 	lsl.w	r3, r4, r3
 800133c:	4303      	orrs	r3, r0
 800133e:	636b      	str	r3, [r5, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001340:	680b      	ldr	r3, [r1, #0]
 8001342:	2b09      	cmp	r3, #9
 8001344:	d938      	bls.n	80013b8 <HAL_ADC_ConfigChannel+0xb4>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001346:	6815      	ldr	r5, [r2, #0]
 8001348:	68e8      	ldr	r0, [r5, #12]
 800134a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800134e:	3b1e      	subs	r3, #30
 8001350:	2407      	movs	r4, #7
 8001352:	409c      	lsls	r4, r3
 8001354:	ea20 0004 	bic.w	r0, r0, r4
 8001358:	688c      	ldr	r4, [r1, #8]
 800135a:	fa04 f303 	lsl.w	r3, r4, r3
 800135e:	4303      	orrs	r3, r0
 8001360:	60eb      	str	r3, [r5, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001362:	680b      	ldr	r3, [r1, #0]
 8001364:	3b10      	subs	r3, #16
 8001366:	2b01      	cmp	r3, #1
 8001368:	d934      	bls.n	80013d4 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800136a:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800136c:	2300      	movs	r3, #0
 800136e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001372:	b002      	add	sp, #8
 8001374:	bc30      	pop	{r4, r5}
 8001376:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8001378:	2b0c      	cmp	r3, #12
 800137a:	d80e      	bhi.n	800139a <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800137c:	6805      	ldr	r5, [r0, #0]
 800137e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001380:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001384:	3b23      	subs	r3, #35	; 0x23
 8001386:	241f      	movs	r4, #31
 8001388:	409c      	lsls	r4, r3
 800138a:	ea20 0004 	bic.w	r0, r0, r4
 800138e:	680c      	ldr	r4, [r1, #0]
 8001390:	fa04 f303 	lsl.w	r3, r4, r3
 8001394:	4303      	orrs	r3, r0
 8001396:	632b      	str	r3, [r5, #48]	; 0x30
 8001398:	e7d2      	b.n	8001340 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800139a:	6805      	ldr	r5, [r0, #0]
 800139c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800139e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013a2:	3b41      	subs	r3, #65	; 0x41
 80013a4:	241f      	movs	r4, #31
 80013a6:	409c      	lsls	r4, r3
 80013a8:	ea20 0004 	bic.w	r0, r0, r4
 80013ac:	680c      	ldr	r4, [r1, #0]
 80013ae:	fa04 f303 	lsl.w	r3, r4, r3
 80013b2:	4303      	orrs	r3, r0
 80013b4:	62eb      	str	r3, [r5, #44]	; 0x2c
 80013b6:	e7c3      	b.n	8001340 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013b8:	6815      	ldr	r5, [r2, #0]
 80013ba:	6928      	ldr	r0, [r5, #16]
 80013bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80013c0:	2407      	movs	r4, #7
 80013c2:	409c      	lsls	r4, r3
 80013c4:	ea20 0004 	bic.w	r0, r0, r4
 80013c8:	688c      	ldr	r4, [r1, #8]
 80013ca:	fa04 f303 	lsl.w	r3, r4, r3
 80013ce:	4303      	orrs	r3, r0
 80013d0:	612b      	str	r3, [r5, #16]
 80013d2:	e7c6      	b.n	8001362 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80013d4:	6813      	ldr	r3, [r2, #0]
 80013d6:	4816      	ldr	r0, [pc, #88]	; (8001430 <HAL_ADC_ConfigChannel+0x12c>)
 80013d8:	4283      	cmp	r3, r0
 80013da:	d005      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80013de:	f043 0320 	orr.w	r3, r3, #32
 80013e2:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
 80013e6:	e7c1      	b.n	800136c <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013e8:	6898      	ldr	r0, [r3, #8]
 80013ea:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80013ee:	d11b      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013f0:	6898      	ldr	r0, [r3, #8]
 80013f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80013f6:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013f8:	680b      	ldr	r3, [r1, #0]
 80013fa:	2b10      	cmp	r3, #16
 80013fc:	d001      	beq.n	8001402 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013fe:	2000      	movs	r0, #0
 8001400:	e7b4      	b.n	800136c <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_ADC_ConfigChannel+0x130>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	490c      	ldr	r1, [pc, #48]	; (8001438 <HAL_ADC_ConfigChannel+0x134>)
 8001408:	fba1 1303 	umull	r1, r3, r1, r3
 800140c:	0c9b      	lsrs	r3, r3, #18
 800140e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001412:	0059      	lsls	r1, r3, #1
 8001414:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001416:	e002      	b.n	800141e <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 8001418:	9b01      	ldr	r3, [sp, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800141e:	9b01      	ldr	r3, [sp, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f9      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001424:	2000      	movs	r0, #0
 8001426:	e7a1      	b.n	800136c <HAL_ADC_ConfigChannel+0x68>
 8001428:	2000      	movs	r0, #0
 800142a:	e79f      	b.n	800136c <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 800142c:	2002      	movs	r0, #2
 800142e:	e7a0      	b.n	8001372 <HAL_ADC_ConfigChannel+0x6e>
 8001430:	40012400 	.word	0x40012400
 8001434:	20000184 	.word	0x20000184
 8001438:	431bde83 	.word	0x431bde83

0800143c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800143c:	b530      	push	{r4, r5, lr}
 800143e:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001444:	6803      	ldr	r3, [r0, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	f012 0f01 	tst.w	r2, #1
 800144c:	d12e      	bne.n	80014ac <ADC_Enable+0x70>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	f042 0201 	orr.w	r2, r2, #1
 8001454:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <ADC_Enable+0x78>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <ADC_Enable+0x7c>)
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	0c9b      	lsrs	r3, r3, #18
 8001462:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001464:	e002      	b.n	800146c <ADC_Enable+0x30>
    {
      wait_loop_index--;
 8001466:	9b01      	ldr	r3, [sp, #4]
 8001468:	3b01      	subs	r3, #1
 800146a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800146c:	9b01      	ldr	r3, [sp, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f9      	bne.n	8001466 <ADC_Enable+0x2a>
 8001472:	4604      	mov	r4, r0
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001474:	f7ff feb6 	bl	80011e4 <HAL_GetTick>
 8001478:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f013 0f01 	tst.w	r3, #1
 8001482:	d111      	bne.n	80014a8 <ADC_Enable+0x6c>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001484:	f7ff feae 	bl	80011e4 <HAL_GetTick>
 8001488:	1b40      	subs	r0, r0, r5
 800148a:	2802      	cmp	r0, #2
 800148c:	d9f5      	bls.n	800147a <ADC_Enable+0x3e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800148e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001490:	f043 0310 	orr.w	r3, r3, #16
 8001494:	62a3      	str	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	62e3      	str	r3, [r4, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800149e:	2300      	movs	r3, #0
 80014a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      
        return HAL_ERROR;
 80014a4:	2001      	movs	r0, #1
 80014a6:	e002      	b.n	80014ae <ADC_Enable+0x72>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014a8:	2000      	movs	r0, #0
 80014aa:	e000      	b.n	80014ae <ADC_Enable+0x72>
 80014ac:	2000      	movs	r0, #0
}
 80014ae:	b003      	add	sp, #12
 80014b0:	bd30      	pop	{r4, r5, pc}
 80014b2:	bf00      	nop
 80014b4:	20000184 	.word	0x20000184
 80014b8:	431bde83 	.word	0x431bde83

080014bc <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 80014bc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d06f      	beq.n	80015a4 <HAL_ADC_Start_IT+0xe8>
{
 80014c4:	b510      	push	{r4, lr}
 80014c6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80014c8:	2301      	movs	r3, #1
 80014ca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80014ce:	f7ff ffb5 	bl	800143c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80014d2:	4602      	mov	r2, r0
 80014d4:	2800      	cmp	r0, #0
 80014d6:	d160      	bne.n	800159a <HAL_ADC_Start_IT+0xde>
    ADC_STATE_CLR_SET(hadc->State,
 80014d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	4930      	ldr	r1, [pc, #192]	; (80015ac <HAL_ADC_Start_IT+0xf0>)
 80014ec:	428b      	cmp	r3, r1
 80014ee:	d02c      	beq.n	800154a <HAL_ADC_Start_IT+0x8e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80014f2:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 80014f6:	62a1      	str	r1, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014f8:	6859      	ldr	r1, [r3, #4]
 80014fa:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80014fe:	d005      	beq.n	800150c <HAL_ADC_Start_IT+0x50>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001500:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001502:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001506:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800150a:	62a1      	str	r1, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800150c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800150e:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 8001512:	d030      	beq.n	8001576 <HAL_ADC_Start_IT+0xba>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001514:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001516:	f021 0106 	bic.w	r1, r1, #6
 800151a:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800151c:	2100      	movs	r1, #0
 800151e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001522:	f06f 0102 	mvn.w	r1, #2
 8001526:	6019      	str	r1, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001528:	6821      	ldr	r1, [r4, #0]
 800152a:	684b      	ldr	r3, [r1, #4]
 800152c:	f043 0320 	orr.w	r3, r3, #32
 8001530:	604b      	str	r3, [r1, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	6899      	ldr	r1, [r3, #8]
 8001536:	f401 2160 	and.w	r1, r1, #917504	; 0xe0000
 800153a:	f5b1 2f60 	cmp.w	r1, #917504	; 0xe0000
 800153e:	d01d      	beq.n	800157c <HAL_ADC_Start_IT+0xc0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001540:	6899      	ldr	r1, [r3, #8]
 8001542:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001546:	6099      	str	r1, [r3, #8]
 8001548:	e02a      	b.n	80015a0 <HAL_ADC_Start_IT+0xe4>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800154a:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800154e:	6849      	ldr	r1, [r1, #4]
 8001550:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8001554:	d0cc      	beq.n	80014f0 <HAL_ADC_Start_IT+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001556:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001558:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800155c:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800155e:	4914      	ldr	r1, [pc, #80]	; (80015b0 <HAL_ADC_Start_IT+0xf4>)
 8001560:	6849      	ldr	r1, [r1, #4]
 8001562:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8001566:	d0d1      	beq.n	800150c <HAL_ADC_Start_IT+0x50>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001568:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800156a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800156e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001572:	62a1      	str	r1, [r4, #40]	; 0x28
 8001574:	e7ca      	b.n	800150c <HAL_ADC_Start_IT+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8001576:	2100      	movs	r1, #0
 8001578:	62e1      	str	r1, [r4, #44]	; 0x2c
 800157a:	e7cf      	b.n	800151c <HAL_ADC_Start_IT+0x60>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800157c:	490b      	ldr	r1, [pc, #44]	; (80015ac <HAL_ADC_Start_IT+0xf0>)
 800157e:	428b      	cmp	r3, r1
 8001580:	d004      	beq.n	800158c <HAL_ADC_Start_IT+0xd0>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001582:	6899      	ldr	r1, [r3, #8]
 8001584:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 8001588:	6099      	str	r1, [r3, #8]
 800158a:	e009      	b.n	80015a0 <HAL_ADC_Start_IT+0xe4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800158c:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8001590:	6849      	ldr	r1, [r1, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001592:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8001596:	d1d3      	bne.n	8001540 <HAL_ADC_Start_IT+0x84>
 8001598:	e7f3      	b.n	8001582 <HAL_ADC_Start_IT+0xc6>
    __HAL_UNLOCK(hadc);
 800159a:	2300      	movs	r3, #0
 800159c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80015a0:	4610      	mov	r0, r2
 80015a2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80015a4:	2202      	movs	r2, #2
}
 80015a6:	4610      	mov	r0, r2
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40012800 	.word	0x40012800
 80015b0:	40012400 	.word	0x40012400

080015b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80015b4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015b6:	6803      	ldr	r3, [r0, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	f012 0f01 	tst.w	r2, #1
 80015be:	d101      	bne.n	80015c4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015c0:	2000      	movs	r0, #0
}
 80015c2:	bd38      	pop	{r3, r4, r5, pc}
 80015c4:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	f022 0201 	bic.w	r2, r2, #1
 80015cc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80015ce:	f7ff fe09 	bl	80011e4 <HAL_GetTick>
 80015d2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f013 0f01 	tst.w	r3, #1
 80015dc:	d00e      	beq.n	80015fc <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015de:	f7ff fe01 	bl	80011e4 <HAL_GetTick>
 80015e2:	1b40      	subs	r0, r0, r5
 80015e4:	2802      	cmp	r0, #2
 80015e6:	d9f5      	bls.n	80015d4 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 80015f8:	2001      	movs	r0, #1
 80015fa:	e7e2      	b.n	80015c2 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80015fc:	2000      	movs	r0, #0
 80015fe:	e7e0      	b.n	80015c2 <ADC_ConversionStop_Disable+0xe>

08001600 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001600:	2800      	cmp	r0, #0
 8001602:	d07f      	beq.n	8001704 <HAL_ADC_Init+0x104>
{
 8001604:	b538      	push	{r3, r4, r5, lr}
 8001606:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001608:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800160a:	2b00      	cmp	r3, #0
 800160c:	d033      	beq.n	8001676 <HAL_ADC_Init+0x76>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800160e:	4620      	mov	r0, r4
 8001610:	f7ff ffd0 	bl	80015b4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001614:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001616:	f013 0310 	ands.w	r3, r3, #16
 800161a:	d16d      	bne.n	80016f8 <HAL_ADC_Init+0xf8>
 800161c:	2800      	cmp	r0, #0
 800161e:	d16b      	bne.n	80016f8 <HAL_ADC_Init+0xf8>
    ADC_STATE_CLR_SET(hadc->State,
 8001620:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001622:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001626:	f022 0202 	bic.w	r2, r2, #2
 800162a:	f042 0202 	orr.w	r2, r2, #2
 800162e:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001630:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001632:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001634:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001636:	7b25      	ldrb	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001638:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800163c:	68a1      	ldr	r1, [r4, #8]
 800163e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001642:	d021      	beq.n	8001688 <HAL_ADC_Init+0x88>
 8001644:	2901      	cmp	r1, #1
 8001646:	d01c      	beq.n	8001682 <HAL_ADC_Init+0x82>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001648:	7d21      	ldrb	r1, [r4, #20]
 800164a:	2901      	cmp	r1, #1
 800164c:	d01f      	beq.n	800168e <HAL_ADC_Init+0x8e>
      MODIFY_REG(hadc->Instance->CR1,
 800164e:	6825      	ldr	r5, [r4, #0]
 8001650:	6869      	ldr	r1, [r5, #4]
 8001652:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8001656:	430b      	orrs	r3, r1
 8001658:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800165a:	6821      	ldr	r1, [r4, #0]
 800165c:	688d      	ldr	r5, [r1, #8]
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <HAL_ADC_Init+0x108>)
 8001660:	402b      	ands	r3, r5
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001666:	68a3      	ldr	r3, [r4, #8]
 8001668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800166c:	d020      	beq.n	80016b0 <HAL_ADC_Init+0xb0>
 800166e:	2b01      	cmp	r3, #1
 8001670:	d01e      	beq.n	80016b0 <HAL_ADC_Init+0xb0>
  uint32_t tmp_sqr1 = 0U;
 8001672:	2100      	movs	r1, #0
 8001674:	e01f      	b.n	80016b6 <HAL_ADC_Init+0xb6>
    ADC_CLEAR_ERRORCODE(hadc);
 8001676:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001678:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800167c:	f006 fb9c 	bl	8007db8 <HAL_ADC_MspInit>
 8001680:	e7c5      	b.n	800160e <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001686:	e7df      	b.n	8001648 <HAL_ADC_Init+0x48>
 8001688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168c:	e7dc      	b.n	8001648 <HAL_ADC_Init+0x48>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800168e:	b935      	cbnz	r5, 800169e <HAL_ADC_Init+0x9e>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001690:	69a1      	ldr	r1, [r4, #24]
 8001692:	3901      	subs	r1, #1
 8001694:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8001698:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800169c:	e7d7      	b.n	800164e <HAL_ADC_Init+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800169e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80016a0:	f041 0120 	orr.w	r1, r1, #32
 80016a4:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80016a8:	f041 0101 	orr.w	r1, r1, #1
 80016ac:	62e1      	str	r1, [r4, #44]	; 0x2c
 80016ae:	e7ce      	b.n	800164e <HAL_ADC_Init+0x4e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016b0:	6923      	ldr	r3, [r4, #16]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80016b6:	6825      	ldr	r5, [r4, #0]
 80016b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80016ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80016be:	430b      	orrs	r3, r1
 80016c0:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	6899      	ldr	r1, [r3, #8]
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_ADC_Init+0x10c>)
 80016c8:	400b      	ands	r3, r1
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d00b      	beq.n	80016e6 <HAL_ADC_Init+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 80016ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016d0:	f023 0312 	bic.w	r3, r3, #18
 80016d4:	f043 0310 	orr.w	r3, r3, #16
 80016d8:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 80016e2:	2001      	movs	r0, #1
 80016e4:	e00d      	b.n	8001702 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 80016e6:	2300      	movs	r3, #0
 80016e8:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80016ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016ec:	f023 0303 	bic.w	r3, r3, #3
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80016f6:	e004      	b.n	8001702 <HAL_ADC_Init+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016fa:	f043 0310 	orr.w	r3, r3, #16
 80016fe:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001700:	2001      	movs	r0, #1
}
 8001702:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001704:	2001      	movs	r0, #1
}
 8001706:	4770      	bx	lr
 8001708:	ffe1f7fd 	.word	0xffe1f7fd
 800170c:	ff1f0efe 	.word	0xff1f0efe

08001710 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001710:	4770      	bx	lr
	...

08001714 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001716:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001718:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800171c:	041b      	lsls	r3, r3, #16
 800171e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001720:	0200      	lsls	r0, r0, #8
 8001722:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001726:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001728:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800172c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001730:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001738:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_NVIC_SetPriority+0x60>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001742:	f1c3 0407 	rsb	r4, r3, #7
 8001746:	2c04      	cmp	r4, #4
 8001748:	bf28      	it	cs
 800174a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174c:	1d1d      	adds	r5, r3, #4
 800174e:	2d06      	cmp	r5, #6
 8001750:	d918      	bls.n	8001784 <HAL_NVIC_SetPriority+0x4c>
 8001752:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 35ff 	mov.w	r5, #4294967295
 8001758:	fa05 f404 	lsl.w	r4, r5, r4
 800175c:	ea21 0104 	bic.w	r1, r1, r4
 8001760:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001762:	fa05 f303 	lsl.w	r3, r5, r3
 8001766:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800176c:	2800      	cmp	r0, #0
 800176e:	db0b      	blt.n	8001788 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001770:	0109      	lsls	r1, r1, #4
 8001772:	b2c9      	uxtb	r1, r1
 8001774:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001778:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800177c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001780:	bc30      	pop	{r4, r5}
 8001782:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001784:	2300      	movs	r3, #0
 8001786:	e7e5      	b.n	8001754 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	f000 000f 	and.w	r0, r0, #15
 800178c:	0109      	lsls	r1, r1, #4
 800178e:	b2c9      	uxtb	r1, r1
 8001790:	4b02      	ldr	r3, [pc, #8]	; (800179c <HAL_NVIC_SetPriority+0x64>)
 8001792:	5419      	strb	r1, [r3, r0]
 8001794:	e7f4      	b.n	8001780 <HAL_NVIC_SetPriority+0x48>
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00
 800179c:	e000ed14 	.word	0xe000ed14

080017a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80017a0:	2800      	cmp	r0, #0
 80017a2:	db07      	blt.n	80017b4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a4:	f000 021f 	and.w	r2, r0, #31
 80017a8:	0940      	lsrs	r0, r0, #5
 80017aa:	2301      	movs	r3, #1
 80017ac:	4093      	lsls	r3, r2
 80017ae:	4a02      	ldr	r2, [pc, #8]	; (80017b8 <HAL_NVIC_EnableIRQ+0x18>)
 80017b0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000e100 	.word	0xe000e100

080017bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017bc:	3801      	subs	r0, #1
 80017be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80017c2:	d20a      	bcs.n	80017da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_SYSTICK_Config+0x24>)
 80017c6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c8:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <HAL_SYSTICK_Config+0x28>)
 80017ca:	21f0      	movs	r1, #240	; 0xf0
 80017cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d0:	2000      	movs	r0, #0
 80017d2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d4:	2207      	movs	r2, #7
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e8:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017ea:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80017ec:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80017ee:	2401      	movs	r4, #1
 80017f0:	40b4      	lsls	r4, r6
 80017f2:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017f4:	6804      	ldr	r4, [r0, #0]
 80017f6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017f8:	6843      	ldr	r3, [r0, #4]
 80017fa:	2b10      	cmp	r3, #16
 80017fc:	d005      	beq.n	800180a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80017fe:	6803      	ldr	r3, [r0, #0]
 8001800:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001802:	6803      	ldr	r3, [r0, #0]
 8001804:	60da      	str	r2, [r3, #12]
  }
}
 8001806:	bc70      	pop	{r4, r5, r6}
 8001808:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800180a:	6803      	ldr	r3, [r0, #0]
 800180c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800180e:	6803      	ldr	r3, [r0, #0]
 8001810:	60d9      	str	r1, [r3, #12]
 8001812:	e7f8      	b.n	8001806 <DMA_SetConfig+0x1e>

08001814 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001814:	b360      	cbz	r0, 8001870 <HAL_DMA_Init+0x5c>
{
 8001816:	b410      	push	{r4}
 8001818:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800181a:	6801      	ldr	r1, [r0, #0]
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_DMA_Init+0x60>)
 800181e:	440b      	add	r3, r1
 8001820:	4815      	ldr	r0, [pc, #84]	; (8001878 <HAL_DMA_Init+0x64>)
 8001822:	fba0 0303 	umull	r0, r3, r0, r3
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_DMA_Init+0x68>)
 800182e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8001830:	2302      	movs	r3, #2
 8001832:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001836:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001838:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 800183c:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001840:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001842:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 8001844:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001846:	68d4      	ldr	r4, [r2, #12]
 8001848:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184a:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184e:	6954      	ldr	r4, [r2, #20]
 8001850:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001852:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001854:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001856:	69d4      	ldr	r4, [r2, #28]
 8001858:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800185a:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 800185c:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185e:	2000      	movs	r0, #0
 8001860:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001862:	2301      	movs	r3, #1
 8001864:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001868:	f882 0020 	strb.w	r0, [r2, #32]
}
 800186c:	bc10      	pop	{r4}
 800186e:	4770      	bx	lr
    return HAL_ERROR;
 8001870:	2001      	movs	r0, #1
}
 8001872:	4770      	bx	lr
 8001874:	bffdfff8 	.word	0xbffdfff8
 8001878:	cccccccd 	.word	0xcccccccd
 800187c:	40020000 	.word	0x40020000

08001880 <HAL_DMA_Start_IT>:
{
 8001880:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8001882:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001886:	2c01      	cmp	r4, #1
 8001888:	d032      	beq.n	80018f0 <HAL_DMA_Start_IT+0x70>
 800188a:	2401      	movs	r4, #1
 800188c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001890:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001894:	2c01      	cmp	r4, #1
 8001896:	d004      	beq.n	80018a2 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001898:	2300      	movs	r3, #0
 800189a:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 800189e:	2002      	movs	r0, #2
}
 80018a0:	bd38      	pop	{r3, r4, r5, pc}
 80018a2:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 80018a4:	2002      	movs	r0, #2
 80018a6:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018aa:	2000      	movs	r0, #0
 80018ac:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80018ae:	6825      	ldr	r5, [r4, #0]
 80018b0:	6828      	ldr	r0, [r5, #0]
 80018b2:	f020 0001 	bic.w	r0, r0, #1
 80018b6:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018b8:	4620      	mov	r0, r4
 80018ba:	f7ff ff95 	bl	80017e8 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 80018be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018c0:	b15b      	cbz	r3, 80018da <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c2:	6822      	ldr	r2, [r4, #0]
 80018c4:	6813      	ldr	r3, [r2, #0]
 80018c6:	f043 030e 	orr.w	r3, r3, #14
 80018ca:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80018cc:	6822      	ldr	r2, [r4, #0]
 80018ce:	6813      	ldr	r3, [r2, #0]
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018d6:	2000      	movs	r0, #0
 80018d8:	e7e2      	b.n	80018a0 <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018da:	6822      	ldr	r2, [r4, #0]
 80018dc:	6813      	ldr	r3, [r2, #0]
 80018de:	f023 0304 	bic.w	r3, r3, #4
 80018e2:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018e4:	6822      	ldr	r2, [r4, #0]
 80018e6:	6813      	ldr	r3, [r2, #0]
 80018e8:	f043 030a 	orr.w	r3, r3, #10
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e7ed      	b.n	80018cc <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 80018f0:	2002      	movs	r0, #2
 80018f2:	e7d5      	b.n	80018a0 <HAL_DMA_Start_IT+0x20>

080018f4 <HAL_DMA_Abort_IT>:
{  
 80018f4:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018f6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d003      	beq.n	8001906 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fe:	2304      	movs	r3, #4
 8001900:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001902:	2001      	movs	r0, #1
}
 8001904:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001906:	6802      	ldr	r2, [r0, #0]
 8001908:	6813      	ldr	r3, [r2, #0]
 800190a:	f023 030e 	bic.w	r3, r3, #14
 800190e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001910:	6802      	ldr	r2, [r0, #0]
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800191a:	6803      	ldr	r3, [r0, #0]
 800191c:	4a19      	ldr	r2, [pc, #100]	; (8001984 <HAL_DMA_Abort_IT+0x90>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d014      	beq.n	800194c <HAL_DMA_Abort_IT+0x58>
 8001922:	3214      	adds	r2, #20
 8001924:	4293      	cmp	r3, r2
 8001926:	d01f      	beq.n	8001968 <HAL_DMA_Abort_IT+0x74>
 8001928:	3214      	adds	r2, #20
 800192a:	4293      	cmp	r3, r2
 800192c:	d01e      	beq.n	800196c <HAL_DMA_Abort_IT+0x78>
 800192e:	3214      	adds	r2, #20
 8001930:	4293      	cmp	r3, r2
 8001932:	d01e      	beq.n	8001972 <HAL_DMA_Abort_IT+0x7e>
 8001934:	3214      	adds	r2, #20
 8001936:	4293      	cmp	r3, r2
 8001938:	d01e      	beq.n	8001978 <HAL_DMA_Abort_IT+0x84>
 800193a:	3214      	adds	r2, #20
 800193c:	4293      	cmp	r3, r2
 800193e:	d002      	beq.n	8001946 <HAL_DMA_Abort_IT+0x52>
 8001940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001944:	e003      	b.n	800194e <HAL_DMA_Abort_IT+0x5a>
 8001946:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800194a:	e000      	b.n	800194e <HAL_DMA_Abort_IT+0x5a>
 800194c:	2201      	movs	r2, #1
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <HAL_DMA_Abort_IT+0x94>)
 8001950:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001952:	2301      	movs	r3, #1
 8001954:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001958:	2300      	movs	r3, #0
 800195a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800195e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001960:	b16b      	cbz	r3, 800197e <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8001962:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001964:	2000      	movs	r0, #0
 8001966:	e7cd      	b.n	8001904 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001968:	2210      	movs	r2, #16
 800196a:	e7f0      	b.n	800194e <HAL_DMA_Abort_IT+0x5a>
 800196c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001970:	e7ed      	b.n	800194e <HAL_DMA_Abort_IT+0x5a>
 8001972:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001976:	e7ea      	b.n	800194e <HAL_DMA_Abort_IT+0x5a>
 8001978:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800197c:	e7e7      	b.n	800194e <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800197e:	2000      	movs	r0, #0
 8001980:	e7c0      	b.n	8001904 <HAL_DMA_Abort_IT+0x10>
 8001982:	bf00      	nop
 8001984:	40020008 	.word	0x40020008
 8001988:	40020000 	.word	0x40020000

0800198c <HAL_DMA_IRQHandler>:
{
 800198c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800198e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001990:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001992:	6804      	ldr	r4, [r0, #0]
 8001994:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001996:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001998:	2304      	movs	r3, #4
 800199a:	408b      	lsls	r3, r1
 800199c:	4213      	tst	r3, r2
 800199e:	d035      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x80>
 80019a0:	f015 0f04 	tst.w	r5, #4
 80019a4:	d032      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	f013 0f20 	tst.w	r3, #32
 80019ac:	d103      	bne.n	80019b6 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019b6:	6803      	ldr	r3, [r0, #0]
 80019b8:	4a43      	ldr	r2, [pc, #268]	; (8001ac8 <HAL_DMA_IRQHandler+0x13c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d014      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x5c>
 80019be:	3214      	adds	r2, #20
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d018      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x6a>
 80019c4:	3214      	adds	r2, #20
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d017      	beq.n	80019fa <HAL_DMA_IRQHandler+0x6e>
 80019ca:	3214      	adds	r2, #20
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d017      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x74>
 80019d0:	3214      	adds	r2, #20
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d017      	beq.n	8001a06 <HAL_DMA_IRQHandler+0x7a>
 80019d6:	3214      	adds	r2, #20
 80019d8:	4293      	cmp	r3, r2
 80019da:	d002      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x56>
 80019dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019e0:	e003      	b.n	80019ea <HAL_DMA_IRQHandler+0x5e>
 80019e2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80019e6:	e000      	b.n	80019ea <HAL_DMA_IRQHandler+0x5e>
 80019e8:	2204      	movs	r2, #4
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_DMA_IRQHandler+0x140>)
 80019ec:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80019ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019f0:	b103      	cbz	r3, 80019f4 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 80019f2:	4798      	blx	r3
}
 80019f4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	e7f7      	b.n	80019ea <HAL_DMA_IRQHandler+0x5e>
 80019fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fe:	e7f4      	b.n	80019ea <HAL_DMA_IRQHandler+0x5e>
 8001a00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a04:	e7f1      	b.n	80019ea <HAL_DMA_IRQHandler+0x5e>
 8001a06:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a0a:	e7ee      	b.n	80019ea <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	408b      	lsls	r3, r1
 8001a10:	4213      	tst	r3, r2
 8001a12:	d03c      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x102>
 8001a14:	f015 0f02 	tst.w	r5, #2
 8001a18:	d039      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	f013 0f20 	tst.w	r3, #32
 8001a20:	d106      	bne.n	8001a30 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	f023 030a 	bic.w	r3, r3, #10
 8001a28:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a30:	6803      	ldr	r3, [r0, #0]
 8001a32:	4a25      	ldr	r2, [pc, #148]	; (8001ac8 <HAL_DMA_IRQHandler+0x13c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d014      	beq.n	8001a62 <HAL_DMA_IRQHandler+0xd6>
 8001a38:	3214      	adds	r2, #20
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01c      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xec>
 8001a3e:	3214      	adds	r2, #20
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d01b      	beq.n	8001a7c <HAL_DMA_IRQHandler+0xf0>
 8001a44:	3214      	adds	r2, #20
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d01b      	beq.n	8001a82 <HAL_DMA_IRQHandler+0xf6>
 8001a4a:	3214      	adds	r2, #20
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d01b      	beq.n	8001a88 <HAL_DMA_IRQHandler+0xfc>
 8001a50:	3214      	adds	r2, #20
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d002      	beq.n	8001a5c <HAL_DMA_IRQHandler+0xd0>
 8001a56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5a:	e003      	b.n	8001a64 <HAL_DMA_IRQHandler+0xd8>
 8001a5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a60:	e000      	b.n	8001a64 <HAL_DMA_IRQHandler+0xd8>
 8001a62:	2202      	movs	r2, #2
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_DMA_IRQHandler+0x140>)
 8001a66:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001a6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0bf      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8001a74:	4798      	blx	r3
 8001a76:	e7bd      	b.n	80019f4 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a78:	2220      	movs	r2, #32
 8001a7a:	e7f3      	b.n	8001a64 <HAL_DMA_IRQHandler+0xd8>
 8001a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a80:	e7f0      	b.n	8001a64 <HAL_DMA_IRQHandler+0xd8>
 8001a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a86:	e7ed      	b.n	8001a64 <HAL_DMA_IRQHandler+0xd8>
 8001a88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a8c:	e7ea      	b.n	8001a64 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a8e:	2308      	movs	r3, #8
 8001a90:	fa03 f101 	lsl.w	r1, r3, r1
 8001a94:	4211      	tst	r1, r2
 8001a96:	d0ad      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x68>
 8001a98:	f015 0f08 	tst.w	r5, #8
 8001a9c:	d0aa      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	f023 030e 	bic.w	r3, r3, #14
 8001aa4:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001aa6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001aa8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001aaa:	2301      	movs	r3, #1
 8001aac:	fa03 f202 	lsl.w	r2, r3, r2
 8001ab0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ab2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001ab4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001abe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d097      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8001ac4:	4798      	blx	r3
  return;
 8001ac6:	e795      	b.n	80019f4 <HAL_DMA_IRQHandler+0x68>
 8001ac8:	40020008 	.word	0x40020008
 8001acc:	40020000 	.word	0x40020000

08001ad0 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <FLASH_Program_HalfWord+0x14>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001ad6:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <FLASH_Program_HalfWord+0x18>)
 8001ad8:	6913      	ldr	r3, [r2, #16]
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001ae0:	8001      	strh	r1, [r0, #0]
}
 8001ae2:	4770      	bx	lr
 8001ae4:	200009a8 	.word	0x200009a8
 8001ae8:	40022000 	.word	0x40022000

08001aec <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <FLASH_SetErrorCode+0x6c>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f013 0f10 	tst.w	r3, #16
 8001af4:	d027      	beq.n	8001b46 <FLASH_SetErrorCode+0x5a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001af6:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <FLASH_SetErrorCode+0x70>)
 8001af8:	69d3      	ldr	r3, [r2, #28]
 8001afa:	f043 0302 	orr.w	r3, r3, #2
 8001afe:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001b00:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001b02:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <FLASH_SetErrorCode+0x6c>)
 8001b04:	68d2      	ldr	r2, [r2, #12]
 8001b06:	f012 0f04 	tst.w	r2, #4
 8001b0a:	d006      	beq.n	8001b1a <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001b0c:	4913      	ldr	r1, [pc, #76]	; (8001b5c <FLASH_SetErrorCode+0x70>)
 8001b0e:	69ca      	ldr	r2, [r1, #28]
 8001b10:	f042 0201 	orr.w	r2, r2, #1
 8001b14:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001b16:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <FLASH_SetErrorCode+0x6c>)
 8001b1c:	69d2      	ldr	r2, [r2, #28]
 8001b1e:	f012 0f01 	tst.w	r2, #1
 8001b22:	d009      	beq.n	8001b38 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001b24:	490d      	ldr	r1, [pc, #52]	; (8001b5c <FLASH_SetErrorCode+0x70>)
 8001b26:	69ca      	ldr	r2, [r1, #28]
 8001b28:	f042 0204 	orr.w	r2, r2, #4
 8001b2c:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b2e:	490a      	ldr	r1, [pc, #40]	; (8001b58 <FLASH_SetErrorCode+0x6c>)
 8001b30:	69ca      	ldr	r2, [r1, #28]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001b38:	f240 1201 	movw	r2, #257	; 0x101
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d004      	beq.n	8001b4a <FLASH_SetErrorCode+0x5e>
 8001b40:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <FLASH_SetErrorCode+0x6c>)
 8001b42:	60d3      	str	r3, [r2, #12]
}  
 8001b44:	4770      	bx	lr
  uint32_t flags = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e7db      	b.n	8001b02 <FLASH_SetErrorCode+0x16>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001b4a:	4a03      	ldr	r2, [pc, #12]	; (8001b58 <FLASH_SetErrorCode+0x6c>)
 8001b4c:	69d3      	ldr	r3, [r2, #28]
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	61d3      	str	r3, [r2, #28]
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40022000 	.word	0x40022000
 8001b5c:	200009a8 	.word	0x200009a8

08001b60 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_FLASH_Unlock+0x2c>)
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b68:	d00d      	beq.n	8001b86 <HAL_FLASH_Unlock+0x26>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_FLASH_Unlock+0x2c>)
 8001b6c:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_FLASH_Unlock+0x30>)
 8001b6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001b70:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001b74:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b7c:	d001      	beq.n	8001b82 <HAL_FLASH_Unlock+0x22>
      status = HAL_ERROR;
 8001b7e:	2001      	movs	r0, #1
}
 8001b80:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8001b82:	2000      	movs	r0, #0
 8001b84:	4770      	bx	lr
 8001b86:	2000      	movs	r0, #0
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40022000 	.word	0x40022000
 8001b90:	45670123 	.word	0x45670123

08001b94 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001b94:	4a03      	ldr	r2, [pc, #12]	; (8001ba4 <HAL_FLASH_Lock+0x10>)
 8001b96:	6913      	ldr	r3, [r2, #16]
 8001b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9c:	6113      	str	r3, [r2, #16]
}
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40022000 	.word	0x40022000

08001ba8 <FLASH_WaitForLastOperation>:
{
 8001ba8:	b538      	push	{r3, r4, r5, lr}
 8001baa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff fb1a 	bl	80011e4 <HAL_GetTick>
 8001bb0:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <FLASH_WaitForLastOperation+0x68>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f013 0f01 	tst.w	r3, #1
 8001bba:	d00a      	beq.n	8001bd2 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8001bbc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001bc0:	d0f7      	beq.n	8001bb2 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001bc2:	b30c      	cbz	r4, 8001c08 <FLASH_WaitForLastOperation+0x60>
 8001bc4:	f7ff fb0e 	bl	80011e4 <HAL_GetTick>
 8001bc8:	1b40      	subs	r0, r0, r5
 8001bca:	42a0      	cmp	r0, r4
 8001bcc:	d9f1      	bls.n	8001bb2 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8001bce:	2003      	movs	r0, #3
 8001bd0:	e019      	b.n	8001c06 <FLASH_WaitForLastOperation+0x5e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <FLASH_WaitForLastOperation+0x68>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f013 0f20 	tst.w	r3, #32
 8001bda:	d002      	beq.n	8001be2 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <FLASH_WaitForLastOperation+0x68>)
 8001bde:	2220      	movs	r2, #32
 8001be0:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <FLASH_WaitForLastOperation+0x68>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f013 0f10 	tst.w	r3, #16
 8001bea:	d109      	bne.n	8001c00 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <FLASH_WaitForLastOperation+0x68>)
 8001bee:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001bf0:	f013 0f01 	tst.w	r3, #1
 8001bf4:	d104      	bne.n	8001c00 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <FLASH_WaitForLastOperation+0x68>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001bfa:	f013 0f04 	tst.w	r3, #4
 8001bfe:	d005      	beq.n	8001c0c <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 8001c00:	f7ff ff74 	bl	8001aec <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c04:	2001      	movs	r0, #1
}
 8001c06:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 8001c08:	2003      	movs	r0, #3
 8001c0a:	e7fc      	b.n	8001c06 <FLASH_WaitForLastOperation+0x5e>
  return HAL_OK;
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	e7fa      	b.n	8001c06 <FLASH_WaitForLastOperation+0x5e>
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_FLASH_Program>:
{
 8001c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8001c18:	4c23      	ldr	r4, [pc, #140]	; (8001ca8 <HAL_FLASH_Program+0x94>)
 8001c1a:	7e24      	ldrb	r4, [r4, #24]
 8001c1c:	2c01      	cmp	r4, #1
 8001c1e:	d041      	beq.n	8001ca4 <HAL_FLASH_Program+0x90>
 8001c20:	461e      	mov	r6, r3
 8001c22:	4690      	mov	r8, r2
 8001c24:	460f      	mov	r7, r1
 8001c26:	4604      	mov	r4, r0
 8001c28:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <HAL_FLASH_Program+0x94>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c32:	f7ff ffb9 	bl	8001ba8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001c36:	4603      	mov	r3, r0
 8001c38:	bb70      	cbnz	r0, 8001c98 <HAL_FLASH_Program+0x84>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001c3a:	2c01      	cmp	r4, #1
 8001c3c:	d029      	beq.n	8001c92 <HAL_FLASH_Program+0x7e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001c3e:	2c02      	cmp	r4, #2
 8001c40:	d024      	beq.n	8001c8c <HAL_FLASH_Program+0x78>
      nbiterations = 4U;
 8001c42:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8001c46:	2400      	movs	r4, #0
 8001c48:	454c      	cmp	r4, r9
 8001c4a:	d225      	bcs.n	8001c98 <HAL_FLASH_Program+0x84>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001c4c:	0121      	lsls	r1, r4, #4
 8001c4e:	f1c1 0220 	rsb	r2, r1, #32
 8001c52:	f1a1 0320 	sub.w	r3, r1, #32
 8001c56:	fa28 f101 	lsr.w	r1, r8, r1
 8001c5a:	fa06 f202 	lsl.w	r2, r6, r2
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	fa26 f303 	lsr.w	r3, r6, r3
 8001c64:	4319      	orrs	r1, r3
 8001c66:	b289      	uxth	r1, r1
 8001c68:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8001c6c:	f7ff ff30 	bl	8001ad0 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c74:	f7ff ff98 	bl	8001ba8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_FLASH_Program+0x98>)
 8001c7a:	691d      	ldr	r5, [r3, #16]
 8001c7c:	f025 0501 	bic.w	r5, r5, #1
 8001c80:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8001c82:	4603      	mov	r3, r0
 8001c84:	b940      	cbnz	r0, 8001c98 <HAL_FLASH_Program+0x84>
    for (index = 0U; index < nbiterations; index++)
 8001c86:	3401      	adds	r4, #1
 8001c88:	b2e4      	uxtb	r4, r4
 8001c8a:	e7dd      	b.n	8001c48 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 8001c8c:	f04f 0902 	mov.w	r9, #2
 8001c90:	e7d9      	b.n	8001c46 <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 8001c92:	f04f 0901 	mov.w	r9, #1
 8001c96:	e7d6      	b.n	8001c46 <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 8001c98:	4a03      	ldr	r2, [pc, #12]	; (8001ca8 <HAL_FLASH_Program+0x94>)
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	7611      	strb	r1, [r2, #24]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e7fa      	b.n	8001c9e <HAL_FLASH_Program+0x8a>
 8001ca8:	200009a8 	.word	0x200009a8
 8001cac:	40022000 	.word	0x40022000

08001cb0 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <FLASH_MassErase+0x1c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <FLASH_MassErase+0x20>)
 8001cb8:	691a      	ldr	r2, [r3, #16]
 8001cba:	f042 0204 	orr.w	r2, r2, #4
 8001cbe:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cc6:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	200009a8 	.word	0x200009a8
 8001cd0:	40022000 	.word	0x40022000

08001cd4 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <FLASH_PageErase+0x1c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <FLASH_PageErase+0x20>)
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	f042 0202 	orr.w	r2, r2, #2
 8001ce2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001ce4:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cec:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001cee:	4770      	bx	lr
 8001cf0:	200009a8 	.word	0x200009a8
 8001cf4:	40022000 	.word	0x40022000

08001cf8 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8001cf8:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_FLASHEx_Erase+0x9c>)
 8001cfa:	7e1b      	ldrb	r3, [r3, #24]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d046      	beq.n	8001d8e <HAL_FLASHEx_Erase+0x96>
{
 8001d00:	b570      	push	{r4, r5, r6, lr}
 8001d02:	460e      	mov	r6, r1
 8001d04:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8001d06:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_FLASHEx_Erase+0x9c>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d0c:	6803      	ldr	r3, [r0, #0]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d020      	beq.n	8001d54 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d16:	f7ff ff47 	bl	8001ba8 <FLASH_WaitForLastOperation>
 8001d1a:	bb90      	cbnz	r0, 8001d82 <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d20:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8001d22:	68a5      	ldr	r5, [r4, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d24:	2201      	movs	r2, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001d26:	68e1      	ldr	r1, [r4, #12]
 8001d28:	68a3      	ldr	r3, [r4, #8]
 8001d2a:	eb03 2381 	add.w	r3, r3, r1, lsl #10
        for(address = pEraseInit->PageAddress;
 8001d2e:	42ab      	cmp	r3, r5
 8001d30:	d928      	bls.n	8001d84 <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 8001d32:	4628      	mov	r0, r5
 8001d34:	f7ff ffce 	bl	8001cd4 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d3c:	f7ff ff34 	bl	8001ba8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001d40:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <HAL_FLASHEx_Erase+0xa0>)
 8001d42:	6913      	ldr	r3, [r2, #16]
 8001d44:	f023 0302 	bic.w	r3, r3, #2
 8001d48:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	b9b8      	cbnz	r0, 8001d7e <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 8001d4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d52:	e7e8      	b.n	8001d26 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d58:	f7ff ff26 	bl	8001ba8 <FLASH_WaitForLastOperation>
 8001d5c:	b108      	cbz	r0, 8001d62 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d5e:	2201      	movs	r2, #1
 8001d60:	e010      	b.n	8001d84 <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 8001d62:	2001      	movs	r0, #1
 8001d64:	f7ff ffa4 	bl	8001cb0 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d6c:	f7ff ff1c 	bl	8001ba8 <FLASH_WaitForLastOperation>
 8001d70:	4602      	mov	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001d72:	4909      	ldr	r1, [pc, #36]	; (8001d98 <HAL_FLASHEx_Erase+0xa0>)
 8001d74:	690b      	ldr	r3, [r1, #16]
 8001d76:	f023 0304 	bic.w	r3, r3, #4
 8001d7a:	610b      	str	r3, [r1, #16]
 8001d7c:	e002      	b.n	8001d84 <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 8001d7e:	6035      	str	r5, [r6, #0]
            break;
 8001d80:	e000      	b.n	8001d84 <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d82:	2201      	movs	r2, #1
  __HAL_UNLOCK(&pFlash);
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_FLASHEx_Erase+0x9c>)
 8001d86:	2100      	movs	r1, #0
 8001d88:	7619      	strb	r1, [r3, #24]
}
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8001d8e:	2202      	movs	r2, #2
}
 8001d90:	4610      	mov	r0, r2
 8001d92:	4770      	bx	lr
 8001d94:	200009a8 	.word	0x200009a8
 8001d98:	40022000 	.word	0x40022000

08001d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d9c:	b4f0      	push	{r4, r5, r6, r7}
 8001d9e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001da0:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8001da2:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da4:	e0a2      	b.n	8001eec <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001da6:	2d00      	cmp	r5, #0
 8001da8:	d05a      	beq.n	8001e60 <HAL_GPIO_Init+0xc4>
 8001daa:	2d01      	cmp	r5, #1
 8001dac:	d100      	bne.n	8001db0 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dae:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001db0:	2bff      	cmp	r3, #255	; 0xff
 8001db2:	d869      	bhi.n	8001e88 <HAL_GPIO_Init+0xec>
 8001db4:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001db6:	2bff      	cmp	r3, #255	; 0xff
 8001db8:	d869      	bhi.n	8001e8e <HAL_GPIO_Init+0xf2>
 8001dba:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dbc:	f8dc 4000 	ldr.w	r4, [ip]
 8001dc0:	270f      	movs	r7, #15
 8001dc2:	40af      	lsls	r7, r5
 8001dc4:	ea24 0407 	bic.w	r4, r4, r7
 8001dc8:	fa06 f505 	lsl.w	r5, r6, r5
 8001dcc:	432c      	orrs	r4, r5
 8001dce:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd2:	684c      	ldr	r4, [r1, #4]
 8001dd4:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001dd8:	f000 8087 	beq.w	8001eea <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ddc:	4c5f      	ldr	r4, [pc, #380]	; (8001f5c <HAL_GPIO_Init+0x1c0>)
 8001dde:	69a5      	ldr	r5, [r4, #24]
 8001de0:	f045 0501 	orr.w	r5, r5, #1
 8001de4:	61a5      	str	r5, [r4, #24]
 8001de6:	69a4      	ldr	r4, [r4, #24]
 8001de8:	f004 0401 	and.w	r4, r4, #1
 8001dec:	9401      	str	r4, [sp, #4]
 8001dee:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001df0:	0895      	lsrs	r5, r2, #2
 8001df2:	1caf      	adds	r7, r5, #2
 8001df4:	4c5a      	ldr	r4, [pc, #360]	; (8001f60 <HAL_GPIO_Init+0x1c4>)
 8001df6:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dfa:	f002 0703 	and.w	r7, r2, #3
 8001dfe:	00bf      	lsls	r7, r7, #2
 8001e00:	f04f 0c0f 	mov.w	ip, #15
 8001e04:	fa0c fc07 	lsl.w	ip, ip, r7
 8001e08:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e0c:	4c55      	ldr	r4, [pc, #340]	; (8001f64 <HAL_GPIO_Init+0x1c8>)
 8001e0e:	42a0      	cmp	r0, r4
 8001e10:	d043      	beq.n	8001e9a <HAL_GPIO_Init+0xfe>
 8001e12:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e16:	42a0      	cmp	r0, r4
 8001e18:	f000 8081 	beq.w	8001f1e <HAL_GPIO_Init+0x182>
 8001e1c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e20:	42a0      	cmp	r0, r4
 8001e22:	d07e      	beq.n	8001f22 <HAL_GPIO_Init+0x186>
 8001e24:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e28:	42a0      	cmp	r0, r4
 8001e2a:	d034      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001e2c:	2404      	movs	r4, #4
 8001e2e:	e035      	b.n	8001e9c <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 8001e30:	4f4d      	ldr	r7, [pc, #308]	; (8001f68 <HAL_GPIO_Init+0x1cc>)
 8001e32:	42bd      	cmp	r5, r7
 8001e34:	d014      	beq.n	8001e60 <HAL_GPIO_Init+0xc4>
 8001e36:	d90b      	bls.n	8001e50 <HAL_GPIO_Init+0xb4>
 8001e38:	4f4c      	ldr	r7, [pc, #304]	; (8001f6c <HAL_GPIO_Init+0x1d0>)
 8001e3a:	42bd      	cmp	r5, r7
 8001e3c:	d010      	beq.n	8001e60 <HAL_GPIO_Init+0xc4>
 8001e3e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001e42:	42bd      	cmp	r5, r7
 8001e44:	d00c      	beq.n	8001e60 <HAL_GPIO_Init+0xc4>
 8001e46:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001e4a:	42bd      	cmp	r5, r7
 8001e4c:	d1b0      	bne.n	8001db0 <HAL_GPIO_Init+0x14>
 8001e4e:	e007      	b.n	8001e60 <HAL_GPIO_Init+0xc4>
 8001e50:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001e54:	42bd      	cmp	r5, r7
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0xc4>
 8001e58:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001e5c:	42bd      	cmp	r5, r7
 8001e5e:	d1a7      	bne.n	8001db0 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e60:	688d      	ldr	r5, [r1, #8]
 8001e62:	b17d      	cbz	r5, 8001e84 <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e64:	2d01      	cmp	r5, #1
 8001e66:	d008      	beq.n	8001e7a <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 8001e68:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e6a:	2608      	movs	r6, #8
 8001e6c:	e7a0      	b.n	8001db0 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e6e:	68ce      	ldr	r6, [r1, #12]
 8001e70:	3608      	adds	r6, #8
          break;
 8001e72:	e79d      	b.n	8001db0 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e74:	68ce      	ldr	r6, [r1, #12]
 8001e76:	360c      	adds	r6, #12
          break;
 8001e78:	e79a      	b.n	8001db0 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8001e7a:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e7c:	2608      	movs	r6, #8
 8001e7e:	e797      	b.n	8001db0 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e80:	2600      	movs	r6, #0
 8001e82:	e795      	b.n	8001db0 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e84:	2604      	movs	r6, #4
 8001e86:	e793      	b.n	8001db0 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e88:	f100 0c04 	add.w	ip, r0, #4
 8001e8c:	e793      	b.n	8001db6 <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e8e:	f1a2 0508 	sub.w	r5, r2, #8
 8001e92:	00ad      	lsls	r5, r5, #2
 8001e94:	e792      	b.n	8001dbc <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e96:	2403      	movs	r4, #3
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x100>
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	40bc      	lsls	r4, r7
 8001e9e:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8001ea2:	3502      	adds	r5, #2
 8001ea4:	4f2e      	ldr	r7, [pc, #184]	; (8001f60 <HAL_GPIO_Init+0x1c4>)
 8001ea6:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eaa:	684c      	ldr	r4, [r1, #4]
 8001eac:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8001eb0:	d039      	beq.n	8001f26 <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eb2:	4d2f      	ldr	r5, [pc, #188]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001eb4:	682c      	ldr	r4, [r5, #0]
 8001eb6:	431c      	orrs	r4, r3
 8001eb8:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eba:	684c      	ldr	r4, [r1, #4]
 8001ebc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8001ec0:	d037      	beq.n	8001f32 <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ec2:	4d2b      	ldr	r5, [pc, #172]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001ec4:	686c      	ldr	r4, [r5, #4]
 8001ec6:	431c      	orrs	r4, r3
 8001ec8:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eca:	684c      	ldr	r4, [r1, #4]
 8001ecc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 8001ed0:	d035      	beq.n	8001f3e <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ed2:	4d27      	ldr	r5, [pc, #156]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001ed4:	68ac      	ldr	r4, [r5, #8]
 8001ed6:	431c      	orrs	r4, r3
 8001ed8:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eda:	684c      	ldr	r4, [r1, #4]
 8001edc:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 8001ee0:	d033      	beq.n	8001f4a <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ee2:	4d23      	ldr	r5, [pc, #140]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001ee4:	68ec      	ldr	r4, [r5, #12]
 8001ee6:	4323      	orrs	r3, r4
 8001ee8:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8001eea:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eec:	680b      	ldr	r3, [r1, #0]
 8001eee:	fa33 f402 	lsrs.w	r4, r3, r2
 8001ef2:	d030      	beq.n	8001f56 <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 8001ef4:	2401      	movs	r4, #1
 8001ef6:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef8:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 8001efa:	429c      	cmp	r4, r3
 8001efc:	d1f5      	bne.n	8001eea <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 8001efe:	684d      	ldr	r5, [r1, #4]
 8001f00:	2d12      	cmp	r5, #18
 8001f02:	d0b7      	beq.n	8001e74 <HAL_GPIO_Init+0xd8>
 8001f04:	d894      	bhi.n	8001e30 <HAL_GPIO_Init+0x94>
 8001f06:	2d02      	cmp	r5, #2
 8001f08:	d0b1      	beq.n	8001e6e <HAL_GPIO_Init+0xd2>
 8001f0a:	f67f af4c 	bls.w	8001da6 <HAL_GPIO_Init+0xa>
 8001f0e:	2d03      	cmp	r5, #3
 8001f10:	d0b6      	beq.n	8001e80 <HAL_GPIO_Init+0xe4>
 8001f12:	2d11      	cmp	r5, #17
 8001f14:	f47f af4c 	bne.w	8001db0 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f18:	68ce      	ldr	r6, [r1, #12]
 8001f1a:	3604      	adds	r6, #4
          break;
 8001f1c:	e748      	b.n	8001db0 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f1e:	2401      	movs	r4, #1
 8001f20:	e7bc      	b.n	8001e9c <HAL_GPIO_Init+0x100>
 8001f22:	2402      	movs	r4, #2
 8001f24:	e7ba      	b.n	8001e9c <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f26:	4d12      	ldr	r5, [pc, #72]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001f28:	682c      	ldr	r4, [r5, #0]
 8001f2a:	ea24 0403 	bic.w	r4, r4, r3
 8001f2e:	602c      	str	r4, [r5, #0]
 8001f30:	e7c3      	b.n	8001eba <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f32:	4d0f      	ldr	r5, [pc, #60]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001f34:	686c      	ldr	r4, [r5, #4]
 8001f36:	ea24 0403 	bic.w	r4, r4, r3
 8001f3a:	606c      	str	r4, [r5, #4]
 8001f3c:	e7c5      	b.n	8001eca <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f3e:	4d0c      	ldr	r5, [pc, #48]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001f40:	68ac      	ldr	r4, [r5, #8]
 8001f42:	ea24 0403 	bic.w	r4, r4, r3
 8001f46:	60ac      	str	r4, [r5, #8]
 8001f48:	e7c7      	b.n	8001eda <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f4a:	4d09      	ldr	r5, [pc, #36]	; (8001f70 <HAL_GPIO_Init+0x1d4>)
 8001f4c:	68ec      	ldr	r4, [r5, #12]
 8001f4e:	ea24 0303 	bic.w	r3, r4, r3
 8001f52:	60eb      	str	r3, [r5, #12]
 8001f54:	e7c9      	b.n	8001eea <HAL_GPIO_Init+0x14e>
  }
}
 8001f56:	b002      	add	sp, #8
 8001f58:	bcf0      	pop	{r4, r5, r6, r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010000 	.word	0x40010000
 8001f64:	40010800 	.word	0x40010800
 8001f68:	10210000 	.word	0x10210000
 8001f6c:	10310000 	.word	0x10310000
 8001f70:	40010400 	.word	0x40010400

08001f74 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f74:	6883      	ldr	r3, [r0, #8]
 8001f76:	4219      	tst	r1, r3
 8001f78:	d101      	bne.n	8001f7e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f7a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001f7c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8001f7e:	2001      	movs	r0, #1
 8001f80:	4770      	bx	lr

08001f82 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f82:	b912      	cbnz	r2, 8001f8a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f84:	0409      	lsls	r1, r1, #16
 8001f86:	6101      	str	r1, [r0, #16]
  }
}
 8001f88:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001f8a:	6101      	str	r1, [r0, #16]
 8001f8c:	4770      	bx	lr

08001f8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f90:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d073      	beq.n	800207e <HAL_PCD_Init+0xf0>
 8001f96:	4604      	mov	r4, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f98:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8001f9c:	b1d3      	cbz	r3, 8001fd4 <HAL_PCD_Init+0x46>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fa4:	6820      	ldr	r0, [r4, #0]
 8001fa6:	f001 ff8d 	bl	8003ec4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001faa:	4625      	mov	r5, r4
 8001fac:	f855 7b10 	ldr.w	r7, [r5], #16
 8001fb0:	466e      	mov	r6, sp
 8001fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001fb6:	682b      	ldr	r3, [r5, #0]
 8001fb8:	6033      	str	r3, [r6, #0]
 8001fba:	1d23      	adds	r3, r4, #4
 8001fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fbe:	4638      	mov	r0, r7
 8001fc0:	f001 ff71 	bl	8003ea6 <USB_CoreInit>
 8001fc4:	b158      	cbz	r0, 8001fde <HAL_PCD_Init+0x50>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 8001fcc:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001fce:	4628      	mov	r0, r5
 8001fd0:	b007      	add	sp, #28
 8001fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001fd4:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
    HAL_PCD_MspInit(hpcd);
 8001fd8:	f006 fa18 	bl	800840c <HAL_PCD_MspInit>
 8001fdc:	e7df      	b.n	8001f9e <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fde:	2100      	movs	r1, #0
 8001fe0:	6820      	ldr	r0, [r4, #0]
 8001fe2:	f001 ff79 	bl	8003ed8 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e011      	b.n	800200e <HAL_PCD_Init+0x80>
    hpcd->IN_ep[i].is_in = 1U;
 8001fea:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8001fee:	2101      	movs	r1, #1
 8001ff0:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001ff4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ff8:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8002000:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002002:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8002004:	1c9a      	adds	r2, r3, #2
 8002006:	0152      	lsls	r2, r2, #5
 8002008:	50a1      	str	r1, [r4, r2]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200a:	3301      	adds	r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	6860      	ldr	r0, [r4, #4]
 8002010:	4283      	cmp	r3, r0
 8002012:	d3ea      	bcc.n	8001fea <HAL_PCD_Init+0x5c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002014:	2300      	movs	r3, #0
 8002016:	e012      	b.n	800203e <HAL_PCD_Init+0xb0>
    hpcd->OUT_ep[i].is_in = 0U;
 8002018:	eb04 1143 	add.w	r1, r4, r3, lsl #5
 800201c:	2200      	movs	r2, #0
 800201e:	f881 2129 	strb.w	r2, [r1, #297]	; 0x129
    hpcd->OUT_ep[i].num = i;
 8002022:	f881 3128 	strb.w	r3, [r1, #296]	; 0x128
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002026:	f881 212b 	strb.w	r2, [r1, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800202a:	f8c1 2138 	str.w	r2, [r1, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800202e:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002032:	f103 010a 	add.w	r1, r3, #10
 8002036:	0149      	lsls	r1, r1, #5
 8002038:	5062      	str	r2, [r4, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203a:	3301      	adds	r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	4298      	cmp	r0, r3
 8002040:	d8ea      	bhi.n	8002018 <HAL_PCD_Init+0x8a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002042:	4625      	mov	r5, r4
 8002044:	f855 7b10 	ldr.w	r7, [r5], #16
 8002048:	466e      	mov	r6, sp
 800204a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800204c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800204e:	682b      	ldr	r3, [r5, #0]
 8002050:	6033      	str	r3, [r6, #0]
 8002052:	1d23      	adds	r3, r4, #4
 8002054:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002056:	4638      	mov	r0, r7
 8002058:	f001 ff40 	bl	8003edc <USB_DevInit>
 800205c:	4605      	mov	r5, r0
 800205e:	b120      	cbz	r0, 800206a <HAL_PCD_Init+0xdc>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002060:	2302      	movs	r3, #2
 8002062:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 8002066:	2501      	movs	r5, #1
 8002068:	e7b1      	b.n	8001fce <HAL_PCD_Init+0x40>
  hpcd->USB_Address = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002070:	2301      	movs	r3, #1
 8002072:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8002076:	6820      	ldr	r0, [r4, #0]
 8002078:	f002 fa62 	bl	8004540 <USB_DevDisconnect>
  return HAL_OK;
 800207c:	e7a7      	b.n	8001fce <HAL_PCD_Init+0x40>
    return HAL_ERROR;
 800207e:	2501      	movs	r5, #1
 8002080:	e7a5      	b.n	8001fce <HAL_PCD_Init+0x40>

08002082 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8002082:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8002086:	2b01      	cmp	r3, #1
 8002088:	d010      	beq.n	80020ac <HAL_PCD_Start+0x2a>
{
 800208a:	b510      	push	{r4, lr}
 800208c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800208e:	2101      	movs	r1, #1
 8002090:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002094:	f006 fac5 	bl	8008622 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8002098:	6820      	ldr	r0, [r4, #0]
 800209a:	f002 fa4f 	bl	800453c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800209e:	6820      	ldr	r0, [r4, #0]
 80020a0:	f001 ff08 	bl	8003eb4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 80020aa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80020ac:	2002      	movs	r0, #2
}
 80020ae:	4770      	bx	lr

080020b0 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80020b0:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d00d      	beq.n	80020d4 <HAL_PCD_SetAddress+0x24>
{
 80020b8:	b510      	push	{r4, lr}
 80020ba:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80020bc:	2301      	movs	r3, #1
 80020be:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 80020c2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020c6:	6800      	ldr	r0, [r0, #0]
 80020c8:	f002 fa32 	bl	8004530 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 80020d2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80020d4:	2002      	movs	r0, #2
}
 80020d6:	4770      	bx	lr

080020d8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80020d8:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020da:	f011 0f80 	tst.w	r1, #128	; 0x80
 80020de:	d123      	bne.n	8002128 <HAL_PCD_EP_Open+0x50>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020e0:	f001 0507 	and.w	r5, r1, #7
 80020e4:	016d      	lsls	r5, r5, #5
 80020e6:	f505 7494 	add.w	r4, r5, #296	; 0x128
 80020ea:	4404      	add	r4, r0
    ep->is_in = 0U;
 80020ec:	4405      	add	r5, r0
 80020ee:	2600      	movs	r6, #0
 80020f0:	f885 6129 	strb.w	r6, [r5, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020f4:	f001 0107 	and.w	r1, r1, #7
 80020f8:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 80020fa:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 80020fc:	70e3      	strb	r3, [r4, #3]

  if (ep->is_in != 0U)
 80020fe:	7862      	ldrb	r2, [r4, #1]
 8002100:	b102      	cbz	r2, 8002104 <HAL_PCD_EP_Open+0x2c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002102:	81e1      	strh	r1, [r4, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002104:	2b02      	cmp	r3, #2
 8002106:	d01a      	beq.n	800213e <HAL_PCD_EP_Open+0x66>
  {
    ep->data_pid_start = 0U;
  }

  __HAL_LOCK(hpcd);
 8002108:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 800210c:	2b01      	cmp	r3, #1
 800210e:	d019      	beq.n	8002144 <HAL_PCD_EP_Open+0x6c>
 8002110:	4605      	mov	r5, r0
 8002112:	2301      	movs	r3, #1
 8002114:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002118:	4621      	mov	r1, r4
 800211a:	6800      	ldr	r0, [r0, #0]
 800211c:	f001 fef4 	bl	8003f08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002120:	2000      	movs	r0, #0
 8002122:	f885 0228 	strb.w	r0, [r5, #552]	; 0x228

  return ret;
}
 8002126:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002128:	f001 0507 	and.w	r5, r1, #7
 800212c:	016d      	lsls	r5, r5, #5
 800212e:	f105 0428 	add.w	r4, r5, #40	; 0x28
 8002132:	4404      	add	r4, r0
    ep->is_in = 1U;
 8002134:	4405      	add	r5, r0
 8002136:	2601      	movs	r6, #1
 8002138:	f885 6029 	strb.w	r6, [r5, #41]	; 0x29
 800213c:	e7da      	b.n	80020f4 <HAL_PCD_EP_Open+0x1c>
    ep->data_pid_start = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	7123      	strb	r3, [r4, #4]
 8002142:	e7e1      	b.n	8002108 <HAL_PCD_EP_Open+0x30>
  __HAL_LOCK(hpcd);
 8002144:	2002      	movs	r0, #2
 8002146:	e7ee      	b.n	8002126 <HAL_PCD_EP_Open+0x4e>

08002148 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002148:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800214a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800214e:	d11c      	bne.n	800218a <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002150:	f001 0307 	and.w	r3, r1, #7
 8002154:	015b      	lsls	r3, r3, #5
 8002156:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800215a:	4402      	add	r2, r0
    ep->is_in = 0U;
 800215c:	4403      	add	r3, r0
 800215e:	2400      	movs	r4, #0
 8002160:	f883 4129 	strb.w	r4, [r3, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002164:	f001 0307 	and.w	r3, r1, #7
 8002168:	7013      	strb	r3, [r2, #0]

  __HAL_LOCK(hpcd);
 800216a:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 800216e:	2b01      	cmp	r3, #1
 8002170:	d016      	beq.n	80021a0 <HAL_PCD_EP_Close+0x58>
 8002172:	4604      	mov	r4, r0
 8002174:	2301      	movs	r3, #1
 8002176:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800217a:	4611      	mov	r1, r2
 800217c:	6800      	ldr	r0, [r0, #0]
 800217e:	f002 f877 	bl	8004270 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002182:	2000      	movs	r0, #0
 8002184:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8002188:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218a:	f001 0307 	and.w	r3, r1, #7
 800218e:	015b      	lsls	r3, r3, #5
 8002190:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002194:	4402      	add	r2, r0
    ep->is_in = 1U;
 8002196:	4403      	add	r3, r0
 8002198:	2401      	movs	r4, #1
 800219a:	f883 4029 	strb.w	r4, [r3, #41]	; 0x29
 800219e:	e7e1      	b.n	8002164 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 80021a0:	2002      	movs	r0, #2
 80021a2:	e7f1      	b.n	8002188 <HAL_PCD_EP_Close+0x40>

080021a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	f001 0507 	and.w	r5, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021aa:	016c      	lsls	r4, r5, #5
 80021ac:	f504 7194 	add.w	r1, r4, #296	; 0x128
 80021b0:	4401      	add	r1, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021b2:	4404      	add	r4, r0
 80021b4:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 80021b8:	f105 020a 	add.w	r2, r5, #10
 80021bc:	0152      	lsls	r2, r2, #5
 80021be:	1886      	adds	r6, r0, r2
 80021c0:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	6073      	str	r3, [r6, #4]
  ep->is_in = 0U;
 80021c6:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ca:	f884 5128 	strb.w	r5, [r4, #296]	; 0x128

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021ce:	b125      	cbz	r5, 80021da <HAL_PCD_EP_Receive+0x36>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021d0:	6800      	ldr	r0, [r0, #0]
 80021d2:	f002 f9d1 	bl	8004578 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80021d6:	2000      	movs	r0, #0
 80021d8:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021da:	6800      	ldr	r0, [r0, #0]
 80021dc:	f002 f9cc 	bl	8004578 <USB_EPStartXfer>
 80021e0:	e7f9      	b.n	80021d6 <HAL_PCD_EP_Receive+0x32>

080021e2 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021e2:	f001 0107 	and.w	r1, r1, #7
 80021e6:	310a      	adds	r1, #10
 80021e8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80021ec:	6848      	ldr	r0, [r1, #4]
 80021ee:	4770      	bx	lr

080021f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	f001 0507 	and.w	r5, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f6:	016c      	lsls	r4, r5, #5
 80021f8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80021fc:	4401      	add	r1, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021fe:	4404      	add	r4, r0
 8002200:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 8002202:	1caa      	adds	r2, r5, #2
 8002204:	0152      	lsls	r2, r2, #5
 8002206:	1886      	adds	r6, r0, r2
 8002208:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	6073      	str	r3, [r6, #4]
  ep->is_in = 1U;
 800220e:	2301      	movs	r3, #1
 8002210:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8002214:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002218:	b125      	cbz	r5, 8002224 <HAL_PCD_EP_Transmit+0x34>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800221a:	6800      	ldr	r0, [r0, #0]
 800221c:	f002 f9ac 	bl	8004578 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8002220:	2000      	movs	r0, #0
 8002222:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002224:	6800      	ldr	r0, [r0, #0]
 8002226:	f002 f9a7 	bl	8004578 <USB_EPStartXfer>
 800222a:	e7f9      	b.n	8002220 <HAL_PCD_EP_Transmit+0x30>

0800222c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222e:	4604      	mov	r4, r0
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002230:	6820      	ldr	r0, [r4, #0]
 8002232:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002236:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800223a:	f000 81ad 	beq.w	8002598 <PCD_EP_ISR_Handler+0x36c>
  {
    wIstr = hpcd->Instance->ISTR;
 800223e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002242:	b29b      	uxth	r3, r3
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8002244:	f013 050f 	ands.w	r5, r3, #15
 8002248:	f040 80cd 	bne.w	80023e6 <PCD_EP_ISR_Handler+0x1ba>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800224c:	f013 0f10 	tst.w	r3, #16
 8002250:	d058      	beq.n	8002304 <PCD_EP_ISR_Handler+0xd8>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002252:	8803      	ldrh	r3, [r0, #0]
 8002254:	b29b      	uxth	r3, r3

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002256:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800225a:	f040 8089 	bne.w	8002370 <PCD_EP_ISR_Handler+0x144>
#else
          HAL_PCD_SetupStageCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800225e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002262:	d0e5      	beq.n	8002230 <PCD_EP_ISR_Handler+0x4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002264:	8803      	ldrh	r3, [r0, #0]
 8002266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226a:	051b      	lsls	r3, r3, #20
 800226c:	0d1b      	lsrs	r3, r3, #20
 800226e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002272:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002274:	6820      	ldr	r0, [r4, #0]
 8002276:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800227a:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 800227e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002282:	3306      	adds	r3, #6
 8002284:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002288:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800228c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002290:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002294:	b18b      	cbz	r3, 80022ba <PCD_EP_ISR_Handler+0x8e>
 8002296:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800229a:	b171      	cbz	r1, 80022ba <PCD_EP_ISR_Handler+0x8e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800229c:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80022a0:	f002 fafa 	bl	8004898 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 80022a4:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 80022a8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 80022ac:	4413      	add	r3, r2
 80022ae:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022b2:	2100      	movs	r1, #0
 80022b4:	4620      	mov	r0, r4
 80022b6:	f006 f8d1 	bl	800845c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80022c0:	4413      	add	r3, r2
 80022c2:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 80022c6:	2a00      	cmp	r2, #0
 80022c8:	d174      	bne.n	80023b4 <PCD_EP_ISR_Handler+0x188>
 80022ca:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80022ce:	b292      	uxth	r2, r2
 80022d0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80022d4:	b292      	uxth	r2, r2
 80022d6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80022da:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80022de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022e2:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80022e6:	6822      	ldr	r2, [r4, #0]
 80022e8:	8813      	ldrh	r3, [r2, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80022f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002300:	8013      	strh	r3, [r2, #0]
 8002302:	e795      	b.n	8002230 <PCD_EP_ISR_Handler+0x4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002304:	8803      	ldrh	r3, [r0, #0]
 8002306:	b29b      	uxth	r3, r3
 8002308:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800230c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002318:	b29b      	uxth	r3, r3
 800231a:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800231c:	6822      	ldr	r2, [r4, #0]
 800231e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002322:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8002326:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800232a:	3302      	adds	r3, #2
 800232c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002330:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002338:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800233a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800233c:	4413      	add	r3, r2
 800233e:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002340:	2100      	movs	r1, #0
 8002342:	4620      	mov	r0, r4
 8002344:	f006 f894 	bl	8008470 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002348:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800234c:	2b00      	cmp	r3, #0
 800234e:	f43f af6f 	beq.w	8002230 <PCD_EP_ISR_Handler+0x4>
 8002352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002354:	2b00      	cmp	r3, #0
 8002356:	f47f af6b 	bne.w	8002230 <PCD_EP_ISR_Handler+0x4>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800235a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800235e:	6822      	ldr	r2, [r4, #0]
 8002360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002364:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800236e:	e75f      	b.n	8002230 <PCD_EP_ISR_Handler+0x4>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002370:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002374:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8002378:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800237c:	3306      	adds	r3, #6
 800237e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002382:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800238a:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800238e:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8002392:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8002396:	f002 fa7f 	bl	8004898 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800239a:	6822      	ldr	r2, [r4, #0]
 800239c:	8813      	ldrh	r3, [r2, #0]
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a2:	051b      	lsls	r3, r3, #20
 80023a4:	0d1b      	lsrs	r3, r3, #20
 80023a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023aa:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80023ac:	4620      	mov	r0, r4
 80023ae:	f006 f84d 	bl	800844c <HAL_PCD_SetupStageCallback>
 80023b2:	e73d      	b.n	8002230 <PCD_EP_ISR_Handler+0x4>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80023b4:	2a3e      	cmp	r2, #62	; 0x3e
 80023b6:	d809      	bhi.n	80023cc <PCD_EP_ISR_Handler+0x1a0>
 80023b8:	0851      	lsrs	r1, r2, #1
 80023ba:	f012 0f01 	tst.w	r2, #1
 80023be:	d000      	beq.n	80023c2 <PCD_EP_ISR_Handler+0x196>
 80023c0:	3101      	adds	r1, #1
 80023c2:	0289      	lsls	r1, r1, #10
 80023c4:	b289      	uxth	r1, r1
 80023c6:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 80023ca:	e78c      	b.n	80022e6 <PCD_EP_ISR_Handler+0xba>
 80023cc:	0951      	lsrs	r1, r2, #5
 80023ce:	f012 0f1f 	tst.w	r2, #31
 80023d2:	d100      	bne.n	80023d6 <PCD_EP_ISR_Handler+0x1aa>
 80023d4:	3901      	subs	r1, #1
 80023d6:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 80023da:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80023de:	b292      	uxth	r2, r2
 80023e0:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80023e4:	e77f      	b.n	80022e6 <PCD_EP_ISR_Handler+0xba>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023e6:	f830 6025 	ldrh.w	r6, [r0, r5, lsl #2]
 80023ea:	b2b6      	uxth	r6, r6
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023ec:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80023f0:	d133      	bne.n	800245a <PCD_EP_ISR_Handler+0x22e>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023f2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80023f6:	f43f af1b 	beq.w	8002230 <PCD_EP_ISR_Handler+0x4>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023fa:	6822      	ldr	r2, [r4, #0]
 80023fc:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8002400:	b29b      	uxth	r3, r3
 8002402:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800240e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002412:	b29b      	uxth	r3, r3
 8002414:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002418:	6822      	ldr	r2, [r4, #0]
 800241a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800241e:	eb04 1045 	add.w	r0, r4, r5, lsl #5
 8002422:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8002426:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800242a:	3302      	adds	r3, #2
 800242c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002430:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8002434:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002438:	1cab      	adds	r3, r5, #2
 800243a:	015b      	lsls	r3, r3, #5
 800243c:	18e1      	adds	r1, r4, r3
 800243e:	604a      	str	r2, [r1, #4]
        ep->xfer_buff += ep->xfer_count;
 8002440:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002442:	440a      	add	r2, r1
 8002444:	63c2      	str	r2, [r0, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002446:	58e3      	ldr	r3, [r4, r3]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 809d 	bne.w	8002588 <PCD_EP_ISR_Handler+0x35c>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800244e:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8002452:	4620      	mov	r0, r4
 8002454:	f006 f80c 	bl	8008470 <HAL_PCD_DataInStageCallback>
 8002458:	e6ea      	b.n	8002230 <PCD_EP_ISR_Handler+0x4>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800245a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800245e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002462:	051b      	lsls	r3, r3, #20
 8002464:	0d1b      	lsrs	r3, r3, #20
 8002466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800246a:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800246e:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8002472:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8002476:	b9d3      	cbnz	r3, 80024ae <PCD_EP_ISR_Handler+0x282>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002478:	6820      	ldr	r0, [r4, #0]
 800247a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800247e:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8002482:	f892 2128 	ldrb.w	r2, [r2, #296]	; 0x128
 8002486:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800248a:	3306      	adds	r3, #6
 800248c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002490:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8002494:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8002498:	b38f      	cbz	r7, 80024fe <PCD_EP_ISR_Handler+0x2d2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800249a:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 800249e:	463b      	mov	r3, r7
 80024a0:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 80024a4:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80024a8:	f002 f9f6 	bl	8004898 <USB_ReadPMA>
 80024ac:	e027      	b.n	80024fe <PCD_EP_ISR_Handler+0x2d2>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024ae:	6820      	ldr	r0, [r4, #0]
 80024b0:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80024b4:	f893 2128 	ldrb.w	r2, [r3, #296]	; 0x128
 80024b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024bc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80024c0:	d043      	beq.n	800254a <PCD_EP_ISR_Handler+0x31e>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024c2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80024c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80024ca:	3302      	adds	r3, #2
 80024cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80024d0:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 80024d4:	f3c7 0709 	ubfx	r7, r7, #0, #10
            if (count != 0U)
 80024d8:	bb6f      	cbnz	r7, 8002536 <PCD_EP_ISR_Handler+0x30a>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024da:	6822      	ldr	r2, [r4, #0]
 80024dc:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80024e0:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 80024e4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024fa:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count += count;
 80024fe:	f105 030a 	add.w	r3, r5, #10
 8002502:	015b      	lsls	r3, r3, #5
 8002504:	18e1      	adds	r1, r4, r3
 8002506:	684a      	ldr	r2, [r1, #4]
 8002508:	443a      	add	r2, r7
 800250a:	604a      	str	r2, [r1, #4]
        ep->xfer_buff += count;
 800250c:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8002510:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
 8002514:	443a      	add	r2, r7
 8002516:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800251a:	58e3      	ldr	r3, [r4, r3]
 800251c:	b11b      	cbz	r3, 8002526 <PCD_EP_ISR_Handler+0x2fa>
 800251e:	f8d1 1138 	ldr.w	r1, [r1, #312]	; 0x138
 8002522:	428f      	cmp	r7, r1
 8002524:	d228      	bcs.n	8002578 <PCD_EP_ISR_Handler+0x34c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002526:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 800252a:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 800252e:	4620      	mov	r0, r4
 8002530:	f005 ff94 	bl	800845c <HAL_PCD_DataOutStageCallback>
 8002534:	e75d      	b.n	80023f2 <PCD_EP_ISR_Handler+0x1c6>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002536:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 800253a:	463b      	mov	r3, r7
 800253c:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
 8002540:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8002544:	f002 f9a8 	bl	8004898 <USB_ReadPMA>
 8002548:	e7c7      	b.n	80024da <PCD_EP_ISR_Handler+0x2ae>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800254a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800254e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002552:	3306      	adds	r3, #6
 8002554:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002558:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 800255c:	f3c7 0709 	ubfx	r7, r7, #0, #10
            if (count != 0U)
 8002560:	2f00      	cmp	r7, #0
 8002562:	d0ba      	beq.n	80024da <PCD_EP_ISR_Handler+0x2ae>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002564:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8002568:	463b      	mov	r3, r7
 800256a:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 800256e:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8002572:	f002 f991 	bl	8004898 <USB_ReadPMA>
 8002576:	e7b0      	b.n	80024da <PCD_EP_ISR_Handler+0x2ae>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002578:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 800257c:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8002580:	4620      	mov	r0, r4
 8002582:	f7ff fe0f 	bl	80021a4 <HAL_PCD_EP_Receive>
 8002586:	e734      	b.n	80023f2 <PCD_EP_ISR_Handler+0x1c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002588:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 800258c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002590:	4620      	mov	r0, r4
 8002592:	f7ff fe2d 	bl	80021f0 <HAL_PCD_EP_Transmit>
 8002596:	e64b      	b.n	8002230 <PCD_EP_ISR_Handler+0x4>
        }
      }
    }
  }
  return HAL_OK;
}
 8002598:	2000      	movs	r0, #0
 800259a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800259c <HAL_PCD_IRQHandler>:
{
 800259c:	b510      	push	{r4, lr}
 800259e:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80025a0:	6800      	ldr	r0, [r0, #0]
 80025a2:	f001 ffcf 	bl	8004544 <USB_ReadInterrupts>
 80025a6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80025aa:	d145      	bne.n	8002638 <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80025ac:	6820      	ldr	r0, [r4, #0]
 80025ae:	f001 ffc9 	bl	8004544 <USB_ReadInterrupts>
 80025b2:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80025b6:	d143      	bne.n	8002640 <HAL_PCD_IRQHandler+0xa4>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80025b8:	6820      	ldr	r0, [r4, #0]
 80025ba:	f001 ffc3 	bl	8004544 <USB_ReadInterrupts>
 80025be:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80025c2:	d008      	beq.n	80025d6 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80025c4:	6822      	ldr	r2, [r4, #0]
 80025c6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80025d6:	6820      	ldr	r0, [r4, #0]
 80025d8:	f001 ffb4 	bl	8004544 <USB_ReadInterrupts>
 80025dc:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80025e0:	d008      	beq.n	80025f4 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80025e2:	6822      	ldr	r2, [r4, #0]
 80025e4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80025f4:	6820      	ldr	r0, [r4, #0]
 80025f6:	f001 ffa5 	bl	8004544 <USB_ReadInterrupts>
 80025fa:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80025fe:	d130      	bne.n	8002662 <HAL_PCD_IRQHandler+0xc6>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002600:	6820      	ldr	r0, [r4, #0]
 8002602:	f001 ff9f 	bl	8004544 <USB_ReadInterrupts>
 8002606:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800260a:	d149      	bne.n	80026a0 <HAL_PCD_IRQHandler+0x104>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800260c:	6820      	ldr	r0, [r4, #0]
 800260e:	f001 ff99 	bl	8004544 <USB_ReadInterrupts>
 8002612:	f410 7f00 	tst.w	r0, #512	; 0x200
 8002616:	d16d      	bne.n	80026f4 <HAL_PCD_IRQHandler+0x158>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002618:	6820      	ldr	r0, [r4, #0]
 800261a:	f001 ff93 	bl	8004544 <USB_ReadInterrupts>
 800261e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002622:	d008      	beq.n	8002636 <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800262a:	b29b      	uxth	r3, r3
 800262c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002630:	b29b      	uxth	r3, r3
 8002632:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8002636:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 8002638:	4620      	mov	r0, r4
 800263a:	f7ff fdf7 	bl	800222c <PCD_EP_ISR_Handler>
 800263e:	e7b5      	b.n	80025ac <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002640:	6822      	ldr	r2, [r4, #0]
 8002642:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002646:	b29b      	uxth	r3, r3
 8002648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800264c:	b29b      	uxth	r3, r3
 800264e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002652:	4620      	mov	r0, r4
 8002654:	f005 ff1b 	bl	800848e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002658:	2100      	movs	r1, #0
 800265a:	4620      	mov	r0, r4
 800265c:	f7ff fd28 	bl	80020b0 <HAL_PCD_SetAddress>
 8002660:	e7aa      	b.n	80025b8 <HAL_PCD_IRQHandler+0x1c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002662:	6822      	ldr	r2, [r4, #0]
 8002664:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002668:	b29b      	uxth	r3, r3
 800266a:	f023 0304 	bic.w	r3, r3, #4
 800266e:	b29b      	uxth	r3, r3
 8002670:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002674:	6822      	ldr	r2, [r4, #0]
 8002676:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800267a:	b29b      	uxth	r3, r3
 800267c:	f023 0308 	bic.w	r3, r3, #8
 8002680:	b29b      	uxth	r3, r3
 8002682:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8002686:	4620      	mov	r0, r4
 8002688:	f005 ff22 	bl	80084d0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800268c:	6822      	ldr	r2, [r4, #0]
 800268e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002692:	b29b      	uxth	r3, r3
 8002694:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002698:	b29b      	uxth	r3, r3
 800269a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 800269e:	e7af      	b.n	8002600 <HAL_PCD_IRQHandler+0x64>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80026a0:	6822      	ldr	r2, [r4, #0]
 80026a2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80026a6:	f043 0308 	orr.w	r3, r3, #8
 80026aa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026ae:	6822      	ldr	r2, [r4, #0]
 80026b0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80026c0:	6822      	ldr	r2, [r4, #0]
 80026c2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80026c6:	f043 0304 	orr.w	r3, r3, #4
 80026ca:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80026ce:	6820      	ldr	r0, [r4, #0]
 80026d0:	f001 ff38 	bl	8004544 <USB_ReadInterrupts>
 80026d4:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80026d8:	d008      	beq.n	80026ec <HAL_PCD_IRQHandler+0x150>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 80026ec:	4620      	mov	r0, r4
 80026ee:	f005 fedf 	bl	80084b0 <HAL_PCD_SuspendCallback>
 80026f2:	e78b      	b.n	800260c <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80026f4:	6822      	ldr	r2, [r4, #0]
 80026f6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002700:	b29b      	uxth	r3, r3
 8002702:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002706:	4620      	mov	r0, r4
 8002708:	f005 febb 	bl	8008482 <HAL_PCD_SOFCallback>
 800270c:	e784      	b.n	8002618 <HAL_PCD_IRQHandler+0x7c>

0800270e <HAL_PCD_EP_SetStall>:
{
 800270e:	b538      	push	{r3, r4, r5, lr}
 8002710:	f001 0507 	and.w	r5, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002714:	6843      	ldr	r3, [r0, #4]
 8002716:	429d      	cmp	r5, r3
 8002718:	d82c      	bhi.n	8002774 <HAL_PCD_EP_SetStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 800271a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800271e:	d11a      	bne.n	8002756 <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 8002720:	014b      	lsls	r3, r1, #5
 8002722:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002726:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002728:	4403      	add	r3, r0
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
  ep->is_stall = 1U;
 8002730:	2301      	movs	r3, #1
 8002732:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002734:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002736:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 800273a:	2b01      	cmp	r3, #1
 800273c:	d01c      	beq.n	8002778 <HAL_PCD_EP_SetStall+0x6a>
 800273e:	4604      	mov	r4, r0
 8002740:	2301      	movs	r3, #1
 8002742:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002746:	6800      	ldr	r0, [r0, #0]
 8002748:	f001 fe7c 	bl	8004444 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800274c:	b165      	cbz	r5, 8002768 <HAL_PCD_EP_SetStall+0x5a>
  __HAL_UNLOCK(hpcd);
 800274e:	2000      	movs	r0, #0
 8002750:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8002754:	e00f      	b.n	8002776 <HAL_PCD_EP_SetStall+0x68>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002756:	016b      	lsls	r3, r5, #5
 8002758:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800275c:	4401      	add	r1, r0
    ep->is_in = 1U;
 800275e:	4403      	add	r3, r0
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8002766:	e7e3      	b.n	8002730 <HAL_PCD_EP_SetStall+0x22>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002768:	f504 710c 	add.w	r1, r4, #560	; 0x230
 800276c:	6820      	ldr	r0, [r4, #0]
 800276e:	f001 feec 	bl	800454a <USB_EP0_OutStart>
 8002772:	e7ec      	b.n	800274e <HAL_PCD_EP_SetStall+0x40>
    return HAL_ERROR;
 8002774:	2001      	movs	r0, #1
}
 8002776:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002778:	2002      	movs	r0, #2
 800277a:	e7fc      	b.n	8002776 <HAL_PCD_EP_SetStall+0x68>

0800277c <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800277c:	f001 020f 	and.w	r2, r1, #15
 8002780:	6843      	ldr	r3, [r0, #4]
 8002782:	429a      	cmp	r2, r3
 8002784:	d82d      	bhi.n	80027e2 <HAL_PCD_EP_ClrStall+0x66>
{
 8002786:	b510      	push	{r4, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8002788:	f011 0f80 	tst.w	r1, #128	; 0x80
 800278c:	d11e      	bne.n	80027cc <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800278e:	f001 0307 	and.w	r3, r1, #7
 8002792:	015b      	lsls	r3, r3, #5
 8002794:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8002798:	4402      	add	r2, r0
    ep->is_in = 0U;
 800279a:	4403      	add	r3, r0
 800279c:	2400      	movs	r4, #0
 800279e:	f883 4129 	strb.w	r4, [r3, #297]	; 0x129
  ep->is_stall = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	7093      	strb	r3, [r2, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027a6:	f001 0307 	and.w	r3, r1, #7
 80027aa:	7013      	strb	r3, [r2, #0]
  __HAL_LOCK(hpcd);
 80027ac:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d018      	beq.n	80027e6 <HAL_PCD_EP_ClrStall+0x6a>
 80027b4:	4604      	mov	r4, r0
 80027b6:	2301      	movs	r3, #1
 80027b8:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027bc:	4611      	mov	r1, r2
 80027be:	6800      	ldr	r0, [r0, #0]
 80027c0:	f001 fe65 	bl	800448e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 80027ca:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027cc:	f001 0307 	and.w	r3, r1, #7
 80027d0:	015b      	lsls	r3, r3, #5
 80027d2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80027d6:	4402      	add	r2, r0
    ep->is_in = 1U;
 80027d8:	4403      	add	r3, r0
 80027da:	2401      	movs	r4, #1
 80027dc:	f883 4029 	strb.w	r4, [r3, #41]	; 0x29
 80027e0:	e7df      	b.n	80027a2 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 80027e2:	2001      	movs	r0, #1
}
 80027e4:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80027e6:	2002      	movs	r0, #2
 80027e8:	e7ef      	b.n	80027ca <HAL_PCD_EP_ClrStall+0x4e>

080027ea <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80027ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80027ee:	d00c      	beq.n	800280a <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f0:	f001 0107 	and.w	r1, r1, #7
 80027f4:	0149      	lsls	r1, r1, #5
 80027f6:	3128      	adds	r1, #40	; 0x28
 80027f8:	4401      	add	r1, r0
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80027fa:	b15a      	cbz	r2, 8002814 <HAL_PCDEx_PMAConfig+0x2a>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80027fc:	2201      	movs	r2, #1
 80027fe:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002800:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002802:	0c1b      	lsrs	r3, r3, #16
 8002804:	814b      	strh	r3, [r1, #10]
  }

  return HAL_OK;
}
 8002806:	2000      	movs	r0, #0
 8002808:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800280a:	0149      	lsls	r1, r1, #5
 800280c:	f501 7194 	add.w	r1, r1, #296	; 0x128
 8002810:	4401      	add	r1, r0
 8002812:	e7f2      	b.n	80027fa <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 0U;
 8002814:	730a      	strb	r2, [r1, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8002816:	80cb      	strh	r3, [r1, #6]
 8002818:	e7f5      	b.n	8002806 <HAL_PCDEx_PMAConfig+0x1c>
	...

0800281c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800281c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <RCC_Delay+0x24>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a08      	ldr	r2, [pc, #32]	; (8002844 <RCC_Delay+0x28>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	0a5b      	lsrs	r3, r3, #9
 800282a:	fb00 f003 	mul.w	r0, r0, r3
 800282e:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8002830:	bf00      	nop
  }
  while (Delay --);
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	1e5a      	subs	r2, r3, #1
 8002836:	9201      	str	r2, [sp, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f9      	bne.n	8002830 <RCC_Delay+0x14>
}
 800283c:	b002      	add	sp, #8
 800283e:	4770      	bx	lr
 8002840:	20000184 	.word	0x20000184
 8002844:	10624dd3 	.word	0x10624dd3

08002848 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002848:	2800      	cmp	r0, #0
 800284a:	f000 81f5 	beq.w	8002c38 <HAL_RCC_OscConfig+0x3f0>
{
 800284e:	b570      	push	{r4, r5, r6, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002854:	6803      	ldr	r3, [r0, #0]
 8002856:	f013 0f01 	tst.w	r3, #1
 800285a:	d02c      	beq.n	80028b6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800285c:	4bab      	ldr	r3, [pc, #684]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b04      	cmp	r3, #4
 8002866:	d01d      	beq.n	80028a4 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002868:	4ba8      	ldr	r3, [pc, #672]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d012      	beq.n	800289a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002874:	6863      	ldr	r3, [r4, #4]
 8002876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287a:	d041      	beq.n	8002900 <HAL_RCC_OscConfig+0xb8>
 800287c:	2b00      	cmp	r3, #0
 800287e:	d155      	bne.n	800292c <HAL_RCC_OscConfig+0xe4>
 8002880:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002884:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	e037      	b.n	800290a <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800289a:	4b9c      	ldr	r3, [pc, #624]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80028a2:	d0e7      	beq.n	8002874 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	4b99      	ldr	r3, [pc, #612]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80028ac:	d003      	beq.n	80028b6 <HAL_RCC_OscConfig+0x6e>
 80028ae:	6863      	ldr	r3, [r4, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 81c3 	beq.w	8002c3c <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b6:	6823      	ldr	r3, [r4, #0]
 80028b8:	f013 0f02 	tst.w	r3, #2
 80028bc:	d076      	beq.n	80029ac <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028be:	4b93      	ldr	r3, [pc, #588]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f013 0f0c 	tst.w	r3, #12
 80028c6:	d05f      	beq.n	8002988 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028c8:	4b90      	ldr	r3, [pc, #576]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d054      	beq.n	800297e <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d4:	6923      	ldr	r3, [r4, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 808a 	beq.w	80029f0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80028dc:	4b8c      	ldr	r3, [pc, #560]	; (8002b10 <HAL_RCC_OscConfig+0x2c8>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028e2:	f7fe fc7f 	bl	80011e4 <HAL_GetTick>
 80028e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	4b88      	ldr	r3, [pc, #544]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f013 0f02 	tst.w	r3, #2
 80028f0:	d175      	bne.n	80029de <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f2:	f7fe fc77 	bl	80011e4 <HAL_GetTick>
 80028f6:	1b40      	subs	r0, r0, r5
 80028f8:	2802      	cmp	r0, #2
 80028fa:	d9f5      	bls.n	80028e8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80028fc:	2003      	movs	r0, #3
 80028fe:	e1a0      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002900:	4a82      	ldr	r2, [pc, #520]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 8002902:	6813      	ldr	r3, [r2, #0]
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800290a:	6863      	ldr	r3, [r4, #4]
 800290c:	b343      	cbz	r3, 8002960 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800290e:	f7fe fc69 	bl	80011e4 <HAL_GetTick>
 8002912:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002914:	4b7d      	ldr	r3, [pc, #500]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800291c:	d1cb      	bne.n	80028b6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800291e:	f7fe fc61 	bl	80011e4 <HAL_GetTick>
 8002922:	1b40      	subs	r0, r0, r5
 8002924:	2864      	cmp	r0, #100	; 0x64
 8002926:	d9f5      	bls.n	8002914 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002928:	2003      	movs	r0, #3
 800292a:	e18a      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800292c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002930:	d009      	beq.n	8002946 <HAL_RCC_OscConfig+0xfe>
 8002932:	4b76      	ldr	r3, [pc, #472]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e7e1      	b.n	800290a <HAL_RCC_OscConfig+0xc2>
 8002946:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800294a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	e7d4      	b.n	800290a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002960:	f7fe fc40 	bl	80011e4 <HAL_GetTick>
 8002964:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	4b69      	ldr	r3, [pc, #420]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800296e:	d0a2      	beq.n	80028b6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002970:	f7fe fc38 	bl	80011e4 <HAL_GetTick>
 8002974:	1b40      	subs	r0, r0, r5
 8002976:	2864      	cmp	r0, #100	; 0x64
 8002978:	d9f5      	bls.n	8002966 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800297a:	2003      	movs	r0, #3
 800297c:	e161      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800297e:	4b63      	ldr	r3, [pc, #396]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002986:	d1a5      	bne.n	80028d4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002988:	4b60      	ldr	r3, [pc, #384]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f013 0f02 	tst.w	r3, #2
 8002990:	d004      	beq.n	800299c <HAL_RCC_OscConfig+0x154>
 8002992:	6923      	ldr	r3, [r4, #16]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d001      	beq.n	800299c <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 8002998:	2001      	movs	r0, #1
 800299a:	e152      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4a5b      	ldr	r2, [pc, #364]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 800299e:	6813      	ldr	r3, [r2, #0]
 80029a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80029a4:	6961      	ldr	r1, [r4, #20]
 80029a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029aa:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	f013 0f08 	tst.w	r3, #8
 80029b2:	d032      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b4:	69a3      	ldr	r3, [r4, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d05b      	beq.n	8002a72 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80029ba:	4b56      	ldr	r3, [pc, #344]	; (8002b14 <HAL_RCC_OscConfig+0x2cc>)
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80029c0:	f7fe fc10 	bl	80011e4 <HAL_GetTick>
 80029c4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c6:	4b51      	ldr	r3, [pc, #324]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	f013 0f02 	tst.w	r3, #2
 80029ce:	d121      	bne.n	8002a14 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d0:	f7fe fc08 	bl	80011e4 <HAL_GetTick>
 80029d4:	1b40      	subs	r0, r0, r5
 80029d6:	2802      	cmp	r0, #2
 80029d8:	d9f5      	bls.n	80029c6 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80029da:	2003      	movs	r0, #3
 80029dc:	e131      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029de:	4a4b      	ldr	r2, [pc, #300]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 80029e0:	6813      	ldr	r3, [r2, #0]
 80029e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80029e6:	6961      	ldr	r1, [r4, #20]
 80029e8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e7dd      	b.n	80029ac <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80029f0:	4b47      	ldr	r3, [pc, #284]	; (8002b10 <HAL_RCC_OscConfig+0x2c8>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029f6:	f7fe fbf5 	bl	80011e4 <HAL_GetTick>
 80029fa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fc:	4b43      	ldr	r3, [pc, #268]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f013 0f02 	tst.w	r3, #2
 8002a04:	d0d2      	beq.n	80029ac <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a06:	f7fe fbed 	bl	80011e4 <HAL_GetTick>
 8002a0a:	1b40      	subs	r0, r0, r5
 8002a0c:	2802      	cmp	r0, #2
 8002a0e:	d9f5      	bls.n	80029fc <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002a10:	2003      	movs	r0, #3
 8002a12:	e116      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 8002a14:	2001      	movs	r0, #1
 8002a16:	f7ff ff01 	bl	800281c <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a1a:	6823      	ldr	r3, [r4, #0]
 8002a1c:	f013 0f04 	tst.w	r3, #4
 8002a20:	f000 8098 	beq.w	8002b54 <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a24:	4b39      	ldr	r3, [pc, #228]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a2c:	d133      	bne.n	8002a96 <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 8002a30:	69da      	ldr	r2, [r3, #28]
 8002a32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a36:	61da      	str	r2, [r3, #28]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a42:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a44:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <HAL_RCC_OscConfig+0x2d0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a4c:	d025      	beq.n	8002a9a <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a4e:	68e3      	ldr	r3, [r4, #12]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d036      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x27a>
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d14c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x2aa>
 8002a58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a5c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002a60:	6a1a      	ldr	r2, [r3, #32]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	621a      	str	r2, [r3, #32]
 8002a68:	6a1a      	ldr	r2, [r3, #32]
 8002a6a:	f022 0204 	bic.w	r2, r2, #4
 8002a6e:	621a      	str	r2, [r3, #32]
 8002a70:	e02c      	b.n	8002acc <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 8002a72:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <HAL_RCC_OscConfig+0x2cc>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002a78:	f7fe fbb4 	bl	80011e4 <HAL_GetTick>
 8002a7c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7e:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	f013 0f02 	tst.w	r3, #2
 8002a86:	d0c8      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a88:	f7fe fbac 	bl	80011e4 <HAL_GetTick>
 8002a8c:	1b40      	subs	r0, r0, r5
 8002a8e:	2802      	cmp	r0, #2
 8002a90:	d9f5      	bls.n	8002a7e <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 8002a92:	2003      	movs	r0, #3
 8002a94:	e0d5      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 8002a96:	2500      	movs	r5, #0
 8002a98:	e7d4      	b.n	8002a44 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9a:	4a1f      	ldr	r2, [pc, #124]	; (8002b18 <HAL_RCC_OscConfig+0x2d0>)
 8002a9c:	6813      	ldr	r3, [r2, #0]
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002aa4:	f7fe fb9e 	bl	80011e4 <HAL_GetTick>
 8002aa8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aaa:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_RCC_OscConfig+0x2d0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ab2:	d1cc      	bne.n	8002a4e <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab4:	f7fe fb96 	bl	80011e4 <HAL_GetTick>
 8002ab8:	1b80      	subs	r0, r0, r6
 8002aba:	2864      	cmp	r0, #100	; 0x64
 8002abc:	d9f5      	bls.n	8002aaa <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 8002abe:	2003      	movs	r0, #3
 8002ac0:	e0bf      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac2:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 8002ac4:	6a13      	ldr	r3, [r2, #32]
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002acc:	68e3      	ldr	r3, [r4, #12]
 8002ace:	b37b      	cbz	r3, 8002b30 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fb88 	bl	80011e4 <HAL_GetTick>
 8002ad4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f013 0f02 	tst.w	r3, #2
 8002ade:	d138      	bne.n	8002b52 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae0:	f7fe fb80 	bl	80011e4 <HAL_GetTick>
 8002ae4:	1b80      	subs	r0, r0, r6
 8002ae6:	f241 3388 	movw	r3, #5000	; 0x1388
 8002aea:	4298      	cmp	r0, r3
 8002aec:	d9f3      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 8002aee:	2003      	movs	r0, #3
 8002af0:	e0a7      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d012      	beq.n	8002b1c <HAL_RCC_OscConfig+0x2d4>
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_RCC_OscConfig+0x2c4>)
 8002af8:	6a1a      	ldr	r2, [r3, #32]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	621a      	str	r2, [r3, #32]
 8002b00:	6a1a      	ldr	r2, [r3, #32]
 8002b02:	f022 0204 	bic.w	r2, r2, #4
 8002b06:	621a      	str	r2, [r3, #32]
 8002b08:	e7e0      	b.n	8002acc <HAL_RCC_OscConfig+0x284>
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	42420000 	.word	0x42420000
 8002b14:	42420480 	.word	0x42420480
 8002b18:	40007000 	.word	0x40007000
 8002b1c:	4b4c      	ldr	r3, [pc, #304]	; (8002c50 <HAL_RCC_OscConfig+0x408>)
 8002b1e:	6a1a      	ldr	r2, [r3, #32]
 8002b20:	f042 0204 	orr.w	r2, r2, #4
 8002b24:	621a      	str	r2, [r3, #32]
 8002b26:	6a1a      	ldr	r2, [r3, #32]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	621a      	str	r2, [r3, #32]
 8002b2e:	e7cd      	b.n	8002acc <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 8002b30:	f7fe fb58 	bl	80011e4 <HAL_GetTick>
 8002b34:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b36:	4b46      	ldr	r3, [pc, #280]	; (8002c50 <HAL_RCC_OscConfig+0x408>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f013 0f02 	tst.w	r3, #2
 8002b3e:	d008      	beq.n	8002b52 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7fe fb50 	bl	80011e4 <HAL_GetTick>
 8002b44:	1b80      	subs	r0, r0, r6
 8002b46:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b4a:	4298      	cmp	r0, r3
 8002b4c:	d9f3      	bls.n	8002b36 <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 8002b4e:	2003      	movs	r0, #3
 8002b50:	e077      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 8002b52:	b9e5      	cbnz	r5, 8002b8e <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b54:	69e3      	ldr	r3, [r4, #28]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d072      	beq.n	8002c40 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b5a:	4a3d      	ldr	r2, [pc, #244]	; (8002c50 <HAL_RCC_OscConfig+0x408>)
 8002b5c:	6852      	ldr	r2, [r2, #4]
 8002b5e:	f002 020c 	and.w	r2, r2, #12
 8002b62:	2a08      	cmp	r2, #8
 8002b64:	d056      	beq.n	8002c14 <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d017      	beq.n	8002b9a <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b3a      	ldr	r3, [pc, #232]	; (8002c54 <HAL_RCC_OscConfig+0x40c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b70:	f7fe fb38 	bl	80011e4 <HAL_GetTick>
 8002b74:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b76:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <HAL_RCC_OscConfig+0x408>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b7e:	d047      	beq.n	8002c10 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe fb30 	bl	80011e4 <HAL_GetTick>
 8002b84:	1b00      	subs	r0, r0, r4
 8002b86:	2802      	cmp	r0, #2
 8002b88:	d9f5      	bls.n	8002b76 <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8002b8a:	2003      	movs	r0, #3
 8002b8c:	e059      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8e:	4a30      	ldr	r2, [pc, #192]	; (8002c50 <HAL_RCC_OscConfig+0x408>)
 8002b90:	69d3      	ldr	r3, [r2, #28]
 8002b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b96:	61d3      	str	r3, [r2, #28]
 8002b98:	e7dc      	b.n	8002b54 <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 8002b9a:	4b2e      	ldr	r3, [pc, #184]	; (8002c54 <HAL_RCC_OscConfig+0x40c>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fb20 	bl	80011e4 <HAL_GetTick>
 8002ba4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba6:	4b2a      	ldr	r3, [pc, #168]	; (8002c50 <HAL_RCC_OscConfig+0x408>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bae:	d006      	beq.n	8002bbe <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe fb18 	bl	80011e4 <HAL_GetTick>
 8002bb4:	1b40      	subs	r0, r0, r5
 8002bb6:	2802      	cmp	r0, #2
 8002bb8:	d9f5      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8002bba:	2003      	movs	r0, #3
 8002bbc:	e041      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bbe:	6a23      	ldr	r3, [r4, #32]
 8002bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc4:	d01a      	beq.n	8002bfc <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc6:	4922      	ldr	r1, [pc, #136]	; (8002c50 <HAL_RCC_OscConfig+0x408>)
 8002bc8:	684b      	ldr	r3, [r1, #4]
 8002bca:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002bce:	6a22      	ldr	r2, [r4, #32]
 8002bd0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002bd2:	4302      	orrs	r2, r0
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <HAL_RCC_OscConfig+0x40c>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bde:	f7fe fb01 	bl	80011e4 <HAL_GetTick>
 8002be2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be4:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <HAL_RCC_OscConfig+0x408>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bec:	d10e      	bne.n	8002c0c <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe faf9 	bl	80011e4 <HAL_GetTick>
 8002bf2:	1b00      	subs	r0, r0, r4
 8002bf4:	2802      	cmp	r0, #2
 8002bf6:	d9f5      	bls.n	8002be4 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8002bf8:	2003      	movs	r0, #3
 8002bfa:	e022      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bfc:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <HAL_RCC_OscConfig+0x408>)
 8002bfe:	6853      	ldr	r3, [r2, #4]
 8002c00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c04:	68a1      	ldr	r1, [r4, #8]
 8002c06:	430b      	orrs	r3, r1
 8002c08:	6053      	str	r3, [r2, #4]
 8002c0a:	e7dc      	b.n	8002bc6 <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	e018      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
 8002c10:	2000      	movs	r0, #0
 8002c12:	e016      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d016      	beq.n	8002c46 <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 8002c18:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <HAL_RCC_OscConfig+0x408>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002c20:	6a22      	ldr	r2, [r4, #32]
 8002c22:	4291      	cmp	r1, r2
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 8002c26:	2001      	movs	r0, #1
 8002c28:	e00b      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c2a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 8002c34:	2001      	movs	r0, #1
 8002c36:	e004      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 8002c38:	2001      	movs	r0, #1
}
 8002c3a:	4770      	bx	lr
        return HAL_ERROR;
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8002c40:	2000      	movs	r0, #0
}
 8002c42:	b002      	add	sp, #8
 8002c44:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002c46:	2001      	movs	r0, #1
 8002c48:	e7fb      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	e7f9      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fa>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	42420060 	.word	0x42420060

08002c58 <HAL_RCC_GetSysClockFreq>:
{
 8002c58:	b410      	push	{r4}
 8002c5a:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c5c:	4c16      	ldr	r4, [pc, #88]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x60>)
 8002c5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c62:	f10d 0c18 	add.w	ip, sp, #24
 8002c66:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c6a:	8a23      	ldrh	r3, [r4, #16]
 8002c6c:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x64>)
 8002c72:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002c74:	f003 020c 	and.w	r2, r3, #12
 8002c78:	2a08      	cmp	r2, #8
 8002c7a:	d11a      	bne.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c7c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002c80:	4462      	add	r2, ip
 8002c82:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c86:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c8c:	480c      	ldr	r0, [pc, #48]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x68>)
 8002c8e:	fb00 f002 	mul.w	r0, r0, r2
}
 8002c92:	b007      	add	sp, #28
 8002c94:	bc10      	pop	{r4}
 8002c96:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x64>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002ca0:	4463      	add	r3, ip
 8002ca2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ca6:	4807      	ldr	r0, [pc, #28]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002ca8:	fb00 f002 	mul.w	r0, r0, r2
 8002cac:	fbb0 f0f3 	udiv	r0, r0, r3
 8002cb0:	e7ef      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8002cb2:	4804      	ldr	r0, [pc, #16]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8002cb4:	e7ed      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cb6:	bf00      	nop
 8002cb8:	0800c1d8 	.word	0x0800c1d8
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	003d0900 	.word	0x003d0900
 8002cc4:	007a1200 	.word	0x007a1200

08002cc8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	f000 80a3 	beq.w	8002e14 <HAL_RCC_ClockConfig+0x14c>
{
 8002cce:	b570      	push	{r4, r5, r6, lr}
 8002cd0:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd2:	4b52      	ldr	r3, [pc, #328]	; (8002e1c <HAL_RCC_ClockConfig+0x154>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	428b      	cmp	r3, r1
 8002cdc:	d20c      	bcs.n	8002cf8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	4a4f      	ldr	r2, [pc, #316]	; (8002e1c <HAL_RCC_ClockConfig+0x154>)
 8002ce0:	6813      	ldr	r3, [r2, #0]
 8002ce2:	f023 0307 	bic.w	r3, r3, #7
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	6813      	ldr	r3, [r2, #0]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	428b      	cmp	r3, r1
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8002cf4:	2001      	movs	r0, #1
}
 8002cf6:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	f013 0f02 	tst.w	r3, #2
 8002cfe:	d017      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	f013 0f04 	tst.w	r3, #4
 8002d04:	d004      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d06:	4a46      	ldr	r2, [pc, #280]	; (8002e20 <HAL_RCC_ClockConfig+0x158>)
 8002d08:	6853      	ldr	r3, [r2, #4]
 8002d0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d0e:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	f013 0f08 	tst.w	r3, #8
 8002d16:	d004      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d18:	4a41      	ldr	r2, [pc, #260]	; (8002e20 <HAL_RCC_ClockConfig+0x158>)
 8002d1a:	6853      	ldr	r3, [r2, #4]
 8002d1c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d20:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d22:	4a3f      	ldr	r2, [pc, #252]	; (8002e20 <HAL_RCC_ClockConfig+0x158>)
 8002d24:	6853      	ldr	r3, [r2, #4]
 8002d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2a:	68a0      	ldr	r0, [r4, #8]
 8002d2c:	4303      	orrs	r3, r0
 8002d2e:	6053      	str	r3, [r2, #4]
 8002d30:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	f013 0f01 	tst.w	r3, #1
 8002d38:	d031      	beq.n	8002d9e <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3a:	6863      	ldr	r3, [r4, #4]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d025      	beq.n	8002d90 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	4a36      	ldr	r2, [pc, #216]	; (8002e20 <HAL_RCC_ClockConfig+0x158>)
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	f012 0f02 	tst.w	r2, #2
 8002d4c:	d064      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4e:	4934      	ldr	r1, [pc, #208]	; (8002e20 <HAL_RCC_ClockConfig+0x158>)
 8002d50:	684a      	ldr	r2, [r1, #4]
 8002d52:	f022 0203 	bic.w	r2, r2, #3
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002d5a:	f7fe fa43 	bl	80011e4 <HAL_GetTick>
 8002d5e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d60:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <HAL_RCC_ClockConfig+0x158>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	6862      	ldr	r2, [r4, #4]
 8002d6a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d6e:	d016      	beq.n	8002d9e <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d70:	f7fe fa38 	bl	80011e4 <HAL_GetTick>
 8002d74:	1b80      	subs	r0, r0, r6
 8002d76:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d7a:	4298      	cmp	r0, r3
 8002d7c:	d9f0      	bls.n	8002d60 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8002d7e:	2003      	movs	r0, #3
 8002d80:	e7b9      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	4a27      	ldr	r2, [pc, #156]	; (8002e20 <HAL_RCC_ClockConfig+0x158>)
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002d8a:	d1e0      	bne.n	8002d4e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	e7b2      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d90:	4a23      	ldr	r2, [pc, #140]	; (8002e20 <HAL_RCC_ClockConfig+0x158>)
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002d98:	d1d9      	bne.n	8002d4e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	e7ab      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9e:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <HAL_RCC_ClockConfig+0x154>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	42ab      	cmp	r3, r5
 8002da8:	d90c      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <HAL_RCC_ClockConfig+0x154>)
 8002dac:	6813      	ldr	r3, [r2, #0]
 8002dae:	f023 0307 	bic.w	r3, r3, #7
 8002db2:	432b      	orrs	r3, r5
 8002db4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	6813      	ldr	r3, [r2, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	42ab      	cmp	r3, r5
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	e798      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	f013 0f04 	tst.w	r3, #4
 8002dca:	d006      	beq.n	8002dda <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dcc:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <HAL_RCC_ClockConfig+0x158>)
 8002dce:	6853      	ldr	r3, [r2, #4]
 8002dd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dd4:	68e1      	ldr	r1, [r4, #12]
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dda:	6823      	ldr	r3, [r4, #0]
 8002ddc:	f013 0f08 	tst.w	r3, #8
 8002de0:	d007      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002de2:	4a0f      	ldr	r2, [pc, #60]	; (8002e20 <HAL_RCC_ClockConfig+0x158>)
 8002de4:	6853      	ldr	r3, [r2, #4]
 8002de6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002dea:	6921      	ldr	r1, [r4, #16]
 8002dec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002df0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002df2:	f7ff ff31 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_RCC_ClockConfig+0x158>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002dfe:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <HAL_RCC_ClockConfig+0x15c>)
 8002e00:	5cd3      	ldrb	r3, [r2, r3]
 8002e02:	40d8      	lsrs	r0, r3
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_RCC_ClockConfig+0x160>)
 8002e06:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <HAL_RCC_ClockConfig+0x164>)
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	f7fe f9a6 	bl	800115c <HAL_InitTick>
  return HAL_OK;
 8002e10:	2000      	movs	r0, #0
 8002e12:	e770      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002e14:	2001      	movs	r0, #1
}
 8002e16:	4770      	bx	lr
        return HAL_ERROR;
 8002e18:	2001      	movs	r0, #1
 8002e1a:	e76c      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x2e>
 8002e1c:	40022000 	.word	0x40022000
 8002e20:	40021000 	.word	0x40021000
 8002e24:	0800d214 	.word	0x0800d214
 8002e28:	20000184 	.word	0x20000184
 8002e2c:	20000004 	.word	0x20000004

08002e30 <HAL_RCC_GetHCLKFreq>:
}
 8002e30:	4b01      	ldr	r3, [pc, #4]	; (8002e38 <HAL_RCC_GetHCLKFreq+0x8>)
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000184 	.word	0x20000184

08002e3c <HAL_RCC_GetPCLK1Freq>:
{
 8002e3c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e3e:	f7ff fff7 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e42:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002e4a:	4a03      	ldr	r2, [pc, #12]	; (8002e58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e4c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e4e:	40d8      	lsrs	r0, r3
 8002e50:	bd08      	pop	{r3, pc}
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	0800d224 	.word	0x0800d224

08002e5c <HAL_RCC_GetPCLK2Freq>:
{
 8002e5c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e5e:	f7ff ffe7 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e62:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002e6a:	4a03      	ldr	r2, [pc, #12]	; (8002e78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e6c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e6e:	40d8      	lsrs	r0, r3
 8002e70:	bd08      	pop	{r3, pc}
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	0800d224 	.word	0x0800d224

08002e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e82:	6803      	ldr	r3, [r0, #0]
 8002e84:	f013 0f01 	tst.w	r3, #1
 8002e88:	d034      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8a:	4b3e      	ldr	r3, [pc, #248]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002e92:	d148      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e94:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e9c:	61da      	str	r2, [r3, #28]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ea8:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002eb2:	d03a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eb4:	4b33      	ldr	r3, [pc, #204]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eb8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002ebc:	d011      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8002ebe:	6862      	ldr	r2, [r4, #4]
 8002ec0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d00c      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ec8:	4a2e      	ldr	r2, [pc, #184]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002eca:	6a13      	ldr	r3, [r2, #32]
 8002ecc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ed0:	492e      	ldr	r1, [pc, #184]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002ed2:	2601      	movs	r6, #1
 8002ed4:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed6:	2600      	movs	r6, #0
 8002ed8:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002eda:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002edc:	f013 0f01 	tst.w	r3, #1
 8002ee0:	d137      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee2:	4a28      	ldr	r2, [pc, #160]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002ee4:	6a13      	ldr	r3, [r2, #32]
 8002ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eea:	6861      	ldr	r1, [r4, #4]
 8002eec:	430b      	orrs	r3, r1
 8002eee:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ef0:	2d00      	cmp	r5, #0
 8002ef2:	d13f      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	f013 0f02 	tst.w	r3, #2
 8002efa:	d006      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002efc:	4a21      	ldr	r2, [pc, #132]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002efe:	6853      	ldr	r3, [r2, #4]
 8002f00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f04:	68a1      	ldr	r1, [r4, #8]
 8002f06:	430b      	orrs	r3, r1
 8002f08:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f0a:	6823      	ldr	r3, [r4, #0]
 8002f0c:	f013 0f10 	tst.w	r3, #16
 8002f10:	d035      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f12:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002f14:	6853      	ldr	r3, [r2, #4]
 8002f16:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f1a:	68e1      	ldr	r1, [r4, #12]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f20:	2000      	movs	r0, #0
}
 8002f22:	b002      	add	sp, #8
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002f26:	2500      	movs	r5, #0
 8002f28:	e7bf      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2a:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002f2c:	6813      	ldr	r3, [r2, #0]
 8002f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f32:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002f34:	f7fe f956 	bl	80011e4 <HAL_GetTick>
 8002f38:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f42:	d1b7      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f44:	f7fe f94e 	bl	80011e4 <HAL_GetTick>
 8002f48:	1b80      	subs	r0, r0, r6
 8002f4a:	2864      	cmp	r0, #100	; 0x64
 8002f4c:	d9f5      	bls.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8002f4e:	2003      	movs	r0, #3
 8002f50:	e7e7      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 8002f52:	f7fe f947 	bl	80011e4 <HAL_GetTick>
 8002f56:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f013 0f02 	tst.w	r3, #2
 8002f60:	d1bf      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fe f93f 	bl	80011e4 <HAL_GetTick>
 8002f66:	1b80      	subs	r0, r0, r6
 8002f68:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f6c:	4298      	cmp	r0, r3
 8002f6e:	d9f3      	bls.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 8002f70:	2003      	movs	r0, #3
 8002f72:	e7d6      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	69d3      	ldr	r3, [r2, #28]
 8002f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	61d3      	str	r3, [r2, #28]
 8002f7c:	e7ba      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8002f7e:	2000      	movs	r0, #0
 8002f80:	e7cf      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40007000 	.word	0x40007000
 8002f8c:	42420440 	.word	0x42420440

08002f90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f92:	4605      	mov	r5, r0
 8002f94:	460f      	mov	r7, r1
 8002f96:	4616      	mov	r6, r2
 8002f98:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f9a:	682b      	ldr	r3, [r5, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	ea37 0303 	bics.w	r3, r7, r3
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	42b3      	cmp	r3, r6
 8002faa:	d037      	beq.n	800301c <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fac:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002fb0:	d0f3      	beq.n	8002f9a <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002fb2:	f7fe f917 	bl	80011e4 <HAL_GetTick>
 8002fb6:	9b06      	ldr	r3, [sp, #24]
 8002fb8:	1ac0      	subs	r0, r0, r3
 8002fba:	42a0      	cmp	r0, r4
 8002fbc:	d201      	bcs.n	8002fc2 <SPI_WaitFlagStateUntilTimeout+0x32>
 8002fbe:	2c00      	cmp	r4, #0
 8002fc0:	d1eb      	bne.n	8002f9a <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fc2:	682a      	ldr	r2, [r5, #0]
 8002fc4:	6853      	ldr	r3, [r2, #4]
 8002fc6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002fca:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fcc:	686b      	ldr	r3, [r5, #4]
 8002fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fd2:	d00b      	beq.n	8002fec <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fd4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fda:	d014      	beq.n	8003006 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8002fe8:	2003      	movs	r0, #3
 8002fea:	e018      	b.n	800301e <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fec:	68ab      	ldr	r3, [r5, #8]
 8002fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff2:	d002      	beq.n	8002ffa <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff8:	d1ec      	bne.n	8002fd4 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8002ffa:	682a      	ldr	r2, [r5, #0]
 8002ffc:	6813      	ldr	r3, [r2, #0]
 8002ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	e7e6      	b.n	8002fd4 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8003006:	682a      	ldr	r2, [r5, #0]
 8003008:	6813      	ldr	r3, [r2, #0]
 800300a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	682a      	ldr	r2, [r5, #0]
 8003012:	6813      	ldr	r3, [r2, #0]
 8003014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e7df      	b.n	8002fdc <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 800301c:	2000      	movs	r0, #0
}
 800301e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003020 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003020:	b510      	push	{r4, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003026:	9200      	str	r2, [sp, #0]
 8003028:	460b      	mov	r3, r1
 800302a:	2200      	movs	r2, #0
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	f7ff ffaf 	bl	8002f90 <SPI_WaitFlagStateUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	b910      	cbnz	r0, 800303c <SPI_EndRxTxTransaction+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8003036:	4618      	mov	r0, r3
 8003038:	b002      	add	sp, #8
 800303a:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800303c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800303e:	f043 0320 	orr.w	r3, r3, #32
 8003042:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e7f6      	b.n	8003036 <SPI_EndRxTxTransaction+0x16>

08003048 <HAL_SPI_MspInit>:
}
 8003048:	4770      	bx	lr

0800304a <HAL_SPI_Init>:
  if (hspi == NULL)
 800304a:	2800      	cmp	r0, #0
 800304c:	d039      	beq.n	80030c2 <HAL_SPI_Init+0x78>
{
 800304e:	b510      	push	{r4, lr}
 8003050:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003052:	2300      	movs	r3, #0
 8003054:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003056:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800305a:	2b00      	cmp	r3, #0
 800305c:	d02c      	beq.n	80030b8 <HAL_SPI_Init+0x6e>
  hspi->State = HAL_SPI_STATE_BUSY;
 800305e:	2302      	movs	r3, #2
 8003060:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003064:	6822      	ldr	r2, [r4, #0]
 8003066:	6813      	ldr	r3, [r2, #0]
 8003068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800306c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800306e:	6863      	ldr	r3, [r4, #4]
 8003070:	68a2      	ldr	r2, [r4, #8]
 8003072:	4313      	orrs	r3, r2
 8003074:	68e2      	ldr	r2, [r4, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	6922      	ldr	r2, [r4, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	6962      	ldr	r2, [r4, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	69a2      	ldr	r2, [r4, #24]
 8003082:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003086:	4313      	orrs	r3, r2
 8003088:	69e2      	ldr	r2, [r4, #28]
 800308a:	4313      	orrs	r3, r2
 800308c:	6a22      	ldr	r2, [r4, #32]
 800308e:	4313      	orrs	r3, r2
 8003090:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003092:	6822      	ldr	r2, [r4, #0]
 8003094:	430b      	orrs	r3, r1
 8003096:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003098:	8b63      	ldrh	r3, [r4, #26]
 800309a:	6822      	ldr	r2, [r4, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030a2:	6822      	ldr	r2, [r4, #0]
 80030a4:	69d3      	ldr	r3, [r2, #28]
 80030a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030aa:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030ac:	2000      	movs	r0, #0
 80030ae:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80030b6:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80030b8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80030bc:	f7ff ffc4 	bl	8003048 <HAL_SPI_MspInit>
 80030c0:	e7cd      	b.n	800305e <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 80030c2:	2001      	movs	r0, #1
}
 80030c4:	4770      	bx	lr

080030c6 <HAL_SPI_Transmit>:
{
 80030c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ca:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80030cc:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 80030d0:	2c01      	cmp	r4, #1
 80030d2:	f000 80c3 	beq.w	800325c <HAL_SPI_Transmit+0x196>
 80030d6:	461d      	mov	r5, r3
 80030d8:	4617      	mov	r7, r2
 80030da:	4688      	mov	r8, r1
 80030dc:	4604      	mov	r4, r0
 80030de:	2301      	movs	r3, #1
 80030e0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80030e4:	f7fe f87e 	bl	80011e4 <HAL_GetTick>
 80030e8:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80030ea:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d009      	beq.n	8003108 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 80030f4:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030fc:	2300      	movs	r3, #0
 80030fe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003102:	b002      	add	sp, #8
 8003104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8003108:	f1b8 0f00 	cmp.w	r8, #0
 800310c:	f000 8098 	beq.w	8003240 <HAL_SPI_Transmit+0x17a>
 8003110:	2f00      	cmp	r7, #0
 8003112:	f000 8097 	beq.w	8003244 <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003116:	2303      	movs	r3, #3
 8003118:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800311c:	2300      	movs	r3, #0
 800311e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003120:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003124:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003126:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003128:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800312a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800312c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800312e:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003130:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003132:	68a3      	ldr	r3, [r4, #8]
 8003134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003138:	d01c      	beq.n	8003174 <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003142:	d103      	bne.n	800314c <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800314a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800314c:	68e3      	ldr	r3, [r4, #12]
 800314e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003152:	d015      	beq.n	8003180 <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003154:	6863      	ldr	r3, [r4, #4]
 8003156:	b10b      	cbz	r3, 800315c <HAL_SPI_Transmit+0x96>
 8003158:	2f01      	cmp	r7, #1
 800315a:	d149      	bne.n	80031f0 <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800315c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003164:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003166:	3301      	adds	r3, #1
 8003168:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800316a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800316c:	3b01      	subs	r3, #1
 800316e:	b29b      	uxth	r3, r3
 8003170:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003172:	e03d      	b.n	80031f0 <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 8003174:	6822      	ldr	r2, [r4, #0]
 8003176:	6813      	ldr	r3, [r2, #0]
 8003178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e7dc      	b.n	800313a <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003180:	6863      	ldr	r3, [r4, #4]
 8003182:	b10b      	cbz	r3, 8003188 <HAL_SPI_Transmit+0xc2>
 8003184:	2f01      	cmp	r7, #1
 8003186:	d115      	bne.n	80031b4 <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003188:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	8812      	ldrh	r2, [r2, #0]
 800318e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003190:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003192:	3302      	adds	r3, #2
 8003194:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003196:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003198:	3b01      	subs	r3, #1
 800319a:	b29b      	uxth	r3, r3
 800319c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800319e:	e009      	b.n	80031b4 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031a0:	f7fe f820 	bl	80011e4 <HAL_GetTick>
 80031a4:	1b80      	subs	r0, r0, r6
 80031a6:	42a8      	cmp	r0, r5
 80031a8:	d302      	bcc.n	80031b0 <HAL_SPI_Transmit+0xea>
 80031aa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80031ae:	d14b      	bne.n	8003248 <HAL_SPI_Transmit+0x182>
 80031b0:	2d00      	cmp	r5, #0
 80031b2:	d04b      	beq.n	800324c <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 80031b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d02c      	beq.n	8003216 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	f012 0f02 	tst.w	r2, #2
 80031c4:	d0ec      	beq.n	80031a0 <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80031c8:	8812      	ldrh	r2, [r2, #0]
 80031ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80031ce:	3302      	adds	r3, #2
 80031d0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80031d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80031da:	e7eb      	b.n	80031b4 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031dc:	f7fe f802 	bl	80011e4 <HAL_GetTick>
 80031e0:	1b80      	subs	r0, r0, r6
 80031e2:	42a8      	cmp	r0, r5
 80031e4:	d302      	bcc.n	80031ec <HAL_SPI_Transmit+0x126>
 80031e6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80031ea:	d131      	bne.n	8003250 <HAL_SPI_Transmit+0x18a>
 80031ec:	2d00      	cmp	r5, #0
 80031ee:	d031      	beq.n	8003254 <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 80031f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	b17b      	cbz	r3, 8003216 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	f012 0f02 	tst.w	r2, #2
 80031fe:	d0ed      	beq.n	80031dc <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003200:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003206:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003208:	3301      	adds	r3, #1
 800320a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800320c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800320e:	3b01      	subs	r3, #1
 8003210:	b29b      	uxth	r3, r3
 8003212:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003214:	e7ec      	b.n	80031f0 <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003216:	4632      	mov	r2, r6
 8003218:	4629      	mov	r1, r5
 800321a:	4620      	mov	r0, r4
 800321c:	f7ff ff00 	bl	8003020 <SPI_EndRxTxTransaction>
 8003220:	b108      	cbz	r0, 8003226 <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003222:	2320      	movs	r3, #32
 8003224:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003226:	68a3      	ldr	r3, [r4, #8]
 8003228:	b933      	cbnz	r3, 8003238 <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	9201      	str	r2, [sp, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	9301      	str	r3, [sp, #4]
 8003236:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003238:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800323a:	b96b      	cbnz	r3, 8003258 <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800323c:	2000      	movs	r0, #0
 800323e:	e75a      	b.n	80030f6 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8003240:	2001      	movs	r0, #1
 8003242:	e758      	b.n	80030f6 <HAL_SPI_Transmit+0x30>
 8003244:	2001      	movs	r0, #1
 8003246:	e756      	b.n	80030f6 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8003248:	2003      	movs	r0, #3
 800324a:	e754      	b.n	80030f6 <HAL_SPI_Transmit+0x30>
 800324c:	2003      	movs	r0, #3
 800324e:	e752      	b.n	80030f6 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8003250:	2003      	movs	r0, #3
 8003252:	e750      	b.n	80030f6 <HAL_SPI_Transmit+0x30>
 8003254:	2003      	movs	r0, #3
 8003256:	e74e      	b.n	80030f6 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8003258:	2001      	movs	r0, #1
 800325a:	e74c      	b.n	80030f6 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 800325c:	2002      	movs	r0, #2
 800325e:	e750      	b.n	8003102 <HAL_SPI_Transmit+0x3c>

08003260 <HAL_SPI_Transmit_DMA>:
  __HAL_LOCK(hspi);
 8003260:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003264:	2b01      	cmp	r3, #1
 8003266:	d05f      	beq.n	8003328 <HAL_SPI_Transmit_DMA+0xc8>
{
 8003268:	b510      	push	{r4, lr}
 800326a:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800326c:	2301      	movs	r3, #1
 800326e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 8003272:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d005      	beq.n	8003288 <HAL_SPI_Transmit_DMA+0x28>
    errorcode = HAL_BUSY;
 800327c:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800327e:	2200      	movs	r2, #0
 8003280:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd10      	pop	{r4, pc}
  if ((pData == NULL) || (Size == 0U))
 8003288:	2900      	cmp	r1, #0
 800328a:	d049      	beq.n	8003320 <HAL_SPI_Transmit_DMA+0xc0>
 800328c:	2a00      	cmp	r2, #0
 800328e:	d049      	beq.n	8003324 <HAL_SPI_Transmit_DMA+0xc4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003290:	2303      	movs	r3, #3
 8003292:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003296:	2300      	movs	r3, #0
 8003298:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800329a:	6301      	str	r1, [r0, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800329c:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->TxXferCount = Size;
 800329e:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032a0:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxISR       = NULL;
 80032a2:	6443      	str	r3, [r0, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032a4:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80032a6:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032a8:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032aa:	6883      	ldr	r3, [r0, #8]
 80032ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b0:	d01c      	beq.n	80032ec <HAL_SPI_Transmit_DMA+0x8c>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80032b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80032b4:	4a1e      	ldr	r2, [pc, #120]	; (8003330 <HAL_SPI_Transmit_DMA+0xd0>)
 80032b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80032b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80032ba:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <HAL_SPI_Transmit_DMA+0xd4>)
 80032bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80032be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80032c0:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <HAL_SPI_Transmit_DMA+0xd8>)
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback = NULL;
 80032c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80032c6:	2200      	movs	r2, #0
 80032c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032ca:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 80032cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032ce:	320c      	adds	r2, #12
 80032d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80032d2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80032d4:	f7fe fad4 	bl	8001880 <HAL_DMA_Start_IT>
 80032d8:	4603      	mov	r3, r0
 80032da:	b168      	cbz	r0, 80032f8 <HAL_SPI_Transmit_DMA+0x98>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032de:	f043 0310 	orr.w	r3, r3, #16
 80032e2:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 80032ea:	e7c8      	b.n	800327e <HAL_SPI_Transmit_DMA+0x1e>
    SPI_1LINE_TX(hspi);
 80032ec:	6802      	ldr	r2, [r0, #0]
 80032ee:	6813      	ldr	r3, [r2, #0]
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e7dc      	b.n	80032b2 <HAL_SPI_Transmit_DMA+0x52>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032f8:	6822      	ldr	r2, [r4, #0]
 80032fa:	6811      	ldr	r1, [r2, #0]
 80032fc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003300:	d103      	bne.n	800330a <HAL_SPI_Transmit_DMA+0xaa>
    __HAL_SPI_ENABLE(hspi);
 8003302:	6811      	ldr	r1, [r2, #0]
 8003304:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003308:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800330a:	6821      	ldr	r1, [r4, #0]
 800330c:	684a      	ldr	r2, [r1, #4]
 800330e:	f042 0220 	orr.w	r2, r2, #32
 8003312:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003314:	6821      	ldr	r1, [r4, #0]
 8003316:	684a      	ldr	r2, [r1, #4]
 8003318:	f042 0202 	orr.w	r2, r2, #2
 800331c:	604a      	str	r2, [r1, #4]
 800331e:	e7ae      	b.n	800327e <HAL_SPI_Transmit_DMA+0x1e>
    errorcode = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e7ac      	b.n	800327e <HAL_SPI_Transmit_DMA+0x1e>
 8003324:	2301      	movs	r3, #1
 8003326:	e7aa      	b.n	800327e <HAL_SPI_Transmit_DMA+0x1e>
  __HAL_LOCK(hspi);
 8003328:	2302      	movs	r3, #2
}
 800332a:	4618      	mov	r0, r3
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	08003341 	.word	0x08003341
 8003334:	0800336f 	.word	0x0800336f
 8003338:	0800334d 	.word	0x0800334d

0800333c <HAL_SPI_TxCpltCallback>:
}
 800333c:	4770      	bx	lr

0800333e <HAL_SPI_TxHalfCpltCallback>:
}
 800333e:	4770      	bx	lr

08003340 <SPI_DMAHalfTransmitCplt>:
{
 8003340:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003342:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003344:	f7ff fffb 	bl	800333e <HAL_SPI_TxHalfCpltCallback>
}
 8003348:	bd08      	pop	{r3, pc}

0800334a <HAL_SPI_ErrorCallback>:
}
 800334a:	4770      	bx	lr

0800334c <SPI_DMAError>:
{
 800334c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800334e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003350:	6802      	ldr	r2, [r0, #0]
 8003352:	6853      	ldr	r3, [r2, #4]
 8003354:	f023 0303 	bic.w	r3, r3, #3
 8003358:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800335a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800335c:	f043 0310 	orr.w	r3, r3, #16
 8003360:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003362:	2301      	movs	r3, #1
 8003364:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8003368:	f7ff ffef 	bl	800334a <HAL_SPI_ErrorCallback>
}
 800336c:	bd08      	pop	{r3, pc}

0800336e <SPI_DMATransmitCplt>:
{
 800336e:	b530      	push	{r4, r5, lr}
 8003370:	b083      	sub	sp, #12
 8003372:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003374:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8003376:	f7fd ff35 	bl	80011e4 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800337a:	682b      	ldr	r3, [r5, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f013 0f20 	tst.w	r3, #32
 8003382:	d123      	bne.n	80033cc <SPI_DMATransmitCplt+0x5e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003384:	6822      	ldr	r2, [r4, #0]
 8003386:	6853      	ldr	r3, [r2, #4]
 8003388:	f023 0320 	bic.w	r3, r3, #32
 800338c:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800338e:	6822      	ldr	r2, [r4, #0]
 8003390:	6853      	ldr	r3, [r2, #4]
 8003392:	f023 0302 	bic.w	r3, r3, #2
 8003396:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003398:	4602      	mov	r2, r0
 800339a:	2164      	movs	r1, #100	; 0x64
 800339c:	4620      	mov	r0, r4
 800339e:	f7ff fe3f 	bl	8003020 <SPI_EndRxTxTransaction>
 80033a2:	b118      	cbz	r0, 80033ac <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033a6:	f043 0320 	orr.w	r3, r3, #32
 80033aa:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033ac:	68a3      	ldr	r3, [r4, #8]
 80033ae:	b933      	cbnz	r3, 80033be <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	9201      	str	r2, [sp, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033ca:	b923      	cbnz	r3, 80033d6 <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 80033cc:	4620      	mov	r0, r4
 80033ce:	f7ff ffb5 	bl	800333c <HAL_SPI_TxCpltCallback>
}
 80033d2:	b003      	add	sp, #12
 80033d4:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 80033d6:	4620      	mov	r0, r4
 80033d8:	f7ff ffb7 	bl	800334a <HAL_SPI_ErrorCallback>
      return;
 80033dc:	e7f9      	b.n	80033d2 <SPI_DMATransmitCplt+0x64>
	...

080033e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033e0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e2:	6a03      	ldr	r3, [r0, #32]
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ee:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033f0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f4:	680d      	ldr	r5, [r1, #0]
 80033f6:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033fa:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033fe:	688b      	ldr	r3, [r1, #8]
 8003400:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003402:	4d0d      	ldr	r5, [pc, #52]	; (8003438 <TIM_OC1_SetConfig+0x58>)
 8003404:	42a8      	cmp	r0, r5
 8003406:	d009      	beq.n	800341c <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003408:	4d0b      	ldr	r5, [pc, #44]	; (8003438 <TIM_OC1_SetConfig+0x58>)
 800340a:	42a8      	cmp	r0, r5
 800340c:	d00d      	beq.n	800342a <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800340e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003410:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003412:	684a      	ldr	r2, [r1, #4]
 8003414:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003416:	6203      	str	r3, [r0, #32]
}
 8003418:	bc70      	pop	{r4, r5, r6}
 800341a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 800341c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003420:	68cc      	ldr	r4, [r1, #12]
 8003422:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8003424:	f023 0304 	bic.w	r3, r3, #4
 8003428:	e7ee      	b.n	8003408 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800342a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 800342e:	694c      	ldr	r4, [r1, #20]
 8003430:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8003432:	698a      	ldr	r2, [r1, #24]
 8003434:	4322      	orrs	r2, r4
 8003436:	e7ea      	b.n	800340e <TIM_OC1_SetConfig+0x2e>
 8003438:	40012c00 	.word	0x40012c00

0800343c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800343c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800343e:	6a03      	ldr	r3, [r0, #32]
 8003440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003444:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003446:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003448:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800344a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800344c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003450:	680d      	ldr	r5, [r1, #0]
 8003452:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003458:	688d      	ldr	r5, [r1, #8]
 800345a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800345e:	4d0f      	ldr	r5, [pc, #60]	; (800349c <TIM_OC3_SetConfig+0x60>)
 8003460:	42a8      	cmp	r0, r5
 8003462:	d009      	beq.n	8003478 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003464:	4d0d      	ldr	r5, [pc, #52]	; (800349c <TIM_OC3_SetConfig+0x60>)
 8003466:	42a8      	cmp	r0, r5
 8003468:	d00e      	beq.n	8003488 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800346c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800346e:	684a      	ldr	r2, [r1, #4]
 8003470:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003472:	6203      	str	r3, [r0, #32]
}
 8003474:	bc30      	pop	{r4, r5}
 8003476:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800347c:	68cd      	ldr	r5, [r1, #12]
 800347e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003486:	e7ed      	b.n	8003464 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003488:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800348c:	694d      	ldr	r5, [r1, #20]
 800348e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003492:	698d      	ldr	r5, [r1, #24]
 8003494:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003498:	e7e7      	b.n	800346a <TIM_OC3_SetConfig+0x2e>
 800349a:	bf00      	nop
 800349c:	40012c00 	.word	0x40012c00

080034a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034a2:	6a03      	ldr	r3, [r0, #32]
 80034a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ae:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034b0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b4:	680d      	ldr	r5, [r1, #0]
 80034b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034be:	688d      	ldr	r5, [r1, #8]
 80034c0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c4:	4d07      	ldr	r5, [pc, #28]	; (80034e4 <TIM_OC4_SetConfig+0x44>)
 80034c6:	42a8      	cmp	r0, r5
 80034c8:	d006      	beq.n	80034d8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034cc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034ce:	684a      	ldr	r2, [r1, #4]
 80034d0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d2:	6203      	str	r3, [r0, #32]
}
 80034d4:	bc30      	pop	{r4, r5}
 80034d6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034d8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034dc:	694d      	ldr	r5, [r1, #20]
 80034de:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80034e2:	e7f2      	b.n	80034ca <TIM_OC4_SetConfig+0x2a>
 80034e4:	40012c00 	.word	0x40012c00

080034e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034ea:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ec:	6a04      	ldr	r4, [r0, #32]
 80034ee:	f024 0401 	bic.w	r4, r4, #1
 80034f2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034f4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034f6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034fa:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034fe:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003502:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003504:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003506:	6203      	str	r3, [r0, #32]
}
 8003508:	bc10      	pop	{r4}
 800350a:	4770      	bx	lr

0800350c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800350c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800350e:	6a03      	ldr	r3, [r0, #32]
 8003510:	f023 0310 	bic.w	r3, r3, #16
 8003514:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003516:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003518:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800351a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800351e:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003526:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800352a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800352c:	6203      	str	r3, [r0, #32]
}
 800352e:	bc10      	pop	{r4}
 8003530:	4770      	bx	lr

08003532 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003532:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003538:	4319      	orrs	r1, r3
 800353a:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353e:	6081      	str	r1, [r0, #8]
}
 8003540:	4770      	bx	lr

08003542 <HAL_TIM_Base_MspInit>:
}
 8003542:	4770      	bx	lr

08003544 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	2302      	movs	r3, #2
 8003546:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800354a:	6802      	ldr	r2, [r0, #0]
 800354c:	6893      	ldr	r3, [r2, #8]
 800354e:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003552:	2b06      	cmp	r3, #6
 8003554:	d003      	beq.n	800355e <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 8003556:	6813      	ldr	r3, [r2, #0]
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800355e:	2301      	movs	r3, #1
 8003560:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8003564:	2000      	movs	r0, #0
 8003566:	4770      	bx	lr

08003568 <HAL_TIM_PWM_MspInit>:
}
 8003568:	4770      	bx	lr
	...

0800356c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800356c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800356e:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <TIM_Base_SetConfig+0x70>)
 8003570:	4290      	cmp	r0, r2
 8003572:	d00a      	beq.n	800358a <TIM_Base_SetConfig+0x1e>
 8003574:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003578:	d007      	beq.n	800358a <TIM_Base_SetConfig+0x1e>
 800357a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800357e:	4290      	cmp	r0, r2
 8003580:	d003      	beq.n	800358a <TIM_Base_SetConfig+0x1e>
 8003582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003586:	4290      	cmp	r0, r2
 8003588:	d103      	bne.n	8003592 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800358a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800358e:	684a      	ldr	r2, [r1, #4]
 8003590:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003592:	4a12      	ldr	r2, [pc, #72]	; (80035dc <TIM_Base_SetConfig+0x70>)
 8003594:	4290      	cmp	r0, r2
 8003596:	d00a      	beq.n	80035ae <TIM_Base_SetConfig+0x42>
 8003598:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800359c:	d007      	beq.n	80035ae <TIM_Base_SetConfig+0x42>
 800359e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80035a2:	4290      	cmp	r0, r2
 80035a4:	d003      	beq.n	80035ae <TIM_Base_SetConfig+0x42>
 80035a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035aa:	4290      	cmp	r0, r2
 80035ac:	d103      	bne.n	80035b6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035b2:	68ca      	ldr	r2, [r1, #12]
 80035b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ba:	694a      	ldr	r2, [r1, #20]
 80035bc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80035be:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c0:	688b      	ldr	r3, [r1, #8]
 80035c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80035c4:	680b      	ldr	r3, [r1, #0]
 80035c6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c8:	4b04      	ldr	r3, [pc, #16]	; (80035dc <TIM_Base_SetConfig+0x70>)
 80035ca:	4298      	cmp	r0, r3
 80035cc:	d002      	beq.n	80035d4 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 80035ce:	2301      	movs	r3, #1
 80035d0:	6143      	str	r3, [r0, #20]
}
 80035d2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80035d4:	690b      	ldr	r3, [r1, #16]
 80035d6:	6303      	str	r3, [r0, #48]	; 0x30
 80035d8:	e7f9      	b.n	80035ce <TIM_Base_SetConfig+0x62>
 80035da:	bf00      	nop
 80035dc:	40012c00 	.word	0x40012c00

080035e0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80035e0:	b1a8      	cbz	r0, 800360e <HAL_TIM_Base_Init+0x2e>
{
 80035e2:	b510      	push	{r4, lr}
 80035e4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80035e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035ea:	b15b      	cbz	r3, 8003604 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	2302      	movs	r3, #2
 80035ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f2:	1d21      	adds	r1, r4, #4
 80035f4:	6820      	ldr	r0, [r4, #0]
 80035f6:	f7ff ffb9 	bl	800356c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003600:	2000      	movs	r0, #0
}
 8003602:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003604:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003608:	f7ff ff9b 	bl	8003542 <HAL_TIM_Base_MspInit>
 800360c:	e7ee      	b.n	80035ec <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800360e:	2001      	movs	r0, #1
}
 8003610:	4770      	bx	lr

08003612 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003612:	b1a8      	cbz	r0, 8003640 <HAL_TIM_PWM_Init+0x2e>
{
 8003614:	b510      	push	{r4, lr}
 8003616:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003618:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800361c:	b15b      	cbz	r3, 8003636 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800361e:	2302      	movs	r3, #2
 8003620:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003624:	1d21      	adds	r1, r4, #4
 8003626:	6820      	ldr	r0, [r4, #0]
 8003628:	f7ff ffa0 	bl	800356c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800362c:	2301      	movs	r3, #1
 800362e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003632:	2000      	movs	r0, #0
}
 8003634:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003636:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800363a:	f7ff ff95 	bl	8003568 <HAL_TIM_PWM_MspInit>
 800363e:	e7ee      	b.n	800361e <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003640:	2001      	movs	r0, #1
}
 8003642:	4770      	bx	lr

08003644 <TIM_OC2_SetConfig>:
{
 8003644:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003646:	6a03      	ldr	r3, [r0, #32]
 8003648:	f023 0310 	bic.w	r3, r3, #16
 800364c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800364e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003650:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003652:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003654:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003658:	680d      	ldr	r5, [r1, #0]
 800365a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800365e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003662:	688d      	ldr	r5, [r1, #8]
 8003664:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003668:	4d0e      	ldr	r5, [pc, #56]	; (80036a4 <TIM_OC2_SetConfig+0x60>)
 800366a:	42a8      	cmp	r0, r5
 800366c:	d009      	beq.n	8003682 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800366e:	4d0d      	ldr	r5, [pc, #52]	; (80036a4 <TIM_OC2_SetConfig+0x60>)
 8003670:	42a8      	cmp	r0, r5
 8003672:	d00e      	beq.n	8003692 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8003674:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003676:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003678:	684a      	ldr	r2, [r1, #4]
 800367a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800367c:	6203      	str	r3, [r0, #32]
}
 800367e:	bc30      	pop	{r4, r5}
 8003680:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003686:	68cd      	ldr	r5, [r1, #12]
 8003688:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800368c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003690:	e7ed      	b.n	800366e <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003692:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003696:	694d      	ldr	r5, [r1, #20]
 8003698:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800369c:	698d      	ldr	r5, [r1, #24]
 800369e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80036a2:	e7e7      	b.n	8003674 <TIM_OC2_SetConfig+0x30>
 80036a4:	40012c00 	.word	0x40012c00

080036a8 <HAL_TIM_PWM_ConfigChannel>:
{
 80036a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80036aa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d066      	beq.n	8003780 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80036b2:	460d      	mov	r5, r1
 80036b4:	4604      	mov	r4, r0
 80036b6:	2301      	movs	r3, #1
 80036b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	2302      	movs	r3, #2
 80036be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80036c2:	2a0c      	cmp	r2, #12
 80036c4:	d81a      	bhi.n	80036fc <HAL_TIM_PWM_ConfigChannel+0x54>
 80036c6:	e8df f002 	tbb	[pc, r2]
 80036ca:	1907      	.short	0x1907
 80036cc:	19201919 	.word	0x19201919
 80036d0:	19341919 	.word	0x19341919
 80036d4:	1919      	.short	0x1919
 80036d6:	47          	.byte	0x47
 80036d7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036d8:	6800      	ldr	r0, [r0, #0]
 80036da:	f7ff fe81 	bl	80033e0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036de:	6822      	ldr	r2, [r4, #0]
 80036e0:	6993      	ldr	r3, [r2, #24]
 80036e2:	f043 0308 	orr.w	r3, r3, #8
 80036e6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036e8:	6822      	ldr	r2, [r4, #0]
 80036ea:	6993      	ldr	r3, [r2, #24]
 80036ec:	f023 0304 	bic.w	r3, r3, #4
 80036f0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036f2:	6822      	ldr	r2, [r4, #0]
 80036f4:	6993      	ldr	r3, [r2, #24]
 80036f6:	6929      	ldr	r1, [r5, #16]
 80036f8:	430b      	orrs	r3, r1
 80036fa:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003702:	2000      	movs	r0, #0
 8003704:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003708:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800370a:	6800      	ldr	r0, [r0, #0]
 800370c:	f7ff ff9a 	bl	8003644 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003710:	6822      	ldr	r2, [r4, #0]
 8003712:	6993      	ldr	r3, [r2, #24]
 8003714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003718:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800371a:	6822      	ldr	r2, [r4, #0]
 800371c:	6993      	ldr	r3, [r2, #24]
 800371e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003722:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003724:	6822      	ldr	r2, [r4, #0]
 8003726:	6993      	ldr	r3, [r2, #24]
 8003728:	6929      	ldr	r1, [r5, #16]
 800372a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800372e:	6193      	str	r3, [r2, #24]
      break;
 8003730:	e7e4      	b.n	80036fc <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003732:	6800      	ldr	r0, [r0, #0]
 8003734:	f7ff fe82 	bl	800343c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003738:	6822      	ldr	r2, [r4, #0]
 800373a:	69d3      	ldr	r3, [r2, #28]
 800373c:	f043 0308 	orr.w	r3, r3, #8
 8003740:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003742:	6822      	ldr	r2, [r4, #0]
 8003744:	69d3      	ldr	r3, [r2, #28]
 8003746:	f023 0304 	bic.w	r3, r3, #4
 800374a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800374c:	6822      	ldr	r2, [r4, #0]
 800374e:	69d3      	ldr	r3, [r2, #28]
 8003750:	6929      	ldr	r1, [r5, #16]
 8003752:	430b      	orrs	r3, r1
 8003754:	61d3      	str	r3, [r2, #28]
      break;
 8003756:	e7d1      	b.n	80036fc <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003758:	6800      	ldr	r0, [r0, #0]
 800375a:	f7ff fea1 	bl	80034a0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800375e:	6822      	ldr	r2, [r4, #0]
 8003760:	69d3      	ldr	r3, [r2, #28]
 8003762:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003766:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003768:	6822      	ldr	r2, [r4, #0]
 800376a:	69d3      	ldr	r3, [r2, #28]
 800376c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003770:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003772:	6822      	ldr	r2, [r4, #0]
 8003774:	69d3      	ldr	r3, [r2, #28]
 8003776:	6929      	ldr	r1, [r5, #16]
 8003778:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800377c:	61d3      	str	r3, [r2, #28]
      break;
 800377e:	e7bd      	b.n	80036fc <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8003780:	2002      	movs	r0, #2
 8003782:	e7c1      	b.n	8003708 <HAL_TIM_PWM_ConfigChannel+0x60>

08003784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003784:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003786:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003788:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800378c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003790:	430b      	orrs	r3, r1
 8003792:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003794:	6083      	str	r3, [r0, #8]
}
 8003796:	bc10      	pop	{r4}
 8003798:	4770      	bx	lr

0800379a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800379a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d066      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0xd6>
{
 80037a2:	b510      	push	{r4, lr}
 80037a4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80037a6:	2301      	movs	r3, #1
 80037a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	2302      	movs	r3, #2
 80037ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80037b2:	6802      	ldr	r2, [r0, #0]
 80037b4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80037be:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80037c0:	680b      	ldr	r3, [r1, #0]
 80037c2:	2b40      	cmp	r3, #64	; 0x40
 80037c4:	d04a      	beq.n	800385c <HAL_TIM_ConfigClockSource+0xc2>
 80037c6:	d913      	bls.n	80037f0 <HAL_TIM_ConfigClockSource+0x56>
 80037c8:	2b60      	cmp	r3, #96	; 0x60
 80037ca:	d03d      	beq.n	8003848 <HAL_TIM_ConfigClockSource+0xae>
 80037cc:	d91e      	bls.n	800380c <HAL_TIM_ConfigClockSource+0x72>
 80037ce:	2b70      	cmp	r3, #112	; 0x70
 80037d0:	d028      	beq.n	8003824 <HAL_TIM_ConfigClockSource+0x8a>
 80037d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d6:	d130      	bne.n	800383a <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80037d8:	68cb      	ldr	r3, [r1, #12]
 80037da:	684a      	ldr	r2, [r1, #4]
 80037dc:	6889      	ldr	r1, [r1, #8]
 80037de:	6800      	ldr	r0, [r0, #0]
 80037e0:	f7ff ffd0 	bl	8003784 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037e4:	6822      	ldr	r2, [r4, #0]
 80037e6:	6893      	ldr	r3, [r2, #8]
 80037e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ec:	6093      	str	r3, [r2, #8]
      break;
 80037ee:	e024      	b.n	800383a <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d006      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x68>
 80037f4:	d904      	bls.n	8003800 <HAL_TIM_ConfigClockSource+0x66>
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d003      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x68>
 80037fa:	2b30      	cmp	r3, #48	; 0x30
 80037fc:	d001      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x68>
 80037fe:	e01c      	b.n	800383a <HAL_TIM_ConfigClockSource+0xa0>
 8003800:	b9db      	cbnz	r3, 800383a <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003802:	4619      	mov	r1, r3
 8003804:	6820      	ldr	r0, [r4, #0]
 8003806:	f7ff fe94 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 800380a:	e016      	b.n	800383a <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 800380c:	2b50      	cmp	r3, #80	; 0x50
 800380e:	d114      	bne.n	800383a <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003810:	68ca      	ldr	r2, [r1, #12]
 8003812:	6849      	ldr	r1, [r1, #4]
 8003814:	6800      	ldr	r0, [r0, #0]
 8003816:	f7ff fe67 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800381a:	2150      	movs	r1, #80	; 0x50
 800381c:	6820      	ldr	r0, [r4, #0]
 800381e:	f7ff fe88 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8003822:	e00a      	b.n	800383a <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8003824:	68cb      	ldr	r3, [r1, #12]
 8003826:	684a      	ldr	r2, [r1, #4]
 8003828:	6889      	ldr	r1, [r1, #8]
 800382a:	6800      	ldr	r0, [r0, #0]
 800382c:	f7ff ffaa 	bl	8003784 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003830:	6822      	ldr	r2, [r4, #0]
 8003832:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003834:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003838:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800383a:	2301      	movs	r3, #1
 800383c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003840:	2000      	movs	r0, #0
 8003842:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003846:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003848:	68ca      	ldr	r2, [r1, #12]
 800384a:	6849      	ldr	r1, [r1, #4]
 800384c:	6800      	ldr	r0, [r0, #0]
 800384e:	f7ff fe5d 	bl	800350c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003852:	2160      	movs	r1, #96	; 0x60
 8003854:	6820      	ldr	r0, [r4, #0]
 8003856:	f7ff fe6c 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 800385a:	e7ee      	b.n	800383a <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800385c:	68ca      	ldr	r2, [r1, #12]
 800385e:	6849      	ldr	r1, [r1, #4]
 8003860:	6800      	ldr	r0, [r0, #0]
 8003862:	f7ff fe41 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003866:	2140      	movs	r1, #64	; 0x40
 8003868:	6820      	ldr	r0, [r4, #0]
 800386a:	f7ff fe62 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 800386e:	e7e4      	b.n	800383a <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8003870:	2002      	movs	r0, #2
}
 8003872:	4770      	bx	lr

08003874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003874:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003876:	f001 011f 	and.w	r1, r1, #31
 800387a:	2301      	movs	r3, #1
 800387c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003880:	6a03      	ldr	r3, [r0, #32]
 8003882:	ea23 0304 	bic.w	r3, r3, r4
 8003886:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003888:	6a03      	ldr	r3, [r0, #32]
 800388a:	408a      	lsls	r2, r1
 800388c:	4313      	orrs	r3, r2
 800388e:	6203      	str	r3, [r0, #32]
}
 8003890:	bc10      	pop	{r4}
 8003892:	4770      	bx	lr

08003894 <HAL_TIM_PWM_Start>:
{
 8003894:	b510      	push	{r4, lr}
 8003896:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003898:	2201      	movs	r2, #1
 800389a:	6800      	ldr	r0, [r0, #0]
 800389c:	f7ff ffea 	bl	8003874 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <HAL_TIM_PWM_Start+0x38>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038a8:	6822      	ldr	r2, [r4, #0]
 80038aa:	6893      	ldr	r3, [r2, #8]
 80038ac:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b0:	2b06      	cmp	r3, #6
 80038b2:	d003      	beq.n	80038bc <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 80038b4:	6813      	ldr	r3, [r2, #0]
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	6013      	str	r3, [r2, #0]
}
 80038bc:	2000      	movs	r0, #0
 80038be:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80038c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038c6:	645a      	str	r2, [r3, #68]	; 0x44
 80038c8:	e7ee      	b.n	80038a8 <HAL_TIM_PWM_Start+0x14>
 80038ca:	bf00      	nop
 80038cc:	40012c00 	.word	0x40012c00

080038d0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d0:	6802      	ldr	r2, [r0, #0]
 80038d2:	68d3      	ldr	r3, [r2, #12]
 80038d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038d8:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038da:	6802      	ldr	r2, [r0, #0]
 80038dc:	6953      	ldr	r3, [r2, #20]
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038e4:	2320      	movs	r3, #32
 80038e6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80038ea:	4770      	bx	lr

080038ec <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038ec:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b21      	cmp	r3, #33	; 0x21
 80038f4:	d12a      	bne.n	800394c <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038f6:	6883      	ldr	r3, [r0, #8]
 80038f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fc:	d016      	beq.n	800392c <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038fe:	6a03      	ldr	r3, [r0, #32]
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	6202      	str	r2, [r0, #32]
 8003904:	781a      	ldrb	r2, [r3, #0]
 8003906:	6803      	ldr	r3, [r0, #0]
 8003908:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800390a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800390c:	3b01      	subs	r3, #1
 800390e:	b29b      	uxth	r3, r3
 8003910:	84c3      	strh	r3, [r0, #38]	; 0x26
 8003912:	b9eb      	cbnz	r3, 8003950 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003914:	6802      	ldr	r2, [r0, #0]
 8003916:	68d3      	ldr	r3, [r2, #12]
 8003918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800391c:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800391e:	6802      	ldr	r2, [r0, #0]
 8003920:	68d3      	ldr	r3, [r2, #12]
 8003922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003926:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8003928:	2000      	movs	r0, #0
 800392a:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800392c:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	6802      	ldr	r2, [r0, #0]
 8003932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003936:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003938:	6903      	ldr	r3, [r0, #16]
 800393a:	b91b      	cbnz	r3, 8003944 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 800393c:	6a03      	ldr	r3, [r0, #32]
 800393e:	3302      	adds	r3, #2
 8003940:	6203      	str	r3, [r0, #32]
 8003942:	e7e2      	b.n	800390a <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8003944:	6a03      	ldr	r3, [r0, #32]
 8003946:	3301      	adds	r3, #1
 8003948:	6203      	str	r3, [r0, #32]
 800394a:	e7de      	b.n	800390a <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 800394c:	2002      	movs	r0, #2
 800394e:	4770      	bx	lr
    return HAL_OK;
 8003950:	2000      	movs	r0, #0
  }
}
 8003952:	4770      	bx	lr

08003954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003958:	6802      	ldr	r2, [r0, #0]
 800395a:	6913      	ldr	r3, [r2, #16]
 800395c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003960:	68c1      	ldr	r1, [r0, #12]
 8003962:	430b      	orrs	r3, r1
 8003964:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003966:	6883      	ldr	r3, [r0, #8]
 8003968:	6902      	ldr	r2, [r0, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	6942      	ldr	r2, [r0, #20]
 800396e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003970:	6801      	ldr	r1, [r0, #0]
 8003972:	68cb      	ldr	r3, [r1, #12]
 8003974:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003978:	f023 030c 	bic.w	r3, r3, #12
 800397c:	4313      	orrs	r3, r2
 800397e:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003980:	6802      	ldr	r2, [r0, #0]
 8003982:	6953      	ldr	r3, [r2, #20]
 8003984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003988:	6981      	ldr	r1, [r0, #24]
 800398a:	430b      	orrs	r3, r1
 800398c:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800398e:	6802      	ldr	r2, [r0, #0]
 8003990:	4b21      	ldr	r3, [pc, #132]	; (8003a18 <UART_SetConfig+0xc4>)
 8003992:	429a      	cmp	r2, r3
 8003994:	d01f      	beq.n	80039d6 <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003996:	f7ff fa51 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800399a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800399e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80039a2:	6863      	ldr	r3, [r4, #4]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80039aa:	4d1c      	ldr	r5, [pc, #112]	; (8003a1c <UART_SetConfig+0xc8>)
 80039ac:	fba5 3200 	umull	r3, r2, r5, r0
 80039b0:	0951      	lsrs	r1, r2, #5
 80039b2:	2264      	movs	r2, #100	; 0x64
 80039b4:	fb02 0211 	mls	r2, r2, r1, r0
 80039b8:	0113      	lsls	r3, r2, #4
 80039ba:	3332      	adds	r3, #50	; 0x32
 80039bc:	fba5 2303 	umull	r2, r3, r5, r3
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039c6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	6821      	ldr	r1, [r4, #0]
 80039d0:	4413      	add	r3, r2
 80039d2:	608b      	str	r3, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80039d4:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80039d6:	f7ff fa41 	bl	8002e5c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80039de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80039e2:	6863      	ldr	r3, [r4, #4]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80039ea:	4d0c      	ldr	r5, [pc, #48]	; (8003a1c <UART_SetConfig+0xc8>)
 80039ec:	fba5 3200 	umull	r3, r2, r5, r0
 80039f0:	0951      	lsrs	r1, r2, #5
 80039f2:	2264      	movs	r2, #100	; 0x64
 80039f4:	fb02 0211 	mls	r2, r2, r1, r0
 80039f8:	0113      	lsls	r3, r2, #4
 80039fa:	3332      	adds	r3, #50	; 0x32
 80039fc:	fba5 2303 	umull	r2, r3, r5, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a06:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	6821      	ldr	r1, [r4, #0]
 8003a10:	4413      	add	r3, r2
 8003a12:	608b      	str	r3, [r1, #8]
 8003a14:	e7de      	b.n	80039d4 <UART_SetConfig+0x80>
 8003a16:	bf00      	nop
 8003a18:	40013800 	.word	0x40013800
 8003a1c:	51eb851f 	.word	0x51eb851f

08003a20 <UART_WaitOnFlagUntilTimeout>:
{
 8003a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a24:	4605      	mov	r5, r0
 8003a26:	460f      	mov	r7, r1
 8003a28:	4616      	mov	r6, r2
 8003a2a:	4698      	mov	r8, r3
 8003a2c:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2e:	682b      	ldr	r3, [r5, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	ea37 0303 	bics.w	r3, r7, r3
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	42b3      	cmp	r3, r6
 8003a3e:	d11d      	bne.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8003a40:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003a44:	d0f3      	beq.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a46:	b12c      	cbz	r4, 8003a54 <UART_WaitOnFlagUntilTimeout+0x34>
 8003a48:	f7fd fbcc 	bl	80011e4 <HAL_GetTick>
 8003a4c:	eba0 0008 	sub.w	r0, r0, r8
 8003a50:	42a0      	cmp	r0, r4
 8003a52:	d9ec      	bls.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a54:	682a      	ldr	r2, [r5, #0]
 8003a56:	68d3      	ldr	r3, [r2, #12]
 8003a58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a5c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5e:	682a      	ldr	r2, [r5, #0]
 8003a60:	6953      	ldr	r3, [r2, #20]
 8003a62:	f023 0301 	bic.w	r3, r3, #1
 8003a66:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003a68:	2320      	movs	r3, #32
 8003a6a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003a72:	2300      	movs	r3, #0
 8003a74:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8003a78:	2003      	movs	r0, #3
 8003a7a:	e000      	b.n	8003a7e <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8003a7c:	2000      	movs	r0, #0
}
 8003a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a82 <HAL_UART_Init>:
  if (huart == NULL)
 8003a82:	b358      	cbz	r0, 8003adc <HAL_UART_Init+0x5a>
{
 8003a84:	b510      	push	{r4, lr}
 8003a86:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003a88:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003a8c:	b30b      	cbz	r3, 8003ad2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003a8e:	2324      	movs	r3, #36	; 0x24
 8003a90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003a94:	6822      	ldr	r2, [r4, #0]
 8003a96:	68d3      	ldr	r3, [r2, #12]
 8003a98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a9c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f7ff ff58 	bl	8003954 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa4:	6822      	ldr	r2, [r4, #0]
 8003aa6:	6913      	ldr	r3, [r2, #16]
 8003aa8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003aac:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aae:	6822      	ldr	r2, [r4, #0]
 8003ab0:	6953      	ldr	r3, [r2, #20]
 8003ab2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003ab6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003ab8:	6822      	ldr	r2, [r4, #0]
 8003aba:	68d3      	ldr	r3, [r2, #12]
 8003abc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ac0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ac6:	2320      	movs	r3, #32
 8003ac8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003acc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003ad0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003ad2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003ad6:	f004 f9c1 	bl	8007e5c <HAL_UART_MspInit>
 8003ada:	e7d8      	b.n	8003a8e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003adc:	2001      	movs	r0, #1
}
 8003ade:	4770      	bx	lr

08003ae0 <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d030      	beq.n	8003b46 <HAL_HalfDuplex_Init+0x66>
{
 8003ae4:	b510      	push	{r4, lr}
 8003ae6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003ae8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003aec:	b333      	cbz	r3, 8003b3c <HAL_HalfDuplex_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003aee:	2324      	movs	r3, #36	; 0x24
 8003af0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003af4:	6822      	ldr	r2, [r4, #0]
 8003af6:	68d3      	ldr	r3, [r2, #12]
 8003af8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003afc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003afe:	4620      	mov	r0, r4
 8003b00:	f7ff ff28 	bl	8003954 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b04:	6822      	ldr	r2, [r4, #0]
 8003b06:	6913      	ldr	r3, [r2, #16]
 8003b08:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003b0c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003b0e:	6822      	ldr	r2, [r4, #0]
 8003b10:	6953      	ldr	r3, [r2, #20]
 8003b12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003b16:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003b18:	6822      	ldr	r2, [r4, #0]
 8003b1a:	6953      	ldr	r3, [r2, #20]
 8003b1c:	f043 0308 	orr.w	r3, r3, #8
 8003b20:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003b22:	6822      	ldr	r2, [r4, #0]
 8003b24:	68d3      	ldr	r3, [r2, #12]
 8003b26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b2a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b30:	2320      	movs	r3, #32
 8003b32:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b36:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003b3a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003b3c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003b40:	f004 f98c 	bl	8007e5c <HAL_UART_MspInit>
 8003b44:	e7d3      	b.n	8003aee <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 8003b46:	2001      	movs	r0, #1
}
 8003b48:	4770      	bx	lr

08003b4a <HAL_UART_Transmit>:
{
 8003b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003b52:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	d155      	bne.n	8003c08 <HAL_UART_Transmit+0xbe>
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	460d      	mov	r5, r1
 8003b60:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003b62:	2900      	cmp	r1, #0
 8003b64:	d055      	beq.n	8003c12 <HAL_UART_Transmit+0xc8>
 8003b66:	2a00      	cmp	r2, #0
 8003b68:	d055      	beq.n	8003c16 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8003b6a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d053      	beq.n	8003c1a <HAL_UART_Transmit+0xd0>
 8003b72:	2301      	movs	r3, #1
 8003b74:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b7c:	2321      	movs	r3, #33	; 0x21
 8003b7e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003b82:	f7fd fb2f 	bl	80011e4 <HAL_GetTick>
 8003b86:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003b88:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b8c:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b90:	e010      	b.n	8003bb4 <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b92:	9600      	str	r6, [sp, #0]
 8003b94:	463b      	mov	r3, r7
 8003b96:	2200      	movs	r2, #0
 8003b98:	2180      	movs	r1, #128	; 0x80
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f7ff ff40 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	d13c      	bne.n	8003c1e <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003ba4:	882b      	ldrh	r3, [r5, #0]
 8003ba6:	6822      	ldr	r2, [r4, #0]
 8003ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bac:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003bae:	6923      	ldr	r3, [r4, #16]
 8003bb0:	b9c3      	cbnz	r3, 8003be4 <HAL_UART_Transmit+0x9a>
          pData += 2U;
 8003bb2:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8003bb4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	b1b3      	cbz	r3, 8003be8 <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8003bba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bc2:	68a3      	ldr	r3, [r4, #8]
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc8:	d0e3      	beq.n	8003b92 <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bca:	9600      	str	r6, [sp, #0]
 8003bcc:	463b      	mov	r3, r7
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2180      	movs	r1, #128	; 0x80
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f7ff ff24 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 8003bd8:	bb18      	cbnz	r0, 8003c22 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003bda:	782a      	ldrb	r2, [r5, #0]
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	605a      	str	r2, [r3, #4]
 8003be0:	3501      	adds	r5, #1
 8003be2:	e7e7      	b.n	8003bb4 <HAL_UART_Transmit+0x6a>
          pData += 1U;
 8003be4:	3501      	adds	r5, #1
 8003be6:	e7e5      	b.n	8003bb4 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be8:	9600      	str	r6, [sp, #0]
 8003bea:	463b      	mov	r3, r7
 8003bec:	2200      	movs	r2, #0
 8003bee:	2140      	movs	r1, #64	; 0x40
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f7ff ff15 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	b9a8      	cbnz	r0, 8003c26 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8003c00:	2200      	movs	r2, #0
 8003c02:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8003c06:	e000      	b.n	8003c0a <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	b002      	add	sp, #8
 8003c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e7f9      	b.n	8003c0a <HAL_UART_Transmit+0xc0>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e7f7      	b.n	8003c0a <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e7f5      	b.n	8003c0a <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e7f3      	b.n	8003c0a <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e7f1      	b.n	8003c0a <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e7ef      	b.n	8003c0a <HAL_UART_Transmit+0xc0>

08003c2a <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c2a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d120      	bne.n	8003c76 <HAL_UART_Receive_IT+0x4c>
    if ((pData == NULL) || (Size == 0U))
 8003c34:	b309      	cbz	r1, 8003c7a <HAL_UART_Receive_IT+0x50>
 8003c36:	b312      	cbz	r2, 8003c7e <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 8003c38:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d020      	beq.n	8003c82 <HAL_UART_Receive_IT+0x58>
    huart->pRxBuffPtr = pData;
 8003c40:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8003c42:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c44:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c4a:	2222      	movs	r2, #34	; 0x22
 8003c4c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8003c50:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c54:	6801      	ldr	r1, [r0, #0]
 8003c56:	68ca      	ldr	r2, [r1, #12]
 8003c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c5c:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c5e:	6801      	ldr	r1, [r0, #0]
 8003c60:	694a      	ldr	r2, [r1, #20]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c68:	6801      	ldr	r1, [r0, #0]
 8003c6a:	68ca      	ldr	r2, [r1, #12]
 8003c6c:	f042 0220 	orr.w	r2, r2, #32
 8003c70:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8003c72:	4618      	mov	r0, r3
 8003c74:	4770      	bx	lr
    return HAL_BUSY;
 8003c76:	2002      	movs	r0, #2
 8003c78:	4770      	bx	lr
      return HAL_ERROR;
 8003c7a:	2001      	movs	r0, #1
 8003c7c:	4770      	bx	lr
 8003c7e:	2001      	movs	r0, #1
 8003c80:	4770      	bx	lr
    __HAL_LOCK(huart);
 8003c82:	2002      	movs	r0, #2
}
 8003c84:	4770      	bx	lr

08003c86 <HAL_UART_TxCpltCallback>:
}
 8003c86:	4770      	bx	lr

08003c88 <UART_EndTransmit_IT>:
{
 8003c88:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c8a:	6801      	ldr	r1, [r0, #0]
 8003c8c:	68cb      	ldr	r3, [r1, #12]
 8003c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c92:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003c94:	2320      	movs	r3, #32
 8003c96:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003c9a:	f7ff fff4 	bl	8003c86 <HAL_UART_TxCpltCallback>
}
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	bd08      	pop	{r3, pc}

08003ca2 <UART_Receive_IT>:
{
 8003ca2:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ca4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b22      	cmp	r3, #34	; 0x22
 8003cac:	d145      	bne.n	8003d3a <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cae:	6883      	ldr	r3, [r0, #8]
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb4:	d00e      	beq.n	8003cd4 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cb6:	6903      	ldr	r3, [r0, #16]
 8003cb8:	bb03      	cbnz	r3, 8003cfc <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cba:	6803      	ldr	r3, [r0, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003cc0:	1c59      	adds	r1, r3, #1
 8003cc2:	6281      	str	r1, [r0, #40]	; 0x28
 8003cc4:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8003cc6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003cce:	b1f3      	cbz	r3, 8003d0e <UART_Receive_IT+0x6c>
    return HAL_OK;
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	e033      	b.n	8003d3c <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003cd4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cd6:	6903      	ldr	r3, [r0, #16]
 8003cd8:	b943      	cbnz	r3, 8003cec <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cda:	6803      	ldr	r3, [r0, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce2:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8003ce4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003ce6:	3302      	adds	r3, #2
 8003ce8:	6283      	str	r3, [r0, #40]	; 0x28
 8003cea:	e7ec      	b.n	8003cc6 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003cec:	6803      	ldr	r3, [r0, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8003cf4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	6283      	str	r3, [r0, #40]	; 0x28
 8003cfa:	e7e4      	b.n	8003cc6 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cfc:	6803      	ldr	r3, [r0, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003d02:	1c51      	adds	r1, r2, #1
 8003d04:	6281      	str	r1, [r0, #40]	; 0x28
 8003d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d0a:	7013      	strb	r3, [r2, #0]
 8003d0c:	e7db      	b.n	8003cc6 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d0e:	6802      	ldr	r2, [r0, #0]
 8003d10:	68d3      	ldr	r3, [r2, #12]
 8003d12:	f023 0320 	bic.w	r3, r3, #32
 8003d16:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d18:	6802      	ldr	r2, [r0, #0]
 8003d1a:	68d3      	ldr	r3, [r2, #12]
 8003d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d20:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d22:	6802      	ldr	r2, [r0, #0]
 8003d24:	6953      	ldr	r3, [r2, #20]
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	2320      	movs	r3, #32
 8003d2e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003d32:	f001 fced 	bl	8005710 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8003d36:	2000      	movs	r0, #0
 8003d38:	e000      	b.n	8003d3c <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8003d3a:	2002      	movs	r0, #2
}
 8003d3c:	bd08      	pop	{r3, pc}

08003d3e <HAL_UART_ErrorCallback>:
}
 8003d3e:	4770      	bx	lr

08003d40 <HAL_UART_IRQHandler>:
{
 8003d40:	b510      	push	{r4, lr}
 8003d42:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d44:	6802      	ldr	r2, [r0, #0]
 8003d46:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d48:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d4a:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8003d4c:	f013 000f 	ands.w	r0, r3, #15
 8003d50:	d105      	bne.n	8003d5e <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d52:	f013 0f20 	tst.w	r3, #32
 8003d56:	d002      	beq.n	8003d5e <HAL_UART_IRQHandler+0x1e>
 8003d58:	f011 0f20 	tst.w	r1, #32
 8003d5c:	d153      	bne.n	8003e06 <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	d067      	beq.n	8003e32 <HAL_UART_IRQHandler+0xf2>
 8003d62:	f012 0201 	ands.w	r2, r2, #1
 8003d66:	d102      	bne.n	8003d6e <HAL_UART_IRQHandler+0x2e>
 8003d68:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003d6c:	d061      	beq.n	8003e32 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d6e:	f013 0f01 	tst.w	r3, #1
 8003d72:	d006      	beq.n	8003d82 <HAL_UART_IRQHandler+0x42>
 8003d74:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003d78:	d003      	beq.n	8003d82 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003d7c:	f040 0001 	orr.w	r0, r0, #1
 8003d80:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d82:	f013 0f04 	tst.w	r3, #4
 8003d86:	d004      	beq.n	8003d92 <HAL_UART_IRQHandler+0x52>
 8003d88:	b11a      	cbz	r2, 8003d92 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d8a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003d8c:	f040 0002 	orr.w	r0, r0, #2
 8003d90:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d92:	f013 0f02 	tst.w	r3, #2
 8003d96:	d004      	beq.n	8003da2 <HAL_UART_IRQHandler+0x62>
 8003d98:	b11a      	cbz	r2, 8003da2 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003d9c:	f040 0004 	orr.w	r0, r0, #4
 8003da0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003da2:	f013 0f08 	tst.w	r3, #8
 8003da6:	d004      	beq.n	8003db2 <HAL_UART_IRQHandler+0x72>
 8003da8:	b11a      	cbz	r2, 8003db2 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003daa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003dac:	f042 0208 	orr.w	r2, r2, #8
 8003db0:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003db2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003db4:	2a00      	cmp	r2, #0
 8003db6:	d048      	beq.n	8003e4a <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003db8:	f013 0f20 	tst.w	r3, #32
 8003dbc:	d002      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x84>
 8003dbe:	f011 0f20 	tst.w	r1, #32
 8003dc2:	d124      	bne.n	8003e0e <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dcc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003dce:	f012 0f08 	tst.w	r2, #8
 8003dd2:	d100      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x96>
 8003dd4:	b33b      	cbz	r3, 8003e26 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f7ff fd7a 	bl	80038d0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003de4:	d01b      	beq.n	8003e1e <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dec:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003dee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003df0:	b18b      	cbz	r3, 8003e16 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003df2:	4a1a      	ldr	r2, [pc, #104]	; (8003e5c <HAL_UART_IRQHandler+0x11c>)
 8003df4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003df6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003df8:	f7fd fd7c 	bl	80018f4 <HAL_DMA_Abort_IT>
 8003dfc:	b328      	cbz	r0, 8003e4a <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dfe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003e00:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e02:	4798      	blx	r3
 8003e04:	e021      	b.n	8003e4a <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8003e06:	4620      	mov	r0, r4
 8003e08:	f7ff ff4b 	bl	8003ca2 <UART_Receive_IT>
      return;
 8003e0c:	e01d      	b.n	8003e4a <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f7ff ff47 	bl	8003ca2 <UART_Receive_IT>
 8003e14:	e7d6      	b.n	8003dc4 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8003e16:	4620      	mov	r0, r4
 8003e18:	f7ff ff91 	bl	8003d3e <HAL_UART_ErrorCallback>
 8003e1c:	e015      	b.n	8003e4a <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8003e1e:	4620      	mov	r0, r4
 8003e20:	f7ff ff8d 	bl	8003d3e <HAL_UART_ErrorCallback>
 8003e24:	e011      	b.n	8003e4a <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8003e26:	4620      	mov	r0, r4
 8003e28:	f7ff ff89 	bl	8003d3e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003e30:	e00b      	b.n	8003e4a <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e32:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003e36:	d002      	beq.n	8003e3e <HAL_UART_IRQHandler+0xfe>
 8003e38:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003e3c:	d106      	bne.n	8003e4c <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e3e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e42:	d002      	beq.n	8003e4a <HAL_UART_IRQHandler+0x10a>
 8003e44:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003e48:	d104      	bne.n	8003e54 <HAL_UART_IRQHandler+0x114>
}
 8003e4a:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f7ff fd4d 	bl	80038ec <UART_Transmit_IT>
    return;
 8003e52:	e7fa      	b.n	8003e4a <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8003e54:	4620      	mov	r0, r4
 8003e56:	f7ff ff17 	bl	8003c88 <UART_EndTransmit_IT>
    return;
 8003e5a:	e7f6      	b.n	8003e4a <HAL_UART_IRQHandler+0x10a>
 8003e5c:	08003e61 	.word	0x08003e61

08003e60 <UART_DMAAbortOnError>:
{
 8003e60:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e62:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e68:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003e6a:	f7ff ff68 	bl	8003d3e <HAL_UART_ErrorCallback>
}
 8003e6e:	bd08      	pop	{r3, pc}

08003e70 <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 8003e70:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d014      	beq.n	8003ea2 <HAL_HalfDuplex_EnableReceiver+0x32>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  huart->gState = HAL_UART_STATE_BUSY;
 8003e7e:	2324      	movs	r3, #36	; 0x24
 8003e80:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpreg = huart->Instance->CR1;
 8003e84:	6802      	ldr	r2, [r0, #0]
 8003e86:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8003e88:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_RE;
 8003e8c:	f043 0304 	orr.w	r3, r3, #4
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003e90:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003e92:	2320      	movs	r3, #32
 8003e94:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	4770      	bx	lr
  __HAL_LOCK(huart);
 8003ea2:	2002      	movs	r0, #2
}
 8003ea4:	4770      	bx	lr

08003ea6 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	a801      	add	r0, sp, #4
 8003eaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003eae:	2000      	movs	r0, #0
 8003eb0:	b004      	add	sp, #16
 8003eb2:	4770      	bx	lr

08003eb4 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003eb4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003eb8:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8003ebc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	4770      	bx	lr

08003ec4 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003ec4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003ec8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ecc:	045b      	lsls	r3, r3, #17
 8003ece:	0c5b      	lsrs	r3, r3, #17
 8003ed0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	4770      	bx	lr

08003ed8 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003ed8:	2000      	movs	r0, #0
 8003eda:	4770      	bx	lr

08003edc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003edc:	b084      	sub	sp, #16
 8003ede:	b538      	push	{r3, r4, r5, lr}
 8003ee0:	ac05      	add	r4, sp, #20
 8003ee2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003eec:	2400      	movs	r4, #0
 8003eee:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003ef2:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ef6:	f8a0 4050 	strh.w	r4, [r0, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003efa:	f7ff ffdb 	bl	8003eb4 <USB_EnableGlobalInt>

  return HAL_OK;
}
 8003efe:	4620      	mov	r0, r4
 8003f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f04:	b004      	add	sp, #16
 8003f06:	4770      	bx	lr

08003f08 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f08:	b430      	push	{r4, r5}
 8003f0a:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003f0c:	780c      	ldrb	r4, [r1, #0]
 8003f0e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8003f12:	b292      	uxth	r2, r2
 8003f14:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8003f18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f1c:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8003f1e:	78c8      	ldrb	r0, [r1, #3]
 8003f20:	2803      	cmp	r0, #3
 8003f22:	d85a      	bhi.n	8003fda <USB_ActivateEndpoint+0xd2>
 8003f24:	e8df f000 	tbb	[pc, r0]
 8003f28:	5102554d 	.word	0x5102554d
  HAL_StatusTypeDef ret = HAL_OK;
 8003f2c:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003f2e:	f248 0580 	movw	r5, #32896	; 0x8080
 8003f32:	432a      	orrs	r2, r5
 8003f34:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003f38:	780c      	ldrb	r4, [r1, #0]
 8003f3a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003f3e:	b292      	uxth	r2, r2
 8003f40:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003f44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f48:	4322      	orrs	r2, r4
 8003f4a:	432a      	orrs	r2, r5
 8003f4c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 8003f50:	7b0a      	ldrb	r2, [r1, #12]
 8003f52:	2a00      	cmp	r2, #0
 8003f54:	f040 80b1 	bne.w	80040ba <USB_ActivateEndpoint+0x1b2>
  {
    if (ep->is_in != 0U)
 8003f58:	784a      	ldrb	r2, [r1, #1]
 8003f5a:	2a00      	cmp	r2, #0
 8003f5c:	d04e      	beq.n	8003ffc <USB_ActivateEndpoint+0xf4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f5e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003f62:	441a      	add	r2, r3
 8003f64:	780c      	ldrb	r4, [r1, #0]
 8003f66:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003f6a:	88cc      	ldrh	r4, [r1, #6]
 8003f6c:	0864      	lsrs	r4, r4, #1
 8003f6e:	0064      	lsls	r4, r4, #1
 8003f70:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f74:	780c      	ldrb	r4, [r1, #0]
 8003f76:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003f7a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003f7e:	d00c      	beq.n	8003f9a <USB_ActivateEndpoint+0x92>
 8003f80:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003f84:	b292      	uxth	r2, r2
 8003f86:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003f8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f92:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003f96:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003f9a:	78ca      	ldrb	r2, [r1, #3]
 8003f9c:	2a01      	cmp	r2, #1
 8003f9e:	d01e      	beq.n	8003fde <USB_ActivateEndpoint+0xd6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003fa0:	7809      	ldrb	r1, [r1, #0]
 8003fa2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003fa6:	b292      	uxth	r2, r2
 8003fa8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb0:	f082 0220 	eor.w	r2, r2, #32
 8003fb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fbc:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003fc0:	e060      	b.n	8004084 <USB_ActivateEndpoint+0x17c>
      wEpRegVal |= USB_EP_CONTROL;
 8003fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8003fc6:	2000      	movs	r0, #0
      break;
 8003fc8:	e7b1      	b.n	8003f2e <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003fca:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8003fce:	2000      	movs	r0, #0
      break;
 8003fd0:	e7ad      	b.n	8003f2e <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003fd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8003fd6:	2000      	movs	r0, #0
      break;
 8003fd8:	e7a9      	b.n	8003f2e <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 8003fda:	2001      	movs	r0, #1
 8003fdc:	e7a7      	b.n	8003f2e <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fde:	7809      	ldrb	r1, [r1, #0]
 8003fe0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003fe4:	b292      	uxth	r2, r2
 8003fe6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ff2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ff6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003ffa:	e043      	b.n	8004084 <USB_ActivateEndpoint+0x17c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ffc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004000:	441a      	add	r2, r3
 8004002:	780c      	ldrb	r4, [r1, #0]
 8004004:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004008:	88cc      	ldrh	r4, [r1, #6]
 800400a:	0864      	lsrs	r4, r4, #1
 800400c:	0064      	lsls	r4, r4, #1
 800400e:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004012:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004016:	441a      	add	r2, r3
 8004018:	780c      	ldrb	r4, [r1, #0]
 800401a:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800401e:	690c      	ldr	r4, [r1, #16]
 8004020:	bb94      	cbnz	r4, 8004088 <USB_ActivateEndpoint+0x180>
 8004022:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8004026:	b2a4      	uxth	r4, r4
 8004028:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800402c:	b2a4      	uxth	r4, r4
 800402e:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8004032:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8004036:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800403a:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800403e:	780c      	ldrb	r4, [r1, #0]
 8004040:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004044:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004048:	d00c      	beq.n	8004064 <USB_ActivateEndpoint+0x15c>
 800404a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800404e:	b292      	uxth	r2, r2
 8004050:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004054:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004058:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800405c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004060:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004064:	7809      	ldrb	r1, [r1, #0]
 8004066:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800406a:	b292      	uxth	r2, r2
 800406c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004070:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004074:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800407c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004080:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8004084:	bc30      	pop	{r4, r5}
 8004086:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004088:	2c3e      	cmp	r4, #62	; 0x3e
 800408a:	d809      	bhi.n	80040a0 <USB_ActivateEndpoint+0x198>
 800408c:	0865      	lsrs	r5, r4, #1
 800408e:	f014 0f01 	tst.w	r4, #1
 8004092:	d000      	beq.n	8004096 <USB_ActivateEndpoint+0x18e>
 8004094:	3501      	adds	r5, #1
 8004096:	02ad      	lsls	r5, r5, #10
 8004098:	b2ad      	uxth	r5, r5
 800409a:	f8a2 540c 	strh.w	r5, [r2, #1036]	; 0x40c
 800409e:	e7ce      	b.n	800403e <USB_ActivateEndpoint+0x136>
 80040a0:	0965      	lsrs	r5, r4, #5
 80040a2:	f014 0f1f 	tst.w	r4, #31
 80040a6:	d100      	bne.n	80040aa <USB_ActivateEndpoint+0x1a2>
 80040a8:	3d01      	subs	r5, #1
 80040aa:	ea6f 64c5 	mvn.w	r4, r5, lsl #27
 80040ae:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80040b2:	b2a4      	uxth	r4, r4
 80040b4:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 80040b8:	e7c1      	b.n	800403e <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80040ba:	780c      	ldrb	r4, [r1, #0]
 80040bc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80040c0:	b292      	uxth	r2, r2
 80040c2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80040c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040ca:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80040ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040d2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80040d6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80040da:	441a      	add	r2, r3
 80040dc:	780c      	ldrb	r4, [r1, #0]
 80040de:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80040e2:	890c      	ldrh	r4, [r1, #8]
 80040e4:	0864      	lsrs	r4, r4, #1
 80040e6:	0064      	lsls	r4, r4, #1
 80040e8:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 80040ec:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80040f0:	441a      	add	r2, r3
 80040f2:	780c      	ldrb	r4, [r1, #0]
 80040f4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80040f8:	894c      	ldrh	r4, [r1, #10]
 80040fa:	0864      	lsrs	r4, r4, #1
 80040fc:	0064      	lsls	r4, r4, #1
 80040fe:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
    if (ep->is_in == 0U)
 8004102:	784a      	ldrb	r2, [r1, #1]
 8004104:	2a00      	cmp	r2, #0
 8004106:	d14e      	bne.n	80041a6 <USB_ActivateEndpoint+0x29e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004108:	780c      	ldrb	r4, [r1, #0]
 800410a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800410e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004112:	d00c      	beq.n	800412e <USB_ActivateEndpoint+0x226>
 8004114:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004118:	b292      	uxth	r2, r2
 800411a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800411e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004122:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004126:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800412a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800412e:	780c      	ldrb	r4, [r1, #0]
 8004130:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004134:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004138:	d00c      	beq.n	8004154 <USB_ActivateEndpoint+0x24c>
 800413a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800413e:	b292      	uxth	r2, r2
 8004140:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004144:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004148:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800414c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004150:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8004154:	780c      	ldrb	r4, [r1, #0]
 8004156:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800415a:	b292      	uxth	r2, r2
 800415c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004160:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004164:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004168:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800416c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004170:	780d      	ldrb	r5, [r1, #0]
 8004172:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8004176:	b292      	uxth	r2, r2
 8004178:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800417c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004180:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004184:	f248 0480 	movw	r4, #32896	; 0x8080
 8004188:	4322      	orrs	r2, r4
 800418a:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800418e:	7809      	ldrb	r1, [r1, #0]
 8004190:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004194:	b292      	uxth	r2, r2
 8004196:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800419a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800419e:	4322      	orrs	r2, r4
 80041a0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80041a4:	e76e      	b.n	8004084 <USB_ActivateEndpoint+0x17c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041a6:	780c      	ldrb	r4, [r1, #0]
 80041a8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80041ac:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80041b0:	d00c      	beq.n	80041cc <USB_ActivateEndpoint+0x2c4>
 80041b2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80041b6:	b292      	uxth	r2, r2
 80041b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80041bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80041c0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80041c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041c8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041cc:	780c      	ldrb	r4, [r1, #0]
 80041ce:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80041d2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80041d6:	d00c      	beq.n	80041f2 <USB_ActivateEndpoint+0x2ea>
 80041d8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80041dc:	b292      	uxth	r2, r2
 80041de:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80041e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80041e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80041ee:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80041f2:	780c      	ldrb	r4, [r1, #0]
 80041f4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80041f8:	b292      	uxth	r2, r2
 80041fa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80041fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004202:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004206:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800420a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800420e:	78ca      	ldrb	r2, [r1, #3]
 8004210:	2a01      	cmp	r2, #1
 8004212:	d01e      	beq.n	8004252 <USB_ActivateEndpoint+0x34a>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004214:	780c      	ldrb	r4, [r1, #0]
 8004216:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800421a:	b292      	uxth	r2, r2
 800421c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004224:	f082 0220 	eor.w	r2, r2, #32
 8004228:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800422c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004230:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004234:	7809      	ldrb	r1, [r1, #0]
 8004236:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800423a:	b292      	uxth	r2, r2
 800423c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004240:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004248:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800424c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004250:	e718      	b.n	8004084 <USB_ActivateEndpoint+0x17c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004252:	780c      	ldrb	r4, [r1, #0]
 8004254:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004258:	b292      	uxth	r2, r2
 800425a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800425e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004266:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800426a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800426e:	e7e1      	b.n	8004234 <USB_ActivateEndpoint+0x32c>

08004270 <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004270:	7b0b      	ldrb	r3, [r1, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d146      	bne.n	8004304 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8004276:	784b      	ldrb	r3, [r1, #1]
 8004278:	b313      	cbz	r3, 80042c0 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800427a:	780a      	ldrb	r2, [r1, #0]
 800427c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004280:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004284:	d00c      	beq.n	80042a0 <USB_DeactivateEndpoint+0x30>
 8004286:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800428a:	b29b      	uxth	r3, r3
 800428c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004298:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800429c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042a0:	780a      	ldrb	r2, [r1, #0]
 80042a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80042bc:	2000      	movs	r0, #0
 80042be:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042c0:	780a      	ldrb	r2, [r1, #0]
 80042c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80042c6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80042ca:	d00c      	beq.n	80042e6 <USB_DeactivateEndpoint+0x76>
 80042cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042e6:	780a      	ldrb	r2, [r1, #0]
 80042e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004302:	e7db      	b.n	80042bc <USB_DeactivateEndpoint+0x4c>
{
 8004304:	b410      	push	{r4}
    if (ep->is_in == 0U)
 8004306:	784b      	ldrb	r3, [r1, #1]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d14e      	bne.n	80043aa <USB_DeactivateEndpoint+0x13a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800430c:	780a      	ldrb	r2, [r1, #0]
 800430e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004312:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004316:	d00c      	beq.n	8004332 <USB_DeactivateEndpoint+0xc2>
 8004318:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800431c:	b29b      	uxth	r3, r3
 800431e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800432a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004332:	780a      	ldrb	r2, [r1, #0]
 8004334:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004338:	f013 0f40 	tst.w	r3, #64	; 0x40
 800433c:	d00c      	beq.n	8004358 <USB_DeactivateEndpoint+0xe8>
 800433e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004342:	b29b      	uxth	r3, r3
 8004344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004350:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004354:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8004358:	780a      	ldrb	r2, [r1, #0]
 800435a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004370:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004374:	780b      	ldrb	r3, [r1, #0]
 8004376:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800437a:	b292      	uxth	r2, r2
 800437c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004380:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004384:	f248 0480 	movw	r4, #32896	; 0x8080
 8004388:	4322      	orrs	r2, r4
 800438a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800438e:	780a      	ldrb	r2, [r1, #0]
 8004390:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004394:	b29b      	uxth	r3, r3
 8004396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800439e:	4323      	orrs	r3, r4
 80043a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80043a4:	2000      	movs	r0, #0
 80043a6:	bc10      	pop	{r4}
 80043a8:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043aa:	780a      	ldrb	r2, [r1, #0]
 80043ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80043b0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80043b4:	d00c      	beq.n	80043d0 <USB_DeactivateEndpoint+0x160>
 80043b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043d0:	780a      	ldrb	r2, [r1, #0]
 80043d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80043d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043da:	d00c      	beq.n	80043f6 <USB_DeactivateEndpoint+0x186>
 80043dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80043f6:	780a      	ldrb	r2, [r1, #0]
 80043f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004406:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800440a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004412:	780b      	ldrb	r3, [r1, #0]
 8004414:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004418:	b292      	uxth	r2, r2
 800441a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800441e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004422:	f248 0480 	movw	r4, #32896	; 0x8080
 8004426:	4322      	orrs	r2, r4
 8004428:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800442c:	780a      	ldrb	r2, [r1, #0]
 800442e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004432:	b29b      	uxth	r3, r3
 8004434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443c:	4323      	orrs	r3, r4
 800443e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004442:	e7af      	b.n	80043a4 <USB_DeactivateEndpoint+0x134>

08004444 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8004444:	784b      	ldrb	r3, [r1, #1]
 8004446:	b98b      	cbnz	r3, 800446c <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004448:	780a      	ldrb	r2, [r1, #0]
 800444a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800444e:	b29b      	uxth	r3, r3
 8004450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004458:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800445c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004464:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8004468:	2000      	movs	r0, #0
 800446a:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800446c:	780a      	ldrb	r2, [r1, #0]
 800446e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800447c:	f083 0310 	eor.w	r3, r3, #16
 8004480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004488:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800448c:	e7ec      	b.n	8004468 <USB_EPSetStall+0x24>

0800448e <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800448e:	7b0b      	ldrb	r3, [r1, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d14b      	bne.n	800452c <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8004494:	784b      	ldrb	r3, [r1, #1]
 8004496:	b333      	cbz	r3, 80044e6 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004498:	780a      	ldrb	r2, [r1, #0]
 800449a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800449e:	f013 0f40 	tst.w	r3, #64	; 0x40
 80044a2:	d00c      	beq.n	80044be <USB_EPClearStall+0x30>
 80044a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80044be:	78cb      	ldrb	r3, [r1, #3]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d033      	beq.n	800452c <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044c4:	780a      	ldrb	r2, [r1, #0]
 80044c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d4:	f083 0320 	eor.w	r3, r3, #32
 80044d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80044e4:	e022      	b.n	800452c <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044e6:	780a      	ldrb	r2, [r1, #0]
 80044e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80044ec:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80044f0:	d00c      	beq.n	800450c <USB_EPClearStall+0x7e>
 80044f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004500:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004508:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800450c:	780a      	ldrb	r2, [r1, #0]
 800450e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004512:	b29b      	uxth	r3, r3
 8004514:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004528:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800452c:	2000      	movs	r0, #0
 800452e:	4770      	bx	lr

08004530 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004530:	b911      	cbnz	r1, 8004538 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8004538:	2000      	movs	r0, #0
 800453a:	4770      	bx	lr

0800453c <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800453c:	2000      	movs	r0, #0
 800453e:	4770      	bx	lr

08004540 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004540:	2000      	movs	r0, #0
 8004542:	4770      	bx	lr

08004544 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004544:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8004548:	4770      	bx	lr

0800454a <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800454a:	2000      	movs	r0, #0
 800454c:	4770      	bx	lr

0800454e <USB_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800454e:	3301      	adds	r3, #1
 8004550:	085b      	lsrs	r3, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004552:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8004556:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800455a:	b163      	cbz	r3, 8004576 <USB_WritePMA+0x28>
{
 800455c:	b410      	push	{r4}
  {
    temp1 = *pBuf;
 800455e:	780c      	ldrb	r4, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004560:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8004562:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8004566:	f822 4b04 	strh.w	r4, [r2], #4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800456a:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800456c:	3b01      	subs	r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f5      	bne.n	800455e <USB_WritePMA+0x10>
  }
}
 8004572:	bc10      	pop	{r4}
 8004574:	4770      	bx	lr
 8004576:	4770      	bx	lr

08004578 <USB_EPStartXfer>:
{
 8004578:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 800457a:	784e      	ldrb	r6, [r1, #1]
 800457c:	2e01      	cmp	r6, #1
 800457e:	d033      	beq.n	80045e8 <USB_EPStartXfer+0x70>
    if (ep->xfer_len > ep->maxpacket)
 8004580:	698a      	ldr	r2, [r1, #24]
 8004582:	690b      	ldr	r3, [r1, #16]
 8004584:	429a      	cmp	r2, r3
 8004586:	f240 80fc 	bls.w	8004782 <USB_EPStartXfer+0x20a>
      ep->xfer_len -= len;
 800458a:	1ad2      	subs	r2, r2, r3
 800458c:	618a      	str	r2, [r1, #24]
    if (ep->doublebuffer == 0U)
 800458e:	7b0a      	ldrb	r2, [r1, #12]
 8004590:	2a00      	cmp	r2, #0
 8004592:	f040 8113 	bne.w	80047bc <USB_EPStartXfer+0x244>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004596:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800459a:	4402      	add	r2, r0
 800459c:	780c      	ldrb	r4, [r1, #0]
 800459e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f040 80f1 	bne.w	800478a <USB_EPStartXfer+0x212>
 80045a8:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 80045b8:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 80045bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c0:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045c4:	780a      	ldrb	r2, [r1, #0]
 80045c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80045d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80045e4:	2000      	movs	r0, #0
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 80045e8:	698a      	ldr	r2, [r1, #24]
 80045ea:	690b      	ldr	r3, [r1, #16]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d922      	bls.n	8004636 <USB_EPStartXfer+0xbe>
      ep->xfer_len -= len;
 80045f0:	1ad2      	subs	r2, r2, r3
 80045f2:	618a      	str	r2, [r1, #24]
 80045f4:	460c      	mov	r4, r1
 80045f6:	4605      	mov	r5, r0
    if (ep->doublebuffer == 0U)
 80045f8:	7b0a      	ldrb	r2, [r1, #12]
 80045fa:	b302      	cbz	r2, 800463e <USB_EPStartXfer+0xc6>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80045fc:	780a      	ldrb	r2, [r1, #0]
 80045fe:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8004602:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004606:	d072      	beq.n	80046ee <USB_EPStartXfer+0x176>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004608:	2e00      	cmp	r6, #0
 800460a:	d140      	bne.n	800468e <USB_EPStartXfer+0x116>
 800460c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8004610:	4401      	add	r1, r0
 8004612:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8004616:	bb0b      	cbnz	r3, 800465c <USB_EPStartXfer+0xe4>
 8004618:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 800461c:	b289      	uxth	r1, r1
 800461e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8004622:	b289      	uxth	r1, r1
 8004624:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8004628:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 800462c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004630:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8004634:	e033      	b.n	800469e <USB_EPStartXfer+0x126>
      ep->xfer_len = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	618b      	str	r3, [r1, #24]
      len = ep->xfer_len;
 800463a:	4613      	mov	r3, r2
 800463c:	e7da      	b.n	80045f4 <USB_EPStartXfer+0x7c>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800463e:	b29e      	uxth	r6, r3
 8004640:	4633      	mov	r3, r6
 8004642:	88ca      	ldrh	r2, [r1, #6]
 8004644:	6949      	ldr	r1, [r1, #20]
 8004646:	f7ff ff82 	bl	800454e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800464a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800464e:	442b      	add	r3, r5
 8004650:	7822      	ldrb	r2, [r4, #0]
 8004652:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004656:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
 800465a:	e037      	b.n	80046cc <USB_EPStartXfer+0x154>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800465c:	2b3e      	cmp	r3, #62	; 0x3e
 800465e:	d809      	bhi.n	8004674 <USB_EPStartXfer+0xfc>
 8004660:	0859      	lsrs	r1, r3, #1
 8004662:	f013 0f01 	tst.w	r3, #1
 8004666:	d000      	beq.n	800466a <USB_EPStartXfer+0xf2>
 8004668:	3101      	adds	r1, #1
 800466a:	0289      	lsls	r1, r1, #10
 800466c:	b289      	uxth	r1, r1
 800466e:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8004672:	e014      	b.n	800469e <USB_EPStartXfer+0x126>
 8004674:	0959      	lsrs	r1, r3, #5
 8004676:	f013 0f1f 	tst.w	r3, #31
 800467a:	d100      	bne.n	800467e <USB_EPStartXfer+0x106>
 800467c:	3901      	subs	r1, #1
 800467e:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8004682:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004686:	b289      	uxth	r1, r1
 8004688:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 800468c:	e007      	b.n	800469e <USB_EPStartXfer+0x126>
 800468e:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8004692:	4401      	add	r1, r0
 8004694:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8004698:	b299      	uxth	r1, r3
 800469a:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
        pmabuffer = ep->pmaaddr1;
 800469e:	8962      	ldrh	r2, [r4, #10]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	6961      	ldr	r1, [r4, #20]
 80046a4:	4628      	mov	r0, r5
 80046a6:	f7ff ff52 	bl	800454e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80046aa:	7863      	ldrb	r3, [r4, #1]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d157      	bne.n	8004760 <USB_EPStartXfer+0x1e8>
 80046b0:	7822      	ldrb	r2, [r4, #0]
 80046b2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046c8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80046cc:	7822      	ldrb	r2, [r4, #0]
 80046ce:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046dc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80046e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80046ec:	e77a      	b.n	80045e4 <USB_EPStartXfer+0x6c>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80046ee:	bb6e      	cbnz	r6, 800474c <USB_EPStartXfer+0x1d4>
 80046f0:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80046f4:	4401      	add	r1, r0
 80046f6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80046fa:	b973      	cbnz	r3, 800471a <USB_EPStartXfer+0x1a2>
 80046fc:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8004700:	b289      	uxth	r1, r1
 8004702:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8004706:	b289      	uxth	r1, r1
 8004708:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 800470c:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8004710:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004714:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8004718:	e020      	b.n	800475c <USB_EPStartXfer+0x1e4>
 800471a:	2b3e      	cmp	r3, #62	; 0x3e
 800471c:	d809      	bhi.n	8004732 <USB_EPStartXfer+0x1ba>
 800471e:	0859      	lsrs	r1, r3, #1
 8004720:	f013 0f01 	tst.w	r3, #1
 8004724:	d000      	beq.n	8004728 <USB_EPStartXfer+0x1b0>
 8004726:	3101      	adds	r1, #1
 8004728:	0289      	lsls	r1, r1, #10
 800472a:	b289      	uxth	r1, r1
 800472c:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8004730:	e014      	b.n	800475c <USB_EPStartXfer+0x1e4>
 8004732:	0959      	lsrs	r1, r3, #5
 8004734:	f013 0f1f 	tst.w	r3, #31
 8004738:	d100      	bne.n	800473c <USB_EPStartXfer+0x1c4>
 800473a:	3901      	subs	r1, #1
 800473c:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8004740:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004744:	b289      	uxth	r1, r1
 8004746:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 800474a:	e007      	b.n	800475c <USB_EPStartXfer+0x1e4>
 800474c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8004750:	4401      	add	r1, r0
 8004752:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8004756:	b299      	uxth	r1, r3
 8004758:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 800475c:	8922      	ldrh	r2, [r4, #8]
 800475e:	e79f      	b.n	80046a0 <USB_EPStartXfer+0x128>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004760:	2b01      	cmp	r3, #1
 8004762:	d1b3      	bne.n	80046cc <USB_EPStartXfer+0x154>
 8004764:	7822      	ldrb	r2, [r4, #0]
 8004766:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800476a:	b29b      	uxth	r3, r3
 800476c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8004780:	e7a4      	b.n	80046cc <USB_EPStartXfer+0x154>
      ep->xfer_len = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	618b      	str	r3, [r1, #24]
      len = ep->xfer_len;
 8004786:	4613      	mov	r3, r2
 8004788:	e701      	b.n	800458e <USB_EPStartXfer+0x16>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800478a:	2b3e      	cmp	r3, #62	; 0x3e
 800478c:	d809      	bhi.n	80047a2 <USB_EPStartXfer+0x22a>
 800478e:	085c      	lsrs	r4, r3, #1
 8004790:	f013 0f01 	tst.w	r3, #1
 8004794:	d000      	beq.n	8004798 <USB_EPStartXfer+0x220>
 8004796:	3401      	adds	r4, #1
 8004798:	02a4      	lsls	r4, r4, #10
 800479a:	b2a4      	uxth	r4, r4
 800479c:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 80047a0:	e710      	b.n	80045c4 <USB_EPStartXfer+0x4c>
 80047a2:	095c      	lsrs	r4, r3, #5
 80047a4:	f013 0f1f 	tst.w	r3, #31
 80047a8:	d100      	bne.n	80047ac <USB_EPStartXfer+0x234>
 80047aa:	3c01      	subs	r4, #1
 80047ac:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 80047b0:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80047b4:	b2a4      	uxth	r4, r4
 80047b6:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 80047ba:	e703      	b.n	80045c4 <USB_EPStartXfer+0x4c>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80047bc:	b9a6      	cbnz	r6, 80047e8 <USB_EPStartXfer+0x270>
 80047be:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80047c2:	4402      	add	r2, r0
 80047c4:	780c      	ldrb	r4, [r1, #0]
 80047c6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80047ca:	bb33      	cbnz	r3, 800481a <USB_EPStartXfer+0x2a2>
 80047cc:	f8b2 4404 	ldrh.w	r4, [r2, #1028]	; 0x404
 80047d0:	b2a4      	uxth	r4, r4
 80047d2:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80047d6:	b2a4      	uxth	r4, r4
 80047d8:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 80047dc:	f8b2 4404 	ldrh.w	r4, [r2, #1028]	; 0x404
 80047e0:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80047e4:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 80047e8:	784a      	ldrb	r2, [r1, #1]
 80047ea:	2a00      	cmp	r2, #0
 80047ec:	d147      	bne.n	800487e <USB_EPStartXfer+0x306>
 80047ee:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80047f2:	4402      	add	r2, r0
 80047f4:	780c      	ldrb	r4, [r1, #0]
 80047f6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80047fa:	bb3b      	cbnz	r3, 800484c <USB_EPStartXfer+0x2d4>
 80047fc:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8004800:	b29b      	uxth	r3, r3
 8004802:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004806:	b29b      	uxth	r3, r3
 8004808:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 800480c:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8004810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004814:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8004818:	e6d4      	b.n	80045c4 <USB_EPStartXfer+0x4c>
 800481a:	2b3e      	cmp	r3, #62	; 0x3e
 800481c:	d809      	bhi.n	8004832 <USB_EPStartXfer+0x2ba>
 800481e:	085c      	lsrs	r4, r3, #1
 8004820:	f013 0f01 	tst.w	r3, #1
 8004824:	d000      	beq.n	8004828 <USB_EPStartXfer+0x2b0>
 8004826:	3401      	adds	r4, #1
 8004828:	02a4      	lsls	r4, r4, #10
 800482a:	b2a4      	uxth	r4, r4
 800482c:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8004830:	e7da      	b.n	80047e8 <USB_EPStartXfer+0x270>
 8004832:	095c      	lsrs	r4, r3, #5
 8004834:	f013 0f1f 	tst.w	r3, #31
 8004838:	d100      	bne.n	800483c <USB_EPStartXfer+0x2c4>
 800483a:	3c01      	subs	r4, #1
 800483c:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8004840:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004844:	b2a4      	uxth	r4, r4
 8004846:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 800484a:	e7cd      	b.n	80047e8 <USB_EPStartXfer+0x270>
 800484c:	2b3e      	cmp	r3, #62	; 0x3e
 800484e:	d809      	bhi.n	8004864 <USB_EPStartXfer+0x2ec>
 8004850:	085c      	lsrs	r4, r3, #1
 8004852:	f013 0f01 	tst.w	r3, #1
 8004856:	d000      	beq.n	800485a <USB_EPStartXfer+0x2e2>
 8004858:	3401      	adds	r4, #1
 800485a:	02a4      	lsls	r4, r4, #10
 800485c:	b2a4      	uxth	r4, r4
 800485e:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8004862:	e6af      	b.n	80045c4 <USB_EPStartXfer+0x4c>
 8004864:	095c      	lsrs	r4, r3, #5
 8004866:	f013 0f1f 	tst.w	r3, #31
 800486a:	d100      	bne.n	800486e <USB_EPStartXfer+0x2f6>
 800486c:	3c01      	subs	r4, #1
 800486e:	ea6f 63c4 	mvn.w	r3, r4, lsl #27
 8004872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004876:	b29b      	uxth	r3, r3
 8004878:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 800487c:	e6a2      	b.n	80045c4 <USB_EPStartXfer+0x4c>
 800487e:	2a01      	cmp	r2, #1
 8004880:	f47f aea0 	bne.w	80045c4 <USB_EPStartXfer+0x4c>
 8004884:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004888:	4402      	add	r2, r0
 800488a:	780c      	ldrb	r4, [r1, #0]
 800488c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004890:	b29b      	uxth	r3, r3
 8004892:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8004896:	e695      	b.n	80045c4 <USB_EPStartXfer+0x4c>

08004898 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004898:	b430      	push	{r4, r5}
  uint32_t n = (uint32_t)wNBytes >> 1;
 800489a:	085d      	lsrs	r5, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800489c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80048a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80048a4:	e007      	b.n	80048b6 <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80048a6:	f832 4b04 	ldrh.w	r4, [r2], #4
 80048aa:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80048ac:	700c      	strb	r4, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80048ae:	0a24      	lsrs	r4, r4, #8
 80048b0:	704c      	strb	r4, [r1, #1]
    pBuf++;
 80048b2:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 80048b4:	3d01      	subs	r5, #1
 80048b6:	2d00      	cmp	r5, #0
 80048b8:	d1f5      	bne.n	80048a6 <USB_ReadPMA+0xe>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80048ba:	f013 0f01 	tst.w	r3, #1
 80048be:	d001      	beq.n	80048c4 <USB_ReadPMA+0x2c>
  {
    temp = *pdwVal;
 80048c0:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80048c2:	700b      	strb	r3, [r1, #0]
  }
}
 80048c4:	bc30      	pop	{r4, r5}
 80048c6:	4770      	bx	lr

080048c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80048c8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80048ca:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80048ce:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80048d2:	b15b      	cbz	r3, 80048ec <USBD_CDC_EP0_RxReady+0x24>
 80048d4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80048d8:	28ff      	cmp	r0, #255	; 0xff
 80048da:	d007      	beq.n	80048ec <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80048e2:	4621      	mov	r1, r4
 80048e4:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80048e6:	23ff      	movs	r3, #255	; 0xff
 80048e8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80048ec:	2000      	movs	r0, #0
 80048ee:	bd10      	pop	{r4, pc}

080048f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80048f0:	2343      	movs	r3, #67	; 0x43
 80048f2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80048f4:	4800      	ldr	r0, [pc, #0]	; (80048f8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80048f6:	4770      	bx	lr
 80048f8:	20000040 	.word	0x20000040

080048fc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80048fc:	2343      	movs	r3, #67	; 0x43
 80048fe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004900:	4800      	ldr	r0, [pc, #0]	; (8004904 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004902:	4770      	bx	lr
 8004904:	20000084 	.word	0x20000084

08004908 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004908:	2343      	movs	r3, #67	; 0x43
 800490a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800490c:	4800      	ldr	r0, [pc, #0]	; (8004910 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800490e:	4770      	bx	lr
 8004910:	200000d4 	.word	0x200000d4

08004914 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004914:	230a      	movs	r3, #10
 8004916:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004918:	4800      	ldr	r0, [pc, #0]	; (800491c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800491a:	4770      	bx	lr
 800491c:	200000c8 	.word	0x200000c8

08004920 <USBD_CDC_DataOut>:
{
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004924:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004928:	f003 fe70 	bl	800860c <USBD_LL_GetRxDataSize>
 800492c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8004930:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004934:	b14b      	cbz	r3, 800494a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004936:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8004940:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8004944:	4798      	blx	r3
    return USBD_OK;
 8004946:	2000      	movs	r0, #0
}
 8004948:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800494a:	2002      	movs	r0, #2
 800494c:	e7fc      	b.n	8004948 <USBD_CDC_DataOut+0x28>

0800494e <USBD_CDC_DataIn>:
{
 800494e:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004950:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004954:	f8d0 52c0 	ldr.w	r5, [r0, #704]	; 0x2c0
  if (pdev->pClassData != NULL)
 8004958:	b1ea      	cbz	r2, 8004996 <USBD_CDC_DataIn+0x48>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800495a:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800495e:	00a3      	lsls	r3, r4, #2
 8004960:	4403      	add	r3, r0
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	b13b      	cbz	r3, 8004976 <USBD_CDC_DataIn+0x28>
 8004966:	eb05 1541 	add.w	r5, r5, r1, lsl #5
 800496a:	6bad      	ldr	r5, [r5, #56]	; 0x38
 800496c:	fbb3 f4f5 	udiv	r4, r3, r5
 8004970:	fb05 3314 	mls	r3, r5, r4, r3
 8004974:	b11b      	cbz	r3, 800497e <USBD_CDC_DataIn+0x30>
      hcdc->TxState = 0U;
 8004976:	2000      	movs	r0, #0
 8004978:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 800497c:	bd38      	pop	{r3, r4, r5, pc}
      pdev->ep_in[epnum].total_length = 0U;
 800497e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8004982:	0093      	lsls	r3, r2, #2
 8004984:	4403      	add	r3, r0
 8004986:	2400      	movs	r4, #0
 8004988:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800498a:	4623      	mov	r3, r4
 800498c:	4622      	mov	r2, r4
 800498e:	f003 fe2d 	bl	80085ec <USBD_LL_Transmit>
    return USBD_OK;
 8004992:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004994:	e7f2      	b.n	800497c <USBD_CDC_DataIn+0x2e>
    return USBD_FAIL;
 8004996:	2002      	movs	r0, #2
 8004998:	e7f0      	b.n	800497c <USBD_CDC_DataIn+0x2e>

0800499a <USBD_CDC_Setup>:
{
 800499a:	b570      	push	{r4, r5, r6, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	4605      	mov	r5, r0
 80049a0:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80049a2:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 80049ac:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049b0:	780b      	ldrb	r3, [r1, #0]
 80049b2:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 80049b6:	d027      	beq.n	8004a08 <USBD_CDC_Setup+0x6e>
 80049b8:	2a20      	cmp	r2, #32
 80049ba:	d156      	bne.n	8004a6a <USBD_CDC_Setup+0xd0>
      if (req->wLength)
 80049bc:	88ca      	ldrh	r2, [r1, #6]
 80049be:	b93a      	cbnz	r2, 80049d0 <USBD_CDC_Setup+0x36>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80049c0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2200      	movs	r2, #0
 80049c8:	7848      	ldrb	r0, [r1, #1]
 80049ca:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80049cc:	2000      	movs	r0, #0
 80049ce:	e04f      	b.n	8004a70 <USBD_CDC_Setup+0xd6>
        if (req->bmRequest & 0x80U)
 80049d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80049d4:	d00c      	beq.n	80049f0 <USBD_CDC_Setup+0x56>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80049d6:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4631      	mov	r1, r6
 80049de:	7860      	ldrb	r0, [r4, #1]
 80049e0:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80049e2:	88e2      	ldrh	r2, [r4, #6]
 80049e4:	4631      	mov	r1, r6
 80049e6:	4628      	mov	r0, r5
 80049e8:	f000 fdae 	bl	8005548 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80049ec:	2000      	movs	r0, #0
 80049ee:	e03f      	b.n	8004a70 <USBD_CDC_Setup+0xd6>
          hcdc->CmdOpCode = req->bRequest;
 80049f0:	784b      	ldrb	r3, [r1, #1]
 80049f2:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80049f6:	798b      	ldrb	r3, [r1, #6]
 80049f8:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80049fc:	88ca      	ldrh	r2, [r1, #6]
 80049fe:	4631      	mov	r1, r6
 8004a00:	f000 fdb7 	bl	8005572 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8004a04:	2000      	movs	r0, #0
 8004a06:	e033      	b.n	8004a70 <USBD_CDC_Setup+0xd6>
      switch (req->bRequest)
 8004a08:	784b      	ldrb	r3, [r1, #1]
 8004a0a:	2b0a      	cmp	r3, #10
 8004a0c:	d014      	beq.n	8004a38 <USBD_CDC_Setup+0x9e>
 8004a0e:	2b0b      	cmp	r3, #11
 8004a10:	d021      	beq.n	8004a56 <USBD_CDC_Setup+0xbc>
 8004a12:	b11b      	cbz	r3, 8004a1c <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8004a14:	f000 fa77 	bl	8004f06 <USBD_CtlError>
          ret = USBD_FAIL;
 8004a18:	2002      	movs	r0, #2
          break;
 8004a1a:	e029      	b.n	8004a70 <USBD_CDC_Setup+0xd6>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a1c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d105      	bne.n	8004a30 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004a24:	2202      	movs	r2, #2
 8004a26:	a901      	add	r1, sp, #4
 8004a28:	f000 fd8e 	bl	8005548 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	e01f      	b.n	8004a70 <USBD_CDC_Setup+0xd6>
            USBD_CtlError(pdev, req);
 8004a30:	f000 fa69 	bl	8004f06 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a34:	2002      	movs	r0, #2
 8004a36:	e01b      	b.n	8004a70 <USBD_CDC_Setup+0xd6>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a38:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d106      	bne.n	8004a4e <USBD_CDC_Setup+0xb4>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004a40:	2201      	movs	r2, #1
 8004a42:	f10d 0107 	add.w	r1, sp, #7
 8004a46:	f000 fd7f 	bl	8005548 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	e010      	b.n	8004a70 <USBD_CDC_Setup+0xd6>
            USBD_CtlError(pdev, req);
 8004a4e:	f000 fa5a 	bl	8004f06 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a52:	2002      	movs	r0, #2
 8004a54:	e00c      	b.n	8004a70 <USBD_CDC_Setup+0xd6>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004a56:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d101      	bne.n	8004a62 <USBD_CDC_Setup+0xc8>
  uint8_t ret = USBD_OK;
 8004a5e:	2000      	movs	r0, #0
 8004a60:	e006      	b.n	8004a70 <USBD_CDC_Setup+0xd6>
            USBD_CtlError(pdev, req);
 8004a62:	f000 fa50 	bl	8004f06 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a66:	2002      	movs	r0, #2
 8004a68:	e002      	b.n	8004a70 <USBD_CDC_Setup+0xd6>
      USBD_CtlError(pdev, req);
 8004a6a:	f000 fa4c 	bl	8004f06 <USBD_CtlError>
      ret = USBD_FAIL;
 8004a6e:	2002      	movs	r0, #2
}
 8004a70:	b002      	add	sp, #8
 8004a72:	bd70      	pop	{r4, r5, r6, pc}

08004a74 <USBD_CDC_DeInit>:
{
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004a78:	2181      	movs	r1, #129	; 0x81
 8004a7a:	f003 fd84 	bl	8008586 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004a7e:	2500      	movs	r5, #0
 8004a80:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004a82:	2101      	movs	r1, #1
 8004a84:	4620      	mov	r0, r4
 8004a86:	f003 fd7e 	bl	8008586 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004a8a:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004a8e:	2182      	movs	r1, #130	; 0x82
 8004a90:	4620      	mov	r0, r4
 8004a92:	f003 fd78 	bl	8008586 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004a96:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8004a98:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004a9c:	b14b      	cbz	r3, 8004ab2 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004a9e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004aa6:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8004aaa:	f003 fdb9 	bl	8008620 <USBD_static_free>
    pdev->pClassData = NULL;
 8004aae:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	bd38      	pop	{r3, r4, r5, pc}

08004ab6 <USBD_CDC_Init>:
{
 8004ab6:	b538      	push	{r3, r4, r5, lr}
 8004ab8:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004aba:	7c03      	ldrb	r3, [r0, #16]
 8004abc:	bba3      	cbnz	r3, 8004b28 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	2181      	movs	r1, #129	; 0x81
 8004ac6:	f003 fd53 	bl	8008570 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004aca:	2501      	movs	r5, #1
 8004acc:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f003 fd4a 	bl	8008570 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004adc:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ae0:	2308      	movs	r3, #8
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	2182      	movs	r1, #130	; 0x82
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f003 fd42 	bl	8008570 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004aec:	2301      	movs	r3, #1
 8004aee:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004af0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004af4:	f003 fd90 	bl	8008618 <USBD_static_malloc>
 8004af8:	4605      	mov	r5, r0
 8004afa:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8004afe:	b368      	cbz	r0, 8004b5c <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004b00:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4798      	blx	r3
    hcdc->TxState = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8004b0e:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b12:	7c23      	ldrb	r3, [r4, #16]
 8004b14:	b1c3      	cbz	r3, 8004b48 <USBD_CDC_Init+0x92>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b16:	2340      	movs	r3, #64	; 0x40
 8004b18:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f003 fd6c 	bl	80085fc <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004b24:	2000      	movs	r0, #0
}
 8004b26:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b28:	2340      	movs	r3, #64	; 0x40
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	2181      	movs	r1, #129	; 0x81
 8004b2e:	f003 fd1f 	bl	8008570 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b32:	2501      	movs	r5, #1
 8004b34:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b36:	2340      	movs	r3, #64	; 0x40
 8004b38:	2202      	movs	r2, #2
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f003 fd17 	bl	8008570 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b42:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8004b46:	e7cb      	b.n	8004ae0 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b4c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8004b50:	2101      	movs	r1, #1
 8004b52:	4620      	mov	r0, r4
 8004b54:	f003 fd52 	bl	80085fc <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004b58:	2000      	movs	r0, #0
 8004b5a:	e7e4      	b.n	8004b26 <USBD_CDC_Init+0x70>
    ret = 1U;
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	e7e2      	b.n	8004b26 <USBD_CDC_Init+0x70>

08004b60 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8004b60:	b119      	cbz	r1, 8004b6a <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8004b62:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8004b66:	2000      	movs	r0, #0
 8004b68:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004b6a:	2002      	movs	r0, #2
  }

  return ret;
}
 8004b6c:	4770      	bx	lr

08004b6e <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b6e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8004b72:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004b76:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	4770      	bx	lr

08004b7e <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b7e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8004b82:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8004b86:	2000      	movs	r0, #0
 8004b88:	4770      	bx	lr

08004b8a <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b8a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 8004b8e:	b1a2      	cbz	r2, 8004bba <USBD_CDC_TransmitPacket+0x30>
{
 8004b90:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 8004b92:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8004b96:	b10b      	cbz	r3, 8004b9c <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004b98:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004b9a:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004ba2:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8004ba6:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004ba8:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8004bac:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8004bb0:	2181      	movs	r1, #129	; 0x81
 8004bb2:	f003 fd1b 	bl	80085ec <USBD_LL_Transmit>
      return USBD_OK;
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	e7ef      	b.n	8004b9a <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 8004bba:	2002      	movs	r0, #2
}
 8004bbc:	4770      	bx	lr

08004bbe <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004bbe:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004bc2:	b19a      	cbz	r2, 8004bec <USBD_CDC_ReceivePacket+0x2e>
{
 8004bc4:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bc6:	7c03      	ldrb	r3, [r0, #16]
 8004bc8:	b13b      	cbz	r3, 8004bda <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004bca:	2340      	movs	r3, #64	; 0x40
 8004bcc:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	f003 fd13 	bl	80085fc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004bd6:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004bd8:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8004bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bde:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004be2:	2101      	movs	r1, #1
 8004be4:	f003 fd0a 	bl	80085fc <USBD_LL_PrepareReceive>
    return USBD_OK;
 8004be8:	2000      	movs	r0, #0
 8004bea:	e7f5      	b.n	8004bd8 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8004bec:	2002      	movs	r0, #2
}
 8004bee:	4770      	bx	lr

08004bf0 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004bf0:	b198      	cbz	r0, 8004c1a <USBD_Init+0x2a>
{
 8004bf2:	b508      	push	{r3, lr}
 8004bf4:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004bf6:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 8004bfa:	b110      	cbz	r0, 8004c02 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004c02:	b109      	cbz	r1, 8004c08 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8004c04:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
 8004c08:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8004c10:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004c12:	f003 fc63 	bl	80084dc <USBD_LL_Init>

  return USBD_OK;
 8004c16:	2000      	movs	r0, #0
}
 8004c18:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004c1a:	2002      	movs	r0, #2
}
 8004c1c:	4770      	bx	lr

08004c1e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8004c1e:	b119      	cbz	r1, 8004c28 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004c20:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8004c24:	2000      	movs	r0, #0
 8004c26:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004c28:	2002      	movs	r0, #2
  }

  return status;
}
 8004c2a:	4770      	bx	lr

08004c2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004c2c:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004c2e:	f003 fc97 	bl	8008560 <USBD_LL_Start>

  return USBD_OK;
}
 8004c32:	2000      	movs	r0, #0
 8004c34:	bd08      	pop	{r3, pc}

08004c36 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004c36:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004c38:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004c3c:	b133      	cbz	r3, 8004c4c <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4798      	blx	r3
 8004c42:	b908      	cbnz	r0, 8004c48 <USBD_SetClassConfig+0x12>
    {
      ret = USBD_OK;
 8004c44:	2000      	movs	r0, #0
    }
  }

  return ret;
}
 8004c46:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004c48:	2002      	movs	r0, #2
 8004c4a:	e7fc      	b.n	8004c46 <USBD_SetClassConfig+0x10>
 8004c4c:	2002      	movs	r0, #2
 8004c4e:	e7fa      	b.n	8004c46 <USBD_SetClassConfig+0x10>

08004c50 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004c50:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004c52:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4798      	blx	r3

  return USBD_OK;
}
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	bd08      	pop	{r3, pc}

08004c5e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004c5e:	b538      	push	{r3, r4, r5, lr}
 8004c60:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004c62:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8004c66:	4628      	mov	r0, r5
 8004c68:	f000 f939 	bl	8004ede <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004c72:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8004c76:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004c7a:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8004c7e:	f001 031f 	and.w	r3, r1, #31
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d00e      	beq.n	8004ca4 <USBD_LL_SetupStage+0x46>
 8004c86:	b13b      	cbz	r3, 8004c98 <USBD_LL_SetupStage+0x3a>
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d010      	beq.n	8004cae <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004c8c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004c90:	4620      	mov	r0, r4
 8004c92:	f003 fc80 	bl	8008596 <USBD_LL_StallEP>
      break;
 8004c96:	e003      	b.n	8004ca0 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8004c98:	4629      	mov	r1, r5
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f000 facd 	bl	800523a <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f000 fafb 	bl	80052a2 <USBD_StdItfReq>
      break;
 8004cac:	e7f8      	b.n	8004ca0 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8004cae:	4629      	mov	r1, r5
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f000 fb26 	bl	8005302 <USBD_StdEPReq>
      break;
 8004cb6:	e7f3      	b.n	8004ca0 <USBD_LL_SetupStage+0x42>

08004cb8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004cbc:	bba1      	cbnz	r1, 8004d28 <USBD_LL_DataOutStage+0x70>
 8004cbe:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004cc0:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d003      	beq.n	8004cd0 <USBD_LL_DataOutStage+0x18>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004cc8:	2b05      	cmp	r3, #5
 8004cca:	d024      	beq.n	8004d16 <USBD_LL_DataOutStage+0x5e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e037      	b.n	8004d40 <USBD_LL_DataOutStage+0x88>
      if (pep->rem_length > pep->maxpacket)
 8004cd0:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 8004cd4:	f8d4 2164 	ldr.w	r2, [r4, #356]	; 0x164
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d90d      	bls.n	8004cf8 <USBD_LL_DataOutStage+0x40>
        pep->rem_length -= pep->maxpacket;
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d906      	bls.n	8004cf4 <USBD_LL_DataOutStage+0x3c>
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	4601      	mov	r1, r0
 8004cea:	4620      	mov	r0, r4
 8004cec:	f000 fc50 	bl	8005590 <USBD_CtlContinueRx>
  return USBD_OK;
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	e025      	b.n	8004d40 <USBD_LL_DataOutStage+0x88>
        USBD_CtlContinueRx(pdev, pdata,
 8004cf4:	b292      	uxth	r2, r2
 8004cf6:	e7f7      	b.n	8004ce8 <USBD_LL_DataOutStage+0x30>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004cf8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	b12b      	cbz	r3, 8004d0c <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d00:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004d04:	2a03      	cmp	r2, #3
 8004d06:	d101      	bne.n	8004d0c <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 8004d08:	4620      	mov	r0, r4
 8004d0a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f000 fc47 	bl	80055a0 <USBD_CtlSendStatus>
  return USBD_OK;
 8004d12:	2000      	movs	r0, #0
 8004d14:	e014      	b.n	8004d40 <USBD_LL_DataOutStage+0x88>
        pdev->ep0_state = USBD_EP0_IDLE;
 8004d16:	2500      	movs	r5, #0
 8004d18:	f8c4 5294 	str.w	r5, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f003 fc39 	bl	8008596 <USBD_LL_StallEP>
  return USBD_OK;
 8004d24:	4628      	mov	r0, r5
 8004d26:	e00b      	b.n	8004d40 <USBD_LL_DataOutStage+0x88>
 8004d28:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataOut != NULL) &&
 8004d2a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	b13b      	cbz	r3, 8004d42 <USBD_LL_DataOutStage+0x8a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d32:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004d36:	2903      	cmp	r1, #3
 8004d38:	d105      	bne.n	8004d46 <USBD_LL_DataOutStage+0x8e>
    pdev->pClass->DataOut(pdev, epnum);
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4798      	blx	r3
  return USBD_OK;
 8004d3e:	2000      	movs	r0, #0
}
 8004d40:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004d42:	2002      	movs	r0, #2
 8004d44:	e7fc      	b.n	8004d40 <USBD_LL_DataOutStage+0x88>
 8004d46:	2002      	movs	r0, #2
 8004d48:	e7fa      	b.n	8004d40 <USBD_LL_DataOutStage+0x88>

08004d4a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004d4a:	b510      	push	{r4, lr}
 8004d4c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004d4e:	2900      	cmp	r1, #0
 8004d50:	d153      	bne.n	8004dfa <USBD_LL_DataInStage+0xb0>
 8004d52:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004d54:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d00c      	beq.n	8004d76 <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d000      	beq.n	8004d62 <USBD_LL_DataInStage+0x18>
 8004d60:	b91b      	cbnz	r3, 8004d6a <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004d62:	2180      	movs	r1, #128	; 0x80
 8004d64:	4620      	mov	r0, r4
 8004d66:	f003 fc16 	bl	8008596 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004d6a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d03f      	beq.n	8004df2 <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004d72:	2000      	movs	r0, #0
 8004d74:	e04d      	b.n	8004e12 <USBD_LL_DataInStage+0xc8>
      if (pep->rem_length > pep->maxpacket)
 8004d76:	6a23      	ldr	r3, [r4, #32]
 8004d78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d81d      	bhi.n	8004dba <USBD_LL_DataInStage+0x70>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004d7e:	69e1      	ldr	r1, [r4, #28]
 8004d80:	fbb1 f3f2 	udiv	r3, r1, r2
 8004d84:	fb02 1313 	mls	r3, r2, r3, r1
 8004d88:	b92b      	cbnz	r3, 8004d96 <USBD_LL_DataInStage+0x4c>
 8004d8a:	428a      	cmp	r2, r1
 8004d8c:	d803      	bhi.n	8004d96 <USBD_LL_DataInStage+0x4c>
            (pep->total_length < pdev->ep0_data_len))
 8004d8e:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004d92:	4299      	cmp	r1, r3
 8004d94:	d31f      	bcc.n	8004dd6 <USBD_LL_DataInStage+0x8c>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004d96:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	b12b      	cbz	r3, 8004daa <USBD_LL_DataInStage+0x60>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d9e:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004da2:	2a03      	cmp	r2, #3
 8004da4:	d101      	bne.n	8004daa <USBD_LL_DataInStage+0x60>
            pdev->pClass->EP0_TxSent(pdev);
 8004da6:	4620      	mov	r0, r4
 8004da8:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004daa:	2180      	movs	r1, #128	; 0x80
 8004dac:	4620      	mov	r0, r4
 8004dae:	f003 fbf2 	bl	8008596 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004db2:	4620      	mov	r0, r4
 8004db4:	f000 fbff 	bl	80055b6 <USBD_CtlReceiveStatus>
 8004db8:	e7d7      	b.n	8004d6a <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 8004dba:	1a9a      	subs	r2, r3, r2
 8004dbc:	6222      	str	r2, [r4, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004dbe:	b292      	uxth	r2, r2
 8004dc0:	4601      	mov	r1, r0
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f000 fbcd 	bl	8005562 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004dc8:	2300      	movs	r3, #0
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f003 fc14 	bl	80085fc <USBD_LL_PrepareReceive>
 8004dd4:	e7c9      	b.n	8004d6a <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	4611      	mov	r1, r2
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f000 fbc1 	bl	8005562 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004de0:	2100      	movs	r1, #0
 8004de2:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004de6:	460b      	mov	r3, r1
 8004de8:	460a      	mov	r2, r1
 8004dea:	4620      	mov	r0, r4
 8004dec:	f003 fc06 	bl	80085fc <USBD_LL_PrepareReceive>
 8004df0:	e7bb      	b.n	8004d6a <USBD_LL_DataInStage+0x20>
      pdev->dev_test_mode = 0U;
 8004df2:	2000      	movs	r0, #0
 8004df4:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8004df8:	e00b      	b.n	8004e12 <USBD_LL_DataInStage+0xc8>
 8004dfa:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataIn != NULL) &&
 8004dfc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	b13b      	cbz	r3, 8004e14 <USBD_LL_DataInStage+0xca>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e04:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004e08:	2903      	cmp	r1, #3
 8004e0a:	d105      	bne.n	8004e18 <USBD_LL_DataInStage+0xce>
    pdev->pClass->DataIn(pdev, epnum);
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	4798      	blx	r3
  return USBD_OK;
 8004e10:	2000      	movs	r0, #0
}
 8004e12:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004e14:	2002      	movs	r0, #2
 8004e16:	e7fc      	b.n	8004e12 <USBD_LL_DataInStage+0xc8>
 8004e18:	2002      	movs	r0, #2
 8004e1a:	e7fa      	b.n	8004e12 <USBD_LL_DataInStage+0xc8>

08004e1c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e20:	2340      	movs	r3, #64	; 0x40
 8004e22:	2200      	movs	r2, #0
 8004e24:	4611      	mov	r1, r2
 8004e26:	f003 fba3 	bl	8008570 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004e2a:	2501      	movs	r5, #1
 8004e2c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e30:	2640      	movs	r6, #64	; 0x40
 8004e32:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e36:	4633      	mov	r3, r6
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2180      	movs	r1, #128	; 0x80
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f003 fb97 	bl	8008570 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004e42:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e44:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e46:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8004e50:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004e52:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 8004e56:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004e5a:	b12b      	cbz	r3, 8004e68 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004e5c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2100      	movs	r1, #0
 8004e64:	4620      	mov	r0, r4
 8004e66:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004e68:	2000      	movs	r0, #0
 8004e6a:	bd70      	pop	{r4, r5, r6, pc}

08004e6c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004e6c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004e6e:	2000      	movs	r0, #0
 8004e70:	4770      	bx	lr

08004e72 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004e72:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004e76:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004e7a:	2304      	movs	r3, #4
 8004e7c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004e80:	2000      	movs	r0, #0
 8004e82:	4770      	bx	lr

08004e84 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004e84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d001      	beq.n	8004e90 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8004e90:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8004e94:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8004e98:	e7f8      	b.n	8004e8c <USBD_LL_Resume+0x8>

08004e9a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004e9a:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e9c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d001      	beq.n	8004ea8 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8004ea8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f8      	beq.n	8004ea4 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8004eb2:	4798      	blx	r3
 8004eb4:	e7f6      	b.n	8004ea4 <USBD_LL_SOF+0xa>

08004eb6 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
 8004eb6:	2300      	movs	r3, #0

  while (*buf != '\0')
 8004eb8:	e002      	b.n	8004ec0 <USBD_GetLen+0xa>
  {
    len++;
 8004eba:	3301      	adds	r3, #1
 8004ebc:	b2db      	uxtb	r3, r3
    buf++;
 8004ebe:	3001      	adds	r0, #1
  while (*buf != '\0')
 8004ec0:	7802      	ldrb	r2, [r0, #0]
 8004ec2:	2a00      	cmp	r2, #0
 8004ec4:	d1f9      	bne.n	8004eba <USBD_GetLen+0x4>
  }

  return len;
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	4770      	bx	lr

08004eca <USBD_SetFeature>:
{
 8004eca:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004ecc:	884b      	ldrh	r3, [r1, #2]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d000      	beq.n	8004ed4 <USBD_SetFeature+0xa>
}
 8004ed2:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8004ed4:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004ed8:	f000 fb62 	bl	80055a0 <USBD_CtlSendStatus>
}
 8004edc:	e7f9      	b.n	8004ed2 <USBD_SetFeature+0x8>

08004ede <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8004ede:	780b      	ldrb	r3, [r1, #0]
 8004ee0:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004ee2:	784b      	ldrb	r3, [r1, #1]
 8004ee4:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004ee6:	788b      	ldrb	r3, [r1, #2]
 8004ee8:	78ca      	ldrb	r2, [r1, #3]
 8004eea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004eee:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004ef0:	790b      	ldrb	r3, [r1, #4]
 8004ef2:	794a      	ldrb	r2, [r1, #5]
 8004ef4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004ef8:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004efa:	798b      	ldrb	r3, [r1, #6]
 8004efc:	79ca      	ldrb	r2, [r1, #7]
 8004efe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004f02:	80c3      	strh	r3, [r0, #6]
}
 8004f04:	4770      	bx	lr

08004f06 <USBD_CtlError>:
{
 8004f06:	b510      	push	{r4, lr}
 8004f08:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004f0a:	2180      	movs	r1, #128	; 0x80
 8004f0c:	f003 fb43 	bl	8008596 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004f10:	2100      	movs	r1, #0
 8004f12:	4620      	mov	r0, r4
 8004f14:	f003 fb3f 	bl	8008596 <USBD_LL_StallEP>
}
 8004f18:	bd10      	pop	{r4, pc}

08004f1a <USBD_GetDescriptor>:
{
 8004f1a:	b530      	push	{r4, r5, lr}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	4605      	mov	r5, r0
 8004f20:	460c      	mov	r4, r1
  uint16_t len = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004f28:	884a      	ldrh	r2, [r1, #2]
 8004f2a:	0a13      	lsrs	r3, r2, #8
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	2b06      	cmp	r3, #6
 8004f30:	f200 80a4 	bhi.w	800507c <USBD_GetDescriptor+0x162>
 8004f34:	e8df f003 	tbb	[pc, r3]
 8004f38:	a22c1804 	.word	0xa22c1804
 8004f3c:	86a2      	.short	0x86a2
 8004f3e:	93          	.byte	0x93
 8004f3f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004f40:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f10d 0106 	add.w	r1, sp, #6
 8004f4a:	7c00      	ldrb	r0, [r0, #16]
 8004f4c:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8004f4e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004f52:	b11a      	cbz	r2, 8004f5c <USBD_GetDescriptor+0x42>
 8004f54:	88e3      	ldrh	r3, [r4, #6]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f040 8094 	bne.w	8005084 <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 8004f5c:	88e3      	ldrh	r3, [r4, #6]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 809a 	beq.w	8005098 <USBD_GetDescriptor+0x17e>
}
 8004f64:	b003      	add	sp, #12
 8004f66:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f68:	7c03      	ldrb	r3, [r0, #16]
 8004f6a:	b943      	cbnz	r3, 8004f7e <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004f6c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	f10d 0006 	add.w	r0, sp, #6
 8004f76:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	7043      	strb	r3, [r0, #1]
 8004f7c:	e7e7      	b.n	8004f4e <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004f7e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	f10d 0006 	add.w	r0, sp, #6
 8004f88:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	7043      	strb	r3, [r0, #1]
 8004f8e:	e7de      	b.n	8004f4e <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	2a05      	cmp	r2, #5
 8004f94:	d852      	bhi.n	800503c <USBD_GetDescriptor+0x122>
 8004f96:	e8df f002 	tbb	[pc, r2]
 8004f9a:	1003      	.short	0x1003
 8004f9c:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004fa0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	b123      	cbz	r3, 8004fb2 <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004fa8:	f10d 0106 	add.w	r1, sp, #6
 8004fac:	7c00      	ldrb	r0, [r0, #16]
 8004fae:	4798      	blx	r3
 8004fb0:	e7cd      	b.n	8004f4e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	f7ff ffa7 	bl	8004f06 <USBD_CtlError>
 8004fb8:	e7d4      	b.n	8004f64 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004fba:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	b123      	cbz	r3, 8004fcc <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004fc2:	f10d 0106 	add.w	r1, sp, #6
 8004fc6:	7c00      	ldrb	r0, [r0, #16]
 8004fc8:	4798      	blx	r3
 8004fca:	e7c0      	b.n	8004f4e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004fcc:	4621      	mov	r1, r4
 8004fce:	f7ff ff9a 	bl	8004f06 <USBD_CtlError>
 8004fd2:	e7c7      	b.n	8004f64 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004fd4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	b123      	cbz	r3, 8004fe6 <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004fdc:	f10d 0106 	add.w	r1, sp, #6
 8004fe0:	7c00      	ldrb	r0, [r0, #16]
 8004fe2:	4798      	blx	r3
 8004fe4:	e7b3      	b.n	8004f4e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	f7ff ff8d 	bl	8004f06 <USBD_CtlError>
 8004fec:	e7ba      	b.n	8004f64 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004fee:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	b123      	cbz	r3, 8005000 <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004ff6:	f10d 0106 	add.w	r1, sp, #6
 8004ffa:	7c00      	ldrb	r0, [r0, #16]
 8004ffc:	4798      	blx	r3
 8004ffe:	e7a6      	b.n	8004f4e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005000:	4621      	mov	r1, r4
 8005002:	f7ff ff80 	bl	8004f06 <USBD_CtlError>
 8005006:	e7ad      	b.n	8004f64 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005008:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	b123      	cbz	r3, 800501a <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005010:	f10d 0106 	add.w	r1, sp, #6
 8005014:	7c00      	ldrb	r0, [r0, #16]
 8005016:	4798      	blx	r3
 8005018:	e799      	b.n	8004f4e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800501a:	4621      	mov	r1, r4
 800501c:	f7ff ff73 	bl	8004f06 <USBD_CtlError>
 8005020:	e7a0      	b.n	8004f64 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005022:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	b123      	cbz	r3, 8005034 <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800502a:	f10d 0106 	add.w	r1, sp, #6
 800502e:	7c00      	ldrb	r0, [r0, #16]
 8005030:	4798      	blx	r3
 8005032:	e78c      	b.n	8004f4e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005034:	4621      	mov	r1, r4
 8005036:	f7ff ff66 	bl	8004f06 <USBD_CtlError>
 800503a:	e793      	b.n	8004f64 <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 800503c:	4621      	mov	r1, r4
 800503e:	f7ff ff62 	bl	8004f06 <USBD_CtlError>
 8005042:	e78f      	b.n	8004f64 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005044:	7c03      	ldrb	r3, [r0, #16]
 8005046:	b933      	cbnz	r3, 8005056 <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005048:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800504c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504e:	f10d 0006 	add.w	r0, sp, #6
 8005052:	4798      	blx	r3
 8005054:	e77b      	b.n	8004f4e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005056:	4621      	mov	r1, r4
 8005058:	f7ff ff55 	bl	8004f06 <USBD_CtlError>
 800505c:	e782      	b.n	8004f64 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800505e:	7c03      	ldrb	r3, [r0, #16]
 8005060:	b943      	cbnz	r3, 8005074 <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005062:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	f10d 0006 	add.w	r0, sp, #6
 800506c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800506e:	2307      	movs	r3, #7
 8005070:	7043      	strb	r3, [r0, #1]
 8005072:	e76c      	b.n	8004f4e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005074:	4621      	mov	r1, r4
 8005076:	f7ff ff46 	bl	8004f06 <USBD_CtlError>
 800507a:	e773      	b.n	8004f64 <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 800507c:	4621      	mov	r1, r4
 800507e:	f7ff ff42 	bl	8004f06 <USBD_CtlError>
 8005082:	e76f      	b.n	8004f64 <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 8005084:	429a      	cmp	r2, r3
 8005086:	bf28      	it	cs
 8005088:	461a      	movcs	r2, r3
 800508a:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800508e:	4601      	mov	r1, r0
 8005090:	4628      	mov	r0, r5
 8005092:	f000 fa59 	bl	8005548 <USBD_CtlSendData>
 8005096:	e761      	b.n	8004f5c <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 8005098:	4628      	mov	r0, r5
 800509a:	f000 fa81 	bl	80055a0 <USBD_CtlSendStatus>
 800509e:	e761      	b.n	8004f64 <USBD_GetDescriptor+0x4a>

080050a0 <USBD_SetAddress>:
{
 80050a0:	b538      	push	{r3, r4, r5, lr}
 80050a2:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80050a4:	888b      	ldrh	r3, [r1, #4]
 80050a6:	b9f3      	cbnz	r3, 80050e6 <USBD_SetAddress+0x46>
 80050a8:	88cb      	ldrh	r3, [r1, #6]
 80050aa:	b9e3      	cbnz	r3, 80050e6 <USBD_SetAddress+0x46>
 80050ac:	884b      	ldrh	r3, [r1, #2]
 80050ae:	2b7f      	cmp	r3, #127	; 0x7f
 80050b0:	d819      	bhi.n	80050e6 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80050b2:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d00c      	beq.n	80050d8 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80050be:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80050c2:	4629      	mov	r1, r5
 80050c4:	f003 fa8a 	bl	80085dc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80050c8:	4620      	mov	r0, r4
 80050ca:	f000 fa69 	bl	80055a0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80050ce:	b135      	cbz	r5, 80050de <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80050d0:	2302      	movs	r3, #2
 80050d2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80050d6:	e009      	b.n	80050ec <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80050d8:	f7ff ff15 	bl	8004f06 <USBD_CtlError>
 80050dc:	e006      	b.n	80050ec <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80050de:	2301      	movs	r3, #1
 80050e0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80050e4:	e002      	b.n	80050ec <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 80050e6:	4620      	mov	r0, r4
 80050e8:	f7ff ff0d 	bl	8004f06 <USBD_CtlError>
}
 80050ec:	bd38      	pop	{r3, r4, r5, pc}
	...

080050f0 <USBD_SetConfig>:
{
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4604      	mov	r4, r0
 80050f4:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 80050f6:	7889      	ldrb	r1, [r1, #2]
 80050f8:	4b28      	ldr	r3, [pc, #160]	; (800519c <USBD_SetConfig+0xac>)
 80050fa:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80050fc:	2901      	cmp	r1, #1
 80050fe:	d80e      	bhi.n	800511e <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 8005100:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005104:	2b02      	cmp	r3, #2
 8005106:	d00e      	beq.n	8005126 <USBD_SetConfig+0x36>
 8005108:	2b03      	cmp	r3, #3
 800510a:	d021      	beq.n	8005150 <USBD_SetConfig+0x60>
        USBD_CtlError(pdev, req);
 800510c:	4629      	mov	r1, r5
 800510e:	f7ff fefa 	bl	8004f06 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005112:	4b22      	ldr	r3, [pc, #136]	; (800519c <USBD_SetConfig+0xac>)
 8005114:	7819      	ldrb	r1, [r3, #0]
 8005116:	4620      	mov	r0, r4
 8005118:	f7ff fd9a 	bl	8004c50 <USBD_ClrClassConfig>
        break;
 800511c:	e002      	b.n	8005124 <USBD_SetConfig+0x34>
    USBD_CtlError(pdev, req);
 800511e:	4629      	mov	r1, r5
 8005120:	f7ff fef1 	bl	8004f06 <USBD_CtlError>
}
 8005124:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 8005126:	b181      	cbz	r1, 800514a <USBD_SetConfig+0x5a>
          pdev->dev_config = cfgidx;
 8005128:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800512a:	2303      	movs	r3, #3
 800512c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005130:	f7ff fd81 	bl	8004c36 <USBD_SetClassConfig>
 8005134:	2802      	cmp	r0, #2
 8005136:	d003      	beq.n	8005140 <USBD_SetConfig+0x50>
          USBD_CtlSendStatus(pdev);
 8005138:	4620      	mov	r0, r4
 800513a:	f000 fa31 	bl	80055a0 <USBD_CtlSendStatus>
 800513e:	e7f1      	b.n	8005124 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 8005140:	4629      	mov	r1, r5
 8005142:	4620      	mov	r0, r4
 8005144:	f7ff fedf 	bl	8004f06 <USBD_CtlError>
            return;
 8005148:	e7ec      	b.n	8005124 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 800514a:	f000 fa29 	bl	80055a0 <USBD_CtlSendStatus>
 800514e:	e7e9      	b.n	8005124 <USBD_SetConfig+0x34>
        if (cfgidx == 0U)
 8005150:	b189      	cbz	r1, 8005176 <USBD_SetConfig+0x86>
        else if (cfgidx != pdev->dev_config)
 8005152:	6843      	ldr	r3, [r0, #4]
 8005154:	4299      	cmp	r1, r3
 8005156:	d01d      	beq.n	8005194 <USBD_SetConfig+0xa4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005158:	b2d9      	uxtb	r1, r3
 800515a:	f7ff fd79 	bl	8004c50 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800515e:	4b0f      	ldr	r3, [pc, #60]	; (800519c <USBD_SetConfig+0xac>)
 8005160:	7819      	ldrb	r1, [r3, #0]
 8005162:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005164:	4620      	mov	r0, r4
 8005166:	f7ff fd66 	bl	8004c36 <USBD_SetClassConfig>
 800516a:	2802      	cmp	r0, #2
 800516c:	d00d      	beq.n	800518a <USBD_SetConfig+0x9a>
          USBD_CtlSendStatus(pdev);
 800516e:	4620      	mov	r0, r4
 8005170:	f000 fa16 	bl	80055a0 <USBD_CtlSendStatus>
 8005174:	e7d6      	b.n	8005124 <USBD_SetConfig+0x34>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005176:	2302      	movs	r3, #2
 8005178:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800517c:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800517e:	f7ff fd67 	bl	8004c50 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005182:	4620      	mov	r0, r4
 8005184:	f000 fa0c 	bl	80055a0 <USBD_CtlSendStatus>
 8005188:	e7cc      	b.n	8005124 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 800518a:	4629      	mov	r1, r5
 800518c:	4620      	mov	r0, r4
 800518e:	f7ff feba 	bl	8004f06 <USBD_CtlError>
            return;
 8005192:	e7c7      	b.n	8005124 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 8005194:	f000 fa04 	bl	80055a0 <USBD_CtlSendStatus>
 8005198:	e7c4      	b.n	8005124 <USBD_SetConfig+0x34>
 800519a:	bf00      	nop
 800519c:	20000404 	.word	0x20000404

080051a0 <USBD_GetConfig>:
{
 80051a0:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80051a2:	88cb      	ldrh	r3, [r1, #6]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d10b      	bne.n	80051c0 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80051a8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80051ac:	b19b      	cbz	r3, 80051d6 <USBD_GetConfig+0x36>
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d909      	bls.n	80051c6 <USBD_GetConfig+0x26>
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d10f      	bne.n	80051d6 <USBD_GetConfig+0x36>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80051b6:	2201      	movs	r2, #1
 80051b8:	1d01      	adds	r1, r0, #4
 80051ba:	f000 f9c5 	bl	8005548 <USBD_CtlSendData>
        break;
 80051be:	e001      	b.n	80051c4 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 80051c0:	f7ff fea1 	bl	8004f06 <USBD_CtlError>
}
 80051c4:	bd08      	pop	{r3, pc}
        pdev->dev_default_config = 0U;
 80051c6:	4601      	mov	r1, r0
 80051c8:	2300      	movs	r3, #0
 80051ca:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80051ce:	2201      	movs	r2, #1
 80051d0:	f000 f9ba 	bl	8005548 <USBD_CtlSendData>
        break;
 80051d4:	e7f6      	b.n	80051c4 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 80051d6:	f7ff fe96 	bl	8004f06 <USBD_CtlError>
}
 80051da:	e7f3      	b.n	80051c4 <USBD_GetConfig+0x24>

080051dc <USBD_GetStatus>:
{
 80051dc:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80051de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80051e2:	3b01      	subs	r3, #1
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d812      	bhi.n	800520e <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80051e8:	88cb      	ldrh	r3, [r1, #6]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d10c      	bne.n	8005208 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80051ee:	2301      	movs	r3, #1
 80051f0:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80051f2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80051f6:	b10b      	cbz	r3, 80051fc <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80051f8:	2303      	movs	r3, #3
 80051fa:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80051fc:	2202      	movs	r2, #2
 80051fe:	f100 010c 	add.w	r1, r0, #12
 8005202:	f000 f9a1 	bl	8005548 <USBD_CtlSendData>
}
 8005206:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8005208:	f7ff fe7d 	bl	8004f06 <USBD_CtlError>
        break;
 800520c:	e7fb      	b.n	8005206 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800520e:	f7ff fe7a 	bl	8004f06 <USBD_CtlError>
}
 8005212:	e7f8      	b.n	8005206 <USBD_GetStatus+0x2a>

08005214 <USBD_ClrFeature>:
{
 8005214:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005216:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800521a:	3b01      	subs	r3, #1
 800521c:	2b02      	cmp	r3, #2
 800521e:	d809      	bhi.n	8005234 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005220:	884b      	ldrh	r3, [r1, #2]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d000      	beq.n	8005228 <USBD_ClrFeature+0x14>
}
 8005226:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800522e:	f000 f9b7 	bl	80055a0 <USBD_CtlSendStatus>
 8005232:	e7f8      	b.n	8005226 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8005234:	f7ff fe67 	bl	8004f06 <USBD_CtlError>
}
 8005238:	e7f5      	b.n	8005226 <USBD_ClrFeature+0x12>

0800523a <USBD_StdDevReq>:
{
 800523a:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800523c:	780b      	ldrb	r3, [r1, #0]
 800523e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005242:	2b20      	cmp	r3, #32
 8005244:	d005      	beq.n	8005252 <USBD_StdDevReq+0x18>
 8005246:	2b40      	cmp	r3, #64	; 0x40
 8005248:	d003      	beq.n	8005252 <USBD_StdDevReq+0x18>
 800524a:	b143      	cbz	r3, 800525e <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 800524c:	f7ff fe5b 	bl	8004f06 <USBD_CtlError>
      break;
 8005250:	e003      	b.n	800525a <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 8005252:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	4798      	blx	r3
}
 800525a:	2000      	movs	r0, #0
 800525c:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 800525e:	784b      	ldrb	r3, [r1, #1]
 8005260:	2b09      	cmp	r3, #9
 8005262:	d81b      	bhi.n	800529c <USBD_StdDevReq+0x62>
 8005264:	e8df f003 	tbb	[pc, r3]
 8005268:	141a1711 	.word	0x141a1711
 800526c:	1a05081a 	.word	0x1a05081a
 8005270:	0b0e      	.short	0x0b0e
          USBD_GetDescriptor(pdev, req);
 8005272:	f7ff fe52 	bl	8004f1a <USBD_GetDescriptor>
          break;
 8005276:	e7f0      	b.n	800525a <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 8005278:	f7ff ff12 	bl	80050a0 <USBD_SetAddress>
          break;
 800527c:	e7ed      	b.n	800525a <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 800527e:	f7ff ff37 	bl	80050f0 <USBD_SetConfig>
          break;
 8005282:	e7ea      	b.n	800525a <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 8005284:	f7ff ff8c 	bl	80051a0 <USBD_GetConfig>
          break;
 8005288:	e7e7      	b.n	800525a <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 800528a:	f7ff ffa7 	bl	80051dc <USBD_GetStatus>
          break;
 800528e:	e7e4      	b.n	800525a <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 8005290:	f7ff fe1b 	bl	8004eca <USBD_SetFeature>
          break;
 8005294:	e7e1      	b.n	800525a <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 8005296:	f7ff ffbd 	bl	8005214 <USBD_ClrFeature>
          break;
 800529a:	e7de      	b.n	800525a <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 800529c:	f7ff fe33 	bl	8004f06 <USBD_CtlError>
          break;
 80052a0:	e7db      	b.n	800525a <USBD_StdDevReq+0x20>

080052a2 <USBD_StdItfReq>:
{
 80052a2:	b538      	push	{r3, r4, r5, lr}
 80052a4:	4605      	mov	r5, r0
 80052a6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052a8:	780b      	ldrb	r3, [r1, #0]
 80052aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d006      	beq.n	80052c0 <USBD_StdItfReq+0x1e>
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d004      	beq.n	80052c0 <USBD_StdItfReq+0x1e>
 80052b6:	b11b      	cbz	r3, 80052c0 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 80052b8:	f7ff fe25 	bl	8004f06 <USBD_CtlError>
}
 80052bc:	2000      	movs	r0, #0
 80052be:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80052c0:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 80052c4:	3b01      	subs	r3, #1
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d816      	bhi.n	80052f8 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80052ca:	7923      	ldrb	r3, [r4, #4]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d80e      	bhi.n	80052ee <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80052d0:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	4621      	mov	r1, r4
 80052d8:	4628      	mov	r0, r5
 80052da:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80052dc:	88e3      	ldrh	r3, [r4, #6]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1ec      	bne.n	80052bc <USBD_StdItfReq+0x1a>
 80052e2:	2800      	cmp	r0, #0
 80052e4:	d1ea      	bne.n	80052bc <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 f95a 	bl	80055a0 <USBD_CtlSendStatus>
 80052ec:	e7e6      	b.n	80052bc <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 80052ee:	4621      	mov	r1, r4
 80052f0:	4628      	mov	r0, r5
 80052f2:	f7ff fe08 	bl	8004f06 <USBD_CtlError>
 80052f6:	e7e1      	b.n	80052bc <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 80052f8:	4621      	mov	r1, r4
 80052fa:	4628      	mov	r0, r5
 80052fc:	f7ff fe03 	bl	8004f06 <USBD_CtlError>
          break;
 8005300:	e7dc      	b.n	80052bc <USBD_StdItfReq+0x1a>

08005302 <USBD_StdEPReq>:
{
 8005302:	b538      	push	{r3, r4, r5, lr}
 8005304:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8005306:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005308:	780b      	ldrb	r3, [r1, #0]
 800530a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800530e:	2b20      	cmp	r3, #32
 8005310:	d008      	beq.n	8005324 <USBD_StdEPReq+0x22>
 8005312:	b2d0      	uxtb	r0, r2
 8005314:	2b40      	cmp	r3, #64	; 0x40
 8005316:	d005      	beq.n	8005324 <USBD_StdEPReq+0x22>
 8005318:	b15b      	cbz	r3, 8005332 <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 800531a:	4620      	mov	r0, r4
 800531c:	f7ff fdf3 	bl	8004f06 <USBD_CtlError>
  return ret;
 8005320:	2000      	movs	r0, #0
      break;
 8005322:	e005      	b.n	8005330 <USBD_StdEPReq+0x2e>
      pdev->pClass->Setup(pdev, req);
 8005324:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	4620      	mov	r0, r4
 800532c:	4798      	blx	r3
  return ret;
 800532e:	2000      	movs	r0, #0
}
 8005330:	bd38      	pop	{r3, r4, r5, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005332:	2b20      	cmp	r3, #32
 8005334:	d105      	bne.n	8005342 <USBD_StdEPReq+0x40>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005336:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	4620      	mov	r0, r4
 800533e:	4798      	blx	r3
        return ret;
 8005340:	e7f6      	b.n	8005330 <USBD_StdEPReq+0x2e>
      switch (req->bRequest)
 8005342:	784b      	ldrb	r3, [r1, #1]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d032      	beq.n	80053ae <USBD_StdEPReq+0xac>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d05e      	beq.n	800540a <USBD_StdEPReq+0x108>
 800534c:	2b03      	cmp	r3, #3
 800534e:	f040 80d8 	bne.w	8005502 <USBD_StdEPReq+0x200>
          switch (pdev->dev_state)
 8005352:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005356:	2b02      	cmp	r3, #2
 8005358:	d006      	beq.n	8005368 <USBD_StdEPReq+0x66>
 800535a:	2b03      	cmp	r3, #3
 800535c:	d016      	beq.n	800538c <USBD_StdEPReq+0x8a>
              USBD_CtlError(pdev, req);
 800535e:	4620      	mov	r0, r4
 8005360:	f7ff fdd1 	bl	8004f06 <USBD_CtlError>
  return ret;
 8005364:	2000      	movs	r0, #0
              break;
 8005366:	e7e3      	b.n	8005330 <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005368:	b108      	cbz	r0, 800536e <USBD_StdEPReq+0x6c>
 800536a:	2880      	cmp	r0, #128	; 0x80
 800536c:	d104      	bne.n	8005378 <USBD_StdEPReq+0x76>
                USBD_CtlError(pdev, req);
 800536e:	4620      	mov	r0, r4
 8005370:	f7ff fdc9 	bl	8004f06 <USBD_CtlError>
  return ret;
 8005374:	2000      	movs	r0, #0
 8005376:	e7db      	b.n	8005330 <USBD_StdEPReq+0x2e>
                USBD_LL_StallEP(pdev, ep_addr);
 8005378:	4601      	mov	r1, r0
 800537a:	4620      	mov	r0, r4
 800537c:	f003 f90b 	bl	8008596 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005380:	2180      	movs	r1, #128	; 0x80
 8005382:	4620      	mov	r0, r4
 8005384:	f003 f907 	bl	8008596 <USBD_LL_StallEP>
  return ret;
 8005388:	2000      	movs	r0, #0
                USBD_LL_StallEP(pdev, 0x80U);
 800538a:	e7d1      	b.n	8005330 <USBD_StdEPReq+0x2e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800538c:	884b      	ldrh	r3, [r1, #2]
 800538e:	b923      	cbnz	r3, 800539a <USBD_StdEPReq+0x98>
                if ((ep_addr != 0x00U) &&
 8005390:	b118      	cbz	r0, 800539a <USBD_StdEPReq+0x98>
 8005392:	2880      	cmp	r0, #128	; 0x80
 8005394:	d001      	beq.n	800539a <USBD_StdEPReq+0x98>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005396:	88cb      	ldrh	r3, [r1, #6]
 8005398:	b123      	cbz	r3, 80053a4 <USBD_StdEPReq+0xa2>
              USBD_CtlSendStatus(pdev);
 800539a:	4620      	mov	r0, r4
 800539c:	f000 f900 	bl	80055a0 <USBD_CtlSendStatus>
  return ret;
 80053a0:	2000      	movs	r0, #0
              break;
 80053a2:	e7c5      	b.n	8005330 <USBD_StdEPReq+0x2e>
                  USBD_LL_StallEP(pdev, ep_addr);
 80053a4:	4601      	mov	r1, r0
 80053a6:	4620      	mov	r0, r4
 80053a8:	f003 f8f5 	bl	8008596 <USBD_LL_StallEP>
 80053ac:	e7f5      	b.n	800539a <USBD_StdEPReq+0x98>
          switch (pdev->dev_state)
 80053ae:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d006      	beq.n	80053c4 <USBD_StdEPReq+0xc2>
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d016      	beq.n	80053e8 <USBD_StdEPReq+0xe6>
              USBD_CtlError(pdev, req);
 80053ba:	4620      	mov	r0, r4
 80053bc:	f7ff fda3 	bl	8004f06 <USBD_CtlError>
  return ret;
 80053c0:	2000      	movs	r0, #0
              break;
 80053c2:	e7b5      	b.n	8005330 <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053c4:	b108      	cbz	r0, 80053ca <USBD_StdEPReq+0xc8>
 80053c6:	2880      	cmp	r0, #128	; 0x80
 80053c8:	d104      	bne.n	80053d4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80053ca:	4620      	mov	r0, r4
 80053cc:	f7ff fd9b 	bl	8004f06 <USBD_CtlError>
  return ret;
 80053d0:	2000      	movs	r0, #0
 80053d2:	e7ad      	b.n	8005330 <USBD_StdEPReq+0x2e>
                USBD_LL_StallEP(pdev, ep_addr);
 80053d4:	4601      	mov	r1, r0
 80053d6:	4620      	mov	r0, r4
 80053d8:	f003 f8dd 	bl	8008596 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80053dc:	2180      	movs	r1, #128	; 0x80
 80053de:	4620      	mov	r0, r4
 80053e0:	f003 f8d9 	bl	8008596 <USBD_LL_StallEP>
  return ret;
 80053e4:	2000      	movs	r0, #0
                USBD_LL_StallEP(pdev, 0x80U);
 80053e6:	e7a3      	b.n	8005330 <USBD_StdEPReq+0x2e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80053e8:	884b      	ldrh	r3, [r1, #2]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f040 808e 	bne.w	800550c <USBD_StdEPReq+0x20a>
                if ((ep_addr & 0x7FU) != 0x00U)
 80053f0:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80053f4:	d104      	bne.n	8005400 <USBD_StdEPReq+0xfe>
                USBD_CtlSendStatus(pdev);
 80053f6:	4620      	mov	r0, r4
 80053f8:	f000 f8d2 	bl	80055a0 <USBD_CtlSendStatus>
  return ret;
 80053fc:	2000      	movs	r0, #0
 80053fe:	e797      	b.n	8005330 <USBD_StdEPReq+0x2e>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005400:	4601      	mov	r1, r0
 8005402:	4620      	mov	r0, r4
 8005404:	f003 f8cf 	bl	80085a6 <USBD_LL_ClearStallEP>
 8005408:	e7f5      	b.n	80053f6 <USBD_StdEPReq+0xf4>
          switch (pdev->dev_state)
 800540a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800540e:	2b02      	cmp	r3, #2
 8005410:	d006      	beq.n	8005420 <USBD_StdEPReq+0x11e>
 8005412:	2b03      	cmp	r3, #3
 8005414:	d02a      	beq.n	800546c <USBD_StdEPReq+0x16a>
              USBD_CtlError(pdev, req);
 8005416:	4620      	mov	r0, r4
 8005418:	f7ff fd75 	bl	8004f06 <USBD_CtlError>
  return ret;
 800541c:	2000      	movs	r0, #0
              break;
 800541e:	e787      	b.n	8005330 <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005420:	b108      	cbz	r0, 8005426 <USBD_StdEPReq+0x124>
 8005422:	2880      	cmp	r0, #128	; 0x80
 8005424:	d113      	bne.n	800544e <USBD_StdEPReq+0x14c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005426:	f012 0f80 	tst.w	r2, #128	; 0x80
 800542a:	d115      	bne.n	8005458 <USBD_StdEPReq+0x156>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800542c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005430:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005434:	0083      	lsls	r3, r0, #2
 8005436:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 800543a:	4421      	add	r1, r4
 800543c:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800543e:	2500      	movs	r5, #0
 8005440:	600d      	str	r5, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005442:	2202      	movs	r2, #2
 8005444:	4620      	mov	r0, r4
 8005446:	f000 f87f 	bl	8005548 <USBD_CtlSendData>
  return ret;
 800544a:	4628      	mov	r0, r5
              break;
 800544c:	e770      	b.n	8005330 <USBD_StdEPReq+0x2e>
                USBD_CtlError(pdev, req);
 800544e:	4620      	mov	r0, r4
 8005450:	f7ff fd59 	bl	8004f06 <USBD_CtlError>
  return ret;
 8005454:	2000      	movs	r0, #0
                break;
 8005456:	e76b      	b.n	8005330 <USBD_StdEPReq+0x2e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005458:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800545c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005460:	0083      	lsls	r3, r0, #2
 8005462:	f103 0110 	add.w	r1, r3, #16
 8005466:	4421      	add	r1, r4
 8005468:	3104      	adds	r1, #4
 800546a:	e7e8      	b.n	800543e <USBD_StdEPReq+0x13c>
              if ((ep_addr & 0x80U) == 0x80U)
 800546c:	b252      	sxtb	r2, r2
 800546e:	2a00      	cmp	r2, #0
 8005470:	db1f      	blt.n	80054b2 <USBD_StdEPReq+0x1b0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005472:	f000 030f 	and.w	r3, r0, #15
 8005476:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800547a:	009d      	lsls	r5, r3, #2
 800547c:	4425      	add	r5, r4
 800547e:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
 8005482:	b323      	cbz	r3, 80054ce <USBD_StdEPReq+0x1cc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005484:	2a00      	cmp	r2, #0
 8005486:	db27      	blt.n	80054d8 <USBD_StdEPReq+0x1d6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005488:	f000 027f 	and.w	r2, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800548c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005490:	0093      	lsls	r3, r2, #2
 8005492:	f503 75a8 	add.w	r5, r3, #336	; 0x150
 8005496:	4425      	add	r5, r4
 8005498:	3504      	adds	r5, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800549a:	b108      	cbz	r0, 80054a0 <USBD_StdEPReq+0x19e>
 800549c:	2880      	cmp	r0, #128	; 0x80
 800549e:	d125      	bne.n	80054ec <USBD_StdEPReq+0x1ea>
                pep->status = 0x0000U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80054a4:	2202      	movs	r2, #2
 80054a6:	4629      	mov	r1, r5
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 f84d 	bl	8005548 <USBD_CtlSendData>
  return ret;
 80054ae:	2000      	movs	r0, #0
              break;
 80054b0:	e73e      	b.n	8005330 <USBD_StdEPReq+0x2e>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80054b2:	f000 030f 	and.w	r3, r0, #15
 80054b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80054ba:	009d      	lsls	r5, r3, #2
 80054bc:	4425      	add	r5, r4
 80054be:	69ab      	ldr	r3, [r5, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1df      	bne.n	8005484 <USBD_StdEPReq+0x182>
                  USBD_CtlError(pdev, req);
 80054c4:	4620      	mov	r0, r4
 80054c6:	f7ff fd1e 	bl	8004f06 <USBD_CtlError>
  return ret;
 80054ca:	2000      	movs	r0, #0
                  break;
 80054cc:	e730      	b.n	8005330 <USBD_StdEPReq+0x2e>
                  USBD_CtlError(pdev, req);
 80054ce:	4620      	mov	r0, r4
 80054d0:	f7ff fd19 	bl	8004f06 <USBD_CtlError>
  return ret;
 80054d4:	2000      	movs	r0, #0
                  break;
 80054d6:	e72b      	b.n	8005330 <USBD_StdEPReq+0x2e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054d8:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80054dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80054e0:	0093      	lsls	r3, r2, #2
 80054e2:	f103 0510 	add.w	r5, r3, #16
 80054e6:	4425      	add	r5, r4
 80054e8:	3504      	adds	r5, #4
 80054ea:	e7d6      	b.n	800549a <USBD_StdEPReq+0x198>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80054ec:	4601      	mov	r1, r0
 80054ee:	4620      	mov	r0, r4
 80054f0:	f003 f861 	bl	80085b6 <USBD_LL_IsStallEP>
 80054f4:	b110      	cbz	r0, 80054fc <USBD_StdEPReq+0x1fa>
                pep->status = 0x0001U;
 80054f6:	2301      	movs	r3, #1
 80054f8:	602b      	str	r3, [r5, #0]
 80054fa:	e7d3      	b.n	80054a4 <USBD_StdEPReq+0x1a2>
                pep->status = 0x0000U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	602b      	str	r3, [r5, #0]
 8005500:	e7d0      	b.n	80054a4 <USBD_StdEPReq+0x1a2>
          USBD_CtlError(pdev, req);
 8005502:	4620      	mov	r0, r4
 8005504:	f7ff fcff 	bl	8004f06 <USBD_CtlError>
  return ret;
 8005508:	2000      	movs	r0, #0
          break;
 800550a:	e711      	b.n	8005330 <USBD_StdEPReq+0x2e>
  return ret;
 800550c:	2000      	movs	r0, #0
 800550e:	e70f      	b.n	8005330 <USBD_StdEPReq+0x2e>

08005510 <USBD_GetString>:
  if (desc != NULL)
 8005510:	b1c8      	cbz	r0, 8005546 <USBD_GetString+0x36>
{
 8005512:	b570      	push	{r4, r5, r6, lr}
 8005514:	460d      	mov	r5, r1
 8005516:	4616      	mov	r6, r2
 8005518:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800551a:	f7ff fccc 	bl	8004eb6 <USBD_GetLen>
 800551e:	3001      	adds	r0, #1
 8005520:	0040      	lsls	r0, r0, #1
 8005522:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005524:	7028      	strb	r0, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005526:	2303      	movs	r3, #3
 8005528:	706b      	strb	r3, [r5, #1]
 800552a:	2302      	movs	r3, #2
    while (*desc != '\0')
 800552c:	e007      	b.n	800553e <USBD_GetString+0x2e>
      unicode[idx++] = *desc++;
 800552e:	3401      	adds	r4, #1
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0U;
 8005536:	3302      	adds	r3, #2
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2100      	movs	r1, #0
 800553c:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 800553e:	7821      	ldrb	r1, [r4, #0]
 8005540:	2900      	cmp	r1, #0
 8005542:	d1f4      	bne.n	800552e <USBD_GetString+0x1e>
}
 8005544:	bd70      	pop	{r4, r5, r6, pc}
 8005546:	4770      	bx	lr

08005548 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005548:	b510      	push	{r4, lr}
 800554a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800554c:	2202      	movs	r2, #2
 800554e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005552:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8005554:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005556:	460a      	mov	r2, r1
 8005558:	2100      	movs	r1, #0
 800555a:	f003 f847 	bl	80085ec <USBD_LL_Transmit>

  return USBD_OK;
}
 800555e:	2000      	movs	r0, #0
 8005560:	bd10      	pop	{r4, pc}

08005562 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005562:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005564:	4613      	mov	r3, r2
 8005566:	460a      	mov	r2, r1
 8005568:	2100      	movs	r1, #0
 800556a:	f003 f83f 	bl	80085ec <USBD_LL_Transmit>

  return USBD_OK;
}
 800556e:	2000      	movs	r0, #0
 8005570:	bd08      	pop	{r3, pc}

08005572 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005572:	b510      	push	{r4, lr}
 8005574:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005576:	2203      	movs	r2, #3
 8005578:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800557c:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005580:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005584:	460a      	mov	r2, r1
 8005586:	2100      	movs	r1, #0
 8005588:	f003 f838 	bl	80085fc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800558c:	2000      	movs	r0, #0
 800558e:	bd10      	pop	{r4, pc}

08005590 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005590:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005592:	4613      	mov	r3, r2
 8005594:	460a      	mov	r2, r1
 8005596:	2100      	movs	r1, #0
 8005598:	f003 f830 	bl	80085fc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800559c:	2000      	movs	r0, #0
 800559e:	bd08      	pop	{r3, pc}

080055a0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80055a0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80055a2:	2304      	movs	r3, #4
 80055a4:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80055a8:	2300      	movs	r3, #0
 80055aa:	461a      	mov	r2, r3
 80055ac:	4619      	mov	r1, r3
 80055ae:	f003 f81d 	bl	80085ec <USBD_LL_Transmit>

  return USBD_OK;
}
 80055b2:	2000      	movs	r0, #0
 80055b4:	bd08      	pop	{r3, pc}

080055b6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80055b6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80055b8:	2305      	movs	r3, #5
 80055ba:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055be:	2300      	movs	r3, #0
 80055c0:	461a      	mov	r2, r3
 80055c2:	4619      	mov	r1, r3
 80055c4:	f003 f81a 	bl	80085fc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80055c8:	2000      	movs	r0, #0
 80055ca:	bd08      	pop	{r3, pc}

080055cc <set_addr>:
	init_regs();
}

void set_addr(uint32_t addr)
{
	reg_addr = addr;
 80055cc:	4b01      	ldr	r3, [pc, #4]	; (80055d4 <set_addr+0x8>)
 80055ce:	6018      	str	r0, [r3, #0]
}
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	20000408 	.word	0x20000408

080055d8 <get_addr>:

uint32_t get_addr(void)
{
	return reg_addr;
}
 80055d8:	4b01      	ldr	r3, [pc, #4]	; (80055e0 <get_addr+0x8>)
 80055da:	6818      	ldr	r0, [r3, #0]
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	20000408 	.word	0x20000408

080055e4 <get_mode>:

dmxmode_t get_mode(void)
{
	return dmx_mode;
}
 80055e4:	4b01      	ldr	r3, [pc, #4]	; (80055ec <get_mode+0x8>)
 80055e6:	7818      	ldrb	r0, [r3, #0]
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20000405 	.word	0x20000405

080055f0 <set_reg_length>:

void set_reg_length(uint32_t len)
{
	reg_len = len;
 80055f0:	4b01      	ldr	r3, [pc, #4]	; (80055f8 <set_reg_length+0x8>)
 80055f2:	6018      	str	r0, [r3, #0]
}
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	20000410 	.word	0x20000410

080055fc <get_reg_length>:

uint32_t get_reg_length(void)
{
	return reg_len;
}
 80055fc:	4b01      	ldr	r3, [pc, #4]	; (8005604 <get_reg_length+0x8>)
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20000410 	.word	0x20000410

08005608 <init_regs>:

void init_regs(void)
{
 8005608:	b510      	push	{r4, lr}
	//allocate memory
	if (reg_data != NULL)
 800560a:	4b08      	ldr	r3, [pc, #32]	; (800562c <init_regs+0x24>)
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	b108      	cbz	r0, 8005614 <init_regs+0xc>
		free(reg_data);
 8005610:	f004 f87e 	bl	8009710 <free>

	reg_data = malloc(reg_len * sizeof(uint8_t));
 8005614:	4b06      	ldr	r3, [pc, #24]	; (8005630 <init_regs+0x28>)
 8005616:	681c      	ldr	r4, [r3, #0]
 8005618:	4620      	mov	r0, r4
 800561a:	f004 f871 	bl	8009700 <malloc>
 800561e:	4b03      	ldr	r3, [pc, #12]	; (800562c <init_regs+0x24>)
 8005620:	6018      	str	r0, [r3, #0]
	memset(reg_data, 0,reg_len);
 8005622:	4622      	mov	r2, r4
 8005624:	2100      	movs	r1, #0
 8005626:	f004 f886 	bl	8009736 <memset>
}
 800562a:	bd10      	pop	{r4, pc}
 800562c:	2000040c 	.word	0x2000040c
 8005630:	20000410 	.word	0x20000410

08005634 <dmx512_init>:
{
 8005634:	b510      	push	{r4, lr}
 8005636:	4604      	mov	r4, r0
	set_addr(addr);
 8005638:	4608      	mov	r0, r1
 800563a:	f7ff ffc7 	bl	80055cc <set_addr>
	if ((mode & 0x01) != 0)
 800563e:	f014 0f01 	tst.w	r4, #1
 8005642:	d002      	beq.n	800564a <dmx512_init+0x16>
		dmx_mode = DMX_MODE2;
 8005644:	4b08      	ldr	r3, [pc, #32]	; (8005668 <dmx512_init+0x34>)
 8005646:	2201      	movs	r2, #1
 8005648:	701a      	strb	r2, [r3, #0]
	switch (dmx_mode)
 800564a:	4b07      	ldr	r3, [pc, #28]	; (8005668 <dmx512_init+0x34>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d105      	bne.n	800565e <dmx512_init+0x2a>
			set_reg_length(DMX512_MODE2_LENGTH);
 8005652:	201a      	movs	r0, #26
 8005654:	f7ff ffcc 	bl	80055f0 <set_reg_length>
	init_regs();
 8005658:	f7ff ffd6 	bl	8005608 <init_regs>
}
 800565c:	bd10      	pop	{r4, pc}
			 set_reg_length(DMX512_MODE1_LENGTH);
 800565e:	200b      	movs	r0, #11
 8005660:	f7ff ffc6 	bl	80055f0 <set_reg_length>
			break;
 8005664:	e7f8      	b.n	8005658 <dmx512_init+0x24>
 8005666:	bf00      	nop
 8005668:	20000405 	.word	0x20000405

0800566c <set_reg>:

void set_reg(uint32_t reg, uint8_t val)
{
	if ((reg_data != NULL) && (reg<reg_len))
 800566c:	4b04      	ldr	r3, [pc, #16]	; (8005680 <set_reg+0x14>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	b123      	cbz	r3, 800567c <set_reg+0x10>
 8005672:	4a04      	ldr	r2, [pc, #16]	; (8005684 <set_reg+0x18>)
 8005674:	6812      	ldr	r2, [r2, #0]
 8005676:	4282      	cmp	r2, r0
 8005678:	d900      	bls.n	800567c <set_reg+0x10>
	{
		reg_data[reg] = val;
 800567a:	5419      	strb	r1, [r3, r0]
	}
}
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	2000040c 	.word	0x2000040c
 8005684:	20000410 	.word	0x20000410

08005688 <get_reg>:

uint8_t get_reg(uint32_t reg)
{
	if ((reg_data != NULL) && (reg<reg_len))
 8005688:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <get_reg+0x1c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	b12b      	cbz	r3, 800569a <get_reg+0x12>
 800568e:	4a06      	ldr	r2, [pc, #24]	; (80056a8 <get_reg+0x20>)
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	4282      	cmp	r2, r0
 8005694:	d903      	bls.n	800569e <get_reg+0x16>
	{
		return reg_data[reg];
 8005696:	5c18      	ldrb	r0, [r3, r0]
 8005698:	4770      	bx	lr
	}
	else
	{
		return 0;
 800569a:	2000      	movs	r0, #0
 800569c:	4770      	bx	lr
 800569e:	2000      	movs	r0, #0
	}
}
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	2000040c 	.word	0x2000040c
 80056a8:	20000410 	.word	0x20000410

080056ac <get_reg_name>:
}


const char* get_reg_name(uint32_t reg)
{
	if (reg<reg_len)
 80056ac:	4b04      	ldr	r3, [pc, #16]	; (80056c0 <get_reg_name+0x14>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4283      	cmp	r3, r0
 80056b2:	d903      	bls.n	80056bc <get_reg_name+0x10>
		return regnames[reg];
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <get_reg_name+0x18>)
 80056b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80056ba:	4770      	bx	lr
	else
		return 0;
 80056bc:	2000      	movs	r0, #0
}
 80056be:	4770      	bx	lr
 80056c0:	20000410 	.word	0x20000410
 80056c4:	20000118 	.word	0x20000118

080056c8 <USART1_IRQHandler>:
//END TODO
#endif

/* UART1 Interrupt Service Routine */
void USART1_IRQHandler(void)
{
 80056c8:	b500      	push	{lr}
 80056ca:	b083      	sub	sp, #12
	//Get the received byte and clear Frame Error IRQ flag
	//On Framing Error restart Timer to search for a start condition
	if (__HAL_UART_GET_FLAG(&huart1,UART_FLAG_FE))
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <USART1_IRQHandler+0x30>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	f012 0f02 	tst.w	r2, #2
 80056d6:	d009      	beq.n	80056ec <USART1_IRQHandler+0x24>
	{
		__HAL_UART_CLEAR_FEFLAG(&huart1);
 80056d8:	2200      	movs	r2, #0
 80056da:	9201      	str	r2, [sp, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	9201      	str	r2, [sp, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	9b01      	ldr	r3, [sp, #4]
#ifdef USE_TIMER
		TIM_ITConfig(TIM1, TIM_IT_CC1, ENABLE);
#else
		start_flag = 1;
 80056e6:	4b05      	ldr	r3, [pc, #20]	; (80056fc <USART1_IRQHandler+0x34>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	701a      	strb	r2, [r3, #0]
#endif
	}
	HAL_UART_IRQHandler(&huart1);
 80056ec:	4802      	ldr	r0, [pc, #8]	; (80056f8 <USART1_IRQHandler+0x30>)
 80056ee:	f7fe fb27 	bl	8003d40 <HAL_UART_IRQHandler>
}
 80056f2:	b003      	add	sp, #12
 80056f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80056f8:	20000c88 	.word	0x20000c88
 80056fc:	20000420 	.word	0x20000420

08005700 <USART3_IRQHandler>:

#ifdef USE_UART_IRQ
/* UART3 Interrupt Service Routine */
void USART3_IRQHandler(void)
{
 8005700:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&huart3);
 8005702:	4802      	ldr	r0, [pc, #8]	; (800570c <USART3_IRQHandler+0xc>)
 8005704:	f7fe fb1c 	bl	8003d40 <HAL_UART_IRQHandler>
}
 8005708:	bd08      	pop	{r3, pc}
 800570a:	bf00      	nop
 800570c:	20000bac 	.word	0x20000bac

08005710 <HAL_UART_RxCpltCallback>:
#endif

//UART IRQ Triggered by incoming characters
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005710:	b510      	push	{r4, lr}
 8005712:	b082      	sub	sp, #8
	volatile uint8_t rx_byte;

	if (huart->Instance == USART1)
 8005714:	6803      	ldr	r3, [r0, #0]
 8005716:	4a42      	ldr	r2, [pc, #264]	; (8005820 <HAL_UART_RxCpltCallback+0x110>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d004      	beq.n	8005726 <HAL_UART_RxCpltCallback+0x16>

		//Get more data
		HAL_UART_Receive_IT(&huart1, &buffer, 1);
    }
#ifdef USE_UART_IRQ
	else if (huart->Instance == USART3)
 800571c:	4a41      	ldr	r2, [pc, #260]	; (8005824 <HAL_UART_RxCpltCallback+0x114>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d069      	beq.n	80057f6 <HAL_UART_RxCpltCallback+0xe6>

		//Get more data
		HAL_UART_Receive_IT(&huart3, &buffer2, 1);
    }
#endif
}
 8005722:	b002      	add	sp, #8
 8005724:	bd10      	pop	{r4, pc}
		rx_byte = buffer;
 8005726:	4b40      	ldr	r3, [pc, #256]	; (8005828 <HAL_UART_RxCpltCallback+0x118>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	f88d 3007 	strb.w	r3, [sp, #7]
		if (start_flag)
 800572e:	4b3f      	ldr	r3, [pc, #252]	; (800582c <HAL_UART_RxCpltCallback+0x11c>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d031      	beq.n	800579a <HAL_UART_RxCpltCallback+0x8a>
			msg_cnt++;
 8005736:	4a3e      	ldr	r2, [pc, #248]	; (8005830 <HAL_UART_RxCpltCallback+0x120>)
 8005738:	7813      	ldrb	r3, [r2, #0]
 800573a:	3301      	adds	r3, #1
 800573c:	b2db      	uxtb	r3, r3
 800573e:	7013      	strb	r3, [r2, #0]
			if (msg_cnt == 44)
 8005740:	7813      	ldrb	r3, [r2, #0]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b2c      	cmp	r3, #44	; 0x2c
 8005746:	d015      	beq.n	8005774 <HAL_UART_RxCpltCallback+0x64>
			dmx_error = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	4a3a      	ldr	r2, [pc, #232]	; (8005834 <HAL_UART_RxCpltCallback+0x124>)
 800574c:	7013      	strb	r3, [r2, #0]
			byte_count = 0;
 800574e:	4a3a      	ldr	r2, [pc, #232]	; (8005838 <HAL_UART_RxCpltCallback+0x128>)
 8005750:	8013      	strh	r3, [r2, #0]
			start_flag = 0;
 8005752:	4a36      	ldr	r2, [pc, #216]	; (800582c <HAL_UART_RxCpltCallback+0x11c>)
 8005754:	7013      	strb	r3, [r2, #0]
			switch (rx_byte)
 8005756:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800575a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800575e:	b1cb      	cbz	r3, 8005794 <HAL_UART_RxCpltCallback+0x84>
 8005760:	2a17      	cmp	r2, #23
 8005762:	d02f      	beq.n	80057c4 <HAL_UART_RxCpltCallback+0xb4>
				dmx_error = 1;
 8005764:	2201      	movs	r2, #1
 8005766:	4b33      	ldr	r3, [pc, #204]	; (8005834 <HAL_UART_RxCpltCallback+0x124>)
 8005768:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, &buffer, 1);
 800576a:	492f      	ldr	r1, [pc, #188]	; (8005828 <HAL_UART_RxCpltCallback+0x118>)
 800576c:	4833      	ldr	r0, [pc, #204]	; (800583c <HAL_UART_RxCpltCallback+0x12c>)
 800576e:	f7fe fa5c 	bl	8003c2a <HAL_UART_Receive_IT>
				return;
 8005772:	e7d6      	b.n	8005722 <HAL_UART_RxCpltCallback+0x12>
				msg_cnt = 0;
 8005774:	4613      	mov	r3, r2
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
				led_status =!led_status;
 800577a:	4a31      	ldr	r2, [pc, #196]	; (8005840 <HAL_UART_RxCpltCallback+0x130>)
 800577c:	7813      	ldrb	r3, [r2, #0]
 800577e:	fab3 f383 	clz	r3, r3
 8005782:	095b      	lsrs	r3, r3, #5
 8005784:	7013      	strb	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 8005786:	7812      	ldrb	r2, [r2, #0]
 8005788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800578c:	482d      	ldr	r0, [pc, #180]	; (8005844 <HAL_UART_RxCpltCallback+0x134>)
 800578e:	f7fc fbf8 	bl	8001f82 <HAL_GPIO_WritePin>
 8005792:	e7d9      	b.n	8005748 <HAL_UART_RxCpltCallback+0x38>
				packet_type = DATA_PACKET;
 8005794:	4b2c      	ldr	r3, [pc, #176]	; (8005848 <HAL_UART_RxCpltCallback+0x138>)
 8005796:	2200      	movs	r2, #0
 8005798:	701a      	strb	r2, [r3, #0]
		if (packet_type == DATA_PACKET)
 800579a:	4b2b      	ldr	r3, [pc, #172]	; (8005848 <HAL_UART_RxCpltCallback+0x138>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	b933      	cbnz	r3, 80057ae <HAL_UART_RxCpltCallback+0x9e>
			if (byte_count >= start_addr && byte_count < start_addr + get_reg_length())
 80057a0:	4b25      	ldr	r3, [pc, #148]	; (8005838 <HAL_UART_RxCpltCallback+0x128>)
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	4a29      	ldr	r2, [pc, #164]	; (800584c <HAL_UART_RxCpltCallback+0x13c>)
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d20e      	bcs.n	80057cc <HAL_UART_RxCpltCallback+0xbc>
		byte_count++;
 80057ae:	4a22      	ldr	r2, [pc, #136]	; (8005838 <HAL_UART_RxCpltCallback+0x128>)
 80057b0:	8813      	ldrh	r3, [r2, #0]
 80057b2:	3301      	adds	r3, #1
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	8013      	strh	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart1, &buffer, 1);
 80057b8:	2201      	movs	r2, #1
 80057ba:	491b      	ldr	r1, [pc, #108]	; (8005828 <HAL_UART_RxCpltCallback+0x118>)
 80057bc:	481f      	ldr	r0, [pc, #124]	; (800583c <HAL_UART_RxCpltCallback+0x12c>)
 80057be:	f7fe fa34 	bl	8003c2a <HAL_UART_Receive_IT>
 80057c2:	e7ae      	b.n	8005722 <HAL_UART_RxCpltCallback+0x12>
				packet_type = TEST_PACKET;
 80057c4:	4b20      	ldr	r3, [pc, #128]	; (8005848 <HAL_UART_RxCpltCallback+0x138>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	701a      	strb	r2, [r3, #0]
				break;
 80057ca:	e7e6      	b.n	800579a <HAL_UART_RxCpltCallback+0x8a>
			if (byte_count >= start_addr && byte_count < start_addr + get_reg_length())
 80057cc:	4b1a      	ldr	r3, [pc, #104]	; (8005838 <HAL_UART_RxCpltCallback+0x128>)
 80057ce:	881c      	ldrh	r4, [r3, #0]
 80057d0:	b2a4      	uxth	r4, r4
 80057d2:	f7ff ff13 	bl	80055fc <get_reg_length>
 80057d6:	4b1d      	ldr	r3, [pc, #116]	; (800584c <HAL_UART_RxCpltCallback+0x13c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4418      	add	r0, r3
 80057dc:	4284      	cmp	r4, r0
 80057de:	d2e6      	bcs.n	80057ae <HAL_UART_RxCpltCallback+0x9e>
				set_reg(byte_count - start_addr-1, rx_byte);
 80057e0:	4b15      	ldr	r3, [pc, #84]	; (8005838 <HAL_UART_RxCpltCallback+0x128>)
 80057e2:	8818      	ldrh	r0, [r3, #0]
 80057e4:	4b19      	ldr	r3, [pc, #100]	; (800584c <HAL_UART_RxCpltCallback+0x13c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	1ac0      	subs	r0, r0, r3
 80057ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80057ee:	3801      	subs	r0, #1
 80057f0:	f7ff ff3c 	bl	800566c <set_reg>
 80057f4:	e7db      	b.n	80057ae <HAL_UART_RxCpltCallback+0x9e>
		if (UART_mode_SERIAL)
 80057f6:	4b16      	ldr	r3, [pc, #88]	; (8005850 <HAL_UART_RxCpltCallback+0x140>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	b153      	cbz	r3, 8005812 <HAL_UART_RxCpltCallback+0x102>
			ring_buffer_put(&rx_buff_dmx, &buffer2, 1);
 80057fc:	2201      	movs	r2, #1
 80057fe:	4915      	ldr	r1, [pc, #84]	; (8005854 <HAL_UART_RxCpltCallback+0x144>)
 8005800:	4815      	ldr	r0, [pc, #84]	; (8005858 <HAL_UART_RxCpltCallback+0x148>)
 8005802:	f001 fa04 	bl	8006c0e <ring_buffer_put>
		HAL_UART_Receive_IT(&huart3, &buffer2, 1);
 8005806:	2201      	movs	r2, #1
 8005808:	4912      	ldr	r1, [pc, #72]	; (8005854 <HAL_UART_RxCpltCallback+0x144>)
 800580a:	4814      	ldr	r0, [pc, #80]	; (800585c <HAL_UART_RxCpltCallback+0x14c>)
 800580c:	f7fe fa0d 	bl	8003c2a <HAL_UART_Receive_IT>
 8005810:	e787      	b.n	8005722 <HAL_UART_RxCpltCallback+0x12>
			ring_buffer_put(&rx_buff_shell, &buffer2, 1);
 8005812:	2201      	movs	r2, #1
 8005814:	490f      	ldr	r1, [pc, #60]	; (8005854 <HAL_UART_RxCpltCallback+0x144>)
 8005816:	4812      	ldr	r0, [pc, #72]	; (8005860 <HAL_UART_RxCpltCallback+0x150>)
 8005818:	f001 f9f9 	bl	8006c0e <ring_buffer_put>
 800581c:	e7f3      	b.n	8005806 <HAL_UART_RxCpltCallback+0xf6>
 800581e:	bf00      	nop
 8005820:	40013800 	.word	0x40013800
 8005824:	40004800 	.word	0x40004800
 8005828:	20000414 	.word	0x20000414
 800582c:	20000420 	.word	0x20000420
 8005830:	20000419 	.word	0x20000419
 8005834:	20000180 	.word	0x20000180
 8005838:	20000416 	.word	0x20000416
 800583c:	20000c88 	.word	0x20000c88
 8005840:	20000418 	.word	0x20000418
 8005844:	40011000 	.word	0x40011000
 8005848:	2000041a 	.word	0x2000041a
 800584c:	2000041c 	.word	0x2000041c
 8005850:	20000430 	.word	0x20000430
 8005854:	20000415 	.word	0x20000415
 8005858:	200009c8 	.word	0x200009c8
 800585c:	20000bac 	.word	0x20000bac
 8005860:	200009e0 	.word	0x200009e0

08005864 <dmx512_setRx>:
}



void dmx512_setRx(void)
{
 8005864:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8005866:	2200      	movs	r2, #0
 8005868:	2180      	movs	r1, #128	; 0x80
 800586a:	4803      	ldr	r0, [pc, #12]	; (8005878 <dmx512_setRx+0x14>)
 800586c:	f7fc fb89 	bl	8001f82 <HAL_GPIO_WritePin>
    HAL_HalfDuplex_EnableReceiver(&huart1);
 8005870:	4802      	ldr	r0, [pc, #8]	; (800587c <dmx512_setRx+0x18>)
 8005872:	f7fe fafd 	bl	8003e70 <HAL_HalfDuplex_EnableReceiver>
}
 8005876:	bd08      	pop	{r3, pc}
 8005878:	40010c00 	.word	0x40010c00
 800587c:	20000c88 	.word	0x20000c88

08005880 <dmx512_rec_enable>:
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_SET);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
}

void dmx512_rec_enable(uint8_t on)
{
 8005880:	b508      	push	{r3, lr}
	if (on)
 8005882:	b930      	cbnz	r0, 8005892 <dmx512_rec_enable+0x12>
#endif
	}
	else
	{
		//Disable UART
		__HAL_UART_DISABLE(&huart1);
 8005884:	4b09      	ldr	r3, [pc, #36]	; (80058ac <dmx512_rec_enable+0x2c>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68d3      	ldr	r3, [r2, #12]
 800588a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800588e:	60d3      	str	r3, [r2, #12]
		//Disable Timer
#ifdef USE_TIMER
		TIM_ITConfig(dmx512_config.tim, TIM_IT_CC1, DISABLE);
#endif
	}
}
 8005890:	bd08      	pop	{r3, pc}
		start_addr = get_addr();
 8005892:	f7ff fea1 	bl	80055d8 <get_addr>
 8005896:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <dmx512_rec_enable+0x30>)
 8005898:	6018      	str	r0, [r3, #0]
		dmx512_setRx();
 800589a:	f7ff ffe3 	bl	8005864 <dmx512_setRx>
    	HAL_UART_Receive_IT(&huart1, &buffer, 1);
 800589e:	2201      	movs	r2, #1
 80058a0:	4904      	ldr	r1, [pc, #16]	; (80058b4 <dmx512_rec_enable+0x34>)
 80058a2:	4802      	ldr	r0, [pc, #8]	; (80058ac <dmx512_rec_enable+0x2c>)
 80058a4:	f7fe f9c1 	bl	8003c2a <HAL_UART_Receive_IT>
 80058a8:	e7f2      	b.n	8005890 <dmx512_rec_enable+0x10>
 80058aa:	bf00      	nop
 80058ac:	20000c88 	.word	0x20000c88
 80058b0:	2000041c 	.word	0x2000041c
 80058b4:	20000414 	.word	0x20000414

080058b8 <dmx512_rec_init>:
{
 80058b8:	b508      	push	{r3, lr}
	dmx512_rec_enable(1);
 80058ba:	2001      	movs	r0, #1
 80058bc:	f7ff ffe0 	bl	8005880 <dmx512_rec_enable>
	HAL_UART_Receive_IT(&huart3, &buffer2, 1);
 80058c0:	2201      	movs	r2, #1
 80058c2:	4902      	ldr	r1, [pc, #8]	; (80058cc <dmx512_rec_init+0x14>)
 80058c4:	4802      	ldr	r0, [pc, #8]	; (80058d0 <dmx512_rec_init+0x18>)
 80058c6:	f7fe f9b0 	bl	8003c2a <HAL_UART_Receive_IT>
}
 80058ca:	bd08      	pop	{r3, pc}
 80058cc:	20000415 	.word	0x20000415
 80058d0:	20000bac 	.word	0x20000bac

080058d4 <EE_LL_Format>:
//##########################################################################################################
//##########################################################################################################


bool    EE_LL_Format(uint16_t startpage, uint16_t pages)
{
 80058d4:	b530      	push	{r4, r5, lr}
 80058d6:	b087      	sub	sp, #28
 80058d8:	4604      	mov	r4, r0
 80058da:	460d      	mov	r5, r1
  uint32_t    error;
    HAL_FLASH_Unlock();
 80058dc:	f7fc f940 	bl	8001b60 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef  flashErase;
    flashErase.NbPages=pages;
 80058e0:	9504      	str	r5, [sp, #16]
    flashErase.Banks = FLASH_BANK_1;
 80058e2:	2301      	movs	r3, #1
 80058e4:	9302      	str	r3, [sp, #8]
    flashErase.PageAddress = (ADDR_FLASH_PAGE_0|(_EEPROM_FLASH_PAGE_SIZE*startpage));
 80058e6:	02a4      	lsls	r4, r4, #10
 80058e8:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 80058ec:	9403      	str	r4, [sp, #12]
    flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80058ee:	2300      	movs	r3, #0
 80058f0:	9301      	str	r3, [sp, #4]
    if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 80058f2:	a905      	add	r1, sp, #20
 80058f4:	a801      	add	r0, sp, #4
 80058f6:	f7fc f9ff 	bl	8001cf8 <HAL_FLASHEx_Erase>
 80058fa:	b938      	cbnz	r0, 800590c <EE_LL_Format+0x38>
    {
        HAL_FLASH_Lock();
 80058fc:	f7fc f94a 	bl	8001b94 <HAL_FLASH_Lock>
        if(error != 0xFFFFFFFF)
 8005900:	9b05      	ldr	r3, [sp, #20]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d006      	beq.n	8005916 <EE_LL_Format+0x42>
            return false;
 8005908:	2000      	movs	r0, #0
 800590a:	e002      	b.n	8005912 <EE_LL_Format+0x3e>
        else
            return true;
    }
    HAL_FLASH_Lock();
 800590c:	f7fc f942 	bl	8001b94 <HAL_FLASH_Lock>
    return false;
 8005910:	2000      	movs	r0, #0
}
 8005912:	b007      	add	sp, #28
 8005914:	bd30      	pop	{r4, r5, pc}
            return true;
 8005916:	2001      	movs	r0, #1
 8005918:	e7fb      	b.n	8005912 <EE_LL_Format+0x3e>

0800591a <EE_LL_Read>:

bool    EE_LL_Read(uint16_t startpage, uint16_t addr, uint16_t size, uint8_t* Data)
{
 800591a:	b430      	push	{r4, r5}
    for(uint16_t ii=addr;ii<size+addr;ii++)
 800591c:	460c      	mov	r4, r1
 800591e:	e007      	b.n	8005930 <EE_LL_Read+0x16>
    {
        *Data =  (*(__IO uint8_t*)(ii+(ADDR_FLASH_PAGE_0|(_EEPROM_FLASH_PAGE_SIZE*startpage))));
 8005920:	0285      	lsls	r5, r0, #10
 8005922:	f045 6500 	orr.w	r5, r5, #134217728	; 0x8000000
 8005926:	5d65      	ldrb	r5, [r4, r5]
 8005928:	f803 5b01 	strb.w	r5, [r3], #1
    for(uint16_t ii=addr;ii<size+addr;ii++)
 800592c:	3401      	adds	r4, #1
 800592e:	b2a4      	uxth	r4, r4
 8005930:	1855      	adds	r5, r2, r1
 8005932:	42ac      	cmp	r4, r5
 8005934:	dbf4      	blt.n	8005920 <EE_LL_Read+0x6>
        Data++;
    }
    return true;
}
 8005936:	2001      	movs	r0, #1
 8005938:	bc30      	pop	{r4, r5}
 800593a:	4770      	bx	lr

0800593c <EE_Format>:

//##########################################################################################################
//##########################################################################################################

bool	EE_Format()
{
 800593c:	b508      	push	{r3, lr}
  return EE_LL_Format(_EEPROM_USE_FLASH_PAGE,1);
 800593e:	2101      	movs	r1, #1
 8005940:	207f      	movs	r0, #127	; 0x7f
 8005942:	f7ff ffc7 	bl	80058d4 <EE_LL_Format>
}
 8005946:	bd08      	pop	{r3, pc}

08005948 <EE_Reads>:
}

//##########################################################################################################
bool EE_Reads(uint16_t VirtualAddress,uint16_t HowMuchToRead,uint32_t* Data)
{
	if((VirtualAddress+HowMuchToRead) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 8005948:	4401      	add	r1, r0
 800594a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800594e:	dd0b      	ble.n	8005968 <EE_Reads+0x20>
		return false;
 8005950:	2000      	movs	r0, #0
	{
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
		Data++;
	}
	return true;
}
 8005952:	4770      	bx	lr
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8005954:	0083      	lsls	r3, r0, #2
 8005956:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800595a:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f842 3b04 	str.w	r3, [r2], #4
	for(uint16_t i=VirtualAddress ; i<HowMuchToRead+VirtualAddress ; i++)
 8005964:	3001      	adds	r0, #1
 8005966:	b280      	uxth	r0, r0
 8005968:	4281      	cmp	r1, r0
 800596a:	dcf3      	bgt.n	8005954 <EE_Reads+0xc>
	return true;
 800596c:	2001      	movs	r0, #1
 800596e:	4770      	bx	lr

08005970 <EE_Writes>:

//##########################################################################################################
bool 	EE_Writes(uint16_t VirtualAddress,uint16_t HowMuchToWrite,uint32_t* Data)
{
 8005970:	b570      	push	{r4, r5, r6, lr}
	if((VirtualAddress+HowMuchToWrite) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 8005972:	4401      	add	r1, r0
 8005974:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005978:	dd02      	ble.n	8005980 <EE_Writes+0x10>
		return false;
 800597a:	2600      	movs	r6, #0
		}
		Data++;
	}
	HAL_FLASH_Lock();
	return true;
}
 800597c:	4630      	mov	r0, r6
 800597e:	bd70      	pop	{r4, r5, r6, pc}
 8005980:	4615      	mov	r5, r2
	if(EE_Format()==false)
 8005982:	f7ff ffdb 	bl	800593c <EE_Format>
 8005986:	4606      	mov	r6, r0
 8005988:	2800      	cmp	r0, #0
 800598a:	d0f7      	beq.n	800597c <EE_Writes+0xc>
	HAL_FLASH_Unlock();
 800598c:	f7fc f8e8 	bl	8001b60 <HAL_FLASH_Unlock>
	for(uint16_t	i=0 ; i<(_EEPROM_FLASH_PAGE_SIZE/4); i++)
 8005990:	2400      	movs	r4, #0
 8005992:	2cff      	cmp	r4, #255	; 0xff
 8005994:	d812      	bhi.n	80059bc <EE_Writes+0x4c>
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(i*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)*Data)!=HAL_OK)
 8005996:	00a1      	lsls	r1, r4, #2
 8005998:	682a      	ldr	r2, [r5, #0]
 800599a:	2300      	movs	r3, #0
 800599c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80059a0:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 80059a4:	2002      	movs	r0, #2
 80059a6:	f7fc f935 	bl	8001c14 <HAL_FLASH_Program>
 80059aa:	b918      	cbnz	r0, 80059b4 <EE_Writes+0x44>
		Data++;
 80059ac:	3504      	adds	r5, #4
	for(uint16_t	i=0 ; i<(_EEPROM_FLASH_PAGE_SIZE/4); i++)
 80059ae:	3401      	adds	r4, #1
 80059b0:	b2a4      	uxth	r4, r4
 80059b2:	e7ee      	b.n	8005992 <EE_Writes+0x22>
			HAL_FLASH_Lock();
 80059b4:	f7fc f8ee 	bl	8001b94 <HAL_FLASH_Lock>
			return false;
 80059b8:	2600      	movs	r6, #0
 80059ba:	e7df      	b.n	800597c <EE_Writes+0xc>
	HAL_FLASH_Lock();
 80059bc:	f7fc f8ea 	bl	8001b94 <HAL_FLASH_Lock>
	return true;
 80059c0:	e7dc      	b.n	800597c <EE_Writes+0xc>
	...

080059c4 <init_fx_list>:

//Point all pointers to the same "empty" FX
void init_fx_list(void)
{
	uint8_t cnt = 0;
	for(cnt = 0;cnt < MAX_FX;cnt++)
 80059c4:	2300      	movs	r3, #0
 80059c6:	e005      	b.n	80059d4 <init_fx_list+0x10>
		pfx_list[cnt] = &param;
 80059c8:	4a04      	ldr	r2, [pc, #16]	; (80059dc <init_fx_list+0x18>)
 80059ca:	4905      	ldr	r1, [pc, #20]	; (80059e0 <init_fx_list+0x1c>)
 80059cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(cnt = 0;cnt < MAX_FX;cnt++)
 80059d0:	3301      	adds	r3, #1
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b3f      	cmp	r3, #63	; 0x3f
 80059d6:	d9f7      	bls.n	80059c8 <init_fx_list+0x4>
}
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	200009f8 	.word	0x200009f8
 80059e0:	0800c330 	.word	0x0800c330

080059e4 <register_fx>:

uint8_t register_fx(const s_fx_param* pfx_param, uint8_t fx_num)
{
 80059e4:	b538      	push	{r3, r4, r5, lr}
	uint8_t fx_cnt = 1;
	//If FX = 0 we find the first empty slot and install it there
	if (fx_num == 0)
 80059e6:	460d      	mov	r5, r1
 80059e8:	b909      	cbnz	r1, 80059ee <register_fx+0xa>
	uint8_t fx_cnt = 1;
 80059ea:	2401      	movs	r4, #1
 80059ec:	e003      	b.n	80059f6 <register_fx+0x12>
 80059ee:	460c      	mov	r4, r1
 80059f0:	e00a      	b.n	8005a08 <register_fx+0x24>
	{
		while ((pfx_list[fx_cnt]->fx_run_pointer != NULL) && (fx_cnt < MAX_FX-1))
		{
			fx_cnt++;
 80059f2:	3401      	adds	r4, #1
 80059f4:	b2e4      	uxtb	r4, r4
		while ((pfx_list[fx_cnt]->fx_run_pointer != NULL) && (fx_cnt < MAX_FX-1))
 80059f6:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <register_fx+0x44>)
 80059f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	b10b      	cbz	r3, 8005a04 <register_fx+0x20>
 8005a00:	2c3e      	cmp	r4, #62	; 0x3e
 8005a02:	d9f6      	bls.n	80059f2 <register_fx+0xe>
		}

		//No slots available
		if (fx_cnt == MAX_FX-1)
 8005a04:	2c3f      	cmp	r4, #63	; 0x3f
 8005a06:	d009      	beq.n	8005a1c <register_fx+0x38>
			return 0;
		}
		fx_num = fx_cnt;
	}

	pfx_list[fx_num] = pfx_param;
 8005a08:	4b07      	ldr	r3, [pc, #28]	; (8005a28 <register_fx+0x44>)
 8005a0a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	print("ID:%d\t FX: %s",fx_num,pfx_param->fxname);
 8005a0e:	1cc2      	adds	r2, r0, #3
 8005a10:	4621      	mov	r1, r4
 8005a12:	4806      	ldr	r0, [pc, #24]	; (8005a2c <register_fx+0x48>)
 8005a14:	f001 fdb4 	bl	8007580 <print>
	return fx_num;
}
 8005a18:	4620      	mov	r0, r4
 8005a1a:	bd38      	pop	{r3, r4, r5, pc}
			print("FX Space full");
 8005a1c:	4804      	ldr	r0, [pc, #16]	; (8005a30 <register_fx+0x4c>)
 8005a1e:	f001 fdaf 	bl	8007580 <print>
			return 0;
 8005a22:	462c      	mov	r4, r5
 8005a24:	e7f8      	b.n	8005a18 <register_fx+0x34>
 8005a26:	bf00      	nop
 8005a28:	200009f8 	.word	0x200009f8
 8005a2c:	0800c354 	.word	0x0800c354
 8005a30:	0800c344 	.word	0x0800c344

08005a34 <fx_install>:
#include "fx_strip_rainbow.h"
#include "fx_strip_cylon.h"
#include "fx_pwm_strip_engine.h"

void fx_install(void)
{
 8005a34:	b508      	push	{r3, lr}
	//REGISTER FX HERE !!!
    fx_pwm_running_light(0);
 8005a36:	2000      	movs	r0, #0
 8005a38:	f002 ffe8 	bl	8008a0c <fx_pwm_running_light>
    fx_pwm_running_pulse_light(0);
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	f002 ffed 	bl	8008a1c <fx_pwm_running_pulse_light>
    fx_pwm_pulsing_light(0);
 8005a42:	2000      	movs	r0, #0
 8005a44:	f002 ff60 	bl	8008908 <fx_pwm_pulsing_light>
    fx_pwm_pulsing_pulse_light(0);
 8005a48:	2000      	movs	r0, #0
 8005a4a:	f002 ff65 	bl	8008918 <fx_pwm_pulsing_pulse_light>
    fx_strip_running_light(0);
 8005a4e:	2000      	movs	r0, #0
 8005a50:	f003 fb4a 	bl	80090e8 <fx_strip_running_light>
    fx_strip_rainbow(0);
 8005a54:	2000      	movs	r0, #0
 8005a56:	f003 fa9b 	bl	8008f90 <fx_strip_rainbow>
    fx_strip_cylon(0);
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	f003 fa1a 	bl	8008e94 <fx_strip_cylon>
    fx_pwm_strip_engine(0);
 8005a60:	2000      	movs	r0, #0
 8005a62:	f003 f969 	bl	8008d38 <fx_pwm_strip_engine>
}
 8005a66:	bd08      	pop	{r3, pc}

08005a68 <install_fx>:

extern const s_fx_param* pfx_list[MAX_FX];
extern uint8_t fxcnt;

void install_fx(void)
{
 8005a68:	b508      	push	{r3, lr}
	fx_install();
 8005a6a:	f7ff ffe3 	bl	8005a34 <fx_install>
}
 8005a6e:	bd08      	pop	{r3, pc}

08005a70 <start_fx>:
//Called to start a new effect. Return the effect that was actually enabled
uint8_t start_fx(uint8_t id)
{

	//Check if FX is installed (We assume at future calls to the routine that the pointer is valid...
	if ((NULL != pfx_list[id]->fx_run_pointer) || (id == 0))
 8005a70:	4b2b      	ldr	r3, [pc, #172]	; (8005b20 <start_fx+0xb0>)
 8005a72:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d03d      	beq.n	8005af8 <start_fx+0x88>
{
 8005a7c:	b510      	push	{r4, lr}
 8005a7e:	4604      	mov	r4, r0
	{
		//Call the last FX once with the END State
		if (current_fx_state != FX_DONE)
 8005a80:	4b28      	ldr	r3, [pc, #160]	; (8005b24 <start_fx+0xb4>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d016      	beq.n	8005ab6 <start_fx+0x46>
		{
			if (NULL != pfx_list[current_fx]->fx_run_pointer)
 8005a88:	4b27      	ldr	r3, [pc, #156]	; (8005b28 <start_fx+0xb8>)
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	4b24      	ldr	r3, [pc, #144]	; (8005b20 <start_fx+0xb0>)
 8005a8e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a92:	690b      	ldr	r3, [r1, #16]
 8005a94:	b11b      	cbz	r3, 8005a9e <start_fx+0x2e>
				pfx_list[current_fx]->fx_run_pointer(FX_END,pfx_list[current_fx]->duration,0);
 8005a96:	2200      	movs	r2, #0
 8005a98:	68c9      	ldr	r1, [r1, #12]
 8005a9a:	2002      	movs	r0, #2
 8005a9c:	4798      	blx	r3
			print("Completed FX ID:%d FX: %s ",current_fx,pfx_list[current_fx]->fxname);
 8005a9e:	4b22      	ldr	r3, [pc, #136]	; (8005b28 <start_fx+0xb8>)
 8005aa0:	7819      	ldrb	r1, [r3, #0]
 8005aa2:	4b1f      	ldr	r3, [pc, #124]	; (8005b20 <start_fx+0xb0>)
 8005aa4:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8005aa8:	3203      	adds	r2, #3
 8005aaa:	4820      	ldr	r0, [pc, #128]	; (8005b2c <start_fx+0xbc>)
 8005aac:	f001 fd68 	bl	8007580 <print>
			current_fx_state = FX_DONE;
 8005ab0:	4b1c      	ldr	r3, [pc, #112]	; (8005b24 <start_fx+0xb4>)
 8005ab2:	2203      	movs	r2, #3
 8005ab4:	701a      	strb	r2, [r3, #0]
		}
		//ID is valid, setup parameters
		fx_frame_count = 0;
 8005ab6:	4b1e      	ldr	r3, [pc, #120]	; (8005b30 <start_fx+0xc0>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]
		last_fx = current_fx;
 8005abc:	4b1a      	ldr	r3, [pc, #104]	; (8005b28 <start_fx+0xb8>)
 8005abe:	7819      	ldrb	r1, [r3, #0]
 8005ac0:	4a1c      	ldr	r2, [pc, #112]	; (8005b34 <start_fx+0xc4>)
 8005ac2:	7011      	strb	r1, [r2, #0]
		current_fx = id;
 8005ac4:	701c      	strb	r4, [r3, #0]
		if (id == 0)
 8005ac6:	b34c      	cbz	r4, 8005b1c <start_fx+0xac>
			return current_fx;

		//Call run routine once with INIT state
		if (FX_OK == pfx_list[current_fx]->fx_run_pointer(FX_INIT,0,pfx_list[current_fx]->duration))
 8005ac8:	4b15      	ldr	r3, [pc, #84]	; (8005b20 <start_fx+0xb0>)
 8005aca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005ace:	691c      	ldr	r4, [r3, #16]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	47a0      	blx	r4
 8005ad8:	b998      	cbnz	r0, 8005b02 <start_fx+0x92>
		{
			current_fx_state = FX_INIT;
 8005ada:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <start_fx+0xb4>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	701a      	strb	r2, [r3, #0]
			print("Started FX ID:%d FX: %s ",current_fx,pfx_list[current_fx]->fxname);
 8005ae0:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <start_fx+0xb8>)
 8005ae2:	7819      	ldrb	r1, [r3, #0]
 8005ae4:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <start_fx+0xb0>)
 8005ae6:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8005aea:	3203      	adds	r2, #3
 8005aec:	4812      	ldr	r0, [pc, #72]	; (8005b38 <start_fx+0xc8>)
 8005aee:	f001 fd47 	bl	8007580 <print>
			print("FX ID:%d FX: %s failed to start",current_fx,pfx_list[current_fx]->fxname);
			current_fx = last_fx;
		}
	}
	//return new ID
	return current_fx;
 8005af2:	4b0d      	ldr	r3, [pc, #52]	; (8005b28 <start_fx+0xb8>)
 8005af4:	7818      	ldrb	r0, [r3, #0]
}
 8005af6:	bd10      	pop	{r4, pc}
	if ((NULL != pfx_list[id]->fx_run_pointer) || (id == 0))
 8005af8:	2800      	cmp	r0, #0
 8005afa:	d0bf      	beq.n	8005a7c <start_fx+0xc>
	return current_fx;
 8005afc:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <start_fx+0xb8>)
 8005afe:	7818      	ldrb	r0, [r3, #0]
}
 8005b00:	4770      	bx	lr
			print("FX ID:%d FX: %s failed to start",current_fx,pfx_list[current_fx]->fxname);
 8005b02:	4c09      	ldr	r4, [pc, #36]	; (8005b28 <start_fx+0xb8>)
 8005b04:	7821      	ldrb	r1, [r4, #0]
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <start_fx+0xb0>)
 8005b08:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8005b0c:	3203      	adds	r2, #3
 8005b0e:	480b      	ldr	r0, [pc, #44]	; (8005b3c <start_fx+0xcc>)
 8005b10:	f001 fd36 	bl	8007580 <print>
			current_fx = last_fx;
 8005b14:	4b07      	ldr	r3, [pc, #28]	; (8005b34 <start_fx+0xc4>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	7023      	strb	r3, [r4, #0]
 8005b1a:	e7ea      	b.n	8005af2 <start_fx+0x82>
			return current_fx;
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	e7ea      	b.n	8005af6 <start_fx+0x86>
 8005b20:	200009f8 	.word	0x200009f8
 8005b24:	20000422 	.word	0x20000422
 8005b28:	20000421 	.word	0x20000421
 8005b2c:	0800c364 	.word	0x0800c364
 8005b30:	20000424 	.word	0x20000424
 8005b34:	20000428 	.word	0x20000428
 8005b38:	0800c380 	.word	0x0800c380
 8005b3c:	0800c39c 	.word	0x0800c39c

08005b40 <fx_done>:


void fx_done(void)
{
 8005b40:	b570      	push	{r4, r5, r6, lr}
	pfx_list[current_fx]->fx_run_pointer(FX_END,pfx_list[current_fx]->duration,0);
 8005b42:	4c10      	ldr	r4, [pc, #64]	; (8005b84 <fx_done+0x44>)
 8005b44:	4d10      	ldr	r5, [pc, #64]	; (8005b88 <fx_done+0x48>)
 8005b46:	782b      	ldrb	r3, [r5, #0]
 8005b48:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005b4c:	691e      	ldr	r6, [r3, #16]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	68d9      	ldr	r1, [r3, #12]
 8005b52:	2002      	movs	r0, #2
 8005b54:	47b0      	blx	r6
	print("Completed FX ID:%d FX: %s ",current_fx,pfx_list[current_fx]->fxname);
 8005b56:	7829      	ldrb	r1, [r5, #0]
 8005b58:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8005b5c:	3203      	adds	r2, #3
 8005b5e:	480b      	ldr	r0, [pc, #44]	; (8005b8c <fx_done+0x4c>)
 8005b60:	f001 fd0e 	bl	8007580 <print>
	current_fx_state = FX_DONE;
 8005b64:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <fx_done+0x50>)
 8005b66:	2203      	movs	r2, #3
 8005b68:	701a      	strb	r2, [r3, #0]
	if (pfx_list[current_fx]->next_fx != 0)
 8005b6a:	782b      	ldrb	r3, [r5, #0]
 8005b6c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005b70:	7898      	ldrb	r0, [r3, #2]
 8005b72:	b920      	cbnz	r0, 8005b7e <fx_done+0x3e>
		start_fx(pfx_list[current_fx]->next_fx);
	}
	else
	{
		//Go back to last FX
		start_fx(last_fx);
 8005b74:	4b07      	ldr	r3, [pc, #28]	; (8005b94 <fx_done+0x54>)
 8005b76:	7818      	ldrb	r0, [r3, #0]
 8005b78:	f7ff ff7a 	bl	8005a70 <start_fx>
	}
	return;
}
 8005b7c:	bd70      	pop	{r4, r5, r6, pc}
		start_fx(pfx_list[current_fx]->next_fx);
 8005b7e:	f7ff ff77 	bl	8005a70 <start_fx>
 8005b82:	e7fb      	b.n	8005b7c <fx_done+0x3c>
 8005b84:	200009f8 	.word	0x200009f8
 8005b88:	20000421 	.word	0x20000421
 8005b8c:	0800c364 	.word	0x0800c364
 8005b90:	20000422 	.word	0x20000422
 8005b94:	20000428 	.word	0x20000428

08005b98 <run_fx>:

//Called every frame
void run_fx(void)
{
	//No FX Active...
	if (current_fx == 0)
 8005b98:	4b1e      	ldr	r3, [pc, #120]	; (8005c14 <run_fx+0x7c>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d037      	beq.n	8005c10 <run_fx+0x78>
{
 8005ba0:	b510      	push	{r4, lr}
		return;

	//Check if FX Has expired
	if (pfx_list[current_fx]->mode == MODE_SINGLE_SHOT)
 8005ba2:	4a1d      	ldr	r2, [pc, #116]	; (8005c18 <run_fx+0x80>)
 8005ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba8:	785a      	ldrb	r2, [r3, #1]
 8005baa:	2a01      	cmp	r2, #1
 8005bac:	d016      	beq.n	8005bdc <run_fx+0x44>
			fx_done();
			return;
		}
	}
	//Or needs to be looped...
	else if (pfx_list[current_fx]->mode == MODE_LOOP)
 8005bae:	2a02      	cmp	r2, #2
 8005bb0:	d01c      	beq.n	8005bec <run_fx+0x54>
			current_fx_state = FX_INIT;
		}
	}

	//Call FX
	if (FX_COMPLETED == pfx_list[current_fx]->fx_run_pointer(FX_RUN,fx_frame_count,pfx_list[current_fx]->duration))
 8005bb2:	4b18      	ldr	r3, [pc, #96]	; (8005c14 <run_fx+0x7c>)
 8005bb4:	781a      	ldrb	r2, [r3, #0]
 8005bb6:	4b18      	ldr	r3, [pc, #96]	; (8005c18 <run_fx+0x80>)
 8005bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbc:	691c      	ldr	r4, [r3, #16]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	4b16      	ldr	r3, [pc, #88]	; (8005c1c <run_fx+0x84>)
 8005bc2:	6819      	ldr	r1, [r3, #0]
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	47a0      	blx	r4
 8005bc8:	2801      	cmp	r0, #1
 8005bca:	d01e      	beq.n	8005c0a <run_fx+0x72>
		//FX Self-ended...
		fx_done();
		return;
	}

	current_fx_state = FX_RUN;
 8005bcc:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <run_fx+0x88>)
 8005bce:	2201      	movs	r2, #1
 8005bd0:	701a      	strb	r2, [r3, #0]
	fx_frame_count++;
 8005bd2:	4a12      	ldr	r2, [pc, #72]	; (8005c1c <run_fx+0x84>)
 8005bd4:	6813      	ldr	r3, [r2, #0]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	6013      	str	r3, [r2, #0]
}
 8005bda:	bd10      	pop	{r4, pc}
		if (pfx_list[current_fx]->duration == fx_frame_count)
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <run_fx+0x84>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d1e5      	bne.n	8005bb2 <run_fx+0x1a>
			fx_done();
 8005be6:	f7ff ffab 	bl	8005b40 <fx_done>
			return;
 8005bea:	e7f6      	b.n	8005bda <run_fx+0x42>
		if (pfx_list[current_fx]->duration == fx_frame_count)
 8005bec:	68d9      	ldr	r1, [r3, #12]
 8005bee:	4a0b      	ldr	r2, [pc, #44]	; (8005c1c <run_fx+0x84>)
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	4291      	cmp	r1, r2
 8005bf4:	d1dd      	bne.n	8005bb2 <run_fx+0x1a>
			fx_frame_count = 0;
 8005bf6:	2400      	movs	r4, #0
 8005bf8:	4a08      	ldr	r2, [pc, #32]	; (8005c1c <run_fx+0x84>)
 8005bfa:	6014      	str	r4, [r2, #0]
			pfx_list[current_fx]->fx_run_pointer(FX_INIT,pfx_list[current_fx]->duration,0);
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	4622      	mov	r2, r4
 8005c00:	4620      	mov	r0, r4
 8005c02:	4798      	blx	r3
			current_fx_state = FX_INIT;
 8005c04:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <run_fx+0x88>)
 8005c06:	701c      	strb	r4, [r3, #0]
 8005c08:	e7d3      	b.n	8005bb2 <run_fx+0x1a>
		fx_done();
 8005c0a:	f7ff ff99 	bl	8005b40 <fx_done>
		return;
 8005c0e:	e7e4      	b.n	8005bda <run_fx+0x42>
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20000421 	.word	0x20000421
 8005c18:	200009f8 	.word	0x200009f8
 8005c1c:	20000424 	.word	0x20000424
 8005c20:	20000422 	.word	0x20000422
 8005c24:	00000000 	.word	0x00000000

08005c28 <calc_gamma_val>:

#define GAMMA_TABLE_PAGE 126


uint8_t calc_gamma_val(int16_t gamma, uint8_t val)
{
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	460d      	mov	r5, r1
	float gf = ((float)gamma/100.0);
 8005c2c:	f7fb f836 	bl	8000c9c <__aeabi_i2f>
 8005c30:	4921      	ldr	r1, [pc, #132]	; (8005cb8 <calc_gamma_val+0x90>)
 8005c32:	f7fb f93b 	bl	8000eac <__aeabi_fdiv>
 8005c36:	4604      	mov	r4, r0
	float res;

	res = 255.0 * pow(((float)val/255.0),(1.0/gf));
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f7fb f82b 	bl	8000c94 <__aeabi_ui2f>
 8005c3e:	f7fa fbf3 	bl	8000428 <__aeabi_f2d>
 8005c42:	4606      	mov	r6, r0
 8005c44:	460f      	mov	r7, r1
 8005c46:	4620      	mov	r0, r4
 8005c48:	f7fa fbee 	bl	8000428 <__aeabi_f2d>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	2000      	movs	r0, #0
 8005c52:	491a      	ldr	r1, [pc, #104]	; (8005cbc <calc_gamma_val+0x94>)
 8005c54:	f7fa fd6a 	bl	800072c <__aeabi_ddiv>
 8005c58:	4604      	mov	r4, r0
 8005c5a:	460d      	mov	r5, r1
 8005c5c:	a314      	add	r3, pc, #80	; (adr r3, 8005cb0 <calc_gamma_val+0x88>)
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	4630      	mov	r0, r6
 8005c64:	4639      	mov	r1, r7
 8005c66:	f7fa fd61 	bl	800072c <__aeabi_ddiv>
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	f004 fb4b 	bl	800a308 <pow>
 8005c72:	a30f      	add	r3, pc, #60	; (adr r3, 8005cb0 <calc_gamma_val+0x88>)
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f7fa fc2e 	bl	80004d8 <__aeabi_dmul>
 8005c7c:	f7fa ff04 	bl	8000a88 <__aeabi_d2f>
	res = round(res);
 8005c80:	f7fa fbd2 	bl	8000428 <__aeabi_f2d>
 8005c84:	f004 fac0 	bl	800a208 <round>
 8005c88:	f7fa fefe 	bl	8000a88 <__aeabi_d2f>
 8005c8c:	4604      	mov	r4, r0
	if (res > 255.0)
 8005c8e:	490c      	ldr	r1, [pc, #48]	; (8005cc0 <calc_gamma_val+0x98>)
 8005c90:	f7fb fa14 	bl	80010bc <__aeabi_fcmpgt>
 8005c94:	b930      	cbnz	r0, 8005ca4 <calc_gamma_val+0x7c>
		res = 255.0;
	else if (res<0)
 8005c96:	2100      	movs	r1, #0
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f7fb f9f1 	bl	8001080 <__aeabi_fcmplt>
 8005c9e:	b110      	cbz	r0, 8005ca6 <calc_gamma_val+0x7e>
		res = 0;
 8005ca0:	2400      	movs	r4, #0
 8005ca2:	e000      	b.n	8005ca6 <calc_gamma_val+0x7e>
		res = 255.0;
 8005ca4:	4c06      	ldr	r4, [pc, #24]	; (8005cc0 <calc_gamma_val+0x98>)
	return (uint8_t)res;
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f7fb fa38 	bl	800111c <__aeabi_f2uiz>
}
 8005cac:	b2c0      	uxtb	r0, r0
 8005cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cb0:	00000000 	.word	0x00000000
 8005cb4:	406fe000 	.word	0x406fe000
 8005cb8:	42c80000 	.word	0x42c80000
 8005cbc:	3ff00000 	.word	0x3ff00000
 8005cc0:	437f0000 	.word	0x437f0000

08005cc4 <recalcGamma>:

bool recalcGamma(void)
{
 8005cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc8:	b087      	sub	sp, #28

	//All 4 tables are recreated every time a gamma value changes
	//The tables are stored in Flash at page 126

    //First format page
    if(EE_LL_Format(GAMMA_TABLE_PAGE,1)==false)
 8005cca:	2101      	movs	r1, #1
 8005ccc:	207e      	movs	r0, #126	; 0x7e
 8005cce:	f7ff fe01 	bl	80058d4 <EE_LL_Format>
 8005cd2:	9004      	str	r0, [sp, #16]
 8005cd4:	b918      	cbnz	r0, 8005cde <recalcGamma+0x1a>
    	    }
    	}
    }
    HAL_FLASH_Lock();
    return true;
}
 8005cd6:	9804      	ldr	r0, [sp, #16]
 8005cd8:	b007      	add	sp, #28
 8005cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    HAL_FLASH_Unlock();
 8005cde:	f7fb ff3f 	bl	8001b60 <HAL_FLASH_Unlock>
	int16_t gamma = 220;
 8005ce2:	23dc      	movs	r3, #220	; 0xdc
 8005ce4:	9301      	str	r3, [sp, #4]
    for (ii=0;ii<4;ii++)
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	9305      	str	r3, [sp, #20]
 8005cea:	9b05      	ldr	r3, [sp, #20]
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d878      	bhi.n	8005de2 <recalcGamma+0x11e>
    	switch(ii)
 8005cf0:	9b05      	ldr	r3, [sp, #20]
 8005cf2:	4699      	mov	r9, r3
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d807      	bhi.n	8005d08 <recalcGamma+0x44>
 8005cf8:	e8df f003 	tbb	[pc, r3]
 8005cfc:	645f5a02 	.word	0x645f5a02
    		gamma = settings.gamma_red;
 8005d00:	4b39      	ldr	r3, [pc, #228]	; (8005de8 <recalcGamma+0x124>)
 8005d02:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8005d06:	9301      	str	r3, [sp, #4]
    	index = 0;
 8005d08:	f04f 0800 	mov.w	r8, #0
    	for (jj = 0; jj<64;jj++)  //We'll need to loop through with words....
 8005d0c:	4647      	mov	r7, r8
 8005d0e:	464e      	mov	r6, r9
 8005d10:	4645      	mov	r5, r8
 8005d12:	2f3f      	cmp	r7, #63	; 0x3f
 8005d14:	d860      	bhi.n	8005dd8 <recalcGamma+0x114>
    	    pdata = ((uint64_t)calc_gamma_val(gamma, index)   << 24)
 8005d16:	b2ec      	uxtb	r4, r5
 8005d18:	4621      	mov	r1, r4
 8005d1a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005d1e:	4640      	mov	r0, r8
 8005d20:	f7ff ff82 	bl	8005c28 <calc_gamma_val>
 8005d24:	b2c0      	uxtb	r0, r0
 8005d26:	ea4f 2b10 	mov.w	fp, r0, lsr #8
 8005d2a:	ea4f 6a00 	mov.w	sl, r0, lsl #24
    	          + ((uint64_t)calc_gamma_val(gamma, index+1) << 16)
 8005d2e:	1c61      	adds	r1, r4, #1
 8005d30:	b2c9      	uxtb	r1, r1
 8005d32:	f8cd 8004 	str.w	r8, [sp, #4]
 8005d36:	4640      	mov	r0, r8
 8005d38:	f7ff ff76 	bl	8005c28 <calc_gamma_val>
 8005d3c:	b2c0      	uxtb	r0, r0
 8005d3e:	f04f 0900 	mov.w	r9, #0
 8005d42:	ea4f 4800 	mov.w	r8, r0, lsl #16
 8005d46:	eb1a 0208 	adds.w	r2, sl, r8
 8005d4a:	eb4b 0309 	adc.w	r3, fp, r9
 8005d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
				  + ((uint64_t)calc_gamma_val(gamma, index+2) << 8)
 8005d52:	1ca1      	adds	r1, r4, #2
 8005d54:	b2c9      	uxtb	r1, r1
 8005d56:	9801      	ldr	r0, [sp, #4]
 8005d58:	f7ff ff66 	bl	8005c28 <calc_gamma_val>
 8005d5c:	b2c0      	uxtb	r0, r0
 8005d5e:	f04f 0900 	mov.w	r9, #0
 8005d62:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8005d66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d6a:	eb12 0208 	adds.w	r2, r2, r8
 8005d6e:	eb43 0309 	adc.w	r3, r3, r9
 8005d72:	4690      	mov	r8, r2
 8005d74:	4699      	mov	r9, r3
				  + ((uint64_t)calc_gamma_val(gamma, index+3));
 8005d76:	1ce1      	adds	r1, r4, #3
 8005d78:	b2c9      	uxtb	r1, r1
 8005d7a:	9801      	ldr	r0, [sp, #4]
 8005d7c:	f7ff ff54 	bl	8005c28 <calc_gamma_val>
 8005d80:	b2c3      	uxtb	r3, r0
 8005d82:	2400      	movs	r4, #0
    	    index = index + 4;
 8005d84:	3504      	adds	r5, #4
 8005d86:	b22d      	sxth	r5, r5
    	    waddr = (jj*4)+(ii*256)+(ADDR_FLASH_PAGE_0|(_EEPROM_FLASH_PAGE_SIZE*GAMMA_TABLE_PAGE));
 8005d88:	eb07 1186 	add.w	r1, r7, r6, lsl #6
 8005d8c:	0089      	lsls	r1, r1, #2
    	    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,waddr,pdata)!=HAL_OK)
 8005d8e:	eb13 0308 	adds.w	r3, r3, r8
 8005d92:	eb44 0409 	adc.w	r4, r4, r9
 8005d96:	461a      	mov	r2, r3
 8005d98:	4623      	mov	r3, r4
 8005d9a:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8005d9e:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8005da2:	2002      	movs	r0, #2
 8005da4:	f7fb ff36 	bl	8001c14 <HAL_FLASH_Program>
 8005da8:	b988      	cbnz	r0, 8005dce <recalcGamma+0x10a>
    	for (jj = 0; jj<64;jj++)  //We'll need to loop through with words....
 8005daa:	3701      	adds	r7, #1
 8005dac:	b2ff      	uxtb	r7, r7
 8005dae:	e7b0      	b.n	8005d12 <recalcGamma+0x4e>
    		gamma = settings.gamma_green;
 8005db0:	4b0d      	ldr	r3, [pc, #52]	; (8005de8 <recalcGamma+0x124>)
 8005db2:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8005db6:	9301      	str	r3, [sp, #4]
    		break;
 8005db8:	e7a6      	b.n	8005d08 <recalcGamma+0x44>
    		gamma = settings.gamma_blue;
 8005dba:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <recalcGamma+0x124>)
 8005dbc:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8005dc0:	9301      	str	r3, [sp, #4]
    		break;
 8005dc2:	e7a1      	b.n	8005d08 <recalcGamma+0x44>
    		gamma = settings.gamma_strip;
 8005dc4:	4b08      	ldr	r3, [pc, #32]	; (8005de8 <recalcGamma+0x124>)
 8005dc6:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8005dca:	9301      	str	r3, [sp, #4]
    		break;
 8005dcc:	e79c      	b.n	8005d08 <recalcGamma+0x44>
    	      HAL_FLASH_Lock();
 8005dce:	f7fb fee1 	bl	8001b94 <HAL_FLASH_Lock>
    	      return false;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9304      	str	r3, [sp, #16]
 8005dd6:	e77e      	b.n	8005cd6 <recalcGamma+0x12>
    for (ii=0;ii<4;ii++)
 8005dd8:	9b05      	ldr	r3, [sp, #20]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	9305      	str	r3, [sp, #20]
 8005de0:	e783      	b.n	8005cea <recalcGamma+0x26>
    HAL_FLASH_Lock();
 8005de2:	f7fb fed7 	bl	8001b94 <HAL_FLASH_Lock>
    return true;
 8005de6:	e776      	b.n	8005cd6 <recalcGamma+0x12>
 8005de8:	20000af8 	.word	0x20000af8

08005dec <getGamma>:

uint8_t getGamma(t_gammactrl ch,uint8_t val)
{
 8005dec:	b500      	push	{lr}
 8005dee:	b083      	sub	sp, #12
	uint8_t data;
	uint16_t addr = ((uint8_t)ch * 256) + val;
 8005df0:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	EE_LL_Read(GAMMA_TABLE_PAGE, addr, 1, &data);
 8005df4:	f10d 0307 	add.w	r3, sp, #7
 8005df8:	2201      	movs	r2, #1
 8005dfa:	b289      	uxth	r1, r1
 8005dfc:	207e      	movs	r0, #126	; 0x7e
 8005dfe:	f7ff fd8c 	bl	800591a <EE_LL_Read>
	return data;
}
 8005e02:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005e06:	b003      	add	sp, #12
 8005e08:	f85d fb04 	ldr.w	pc, [sp], #4

08005e0c <get_mode_from_pins>:
#include <stm32f103xb.h>
#include <stm32f1xx.h>
#include <stm32f1xx_hal_gpio.h>

uint8_t get_mode_from_pins(void)
{
 8005e0c:	b510      	push	{r4, lr}
	uint8_t mode = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_0_GPIO_Port, MODE_0_Pin))
 8005e0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e12:	4808      	ldr	r0, [pc, #32]	; (8005e34 <get_mode_from_pins+0x28>)
 8005e14:	f7fc f8ae 	bl	8001f74 <HAL_GPIO_ReadPin>
 8005e18:	b150      	cbz	r0, 8005e30 <get_mode_from_pins+0x24>
	uint8_t mode = 0;
 8005e1a:	2400      	movs	r4, #0
		mode = mode | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_1_GPIO_Port, MODE_1_Pin))
 8005e1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e20:	4804      	ldr	r0, [pc, #16]	; (8005e34 <get_mode_from_pins+0x28>)
 8005e22:	f7fc f8a7 	bl	8001f74 <HAL_GPIO_ReadPin>
 8005e26:	b908      	cbnz	r0, 8005e2c <get_mode_from_pins+0x20>
		mode = mode | 0x02;
 8005e28:	f044 0402 	orr.w	r4, r4, #2
	return mode;
}
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	bd10      	pop	{r4, pc}
		mode = mode | 0x01;
 8005e30:	2401      	movs	r4, #1
 8005e32:	e7f3      	b.n	8005e1c <get_mode_from_pins+0x10>
 8005e34:	40011000 	.word	0x40011000

08005e38 <get_addr_from_pins>:

uint8_t get_addr_from_pins(void)
{
 8005e38:	b510      	push	{r4, lr}
	uint8_t addr = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_0_GPIO_Port, ADDR_0_Pin))
 8005e3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e3e:	481f      	ldr	r0, [pc, #124]	; (8005ebc <get_addr_from_pins+0x84>)
 8005e40:	f7fc f898 	bl	8001f74 <HAL_GPIO_ReadPin>
 8005e44:	b3c0      	cbz	r0, 8005eb8 <get_addr_from_pins+0x80>
	uint8_t addr = 0;
 8005e46:	2400      	movs	r4, #0
		addr = addr | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_1_GPIO_Port, ADDR_1_Pin))
 8005e48:	2108      	movs	r1, #8
 8005e4a:	481d      	ldr	r0, [pc, #116]	; (8005ec0 <get_addr_from_pins+0x88>)
 8005e4c:	f7fc f892 	bl	8001f74 <HAL_GPIO_ReadPin>
 8005e50:	b908      	cbnz	r0, 8005e56 <get_addr_from_pins+0x1e>
		addr = addr | 0x02;
 8005e52:	f044 0402 	orr.w	r4, r4, #2
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_2_GPIO_Port, ADDR_2_Pin))
 8005e56:	2110      	movs	r1, #16
 8005e58:	4819      	ldr	r0, [pc, #100]	; (8005ec0 <get_addr_from_pins+0x88>)
 8005e5a:	f7fc f88b 	bl	8001f74 <HAL_GPIO_ReadPin>
 8005e5e:	b908      	cbnz	r0, 8005e64 <get_addr_from_pins+0x2c>
		addr = addr | 0x04;
 8005e60:	f044 0404 	orr.w	r4, r4, #4
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_3_GPIO_Port, ADDR_3_Pin))
 8005e64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e68:	4815      	ldr	r0, [pc, #84]	; (8005ec0 <get_addr_from_pins+0x88>)
 8005e6a:	f7fc f883 	bl	8001f74 <HAL_GPIO_ReadPin>
 8005e6e:	b908      	cbnz	r0, 8005e74 <get_addr_from_pins+0x3c>
		addr = addr | 0x08;
 8005e70:	f044 0408 	orr.w	r4, r4, #8
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_4_GPIO_Port, ADDR_4_Pin))
 8005e74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e78:	4811      	ldr	r0, [pc, #68]	; (8005ec0 <get_addr_from_pins+0x88>)
 8005e7a:	f7fc f87b 	bl	8001f74 <HAL_GPIO_ReadPin>
 8005e7e:	b908      	cbnz	r0, 8005e84 <get_addr_from_pins+0x4c>
		addr = addr | 0x10;
 8005e80:	f044 0410 	orr.w	r4, r4, #16
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_5_GPIO_Port, ADDR_5_Pin))
 8005e84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e88:	480d      	ldr	r0, [pc, #52]	; (8005ec0 <get_addr_from_pins+0x88>)
 8005e8a:	f7fc f873 	bl	8001f74 <HAL_GPIO_ReadPin>
 8005e8e:	b908      	cbnz	r0, 8005e94 <get_addr_from_pins+0x5c>
		addr = addr | 0x20;
 8005e90:	f044 0420 	orr.w	r4, r4, #32
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_6_GPIO_Port, ADDR_6_Pin))
 8005e94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e98:	4809      	ldr	r0, [pc, #36]	; (8005ec0 <get_addr_from_pins+0x88>)
 8005e9a:	f7fc f86b 	bl	8001f74 <HAL_GPIO_ReadPin>
 8005e9e:	b908      	cbnz	r0, 8005ea4 <get_addr_from_pins+0x6c>
		addr = addr | 0x40;
 8005ea0:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_7_GPIO_Port, ADDR_7_Pin))
 8005ea4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ea8:	4805      	ldr	r0, [pc, #20]	; (8005ec0 <get_addr_from_pins+0x88>)
 8005eaa:	f7fc f863 	bl	8001f74 <HAL_GPIO_ReadPin>
 8005eae:	b908      	cbnz	r0, 8005eb4 <get_addr_from_pins+0x7c>
		addr = addr | 0x80;
 8005eb0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	return addr;
}
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	bd10      	pop	{r4, pc}
		addr = addr | 0x01;
 8005eb8:	2401      	movs	r4, #1
 8005eba:	e7c5      	b.n	8005e48 <get_addr_from_pins+0x10>
 8005ebc:	40010800 	.word	0x40010800
 8005ec0:	40010c00 	.word	0x40010c00

08005ec4 <check_button>:

uint8_t check_button(void)
{
 8005ec4:	b508      	push	{r3, lr}
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin))
 8005ec6:	2120      	movs	r1, #32
 8005ec8:	4803      	ldr	r0, [pc, #12]	; (8005ed8 <check_button+0x14>)
 8005eca:	f7fc f853 	bl	8001f74 <HAL_GPIO_ReadPin>
 8005ece:	b108      	cbz	r0, 8005ed4 <check_button+0x10>
		return 1;

	return 0;
 8005ed0:	2000      	movs	r0, #0
}
 8005ed2:	bd08      	pop	{r3, pc}
		return 1;
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	e7fc      	b.n	8005ed2 <check_button+0xe>
 8005ed8:	40010800 	.word	0x40010800

08005edc <scale_value>:
//Scales the value to the output range and applies correction


//output = gammatable[((input - offset) * gain)]
uint16_t scale_value( uint8_t val,int16_t offset, int16_t gain, t_gammactrl gamma_ch)
{
 8005edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	4614      	mov	r4, r2
 8005ee4:	461f      	mov	r7, r3
	int32_t res = 0;
	uint8_t gamma = 0;
	//1) Scale input between 0 and max
	res = ((uint32_t)val * (uint32_t) MAX_PWM)/(uint32_t)255;
 8005ee6:	f240 4034 	movw	r0, #1076	; 0x434
 8005eea:	fb00 f006 	mul.w	r0, r0, r6
 8005eee:	4d1a      	ldr	r5, [pc, #104]	; (8005f58 <scale_value+0x7c>)
 8005ef0:	fba5 3000 	umull	r3, r0, r5, r0
 8005ef4:	09c0      	lsrs	r0, r0, #7
	res = (res * (uint32_t)brightness_scale) / (uint32_t) MAX_PWM;
 8005ef6:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <scale_value+0x80>)
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	fb03 f000 	mul.w	r0, r3, r0
 8005efe:	4b18      	ldr	r3, [pc, #96]	; (8005f60 <scale_value+0x84>)
 8005f00:	fba3 3000 	umull	r3, r0, r3, r0

	//Subtract offset
	res = res - offset;

	//Apply Gain
	res = (int16_t) ((float)res * ((float)gain)/100);
 8005f04:	ebc1 2090 	rsb	r0, r1, r0, lsr #10
 8005f08:	f7fa fec8 	bl	8000c9c <__aeabi_i2f>
 8005f0c:	4680      	mov	r8, r0
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f7fa fec4 	bl	8000c9c <__aeabi_i2f>
 8005f14:	4601      	mov	r1, r0
 8005f16:	4640      	mov	r0, r8
 8005f18:	f7fa ff14 	bl	8000d44 <__aeabi_fmul>
 8005f1c:	4911      	ldr	r1, [pc, #68]	; (8005f64 <scale_value+0x88>)
 8005f1e:	f7fa ffc5 	bl	8000eac <__aeabi_fdiv>
 8005f22:	f7fb f8d5 	bl	80010d0 <__aeabi_f2iz>
 8005f26:	b204      	sxth	r4, r0

	//Gamma Curve
	//-----------

	//Get Gamma Value from Input
	gamma = getGamma(gamma_ch,val);
 8005f28:	4631      	mov	r1, r6
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	f7ff ff5e 	bl	8005dec <getGamma>

	//Apply as multiplier to output
	res = ((int16_t)gamma * res)/255;
 8005f30:	fb04 f000 	mul.w	r0, r4, r0
 8005f34:	fb85 3500 	smull	r3, r5, r5, r0
 8005f38:	4405      	add	r5, r0
 8005f3a:	17c0      	asrs	r0, r0, #31


	//Limit output to valid range
	if (res<0)
 8005f3c:	ebd0 10e5 	rsbs	r0, r0, r5, asr #7
 8005f40:	d408      	bmi.n	8005f54 <scale_value+0x78>
		res = 0;
	if (res > MAX_PWM)
 8005f42:	f240 4334 	movw	r3, #1076	; 0x434
 8005f46:	4298      	cmp	r0, r3
 8005f48:	dd01      	ble.n	8005f4e <scale_value+0x72>
		res = MAX_PWM;
 8005f4a:	f240 4034 	movw	r0, #1076	; 0x434
	return res;
}
 8005f4e:	b280      	uxth	r0, r0
 8005f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = 0;
 8005f54:	2000      	movs	r0, #0
 8005f56:	e7fa      	b.n	8005f4e <scale_value+0x72>
 8005f58:	80808081 	.word	0x80808081
 8005f5c:	2000042a 	.word	0x2000042a
 8005f60:	f3a0d52d 	.word	0xf3a0d52d
 8005f64:	42c80000 	.word	0x42c80000

08005f68 <update_pwm_lights>:

//Check what has changed and update Lights
//We only update parameters that have changed otherwise we might have waveform-artifacts...
void update_pwm_lights(uint8_t force)
{
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4604      	mov	r4, r0

	//Check if global brightness has changed and scale value
	if ((reg_shadow[MAX_BRIGHTNESS])!= get_reg(MAX_BRIGHTNESS) || force)
 8005f6c:	4ba8      	ldr	r3, [pc, #672]	; (8006210 <update_pwm_lights+0x2a8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	781d      	ldrb	r5, [r3, #0]
 8005f72:	2000      	movs	r0, #0
 8005f74:	f7ff fb88 	bl	8005688 <get_reg>
 8005f78:	4285      	cmp	r5, r0
 8005f7a:	d100      	bne.n	8005f7e <update_pwm_lights+0x16>
 8005f7c:	b19c      	cbz	r4, 8005fa6 <update_pwm_lights+0x3e>
	{
		brightness_scale = ((uint32_t)get_reg(MAX_BRIGHTNESS) * (uint32_t) MAX_PWM)/(uint32_t)255;
 8005f7e:	2000      	movs	r0, #0
 8005f80:	f7ff fb82 	bl	8005688 <get_reg>
 8005f84:	f240 4334 	movw	r3, #1076	; 0x434
 8005f88:	fb03 f000 	mul.w	r0, r3, r0
 8005f8c:	4ba1      	ldr	r3, [pc, #644]	; (8006214 <update_pwm_lights+0x2ac>)
 8005f8e:	fba3 3000 	umull	r3, r0, r3, r0
 8005f92:	09c0      	lsrs	r0, r0, #7
 8005f94:	4ba0      	ldr	r3, [pc, #640]	; (8006218 <update_pwm_lights+0x2b0>)
 8005f96:	8018      	strh	r0, [r3, #0]
		//After a brightness update we need to update all the over PWM outputs
		force = 1;
		reg_shadow[MAX_BRIGHTNESS] = get_reg(MAX_BRIGHTNESS);
 8005f98:	4b9d      	ldr	r3, [pc, #628]	; (8006210 <update_pwm_lights+0x2a8>)
 8005f9a:	681c      	ldr	r4, [r3, #0]
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	f7ff fb73 	bl	8005688 <get_reg>
 8005fa2:	7020      	strb	r0, [r4, #0]
		force = 1;
 8005fa4:	2401      	movs	r4, #1
	}

	//Update PWM Values if needed
	if ((reg_shadow[CH1_RED])!= get_reg(CH1_RED) || force)
 8005fa6:	4b9a      	ldr	r3, [pc, #616]	; (8006210 <update_pwm_lights+0x2a8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	785d      	ldrb	r5, [r3, #1]
 8005fac:	2001      	movs	r0, #1
 8005fae:	f7ff fb6b 	bl	8005688 <get_reg>
 8005fb2:	4285      	cmp	r5, r0
 8005fb4:	d100      	bne.n	8005fb8 <update_pwm_lights+0x50>
 8005fb6:	b1ac      	cbz	r4, 8005fe4 <update_pwm_lights+0x7c>
	{
		configPWM(PWM_CH1,CH_RED,scale_value(get_reg(CH1_RED),settings.offset_red,settings.gain_red,GAMMA_RED));
 8005fb8:	2001      	movs	r0, #1
 8005fba:	f7ff fb65 	bl	8005688 <get_reg>
 8005fbe:	4997      	ldr	r1, [pc, #604]	; (800621c <update_pwm_lights+0x2b4>)
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f9b1 2048 	ldrsh.w	r2, [r1, #72]	; 0x48
 8005fc6:	f9b1 1046 	ldrsh.w	r1, [r1, #70]	; 0x46
 8005fca:	f7ff ff87 	bl	8005edc <scale_value>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4608      	mov	r0, r1
 8005fd4:	f000 fdda 	bl	8006b8c <configPWM>
		reg_shadow[CH1_RED] = get_reg(CH1_RED);
 8005fd8:	4b8d      	ldr	r3, [pc, #564]	; (8006210 <update_pwm_lights+0x2a8>)
 8005fda:	681d      	ldr	r5, [r3, #0]
 8005fdc:	2001      	movs	r0, #1
 8005fde:	f7ff fb53 	bl	8005688 <get_reg>
 8005fe2:	7068      	strb	r0, [r5, #1]
	}

	if ((reg_shadow[CH1_GREEN])!= get_reg(CH1_GREEN) || force)
 8005fe4:	4b8a      	ldr	r3, [pc, #552]	; (8006210 <update_pwm_lights+0x2a8>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	789d      	ldrb	r5, [r3, #2]
 8005fea:	2002      	movs	r0, #2
 8005fec:	f7ff fb4c 	bl	8005688 <get_reg>
 8005ff0:	4285      	cmp	r5, r0
 8005ff2:	d100      	bne.n	8005ff6 <update_pwm_lights+0x8e>
 8005ff4:	b1ac      	cbz	r4, 8006022 <update_pwm_lights+0xba>
	{
		configPWM(PWM_CH1,CH_GREEN,scale_value(get_reg(CH1_GREEN),settings.offset_green,settings.gain_green,GAMMA_GREEN));
 8005ff6:	2002      	movs	r0, #2
 8005ff8:	f7ff fb46 	bl	8005688 <get_reg>
 8005ffc:	4987      	ldr	r1, [pc, #540]	; (800621c <update_pwm_lights+0x2b4>)
 8005ffe:	2301      	movs	r3, #1
 8006000:	f9b1 204e 	ldrsh.w	r2, [r1, #78]	; 0x4e
 8006004:	f9b1 104c 	ldrsh.w	r1, [r1, #76]	; 0x4c
 8006008:	f7ff ff68 	bl	8005edc <scale_value>
 800600c:	4602      	mov	r2, r0
 800600e:	2101      	movs	r1, #1
 8006010:	2000      	movs	r0, #0
 8006012:	f000 fdbb 	bl	8006b8c <configPWM>
		reg_shadow[CH1_GREEN] = get_reg(CH1_GREEN);
 8006016:	4b7e      	ldr	r3, [pc, #504]	; (8006210 <update_pwm_lights+0x2a8>)
 8006018:	681d      	ldr	r5, [r3, #0]
 800601a:	2002      	movs	r0, #2
 800601c:	f7ff fb34 	bl	8005688 <get_reg>
 8006020:	70a8      	strb	r0, [r5, #2]
	}

	if ((reg_shadow[CH1_BLUE])!= get_reg(CH1_BLUE) || force)
 8006022:	4b7b      	ldr	r3, [pc, #492]	; (8006210 <update_pwm_lights+0x2a8>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	78dd      	ldrb	r5, [r3, #3]
 8006028:	2003      	movs	r0, #3
 800602a:	f7ff fb2d 	bl	8005688 <get_reg>
 800602e:	4285      	cmp	r5, r0
 8006030:	d100      	bne.n	8006034 <update_pwm_lights+0xcc>
 8006032:	b1ac      	cbz	r4, 8006060 <update_pwm_lights+0xf8>
	{
		configPWM(PWM_CH1,CH_BLUE,scale_value(get_reg(CH1_BLUE),settings.offset_blue,settings.gain_blue,GAMMA_BLUE));
 8006034:	2003      	movs	r0, #3
 8006036:	f7ff fb27 	bl	8005688 <get_reg>
 800603a:	4978      	ldr	r1, [pc, #480]	; (800621c <update_pwm_lights+0x2b4>)
 800603c:	2302      	movs	r3, #2
 800603e:	f9b1 2054 	ldrsh.w	r2, [r1, #84]	; 0x54
 8006042:	f9b1 1052 	ldrsh.w	r1, [r1, #82]	; 0x52
 8006046:	f7ff ff49 	bl	8005edc <scale_value>
 800604a:	4602      	mov	r2, r0
 800604c:	2102      	movs	r1, #2
 800604e:	2000      	movs	r0, #0
 8006050:	f000 fd9c 	bl	8006b8c <configPWM>
		reg_shadow[CH1_BLUE] = get_reg(CH1_BLUE);
 8006054:	4b6e      	ldr	r3, [pc, #440]	; (8006210 <update_pwm_lights+0x2a8>)
 8006056:	681d      	ldr	r5, [r3, #0]
 8006058:	2003      	movs	r0, #3
 800605a:	f7ff fb15 	bl	8005688 <get_reg>
 800605e:	70e8      	strb	r0, [r5, #3]
	}

	if ((reg_shadow[CH2_RED])!= get_reg(CH2_RED) || force)
 8006060:	4b6b      	ldr	r3, [pc, #428]	; (8006210 <update_pwm_lights+0x2a8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	791d      	ldrb	r5, [r3, #4]
 8006066:	2004      	movs	r0, #4
 8006068:	f7ff fb0e 	bl	8005688 <get_reg>
 800606c:	4285      	cmp	r5, r0
 800606e:	d100      	bne.n	8006072 <update_pwm_lights+0x10a>
 8006070:	b1ac      	cbz	r4, 800609e <update_pwm_lights+0x136>
	{
		configPWM(PWM_CH2,CH_RED,scale_value(get_reg(CH2_RED),settings.offset_red,settings.gain_red,GAMMA_RED));
 8006072:	2004      	movs	r0, #4
 8006074:	f7ff fb08 	bl	8005688 <get_reg>
 8006078:	4968      	ldr	r1, [pc, #416]	; (800621c <update_pwm_lights+0x2b4>)
 800607a:	2300      	movs	r3, #0
 800607c:	f9b1 2048 	ldrsh.w	r2, [r1, #72]	; 0x48
 8006080:	f9b1 1046 	ldrsh.w	r1, [r1, #70]	; 0x46
 8006084:	f7ff ff2a 	bl	8005edc <scale_value>
 8006088:	4602      	mov	r2, r0
 800608a:	2100      	movs	r1, #0
 800608c:	2001      	movs	r0, #1
 800608e:	f000 fd7d 	bl	8006b8c <configPWM>
		reg_shadow[CH2_RED] = get_reg(CH2_RED);
 8006092:	4b5f      	ldr	r3, [pc, #380]	; (8006210 <update_pwm_lights+0x2a8>)
 8006094:	681d      	ldr	r5, [r3, #0]
 8006096:	2004      	movs	r0, #4
 8006098:	f7ff faf6 	bl	8005688 <get_reg>
 800609c:	7128      	strb	r0, [r5, #4]
	}

	if ((reg_shadow[CH2_GREEN])!= get_reg(CH2_GREEN) || force)
 800609e:	4b5c      	ldr	r3, [pc, #368]	; (8006210 <update_pwm_lights+0x2a8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	795d      	ldrb	r5, [r3, #5]
 80060a4:	2005      	movs	r0, #5
 80060a6:	f7ff faef 	bl	8005688 <get_reg>
 80060aa:	4285      	cmp	r5, r0
 80060ac:	d100      	bne.n	80060b0 <update_pwm_lights+0x148>
 80060ae:	b1ac      	cbz	r4, 80060dc <update_pwm_lights+0x174>
	{
		configPWM(PWM_CH2,CH_GREEN,scale_value(get_reg(CH2_GREEN),settings.offset_green,settings.gain_green,GAMMA_GREEN));
 80060b0:	2005      	movs	r0, #5
 80060b2:	f7ff fae9 	bl	8005688 <get_reg>
 80060b6:	4959      	ldr	r1, [pc, #356]	; (800621c <update_pwm_lights+0x2b4>)
 80060b8:	2301      	movs	r3, #1
 80060ba:	f9b1 204e 	ldrsh.w	r2, [r1, #78]	; 0x4e
 80060be:	f9b1 104c 	ldrsh.w	r1, [r1, #76]	; 0x4c
 80060c2:	f7ff ff0b 	bl	8005edc <scale_value>
 80060c6:	4602      	mov	r2, r0
 80060c8:	2101      	movs	r1, #1
 80060ca:	4608      	mov	r0, r1
 80060cc:	f000 fd5e 	bl	8006b8c <configPWM>
		reg_shadow[CH2_GREEN] = get_reg(CH2_GREEN);
 80060d0:	4b4f      	ldr	r3, [pc, #316]	; (8006210 <update_pwm_lights+0x2a8>)
 80060d2:	681d      	ldr	r5, [r3, #0]
 80060d4:	2005      	movs	r0, #5
 80060d6:	f7ff fad7 	bl	8005688 <get_reg>
 80060da:	7168      	strb	r0, [r5, #5]
	}

	if ((reg_shadow[CH2_BLUE])!= get_reg(CH2_BLUE) || force)
 80060dc:	4b4c      	ldr	r3, [pc, #304]	; (8006210 <update_pwm_lights+0x2a8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	799d      	ldrb	r5, [r3, #6]
 80060e2:	2006      	movs	r0, #6
 80060e4:	f7ff fad0 	bl	8005688 <get_reg>
 80060e8:	4285      	cmp	r5, r0
 80060ea:	d100      	bne.n	80060ee <update_pwm_lights+0x186>
 80060ec:	b1ac      	cbz	r4, 800611a <update_pwm_lights+0x1b2>
	{
		configPWM(PWM_CH2,CH_BLUE,scale_value(get_reg(CH2_BLUE),settings.offset_blue,settings.gain_blue,GAMMA_BLUE));
 80060ee:	2006      	movs	r0, #6
 80060f0:	f7ff faca 	bl	8005688 <get_reg>
 80060f4:	4949      	ldr	r1, [pc, #292]	; (800621c <update_pwm_lights+0x2b4>)
 80060f6:	2302      	movs	r3, #2
 80060f8:	f9b1 2054 	ldrsh.w	r2, [r1, #84]	; 0x54
 80060fc:	f9b1 1052 	ldrsh.w	r1, [r1, #82]	; 0x52
 8006100:	f7ff feec 	bl	8005edc <scale_value>
 8006104:	4602      	mov	r2, r0
 8006106:	2102      	movs	r1, #2
 8006108:	2001      	movs	r0, #1
 800610a:	f000 fd3f 	bl	8006b8c <configPWM>
		reg_shadow[CH2_BLUE] = get_reg(CH2_BLUE);
 800610e:	4b40      	ldr	r3, [pc, #256]	; (8006210 <update_pwm_lights+0x2a8>)
 8006110:	681d      	ldr	r5, [r3, #0]
 8006112:	2006      	movs	r0, #6
 8006114:	f7ff fab8 	bl	8005688 <get_reg>
 8006118:	71a8      	strb	r0, [r5, #6]
	}

	if ((reg_shadow[CH3_RED])!= get_reg(CH3_RED) || force)
 800611a:	4b3d      	ldr	r3, [pc, #244]	; (8006210 <update_pwm_lights+0x2a8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	79dd      	ldrb	r5, [r3, #7]
 8006120:	2007      	movs	r0, #7
 8006122:	f7ff fab1 	bl	8005688 <get_reg>
 8006126:	4285      	cmp	r5, r0
 8006128:	d100      	bne.n	800612c <update_pwm_lights+0x1c4>
 800612a:	b1ac      	cbz	r4, 8006158 <update_pwm_lights+0x1f0>
	{
		configPWM(PWM_CH3,CH_RED,scale_value(get_reg(CH3_RED),settings.offset_red,settings.gain_red,GAMMA_RED));
 800612c:	2007      	movs	r0, #7
 800612e:	f7ff faab 	bl	8005688 <get_reg>
 8006132:	493a      	ldr	r1, [pc, #232]	; (800621c <update_pwm_lights+0x2b4>)
 8006134:	2300      	movs	r3, #0
 8006136:	f9b1 2048 	ldrsh.w	r2, [r1, #72]	; 0x48
 800613a:	f9b1 1046 	ldrsh.w	r1, [r1, #70]	; 0x46
 800613e:	f7ff fecd 	bl	8005edc <scale_value>
 8006142:	4602      	mov	r2, r0
 8006144:	2100      	movs	r1, #0
 8006146:	2002      	movs	r0, #2
 8006148:	f000 fd20 	bl	8006b8c <configPWM>
		reg_shadow[CH3_RED] = get_reg(CH3_RED);
 800614c:	4b30      	ldr	r3, [pc, #192]	; (8006210 <update_pwm_lights+0x2a8>)
 800614e:	681d      	ldr	r5, [r3, #0]
 8006150:	2007      	movs	r0, #7
 8006152:	f7ff fa99 	bl	8005688 <get_reg>
 8006156:	71e8      	strb	r0, [r5, #7]
	}

	if ((reg_shadow[CH3_GREEN])!= get_reg(CH3_GREEN) || force)
 8006158:	4b2d      	ldr	r3, [pc, #180]	; (8006210 <update_pwm_lights+0x2a8>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	7a1d      	ldrb	r5, [r3, #8]
 800615e:	2008      	movs	r0, #8
 8006160:	f7ff fa92 	bl	8005688 <get_reg>
 8006164:	4285      	cmp	r5, r0
 8006166:	d100      	bne.n	800616a <update_pwm_lights+0x202>
 8006168:	b1ac      	cbz	r4, 8006196 <update_pwm_lights+0x22e>
	{
		configPWM(PWM_CH3,CH_GREEN,scale_value(get_reg(CH3_GREEN),settings.offset_green,settings.gain_green,GAMMA_GREEN));
 800616a:	2008      	movs	r0, #8
 800616c:	f7ff fa8c 	bl	8005688 <get_reg>
 8006170:	492a      	ldr	r1, [pc, #168]	; (800621c <update_pwm_lights+0x2b4>)
 8006172:	2301      	movs	r3, #1
 8006174:	f9b1 204e 	ldrsh.w	r2, [r1, #78]	; 0x4e
 8006178:	f9b1 104c 	ldrsh.w	r1, [r1, #76]	; 0x4c
 800617c:	f7ff feae 	bl	8005edc <scale_value>
 8006180:	4602      	mov	r2, r0
 8006182:	2101      	movs	r1, #1
 8006184:	2002      	movs	r0, #2
 8006186:	f000 fd01 	bl	8006b8c <configPWM>
		reg_shadow[CH3_GREEN] = get_reg(CH3_GREEN);
 800618a:	4b21      	ldr	r3, [pc, #132]	; (8006210 <update_pwm_lights+0x2a8>)
 800618c:	681d      	ldr	r5, [r3, #0]
 800618e:	2008      	movs	r0, #8
 8006190:	f7ff fa7a 	bl	8005688 <get_reg>
 8006194:	7228      	strb	r0, [r5, #8]
	}

	if ((reg_shadow[CH3_BLUE])!= get_reg(CH3_BLUE) || force)
 8006196:	4b1e      	ldr	r3, [pc, #120]	; (8006210 <update_pwm_lights+0x2a8>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	7a5d      	ldrb	r5, [r3, #9]
 800619c:	2009      	movs	r0, #9
 800619e:	f7ff fa73 	bl	8005688 <get_reg>
 80061a2:	4285      	cmp	r5, r0
 80061a4:	d100      	bne.n	80061a8 <update_pwm_lights+0x240>
 80061a6:	b1ac      	cbz	r4, 80061d4 <update_pwm_lights+0x26c>
	{
		configPWM(PWM_CH3,CH_BLUE,scale_value(get_reg(CH3_BLUE),settings.offset_blue,settings.gain_blue,GAMMA_BLUE));
 80061a8:	2009      	movs	r0, #9
 80061aa:	f7ff fa6d 	bl	8005688 <get_reg>
 80061ae:	491b      	ldr	r1, [pc, #108]	; (800621c <update_pwm_lights+0x2b4>)
 80061b0:	2302      	movs	r3, #2
 80061b2:	f9b1 2054 	ldrsh.w	r2, [r1, #84]	; 0x54
 80061b6:	f9b1 1052 	ldrsh.w	r1, [r1, #82]	; 0x52
 80061ba:	f7ff fe8f 	bl	8005edc <scale_value>
 80061be:	4602      	mov	r2, r0
 80061c0:	2102      	movs	r1, #2
 80061c2:	4608      	mov	r0, r1
 80061c4:	f000 fce2 	bl	8006b8c <configPWM>
		reg_shadow[CH3_BLUE] = get_reg(CH3_BLUE);
 80061c8:	4b11      	ldr	r3, [pc, #68]	; (8006210 <update_pwm_lights+0x2a8>)
 80061ca:	681d      	ldr	r5, [r3, #0]
 80061cc:	2009      	movs	r0, #9
 80061ce:	f7ff fa5b 	bl	8005688 <get_reg>
 80061d2:	7268      	strb	r0, [r5, #9]
	}

	if ((reg_shadow[CH3_WHITE])!= get_reg(CH3_WHITE) || force)
 80061d4:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <update_pwm_lights+0x2a8>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	7a9d      	ldrb	r5, [r3, #10]
 80061da:	200a      	movs	r0, #10
 80061dc:	f7ff fa54 	bl	8005688 <get_reg>
 80061e0:	4285      	cmp	r5, r0
 80061e2:	d100      	bne.n	80061e6 <update_pwm_lights+0x27e>
 80061e4:	b194      	cbz	r4, 800620c <update_pwm_lights+0x2a4>
	{
		configPWM(PWM_CH3,CH_WHITE,scale_value(get_reg(CH3_WHITE),0,100,GAMMA_STRIP));  //TBD, no settings?
 80061e6:	200a      	movs	r0, #10
 80061e8:	f7ff fa4e 	bl	8005688 <get_reg>
 80061ec:	2303      	movs	r3, #3
 80061ee:	2264      	movs	r2, #100	; 0x64
 80061f0:	2100      	movs	r1, #0
 80061f2:	f7ff fe73 	bl	8005edc <scale_value>
 80061f6:	4602      	mov	r2, r0
 80061f8:	2103      	movs	r1, #3
 80061fa:	2002      	movs	r0, #2
 80061fc:	f000 fcc6 	bl	8006b8c <configPWM>
		reg_shadow[CH3_WHITE] = get_reg(CH3_WHITE);
 8006200:	4b03      	ldr	r3, [pc, #12]	; (8006210 <update_pwm_lights+0x2a8>)
 8006202:	681c      	ldr	r4, [r3, #0]
 8006204:	200a      	movs	r0, #10
 8006206:	f7ff fa3f 	bl	8005688 <get_reg>
 800620a:	72a0      	strb	r0, [r4, #10]
	}

}
 800620c:	bd38      	pop	{r3, r4, r5, pc}
 800620e:	bf00      	nop
 8006210:	2000042c 	.word	0x2000042c
 8006214:	80808081 	.word	0x80808081
 8006218:	2000042a 	.word	0x2000042a
 800621c:	20000af8 	.word	0x20000af8

08006220 <init_update_lights>:
{
 8006220:	b538      	push	{r3, r4, r5, lr}
	if (reg_shadow != NULL)
 8006222:	4b0d      	ldr	r3, [pc, #52]	; (8006258 <init_update_lights+0x38>)
 8006224:	6818      	ldr	r0, [r3, #0]
 8006226:	b108      	cbz	r0, 800622c <init_update_lights+0xc>
		free(reg_shadow);
 8006228:	f003 fa72 	bl	8009710 <free>
	reg_shadow = malloc(get_reg_length() * sizeof(uint8_t));
 800622c:	f7ff f9e6 	bl	80055fc <get_reg_length>
 8006230:	f003 fa66 	bl	8009700 <malloc>
 8006234:	4605      	mov	r5, r0
 8006236:	4c08      	ldr	r4, [pc, #32]	; (8006258 <init_update_lights+0x38>)
 8006238:	6020      	str	r0, [r4, #0]
	memset(reg_shadow, 0,get_reg_length());
 800623a:	f7ff f9df 	bl	80055fc <get_reg_length>
 800623e:	4602      	mov	r2, r0
 8006240:	2100      	movs	r1, #0
 8006242:	4628      	mov	r0, r5
 8006244:	f003 fa77 	bl	8009736 <memset>
	reg_shadow[MAX_BRIGHTNESS] = 255;
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	22ff      	movs	r2, #255	; 0xff
 800624c:	701a      	strb	r2, [r3, #0]
	update_pwm_lights(1);
 800624e:	2001      	movs	r0, #1
 8006250:	f7ff fe8a 	bl	8005f68 <update_pwm_lights>
}
 8006254:	bd38      	pop	{r3, r4, r5, pc}
 8006256:	bf00      	nop
 8006258:	2000042c 	.word	0x2000042c

0800625c <update_fx>:

void update_fx(void)
{
 800625c:	b510      	push	{r4, lr}
	uint8_t val = 0;

	//Deal with LED Strip Registers/Effects
	if (DMX_MODE2 == get_mode())
 800625e:	f7ff f9c1 	bl	80055e4 <get_mode>
 8006262:	2801      	cmp	r0, #1
 8006264:	d000      	beq.n	8006268 <update_fx+0xc>
			val = start_fx(val);
			set_reg(FX_SELECT,val);
			reg_shadow[FX_SELECT] = val;
		}
	}
}
 8006266:	bd10      	pop	{r4, pc}
		val = get_reg(FX_SELECT)/settings.fx_multiplier;
 8006268:	200b      	movs	r0, #11
 800626a:	f7ff fa0d 	bl	8005688 <get_reg>
 800626e:	4b0b      	ldr	r3, [pc, #44]	; (800629c <update_fx+0x40>)
 8006270:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006274:	fbb0 f0f3 	udiv	r0, r0, r3
 8006278:	b2c0      	uxtb	r0, r0
		if (reg_shadow[FX_SELECT]!= val)
 800627a:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <update_fx+0x44>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	7adb      	ldrb	r3, [r3, #11]
 8006280:	4283      	cmp	r3, r0
 8006282:	d0f0      	beq.n	8006266 <update_fx+0xa>
			val = start_fx(val);
 8006284:	f7ff fbf4 	bl	8005a70 <start_fx>
 8006288:	4604      	mov	r4, r0
			set_reg(FX_SELECT,val);
 800628a:	4601      	mov	r1, r0
 800628c:	200b      	movs	r0, #11
 800628e:	f7ff f9ed 	bl	800566c <set_reg>
			reg_shadow[FX_SELECT] = val;
 8006292:	4b03      	ldr	r3, [pc, #12]	; (80062a0 <update_fx+0x44>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	72dc      	strb	r4, [r3, #11]
}
 8006298:	e7e5      	b.n	8006266 <update_fx+0xa>
 800629a:	bf00      	nop
 800629c:	20000af8 	.word	0x20000af8
 80062a0:	2000042c 	.word	0x2000042c

080062a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80062a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062a8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062aa:	2400      	movs	r4, #0
 80062ac:	9406      	str	r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80062ae:	4b48      	ldr	r3, [pc, #288]	; (80063d0 <MX_GPIO_Init+0x12c>)
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	f042 0210 	orr.w	r2, r2, #16
 80062b6:	619a      	str	r2, [r3, #24]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	f002 0210 	and.w	r2, r2, #16
 80062be:	9200      	str	r2, [sp, #0]
 80062c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80062c2:	699a      	ldr	r2, [r3, #24]
 80062c4:	f042 0220 	orr.w	r2, r2, #32
 80062c8:	619a      	str	r2, [r3, #24]
 80062ca:	699a      	ldr	r2, [r3, #24]
 80062cc:	f002 0220 	and.w	r2, r2, #32
 80062d0:	9201      	str	r2, [sp, #4]
 80062d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	f042 0204 	orr.w	r2, r2, #4
 80062da:	619a      	str	r2, [r3, #24]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	f002 0204 	and.w	r2, r2, #4
 80062e2:	9202      	str	r2, [sp, #8]
 80062e4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80062e6:	699a      	ldr	r2, [r3, #24]
 80062e8:	f042 0208 	orr.w	r2, r2, #8
 80062ec:	619a      	str	r2, [r3, #24]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	9303      	str	r3, [sp, #12]
 80062f6:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 80062f8:	f04f 0880 	mov.w	r8, #128	; 0x80
 80062fc:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006300:	2701      	movs	r7, #1
 8006302:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006304:	2602      	movs	r6, #2
 8006306:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8006308:	4d32      	ldr	r5, [pc, #200]	; (80063d4 <MX_GPIO_Init+0x130>)
 800630a:	a904      	add	r1, sp, #16
 800630c:	4628      	mov	r0, r5
 800630e:	f7fb fd45 	bl	8001d9c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8006312:	4622      	mov	r2, r4
 8006314:	4641      	mov	r1, r8
 8006316:	4628      	mov	r0, r5
 8006318:	f7fb fe33 	bl	8001f82 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin MODE_0_Pin MODE_1_Pin */
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
 800631c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006320:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006322:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006324:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006326:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80063dc <MX_GPIO_Init+0x138>
 800632a:	a904      	add	r1, sp, #16
 800632c:	4640      	mov	r0, r8
 800632e:	f7fb fd35 	bl	8001d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED_Pin;
 8006332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006336:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006338:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800633a:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800633c:	a904      	add	r1, sp, #16
 800633e:	4640      	mov	r0, r8
 8006340:	f7fb fd2c 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CH1_R_Pin CH1_G_Pin CH1_B_Pin CH2_R_Pin 
                           CH2_G_Pin CH3_R_Pin CH3_G_Pin CH3_B_Pin */
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
 8006344:	f240 73ce 	movw	r3, #1998	; 0x7ce
 8006348:	9304      	str	r3, [sp, #16]
                          |CH2_G_Pin|CH3_R_Pin|CH3_G_Pin|CH3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800634a:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800634c:	f04f 0803 	mov.w	r8, #3
 8006350:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006354:	f8df a088 	ldr.w	sl, [pc, #136]	; 80063e0 <MX_GPIO_Init+0x13c>
 8006358:	a904      	add	r1, sp, #16
 800635a:	4650      	mov	r0, sl
 800635c:	f7fb fd1e 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CH2_B_Pin CH2_W_Pin */
  GPIO_InitStruct.Pin = CH2_B_Pin|CH2_W_Pin;
 8006360:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006364:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006366:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800636a:	a904      	add	r1, sp, #16
 800636c:	4628      	mov	r0, r5
 800636e:	f7fb fd15 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_Pin ADDR_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|ADDR_0_Pin;
 8006372:	f248 0920 	movw	r9, #32800	; 0x8020
 8006376:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800637a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800637c:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800637e:	a904      	add	r1, sp, #16
 8006380:	4650      	mov	r0, sl
 8006382:	f7fb fd0b 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR_5_Pin ADDR_6_Pin ADDR_7_Pin ADDR_1_Pin 
                           ADDR_2_Pin ADDR_3_Pin ADDR_4_Pin */
  GPIO_InitStruct.Pin = ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_1_Pin 
 8006386:	f247 3318 	movw	r3, #29464	; 0x7318
 800638a:	9304      	str	r3, [sp, #16]
                          |ADDR_2_Pin|ADDR_3_Pin|ADDR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800638c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800638e:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006390:	a904      	add	r1, sp, #16
 8006392:	4628      	mov	r0, r5
 8006394:	f7fb fd02 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : WS8212_CH2_Pin WS8212_CH1_Pin */
  GPIO_InitStruct.Pin = WS8212_CH2_Pin|WS8212_CH1_Pin;
 8006398:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800639c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800639e:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063a2:	a904      	add	r1, sp, #16
 80063a4:	4628      	mov	r0, r5
 80063a6:	f7fb fcf9 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DIR_Pin */
  GPIO_InitStruct.Pin = RS232_TX_Pin;
 80063aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063b0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063b4:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 80063b6:	a904      	add	r1, sp, #16
 80063b8:	4628      	mov	r0, r5
 80063ba:	f7fb fcef 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 80063be:	4a06      	ldr	r2, [pc, #24]	; (80063d8 <MX_GPIO_Init+0x134>)
 80063c0:	6853      	ldr	r3, [r2, #4]
 80063c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80063c6:	433b      	orrs	r3, r7
 80063c8:	6053      	str	r3, [r2, #4]
}
 80063ca:	b008      	add	sp, #32
 80063cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d0:	40021000 	.word	0x40021000
 80063d4:	40010c00 	.word	0x40010c00
 80063d8:	40010000 	.word	0x40010000
 80063dc:	40011000 	.word	0x40011000
 80063e0:	40010800 	.word	0x40010800

080063e4 <MX_ADC1_Init>:
{
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 80063e8:	2500      	movs	r5, #0
 80063ea:	9501      	str	r5, [sp, #4]
 80063ec:	9502      	str	r5, [sp, #8]
 80063ee:	9503      	str	r5, [sp, #12]
  hadc1.Instance = ADC1;
 80063f0:	4c0b      	ldr	r4, [pc, #44]	; (8006420 <MX_ADC1_Init+0x3c>)
 80063f2:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <MX_ADC1_Init+0x40>)
 80063f4:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80063f6:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80063f8:	7325      	strb	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80063fa:	7525      	strb	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80063fc:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8006400:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006402:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 8006404:	2601      	movs	r6, #1
 8006406:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006408:	4620      	mov	r0, r4
 800640a:	f7fb f8f9 	bl	8001600 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 800640e:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006410:	9602      	str	r6, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006412:	9503      	str	r5, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006414:	a901      	add	r1, sp, #4
 8006416:	4620      	mov	r0, r4
 8006418:	f7fa ff74 	bl	8001304 <HAL_ADC_ConfigChannel>
}
 800641c:	b004      	add	sp, #16
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	20000c58 	.word	0x20000c58
 8006424:	40012400 	.word	0x40012400

08006428 <MX_ADC2_Init>:
{
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800642c:	2500      	movs	r5, #0
 800642e:	9501      	str	r5, [sp, #4]
 8006430:	9502      	str	r5, [sp, #8]
 8006432:	9503      	str	r5, [sp, #12]
  hadc2.Instance = ADC2;
 8006434:	4c0c      	ldr	r4, [pc, #48]	; (8006468 <MX_ADC2_Init+0x40>)
 8006436:	4b0d      	ldr	r3, [pc, #52]	; (800646c <MX_ADC2_Init+0x44>)
 8006438:	6023      	str	r3, [r4, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800643a:	60a5      	str	r5, [r4, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800643c:	7325      	strb	r5, [r4, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800643e:	7525      	strb	r5, [r4, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006440:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8006444:	61e3      	str	r3, [r4, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006446:	6065      	str	r5, [r4, #4]
  hadc2.Init.NbrOfConversion = 1;
 8006448:	2601      	movs	r6, #1
 800644a:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800644c:	4620      	mov	r0, r4
 800644e:	f7fb f8d7 	bl	8001600 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 8006452:	2304      	movs	r3, #4
 8006454:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006456:	9602      	str	r6, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006458:	9503      	str	r5, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800645a:	eb0d 0103 	add.w	r1, sp, r3
 800645e:	4620      	mov	r0, r4
 8006460:	f7fa ff50 	bl	8001304 <HAL_ADC_ConfigChannel>
}
 8006464:	b004      	add	sp, #16
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	20000bec 	.word	0x20000bec
 800646c:	40012800 	.word	0x40012800

08006470 <MX_DMA_Init>:
{
 8006470:	b500      	push	{lr}
 8006472:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006474:	4b0e      	ldr	r3, [pc, #56]	; (80064b0 <MX_DMA_Init+0x40>)
 8006476:	695a      	ldr	r2, [r3, #20]
 8006478:	f042 0201 	orr.w	r2, r2, #1
 800647c:	615a      	str	r2, [r3, #20]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	9301      	str	r3, [sp, #4]
 8006486:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006488:	2200      	movs	r2, #0
 800648a:	4611      	mov	r1, r2
 800648c:	200d      	movs	r0, #13
 800648e:	f7fb f953 	bl	8001738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006492:	200d      	movs	r0, #13
 8006494:	f7fb f984 	bl	80017a0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8006498:	2200      	movs	r2, #0
 800649a:	4611      	mov	r1, r2
 800649c:	200e      	movs	r0, #14
 800649e:	f7fb f94b 	bl	8001738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80064a2:	200e      	movs	r0, #14
 80064a4:	f7fb f97c 	bl	80017a0 <HAL_NVIC_EnableIRQ>
}
 80064a8:	b003      	add	sp, #12
 80064aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80064ae:	bf00      	nop
 80064b0:	40021000 	.word	0x40021000

080064b4 <MX_USART1_UART_Init>:
{
 80064b4:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80064b6:	480d      	ldr	r0, [pc, #52]	; (80064ec <MX_USART1_UART_Init+0x38>)
 80064b8:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <MX_USART1_UART_Init+0x3c>)
 80064ba:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 250000;
 80064bc:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <MX_USART1_UART_Init+0x40>)
 80064be:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80064c0:	2400      	movs	r4, #0
 80064c2:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80064c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064c8:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80064ca:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80064cc:	230c      	movs	r3, #12
 80064ce:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064d0:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80064d2:	61c4      	str	r4, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80064d4:	f7fd fb04 	bl	8003ae0 <HAL_HalfDuplex_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80064d8:	4622      	mov	r2, r4
 80064da:	4621      	mov	r1, r4
 80064dc:	2025      	movs	r0, #37	; 0x25
 80064de:	f7fb f92b 	bl	8001738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80064e2:	2025      	movs	r0, #37	; 0x25
 80064e4:	f7fb f95c 	bl	80017a0 <HAL_NVIC_EnableIRQ>
}
 80064e8:	bd10      	pop	{r4, pc}
 80064ea:	bf00      	nop
 80064ec:	20000c88 	.word	0x20000c88
 80064f0:	40013800 	.word	0x40013800
 80064f4:	0003d090 	.word	0x0003d090

080064f8 <MX_USART3_UART_Init>:
{
 80064f8:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80064fa:	480a      	ldr	r0, [pc, #40]	; (8006524 <MX_USART3_UART_Init+0x2c>)
 80064fc:	4b0a      	ldr	r3, [pc, #40]	; (8006528 <MX_USART3_UART_Init+0x30>)
 80064fe:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8006500:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006504:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006506:	2300      	movs	r3, #0
 8006508:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800650a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800650c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800650e:	220c      	movs	r2, #12
 8006510:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006512:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006514:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006516:	f7fd fab4 	bl	8003a82 <HAL_UART_Init>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800651a:	4b04      	ldr	r3, [pc, #16]	; (800652c <MX_USART3_UART_Init+0x34>)
 800651c:	2280      	movs	r2, #128	; 0x80
 800651e:	605a      	str	r2, [r3, #4]
}
 8006520:	bd08      	pop	{r3, pc}
 8006522:	bf00      	nop
 8006524:	20000bac 	.word	0x20000bac
 8006528:	40004800 	.word	0x40004800
 800652c:	e000e100 	.word	0xe000e100

08006530 <MX_SPI1_Init>:
{
 8006530:	b500      	push	{lr}
 8006532:	b083      	sub	sp, #12
  __HAL_RCC_SPI1_CLK_ENABLE();
 8006534:	4b11      	ldr	r3, [pc, #68]	; (800657c <MX_SPI1_Init+0x4c>)
 8006536:	699a      	ldr	r2, [r3, #24]
 8006538:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800653c:	619a      	str	r2, [r3, #24]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006544:	9301      	str	r3, [sp, #4]
 8006546:	9b01      	ldr	r3, [sp, #4]
  hspi1.Instance = SPI1;
 8006548:	480d      	ldr	r0, [pc, #52]	; (8006580 <MX_SPI1_Init+0x50>)
 800654a:	4b0e      	ldr	r3, [pc, #56]	; (8006584 <MX_SPI1_Init+0x54>)
 800654c:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800654e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006552:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006554:	2300      	movs	r3, #0
 8006556:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006558:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800655a:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800655c:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800655e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006562:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006564:	2220      	movs	r2, #32
 8006566:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006568:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800656a:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800656c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800656e:	230a      	movs	r3, #10
 8006570:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006572:	f7fc fd6a 	bl	800304a <HAL_SPI_Init>
}
 8006576:	b003      	add	sp, #12
 8006578:	f85d fb04 	ldr.w	pc, [sp], #4
 800657c:	40021000 	.word	0x40021000
 8006580:	20000ccc 	.word	0x20000ccc
 8006584:	40013000 	.word	0x40013000

08006588 <MX_SPI2_Init>:
{
 8006588:	b500      	push	{lr}
 800658a:	b083      	sub	sp, #12
  __HAL_RCC_SPI2_CLK_ENABLE();
 800658c:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <MX_SPI2_Init+0x4c>)
 800658e:	69da      	ldr	r2, [r3, #28]
 8006590:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006594:	61da      	str	r2, [r3, #28]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800659c:	9301      	str	r3, [sp, #4]
 800659e:	9b01      	ldr	r3, [sp, #4]
  hspi2.Instance = SPI2;
 80065a0:	480d      	ldr	r0, [pc, #52]	; (80065d8 <MX_SPI2_Init+0x50>)
 80065a2:	4b0e      	ldr	r3, [pc, #56]	; (80065dc <MX_SPI2_Init+0x54>)
 80065a4:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80065a6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80065aa:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80065ac:	2300      	movs	r3, #0
 80065ae:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80065b0:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80065b2:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80065b4:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80065b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ba:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80065bc:	2220      	movs	r2, #32
 80065be:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80065c0:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80065c2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065c4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80065c6:	230a      	movs	r3, #10
 80065c8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80065ca:	f7fc fd3e 	bl	800304a <HAL_SPI_Init>
}
 80065ce:	b003      	add	sp, #12
 80065d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80065d4:	40021000 	.word	0x40021000
 80065d8:	20000b54 	.word	0x20000b54
 80065dc:	40003800 	.word	0x40003800

080065e0 <SystemClock_Config>:
{
 80065e0:	b530      	push	{r4, r5, lr}
 80065e2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80065e4:	2400      	movs	r4, #0
 80065e6:	940c      	str	r4, [sp, #48]	; 0x30
 80065e8:	940d      	str	r4, [sp, #52]	; 0x34
 80065ea:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80065ec:	9405      	str	r4, [sp, #20]
 80065ee:	9406      	str	r4, [sp, #24]
 80065f0:	9407      	str	r4, [sp, #28]
 80065f2:	9408      	str	r4, [sp, #32]
 80065f4:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80065f6:	9401      	str	r4, [sp, #4]
 80065f8:	9402      	str	r4, [sp, #8]
 80065fa:	9403      	str	r4, [sp, #12]
 80065fc:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80065fe:	2309      	movs	r3, #9
 8006600:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006606:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006608:	2201      	movs	r2, #1
 800660a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800660c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800660e:	2502      	movs	r5, #2
 8006610:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006612:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006614:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006618:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800661a:	a80a      	add	r0, sp, #40	; 0x28
 800661c:	f7fc f914 	bl	8002848 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006620:	230f      	movs	r3, #15
 8006622:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006624:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006626:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800662c:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800662e:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006630:	4629      	mov	r1, r5
 8006632:	a805      	add	r0, sp, #20
 8006634:	f7fc fb48 	bl	8002cc8 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8006638:	2312      	movs	r3, #18
 800663a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800663c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006640:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8006642:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006644:	a801      	add	r0, sp, #4
 8006646:	f7fc fc19 	bl	8002e7c <HAL_RCCEx_PeriphCLKConfig>
}
 800664a:	b015      	add	sp, #84	; 0x54
 800664c:	bd30      	pop	{r4, r5, pc}
	...

08006650 <main>:
{
 8006650:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 8006652:	f7fa fda9 	bl	80011a8 <HAL_Init>
  SystemClock_Config();
 8006656:	f7ff ffc3 	bl	80065e0 <SystemClock_Config>
  MX_GPIO_Init();
 800665a:	f7ff fe23 	bl	80062a4 <MX_GPIO_Init>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800665e:	2200      	movs	r2, #0
 8006660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006664:	48b1      	ldr	r0, [pc, #708]	; (800692c <main+0x2dc>)
 8006666:	f7fb fc8c 	bl	8001f82 <HAL_GPIO_WritePin>
  MX_ADC1_Init();
 800666a:	f7ff febb 	bl	80063e4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800666e:	f7ff fedb 	bl	8006428 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8006672:	f7ff ff1f 	bl	80064b4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8006676:	f7ff ff3f 	bl	80064f8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800667a:	f7ff ff59 	bl	8006530 <MX_SPI1_Init>
  MX_SPI2_Init();
 800667e:	f7ff ff83 	bl	8006588 <MX_SPI2_Init>
  MX_DMA_Init();
 8006682:	f7ff fef5 	bl	8006470 <MX_DMA_Init>
  for (uint32_t w = 0;w<5000;w++)
 8006686:	2400      	movs	r4, #0
 8006688:	e003      	b.n	8006692 <main+0x42>
      print_no_newline(" ");
 800668a:	48a9      	ldr	r0, [pc, #676]	; (8006930 <main+0x2e0>)
 800668c:	f001 f80e 	bl	80076ac <print_no_newline>
  for (uint32_t w = 0;w<5000;w++)
 8006690:	3401      	adds	r4, #1
 8006692:	f241 3387 	movw	r3, #4999	; 0x1387
 8006696:	429c      	cmp	r4, r3
 8006698:	d9f7      	bls.n	800668a <main+0x3a>
  print("");
 800669a:	4ca6      	ldr	r4, [pc, #664]	; (8006934 <main+0x2e4>)
 800669c:	4620      	mov	r0, r4
 800669e:	f000 ff6f 	bl	8007580 <print>
  print("-------------");
 80066a2:	4da5      	ldr	r5, [pc, #660]	; (8006938 <main+0x2e8>)
 80066a4:	4628      	mov	r0, r5
 80066a6:	f000 ff6b 	bl	8007580 <print>
  print("%s V%d.%d",PROG_NAME,VERSION_MAJOR,VERSION_MINOR);
 80066aa:	2301      	movs	r3, #1
 80066ac:	461a      	mov	r2, r3
 80066ae:	49a3      	ldr	r1, [pc, #652]	; (800693c <main+0x2ec>)
 80066b0:	48a3      	ldr	r0, [pc, #652]	; (8006940 <main+0x2f0>)
 80066b2:	f000 ff65 	bl	8007580 <print>
  print("-------------");
 80066b6:	4628      	mov	r0, r5
 80066b8:	f000 ff62 	bl	8007580 <print>
  print("");
 80066bc:	4620      	mov	r0, r4
 80066be:	f000 ff5f 	bl	8007580 <print>
 if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == SET)
 80066c2:	4ba0      	ldr	r3, [pc, #640]	; (8006944 <main+0x2f4>)
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 dmx512_init(get_mode_from_pins(),get_addr_from_pins()*2);  //Address x2 so we can spread out the 8 Jumpers over 512 Addresses
 80066c6:	f7ff fba1 	bl	8005e0c <get_mode_from_pins>
 80066ca:	4604      	mov	r4, r0
 80066cc:	f7ff fbb4 	bl	8005e38 <get_addr_from_pins>
 80066d0:	0041      	lsls	r1, r0, #1
 80066d2:	4620      	mov	r0, r4
 80066d4:	f7fe ffae 	bl	8005634 <dmx512_init>
 print("DMX512 Config complete");
 80066d8:	489b      	ldr	r0, [pc, #620]	; (8006948 <main+0x2f8>)
 80066da:	f000 ff51 	bl	8007580 <print>
 if ((get_mode_from_pins() & 0x02) != 0)
 80066de:	f7ff fb95 	bl	8005e0c <get_mode_from_pins>
 80066e2:	f010 0f02 	tst.w	r0, #2
 80066e6:	f000 809a 	beq.w	800681e <main+0x1ce>
	 USB_Active = 1;
 80066ea:	4b98      	ldr	r3, [pc, #608]	; (800694c <main+0x2fc>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	701a      	strb	r2, [r3, #0]
	 MX_USB_DEVICE_Init();
 80066f0:	f001 fe08 	bl	8008304 <MX_USB_DEVICE_Init>
	 print("USB Enabled");
 80066f4:	4896      	ldr	r0, [pc, #600]	; (8006950 <main+0x300>)
 80066f6:	f000 ff43 	bl	8007580 <print>
 if(ring_buffer_init(&rx_buff_shell, RX_BUFF_SIZE) != RB_OK)
 80066fa:	2180      	movs	r1, #128	; 0x80
 80066fc:	4895      	ldr	r0, [pc, #596]	; (8006954 <main+0x304>)
 80066fe:	f000 fa69 	bl	8006bd4 <ring_buffer_init>
 8006702:	2800      	cmp	r0, #0
 8006704:	f000 808f 	beq.w	8006826 <main+0x1d6>
	 print("Shell Ring Buffer Init FAILED");
 8006708:	4893      	ldr	r0, [pc, #588]	; (8006958 <main+0x308>)
 800670a:	f000 ff39 	bl	8007580 <print>
 if(ring_buffer_init(&rx_buff_dmx, RX_BUFF_SIZE) != RB_OK)
 800670e:	2180      	movs	r1, #128	; 0x80
 8006710:	4892      	ldr	r0, [pc, #584]	; (800695c <main+0x30c>)
 8006712:	f000 fa5f 	bl	8006bd4 <ring_buffer_init>
 8006716:	2800      	cmp	r0, #0
 8006718:	f000 8089 	beq.w	800682e <main+0x1de>
	 print("Serial DMX Ring Buffer Init FAILED");
 800671c:	4890      	ldr	r0, [pc, #576]	; (8006960 <main+0x310>)
 800671e:	f000 ff2f 	bl	8007580 <print>
 dmx512_rec_init();
 8006722:	f7ff f8c9 	bl	80058b8 <dmx512_rec_init>
 print("DMX512 Init complete");
 8006726:	488f      	ldr	r0, [pc, #572]	; (8006964 <main+0x314>)
 8006728:	f000 ff2a 	bl	8007580 <print>
  init_timers();
 800672c:	f000 fa02 	bl	8006b34 <init_timers>
  print("Timer Init complete");
 8006730:	488d      	ldr	r0, [pc, #564]	; (8006968 <main+0x318>)
 8006732:	f000 ff25 	bl	8007580 <print>
  init_settings();
 8006736:	f000 fbbf 	bl	8006eb8 <init_settings>
  print("Default Settings Initialized");
 800673a:	488c      	ldr	r0, [pc, #560]	; (800696c <main+0x31c>)
 800673c:	f000 ff20 	bl	8007580 <print>
  print("Loading Settings...");
 8006740:	488b      	ldr	r0, [pc, #556]	; (8006970 <main+0x320>)
 8006742:	f000 ff1d 	bl	8007580 <print>
  if (0 == check_button())
 8006746:	f7ff fbbd 	bl	8005ec4 <check_button>
 800674a:	2800      	cmp	r0, #0
 800674c:	d173      	bne.n	8006836 <main+0x1e6>
	  if (false == load_settings())
 800674e:	f000 fc6b 	bl	8007028 <load_settings>
 8006752:	b940      	cbnz	r0, 8006766 <main+0x116>
		  init_settings();
 8006754:	f000 fbb0 	bl	8006eb8 <init_settings>
		  recalcGamma();
 8006758:	f7ff fab4 	bl	8005cc4 <recalcGamma>
		  save_settings();
 800675c:	f000 fc90 	bl	8007080 <save_settings>
		  print("Defaults created");
 8006760:	4884      	ldr	r0, [pc, #528]	; (8006974 <main+0x324>)
 8006762:	f000 ff0d 	bl	8007580 <print>
	  UART_mode_SERIAL = settings.UART_Mode_UART;
 8006766:	4b84      	ldr	r3, [pc, #528]	; (8006978 <main+0x328>)
 8006768:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 800676c:	4a83      	ldr	r2, [pc, #524]	; (800697c <main+0x32c>)
 800676e:	7011      	strb	r1, [r2, #0]
	  UART_mode_USB = settings.UART_Mode_USB;
 8006770:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8006774:	4b82      	ldr	r3, [pc, #520]	; (8006980 <main+0x330>)
 8006776:	701a      	strb	r2, [r3, #0]
	  print("Setting loaded");
 8006778:	4882      	ldr	r0, [pc, #520]	; (8006984 <main+0x334>)
 800677a:	f000 ff01 	bl	8007580 <print>
  apply_settings();
 800677e:	f000 fbd5 	bl	8006f2c <apply_settings>
  print("Settings complete");
 8006782:	4881      	ldr	r0, [pc, #516]	; (8006988 <main+0x338>)
 8006784:	f000 fefc 	bl	8007580 <print>
  if (DMX_MODE2 == get_mode())
 8006788:	f7fe ff2c 	bl	80055e4 <get_mode>
 800678c:	2801      	cmp	r0, #1
 800678e:	d162      	bne.n	8006856 <main+0x206>
	  print("FX Installation Start");
 8006790:	487e      	ldr	r0, [pc, #504]	; (800698c <main+0x33c>)
 8006792:	f000 fef5 	bl	8007580 <print>
	  init_fx_list();
 8006796:	f7ff f915 	bl	80059c4 <init_fx_list>
	  install_fx();
 800679a:	f7ff f965 	bl	8005a68 <install_fx>
	  print("FX Installation Finished");
 800679e:	487c      	ldr	r0, [pc, #496]	; (8006990 <main+0x340>)
 80067a0:	f000 feee 	bl	8007580 <print>
     if (WS2812B_init(CH1,settings.strip1_length))
 80067a4:	4b74      	ldr	r3, [pc, #464]	; (8006978 <main+0x328>)
 80067a6:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 80067a8:	2000      	movs	r0, #0
 80067aa:	f002 fe37 	bl	800941c <WS2812B_init>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d049      	beq.n	8006846 <main+0x1f6>
	   print("WS2812B CH1 Init complete");
 80067b2:	4878      	ldr	r0, [pc, #480]	; (8006994 <main+0x344>)
 80067b4:	f000 fee4 	bl	8007580 <print>
	   WS2812B_clear(CH1);
 80067b8:	2000      	movs	r0, #0
 80067ba:	f002 fe0f 	bl	80093dc <WS2812B_clear>
	   WS2812B_show(CH1);
 80067be:	2000      	movs	r0, #0
 80067c0:	f002 fd68 	bl	8009294 <WS2812B_show>
     if (WS2812B_init(CH2,settings.strip1_length))
 80067c4:	4b6c      	ldr	r3, [pc, #432]	; (8006978 <main+0x328>)
 80067c6:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 80067c8:	2001      	movs	r0, #1
 80067ca:	f002 fe27 	bl	800941c <WS2812B_init>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d03d      	beq.n	800684e <main+0x1fe>
	   print("WS2812B CH2 Init complete");
 80067d2:	4871      	ldr	r0, [pc, #452]	; (8006998 <main+0x348>)
 80067d4:	f000 fed4 	bl	8007580 <print>
	   WS2812B_clear(CH2);
 80067d8:	2001      	movs	r0, #1
 80067da:	f002 fdff 	bl	80093dc <WS2812B_clear>
	   WS2812B_show(CH2);
 80067de:	2001      	movs	r0, #1
 80067e0:	f002 fd58 	bl	8009294 <WS2812B_show>
     print("DMX Mode 2 Active");
 80067e4:	486d      	ldr	r0, [pc, #436]	; (800699c <main+0x34c>)
 80067e6:	f000 fecb 	bl	8007580 <print>
  init_update_lights();
 80067ea:	f7ff fd19 	bl	8006220 <init_update_lights>
  print("PWM Update Init complete");
 80067ee:	486c      	ldr	r0, [pc, #432]	; (80069a0 <main+0x350>)
 80067f0:	f000 fec6 	bl	8007580 <print>
  init_trigger();
 80067f4:	f001 fccc 	bl	8008190 <init_trigger>
  print("Trigger Init complete");
 80067f8:	486a      	ldr	r0, [pc, #424]	; (80069a4 <main+0x354>)
 80067fa:	f000 fec1 	bl	8007580 <print>
  print("Shell Active");
 80067fe:	486a      	ldr	r0, [pc, #424]	; (80069a8 <main+0x358>)
 8006800:	f000 febe 	bl	8007580 <print>
  print_no_newline("DBG>");
 8006804:	4869      	ldr	r0, [pc, #420]	; (80069ac <main+0x35c>)
 8006806:	f000 ff51 	bl	80076ac <print_no_newline>
  last_frame_ms = HAL_GetTick();
 800680a:	f7fa fceb 	bl	80011e4 <HAL_GetTick>
 800680e:	4605      	mov	r5, r0
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8006810:	2201      	movs	r2, #1
 8006812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006816:	4845      	ldr	r0, [pc, #276]	; (800692c <main+0x2dc>)
 8006818:	f7fb fbb3 	bl	8001f82 <HAL_GPIO_WritePin>
 800681c:	e04d      	b.n	80068ba <main+0x26a>
	 print("USB Disabled");
 800681e:	4864      	ldr	r0, [pc, #400]	; (80069b0 <main+0x360>)
 8006820:	f000 feae 	bl	8007580 <print>
 8006824:	e769      	b.n	80066fa <main+0xaa>
	 print("Shell Ring Buffer Init Complete");
 8006826:	4863      	ldr	r0, [pc, #396]	; (80069b4 <main+0x364>)
 8006828:	f000 feaa 	bl	8007580 <print>
 800682c:	e76f      	b.n	800670e <main+0xbe>
	 print("Serial DMX Ring Buffer Init Complete");
 800682e:	4862      	ldr	r0, [pc, #392]	; (80069b8 <main+0x368>)
 8006830:	f000 fea6 	bl	8007580 <print>
 8006834:	e775      	b.n	8006722 <main+0xd2>
	  recalcGamma();
 8006836:	f7ff fa45 	bl	8005cc4 <recalcGamma>
	  save_settings();
 800683a:	f000 fc21 	bl	8007080 <save_settings>
	  print("Defaults restored");
 800683e:	485f      	ldr	r0, [pc, #380]	; (80069bc <main+0x36c>)
 8006840:	f000 fe9e 	bl	8007580 <print>
 8006844:	e79b      	b.n	800677e <main+0x12e>
	   print("WS2812B CH1 Init FAILED");
 8006846:	485e      	ldr	r0, [pc, #376]	; (80069c0 <main+0x370>)
 8006848:	f000 fe9a 	bl	8007580 <print>
 800684c:	e7ba      	b.n	80067c4 <main+0x174>
	   print("WS2812B CH2 Init FAILED");
 800684e:	485d      	ldr	r0, [pc, #372]	; (80069c4 <main+0x374>)
 8006850:	f000 fe96 	bl	8007580 <print>
 8006854:	e7c6      	b.n	80067e4 <main+0x194>
	  print("DMX Mode 1 Active");
 8006856:	485c      	ldr	r0, [pc, #368]	; (80069c8 <main+0x378>)
 8006858:	f000 fe92 	bl	8007580 <print>
 800685c:	e7c5      	b.n	80067ea <main+0x19a>
			shell_process();
 800685e:	f000 ff3f 	bl	80076e0 <shell_process>
			dmx_serial_process();
 8006862:	f000 fa59 	bl	8006d18 <dmx_serial_process>
			current_frame_ms = HAL_GetTick();
 8006866:	f7fa fcbd 	bl	80011e4 <HAL_GetTick>
 800686a:	4604      	mov	r4, r0
		while ((current_frame_ms - last_frame_ms) < settings.frame_ms_target)
 800686c:	1b63      	subs	r3, r4, r5
 800686e:	4a42      	ldr	r2, [pc, #264]	; (8006978 <main+0x328>)
 8006870:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006872:	4293      	cmp	r3, r2
 8006874:	d3f3      	bcc.n	800685e <main+0x20e>
 8006876:	e02b      	b.n	80068d0 <main+0x280>
			if (DMX_MODE2 == get_mode())
 8006878:	f7fe feb4 	bl	80055e4 <get_mode>
 800687c:	2801      	cmp	r0, #1
 800687e:	d11b      	bne.n	80068b8 <main+0x268>
				WS2812B_test(CH1);
 8006880:	2000      	movs	r0, #0
 8006882:	f002 fec5 	bl	8009610 <WS2812B_test>
				WS2812B_show(CH1);
 8006886:	2000      	movs	r0, #0
 8006888:	f002 fd04 	bl	8009294 <WS2812B_show>
				WS2812B_test(CH2);
 800688c:	2001      	movs	r0, #1
 800688e:	f002 febf 	bl	8009610 <WS2812B_test>
				WS2812B_show(CH2);
 8006892:	2001      	movs	r0, #1
 8006894:	f002 fcfe 	bl	8009294 <WS2812B_show>
 8006898:	e00e      	b.n	80068b8 <main+0x268>
		if (1 == check_button())
 800689a:	f7ff fb13 	bl	8005ec4 <check_button>
 800689e:	2801      	cmp	r0, #1
 80068a0:	d037      	beq.n	8006912 <main+0x2c2>
		process_trigger();
 80068a2:	f001 fc95 	bl	80081d0 <process_trigger>
		if (DMX_MODE2 == get_mode())
 80068a6:	f7fe fe9d 	bl	80055e4 <get_mode>
 80068aa:	2801      	cmp	r0, #1
 80068ac:	d035      	beq.n	800691a <main+0x2ca>
		update_pwm_lights(0);
 80068ae:	2000      	movs	r0, #0
 80068b0:	f7ff fb5a 	bl	8005f68 <update_pwm_lights>
		update_fx();
 80068b4:	f7ff fcd2 	bl	800625c <update_fx>
  for (uint32_t w = 0;w<5000;w++)
 80068b8:	4625      	mov	r5, r4
	shell_process();
 80068ba:	f000 ff11 	bl	80076e0 <shell_process>
	dmx_serial_process();
 80068be:	f000 fa2b 	bl	8006d18 <dmx_serial_process>
	current_frame_ms = HAL_GetTick();
 80068c2:	f7fa fc8f 	bl	80011e4 <HAL_GetTick>
 80068c6:	4604      	mov	r4, r0
	if (settings.frame_ms_target > 0)
 80068c8:	4b2b      	ldr	r3, [pc, #172]	; (8006978 <main+0x328>)
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1cd      	bne.n	800686c <main+0x21c>
	frame_ms = current_frame_ms - last_frame_ms;
 80068d0:	1b65      	subs	r5, r4, r5
 80068d2:	4b3e      	ldr	r3, [pc, #248]	; (80069cc <main+0x37c>)
 80068d4:	601d      	str	r5, [r3, #0]
	if (testmode)
 80068d6:	4b3e      	ldr	r3, [pc, #248]	; (80069d0 <main+0x380>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0dd      	beq.n	800689a <main+0x24a>
		testmode = process_testmode();
 80068de:	f001 fba3 	bl	8008028 <process_testmode>
 80068e2:	4b3b      	ldr	r3, [pc, #236]	; (80069d0 <main+0x380>)
 80068e4:	7018      	strb	r0, [r3, #0]
		if (testmode == 0)
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d1c6      	bne.n	8006878 <main+0x228>
			update_pwm_lights(1);
 80068ea:	2001      	movs	r0, #1
 80068ec:	f7ff fb3c 	bl	8005f68 <update_pwm_lights>
			if (DMX_MODE2 == get_mode())
 80068f0:	f7fe fe78 	bl	80055e4 <get_mode>
 80068f4:	2801      	cmp	r0, #1
 80068f6:	d1df      	bne.n	80068b8 <main+0x268>
				WS2812B_clear(CH1);
 80068f8:	2000      	movs	r0, #0
 80068fa:	f002 fd6f 	bl	80093dc <WS2812B_clear>
				WS2812B_show(CH1);
 80068fe:	2000      	movs	r0, #0
 8006900:	f002 fcc8 	bl	8009294 <WS2812B_show>
				WS2812B_clear(CH2);
 8006904:	2001      	movs	r0, #1
 8006906:	f002 fd69 	bl	80093dc <WS2812B_clear>
				WS2812B_show(CH2);
 800690a:	2001      	movs	r0, #1
 800690c:	f002 fcc2 	bl	8009294 <WS2812B_show>
 8006910:	e7d2      	b.n	80068b8 <main+0x268>
			testmode = 1;
 8006912:	4b2f      	ldr	r3, [pc, #188]	; (80069d0 <main+0x380>)
 8006914:	2201      	movs	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	e7c3      	b.n	80068a2 <main+0x252>
			run_fx();
 800691a:	f7ff f93d 	bl	8005b98 <run_fx>
			WS2812B_show(CH1);
 800691e:	2000      	movs	r0, #0
 8006920:	f002 fcb8 	bl	8009294 <WS2812B_show>
			WS2812B_show(CH2);
 8006924:	2001      	movs	r0, #1
 8006926:	f002 fcb5 	bl	8009294 <WS2812B_show>
 800692a:	e7c0      	b.n	80068ae <main+0x25e>
 800692c:	40011000 	.word	0x40011000
 8006930:	0800c3bc 	.word	0x0800c3bc
 8006934:	0800cfb8 	.word	0x0800cfb8
 8006938:	0800c3c0 	.word	0x0800c3c0
 800693c:	0800c3d0 	.word	0x0800c3d0
 8006940:	0800c3dc 	.word	0x0800c3dc
 8006944:	40021000 	.word	0x40021000
 8006948:	0800c3e8 	.word	0x0800c3e8
 800694c:	20000432 	.word	0x20000432
 8006950:	0800c400 	.word	0x0800c400
 8006954:	200009e0 	.word	0x200009e0
 8006958:	0800c41c 	.word	0x0800c41c
 800695c:	200009c8 	.word	0x200009c8
 8006960:	0800c45c 	.word	0x0800c45c
 8006964:	0800c4a8 	.word	0x0800c4a8
 8006968:	0800c4c0 	.word	0x0800c4c0
 800696c:	0800c4d4 	.word	0x0800c4d4
 8006970:	0800c4f4 	.word	0x0800c4f4
 8006974:	0800c508 	.word	0x0800c508
 8006978:	20000af8 	.word	0x20000af8
 800697c:	20000430 	.word	0x20000430
 8006980:	20000431 	.word	0x20000431
 8006984:	0800c51c 	.word	0x0800c51c
 8006988:	0800c540 	.word	0x0800c540
 800698c:	0800c554 	.word	0x0800c554
 8006990:	0800c56c 	.word	0x0800c56c
 8006994:	0800c588 	.word	0x0800c588
 8006998:	0800c5bc 	.word	0x0800c5bc
 800699c:	0800c5f0 	.word	0x0800c5f0
 80069a0:	0800c618 	.word	0x0800c618
 80069a4:	0800c634 	.word	0x0800c634
 80069a8:	0800c64c 	.word	0x0800c64c
 80069ac:	0800c65c 	.word	0x0800c65c
 80069b0:	0800c40c 	.word	0x0800c40c
 80069b4:	0800c43c 	.word	0x0800c43c
 80069b8:	0800c480 	.word	0x0800c480
 80069bc:	0800c52c 	.word	0x0800c52c
 80069c0:	0800c5a4 	.word	0x0800c5a4
 80069c4:	0800c5d8 	.word	0x0800c5d8
 80069c8:	0800c604 	.word	0x0800c604
 80069cc:	20000cc8 	.word	0x20000cc8
 80069d0:	20000433 	.word	0x20000433

080069d4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80069d4:	4770      	bx	lr
	...

080069d8 <PWM_Timer_Init>:
	PWM_Timer_Init(PWM_CH2);
	PWM_Timer_Init(PWM_CH3);
}

void PWM_Timer_Init(pwmtimerid_t ID)
{
 80069d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069dc:	b08e      	sub	sp, #56	; 0x38
 80069de:	4605      	mov	r5, r0

	  TIM_MasterConfigTypeDef sMasterConfig;
	  TIM_OC_InitTypeDef sConfigOC;
	  TIM_ClockConfigTypeDef sClockSourceConfig;

	  memset(&sConfigOC, 0, sizeof(sConfigOC));
 80069e0:	2300      	movs	r3, #0
 80069e2:	9305      	str	r3, [sp, #20]
 80069e4:	9306      	str	r3, [sp, #24]
 80069e6:	9307      	str	r3, [sp, #28]
 80069e8:	9308      	str	r3, [sp, #32]
 80069ea:	9309      	str	r3, [sp, #36]	; 0x24
 80069ec:	930a      	str	r3, [sp, #40]	; 0x28
 80069ee:	930b      	str	r3, [sp, #44]	; 0x2c
	  memset(&sMasterConfig, 0, sizeof(sMasterConfig));
 80069f0:	930c      	str	r3, [sp, #48]	; 0x30
 80069f2:	930d      	str	r3, [sp, #52]	; 0x34
	  memset(&sClockSourceConfig, 0, sizeof(sClockSourceConfig));
 80069f4:	9301      	str	r3, [sp, #4]
 80069f6:	9302      	str	r3, [sp, #8]
 80069f8:	9303      	str	r3, [sp, #12]
 80069fa:	9304      	str	r3, [sp, #16]

	  switch(ID)
 80069fc:	4606      	mov	r6, r0
 80069fe:	2801      	cmp	r0, #1
 8006a00:	d037      	beq.n	8006a72 <PWM_Timer_Init+0x9a>
 8006a02:	b380      	cbz	r0, 8006a66 <PWM_Timer_Init+0x8e>
 8006a04:	2802      	cmp	r0, #2
 8006a06:	d039      	beq.n	8006a7c <PWM_Timer_Init+0xa4>
	  	  case PWM_CH3:
	  		timerinfo[ID].Instance = TIM3;
		  break;
	  }

	  timerinfo[(uint8_t)ID].Init.Prescaler = 0;
 8006a08:	4b41      	ldr	r3, [pc, #260]	; (8006b10 <PWM_Timer_Init+0x138>)
 8006a0a:	eb03 1885 	add.w	r8, r3, r5, lsl #6
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f8c8 3004 	str.w	r3, [r8, #4]
	  timerinfo[(uint8_t)ID].Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a14:	f8c8 3008 	str.w	r3, [r8, #8]
	  timerinfo[(uint8_t)ID].Init.Period = 1066; //TBD....
 8006a18:	f240 422a 	movw	r2, #1066	; 0x42a
 8006a1c:	f8c8 200c 	str.w	r2, [r8, #12]
	  timerinfo[(uint8_t)ID].Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a20:	f8c8 3010 	str.w	r3, [r8, #16]
	  timerinfo[(uint8_t)ID].Init.RepetitionCounter = 0;
 8006a24:	f8c8 3014 	str.w	r3, [r8, #20]
	  if (HAL_TIM_Base_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)/* to use the Timer to generate a simple time base for TIM1 */
 8006a28:	4647      	mov	r7, r8
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	f7fc fdd8 	bl	80035e0 <HAL_TIM_Base_Init>
 8006a30:	bb48      	cbnz	r0, 8006a86 <PWM_Timer_Init+0xae>
	  {
		  print("Timer Init Error 1");
	  }

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;//the default clock is the internal clock from the APBx, using this function
 8006a32:	a90e      	add	r1, sp, #56	; 0x38
 8006a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a38:	f841 3d34 	str.w	r3, [r1, #-52]!
	  if (HAL_TIM_ConfigClockSource(&timerinfo[(uint8_t)ID], &sClockSourceConfig) != HAL_OK)//Initializes the TIM PWM Time Base according to the specified
 8006a3c:	4640      	mov	r0, r8
 8006a3e:	f7fc feac 	bl	800379a <HAL_TIM_ConfigClockSource>
 8006a42:	bb20      	cbnz	r0, 8006a8e <PWM_Timer_Init+0xb6>
	   {
		  print("Timer Init Error 2");
	   }


	  if (HAL_TIM_PWM_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)
 8006a44:	4640      	mov	r0, r8
 8006a46:	f7fc fde4 	bl	8003612 <HAL_TIM_PWM_Init>
 8006a4a:	bb20      	cbnz	r0, 8006a96 <PWM_Timer_Init+0xbe>
	  {
		  print("Timer Init Error 3");
	  }


	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a4c:	2360      	movs	r3, #96	; 0x60
 8006a4e:	9305      	str	r3, [sp, #20]
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
	  sConfigOC.Pulse = MAX_PWM/2; /* 50% duty cycle is 538, set to 0 initially*///
 8006a50:	f240 231a 	movw	r3, #538	; 0x21a
 8006a54:	9306      	str	r3, [sp, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a56:	2400      	movs	r4, #0
 8006a58:	9407      	str	r4, [sp, #28]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006a5a:	9408      	str	r4, [sp, #32]
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8006a5c:	2304      	movs	r3, #4
 8006a5e:	9309      	str	r3, [sp, #36]	; 0x24
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006a60:	940a      	str	r4, [sp, #40]	; 0x28
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006a62:	940b      	str	r4, [sp, #44]	; 0x2c

	  for (int ii=0;ii<4;ii++)
 8006a64:	e01c      	b.n	8006aa0 <PWM_Timer_Init+0xc8>
	  		timerinfo[ID].Instance = TIM2;
 8006a66:	0183      	lsls	r3, r0, #6
 8006a68:	4a29      	ldr	r2, [pc, #164]	; (8006b10 <PWM_Timer_Init+0x138>)
 8006a6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006a6e:	50d1      	str	r1, [r2, r3]
		  break;
 8006a70:	e7ca      	b.n	8006a08 <PWM_Timer_Init+0x30>
	  		timerinfo[ID].Instance = TIM1;
 8006a72:	0183      	lsls	r3, r0, #6
 8006a74:	4a26      	ldr	r2, [pc, #152]	; (8006b10 <PWM_Timer_Init+0x138>)
 8006a76:	4927      	ldr	r1, [pc, #156]	; (8006b14 <PWM_Timer_Init+0x13c>)
 8006a78:	50d1      	str	r1, [r2, r3]
		  break;
 8006a7a:	e7c5      	b.n	8006a08 <PWM_Timer_Init+0x30>
	  		timerinfo[ID].Instance = TIM3;
 8006a7c:	0183      	lsls	r3, r0, #6
 8006a7e:	4a24      	ldr	r2, [pc, #144]	; (8006b10 <PWM_Timer_Init+0x138>)
 8006a80:	4925      	ldr	r1, [pc, #148]	; (8006b18 <PWM_Timer_Init+0x140>)
 8006a82:	50d1      	str	r1, [r2, r3]
		  break;
 8006a84:	e7c0      	b.n	8006a08 <PWM_Timer_Init+0x30>
		  print("Timer Init Error 1");
 8006a86:	4825      	ldr	r0, [pc, #148]	; (8006b1c <PWM_Timer_Init+0x144>)
 8006a88:	f000 fd7a 	bl	8007580 <print>
 8006a8c:	e7d1      	b.n	8006a32 <PWM_Timer_Init+0x5a>
		  print("Timer Init Error 2");
 8006a8e:	4824      	ldr	r0, [pc, #144]	; (8006b20 <PWM_Timer_Init+0x148>)
 8006a90:	f000 fd76 	bl	8007580 <print>
 8006a94:	e7d6      	b.n	8006a44 <PWM_Timer_Init+0x6c>
		  print("Timer Init Error 3");
 8006a96:	4823      	ldr	r0, [pc, #140]	; (8006b24 <PWM_Timer_Init+0x14c>)
 8006a98:	f000 fd72 	bl	8007580 <print>
 8006a9c:	e7d6      	b.n	8006a4c <PWM_Timer_Init+0x74>
	  for (int ii=0;ii<4;ii++)
 8006a9e:	3401      	adds	r4, #1
 8006aa0:	2c03      	cmp	r4, #3
 8006aa2:	dc15      	bgt.n	8006ad0 <PWM_Timer_Init+0xf8>
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 8006aa4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006aa8:	4a1f      	ldr	r2, [pc, #124]	; (8006b28 <PWM_Timer_Init+0x150>)
 8006aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aae:	2bff      	cmp	r3, #255	; 0xff
 8006ab0:	d0f5      	beq.n	8006a9e <PWM_Timer_Init+0xc6>
		  {
			  if (HAL_OK != HAL_TIM_PWM_ConfigChannel(&timerinfo[(uint8_t)ID], &sConfigOC, channelinfo[(int8_t)ID][ii]))
 8006ab2:	b26b      	sxtb	r3, r5
 8006ab4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ab8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006abc:	a905      	add	r1, sp, #20
 8006abe:	4638      	mov	r0, r7
 8006ac0:	f7fc fdf2 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d0ea      	beq.n	8006a9e <PWM_Timer_Init+0xc6>
			  {
				  print("Timer Init Error 4");
 8006ac8:	4818      	ldr	r0, [pc, #96]	; (8006b2c <PWM_Timer_Init+0x154>)
 8006aca:	f000 fd59 	bl	8007580 <print>
 8006ace:	e7e6      	b.n	8006a9e <PWM_Timer_Init+0xc6>

		  }
	  }

	 // HAL_TIM_MspPostInit(&timerinfo[(uint8_t)ID]);//output pin assignment
	  HAL_TIM_Base_Start(&timerinfo[(uint8_t)ID]); //Starts the TIM Base generation
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	f7fc fd37 	bl	8003544 <HAL_TIM_Base_Start>

	  for (int ii=0;ii<4;ii++)
 8006ad6:	2400      	movs	r4, #0
 8006ad8:	e000      	b.n	8006adc <PWM_Timer_Init+0x104>
 8006ada:	3401      	adds	r4, #1
 8006adc:	2c03      	cmp	r4, #3
 8006ade:	dc14      	bgt.n	8006b0a <PWM_Timer_Init+0x132>
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 8006ae0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006ae4:	4a10      	ldr	r2, [pc, #64]	; (8006b28 <PWM_Timer_Init+0x150>)
 8006ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aea:	2bff      	cmp	r3, #255	; 0xff
 8006aec:	d0f5      	beq.n	8006ada <PWM_Timer_Init+0x102>
		  {
			  if (HAL_OK != HAL_TIM_PWM_Start(&timerinfo[(uint8_t)ID], channelinfo[(int8_t)ID][ii]))
 8006aee:	b26b      	sxtb	r3, r5
 8006af0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006af4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006af8:	4638      	mov	r0, r7
 8006afa:	f7fc fecb 	bl	8003894 <HAL_TIM_PWM_Start>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d0eb      	beq.n	8006ada <PWM_Timer_Init+0x102>
			  {
				  print("Timer Init Error 5");
 8006b02:	480b      	ldr	r0, [pc, #44]	; (8006b30 <PWM_Timer_Init+0x158>)
 8006b04:	f000 fd3c 	bl	8007580 <print>
 8006b08:	e7e7      	b.n	8006ada <PWM_Timer_Init+0x102>
			  }

		  }
	  }
}
 8006b0a:	b00e      	add	sp, #56	; 0x38
 8006b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b10:	20000dac 	.word	0x20000dac
 8006b14:	40012c00 	.word	0x40012c00
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	0800c664 	.word	0x0800c664
 8006b20:	0800c678 	.word	0x0800c678
 8006b24:	0800c68c 	.word	0x0800c68c
 8006b28:	0800c6c8 	.word	0x0800c6c8
 8006b2c:	0800c6a0 	.word	0x0800c6a0
 8006b30:	0800c6b4 	.word	0x0800c6b4

08006b34 <init_timers>:
{
 8006b34:	b500      	push	{lr}
 8006b36:	b085      	sub	sp, #20
	__HAL_RCC_TIM1_CLK_ENABLE();
 8006b38:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <init_timers+0x54>)
 8006b3a:	699a      	ldr	r2, [r3, #24]
 8006b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b40:	619a      	str	r2, [r3, #24]
 8006b42:	699a      	ldr	r2, [r3, #24]
 8006b44:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006b48:	9201      	str	r2, [sp, #4]
 8006b4a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8006b4c:	69da      	ldr	r2, [r3, #28]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	61da      	str	r2, [r3, #28]
 8006b54:	69da      	ldr	r2, [r3, #28]
 8006b56:	f002 0201 	and.w	r2, r2, #1
 8006b5a:	9202      	str	r2, [sp, #8]
 8006b5c:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_TIM3_CLK_ENABLE();
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	f042 0202 	orr.w	r2, r2, #2
 8006b64:	61da      	str	r2, [r3, #28]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	9303      	str	r3, [sp, #12]
 8006b6e:	9b03      	ldr	r3, [sp, #12]
	PWM_Timer_Init(PWM_CH1);
 8006b70:	2000      	movs	r0, #0
 8006b72:	f7ff ff31 	bl	80069d8 <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH2);
 8006b76:	2001      	movs	r0, #1
 8006b78:	f7ff ff2e 	bl	80069d8 <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH3);
 8006b7c:	2002      	movs	r0, #2
 8006b7e:	f7ff ff2b 	bl	80069d8 <PWM_Timer_Init>
}
 8006b82:	b005      	add	sp, #20
 8006b84:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b88:	40021000 	.word	0x40021000

08006b8c <configPWM>:


//Setup PWM
void configPWM(pwmtimerid_t ID,pwmchid_t channel, uint16_t duty)
{
	  if (channelinfo[(uint8_t) ID][channel] != 255)
 8006b8c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8006b90:	4b0e      	ldr	r3, [pc, #56]	; (8006bcc <configPWM+0x40>)
 8006b92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b96:	2bff      	cmp	r3, #255	; 0xff
 8006b98:	d008      	beq.n	8006bac <configPWM+0x20>
	  {
	  __HAL_TIM_SET_COMPARE(&timerinfo[ID],  channelinfo[(uint8_t)ID][(uint8_t)channel], duty);
 8006b9a:	b143      	cbz	r3, 8006bae <configPWM+0x22>
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	d00b      	beq.n	8006bb8 <configPWM+0x2c>
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d00e      	beq.n	8006bc2 <configPWM+0x36>
 8006ba4:	0180      	lsls	r0, r0, #6
 8006ba6:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <configPWM+0x44>)
 8006ba8:	581b      	ldr	r3, [r3, r0]
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40
	  }
}
 8006bac:	4770      	bx	lr
	  __HAL_TIM_SET_COMPARE(&timerinfo[ID],  channelinfo[(uint8_t)ID][(uint8_t)channel], duty);
 8006bae:	0180      	lsls	r0, r0, #6
 8006bb0:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <configPWM+0x44>)
 8006bb2:	581b      	ldr	r3, [r3, r0]
 8006bb4:	635a      	str	r2, [r3, #52]	; 0x34
 8006bb6:	4770      	bx	lr
 8006bb8:	0180      	lsls	r0, r0, #6
 8006bba:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <configPWM+0x44>)
 8006bbc:	581b      	ldr	r3, [r3, r0]
 8006bbe:	639a      	str	r2, [r3, #56]	; 0x38
 8006bc0:	4770      	bx	lr
 8006bc2:	0180      	lsls	r0, r0, #6
 8006bc4:	4b02      	ldr	r3, [pc, #8]	; (8006bd0 <configPWM+0x44>)
 8006bc6:	581b      	ldr	r3, [r3, r0]
 8006bc8:	63da      	str	r2, [r3, #60]	; 0x3c
 8006bca:	4770      	bx	lr
 8006bcc:	0800c6c8 	.word	0x0800c6c8
 8006bd0:	20000dac 	.word	0x20000dac

08006bd4 <ring_buffer_init>:
 * @param *rbd - pointer to the ring buffer descriptor
 * @param size - ring buffer size in number of bytes
 * @return RB_ERROR, RB_OK
 */
rb_status_t ring_buffer_init(rb_att_t *rbd, uint32_t size)
{
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	4604      	mov	r4, r0
  rbd->status = RB_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	7503      	strb	r3, [r0, #20]

  if(rbd != NULL) // rbd must not be pointer to nowhere
 8006bdc:	b168      	cbz	r0, 8006bfa <ring_buffer_init+0x26>
 8006bde:	460d      	mov	r5, r1
  {
    rbd->buff = calloc(size, sizeof(uint8_t)); // allocate memory of "size" bytes, set all values to 0.
 8006be0:	4619      	mov	r1, r3
 8006be2:	4628      	mov	r0, r5
 8006be4:	f002 fd5a 	bl	800969c <calloc>
 8006be8:	6020      	str	r0, [r4, #0]
    //rbd->buff = malloc(size * sizeof(uint8_t)); // Use this instead of calloc() if you don't wish to set all values to 0 by default.

    if(rbd->buff != NULL)  // buff must not be pointer to nowhere
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	b12b      	cbz	r3, 8006bfa <ring_buffer_init+0x26>
    {
      rbd->n_elem = size;
 8006bee:	6065      	str	r5, [r4, #4]

      // Initialize the ring buffer internal variables
      rbd->head = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60a3      	str	r3, [r4, #8]
      rbd->tail = 0;
 8006bf4:	60e3      	str	r3, [r4, #12]
      rbd->count = 0;
 8006bf6:	6123      	str	r3, [r4, #16]
      rbd->status = RB_OK;
 8006bf8:	7523      	strb	r3, [r4, #20]
    }
  }

  return rbd->status;
 8006bfa:	7d20      	ldrb	r0, [r4, #20]
}
 8006bfc:	bd38      	pop	{r3, r4, r5, pc}

08006bfe <ring_buffer_free_elements>:
 */
uint32_t ring_buffer_free_elements(rb_att_t *rbd)
{
  uint32_t ret_val = 0;

  if(rbd != NULL)  // rbd must not be a pointer to nowhere
 8006bfe:	4603      	mov	r3, r0
 8006c00:	b118      	cbz	r0, 8006c0a <ring_buffer_free_elements+0xc>
  {
   ret_val = rbd->n_elem - rbd->count;
 8006c02:	6840      	ldr	r0, [r0, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	1ac0      	subs	r0, r0, r3
 8006c08:	4770      	bx	lr
  uint32_t ret_val = 0;
 8006c0a:	2000      	movs	r0, #0
  }
  return ret_val;
}
 8006c0c:	4770      	bx	lr

08006c0e <ring_buffer_put>:
{
 8006c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(rbd != NULL)  // rbd must not be a pointer to nowhere
 8006c12:	4604      	mov	r4, r0
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d034      	beq.n	8006c82 <ring_buffer_put+0x74>
 8006c18:	460f      	mov	r7, r1
 8006c1a:	4615      	mov	r5, r2
    if(ring_buffer_free_elements(rbd) >= num)  // is there enough space in buffer for num of data
 8006c1c:	f7ff ffef 	bl	8006bfe <ring_buffer_free_elements>
 8006c20:	42a8      	cmp	r0, r5
 8006c22:	d332      	bcc.n	8006c8a <ring_buffer_put+0x7c>
    	if(rbd->head >= rbd->n_elem) // reset ring buffer head
 8006c24:	68a2      	ldr	r2, [r4, #8]
 8006c26:	6863      	ldr	r3, [r4, #4]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d301      	bcc.n	8006c30 <ring_buffer_put+0x22>
          rbd->head = 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	60a3      	str	r3, [r4, #8]
      num_to_end = rbd->n_elem - rbd->head; // that many data can be written into buffer, before reaching buffer last element
 8006c30:	6866      	ldr	r6, [r4, #4]
 8006c32:	68a3      	ldr	r3, [r4, #8]
 8006c34:	1af6      	subs	r6, r6, r3
      if(num_to_end < num) // if there is not enough space for "num" of data before reaching buffer last element
 8006c36:	42b5      	cmp	r5, r6
 8006c38:	d80e      	bhi.n	8006c58 <ring_buffer_put+0x4a>
    	memcpy(&(rbd->buff[rbd->head]), data, num); //write to buffer all num of data in one piece
 8006c3a:	6820      	ldr	r0, [r4, #0]
 8006c3c:	68a3      	ldr	r3, [r4, #8]
 8006c3e:	462a      	mov	r2, r5
 8006c40:	4639      	mov	r1, r7
 8006c42:	4418      	add	r0, r3
 8006c44:	f002 fd6c 	bl	8009720 <memcpy>
        rbd->head = rbd->head + num;  // increment head
 8006c48:	68a3      	ldr	r3, [r4, #8]
 8006c4a:	442b      	add	r3, r5
 8006c4c:	60a3      	str	r3, [r4, #8]
        rbd->count = rbd->count + num; // increment counter for num of data
 8006c4e:	6923      	ldr	r3, [r4, #16]
 8006c50:	441d      	add	r5, r3
 8006c52:	6125      	str	r5, [r4, #16]
      status = RB_OK;
 8006c54:	2000      	movs	r0, #0
 8006c56:	e015      	b.n	8006c84 <ring_buffer_put+0x76>
    	memcpy(&(rbd->buff[rbd->head]), data, num_to_end); //write to buffer partial data
 8006c58:	6820      	ldr	r0, [r4, #0]
 8006c5a:	68a3      	ldr	r3, [r4, #8]
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	4639      	mov	r1, r7
 8006c60:	4418      	add	r0, r3
 8006c62:	f002 fd5d 	bl	8009720 <memcpy>
        memcpy(rbd->buff, (data + num_to_end), (num - num_to_end)); //write to buffer rest of the data, starting with buffer[0]
 8006c66:	6820      	ldr	r0, [r4, #0]
 8006c68:	eba5 0806 	sub.w	r8, r5, r6
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	19b9      	adds	r1, r7, r6
 8006c70:	f002 fd56 	bl	8009720 <memcpy>
        rbd->head = num - num_to_end;  //head
 8006c74:	f8c4 8008 	str.w	r8, [r4, #8]
        rbd->count = rbd->count + num; // increment counter for num of data
 8006c78:	6923      	ldr	r3, [r4, #16]
 8006c7a:	441d      	add	r5, r3
 8006c7c:	6125      	str	r5, [r4, #16]
      status = RB_OK;
 8006c7e:	2000      	movs	r0, #0
 8006c80:	e000      	b.n	8006c84 <ring_buffer_put+0x76>
  rb_status_t status = RB_ERROR;
 8006c82:	2001      	movs	r0, #1
  rbd->status = status;
 8006c84:	7520      	strb	r0, [r4, #20]
}
 8006c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	status = RB_NOT_ENOUGH_SPACE;
 8006c8a:	2004      	movs	r0, #4
 8006c8c:	e7fa      	b.n	8006c84 <ring_buffer_put+0x76>

08006c8e <ring_buffer_size>:
 */
uint32_t ring_buffer_size(rb_att_t *rbd)
{
  uint32_t size = 0;

  if(rbd != NULL)  // rbd must not be a pointer to nowhere
 8006c8e:	b108      	cbz	r0, 8006c94 <ring_buffer_size+0x6>
  {
	  size = rbd->count;
 8006c90:	6900      	ldr	r0, [r0, #16]
 8006c92:	4770      	bx	lr
  uint32_t size = 0;
 8006c94:	2000      	movs	r0, #0
  }
  return size;
}
 8006c96:	4770      	bx	lr

08006c98 <ring_buffer_get>:
{
 8006c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(rbd != NULL)  // rbd must not be a pointer to nowhere
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d034      	beq.n	8006d0c <ring_buffer_get+0x74>
 8006ca2:	460f      	mov	r7, r1
 8006ca4:	4615      	mov	r5, r2
	  if(ring_buffer_size(rbd) >= num) //buffer is not empty and there is at least num of data stored
 8006ca6:	f7ff fff2 	bl	8006c8e <ring_buffer_size>
 8006caa:	42a8      	cmp	r0, r5
 8006cac:	d332      	bcc.n	8006d14 <ring_buffer_get+0x7c>
		  if(rbd->tail >= rbd->n_elem) // reset ring buffer tail
 8006cae:	68e2      	ldr	r2, [r4, #12]
 8006cb0:	6863      	ldr	r3, [r4, #4]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d301      	bcc.n	8006cba <ring_buffer_get+0x22>
			  rbd->tail = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60e3      	str	r3, [r4, #12]
      num_to_end = rbd->n_elem - rbd->tail;
 8006cba:	6866      	ldr	r6, [r4, #4]
 8006cbc:	68e3      	ldr	r3, [r4, #12]
 8006cbe:	1af6      	subs	r6, r6, r3
      if(num >= num_to_end) // is there enough ("num") of data to read before reaching buffer last element
 8006cc0:	42b5      	cmp	r5, r6
 8006cc2:	d20e      	bcs.n	8006ce2 <ring_buffer_get+0x4a>
        memcpy(data, &(rbd->buff[rbd->tail]), num); //read from buffer
 8006cc4:	6821      	ldr	r1, [r4, #0]
 8006cc6:	68e3      	ldr	r3, [r4, #12]
 8006cc8:	462a      	mov	r2, r5
 8006cca:	4419      	add	r1, r3
 8006ccc:	4638      	mov	r0, r7
 8006cce:	f002 fd27 	bl	8009720 <memcpy>
        rbd->tail = rbd->tail + num;  // increment tail
 8006cd2:	68e3      	ldr	r3, [r4, #12]
 8006cd4:	442b      	add	r3, r5
 8006cd6:	60e3      	str	r3, [r4, #12]
        rbd->count = rbd->count - num; // decrement counter for num of data
 8006cd8:	6923      	ldr	r3, [r4, #16]
 8006cda:	1b5d      	subs	r5, r3, r5
 8006cdc:	6125      	str	r5, [r4, #16]
      status = RB_OK;
 8006cde:	2000      	movs	r0, #0
 8006ce0:	e015      	b.n	8006d0e <ring_buffer_get+0x76>
        memcpy(data, &(rbd->buff[rbd->tail]), num_to_end); //read from buffer partial data
 8006ce2:	6821      	ldr	r1, [r4, #0]
 8006ce4:	68e3      	ldr	r3, [r4, #12]
 8006ce6:	4632      	mov	r2, r6
 8006ce8:	4419      	add	r1, r3
 8006cea:	4638      	mov	r0, r7
 8006cec:	f002 fd18 	bl	8009720 <memcpy>
        memcpy(data + num_to_end, rbd->buff, (num - num_to_end)); //read from buffer remaining partial data
 8006cf0:	6821      	ldr	r1, [r4, #0]
 8006cf2:	eba5 0806 	sub.w	r8, r5, r6
 8006cf6:	4642      	mov	r2, r8
 8006cf8:	19b8      	adds	r0, r7, r6
 8006cfa:	f002 fd11 	bl	8009720 <memcpy>
        rbd->tail = num - num_to_end;  // tail increment
 8006cfe:	f8c4 800c 	str.w	r8, [r4, #12]
        rbd->count = rbd->count - num; // decrement counter for num of data
 8006d02:	6923      	ldr	r3, [r4, #16]
 8006d04:	1b5d      	subs	r5, r3, r5
 8006d06:	6125      	str	r5, [r4, #16]
      status = RB_OK;
 8006d08:	2000      	movs	r0, #0
 8006d0a:	e000      	b.n	8006d0e <ring_buffer_get+0x76>
  rb_status_t status = RB_ERROR;
 8006d0c:	2001      	movs	r0, #1
  rbd->status = status;
 8006d0e:	7520      	strb	r0, [r4, #20]
}
 8006d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      status = RB_NOT_ENOUGH_DATA;
 8006d14:	2005      	movs	r0, #5
 8006d16:	e7fa      	b.n	8006d0e <ring_buffer_get+0x76>

08006d18 <dmx_serial_process>:
uint8_t escaped = 0;

#define ESC_CHAR 0x5C

void dmx_serial_process(void)
{
 8006d18:	b510      	push	{r4, lr}
 8006d1a:	b082      	sub	sp, #8
	uint8_t data;
	uint32_t regsize =  get_reg_length();
 8006d1c:	f7fe fc6e 	bl	80055fc <get_reg_length>
 8006d20:	4604      	mov	r4, r0

	//Both Ports are set to Shell
	if ((UART_mode_SERIAL==0) && (UART_mode_USB==0))
 8006d22:	4b44      	ldr	r3, [pc, #272]	; (8006e34 <dmx_serial_process+0x11c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	b983      	cbnz	r3, 8006d4a <dmx_serial_process+0x32>
 8006d28:	4b43      	ldr	r3, [pc, #268]	; (8006e38 <dmx_serial_process+0x120>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	b96b      	cbnz	r3, 8006d4a <dmx_serial_process+0x32>
		else
		{
			return;
		}
	}
}
 8006d2e:	b002      	add	sp, #8
 8006d30:	bd10      	pop	{r4, pc}
		if (escaped)
 8006d32:	4b42      	ldr	r3, [pc, #264]	; (8006e3c <dmx_serial_process+0x124>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	bb1b      	cbnz	r3, 8006d80 <dmx_serial_process+0x68>
		set_reg(reg_count, data);
 8006d38:	f7fe fc98 	bl	800566c <set_reg>
		reg_count++;
 8006d3c:	4a40      	ldr	r2, [pc, #256]	; (8006e40 <dmx_serial_process+0x128>)
 8006d3e:	8813      	ldrh	r3, [r2, #0]
 8006d40:	3301      	adds	r3, #1
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]
		if (reg_count >=regsize)
 8006d46:	42a3      	cmp	r3, r4
 8006d48:	d258      	bcs.n	8006dfc <dmx_serial_process+0xe4>
	while ((RB_OK == ring_buffer_get(&rx_buff_dmx, &data, 1)) && (reg_count<regsize) && (syncstart == 1))
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f10d 0107 	add.w	r1, sp, #7
 8006d50:	483c      	ldr	r0, [pc, #240]	; (8006e44 <dmx_serial_process+0x12c>)
 8006d52:	f7ff ffa1 	bl	8006c98 <ring_buffer_get>
 8006d56:	b9d8      	cbnz	r0, 8006d90 <dmx_serial_process+0x78>
 8006d58:	4b39      	ldr	r3, [pc, #228]	; (8006e40 <dmx_serial_process+0x128>)
 8006d5a:	8818      	ldrh	r0, [r3, #0]
 8006d5c:	42a0      	cmp	r0, r4
 8006d5e:	d217      	bcs.n	8006d90 <dmx_serial_process+0x78>
 8006d60:	4b39      	ldr	r3, [pc, #228]	; (8006e48 <dmx_serial_process+0x130>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d113      	bne.n	8006d90 <dmx_serial_process+0x78>
		if ((data == ESC_CHAR) && (escaped == 0))
 8006d68:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006d6c:	295c      	cmp	r1, #92	; 0x5c
 8006d6e:	d1e0      	bne.n	8006d32 <dmx_serial_process+0x1a>
 8006d70:	4b32      	ldr	r3, [pc, #200]	; (8006e3c <dmx_serial_process+0x124>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1dc      	bne.n	8006d32 <dmx_serial_process+0x1a>
			escaped = 1;
 8006d78:	4b30      	ldr	r3, [pc, #192]	; (8006e3c <dmx_serial_process+0x124>)
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	701a      	strb	r2, [r3, #0]
			break;
 8006d7e:	e007      	b.n	8006d90 <dmx_serial_process+0x78>
			switch (data)
 8006d80:	295c      	cmp	r1, #92	; 0x5c
 8006d82:	d033      	beq.n	8006dec <dmx_serial_process+0xd4>
 8006d84:	296d      	cmp	r1, #109	; 0x6d
 8006d86:	d029      	beq.n	8006ddc <dmx_serial_process+0xc4>
 8006d88:	b309      	cbz	r1, 8006dce <dmx_serial_process+0xb6>
			escaped = 0;
 8006d8a:	4b2c      	ldr	r3, [pc, #176]	; (8006e3c <dmx_serial_process+0x124>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	701a      	strb	r2, [r3, #0]
	if ((reg_count>=regsize) || (syncstart == 0))
 8006d90:	4b2b      	ldr	r3, [pc, #172]	; (8006e40 <dmx_serial_process+0x128>)
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	d203      	bcs.n	8006da0 <dmx_serial_process+0x88>
 8006d98:	4b2b      	ldr	r3, [pc, #172]	; (8006e48 <dmx_serial_process+0x130>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1c6      	bne.n	8006d2e <dmx_serial_process+0x16>
		if (RB_OK == ring_buffer_get(&rx_buff_dmx, &data, 1))
 8006da0:	2201      	movs	r2, #1
 8006da2:	f10d 0107 	add.w	r1, sp, #7
 8006da6:	4827      	ldr	r0, [pc, #156]	; (8006e44 <dmx_serial_process+0x12c>)
 8006da8:	f7ff ff76 	bl	8006c98 <ring_buffer_get>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d1be      	bne.n	8006d2e <dmx_serial_process+0x16>
			if ((data == ESC_CHAR) && (escaped == 0))
 8006db0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006db4:	2b5c      	cmp	r3, #92	; 0x5c
 8006db6:	d025      	beq.n	8006e04 <dmx_serial_process+0xec>
			if (escaped)
 8006db8:	4a20      	ldr	r2, [pc, #128]	; (8006e3c <dmx_serial_process+0x124>)
 8006dba:	7812      	ldrb	r2, [r2, #0]
 8006dbc:	2a00      	cmp	r2, #0
 8006dbe:	d0b6      	beq.n	8006d2e <dmx_serial_process+0x16>
				switch (data)
 8006dc0:	b343      	cbz	r3, 8006e14 <dmx_serial_process+0xfc>
 8006dc2:	2b6d      	cmp	r3, #109	; 0x6d
 8006dc4:	d02d      	beq.n	8006e22 <dmx_serial_process+0x10a>
				escaped = 0;
 8006dc6:	4b1d      	ldr	r3, [pc, #116]	; (8006e3c <dmx_serial_process+0x124>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	e7af      	b.n	8006d2e <dmx_serial_process+0x16>
					reg_count = 0;
 8006dce:	4b1c      	ldr	r3, [pc, #112]	; (8006e40 <dmx_serial_process+0x128>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	801a      	strh	r2, [r3, #0]
					syncstart = 1;
 8006dd4:	4b1c      	ldr	r3, [pc, #112]	; (8006e48 <dmx_serial_process+0x130>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	701a      	strb	r2, [r3, #0]
					break;
 8006dda:	e7d6      	b.n	8006d8a <dmx_serial_process+0x72>
					UART_mode_SERIAL = (int)UART_MODE_SHELL;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4a15      	ldr	r2, [pc, #84]	; (8006e34 <dmx_serial_process+0x11c>)
 8006de0:	6013      	str	r3, [r2, #0]
					syncstart = 0;
 8006de2:	4a19      	ldr	r2, [pc, #100]	; (8006e48 <dmx_serial_process+0x130>)
 8006de4:	7013      	strb	r3, [r2, #0]
					reg_count = 0;
 8006de6:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <dmx_serial_process+0x128>)
 8006de8:	8013      	strh	r3, [r2, #0]
					return;
 8006dea:	e7a0      	b.n	8006d2e <dmx_serial_process+0x16>
					set_reg(reg_count, ESC_CHAR);
 8006dec:	215c      	movs	r1, #92	; 0x5c
 8006dee:	f7fe fc3d 	bl	800566c <set_reg>
					reg_count++;
 8006df2:	4a13      	ldr	r2, [pc, #76]	; (8006e40 <dmx_serial_process+0x128>)
 8006df4:	8813      	ldrh	r3, [r2, #0]
 8006df6:	3301      	adds	r3, #1
 8006df8:	8013      	strh	r3, [r2, #0]
					break;
 8006dfa:	e7c6      	b.n	8006d8a <dmx_serial_process+0x72>
			syncstart = 0;
 8006dfc:	4b12      	ldr	r3, [pc, #72]	; (8006e48 <dmx_serial_process+0x130>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	701a      	strb	r2, [r3, #0]
			return;
 8006e02:	e794      	b.n	8006d2e <dmx_serial_process+0x16>
			if ((data == ESC_CHAR) && (escaped == 0))
 8006e04:	4a0d      	ldr	r2, [pc, #52]	; (8006e3c <dmx_serial_process+0x124>)
 8006e06:	7812      	ldrb	r2, [r2, #0]
 8006e08:	2a00      	cmp	r2, #0
 8006e0a:	d1d5      	bne.n	8006db8 <dmx_serial_process+0xa0>
				escaped = 1;
 8006e0c:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <dmx_serial_process+0x124>)
 8006e0e:	2201      	movs	r2, #1
 8006e10:	701a      	strb	r2, [r3, #0]
				return;
 8006e12:	e78c      	b.n	8006d2e <dmx_serial_process+0x16>
						reg_count = 0;
 8006e14:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <dmx_serial_process+0x128>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	801a      	strh	r2, [r3, #0]
						syncstart = 1;
 8006e1a:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <dmx_serial_process+0x130>)
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	701a      	strb	r2, [r3, #0]
						break;
 8006e20:	e7d1      	b.n	8006dc6 <dmx_serial_process+0xae>
						UART_mode_SERIAL = (int)UART_MODE_SHELL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	4a03      	ldr	r2, [pc, #12]	; (8006e34 <dmx_serial_process+0x11c>)
 8006e26:	6013      	str	r3, [r2, #0]
						syncstart = 0;
 8006e28:	4a07      	ldr	r2, [pc, #28]	; (8006e48 <dmx_serial_process+0x130>)
 8006e2a:	7013      	strb	r3, [r2, #0]
						reg_count = 0;
 8006e2c:	4a04      	ldr	r2, [pc, #16]	; (8006e40 <dmx_serial_process+0x128>)
 8006e2e:	8013      	strh	r3, [r2, #0]
						return;
 8006e30:	e77d      	b.n	8006d2e <dmx_serial_process+0x16>
 8006e32:	bf00      	nop
 8006e34:	20000430 	.word	0x20000430
 8006e38:	20000431 	.word	0x20000431
 8006e3c:	20000434 	.word	0x20000434
 8006e40:	20000436 	.word	0x20000436
 8006e44:	200009c8 	.word	0x200009c8
 8006e48:	20000438 	.word	0x20000438

08006e4c <tracer_puts>:
	if (UART_mode_SERIAL == 0)
		HAL_UART_Transmit(&huart3, &ch, 1, 5000);
}

void tracer_puts(uint8_t *str,const uint16_t size)
{
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4604      	mov	r4, r0
 8006e50:	460d      	mov	r5, r1
#ifdef SUPPORT_USB
	if (USB_Active)
 8006e52:	4b0a      	ldr	r3, [pc, #40]	; (8006e7c <tracer_puts+0x30>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	b113      	cbz	r3, 8006e5e <tracer_puts+0x12>
	{
		if (UART_mode_USB == 0)
 8006e58:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <tracer_puts+0x34>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	b11b      	cbz	r3, 8006e66 <tracer_puts+0x1a>
			CDC_Transmit_FS(str,size);
	}
#endif
	if (UART_mode_SERIAL == 0)
 8006e5e:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <tracer_puts+0x38>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	b11b      	cbz	r3, 8006e6c <tracer_puts+0x20>
		HAL_UART_Transmit(&huart3,str,size, 5000);
}
 8006e64:	bd38      	pop	{r3, r4, r5, pc}
			CDC_Transmit_FS(str,size);
 8006e66:	f001 fab1 	bl	80083cc <CDC_Transmit_FS>
 8006e6a:	e7f8      	b.n	8006e5e <tracer_puts+0x12>
		HAL_UART_Transmit(&huart3,str,size, 5000);
 8006e6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e70:	462a      	mov	r2, r5
 8006e72:	4621      	mov	r1, r4
 8006e74:	4804      	ldr	r0, [pc, #16]	; (8006e88 <tracer_puts+0x3c>)
 8006e76:	f7fc fe68 	bl	8003b4a <HAL_UART_Transmit>
}
 8006e7a:	e7f3      	b.n	8006e64 <tracer_puts+0x18>
 8006e7c:	20000432 	.word	0x20000432
 8006e80:	20000431 	.word	0x20000431
 8006e84:	20000430 	.word	0x20000430
 8006e88:	20000bac 	.word	0x20000bac

08006e8c <tracer_getchar>:

#ifdef USE_UART_IRQ
uint8_t tracer_getchar(void)
{
 8006e8c:	b500      	push	{lr}
 8006e8e:	b083      	sub	sp, #12
	uint8_t data;
	if (RB_OK == ring_buffer_get(&rx_buff_shell, &data, 1))
 8006e90:	2201      	movs	r2, #1
 8006e92:	f10d 0107 	add.w	r1, sp, #7
 8006e96:	4805      	ldr	r0, [pc, #20]	; (8006eac <tracer_getchar+0x20>)
 8006e98:	f7ff fefe 	bl	8006c98 <ring_buffer_get>
 8006e9c:	b920      	cbnz	r0, 8006ea8 <tracer_getchar+0x1c>
		return data;
 8006e9e:	f89d 0007 	ldrb.w	r0, [sp, #7]
	else
		return 0;
}
 8006ea2:	b003      	add	sp, #12
 8006ea4:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	e7fa      	b.n	8006ea2 <tracer_getchar+0x16>
 8006eac:	200009e0 	.word	0x200009e0

08006eb0 <makeVersion>:


uint16_t makeVersion(void)
{
	return ((uint16_t)VERSION_MAJOR<<8) + (uint16_t)VERSION_MINOR;
}
 8006eb0:	f240 1001 	movw	r0, #257	; 0x101
 8006eb4:	4770      	bx	lr
	...

08006eb8 <init_settings>:

void init_settings(void)
{
 8006eb8:	b538      	push	{r3, r4, r5, lr}
	//Set everything to 0....
	memset(&settings,0,sizeof(settings_s));
 8006eba:	4d1b      	ldr	r5, [pc, #108]	; (8006f28 <init_settings+0x70>)
 8006ebc:	2254      	movs	r2, #84	; 0x54
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	f002 fc38 	bl	8009736 <memset>

	settings.configID[0] = 'D';
 8006ec6:	f1a5 0408 	sub.w	r4, r5, #8
 8006eca:	2344      	movs	r3, #68	; 0x44
 8006ecc:	f805 3c08 	strb.w	r3, [r5, #-8]
	settings.configID[1] = 'M';
 8006ed0:	234d      	movs	r3, #77	; 0x4d
 8006ed2:	7063      	strb	r3, [r4, #1]
	settings.configID[2] = 'X';
 8006ed4:	2358      	movs	r3, #88	; 0x58
 8006ed6:	70a3      	strb	r3, [r4, #2]
	settings.configID[3] = 'C';
 8006ed8:	2343      	movs	r3, #67	; 0x43
 8006eda:	70e3      	strb	r3, [r4, #3]
	settings.configFWversion = makeVersion();
 8006edc:	f7ff ffe8 	bl	8006eb0 <makeVersion>
 8006ee0:	80a0      	strh	r0, [r4, #4]

	//Set deviations from 0...
	settings.max_brightness = 255;
 8006ee2:	23ff      	movs	r3, #255	; 0xff
 8006ee4:	80e3      	strh	r3, [r4, #6]

	settings.frame_ms_target = 0;

	settings.strip1_length = 9;
 8006ee6:	2309      	movs	r3, #9
 8006ee8:	8663      	strh	r3, [r4, #50]	; 0x32
	settings.strip2_length = 9;
 8006eea:	86a3      	strh	r3, [r4, #52]	; 0x34

	settings.offset_red = -100;
 8006eec:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8006ef0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
	settings.gain_red = 100;    //Gain * 100
 8006ef4:	2264      	movs	r2, #100	; 0x64
 8006ef6:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	settings.gamma_red = 220;   //Gamma * 100
 8006efa:	23dc      	movs	r3, #220	; 0xdc
 8006efc:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
	settings.offset_green = -80;
 8006f00:	f64f 71b0 	movw	r1, #65456	; 0xffb0
 8006f04:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	settings.gain_green =100;    //Gain * 100
 8006f08:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
	settings.gamma_green = 220;   //Gamma * 100
 8006f0c:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
	settings.offset_blue = -80;
 8006f10:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
	settings.gain_blue = 100;    //Gain * 100
 8006f14:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
	settings.gamma_blue = 220;   //Gamma * 100
 8006f18:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56

	settings.gamma_strip = 220; //Gamma * 100
 8006f1c:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58

	settings.fx_multiplier = 1;
 8006f20:	2301      	movs	r3, #1
 8006f22:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	settings.UART_Mode_UART = (uint8_t)UART_MODE_SHELL;
	settings.UART_Mode_USB = (uint8_t)UART_MODE_SHELL;
}
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	20000b00 	.word	0x20000b00

08006f2c <apply_settings>:

void apply_settings(void)
{
 8006f2c:	b510      	push	{r4, lr}
	//Apply settings to registers
	set_reg(MAX_BRIGHTNESS,settings.max_brightness);
 8006f2e:	4c3d      	ldr	r4, [pc, #244]	; (8007024 <apply_settings+0xf8>)
 8006f30:	79a1      	ldrb	r1, [r4, #6]
 8006f32:	2000      	movs	r0, #0
 8006f34:	f7fe fb9a 	bl	800566c <set_reg>
	set_reg(CH1_RED,settings.pwm_ch1_r);
 8006f38:	7a21      	ldrb	r1, [r4, #8]
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	f7fe fb96 	bl	800566c <set_reg>
	set_reg(CH1_GREEN,settings.pwm_ch1_g);
 8006f40:	7aa1      	ldrb	r1, [r4, #10]
 8006f42:	2002      	movs	r0, #2
 8006f44:	f7fe fb92 	bl	800566c <set_reg>
	set_reg(CH1_BLUE,settings.pwm_ch1_b);
 8006f48:	7b21      	ldrb	r1, [r4, #12]
 8006f4a:	2003      	movs	r0, #3
 8006f4c:	f7fe fb8e 	bl	800566c <set_reg>
	set_reg(CH2_RED,settings.pwm_ch2_r);
 8006f50:	7ba1      	ldrb	r1, [r4, #14]
 8006f52:	2004      	movs	r0, #4
 8006f54:	f7fe fb8a 	bl	800566c <set_reg>
	set_reg(CH2_GREEN,settings.pwm_ch2_g);
 8006f58:	7c21      	ldrb	r1, [r4, #16]
 8006f5a:	2005      	movs	r0, #5
 8006f5c:	f7fe fb86 	bl	800566c <set_reg>
	set_reg(CH2_BLUE,settings.pwm_ch2_b);
 8006f60:	7ca1      	ldrb	r1, [r4, #18]
 8006f62:	2006      	movs	r0, #6
 8006f64:	f7fe fb82 	bl	800566c <set_reg>
	set_reg(CH3_RED,settings.pwm_ch3_r);
 8006f68:	7d21      	ldrb	r1, [r4, #20]
 8006f6a:	2007      	movs	r0, #7
 8006f6c:	f7fe fb7e 	bl	800566c <set_reg>
	set_reg(CH3_GREEN,settings.pwm_ch3_g);
 8006f70:	7da1      	ldrb	r1, [r4, #22]
 8006f72:	2008      	movs	r0, #8
 8006f74:	f7fe fb7a 	bl	800566c <set_reg>
	set_reg(CH3_BLUE,settings.pwm_ch3_b);
 8006f78:	7e21      	ldrb	r1, [r4, #24]
 8006f7a:	2009      	movs	r0, #9
 8006f7c:	f7fe fb76 	bl	800566c <set_reg>
	set_reg(CH3_WHITE,settings.pwm_ch3_w);
 8006f80:	7ea1      	ldrb	r1, [r4, #26]
 8006f82:	200a      	movs	r0, #10
 8006f84:	f7fe fb72 	bl	800566c <set_reg>

	//Deal with LED Strip Registers
	if (DMX_MODE2 == get_mode())
 8006f88:	f7fe fb2c 	bl	80055e4 <get_mode>
 8006f8c:	2801      	cmp	r0, #1
 8006f8e:	d000      	beq.n	8006f92 <apply_settings+0x66>
		set_reg(STRIP2_COMPLEXITY,settings.strip2_complexity);
		set_reg(STRIP2_V1,settings.strip2_v1);
		set_reg(STRIP2_V2,settings.strip2_v2);
		set_reg(STRIP2_V3,settings.strip2_v3);
	}
}
 8006f90:	bd10      	pop	{r4, pc}
		set_reg(FX_SELECT,settings.fx_select);
 8006f92:	7f21      	ldrb	r1, [r4, #28]
 8006f94:	200b      	movs	r0, #11
 8006f96:	f7fe fb69 	bl	800566c <set_reg>
		set_reg(STRIP1_PATTERN,settings.strip1_pattern);
 8006f9a:	7f61      	ldrb	r1, [r4, #29]
 8006f9c:	200c      	movs	r0, #12
 8006f9e:	f7fe fb65 	bl	800566c <set_reg>
		set_reg(STRIP1_SPEED,settings.strip1_speed);
 8006fa2:	7fa1      	ldrb	r1, [r4, #30]
 8006fa4:	200d      	movs	r0, #13
 8006fa6:	f7fe fb61 	bl	800566c <set_reg>
		set_reg(STRIP1_SIZE,settings.strip1_size);
 8006faa:	7fe1      	ldrb	r1, [r4, #31]
 8006fac:	200e      	movs	r0, #14
 8006fae:	f7fe fb5d 	bl	800566c <set_reg>
		set_reg(STRIP1_COMPLEXITY,settings.strip1_complexity);
 8006fb2:	f894 1020 	ldrb.w	r1, [r4, #32]
 8006fb6:	200f      	movs	r0, #15
 8006fb8:	f7fe fb58 	bl	800566c <set_reg>
		set_reg(STRIP1_V1,settings.strip1_v1);
 8006fbc:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 8006fc0:	2010      	movs	r0, #16
 8006fc2:	f7fe fb53 	bl	800566c <set_reg>
		set_reg(STRIP1_V2,settings.strip1_v2);
 8006fc6:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 8006fca:	2011      	movs	r0, #17
 8006fcc:	f7fe fb4e 	bl	800566c <set_reg>
		set_reg(STRIP1_V3,settings.strip1_v3);
 8006fd0:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8006fd4:	2012      	movs	r0, #18
 8006fd6:	f7fe fb49 	bl	800566c <set_reg>
		set_reg(STRIP2_PATTERN,settings.strip2_pattern);
 8006fda:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8006fde:	2013      	movs	r0, #19
 8006fe0:	f7fe fb44 	bl	800566c <set_reg>
		set_reg(STRIP2_SPEED,settings.strip2_speed);
 8006fe4:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8006fe8:	2014      	movs	r0, #20
 8006fea:	f7fe fb3f 	bl	800566c <set_reg>
		set_reg(STRIP2_SIZE,settings.strip2_size);
 8006fee:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
 8006ff2:	2015      	movs	r0, #21
 8006ff4:	f7fe fb3a 	bl	800566c <set_reg>
		set_reg(STRIP2_COMPLEXITY,settings.strip2_complexity);
 8006ff8:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 8006ffc:	2016      	movs	r0, #22
 8006ffe:	f7fe fb35 	bl	800566c <set_reg>
		set_reg(STRIP2_V1,settings.strip2_v1);
 8007002:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8007006:	2017      	movs	r0, #23
 8007008:	f7fe fb30 	bl	800566c <set_reg>
		set_reg(STRIP2_V2,settings.strip2_v2);
 800700c:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8007010:	2018      	movs	r0, #24
 8007012:	f7fe fb2b 	bl	800566c <set_reg>
		set_reg(STRIP2_V3,settings.strip2_v3);
 8007016:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800701a:	2019      	movs	r0, #25
 800701c:	f7fe fb26 	bl	800566c <set_reg>
}
 8007020:	e7b6      	b.n	8006f90 <apply_settings+0x64>
 8007022:	bf00      	nop
 8007024:	20000af8 	.word	0x20000af8

08007028 <load_settings>:

bool load_settings(void)
{
 8007028:	b538      	push	{r3, r4, r5, lr}
	if (!EE_Reads(0,sizeof(settings_s),(uint32_t*)&settings))
 800702a:	4a10      	ldr	r2, [pc, #64]	; (800706c <load_settings+0x44>)
 800702c:	215c      	movs	r1, #92	; 0x5c
 800702e:	2000      	movs	r0, #0
 8007030:	f7fe fc8a 	bl	8005948 <EE_Reads>
 8007034:	4604      	mov	r4, r0
 8007036:	b178      	cbz	r0, 8007058 <load_settings+0x30>
	{
		print("EEPROM Read Failed");
		return false;
	}

	if ((settings.configID[0] != 'D') || (settings.configID[1] != 'M') || (settings.configID[2] != 'X') || (settings.configID[3] != 'C'))
 8007038:	4b0c      	ldr	r3, [pc, #48]	; (800706c <load_settings+0x44>)
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	4b0c      	ldr	r3, [pc, #48]	; (8007070 <load_settings+0x48>)
 800703e:	429a      	cmp	r2, r3
 8007040:	d10e      	bne.n	8007060 <load_settings+0x38>
		return false;
	}
	else
	{
		//Check FW version
		if (settings.configFWversion != makeVersion())
 8007042:	4b0a      	ldr	r3, [pc, #40]	; (800706c <load_settings+0x44>)
 8007044:	889d      	ldrh	r5, [r3, #4]
 8007046:	f7ff ff33 	bl	8006eb0 <makeVersion>
 800704a:	4285      	cmp	r5, r0
 800704c:	d00c      	beq.n	8007068 <load_settings+0x40>
		{
			print("Wrong Firmware Version\n");
 800704e:	4809      	ldr	r0, [pc, #36]	; (8007074 <load_settings+0x4c>)
 8007050:	f000 fa96 	bl	8007580 <print>
			return false;
 8007054:	2400      	movs	r4, #0
 8007056:	e007      	b.n	8007068 <load_settings+0x40>
		print("EEPROM Read Failed");
 8007058:	4807      	ldr	r0, [pc, #28]	; (8007078 <load_settings+0x50>)
 800705a:	f000 fa91 	bl	8007580 <print>
		return false;
 800705e:	e003      	b.n	8007068 <load_settings+0x40>
		print("No Config ID\n");
 8007060:	4806      	ldr	r0, [pc, #24]	; (800707c <load_settings+0x54>)
 8007062:	f000 fa8d 	bl	8007580 <print>
		return false;
 8007066:	2400      	movs	r4, #0
		}
	}
	return true;
}
 8007068:	4620      	mov	r0, r4
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	20000af8 	.word	0x20000af8
 8007070:	43584d44 	.word	0x43584d44
 8007074:	0800c71c 	.word	0x0800c71c
 8007078:	0800c6f8 	.word	0x0800c6f8
 800707c:	0800c70c 	.word	0x0800c70c

08007080 <save_settings>:

void save_settings(void)
{
 8007080:	b508      	push	{r3, lr}
	if (!EE_Writes(0,sizeof(settings_s),(uint32_t*)&settings))
 8007082:	4a05      	ldr	r2, [pc, #20]	; (8007098 <save_settings+0x18>)
 8007084:	215c      	movs	r1, #92	; 0x5c
 8007086:	2000      	movs	r0, #0
 8007088:	f7fe fc72 	bl	8005970 <EE_Writes>
 800708c:	b100      	cbz	r0, 8007090 <save_settings+0x10>
		print("EEPROM Write Failed");
}
 800708e:	bd08      	pop	{r3, pc}
		print("EEPROM Write Failed");
 8007090:	4802      	ldr	r0, [pc, #8]	; (800709c <save_settings+0x1c>)
 8007092:	f000 fa75 	bl	8007580 <print>
}
 8007096:	e7fa      	b.n	800708e <save_settings+0xe>
 8007098:	20000af8 	.word	0x20000af8
 800709c:	0800cb70 	.word	0x0800cb70

080070a0 <print_settings>:

void print_settings(void)
{
 80070a0:	b570      	push	{r4, r5, r6, lr}
	print("");
 80070a2:	4d92      	ldr	r5, [pc, #584]	; (80072ec <print_settings+0x24c>)
 80070a4:	4628      	mov	r0, r5
 80070a6:	f000 fa6b 	bl	8007580 <print>
	print("Defaults");
 80070aa:	4891      	ldr	r0, [pc, #580]	; (80072f0 <print_settings+0x250>)
 80070ac:	f000 fa68 	bl	8007580 <print>
	print("-------");
 80070b0:	4e90      	ldr	r6, [pc, #576]	; (80072f4 <print_settings+0x254>)
 80070b2:	4630      	mov	r0, r6
 80070b4:	f000 fa64 	bl	8007580 <print>
	print("MAX_BRIGHTN: %d",settings.max_brightness);
 80070b8:	4c8f      	ldr	r4, [pc, #572]	; (80072f8 <print_settings+0x258>)
 80070ba:	88e1      	ldrh	r1, [r4, #6]
 80070bc:	488f      	ldr	r0, [pc, #572]	; (80072fc <print_settings+0x25c>)
 80070be:	f000 fa5f 	bl	8007580 <print>
	print("CH1_RED: %d",settings.pwm_ch1_r);
 80070c2:	8921      	ldrh	r1, [r4, #8]
 80070c4:	488e      	ldr	r0, [pc, #568]	; (8007300 <print_settings+0x260>)
 80070c6:	f000 fa5b 	bl	8007580 <print>
	print("CH1_GREEN: %d",settings.pwm_ch1_g);
 80070ca:	8961      	ldrh	r1, [r4, #10]
 80070cc:	488d      	ldr	r0, [pc, #564]	; (8007304 <print_settings+0x264>)
 80070ce:	f000 fa57 	bl	8007580 <print>
	print("CH1_BLUE: %d",settings.pwm_ch1_b);
 80070d2:	89a1      	ldrh	r1, [r4, #12]
 80070d4:	488c      	ldr	r0, [pc, #560]	; (8007308 <print_settings+0x268>)
 80070d6:	f000 fa53 	bl	8007580 <print>
	print("CH2_RED: %d",settings.pwm_ch2_r);
 80070da:	89e1      	ldrh	r1, [r4, #14]
 80070dc:	488b      	ldr	r0, [pc, #556]	; (800730c <print_settings+0x26c>)
 80070de:	f000 fa4f 	bl	8007580 <print>
	print("CH2_GREEN: %d",settings.pwm_ch2_g);
 80070e2:	8a21      	ldrh	r1, [r4, #16]
 80070e4:	488a      	ldr	r0, [pc, #552]	; (8007310 <print_settings+0x270>)
 80070e6:	f000 fa4b 	bl	8007580 <print>
	print("CH2_BLUE: %d",settings.pwm_ch2_b);
 80070ea:	8a61      	ldrh	r1, [r4, #18]
 80070ec:	4889      	ldr	r0, [pc, #548]	; (8007314 <print_settings+0x274>)
 80070ee:	f000 fa47 	bl	8007580 <print>
	print("CH3_RED: %d",settings.pwm_ch3_r);
 80070f2:	8aa1      	ldrh	r1, [r4, #20]
 80070f4:	4888      	ldr	r0, [pc, #544]	; (8007318 <print_settings+0x278>)
 80070f6:	f000 fa43 	bl	8007580 <print>
	print("CH3_GREEN: %d",settings.pwm_ch3_g);
 80070fa:	8ae1      	ldrh	r1, [r4, #22]
 80070fc:	4887      	ldr	r0, [pc, #540]	; (800731c <print_settings+0x27c>)
 80070fe:	f000 fa3f 	bl	8007580 <print>
	print("CH3_BLUE: %d",settings.pwm_ch3_b);
 8007102:	8b21      	ldrh	r1, [r4, #24]
 8007104:	4886      	ldr	r0, [pc, #536]	; (8007320 <print_settings+0x280>)
 8007106:	f000 fa3b 	bl	8007580 <print>
	print("CH3_WHITE: %d",settings.pwm_ch3_w);
 800710a:	8b61      	ldrh	r1, [r4, #26]
 800710c:	4885      	ldr	r0, [pc, #532]	; (8007324 <print_settings+0x284>)
 800710e:	f000 fa37 	bl	8007580 <print>
	print("FX_SELECT: %d",settings.fx_select);
 8007112:	7f21      	ldrb	r1, [r4, #28]
 8007114:	4884      	ldr	r0, [pc, #528]	; (8007328 <print_settings+0x288>)
 8007116:	f000 fa33 	bl	8007580 <print>

	print("STRIP1_PATTERN: %d",settings.strip1_pattern);
 800711a:	7f61      	ldrb	r1, [r4, #29]
 800711c:	4883      	ldr	r0, [pc, #524]	; (800732c <print_settings+0x28c>)
 800711e:	f000 fa2f 	bl	8007580 <print>
	print("STRIP1_SPEED: %d",settings.strip1_speed);
 8007122:	7fa1      	ldrb	r1, [r4, #30]
 8007124:	4882      	ldr	r0, [pc, #520]	; (8007330 <print_settings+0x290>)
 8007126:	f000 fa2b 	bl	8007580 <print>
	print("STRIP1_SIZE: %d",settings.strip1_size);
 800712a:	7fe1      	ldrb	r1, [r4, #31]
 800712c:	4881      	ldr	r0, [pc, #516]	; (8007334 <print_settings+0x294>)
 800712e:	f000 fa27 	bl	8007580 <print>
	print("STRIP1_COMPLEX: %d",settings.strip1_complexity);
 8007132:	f894 1020 	ldrb.w	r1, [r4, #32]
 8007136:	4880      	ldr	r0, [pc, #512]	; (8007338 <print_settings+0x298>)
 8007138:	f000 fa22 	bl	8007580 <print>
	print("STRIP1_V1: %d",settings.strip1_v1);
 800713c:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 8007140:	487e      	ldr	r0, [pc, #504]	; (800733c <print_settings+0x29c>)
 8007142:	f000 fa1d 	bl	8007580 <print>
	print("STRIP1_V2: %d",settings.strip1_v2);
 8007146:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 800714a:	487d      	ldr	r0, [pc, #500]	; (8007340 <print_settings+0x2a0>)
 800714c:	f000 fa18 	bl	8007580 <print>
	print("STRIP1_V3: %d",settings.strip1_v3);
 8007150:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8007154:	487b      	ldr	r0, [pc, #492]	; (8007344 <print_settings+0x2a4>)
 8007156:	f000 fa13 	bl	8007580 <print>

	print("STRIP2_PATTERN: %d",settings.strip2_pattern);
 800715a:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 800715e:	487a      	ldr	r0, [pc, #488]	; (8007348 <print_settings+0x2a8>)
 8007160:	f000 fa0e 	bl	8007580 <print>
	print("STRIP2_SPEED: %d",settings.strip2_speed);
 8007164:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8007168:	4878      	ldr	r0, [pc, #480]	; (800734c <print_settings+0x2ac>)
 800716a:	f000 fa09 	bl	8007580 <print>
	print("STRIP2_SIZE: %d",settings.strip2_size);
 800716e:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
 8007172:	4877      	ldr	r0, [pc, #476]	; (8007350 <print_settings+0x2b0>)
 8007174:	f000 fa04 	bl	8007580 <print>
	print("STRIP2_COMPLEX: %d",settings.strip2_complexity);
 8007178:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 800717c:	4875      	ldr	r0, [pc, #468]	; (8007354 <print_settings+0x2b4>)
 800717e:	f000 f9ff 	bl	8007580 <print>
	print("STRIP2_V1: %d",settings.strip2_v1);
 8007182:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8007186:	4874      	ldr	r0, [pc, #464]	; (8007358 <print_settings+0x2b8>)
 8007188:	f000 f9fa 	bl	8007580 <print>
	print("STRIP2_V2: %d",settings.strip2_v2);
 800718c:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8007190:	4872      	ldr	r0, [pc, #456]	; (800735c <print_settings+0x2bc>)
 8007192:	f000 f9f5 	bl	8007580 <print>
	print("STRIP2_V3: %d",settings.strip2_v3);
 8007196:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800719a:	4871      	ldr	r0, [pc, #452]	; (8007360 <print_settings+0x2c0>)
 800719c:	f000 f9f0 	bl	8007580 <print>
	print("");
 80071a0:	4628      	mov	r0, r5
 80071a2:	f000 f9ed 	bl	8007580 <print>
	print("Settings");
 80071a6:	486f      	ldr	r0, [pc, #444]	; (8007364 <print_settings+0x2c4>)
 80071a8:	f000 f9ea 	bl	8007580 <print>
	print("-------");
 80071ac:	4630      	mov	r0, r6
 80071ae:	f000 f9e7 	bl	8007580 <print>
	//FX Multiplier
	print("FX Multiplier: %d",settings.fx_multiplier);
 80071b2:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80071b6:	486c      	ldr	r0, [pc, #432]	; (8007368 <print_settings+0x2c8>)
 80071b8:	f000 f9e2 	bl	8007580 <print>
	//Strips
	print("Strip 1 Length: %d",settings.strip1_length);
 80071bc:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 80071be:	486b      	ldr	r0, [pc, #428]	; (800736c <print_settings+0x2cc>)
 80071c0:	f000 f9de 	bl	8007580 <print>
	print("Strip 2 Length: %d",settings.strip2_length);
 80071c4:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80071c6:	486a      	ldr	r0, [pc, #424]	; (8007370 <print_settings+0x2d0>)
 80071c8:	f000 f9da 	bl	8007580 <print>

	print("UART Mode Serial: %d",settings.UART_Mode_UART);
 80071cc:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
 80071d0:	4868      	ldr	r0, [pc, #416]	; (8007374 <print_settings+0x2d4>)
 80071d2:	f000 f9d5 	bl	8007580 <print>
	print("UART Mode USB: %d",settings.UART_Mode_USB);
 80071d6:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 80071da:	4867      	ldr	r0, [pc, #412]	; (8007378 <print_settings+0x2d8>)
 80071dc:	f000 f9d0 	bl	8007580 <print>
	print("");
 80071e0:	4628      	mov	r0, r5
 80071e2:	f000 f9cd 	bl	8007580 <print>
	//Triggers
	print("Triggers");
 80071e6:	4865      	ldr	r0, [pc, #404]	; (800737c <print_settings+0x2dc>)
 80071e8:	f000 f9ca 	bl	8007580 <print>
	print("--------");
 80071ec:	4864      	ldr	r0, [pc, #400]	; (8007380 <print_settings+0x2e0>)
 80071ee:	f000 f9c7 	bl	8007580 <print>
	print("Trigger A0 Mode",settings.trigger_mode_A0);
 80071f2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80071f6:	4863      	ldr	r0, [pc, #396]	; (8007384 <print_settings+0x2e4>)
 80071f8:	f000 f9c2 	bl	8007580 <print>
	print("Trigger A0 Reg: %d",settings.trigger_reg_A0);
 80071fc:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8007200:	4861      	ldr	r0, [pc, #388]	; (8007388 <print_settings+0x2e8>)
 8007202:	f000 f9bd 	bl	8007580 <print>
	print("Trigger A0 Reg Low->Hi: %d",settings.trigger_reg_lohi_A0);
 8007206:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
 800720a:	4860      	ldr	r0, [pc, #384]	; (800738c <print_settings+0x2ec>)
 800720c:	f000 f9b8 	bl	8007580 <print>
	print("Trigger A0 Val Low->Hi: %d",settings.trigger_val_lohi_A0);
 8007210:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
 8007214:	485e      	ldr	r0, [pc, #376]	; (8007390 <print_settings+0x2f0>)
 8007216:	f000 f9b3 	bl	8007580 <print>
	print("Trigger A0 Reg Hi->Low: %d",settings.trigger_reg_hilo_A0);
 800721a:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800721e:	485d      	ldr	r0, [pc, #372]	; (8007394 <print_settings+0x2f4>)
 8007220:	f000 f9ae 	bl	8007580 <print>
	print("Trigger A0 Val Hi-Low: %d",settings.trigger_val_hilo_A0);
 8007224:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8007228:	485b      	ldr	r0, [pc, #364]	; (8007398 <print_settings+0x2f8>)
 800722a:	f000 f9a9 	bl	8007580 <print>
	print("Trigger A0 Level: %d",settings.trigger_level_A0);
 800722e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8007232:	485a      	ldr	r0, [pc, #360]	; (800739c <print_settings+0x2fc>)
 8007234:	f000 f9a4 	bl	8007580 <print>

	print("Trigger A1 Mode",settings.trigger_mode_A1);
 8007238:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 800723c:	4858      	ldr	r0, [pc, #352]	; (80073a0 <print_settings+0x300>)
 800723e:	f000 f99f 	bl	8007580 <print>
	print("Trigger A1 Reg: %d",settings.trigger_reg_A1);
 8007242:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8007246:	4857      	ldr	r0, [pc, #348]	; (80073a4 <print_settings+0x304>)
 8007248:	f000 f99a 	bl	8007580 <print>
	print("Trigger A1 Reg Low->Hi: %d",settings.trigger_reg_lohi_A1);
 800724c:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8007250:	4855      	ldr	r0, [pc, #340]	; (80073a8 <print_settings+0x308>)
 8007252:	f000 f995 	bl	8007580 <print>
	print("Trigger A1 Val Low->Hi: %d",settings.trigger_val_lohi_A1);
 8007256:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 800725a:	4854      	ldr	r0, [pc, #336]	; (80073ac <print_settings+0x30c>)
 800725c:	f000 f990 	bl	8007580 <print>
	print("Trigger A1 Reg Hi->Low: %d",settings.trigger_reg_hilo_A1);
 8007260:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8007264:	4852      	ldr	r0, [pc, #328]	; (80073b0 <print_settings+0x310>)
 8007266:	f000 f98b 	bl	8007580 <print>
	print("Trigger A1 Val Hi-Low: %d",settings.trigger_val_hilo_A1);
 800726a:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 800726e:	4851      	ldr	r0, [pc, #324]	; (80073b4 <print_settings+0x314>)
 8007270:	f000 f986 	bl	8007580 <print>
	print("Trigger A1 Level: %d",settings.trigger_level_A1);
 8007274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007278:	484f      	ldr	r0, [pc, #316]	; (80073b8 <print_settings+0x318>)
 800727a:	f000 f981 	bl	8007580 <print>
	print("");
 800727e:	4628      	mov	r0, r5
 8007280:	f000 f97e 	bl	8007580 <print>
    //Calibration
	print("Calibration");
 8007284:	484d      	ldr	r0, [pc, #308]	; (80073bc <print_settings+0x31c>)
 8007286:	f000 f97b 	bl	8007580 <print>
	print("-----------");
 800728a:	484d      	ldr	r0, [pc, #308]	; (80073c0 <print_settings+0x320>)
 800728c:	f000 f978 	bl	8007580 <print>
	print("Offset Red: %d",settings.offset_red);
 8007290:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
 8007294:	484b      	ldr	r0, [pc, #300]	; (80073c4 <print_settings+0x324>)
 8007296:	f000 f973 	bl	8007580 <print>
	print("Gain Red: %d",settings.gain_red);
 800729a:	f9b4 1048 	ldrsh.w	r1, [r4, #72]	; 0x48
 800729e:	484a      	ldr	r0, [pc, #296]	; (80073c8 <print_settings+0x328>)
 80072a0:	f000 f96e 	bl	8007580 <print>
	print("Gamma Red: %d",settings.gamma_red);
 80072a4:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
 80072a8:	4848      	ldr	r0, [pc, #288]	; (80073cc <print_settings+0x32c>)
 80072aa:	f000 f969 	bl	8007580 <print>
	print("Offset Green: %d",settings.offset_green);
 80072ae:	f9b4 104c 	ldrsh.w	r1, [r4, #76]	; 0x4c
 80072b2:	4847      	ldr	r0, [pc, #284]	; (80073d0 <print_settings+0x330>)
 80072b4:	f000 f964 	bl	8007580 <print>
	print("Gain Green: %d",settings.gain_green);
 80072b8:	f9b4 104e 	ldrsh.w	r1, [r4, #78]	; 0x4e
 80072bc:	4845      	ldr	r0, [pc, #276]	; (80073d4 <print_settings+0x334>)
 80072be:	f000 f95f 	bl	8007580 <print>
	print("Gamma Green: %d",settings.gamma_green);
 80072c2:	f9b4 1050 	ldrsh.w	r1, [r4, #80]	; 0x50
 80072c6:	4844      	ldr	r0, [pc, #272]	; (80073d8 <print_settings+0x338>)
 80072c8:	f000 f95a 	bl	8007580 <print>
	print("Offset Blue: %d",settings.offset_blue);
 80072cc:	f9b4 1052 	ldrsh.w	r1, [r4, #82]	; 0x52
 80072d0:	4842      	ldr	r0, [pc, #264]	; (80073dc <print_settings+0x33c>)
 80072d2:	f000 f955 	bl	8007580 <print>
	print("Gain Blue: %d",settings.gain_blue);
 80072d6:	f9b4 1054 	ldrsh.w	r1, [r4, #84]	; 0x54
 80072da:	4841      	ldr	r0, [pc, #260]	; (80073e0 <print_settings+0x340>)
 80072dc:	f000 f950 	bl	8007580 <print>
	print("Gamma Blue: %d",settings.gamma_blue);
 80072e0:	f9b4 1056 	ldrsh.w	r1, [r4, #86]	; 0x56
 80072e4:	483f      	ldr	r0, [pc, #252]	; (80073e4 <print_settings+0x344>)
 80072e6:	f000 f94b 	bl	8007580 <print>
}
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	0800cfb8 	.word	0x0800cfb8
 80072f0:	0800c734 	.word	0x0800c734
 80072f4:	0800cbec 	.word	0x0800cbec
 80072f8:	20000af8 	.word	0x20000af8
 80072fc:	0800c740 	.word	0x0800c740
 8007300:	0800c750 	.word	0x0800c750
 8007304:	0800c75c 	.word	0x0800c75c
 8007308:	0800c76c 	.word	0x0800c76c
 800730c:	0800c77c 	.word	0x0800c77c
 8007310:	0800c788 	.word	0x0800c788
 8007314:	0800c798 	.word	0x0800c798
 8007318:	0800c7a8 	.word	0x0800c7a8
 800731c:	0800c7b4 	.word	0x0800c7b4
 8007320:	0800c7c4 	.word	0x0800c7c4
 8007324:	0800c7d4 	.word	0x0800c7d4
 8007328:	0800c7e4 	.word	0x0800c7e4
 800732c:	0800c7f4 	.word	0x0800c7f4
 8007330:	0800c808 	.word	0x0800c808
 8007334:	0800c81c 	.word	0x0800c81c
 8007338:	0800c82c 	.word	0x0800c82c
 800733c:	0800c840 	.word	0x0800c840
 8007340:	0800c850 	.word	0x0800c850
 8007344:	0800c860 	.word	0x0800c860
 8007348:	0800c870 	.word	0x0800c870
 800734c:	0800c884 	.word	0x0800c884
 8007350:	0800c898 	.word	0x0800c898
 8007354:	0800c8a8 	.word	0x0800c8a8
 8007358:	0800c8bc 	.word	0x0800c8bc
 800735c:	0800c8cc 	.word	0x0800c8cc
 8007360:	0800c8dc 	.word	0x0800c8dc
 8007364:	0800c8ec 	.word	0x0800c8ec
 8007368:	0800c8f8 	.word	0x0800c8f8
 800736c:	0800c90c 	.word	0x0800c90c
 8007370:	0800c920 	.word	0x0800c920
 8007374:	0800c934 	.word	0x0800c934
 8007378:	0800c94c 	.word	0x0800c94c
 800737c:	0800c960 	.word	0x0800c960
 8007380:	0800c96c 	.word	0x0800c96c
 8007384:	0800c978 	.word	0x0800c978
 8007388:	0800c988 	.word	0x0800c988
 800738c:	0800c99c 	.word	0x0800c99c
 8007390:	0800c9b8 	.word	0x0800c9b8
 8007394:	0800c9d4 	.word	0x0800c9d4
 8007398:	0800c9f0 	.word	0x0800c9f0
 800739c:	0800ca0c 	.word	0x0800ca0c
 80073a0:	0800ca24 	.word	0x0800ca24
 80073a4:	0800ca34 	.word	0x0800ca34
 80073a8:	0800ca48 	.word	0x0800ca48
 80073ac:	0800ca64 	.word	0x0800ca64
 80073b0:	0800ca80 	.word	0x0800ca80
 80073b4:	0800ca9c 	.word	0x0800ca9c
 80073b8:	0800cab8 	.word	0x0800cab8
 80073bc:	0800cad0 	.word	0x0800cad0
 80073c0:	0800cbe8 	.word	0x0800cbe8
 80073c4:	0800cadc 	.word	0x0800cadc
 80073c8:	0800caec 	.word	0x0800caec
 80073cc:	0800cafc 	.word	0x0800cafc
 80073d0:	0800cb0c 	.word	0x0800cb0c
 80073d4:	0800cb20 	.word	0x0800cb20
 80073d8:	0800cb30 	.word	0x0800cb30
 80073dc:	0800cb40 	.word	0x0800cb40
 80073e0:	0800cb50 	.word	0x0800cb50
 80073e4:	0800cb60 	.word	0x0800cb60

080073e8 <cmd_buf_add_char>:
}

/* functions */
static void cmd_buf_add_char(char c)
{
    if ((unsigned int)cmd_buf_idx < sizeof(cmd_buf))
 80073e8:	4b04      	ldr	r3, [pc, #16]	; (80073fc <cmd_buf_add_char+0x14>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b3f      	cmp	r3, #63	; 0x3f
 80073ee:	d804      	bhi.n	80073fa <cmd_buf_add_char+0x12>
    {
        cmd_buf[cmd_buf_idx++] = c;
 80073f0:	1c59      	adds	r1, r3, #1
 80073f2:	4a02      	ldr	r2, [pc, #8]	; (80073fc <cmd_buf_add_char+0x14>)
 80073f4:	6011      	str	r1, [r2, #0]
 80073f6:	4a02      	ldr	r2, [pc, #8]	; (8007400 <cmd_buf_add_char+0x18>)
 80073f8:	54d0      	strb	r0, [r2, r3]
    }
}
 80073fa:	4770      	bx	lr
 80073fc:	2000047c 	.word	0x2000047c
 8007400:	2000043c 	.word	0x2000043c

08007404 <cmd_buf_remove_char>:

static void cmd_buf_remove_char(void)
{
    if (cmd_buf_idx > 0)
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <cmd_buf_remove_char+0x18>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	dd05      	ble.n	8007418 <cmd_buf_remove_char+0x14>
    {
        cmd_buf[--cmd_buf_idx] = 0;
 800740c:	3b01      	subs	r3, #1
 800740e:	4a03      	ldr	r2, [pc, #12]	; (800741c <cmd_buf_remove_char+0x18>)
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	4a03      	ldr	r2, [pc, #12]	; (8007420 <cmd_buf_remove_char+0x1c>)
 8007414:	2100      	movs	r1, #0
 8007416:	54d1      	strb	r1, [r2, r3]
    }
}
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	2000047c 	.word	0x2000047c
 8007420:	2000043c 	.word	0x2000043c

08007424 <save_command_to_command_history>:
	
	return arg_num - 1;
}

static void save_command_to_command_history(void)
{
 8007424:	b538      	push	{r3, r4, r5, lr}
    strncpy(cmd_hist[cmd_hist_put_idx], cmd_buf, sizeof(cmd_buf));
 8007426:	4d0a      	ldr	r5, [pc, #40]	; (8007450 <save_command_to_command_history+0x2c>)
 8007428:	682c      	ldr	r4, [r5, #0]
 800742a:	2240      	movs	r2, #64	; 0x40
 800742c:	4909      	ldr	r1, [pc, #36]	; (8007454 <save_command_to_command_history+0x30>)
 800742e:	480a      	ldr	r0, [pc, #40]	; (8007458 <save_command_to_command_history+0x34>)
 8007430:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8007434:	f002 fa5e 	bl	80098f4 <strncpy>
    cmd_hist_put_idx++;
 8007438:	3401      	adds	r4, #1
 800743a:	602c      	str	r4, [r5, #0]
    if (cmd_hist_put_idx >= SHELL_CMD_HISTORY_LEN)
 800743c:	2c07      	cmp	r4, #7
 800743e:	dd01      	ble.n	8007444 <save_command_to_command_history+0x20>
    {
        cmd_hist_put_idx = 0;
 8007440:	2200      	movs	r2, #0
 8007442:	602a      	str	r2, [r5, #0]
    }
    cmd_hist_get_idx = cmd_hist_put_idx;
 8007444:	4b02      	ldr	r3, [pc, #8]	; (8007450 <save_command_to_command_history+0x2c>)
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	4b04      	ldr	r3, [pc, #16]	; (800745c <save_command_to_command_history+0x38>)
 800744a:	601a      	str	r2, [r3, #0]
}
 800744c:	bd38      	pop	{r3, r4, r5, pc}
 800744e:	bf00      	nop
 8007450:	20000684 	.word	0x20000684
 8007454:	2000043c 	.word	0x2000043c
 8007458:	20000480 	.word	0x20000480
 800745c:	20000680 	.word	0x20000680

08007460 <parse_shell_cmd>:
{
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	460d      	mov	r5, r1
	tokens[arg_num] = strtok(buffer, " ");
 8007464:	4909      	ldr	r1, [pc, #36]	; (800748c <parse_shell_cmd+0x2c>)
 8007466:	f002 fa5b 	bl	8009920 <strtok>
 800746a:	6028      	str	r0, [r5, #0]
	int arg_num = 0;
 800746c:	2400      	movs	r4, #0
	while(NULL != tokens[arg_num] && arg_num < (MAX_ARGUMENT_NUM-1))
 800746e:	e006      	b.n	800747e <parse_shell_cmd+0x1e>
		tokens[++arg_num] = strtok(NULL, " ");
 8007470:	3401      	adds	r4, #1
 8007472:	4906      	ldr	r1, [pc, #24]	; (800748c <parse_shell_cmd+0x2c>)
 8007474:	2000      	movs	r0, #0
 8007476:	f002 fa53 	bl	8009920 <strtok>
 800747a:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	while(NULL != tokens[arg_num] && arg_num < (MAX_ARGUMENT_NUM-1))
 800747e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007482:	b10b      	cbz	r3, 8007488 <parse_shell_cmd+0x28>
 8007484:	2c06      	cmp	r4, #6
 8007486:	ddf3      	ble.n	8007470 <parse_shell_cmd+0x10>
}
 8007488:	1e60      	subs	r0, r4, #1
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	0800c3bc 	.word	0x0800c3bc

08007490 <cmd_buf_reset>:
{
 8007490:	b508      	push	{r3, lr}
    cmd_buf_idx = 0;
 8007492:	2100      	movs	r1, #0
 8007494:	4b03      	ldr	r3, [pc, #12]	; (80074a4 <cmd_buf_reset+0x14>)
 8007496:	6019      	str	r1, [r3, #0]
    memset(cmd_buf, 0, sizeof(cmd_buf));
 8007498:	2240      	movs	r2, #64	; 0x40
 800749a:	4803      	ldr	r0, [pc, #12]	; (80074a8 <cmd_buf_reset+0x18>)
 800749c:	f002 f94b 	bl	8009736 <memset>
}
 80074a0:	bd08      	pop	{r3, pc}
 80074a2:	bf00      	nop
 80074a4:	2000047c 	.word	0x2000047c
 80074a8:	2000043c 	.word	0x2000043c

080074ac <load_command_from_command_history>:

static void load_command_from_command_history(uint8_t dir)
{
 80074ac:	b510      	push	{r4, lr}
    /* backwards */
    if (0 == dir)
 80074ae:	b990      	cbnz	r0, 80074d6 <load_command_from_command_history+0x2a>
    {
        if (0 == cmd_hist_get_idx)
 80074b0:	4b22      	ldr	r3, [pc, #136]	; (800753c <load_command_from_command_history+0x90>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	b93b      	cbnz	r3, 80074c6 <load_command_from_command_history+0x1a>
        {
            if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_put_idx)
 80074b6:	4b22      	ldr	r3, [pc, #136]	; (8007540 <load_command_from_command_history+0x94>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b07      	cmp	r3, #7
 80074bc:	d02c      	beq.n	8007518 <load_command_from_command_history+0x6c>
            {
                return;
            }
            cmd_hist_get_idx = SHELL_CMD_HISTORY_LEN - 1;
 80074be:	4b1f      	ldr	r3, [pc, #124]	; (800753c <load_command_from_command_history+0x90>)
 80074c0:	2207      	movs	r2, #7
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	e017      	b.n	80074f6 <load_command_from_command_history+0x4a>
        }
        else
        {
            if (cmd_hist_get_idx - 1 == cmd_hist_put_idx)
 80074c6:	3b01      	subs	r3, #1
 80074c8:	4a1d      	ldr	r2, [pc, #116]	; (8007540 <load_command_from_command_history+0x94>)
 80074ca:	6812      	ldr	r2, [r2, #0]
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d023      	beq.n	8007518 <load_command_from_command_history+0x6c>
            {
                return;
            }
            cmd_hist_get_idx--;
 80074d0:	4a1a      	ldr	r2, [pc, #104]	; (800753c <load_command_from_command_history+0x90>)
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	e00f      	b.n	80074f6 <load_command_from_command_history+0x4a>
        }
    }
    /* forward */
    else
    {
        if (cmd_hist_get_idx == cmd_hist_put_idx)
 80074d6:	4b19      	ldr	r3, [pc, #100]	; (800753c <load_command_from_command_history+0x90>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a19      	ldr	r2, [pc, #100]	; (8007540 <load_command_from_command_history+0x94>)
 80074dc:	6812      	ldr	r2, [r2, #0]
 80074de:	4293      	cmp	r3, r2
 80074e0:	d01a      	beq.n	8007518 <load_command_from_command_history+0x6c>
        {
            return;
        }
        
        /* Returned home */
        if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_get_idx)
 80074e2:	2b07      	cmp	r3, #7
 80074e4:	d019      	beq.n	800751a <load_command_from_command_history+0x6e>
                return;
            }
        }
        else
        {
            if (cmd_hist_get_idx + 1 == cmd_hist_put_idx)
 80074e6:	1c59      	adds	r1, r3, #1
 80074e8:	428a      	cmp	r2, r1
 80074ea:	d01d      	beq.n	8007528 <load_command_from_command_history+0x7c>
                cmd_buf_reset();
                return;
            }
        }
        
        cmd_hist_get_idx++;
 80074ec:	3301      	adds	r3, #1
 80074ee:	4a13      	ldr	r2, [pc, #76]	; (800753c <load_command_from_command_history+0x90>)
 80074f0:	6013      	str	r3, [r2, #0]
        if (SHELL_CMD_HISTORY_LEN == cmd_hist_get_idx)
 80074f2:	2b08      	cmp	r3, #8
 80074f4:	d01d      	beq.n	8007532 <load_command_from_command_history+0x86>
        {
            cmd_hist_get_idx = 0;
        }
    }
    
    cmd_buf_reset();
 80074f6:	f7ff ffcb 	bl	8007490 <cmd_buf_reset>
    strncpy(cmd_buf, cmd_hist[cmd_hist_get_idx], sizeof(cmd_buf));
 80074fa:	4b10      	ldr	r3, [pc, #64]	; (800753c <load_command_from_command_history+0x90>)
 80074fc:	6819      	ldr	r1, [r3, #0]
 80074fe:	4c11      	ldr	r4, [pc, #68]	; (8007544 <load_command_from_command_history+0x98>)
 8007500:	2240      	movs	r2, #64	; 0x40
 8007502:	4b11      	ldr	r3, [pc, #68]	; (8007548 <load_command_from_command_history+0x9c>)
 8007504:	eb03 1181 	add.w	r1, r3, r1, lsl #6
 8007508:	4620      	mov	r0, r4
 800750a:	f002 f9f3 	bl	80098f4 <strncpy>
    cmd_buf_idx = strlen(cmd_buf);
 800750e:	4620      	mov	r0, r4
 8007510:	f7f8 fe1e 	bl	8000150 <strlen>
 8007514:	4b0d      	ldr	r3, [pc, #52]	; (800754c <load_command_from_command_history+0xa0>)
 8007516:	6018      	str	r0, [r3, #0]
}
 8007518:	bd10      	pop	{r4, pc}
            if (0 == cmd_hist_put_idx)
 800751a:	2a00      	cmp	r2, #0
 800751c:	d1e6      	bne.n	80074ec <load_command_from_command_history+0x40>
                cmd_hist_get_idx = 0;
 800751e:	4b07      	ldr	r3, [pc, #28]	; (800753c <load_command_from_command_history+0x90>)
 8007520:	601a      	str	r2, [r3, #0]
                cmd_buf_reset();
 8007522:	f7ff ffb5 	bl	8007490 <cmd_buf_reset>
                return;
 8007526:	e7f7      	b.n	8007518 <load_command_from_command_history+0x6c>
                cmd_hist_get_idx++;
 8007528:	4b04      	ldr	r3, [pc, #16]	; (800753c <load_command_from_command_history+0x90>)
 800752a:	6019      	str	r1, [r3, #0]
                cmd_buf_reset();
 800752c:	f7ff ffb0 	bl	8007490 <cmd_buf_reset>
                return;
 8007530:	e7f2      	b.n	8007518 <load_command_from_command_history+0x6c>
            cmd_hist_get_idx = 0;
 8007532:	4613      	mov	r3, r2
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	e7dd      	b.n	80074f6 <load_command_from_command_history+0x4a>
 800753a:	bf00      	nop
 800753c:	20000680 	.word	0x20000680
 8007540:	20000684 	.word	0x20000684
 8007544:	2000043c 	.word	0x2000043c
 8007548:	20000480 	.word	0x20000480
 800754c:	2000047c 	.word	0x2000047c

08007550 <uart_receive_byte>:
{
 8007550:	b510      	push	{r4, lr}
 8007552:	4604      	mov	r4, r0
	unsigned char data = tracer_getchar();
 8007554:	f7ff fc9a 	bl	8006e8c <tracer_getchar>
	if (data == 0)
 8007558:	b110      	cbz	r0, 8007560 <uart_receive_byte+0x10>
		*byte = data;
 800755a:	7020      	strb	r0, [r4, #0]
		return 1;
 800755c:	2001      	movs	r0, #1
}
 800755e:	bd10      	pop	{r4, pc}
		*byte = 0;
 8007560:	7020      	strb	r0, [r4, #0]
		return 0;
 8007562:	e7fc      	b.n	800755e <uart_receive_byte+0xe>

08007564 <uart_send>:
{
 8007564:	b508      	push	{r3, lr}
	tracer_puts(bytes,size);
 8007566:	f7ff fc71 	bl	8006e4c <tracer_puts>
}
 800756a:	2001      	movs	r0, #1
 800756c:	bd08      	pop	{r3, pc}

0800756e <send_vt100_key>:

static void send_vt100_key(vt100_key_t key)
{
 800756e:	b508      	push	{r3, lr}
    vt100_keycode_t * keycode = vt100_get_keycode(key);
 8007570:	f001 f944 	bl	80087fc <vt100_get_keycode>
    if (NULL != keycode)
 8007574:	b118      	cbz	r0, 800757e <send_vt100_key+0x10>
    {
        uart_send( keycode->code, keycode->code_len);
 8007576:	7a01      	ldrb	r1, [r0, #8]
 8007578:	6840      	ldr	r0, [r0, #4]
 800757a:	f7ff fff3 	bl	8007564 <uart_send>
    }
}
 800757e:	bd08      	pop	{r3, pc}

08007580 <print>:
{	
 8007580:	b40f      	push	{r0, r1, r2, r3}
 8007582:	b530      	push	{r4, r5, lr}
 8007584:	b083      	sub	sp, #12
 8007586:	ab06      	add	r3, sp, #24
 8007588:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
 800758c:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 800758e:	4c0d      	ldr	r4, [pc, #52]	; (80075c4 <print+0x44>)
 8007590:	217c      	movs	r1, #124	; 0x7c
 8007592:	4620      	mov	r0, r4
 8007594:	f002 fad6 	bl	8009b44 <vsniprintf>
    strcat(dbgMsg, "\r\n");
 8007598:	4620      	mov	r0, r4
 800759a:	f7f8 fdd9 	bl	8000150 <strlen>
 800759e:	1822      	adds	r2, r4, r0
 80075a0:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <print+0x48>)
 80075a2:	8819      	ldrh	r1, [r3, #0]
 80075a4:	789b      	ldrb	r3, [r3, #2]
 80075a6:	5221      	strh	r1, [r4, r0]
 80075a8:	7093      	strb	r3, [r2, #2]
    len = strlen(dbgMsg);
 80075aa:	4620      	mov	r0, r4
 80075ac:	f7f8 fdd0 	bl	8000150 <strlen>
    (void) uart_send((uint8_t *)dbgMsg, (uint16_t) len);		
 80075b0:	b281      	uxth	r1, r0
 80075b2:	4620      	mov	r0, r4
 80075b4:	f7ff ffd6 	bl	8007564 <uart_send>
}
 80075b8:	b003      	add	sp, #12
 80075ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075be:	b004      	add	sp, #16
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000688 	.word	0x20000688
 80075c8:	0800cb84 	.word	0x0800cb84

080075cc <process_shell_cmd>:

static void process_shell_cmd(void)
{
 80075cc:	b530      	push	{r4, r5, lr}
 80075ce:	b08b      	sub	sp, #44	; 0x2c
    char * argv[MAX_ARGUMENT_NUM + 1];
	int argc = 0;
    int i;
	
	if (0 != strlen(cmd_buf))
 80075d0:	4b2f      	ldr	r3, [pc, #188]	; (8007690 <process_shell_cmd+0xc4>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	b99b      	cbnz	r3, 80075fe <process_shell_cmd+0x32>
    {
        save_command_to_command_history();
    }
    
    argc = parse_shell_cmd(cmd_buf, argv);
 80075d6:	a901      	add	r1, sp, #4
 80075d8:	482d      	ldr	r0, [pc, #180]	; (8007690 <process_shell_cmd+0xc4>)
 80075da:	f7ff ff41 	bl	8007460 <parse_shell_cmd>
 80075de:	4605      	mov	r5, r0
    
    if (0 == strncmp(argv[0], "help", SHELL_CMD_BUF_LEN))
 80075e0:	2240      	movs	r2, #64	; 0x40
 80075e2:	492c      	ldr	r1, [pc, #176]	; (8007694 <process_shell_cmd+0xc8>)
 80075e4:	9801      	ldr	r0, [sp, #4]
 80075e6:	f002 f973 	bl	80098d0 <strncmp>
 80075ea:	4604      	mov	r4, r0
 80075ec:	b150      	cbz	r0, 8007604 <process_shell_cmd+0x38>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
        {
            print(shell_cmd_list[i].cmd);
        }
    }
    if (0 == strncmp(argv[0], "cls", SHELL_CMD_BUF_LEN))
 80075ee:	2240      	movs	r2, #64	; 0x40
 80075f0:	4929      	ldr	r1, [pc, #164]	; (8007698 <process_shell_cmd+0xcc>)
 80075f2:	9801      	ldr	r0, [sp, #4]
 80075f4:	f002 f96c 	bl	80098d0 <strncmp>
 80075f8:	b1a8      	cbz	r0, 8007626 <process_shell_cmd+0x5a>
        send_vt100_key(VT100_KEY_CLEAR_SCREEN);
        send_vt100_key(VT100_KEY_MOVE_CURSOR_HOME);
    }
    else
    {
        for(i = 0; i < SHELL_CMD_NUM; ++i)
 80075fa:	2400      	movs	r4, #0
 80075fc:	e01b      	b.n	8007636 <process_shell_cmd+0x6a>
        save_command_to_command_history();
 80075fe:	f7ff ff11 	bl	8007424 <save_command_to_command_history>
 8007602:	e7e8      	b.n	80075d6 <process_shell_cmd+0xa>
        print("");
 8007604:	4825      	ldr	r0, [pc, #148]	; (800769c <process_shell_cmd+0xd0>)
 8007606:	f7ff ffbb 	bl	8007580 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 800760a:	e007      	b.n	800761c <process_shell_cmd+0x50>
            print(shell_cmd_list[i].cmd);
 800760c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8007610:	0093      	lsls	r3, r2, #2
 8007612:	4a23      	ldr	r2, [pc, #140]	; (80076a0 <process_shell_cmd+0xd4>)
 8007614:	58d0      	ldr	r0, [r2, r3]
 8007616:	f7ff ffb3 	bl	8007580 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 800761a:	3401      	adds	r4, #1
 800761c:	4b21      	ldr	r3, [pc, #132]	; (80076a4 <process_shell_cmd+0xd8>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	42a3      	cmp	r3, r4
 8007622:	dcf3      	bgt.n	800760c <process_shell_cmd+0x40>
 8007624:	e7e3      	b.n	80075ee <process_shell_cmd+0x22>
        send_vt100_key(VT100_KEY_CLEAR_SCREEN);
 8007626:	200d      	movs	r0, #13
 8007628:	f7ff ffa1 	bl	800756e <send_vt100_key>
        send_vt100_key(VT100_KEY_MOVE_CURSOR_HOME);
 800762c:	200e      	movs	r0, #14
 800762e:	f7ff ff9e 	bl	800756e <send_vt100_key>
 8007632:	e024      	b.n	800767e <process_shell_cmd+0xb2>
        for(i = 0; i < SHELL_CMD_NUM; ++i)
 8007634:	3401      	adds	r4, #1
 8007636:	4b1b      	ldr	r3, [pc, #108]	; (80076a4 <process_shell_cmd+0xd8>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	42a3      	cmp	r3, r4
 800763c:	dd1e      	ble.n	800767c <process_shell_cmd+0xb0>
        {
            if(0 == strncmp(argv[0], shell_cmd_list[i].cmd, SHELL_CMD_BUF_LEN))
 800763e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8007642:	0093      	lsls	r3, r2, #2
 8007644:	2240      	movs	r2, #64	; 0x40
 8007646:	4916      	ldr	r1, [pc, #88]	; (80076a0 <process_shell_cmd+0xd4>)
 8007648:	58c9      	ldr	r1, [r1, r3]
 800764a:	9801      	ldr	r0, [sp, #4]
 800764c:	f002 f940 	bl	80098d0 <strncmp>
 8007650:	2800      	cmp	r0, #0
 8007652:	d1ef      	bne.n	8007634 <process_shell_cmd+0x68>
            {
                if(0 == shell_cmd_list[i].handler(argc, argv))
 8007654:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007658:	009a      	lsls	r2, r3, #2
 800765a:	4b11      	ldr	r3, [pc, #68]	; (80076a0 <process_shell_cmd+0xd4>)
 800765c:	4413      	add	r3, r2
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	a901      	add	r1, sp, #4
 8007662:	4628      	mov	r0, r5
 8007664:	4798      	blx	r3
 8007666:	2800      	cmp	r0, #0
 8007668:	d1e4      	bne.n	8007634 <process_shell_cmd+0x68>
                {
                    print(shell_cmd_list[i].desc);
 800766a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800766e:	009a      	lsls	r2, r3, #2
 8007670:	4b0b      	ldr	r3, [pc, #44]	; (80076a0 <process_shell_cmd+0xd4>)
 8007672:	4413      	add	r3, r2
 8007674:	6858      	ldr	r0, [r3, #4]
 8007676:	f7ff ff83 	bl	8007580 <print>
 800767a:	e7db      	b.n	8007634 <process_shell_cmd+0x68>
                }
            }
        }
        if (i == SHELL_CMD_NUM)
 800767c:	d003      	beq.n	8007686 <process_shell_cmd+0xba>
         print("???");
    }
    
    cmd_buf_reset();
 800767e:	f7ff ff07 	bl	8007490 <cmd_buf_reset>
}
 8007682:	b00b      	add	sp, #44	; 0x2c
 8007684:	bd30      	pop	{r4, r5, pc}
         print("???");
 8007686:	4808      	ldr	r0, [pc, #32]	; (80076a8 <process_shell_cmd+0xdc>)
 8007688:	f7ff ff7a 	bl	8007580 <print>
 800768c:	e7f7      	b.n	800767e <process_shell_cmd+0xb2>
 800768e:	bf00      	nop
 8007690:	2000043c 	.word	0x2000043c
 8007694:	0800cb88 	.word	0x0800cb88
 8007698:	0800cb90 	.word	0x0800cb90
 800769c:	0800cfb8 	.word	0x0800cfb8
 80076a0:	0800cc54 	.word	0x0800cc54
 80076a4:	0800cb9c 	.word	0x0800cb9c
 80076a8:	0800cb94 	.word	0x0800cb94

080076ac <print_no_newline>:
{	
 80076ac:	b40f      	push	{r0, r1, r2, r3}
 80076ae:	b510      	push	{r4, lr}
 80076b0:	b082      	sub	sp, #8
 80076b2:	ab04      	add	r3, sp, #16
 80076b4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
 80076b8:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 80076ba:	4c08      	ldr	r4, [pc, #32]	; (80076dc <print_no_newline+0x30>)
 80076bc:	217c      	movs	r1, #124	; 0x7c
 80076be:	4620      	mov	r0, r4
 80076c0:	f002 fa40 	bl	8009b44 <vsniprintf>
    (void) uart_send((uint8_t *)dbgMsg, (uint16_t) strlen(dbgMsg));		
 80076c4:	4620      	mov	r0, r4
 80076c6:	f7f8 fd43 	bl	8000150 <strlen>
 80076ca:	b281      	uxth	r1, r0
 80076cc:	4620      	mov	r0, r4
 80076ce:	f7ff ff49 	bl	8007564 <uart_send>
}
 80076d2:	b002      	add	sp, #8
 80076d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d8:	b004      	add	sp, #16
 80076da:	4770      	bx	lr
 80076dc:	20000688 	.word	0x20000688

080076e0 <shell_process>:

void shell_process(void)
{
 80076e0:	b510      	push	{r4, lr}
 80076e2:	b082      	sub	sp, #8
	char byte;
	const char prompt[] = "DBG>";
 80076e4:	4b38      	ldr	r3, [pc, #224]	; (80077c8 <shell_process+0xe8>)
 80076e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80076ea:	9000      	str	r0, [sp, #0]
 80076ec:	f88d 1004 	strb.w	r1, [sp, #4]
	
	//Both Ports are set to Serial DMX
	if (UART_mode_SERIAL && UART_mode_USB)
 80076f0:	4b36      	ldr	r3, [pc, #216]	; (80077cc <shell_process+0xec>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	b16b      	cbz	r3, 8007712 <shell_process+0x32>
 80076f6:	4b36      	ldr	r3, [pc, #216]	; (80077d0 <shell_process+0xf0>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	b153      	cbz	r3, 8007712 <shell_process+0x32>
            }
            load_command_from_command_history(1);
            print_no_newline(cmd_buf);
        }
	}
}
 80076fc:	b002      	add	sp, #8
 80076fe:	bd10      	pop	{r4, pc}
            cmd_buf_add_char(byte);
 8007700:	ac02      	add	r4, sp, #8
 8007702:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 8007706:	f7ff fe6f 	bl	80073e8 <cmd_buf_add_char>
            uart_send((uint8_t*) &byte, 1);
 800770a:	2101      	movs	r1, #1
 800770c:	4620      	mov	r0, r4
 800770e:	f7ff ff29 	bl	8007564 <uart_send>
	while (1 == uart_receive_byte((uint8_t*)&byte))
 8007712:	f10d 0007 	add.w	r0, sp, #7
 8007716:	f7ff ff1b 	bl	8007550 <uart_receive_byte>
 800771a:	2801      	cmp	r0, #1
 800771c:	d1ee      	bne.n	80076fc <shell_process+0x1c>
        vt100_key_t key = vt100_process_byte(byte);
 800771e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8007722:	f001 f83b 	bl	800879c <vt100_process_byte>
        if (VT100_KEY_PRINTABLE == key)
 8007726:	2801      	cmp	r0, #1
 8007728:	d0ea      	beq.n	8007700 <shell_process+0x20>
        else if (VT100_KEY_ENTER == key)
 800772a:	2808      	cmp	r0, #8
 800772c:	d014      	beq.n	8007758 <shell_process+0x78>
        else if (VT100_KEY_INVALID == key)
 800772e:	2800      	cmp	r0, #0
 8007730:	d0ef      	beq.n	8007712 <shell_process+0x32>
        else if (VT100_KEY_BACKSPACE == key)
 8007732:	2807      	cmp	r0, #7
 8007734:	d01f      	beq.n	8007776 <shell_process+0x96>
        else if (VT100_KEY_CURSOR_UP == key)
 8007736:	2802      	cmp	r0, #2
 8007738:	d026      	beq.n	8007788 <shell_process+0xa8>
        else if (VT100_KEY_CURSOR_DOWN == key)
 800773a:	2803      	cmp	r0, #3
 800773c:	d1e9      	bne.n	8007712 <shell_process+0x32>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 800773e:	200b      	movs	r0, #11
 8007740:	f7ff ff15 	bl	800756e <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 8007744:	2400      	movs	r4, #0
 8007746:	4b23      	ldr	r3, [pc, #140]	; (80077d4 <shell_process+0xf4>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	42a3      	cmp	r3, r4
 800774c:	dd34      	ble.n	80077b8 <shell_process+0xd8>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 800774e:	200c      	movs	r0, #12
 8007750:	f7ff ff0d 	bl	800756e <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 8007754:	3401      	adds	r4, #1
 8007756:	e7f6      	b.n	8007746 <shell_process+0x66>
			print("");
 8007758:	481f      	ldr	r0, [pc, #124]	; (80077d8 <shell_process+0xf8>)
 800775a:	f7ff ff11 	bl	8007580 <print>
			process_shell_cmd();
 800775e:	f7ff ff35 	bl	80075cc <process_shell_cmd>
            uart_send((uint8_t*) &byte, 1);
 8007762:	2101      	movs	r1, #1
 8007764:	f10d 0007 	add.w	r0, sp, #7
 8007768:	f7ff fefc 	bl	8007564 <uart_send>
			print_no_newline("\n%s", prompt);
 800776c:	4669      	mov	r1, sp
 800776e:	481b      	ldr	r0, [pc, #108]	; (80077dc <shell_process+0xfc>)
 8007770:	f7ff ff9c 	bl	80076ac <print_no_newline>
 8007774:	e7cd      	b.n	8007712 <shell_process+0x32>
            cmd_buf_remove_char();
 8007776:	f7ff fe45 	bl	8007404 <cmd_buf_remove_char>
            send_vt100_key(VT100_KEY_BACKSPACE);
 800777a:	2007      	movs	r0, #7
 800777c:	f7ff fef7 	bl	800756e <send_vt100_key>
            send_vt100_key(VT100_KEY_CLEAR_EOL);
 8007780:	200a      	movs	r0, #10
 8007782:	f7ff fef4 	bl	800756e <send_vt100_key>
 8007786:	e7c4      	b.n	8007712 <shell_process+0x32>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 8007788:	200b      	movs	r0, #11
 800778a:	f7ff fef0 	bl	800756e <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 800778e:	2400      	movs	r4, #0
 8007790:	e003      	b.n	800779a <shell_process+0xba>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 8007792:	200c      	movs	r0, #12
 8007794:	f7ff feeb 	bl	800756e <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 8007798:	3401      	adds	r4, #1
 800779a:	4b0e      	ldr	r3, [pc, #56]	; (80077d4 <shell_process+0xf4>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3304      	adds	r3, #4
 80077a0:	42a3      	cmp	r3, r4
 80077a2:	d8f6      	bhi.n	8007792 <shell_process+0xb2>
			print_no_newline(prompt);
 80077a4:	4668      	mov	r0, sp
 80077a6:	f7ff ff81 	bl	80076ac <print_no_newline>
            load_command_from_command_history(0);
 80077aa:	2000      	movs	r0, #0
 80077ac:	f7ff fe7e 	bl	80074ac <load_command_from_command_history>
            print_no_newline(cmd_buf);
 80077b0:	480b      	ldr	r0, [pc, #44]	; (80077e0 <shell_process+0x100>)
 80077b2:	f7ff ff7b 	bl	80076ac <print_no_newline>
 80077b6:	e7ac      	b.n	8007712 <shell_process+0x32>
            load_command_from_command_history(1);
 80077b8:	2001      	movs	r0, #1
 80077ba:	f7ff fe77 	bl	80074ac <load_command_from_command_history>
            print_no_newline(cmd_buf);
 80077be:	4808      	ldr	r0, [pc, #32]	; (80077e0 <shell_process+0x100>)
 80077c0:	f7ff ff74 	bl	80076ac <print_no_newline>
 80077c4:	e7a5      	b.n	8007712 <shell_process+0x32>
 80077c6:	bf00      	nop
 80077c8:	0800c65c 	.word	0x0800c65c
 80077cc:	20000430 	.word	0x20000430
 80077d0:	20000431 	.word	0x20000431
 80077d4:	2000047c 	.word	0x2000047c
 80077d8:	0800cfb8 	.word	0x0800cfb8
 80077dc:	0800cb98 	.word	0x0800cb98
 80077e0:	2000043c 	.word	0x2000043c

080077e4 <shell_cmd_settargetfps>:
	return 1;
}

static int shell_cmd_settargetfps(int argc, char ** argv)
{
	if (argc == 2)
 80077e4:	2802      	cmp	r0, #2
 80077e6:	d001      	beq.n	80077ec <shell_cmd_settargetfps+0x8>
	{
		settings.frame_ms_target =  atoi(argv[1]);
	}
	else
	{
		return 0;
 80077e8:	2000      	movs	r0, #0
	}
	return 1;
}
 80077ea:	4770      	bx	lr
{
 80077ec:	b508      	push	{r3, lr}
		settings.frame_ms_target =  atoi(argv[1]);
 80077ee:	6848      	ldr	r0, [r1, #4]
 80077f0:	f001 ff4f 	bl	8009692 <atoi>
 80077f4:	4b01      	ldr	r3, [pc, #4]	; (80077fc <shell_cmd_settargetfps+0x18>)
 80077f6:	62d8      	str	r0, [r3, #44]	; 0x2c
	return 1;
 80077f8:	2001      	movs	r0, #1
}
 80077fa:	bd08      	pop	{r3, pc}
 80077fc:	20000af8 	.word	0x20000af8

08007800 <shell_cmd_switchuartmode>:
{
 8007800:	b508      	push	{r3, lr}
	if (argc == 2)
 8007802:	2802      	cmp	r0, #2
 8007804:	d002      	beq.n	800780c <shell_cmd_switchuartmode+0xc>
		return 0;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	bd08      	pop	{r3, pc}
		switch (atoi(argv[1]))
 800780c:	6848      	ldr	r0, [r1, #4]
 800780e:	f001 ff40 	bl	8009692 <atoi>
 8007812:	4603      	mov	r3, r0
 8007814:	b118      	cbz	r0, 800781e <shell_cmd_switchuartmode+0x1e>
 8007816:	2801      	cmp	r0, #1
 8007818:	d005      	beq.n	8007826 <shell_cmd_switchuartmode+0x26>
	return 1;
 800781a:	2301      	movs	r3, #1
 800781c:	e7f4      	b.n	8007808 <shell_cmd_switchuartmode+0x8>
			UART_mode_SERIAL = (uint8_t)UART_MODE_DMX;
 800781e:	2301      	movs	r3, #1
 8007820:	4a03      	ldr	r2, [pc, #12]	; (8007830 <shell_cmd_switchuartmode+0x30>)
 8007822:	6013      	str	r3, [r2, #0]
			break;
 8007824:	e7f0      	b.n	8007808 <shell_cmd_switchuartmode+0x8>
			UART_mode_USB = (uint8_t)UART_MODE_DMX;
 8007826:	4a03      	ldr	r2, [pc, #12]	; (8007834 <shell_cmd_switchuartmode+0x34>)
 8007828:	2101      	movs	r1, #1
 800782a:	6011      	str	r1, [r2, #0]
			break;
 800782c:	e7ec      	b.n	8007808 <shell_cmd_switchuartmode+0x8>
 800782e:	bf00      	nop
 8007830:	20000430 	.word	0x20000430
 8007834:	20000431 	.word	0x20000431

08007838 <shell_cmd_setuartmode>:
{
 8007838:	b538      	push	{r3, r4, r5, lr}
	if (argc == 2)
 800783a:	2802      	cmp	r0, #2
 800783c:	d002      	beq.n	8007844 <shell_cmd_setuartmode+0xc>
		return 0;
 800783e:	2400      	movs	r4, #0
}
 8007840:	4620      	mov	r0, r4
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	460d      	mov	r5, r1
		switch (atoi(argv[1]))
 8007846:	6848      	ldr	r0, [r1, #4]
 8007848:	f001 ff23 	bl	8009692 <atoi>
 800784c:	4604      	mov	r4, r0
 800784e:	b118      	cbz	r0, 8007858 <shell_cmd_setuartmode+0x20>
 8007850:	2801      	cmp	r0, #1
 8007852:	d009      	beq.n	8007868 <shell_cmd_setuartmode+0x30>
	return 1;
 8007854:	2401      	movs	r4, #1
 8007856:	e7f3      	b.n	8007840 <shell_cmd_setuartmode+0x8>
			settings.UART_Mode_UART = atoi(argv[2]);
 8007858:	68a8      	ldr	r0, [r5, #8]
 800785a:	f001 ff1a 	bl	8009692 <atoi>
 800785e:	4b06      	ldr	r3, [pc, #24]	; (8007878 <shell_cmd_setuartmode+0x40>)
 8007860:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
	return 1;
 8007864:	2401      	movs	r4, #1
			break;
 8007866:	e7eb      	b.n	8007840 <shell_cmd_setuartmode+0x8>
			settings.UART_Mode_USB = atoi(argv[2]);
 8007868:	68a8      	ldr	r0, [r5, #8]
 800786a:	f001 ff12 	bl	8009692 <atoi>
 800786e:	4b02      	ldr	r3, [pc, #8]	; (8007878 <shell_cmd_setuartmode+0x40>)
 8007870:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37
			break;
 8007874:	e7e4      	b.n	8007840 <shell_cmd_setuartmode+0x8>
 8007876:	bf00      	nop
 8007878:	20000af8 	.word	0x20000af8

0800787c <shell_cmd_setstriplength>:
{
 800787c:	b538      	push	{r3, r4, r5, lr}
	if (argc == 2)
 800787e:	2802      	cmp	r0, #2
 8007880:	d002      	beq.n	8007888 <shell_cmd_setstriplength+0xc>
		return 0;
 8007882:	2400      	movs	r4, #0
}
 8007884:	4620      	mov	r0, r4
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	460d      	mov	r5, r1
		switch (atoi(argv[1]))
 800788a:	6848      	ldr	r0, [r1, #4]
 800788c:	f001 ff01 	bl	8009692 <atoi>
 8007890:	4604      	mov	r4, r0
 8007892:	b118      	cbz	r0, 800789c <shell_cmd_setstriplength+0x20>
 8007894:	2801      	cmp	r0, #1
 8007896:	d008      	beq.n	80078aa <shell_cmd_setstriplength+0x2e>
	return 1;
 8007898:	2401      	movs	r4, #1
 800789a:	e7f3      	b.n	8007884 <shell_cmd_setstriplength+0x8>
			settings.strip1_length = atoi(argv[2]);
 800789c:	68a8      	ldr	r0, [r5, #8]
 800789e:	f001 fef8 	bl	8009692 <atoi>
 80078a2:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <shell_cmd_setstriplength+0x3c>)
 80078a4:	8658      	strh	r0, [r3, #50]	; 0x32
	return 1;
 80078a6:	2401      	movs	r4, #1
			break;
 80078a8:	e7ec      	b.n	8007884 <shell_cmd_setstriplength+0x8>
			settings.strip2_length = atoi(argv[2]);
 80078aa:	68a8      	ldr	r0, [r5, #8]
 80078ac:	f001 fef1 	bl	8009692 <atoi>
 80078b0:	4b01      	ldr	r3, [pc, #4]	; (80078b8 <shell_cmd_setstriplength+0x3c>)
 80078b2:	8698      	strh	r0, [r3, #52]	; 0x34
			break;
 80078b4:	e7e6      	b.n	8007884 <shell_cmd_setstriplength+0x8>
 80078b6:	bf00      	nop
 80078b8:	20000af8 	.word	0x20000af8

080078bc <shell_cmd_settriggerctrl>:
{
 80078bc:	b570      	push	{r4, r5, r6, lr}
	if (argc == 5)
 80078be:	2805      	cmp	r0, #5
 80078c0:	d002      	beq.n	80078c8 <shell_cmd_settriggerctrl+0xc>
		return 0;
 80078c2:	2400      	movs	r4, #0
}
 80078c4:	4620      	mov	r0, r4
 80078c6:	bd70      	pop	{r4, r5, r6, pc}
 80078c8:	460d      	mov	r5, r1
		switch (atoi(argv[1]))
 80078ca:	6848      	ldr	r0, [r1, #4]
 80078cc:	f001 fee1 	bl	8009692 <atoi>
 80078d0:	4604      	mov	r4, r0
 80078d2:	b118      	cbz	r0, 80078dc <shell_cmd_settriggerctrl+0x20>
 80078d4:	2801      	cmp	r0, #1
 80078d6:	d018      	beq.n	800790a <shell_cmd_settriggerctrl+0x4e>
	return 1;
 80078d8:	2401      	movs	r4, #1
 80078da:	e7f3      	b.n	80078c4 <shell_cmd_settriggerctrl+0x8>
			settings.trigger_reg_hilo_A0 = atoi(argv[2]);
 80078dc:	68a8      	ldr	r0, [r5, #8]
 80078de:	f001 fed8 	bl	8009692 <atoi>
 80078e2:	4c15      	ldr	r4, [pc, #84]	; (8007938 <shell_cmd_settriggerctrl+0x7c>)
 80078e4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
			settings.trigger_val_hilo_A0 = atoi(argv[3]);
 80078e8:	68e8      	ldr	r0, [r5, #12]
 80078ea:	f001 fed2 	bl	8009692 <atoi>
 80078ee:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
			settings.trigger_reg_lohi_A0 = atoi(argv[4]);
 80078f2:	6928      	ldr	r0, [r5, #16]
 80078f4:	f001 fecd 	bl	8009692 <atoi>
 80078f8:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
			settings.trigger_val_lohi_A0 = atoi(argv[5]);
 80078fc:	6968      	ldr	r0, [r5, #20]
 80078fe:	f001 fec8 	bl	8009692 <atoi>
 8007902:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	return 1;
 8007906:	2401      	movs	r4, #1
			break;
 8007908:	e7dc      	b.n	80078c4 <shell_cmd_settriggerctrl+0x8>
			settings.trigger_reg_hilo_A1 = atoi(argv[2]);
 800790a:	68a8      	ldr	r0, [r5, #8]
 800790c:	f001 fec1 	bl	8009692 <atoi>
 8007910:	4e09      	ldr	r6, [pc, #36]	; (8007938 <shell_cmd_settriggerctrl+0x7c>)
 8007912:	f886 0043 	strb.w	r0, [r6, #67]	; 0x43
			settings.trigger_val_hilo_A1 = atoi(argv[3]);
 8007916:	68e8      	ldr	r0, [r5, #12]
 8007918:	f001 febb 	bl	8009692 <atoi>
 800791c:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
			settings.trigger_reg_lohi_A1 = atoi(argv[4]);
 8007920:	6928      	ldr	r0, [r5, #16]
 8007922:	f001 feb6 	bl	8009692 <atoi>
 8007926:	f886 0041 	strb.w	r0, [r6, #65]	; 0x41
			settings.trigger_val_lohi_A1 = atoi(argv[5]);
 800792a:	6968      	ldr	r0, [r5, #20]
 800792c:	f001 feb1 	bl	8009692 <atoi>
 8007930:	f886 0042 	strb.w	r0, [r6, #66]	; 0x42
			break;
 8007934:	e7c6      	b.n	80078c4 <shell_cmd_settriggerctrl+0x8>
 8007936:	bf00      	nop
 8007938:	20000af8 	.word	0x20000af8

0800793c <shell_cmd_settriggerconfig>:
{
 800793c:	b570      	push	{r4, r5, r6, lr}
	if (argc == 4)
 800793e:	2804      	cmp	r0, #4
 8007940:	d002      	beq.n	8007948 <shell_cmd_settriggerconfig+0xc>
		return 0;
 8007942:	2400      	movs	r4, #0
}
 8007944:	4620      	mov	r0, r4
 8007946:	bd70      	pop	{r4, r5, r6, pc}
 8007948:	460d      	mov	r5, r1
		switch (atoi(argv[1]))
 800794a:	6848      	ldr	r0, [r1, #4]
 800794c:	f001 fea1 	bl	8009692 <atoi>
 8007950:	4604      	mov	r4, r0
 8007952:	b118      	cbz	r0, 800795c <shell_cmd_settriggerconfig+0x20>
 8007954:	2801      	cmp	r0, #1
 8007956:	d013      	beq.n	8007980 <shell_cmd_settriggerconfig+0x44>
	return 1;
 8007958:	2401      	movs	r4, #1
 800795a:	e7f3      	b.n	8007944 <shell_cmd_settriggerconfig+0x8>
			settings.trigger_mode_A0 = atoi(argv[2]);
 800795c:	68a8      	ldr	r0, [r5, #8]
 800795e:	f001 fe98 	bl	8009692 <atoi>
 8007962:	4c10      	ldr	r4, [pc, #64]	; (80079a4 <shell_cmd_settriggerconfig+0x68>)
 8007964:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
			settings.trigger_reg_A0 = atoi(argv[3]);
 8007968:	68e8      	ldr	r0, [r5, #12]
 800796a:	f001 fe92 	bl	8009692 <atoi>
 800796e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
			settings.trigger_level_A0 = atoi(argv[4]);
 8007972:	6928      	ldr	r0, [r5, #16]
 8007974:	f001 fe8d 	bl	8009692 <atoi>
 8007978:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
	return 1;
 800797c:	2401      	movs	r4, #1
			break;
 800797e:	e7e1      	b.n	8007944 <shell_cmd_settriggerconfig+0x8>
			settings.trigger_mode_A1 = atoi(argv[2]);
 8007980:	68a8      	ldr	r0, [r5, #8]
 8007982:	f001 fe86 	bl	8009692 <atoi>
 8007986:	4e07      	ldr	r6, [pc, #28]	; (80079a4 <shell_cmd_settriggerconfig+0x68>)
 8007988:	f886 003f 	strb.w	r0, [r6, #63]	; 0x3f
			settings.trigger_reg_A1 = atoi(argv[3]);
 800798c:	68e8      	ldr	r0, [r5, #12]
 800798e:	f001 fe80 	bl	8009692 <atoi>
 8007992:	f886 0040 	strb.w	r0, [r6, #64]	; 0x40
			settings.trigger_level_A1 = atoi(argv[4]);
 8007996:	6928      	ldr	r0, [r5, #16]
 8007998:	f001 fe7b 	bl	8009692 <atoi>
 800799c:	f886 0045 	strb.w	r0, [r6, #69]	; 0x45
			break;
 80079a0:	e7d0      	b.n	8007944 <shell_cmd_settriggerconfig+0x8>
 80079a2:	bf00      	nop
 80079a4:	20000af8 	.word	0x20000af8

080079a8 <shell_cmd_setoffset>:
	if (argc == 2)
 80079a8:	2802      	cmp	r0, #2
 80079aa:	d001      	beq.n	80079b0 <shell_cmd_setoffset+0x8>
		return 0;
 80079ac:	2000      	movs	r0, #0
}
 80079ae:	4770      	bx	lr
{
 80079b0:	b510      	push	{r4, lr}
 80079b2:	460c      	mov	r4, r1
		switch (atoi(argv[1]))
 80079b4:	6848      	ldr	r0, [r1, #4]
 80079b6:	f001 fe6c 	bl	8009692 <atoi>
 80079ba:	b148      	cbz	r0, 80079d0 <shell_cmd_setoffset+0x28>
 80079bc:	2802      	cmp	r0, #2
 80079be:	d00f      	beq.n	80079e0 <shell_cmd_setoffset+0x38>
			settings.offset_green = atoi(argv[2]);
 80079c0:	68a0      	ldr	r0, [r4, #8]
 80079c2:	f001 fe66 	bl	8009692 <atoi>
 80079c6:	4b0a      	ldr	r3, [pc, #40]	; (80079f0 <shell_cmd_setoffset+0x48>)
 80079c8:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
	return 1;
 80079cc:	2001      	movs	r0, #1
			break;
 80079ce:	e006      	b.n	80079de <shell_cmd_setoffset+0x36>
			settings.offset_red = atoi(argv[2]);
 80079d0:	68a0      	ldr	r0, [r4, #8]
 80079d2:	f001 fe5e 	bl	8009692 <atoi>
 80079d6:	4b06      	ldr	r3, [pc, #24]	; (80079f0 <shell_cmd_setoffset+0x48>)
 80079d8:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
	return 1;
 80079dc:	2001      	movs	r0, #1
}
 80079de:	bd10      	pop	{r4, pc}
			settings.offset_blue = atoi(argv[2]);
 80079e0:	68a0      	ldr	r0, [r4, #8]
 80079e2:	f001 fe56 	bl	8009692 <atoi>
 80079e6:	4b02      	ldr	r3, [pc, #8]	; (80079f0 <shell_cmd_setoffset+0x48>)
 80079e8:	f8a3 0052 	strh.w	r0, [r3, #82]	; 0x52
	return 1;
 80079ec:	2001      	movs	r0, #1
			break;
 80079ee:	e7f6      	b.n	80079de <shell_cmd_setoffset+0x36>
 80079f0:	20000af8 	.word	0x20000af8

080079f4 <shell_cmd_setgain>:
	if (argc == 2)
 80079f4:	2802      	cmp	r0, #2
 80079f6:	d001      	beq.n	80079fc <shell_cmd_setgain+0x8>
		return 0;
 80079f8:	2000      	movs	r0, #0
}
 80079fa:	4770      	bx	lr
{
 80079fc:	b510      	push	{r4, lr}
 80079fe:	460c      	mov	r4, r1
		switch (atoi(argv[1]))
 8007a00:	6848      	ldr	r0, [r1, #4]
 8007a02:	f001 fe46 	bl	8009692 <atoi>
 8007a06:	b148      	cbz	r0, 8007a1c <shell_cmd_setgain+0x28>
 8007a08:	2802      	cmp	r0, #2
 8007a0a:	d00f      	beq.n	8007a2c <shell_cmd_setgain+0x38>
			settings.gain_green = atoi(argv[2]);
 8007a0c:	68a0      	ldr	r0, [r4, #8]
 8007a0e:	f001 fe40 	bl	8009692 <atoi>
 8007a12:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <shell_cmd_setgain+0x48>)
 8007a14:	f8a3 004e 	strh.w	r0, [r3, #78]	; 0x4e
	return 1;
 8007a18:	2001      	movs	r0, #1
			break;
 8007a1a:	e006      	b.n	8007a2a <shell_cmd_setgain+0x36>
			settings.gain_red = atoi(argv[2]);
 8007a1c:	68a0      	ldr	r0, [r4, #8]
 8007a1e:	f001 fe38 	bl	8009692 <atoi>
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <shell_cmd_setgain+0x48>)
 8007a24:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
	return 1;
 8007a28:	2001      	movs	r0, #1
}
 8007a2a:	bd10      	pop	{r4, pc}
			settings.gain_blue = atoi(argv[2]);
 8007a2c:	68a0      	ldr	r0, [r4, #8]
 8007a2e:	f001 fe30 	bl	8009692 <atoi>
 8007a32:	4b02      	ldr	r3, [pc, #8]	; (8007a3c <shell_cmd_setgain+0x48>)
 8007a34:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
	return 1;
 8007a38:	2001      	movs	r0, #1
			break;
 8007a3a:	e7f6      	b.n	8007a2a <shell_cmd_setgain+0x36>
 8007a3c:	20000af8 	.word	0x20000af8

08007a40 <shell_cmd_currentfps>:
{
 8007a40:	b508      	push	{r3, lr}
	print("Current FPS: %.2f",(float)1/(float)frame_ms);
 8007a42:	4b09      	ldr	r3, [pc, #36]	; (8007a68 <shell_cmd_currentfps+0x28>)
 8007a44:	6818      	ldr	r0, [r3, #0]
 8007a46:	f7f9 f925 	bl	8000c94 <__aeabi_ui2f>
 8007a4a:	4601      	mov	r1, r0
 8007a4c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007a50:	f7f9 fa2c 	bl	8000eac <__aeabi_fdiv>
 8007a54:	f7f8 fce8 	bl	8000428 <__aeabi_f2d>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4803      	ldr	r0, [pc, #12]	; (8007a6c <shell_cmd_currentfps+0x2c>)
 8007a5e:	f7ff fd8f 	bl	8007580 <print>
}
 8007a62:	2001      	movs	r0, #1
 8007a64:	bd08      	pop	{r3, pc}
 8007a66:	bf00      	nop
 8007a68:	20000cc8 	.word	0x20000cc8
 8007a6c:	0800cba0 	.word	0x0800cba0

08007a70 <shell_cmd_setfxmultiplier>:
{
 8007a70:	b508      	push	{r3, lr}
	uint8_t val = atoi(argv[1]);
 8007a72:	6848      	ldr	r0, [r1, #4]
 8007a74:	f001 fe0d 	bl	8009692 <atoi>
 8007a78:	b2c0      	uxtb	r0, r0
	if ((val == 4) || (val == 2) || (val == 1))
 8007a7a:	2804      	cmp	r0, #4
 8007a7c:	d00b      	beq.n	8007a96 <shell_cmd_setfxmultiplier+0x26>
 8007a7e:	2802      	cmp	r0, #2
 8007a80:	d009      	beq.n	8007a96 <shell_cmd_setfxmultiplier+0x26>
 8007a82:	2801      	cmp	r0, #1
 8007a84:	d007      	beq.n	8007a96 <shell_cmd_setfxmultiplier+0x26>
		print("Invalid Multiplier");
 8007a86:	4806      	ldr	r0, [pc, #24]	; (8007aa0 <shell_cmd_setfxmultiplier+0x30>)
 8007a88:	f7ff fd7a 	bl	8007580 <print>
		settings.fx_multiplier = 4;
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <shell_cmd_setfxmultiplier+0x34>)
 8007a8e:	2204      	movs	r2, #4
 8007a90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8007a94:	e002      	b.n	8007a9c <shell_cmd_setfxmultiplier+0x2c>
		settings.fx_multiplier = val;
 8007a96:	4b03      	ldr	r3, [pc, #12]	; (8007aa4 <shell_cmd_setfxmultiplier+0x34>)
 8007a98:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
}
 8007a9c:	2001      	movs	r0, #1
 8007a9e:	bd08      	pop	{r3, pc}
 8007aa0:	0800cd5c 	.word	0x0800cd5c
 8007aa4:	20000af8 	.word	0x20000af8

08007aa8 <shell_cmd_test>:
	if (argc == 1)
 8007aa8:	2801      	cmp	r0, #1
 8007aaa:	d001      	beq.n	8007ab0 <shell_cmd_test+0x8>
	return 0;
 8007aac:	2000      	movs	r0, #0
}
 8007aae:	4770      	bx	lr
{
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	4604      	mov	r4, r0
		print("Loopback Data: %s",argv[1]);
 8007ab4:	6849      	ldr	r1, [r1, #4]
 8007ab6:	4802      	ldr	r0, [pc, #8]	; (8007ac0 <shell_cmd_test+0x18>)
 8007ab8:	f7ff fd62 	bl	8007580 <print>
		return 1;
 8007abc:	4620      	mov	r0, r4
}
 8007abe:	bd10      	pop	{r4, pc}
 8007ac0:	0800cd8c 	.word	0x0800cd8c

08007ac4 <shell_cmd_dumpadc>:
{
 8007ac4:	b508      	push	{r3, lr}
	print_adc_data();
 8007ac6:	f000 fbed 	bl	80082a4 <print_adc_data>
}
 8007aca:	2001      	movs	r0, #1
 8007acc:	bd08      	pop	{r3, pc}
	...

08007ad0 <shell_cmd_storedefaultregs>:
{
 8007ad0:	b510      	push	{r4, lr}
	settings.pwm_ch1_r = get_reg(CH1_RED);
 8007ad2:	2001      	movs	r0, #1
 8007ad4:	f7fd fdd8 	bl	8005688 <get_reg>
 8007ad8:	4c39      	ldr	r4, [pc, #228]	; (8007bc0 <shell_cmd_storedefaultregs+0xf0>)
 8007ada:	8120      	strh	r0, [r4, #8]
	settings.pwm_ch1_g = get_reg(CH1_GREEN);
 8007adc:	2002      	movs	r0, #2
 8007ade:	f7fd fdd3 	bl	8005688 <get_reg>
 8007ae2:	8160      	strh	r0, [r4, #10]
	settings.pwm_ch1_b = get_reg(CH1_BLUE);
 8007ae4:	2003      	movs	r0, #3
 8007ae6:	f7fd fdcf 	bl	8005688 <get_reg>
 8007aea:	81a0      	strh	r0, [r4, #12]
	settings.pwm_ch2_r = get_reg(CH2_RED);
 8007aec:	2004      	movs	r0, #4
 8007aee:	f7fd fdcb 	bl	8005688 <get_reg>
 8007af2:	81e0      	strh	r0, [r4, #14]
	settings.pwm_ch2_g = get_reg(CH2_GREEN);
 8007af4:	2005      	movs	r0, #5
 8007af6:	f7fd fdc7 	bl	8005688 <get_reg>
 8007afa:	8220      	strh	r0, [r4, #16]
	settings.pwm_ch2_b = get_reg(CH2_BLUE);
 8007afc:	2006      	movs	r0, #6
 8007afe:	f7fd fdc3 	bl	8005688 <get_reg>
 8007b02:	8260      	strh	r0, [r4, #18]
	settings.pwm_ch3_r = get_reg(CH3_RED);
 8007b04:	2007      	movs	r0, #7
 8007b06:	f7fd fdbf 	bl	8005688 <get_reg>
 8007b0a:	82a0      	strh	r0, [r4, #20]
	settings.pwm_ch3_g = get_reg(CH3_GREEN);
 8007b0c:	2008      	movs	r0, #8
 8007b0e:	f7fd fdbb 	bl	8005688 <get_reg>
 8007b12:	82e0      	strh	r0, [r4, #22]
	settings.pwm_ch3_b = get_reg(CH3_BLUE);
 8007b14:	2009      	movs	r0, #9
 8007b16:	f7fd fdb7 	bl	8005688 <get_reg>
 8007b1a:	8320      	strh	r0, [r4, #24]
	settings.pwm_ch3_w = get_reg(CH3_WHITE);
 8007b1c:	200a      	movs	r0, #10
 8007b1e:	f7fd fdb3 	bl	8005688 <get_reg>
 8007b22:	8360      	strh	r0, [r4, #26]
	if (DMX_MODE2 == get_mode())
 8007b24:	f7fd fd5e 	bl	80055e4 <get_mode>
 8007b28:	2801      	cmp	r0, #1
 8007b2a:	d001      	beq.n	8007b30 <shell_cmd_storedefaultregs+0x60>
}
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	bd10      	pop	{r4, pc}
		settings.fx_select = get_reg(FX_SELECT);
 8007b30:	200b      	movs	r0, #11
 8007b32:	f7fd fda9 	bl	8005688 <get_reg>
 8007b36:	7720      	strb	r0, [r4, #28]
		settings.strip1_pattern = get_reg(STRIP1_PATTERN);
 8007b38:	200c      	movs	r0, #12
 8007b3a:	f7fd fda5 	bl	8005688 <get_reg>
 8007b3e:	7760      	strb	r0, [r4, #29]
		settings.strip1_speed = get_reg(STRIP1_SPEED);
 8007b40:	200d      	movs	r0, #13
 8007b42:	f7fd fda1 	bl	8005688 <get_reg>
 8007b46:	77a0      	strb	r0, [r4, #30]
		settings.strip1_size = get_reg(STRIP1_SIZE);
 8007b48:	200e      	movs	r0, #14
 8007b4a:	f7fd fd9d 	bl	8005688 <get_reg>
 8007b4e:	77e0      	strb	r0, [r4, #31]
		settings.strip1_complexity = get_reg(STRIP1_COMPLEXITY);
 8007b50:	200f      	movs	r0, #15
 8007b52:	f7fd fd99 	bl	8005688 <get_reg>
 8007b56:	f884 0020 	strb.w	r0, [r4, #32]
		settings.strip1_v1 = get_reg(STRIP1_V1);
 8007b5a:	2010      	movs	r0, #16
 8007b5c:	f7fd fd94 	bl	8005688 <get_reg>
 8007b60:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
		settings.strip1_v2 = get_reg(STRIP1_V2);
 8007b64:	2011      	movs	r0, #17
 8007b66:	f7fd fd8f 	bl	8005688 <get_reg>
 8007b6a:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
		settings.strip1_v3 = get_reg(STRIP1_V3);
 8007b6e:	2012      	movs	r0, #18
 8007b70:	f7fd fd8a 	bl	8005688 <get_reg>
 8007b74:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
		settings.strip2_pattern = get_reg(STRIP2_PATTERN);
 8007b78:	2013      	movs	r0, #19
 8007b7a:	f7fd fd85 	bl	8005688 <get_reg>
 8007b7e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
		settings.strip2_speed = get_reg(STRIP2_SPEED);
 8007b82:	2014      	movs	r0, #20
 8007b84:	f7fd fd80 	bl	8005688 <get_reg>
 8007b88:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
		settings.strip2_size = get_reg(STRIP2_SIZE);
 8007b8c:	2015      	movs	r0, #21
 8007b8e:	f7fd fd7b 	bl	8005688 <get_reg>
 8007b92:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		settings.strip2_complexity = get_reg(STRIP2_COMPLEXITY);
 8007b96:	2016      	movs	r0, #22
 8007b98:	f7fd fd76 	bl	8005688 <get_reg>
 8007b9c:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
		settings.strip2_v1 = get_reg(STRIP2_V1);
 8007ba0:	2017      	movs	r0, #23
 8007ba2:	f7fd fd71 	bl	8005688 <get_reg>
 8007ba6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
		settings.strip2_v2 = get_reg(STRIP2_V2);
 8007baa:	2018      	movs	r0, #24
 8007bac:	f7fd fd6c 	bl	8005688 <get_reg>
 8007bb0:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
		settings.strip2_v3 = get_reg(STRIP2_V3);
 8007bb4:	2019      	movs	r0, #25
 8007bb6:	f7fd fd67 	bl	8005688 <get_reg>
 8007bba:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
 8007bbe:	e7b5      	b.n	8007b2c <shell_cmd_storedefaultregs+0x5c>
 8007bc0:	20000af8 	.word	0x20000af8

08007bc4 <shell_cmd_getmode>:
{
 8007bc4:	b508      	push	{r3, lr}
	switch (get_mode())
 8007bc6:	f7fd fd0d 	bl	80055e4 <get_mode>
 8007bca:	b118      	cbz	r0, 8007bd4 <shell_cmd_getmode+0x10>
 8007bcc:	2801      	cmp	r0, #1
 8007bce:	d005      	beq.n	8007bdc <shell_cmd_getmode+0x18>
}
 8007bd0:	2001      	movs	r0, #1
 8007bd2:	bd08      	pop	{r3, pc}
		print("Mode 1 (PWM)");
 8007bd4:	4803      	ldr	r0, [pc, #12]	; (8007be4 <shell_cmd_getmode+0x20>)
 8007bd6:	f7ff fcd3 	bl	8007580 <print>
		break;
 8007bda:	e7f9      	b.n	8007bd0 <shell_cmd_getmode+0xc>
		print("Mode 2 (PWM + Strip)");
 8007bdc:	4802      	ldr	r0, [pc, #8]	; (8007be8 <shell_cmd_getmode+0x24>)
 8007bde:	f7ff fccf 	bl	8007580 <print>
		break;
 8007be2:	e7f5      	b.n	8007bd0 <shell_cmd_getmode+0xc>
 8007be4:	0800cc2c 	.word	0x0800cc2c
 8007be8:	0800cc3c 	.word	0x0800cc3c

08007bec <shell_cmd_setreg>:
	if (argc == 2)
 8007bec:	2802      	cmp	r0, #2
 8007bee:	d001      	beq.n	8007bf4 <shell_cmd_setreg+0x8>
		return 0;
 8007bf0:	2000      	movs	r0, #0
}
 8007bf2:	4770      	bx	lr
{
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	460c      	mov	r4, r1
		set_reg(atoi(argv[1]),atoi(argv[2]));
 8007bf8:	6848      	ldr	r0, [r1, #4]
 8007bfa:	f001 fd4a 	bl	8009692 <atoi>
 8007bfe:	4605      	mov	r5, r0
 8007c00:	68a0      	ldr	r0, [r4, #8]
 8007c02:	f001 fd46 	bl	8009692 <atoi>
 8007c06:	b2c1      	uxtb	r1, r0
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f7fd fd2f 	bl	800566c <set_reg>
	return 1;
 8007c0e:	2001      	movs	r0, #1
}
 8007c10:	bd38      	pop	{r3, r4, r5, pc}

08007c12 <shell_cmd_setbrightness>:
	if (argc == 1)
 8007c12:	2801      	cmp	r0, #1
 8007c14:	d001      	beq.n	8007c1a <shell_cmd_setbrightness+0x8>
		return 0;
 8007c16:	2000      	movs	r0, #0
}
 8007c18:	4770      	bx	lr
{
 8007c1a:	b510      	push	{r4, lr}
 8007c1c:	4604      	mov	r4, r0
		set_reg(MAX_BRIGHTNESS,(uint8_t) atoi(argv[1]));
 8007c1e:	6848      	ldr	r0, [r1, #4]
 8007c20:	f001 fd37 	bl	8009692 <atoi>
 8007c24:	b2c1      	uxtb	r1, r0
 8007c26:	2000      	movs	r0, #0
 8007c28:	f7fd fd20 	bl	800566c <set_reg>
	return 1;
 8007c2c:	4620      	mov	r0, r4
}
 8007c2e:	bd10      	pop	{r4, pc}

08007c30 <shell_cmd_setgamma>:
	if (argc == 2)
 8007c30:	2802      	cmp	r0, #2
 8007c32:	d001      	beq.n	8007c38 <shell_cmd_setgamma+0x8>
		return 0;
 8007c34:	2000      	movs	r0, #0
}
 8007c36:	4770      	bx	lr
{
 8007c38:	b510      	push	{r4, lr}
 8007c3a:	460c      	mov	r4, r1
		switch (atoi(argv[1]))
 8007c3c:	6848      	ldr	r0, [r1, #4]
 8007c3e:	f001 fd28 	bl	8009692 <atoi>
 8007c42:	2802      	cmp	r0, #2
 8007c44:	d014      	beq.n	8007c70 <shell_cmd_setgamma+0x40>
 8007c46:	2803      	cmp	r0, #3
 8007c48:	d019      	beq.n	8007c7e <shell_cmd_setgamma+0x4e>
 8007c4a:	b130      	cbz	r0, 8007c5a <shell_cmd_setgamma+0x2a>
			settings.gamma_green = atoi(argv[2]);
 8007c4c:	68a0      	ldr	r0, [r4, #8]
 8007c4e:	f001 fd20 	bl	8009692 <atoi>
 8007c52:	4b11      	ldr	r3, [pc, #68]	; (8007c98 <shell_cmd_setgamma+0x68>)
 8007c54:	f8a3 0050 	strh.w	r0, [r3, #80]	; 0x50
			break;
 8007c58:	e005      	b.n	8007c66 <shell_cmd_setgamma+0x36>
			settings.gamma_red = atoi(argv[2]);
 8007c5a:	68a0      	ldr	r0, [r4, #8]
 8007c5c:	f001 fd19 	bl	8009692 <atoi>
 8007c60:	4b0d      	ldr	r3, [pc, #52]	; (8007c98 <shell_cmd_setgamma+0x68>)
 8007c62:	f8a3 004a 	strh.w	r0, [r3, #74]	; 0x4a
		if (false == recalcGamma())
 8007c66:	f7fe f82d 	bl	8005cc4 <recalcGamma>
 8007c6a:	b178      	cbz	r0, 8007c8c <shell_cmd_setgamma+0x5c>
	return 1;
 8007c6c:	2001      	movs	r0, #1
}
 8007c6e:	bd10      	pop	{r4, pc}
			settings.gamma_blue = atoi(argv[2]);
 8007c70:	68a0      	ldr	r0, [r4, #8]
 8007c72:	f001 fd0e 	bl	8009692 <atoi>
 8007c76:	4b08      	ldr	r3, [pc, #32]	; (8007c98 <shell_cmd_setgamma+0x68>)
 8007c78:	f8a3 0056 	strh.w	r0, [r3, #86]	; 0x56
			break;
 8007c7c:	e7f3      	b.n	8007c66 <shell_cmd_setgamma+0x36>
			settings.gamma_strip = atoi(argv[2]);
 8007c7e:	68a0      	ldr	r0, [r4, #8]
 8007c80:	f001 fd07 	bl	8009692 <atoi>
 8007c84:	4b04      	ldr	r3, [pc, #16]	; (8007c98 <shell_cmd_setgamma+0x68>)
 8007c86:	f8a3 0058 	strh.w	r0, [r3, #88]	; 0x58
			break;
 8007c8a:	e7ec      	b.n	8007c66 <shell_cmd_setgamma+0x36>
			print("Gamma Table Creation Failed");
 8007c8c:	4803      	ldr	r0, [pc, #12]	; (8007c9c <shell_cmd_setgamma+0x6c>)
 8007c8e:	f7ff fc77 	bl	8007580 <print>
	return 1;
 8007c92:	2001      	movs	r0, #1
 8007c94:	e7eb      	b.n	8007c6e <shell_cmd_setgamma+0x3e>
 8007c96:	bf00      	nop
 8007c98:	20000af8 	.word	0x20000af8
 8007c9c:	0800cd70 	.word	0x0800cd70

08007ca0 <shell_cmd_savesettings>:
{
 8007ca0:	b508      	push	{r3, lr}
		save_settings();
 8007ca2:	f7ff f9ed 	bl	8007080 <save_settings>
}
 8007ca6:	2001      	movs	r0, #1
 8007ca8:	bd08      	pop	{r3, pc}

08007caa <shell_cmd_setpwm>:
	if (argc == 3)
 8007caa:	2803      	cmp	r0, #3
 8007cac:	d001      	beq.n	8007cb2 <shell_cmd_setpwm+0x8>
		return 0;
 8007cae:	2000      	movs	r0, #0
}
 8007cb0:	4770      	bx	lr
{
 8007cb2:	b570      	push	{r4, r5, r6, lr}
 8007cb4:	460c      	mov	r4, r1
		configPWM((pwmtimerid_t)atoi(argv[1]),(pwmchid_t)atoi(argv[2]), (uint16_t)atoi(argv[3]));
 8007cb6:	6848      	ldr	r0, [r1, #4]
 8007cb8:	f001 fceb 	bl	8009692 <atoi>
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	68a0      	ldr	r0, [r4, #8]
 8007cc0:	f001 fce7 	bl	8009692 <atoi>
 8007cc4:	4606      	mov	r6, r0
 8007cc6:	68e0      	ldr	r0, [r4, #12]
 8007cc8:	f001 fce3 	bl	8009692 <atoi>
 8007ccc:	b282      	uxth	r2, r0
 8007cce:	b2f1      	uxtb	r1, r6
 8007cd0:	b2e8      	uxtb	r0, r5
 8007cd2:	f7fe ff5b 	bl	8006b8c <configPWM>
	return 1;
 8007cd6:	2001      	movs	r0, #1
}
 8007cd8:	bd70      	pop	{r4, r5, r6, pc}

08007cda <shell_cmd_dumpsettings>:
{
 8007cda:	b508      	push	{r3, lr}
		print_settings();
 8007cdc:	f7ff f9e0 	bl	80070a0 <print_settings>
}
 8007ce0:	2001      	movs	r0, #1
 8007ce2:	bd08      	pop	{r3, pc}

08007ce4 <shell_cmd_getaddr>:
{
 8007ce4:	b508      	push	{r3, lr}
		print("DMX512 Address: %d",get_addr());
 8007ce6:	f7fd fc77 	bl	80055d8 <get_addr>
 8007cea:	4601      	mov	r1, r0
 8007cec:	4802      	ldr	r0, [pc, #8]	; (8007cf8 <shell_cmd_getaddr+0x14>)
 8007cee:	f7ff fc47 	bl	8007580 <print>
}
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	bd08      	pop	{r3, pc}
 8007cf6:	bf00      	nop
 8007cf8:	0800cc18 	.word	0x0800cc18

08007cfc <shell_cmd_dumpregs>:
{
 8007cfc:	b570      	push	{r4, r5, r6, lr}
 8007cfe:	b082      	sub	sp, #8
		print("DMX512 Address: %d",get_addr());
 8007d00:	f7fd fc6a 	bl	80055d8 <get_addr>
 8007d04:	4601      	mov	r1, r0
 8007d06:	4816      	ldr	r0, [pc, #88]	; (8007d60 <shell_cmd_dumpregs+0x64>)
 8007d08:	f7ff fc3a 	bl	8007580 <print>
		print("DMX512 Blocklength: %d",get_reg_length());
 8007d0c:	f7fd fc76 	bl	80055fc <get_reg_length>
 8007d10:	4601      	mov	r1, r0
 8007d12:	4814      	ldr	r0, [pc, #80]	; (8007d64 <shell_cmd_dumpregs+0x68>)
 8007d14:	f7ff fc34 	bl	8007580 <print>
		print("Mode: %d",(uint8_t)get_mode());
 8007d18:	f7fd fc64 	bl	80055e4 <get_mode>
 8007d1c:	4601      	mov	r1, r0
 8007d1e:	4812      	ldr	r0, [pc, #72]	; (8007d68 <shell_cmd_dumpregs+0x6c>)
 8007d20:	f7ff fc2e 	bl	8007580 <print>
		print("---------------------------");
 8007d24:	4811      	ldr	r0, [pc, #68]	; (8007d6c <shell_cmd_dumpregs+0x70>)
 8007d26:	f7ff fc2b 	bl	8007580 <print>
		for(int ii=0;ii< get_reg_length();ii++)
 8007d2a:	2400      	movs	r4, #0
 8007d2c:	e011      	b.n	8007d52 <shell_cmd_dumpregs+0x56>
			print("Reg: %d\t Addr:%d  \t (%s)\t Val: %d",ii,get_addr()+ii,get_reg_name(ii),get_reg(ii));
 8007d2e:	f7fd fc53 	bl	80055d8 <get_addr>
 8007d32:	1905      	adds	r5, r0, r4
 8007d34:	4620      	mov	r0, r4
 8007d36:	f7fd fcb9 	bl	80056ac <get_reg_name>
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f7fd fca3 	bl	8005688 <get_reg>
 8007d42:	9000      	str	r0, [sp, #0]
 8007d44:	4633      	mov	r3, r6
 8007d46:	462a      	mov	r2, r5
 8007d48:	4621      	mov	r1, r4
 8007d4a:	4809      	ldr	r0, [pc, #36]	; (8007d70 <shell_cmd_dumpregs+0x74>)
 8007d4c:	f7ff fc18 	bl	8007580 <print>
		for(int ii=0;ii< get_reg_length();ii++)
 8007d50:	3401      	adds	r4, #1
 8007d52:	f7fd fc53 	bl	80055fc <get_reg_length>
 8007d56:	42a0      	cmp	r0, r4
 8007d58:	d8e9      	bhi.n	8007d2e <shell_cmd_dumpregs+0x32>
}
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	b002      	add	sp, #8
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	0800cc18 	.word	0x0800cc18
 8007d64:	0800cbb4 	.word	0x0800cbb4
 8007d68:	0800cbcc 	.word	0x0800cbcc
 8007d6c:	0800cbd8 	.word	0x0800cbd8
 8007d70:	0800cbf4 	.word	0x0800cbf4

08007d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d74:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007d76:	4b0e      	ldr	r3, [pc, #56]	; (8007db0 <HAL_MspInit+0x3c>)
 8007d78:	699a      	ldr	r2, [r3, #24]
 8007d7a:	f042 0201 	orr.w	r2, r2, #1
 8007d7e:	619a      	str	r2, [r3, #24]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	f002 0201 	and.w	r2, r2, #1
 8007d86:	9200      	str	r2, [sp, #0]
 8007d88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d8a:	69da      	ldr	r2, [r3, #28]
 8007d8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007d90:	61da      	str	r2, [r3, #28]
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d98:	9301      	str	r3, [sp, #4]
 8007d9a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007d9c:	4a05      	ldr	r2, [pc, #20]	; (8007db4 <HAL_MspInit+0x40>)
 8007d9e:	6853      	ldr	r3, [r2, #4]
 8007da0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007da4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007da8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007daa:	b002      	add	sp, #8
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	40021000 	.word	0x40021000
 8007db4:	40010000 	.word	0x40010000

08007db8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007db8:	b500      	push	{lr}
 8007dba:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	9304      	str	r3, [sp, #16]
 8007dc0:	9305      	str	r3, [sp, #20]
 8007dc2:	9306      	str	r3, [sp, #24]
 8007dc4:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8007dc6:	6803      	ldr	r3, [r0, #0]
 8007dc8:	4a20      	ldr	r2, [pc, #128]	; (8007e4c <HAL_ADC_MspInit+0x94>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d005      	beq.n	8007dda <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8007dce:	4a20      	ldr	r2, [pc, #128]	; (8007e50 <HAL_ADC_MspInit+0x98>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d01e      	beq.n	8007e12 <HAL_ADC_MspInit+0x5a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007dd4:	b009      	add	sp, #36	; 0x24
 8007dd6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007dda:	4b1e      	ldr	r3, [pc, #120]	; (8007e54 <HAL_ADC_MspInit+0x9c>)
 8007ddc:	699a      	ldr	r2, [r3, #24]
 8007dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007de2:	619a      	str	r2, [r3, #24]
 8007de4:	699a      	ldr	r2, [r3, #24]
 8007de6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8007dea:	9200      	str	r2, [sp, #0]
 8007dec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dee:	699a      	ldr	r2, [r3, #24]
 8007df0:	f042 0204 	orr.w	r2, r2, #4
 8007df4:	619a      	str	r2, [r3, #24]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	9301      	str	r3, [sp, #4]
 8007dfe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ANALOG_0_Pin;
 8007e00:	2301      	movs	r3, #1
 8007e02:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007e04:	2303      	movs	r3, #3
 8007e06:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(ANALOG_0_GPIO_Port, &GPIO_InitStruct);
 8007e08:	a904      	add	r1, sp, #16
 8007e0a:	4813      	ldr	r0, [pc, #76]	; (8007e58 <HAL_ADC_MspInit+0xa0>)
 8007e0c:	f7f9 ffc6 	bl	8001d9c <HAL_GPIO_Init>
 8007e10:	e7e0      	b.n	8007dd4 <HAL_ADC_MspInit+0x1c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007e12:	4b10      	ldr	r3, [pc, #64]	; (8007e54 <HAL_ADC_MspInit+0x9c>)
 8007e14:	699a      	ldr	r2, [r3, #24]
 8007e16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e1a:	619a      	str	r2, [r3, #24]
 8007e1c:	699a      	ldr	r2, [r3, #24]
 8007e1e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8007e22:	9202      	str	r2, [sp, #8]
 8007e24:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e26:	699a      	ldr	r2, [r3, #24]
 8007e28:	f042 0204 	orr.w	r2, r2, #4
 8007e2c:	619a      	str	r2, [r3, #24]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	9303      	str	r3, [sp, #12]
 8007e36:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8007e38:	2310      	movs	r3, #16
 8007e3a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8007e40:	a904      	add	r1, sp, #16
 8007e42:	4805      	ldr	r0, [pc, #20]	; (8007e58 <HAL_ADC_MspInit+0xa0>)
 8007e44:	f7f9 ffaa 	bl	8001d9c <HAL_GPIO_Init>
}
 8007e48:	e7c4      	b.n	8007dd4 <HAL_ADC_MspInit+0x1c>
 8007e4a:	bf00      	nop
 8007e4c:	40012400 	.word	0x40012400
 8007e50:	40012800 	.word	0x40012800
 8007e54:	40021000 	.word	0x40021000
 8007e58:	40010800 	.word	0x40010800

08007e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e60:	2300      	movs	r3, #0
 8007e62:	9304      	str	r3, [sp, #16]
 8007e64:	9305      	str	r3, [sp, #20]
 8007e66:	9306      	str	r3, [sp, #24]
 8007e68:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8007e6a:	6803      	ldr	r3, [r0, #0]
 8007e6c:	4a2b      	ldr	r2, [pc, #172]	; (8007f1c <HAL_UART_MspInit+0xc0>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d004      	beq.n	8007e7c <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8007e72:	4a2b      	ldr	r2, [pc, #172]	; (8007f20 <HAL_UART_MspInit+0xc4>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d026      	beq.n	8007ec6 <HAL_UART_MspInit+0x6a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007e78:	b008      	add	sp, #32
 8007e7a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8007e7c:	4b29      	ldr	r3, [pc, #164]	; (8007f24 <HAL_UART_MspInit+0xc8>)
 8007e7e:	699a      	ldr	r2, [r3, #24]
 8007e80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e84:	619a      	str	r2, [r3, #24]
 8007e86:	699a      	ldr	r2, [r3, #24]
 8007e88:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007e8c:	9200      	str	r2, [sp, #0]
 8007e8e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e90:	699a      	ldr	r2, [r3, #24]
 8007e92:	f042 0208 	orr.w	r2, r2, #8
 8007e96:	619a      	str	r2, [r3, #24]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = RS485_RXTX_Pin;
 8007ea2:	2340      	movs	r3, #64	; 0x40
 8007ea4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007ea6:	2312      	movs	r3, #18
 8007ea8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8007eae:	a904      	add	r1, sp, #16
 8007eb0:	481d      	ldr	r0, [pc, #116]	; (8007f28 <HAL_UART_MspInit+0xcc>)
 8007eb2:	f7f9 ff73 	bl	8001d9c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8007eb6:	4a1d      	ldr	r2, [pc, #116]	; (8007f2c <HAL_UART_MspInit+0xd0>)
 8007eb8:	6853      	ldr	r3, [r2, #4]
 8007eba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8007ebe:	f043 0304 	orr.w	r3, r3, #4
 8007ec2:	6053      	str	r3, [r2, #4]
 8007ec4:	e7d8      	b.n	8007e78 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007ec6:	4b17      	ldr	r3, [pc, #92]	; (8007f24 <HAL_UART_MspInit+0xc8>)
 8007ec8:	69da      	ldr	r2, [r3, #28]
 8007eca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007ece:	61da      	str	r2, [r3, #28]
 8007ed0:	69da      	ldr	r2, [r3, #28]
 8007ed2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8007ed6:	9202      	str	r2, [sp, #8]
 8007ed8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007eda:	699a      	ldr	r2, [r3, #24]
 8007edc:	f042 0208 	orr.w	r2, r2, #8
 8007ee0:	619a      	str	r2, [r3, #24]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	f003 0308 	and.w	r3, r3, #8
 8007ee8:	9303      	str	r3, [sp, #12]
 8007eea:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = RS232_TX_Pin;
 8007eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ef0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 8007efa:	4c0b      	ldr	r4, [pc, #44]	; (8007f28 <HAL_UART_MspInit+0xcc>)
 8007efc:	a904      	add	r1, sp, #16
 8007efe:	4620      	mov	r0, r4
 8007f00:	f7f9 ff4c 	bl	8001d9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS232_RX_Pin;
 8007f04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f0e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 8007f10:	a904      	add	r1, sp, #16
 8007f12:	4620      	mov	r0, r4
 8007f14:	f7f9 ff42 	bl	8001d9c <HAL_GPIO_Init>
}
 8007f18:	e7ae      	b.n	8007e78 <HAL_UART_MspInit+0x1c>
 8007f1a:	bf00      	nop
 8007f1c:	40013800 	.word	0x40013800
 8007f20:	40004800 	.word	0x40004800
 8007f24:	40021000 	.word	0x40021000
 8007f28:	40010c00 	.word	0x40010c00
 8007f2c:	40010000 	.word	0x40010000

08007f30 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007f30:	4770      	bx	lr

08007f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007f32:	e7fe      	b.n	8007f32 <HardFault_Handler>

08007f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007f34:	e7fe      	b.n	8007f34 <MemManage_Handler>

08007f36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007f36:	e7fe      	b.n	8007f36 <BusFault_Handler>

08007f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007f38:	e7fe      	b.n	8007f38 <UsageFault_Handler>

08007f3a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007f3a:	4770      	bx	lr

08007f3c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007f3c:	4770      	bx	lr

08007f3e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007f3e:	4770      	bx	lr

08007f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007f40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007f42:	f7f9 f943 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007f46:	bd08      	pop	{r3, pc}

08007f48 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007f48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8007f4a:	4802      	ldr	r0, [pc, #8]	; (8007f54 <DMA1_Channel3_IRQHandler+0xc>)
 8007f4c:	f7f9 fd1e 	bl	800198c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007f50:	bd08      	pop	{r3, pc}
 8007f52:	bf00      	nop
 8007f54:	20000d68 	.word	0x20000d68

08007f58 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007f58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8007f5a:	4802      	ldr	r0, [pc, #8]	; (8007f64 <DMA1_Channel4_IRQHandler+0xc>)
 8007f5c:	f7f9 fd16 	bl	800198c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007f60:	bd08      	pop	{r3, pc}
 8007f62:	bf00      	nop
 8007f64:	20000d24 	.word	0x20000d24

08007f68 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8007f68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007f6a:	4802      	ldr	r0, [pc, #8]	; (8007f74 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8007f6c:	f7fa fb16 	bl	800259c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8007f70:	bd08      	pop	{r3, pc}
 8007f72:	bf00      	nop
 8007f74:	20001538 	.word	0x20001538

08007f78 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8007f78:	b508      	push	{r3, lr}
 8007f7a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007f7c:	4a0b      	ldr	r2, [pc, #44]	; (8007fac <_sbrk+0x34>)
 8007f7e:	6812      	ldr	r2, [r2, #0]
 8007f80:	b142      	cbz	r2, 8007f94 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8007f82:	4a0a      	ldr	r2, [pc, #40]	; (8007fac <_sbrk+0x34>)
 8007f84:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8007f86:	4403      	add	r3, r0
 8007f88:	466a      	mov	r2, sp
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d806      	bhi.n	8007f9c <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8007f8e:	4a07      	ldr	r2, [pc, #28]	; (8007fac <_sbrk+0x34>)
 8007f90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8007f92:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8007f94:	4a05      	ldr	r2, [pc, #20]	; (8007fac <_sbrk+0x34>)
 8007f96:	4906      	ldr	r1, [pc, #24]	; (8007fb0 <_sbrk+0x38>)
 8007f98:	6011      	str	r1, [r2, #0]
 8007f9a:	e7f2      	b.n	8007f82 <_sbrk+0xa>
		errno = ENOMEM;
 8007f9c:	f001 fb86 	bl	80096ac <__errno>
 8007fa0:	230c      	movs	r3, #12
 8007fa2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa8:	e7f3      	b.n	8007f92 <_sbrk+0x1a>
 8007faa:	bf00      	nop
 8007fac:	20000708 	.word	0x20000708
 8007fb0:	200019ac 	.word	0x200019ac

08007fb4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8007fb4:	4b0f      	ldr	r3, [pc, #60]	; (8007ff4 <SystemInit+0x40>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	f042 0201 	orr.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8007fbe:	6859      	ldr	r1, [r3, #4]
 8007fc0:	4a0d      	ldr	r2, [pc, #52]	; (8007ff8 <SystemInit+0x44>)
 8007fc2:	400a      	ands	r2, r1
 8007fc4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007fcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007fd0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007fd8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8007fe0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8007fe2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8007fe6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007fe8:	4b04      	ldr	r3, [pc, #16]	; (8007ffc <SystemInit+0x48>)
 8007fea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007fee:	609a      	str	r2, [r3, #8]
#endif 
}
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	40021000 	.word	0x40021000
 8007ff8:	f8ff0000 	.word	0xf8ff0000
 8007ffc:	e000ed00 	.word	0xe000ed00

08008000 <lights_off>:
							 {PWM_CH3,CH_RED},{PWM_CH3,CH_GREEN},{PWM_CH3,CH_BLUE},{PWM_CH3,CH_WHITE}};



void lights_off(void)
{
 8008000:	b510      	push	{r4, lr}
	for (uint8_t ii=0;ii<STATE_CNT;ii++)
 8008002:	2400      	movs	r4, #0
 8008004:	e00a      	b.n	800801c <lights_off+0x1c>
		configPWM(states[ii].id,states[ii].ch, 0);
 8008006:	4b07      	ldr	r3, [pc, #28]	; (8008024 <lights_off+0x24>)
 8008008:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800800c:	2200      	movs	r2, #0
 800800e:	7849      	ldrb	r1, [r1, #1]
 8008010:	f813 0014 	ldrb.w	r0, [r3, r4, lsl #1]
 8008014:	f7fe fdba 	bl	8006b8c <configPWM>
	for (uint8_t ii=0;ii<STATE_CNT;ii++)
 8008018:	3401      	adds	r4, #1
 800801a:	b2e4      	uxtb	r4, r4
 800801c:	2c09      	cmp	r4, #9
 800801e:	d9f2      	bls.n	8008006 <lights_off+0x6>
}
 8008020:	bd10      	pop	{r4, pc}
 8008022:	bf00      	nop
 8008024:	2000018c 	.word	0x2000018c

08008028 <process_testmode>:

uint8_t process_testmode(void)
{
 8008028:	b538      	push	{r3, r4, r5, lr}
	static uint8_t last_button_state = 1;
	static uint16_t cnt = 0;
	static uint8_t done = 0;
	uint8_t button_state = 1;

	if (done)
 800802a:	4b26      	ldr	r3, [pc, #152]	; (80080c4 <process_testmode+0x9c>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	b15b      	cbz	r3, 8008048 <process_testmode+0x20>
	{
		if (cnt == 0)
 8008030:	4b25      	ldr	r3, [pc, #148]	; (80080c8 <process_testmode+0xa0>)
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	b91b      	cbnz	r3, 800803e <process_testmode+0x16>
		{
			done = 0;
 8008036:	2000      	movs	r0, #0
 8008038:	4b22      	ldr	r3, [pc, #136]	; (80080c4 <process_testmode+0x9c>)
 800803a:	7018      	strb	r0, [r3, #0]
			return 0;
 800803c:	e016      	b.n	800806c <process_testmode+0x44>
		}
		cnt--;
 800803e:	3b01      	subs	r3, #1
 8008040:	4a21      	ldr	r2, [pc, #132]	; (80080c8 <process_testmode+0xa0>)
 8008042:	8013      	strh	r3, [r2, #0]
			state = 0;
			done = 1;
		}
		last_button_state = button_state;
	}
	return 1;
 8008044:	2001      	movs	r0, #1
 8008046:	e011      	b.n	800806c <process_testmode+0x44>
		if (cnt == 0)
 8008048:	4b1f      	ldr	r3, [pc, #124]	; (80080c8 <process_testmode+0xa0>)
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	b17b      	cbz	r3, 800806e <process_testmode+0x46>
		cnt--;
 800804e:	4a1e      	ldr	r2, [pc, #120]	; (80080c8 <process_testmode+0xa0>)
 8008050:	8813      	ldrh	r3, [r2, #0]
 8008052:	3b01      	subs	r3, #1
 8008054:	8013      	strh	r3, [r2, #0]
		button_state = check_button();
 8008056:	f7fd ff35 	bl	8005ec4 <check_button>
 800805a:	4604      	mov	r4, r0
		if ((last_button_state == 0) && (button_state == 1))
 800805c:	4b1b      	ldr	r3, [pc, #108]	; (80080cc <process_testmode+0xa4>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	b90b      	cbnz	r3, 8008066 <process_testmode+0x3e>
 8008062:	2801      	cmp	r0, #1
 8008064:	d01e      	beq.n	80080a4 <process_testmode+0x7c>
		last_button_state = button_state;
 8008066:	4b19      	ldr	r3, [pc, #100]	; (80080cc <process_testmode+0xa4>)
 8008068:	701c      	strb	r4, [r3, #0]
	return 1;
 800806a:	2001      	movs	r0, #1
}
 800806c:	bd38      	pop	{r3, r4, r5, pc}
			cnt = STEP_CNT;
 800806e:	4b16      	ldr	r3, [pc, #88]	; (80080c8 <process_testmode+0xa0>)
 8008070:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008074:	801a      	strh	r2, [r3, #0]
			lights_off();
 8008076:	f7ff ffc3 	bl	8008000 <lights_off>
			configPWM(states[state].id,states[state].ch, MAX_PWM);
 800807a:	4c15      	ldr	r4, [pc, #84]	; (80080d0 <process_testmode+0xa8>)
 800807c:	7820      	ldrb	r0, [r4, #0]
 800807e:	4b15      	ldr	r3, [pc, #84]	; (80080d4 <process_testmode+0xac>)
 8008080:	eb03 0140 	add.w	r1, r3, r0, lsl #1
 8008084:	f240 4234 	movw	r2, #1076	; 0x434
 8008088:	7849      	ldrb	r1, [r1, #1]
 800808a:	f813 0010 	ldrb.w	r0, [r3, r0, lsl #1]
 800808e:	f7fe fd7d 	bl	8006b8c <configPWM>
			state++;
 8008092:	7823      	ldrb	r3, [r4, #0]
 8008094:	3301      	adds	r3, #1
 8008096:	b2db      	uxtb	r3, r3
 8008098:	7023      	strb	r3, [r4, #0]
			if (state == STATE_CNT)
 800809a:	2b0a      	cmp	r3, #10
 800809c:	d1d7      	bne.n	800804e <process_testmode+0x26>
				state = 0;
 800809e:	2200      	movs	r2, #0
 80080a0:	7022      	strb	r2, [r4, #0]
 80080a2:	e7d4      	b.n	800804e <process_testmode+0x26>
			last_button_state = 1;
 80080a4:	2501      	movs	r5, #1
 80080a6:	4b09      	ldr	r3, [pc, #36]	; (80080cc <process_testmode+0xa4>)
 80080a8:	701d      	strb	r5, [r3, #0]
			lights_off();
 80080aa:	f7ff ffa9 	bl	8008000 <lights_off>
			cnt = STEP_CNT;
 80080ae:	4b06      	ldr	r3, [pc, #24]	; (80080c8 <process_testmode+0xa0>)
 80080b0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80080b4:	801a      	strh	r2, [r3, #0]
			state = 0;
 80080b6:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <process_testmode+0xa8>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	701a      	strb	r2, [r3, #0]
			done = 1;
 80080bc:	4b01      	ldr	r3, [pc, #4]	; (80080c4 <process_testmode+0x9c>)
 80080be:	701d      	strb	r5, [r3, #0]
 80080c0:	e7d1      	b.n	8008066 <process_testmode+0x3e>
 80080c2:	bf00      	nop
 80080c4:	2000070e 	.word	0x2000070e
 80080c8:	2000070c 	.word	0x2000070c
 80080cc:	20000188 	.word	0x20000188
 80080d0:	2000070f 	.word	0x2000070f
 80080d4:	2000018c 	.word	0x2000018c

080080d8 <ADC1_2_IRQHandler>:

adcdata_s adcdata[2];
ADC_HandleTypeDef* currentADCHandler = &hadc1;

void ADC1_2_IRQHandler()
{
 80080d8:	b508      	push	{r3, lr}
	//need to figure out where IRQ comes from here....
	HAL_ADC_IRQHandler(currentADCHandler);
 80080da:	4b02      	ldr	r3, [pc, #8]	; (80080e4 <ADC1_2_IRQHandler+0xc>)
 80080dc:	6818      	ldr	r0, [r3, #0]
 80080de:	f7f9 f88b 	bl	80011f8 <HAL_ADC_IRQHandler>

    //Alternatively we could call the handler for both sources and let the handler routine sort it out....
    //HAL_ADC_IRQHandler(&hadc1);
    //HAL_ADC_IRQHandler(&hadc2);
}
 80080e2:	bd08      	pop	{r3, pc}
 80080e4:	200001a0 	.word	0x200001a0

080080e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	4604      	mov	r4, r0
	uint8_t adc = 0;
	uint32_t sum = 0;
	uint32_t adcval = 0;

	if (hadc->Instance == ADC2)
 80080ec:	6802      	ldr	r2, [r0, #0]
 80080ee:	4b22      	ldr	r3, [pc, #136]	; (8008178 <HAL_ADC_ConvCpltCallback+0x90>)
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d020      	beq.n	8008136 <HAL_ADC_ConvCpltCallback+0x4e>
	uint8_t adc = 0;
 80080f4:	2600      	movs	r6, #0
	{
		adc = 1;
	}

	adcval = HAL_ADC_GetValue(hadc);
 80080f6:	4620      	mov	r0, r4
 80080f8:	f7f9 f87a 	bl	80011f0 <HAL_ADC_GetValue>
	adcval = adcval / 16; //Convert to 8-bit...
	adcdata[adc].buf[adcdata[adc].bufcnt] = (uint16_t)adcval;
 80080fc:	4635      	mov	r5, r6
 80080fe:	4a1f      	ldr	r2, [pc, #124]	; (800817c <HAL_ADC_ConvCpltCallback+0x94>)
 8008100:	eb02 1106 	add.w	r1, r2, r6, lsl #4
 8008104:	7b8b      	ldrb	r3, [r1, #14]
 8008106:	f3c0 100f 	ubfx	r0, r0, #4, #16
 800810a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800810e:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 8008112:	80b0      	strh	r0, [r6, #4]
	adcdata[adc].bufcnt++;
 8008114:	3301      	adds	r3, #1
 8008116:	b2db      	uxtb	r3, r3
 8008118:	738b      	strb	r3, [r1, #14]

	//Calculate average over x samples to reduce noise
	if (ADC_BUF_SIZE == adcdata[adc].bufcnt)
 800811a:	2b05      	cmp	r3, #5
 800811c:	d00d      	beq.n	800813a <HAL_ADC_ConvCpltCallback+0x52>
		while(adcdata[adc].bufcnt > 0);
		adcdata[adc].adc_val = (uint16_t)(sum / ADC_BUF_SIZE);
	}

	//swap ADC
	if (hadc->Instance == ADC1)
 800811e:	6822      	ldr	r2, [r4, #0]
 8008120:	4b17      	ldr	r3, [pc, #92]	; (8008180 <HAL_ADC_ConvCpltCallback+0x98>)
 8008122:	429a      	cmp	r2, r3
 8008124:	d023      	beq.n	800816e <HAL_ADC_ConvCpltCallback+0x86>
		currentADCHandler = &hadc2;
	else
		currentADCHandler = &hadc1;
 8008126:	4b17      	ldr	r3, [pc, #92]	; (8008184 <HAL_ADC_ConvCpltCallback+0x9c>)
 8008128:	4a17      	ldr	r2, [pc, #92]	; (8008188 <HAL_ADC_ConvCpltCallback+0xa0>)
 800812a:	601a      	str	r2, [r3, #0]
	//Start ADC Again
    HAL_ADC_Start_IT(currentADCHandler);
 800812c:	4b15      	ldr	r3, [pc, #84]	; (8008184 <HAL_ADC_ConvCpltCallback+0x9c>)
 800812e:	6818      	ldr	r0, [r3, #0]
 8008130:	f7f9 f9c4 	bl	80014bc <HAL_ADC_Start_IT>
}
 8008134:	bd70      	pop	{r4, r5, r6, pc}
		adc = 1;
 8008136:	2601      	movs	r6, #1
 8008138:	e7dd      	b.n	80080f6 <HAL_ADC_ConvCpltCallback+0xe>
	uint32_t sum = 0;
 800813a:	2000      	movs	r0, #0
			adcdata[adc].bufcnt--;
 800813c:	4a0f      	ldr	r2, [pc, #60]	; (800817c <HAL_ADC_ConvCpltCallback+0x94>)
 800813e:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 8008142:	7b8b      	ldrb	r3, [r1, #14]
 8008144:	3b01      	subs	r3, #1
 8008146:	b2db      	uxtb	r3, r3
 8008148:	738b      	strb	r3, [r1, #14]
			sum = sum + adcdata[adc].buf[adcdata[adc].bufcnt];
 800814a:	eb03 01c5 	add.w	r1, r3, r5, lsl #3
 800814e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8008152:	8892      	ldrh	r2, [r2, #4]
 8008154:	4410      	add	r0, r2
		while(adcdata[adc].bufcnt > 0);
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1f0      	bne.n	800813c <HAL_ADC_ConvCpltCallback+0x54>
		adcdata[adc].adc_val = (uint16_t)(sum / ADC_BUF_SIZE);
 800815a:	f1a3 3333 	sub.w	r3, r3, #858993459	; 0x33333333
 800815e:	fba3 3000 	umull	r3, r0, r3, r0
 8008162:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8008166:	012d      	lsls	r5, r5, #4
 8008168:	4b04      	ldr	r3, [pc, #16]	; (800817c <HAL_ADC_ConvCpltCallback+0x94>)
 800816a:	5358      	strh	r0, [r3, r5]
 800816c:	e7d7      	b.n	800811e <HAL_ADC_ConvCpltCallback+0x36>
		currentADCHandler = &hadc2;
 800816e:	4b05      	ldr	r3, [pc, #20]	; (8008184 <HAL_ADC_ConvCpltCallback+0x9c>)
 8008170:	4a06      	ldr	r2, [pc, #24]	; (800818c <HAL_ADC_ConvCpltCallback+0xa4>)
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	e7da      	b.n	800812c <HAL_ADC_ConvCpltCallback+0x44>
 8008176:	bf00      	nop
 8008178:	40012800 	.word	0x40012800
 800817c:	20000e6c 	.word	0x20000e6c
 8008180:	40012400 	.word	0x40012400
 8008184:	200001a0 	.word	0x200001a0
 8008188:	20000c58 	.word	0x20000c58
 800818c:	20000bec 	.word	0x20000bec

08008190 <init_trigger>:


void init_trigger(void)
{
 8008190:	b510      	push	{r4, lr}
	//Clear data
	for (uint8_t ii=0;ii<2;ii++)
 8008192:	2300      	movs	r3, #0
 8008194:	e009      	b.n	80081aa <init_trigger+0x1a>
		memset(&adcdata[ii], 0, sizeof(adcdata_s));
 8008196:	011c      	lsls	r4, r3, #4
 8008198:	480b      	ldr	r0, [pc, #44]	; (80081c8 <init_trigger+0x38>)
 800819a:	1821      	adds	r1, r4, r0
 800819c:	2200      	movs	r2, #0
 800819e:	5022      	str	r2, [r4, r0]
 80081a0:	604a      	str	r2, [r1, #4]
 80081a2:	608a      	str	r2, [r1, #8]
 80081a4:	60ca      	str	r2, [r1, #12]
	for (uint8_t ii=0;ii<2;ii++)
 80081a6:	3301      	adds	r3, #1
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d9f3      	bls.n	8008196 <init_trigger+0x6>

	//Eanble IRQ's
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80081ae:	2200      	movs	r2, #0
 80081b0:	4611      	mov	r1, r2
 80081b2:	2012      	movs	r0, #18
 80081b4:	f7f9 fac0 	bl	8001738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80081b8:	2012      	movs	r0, #18
 80081ba:	f7f9 faf1 	bl	80017a0 <HAL_NVIC_EnableIRQ>

	//Setup IRQ's
	HAL_ADC_Start_IT(currentADCHandler);
 80081be:	4b03      	ldr	r3, [pc, #12]	; (80081cc <init_trigger+0x3c>)
 80081c0:	6818      	ldr	r0, [r3, #0]
 80081c2:	f7f9 f97b 	bl	80014bc <HAL_ADC_Start_IT>
}
 80081c6:	bd10      	pop	{r4, pc}
 80081c8:	20000e6c 	.word	0x20000e6c
 80081cc:	200001a0 	.word	0x200001a0

080081d0 <process_trigger>:

void process_trigger(void)
{
 80081d0:	b508      	push	{r3, lr}
	//check if ADC Value has changed
	if ((settings.trigger_mode_A0 != TRIGGERMODE_NONE) && (adcdata[0].adc_val != adcdata[0].last_adc_val))
 80081d2:	4b32      	ldr	r3, [pc, #200]	; (800829c <process_trigger+0xcc>)
 80081d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80081d8:	b15b      	cbz	r3, 80081f2 <process_trigger+0x22>
 80081da:	4a31      	ldr	r2, [pc, #196]	; (80082a0 <process_trigger+0xd0>)
 80081dc:	8811      	ldrh	r1, [r2, #0]
 80081de:	8852      	ldrh	r2, [r2, #2]
 80081e0:	4291      	cmp	r1, r2
 80081e2:	d006      	beq.n	80081f2 <process_trigger+0x22>
	{
		//Based on Settings manipulate Registers
		switch(settings.trigger_mode_A0)
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d015      	beq.n	8008214 <process_trigger+0x44>
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d01a      	beq.n	8008222 <process_trigger+0x52>
				}

				break;
		}
		//Store Last Value
		adcdata[0].last_adc_val = adcdata[0].adc_val;
 80081ec:	4b2c      	ldr	r3, [pc, #176]	; (80082a0 <process_trigger+0xd0>)
 80081ee:	881a      	ldrh	r2, [r3, #0]
 80081f0:	805a      	strh	r2, [r3, #2]
	}

	//check if ADC Value has changed
	if ((settings.trigger_mode_A1 != TRIGGERMODE_NONE) && (adcdata[1].adc_val != adcdata[1].last_adc_val))
 80081f2:	4b2a      	ldr	r3, [pc, #168]	; (800829c <process_trigger+0xcc>)
 80081f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081f8:	b15b      	cbz	r3, 8008212 <process_trigger+0x42>
 80081fa:	4a29      	ldr	r2, [pc, #164]	; (80082a0 <process_trigger+0xd0>)
 80081fc:	8a11      	ldrh	r1, [r2, #16]
 80081fe:	8a52      	ldrh	r2, [r2, #18]
 8008200:	4291      	cmp	r1, r2
 8008202:	d006      	beq.n	8008212 <process_trigger+0x42>
	{
		//Based on Settings manipulate Registers
		switch(settings.trigger_mode_A1)
 8008204:	2b01      	cmp	r3, #1
 8008206:	d027      	beq.n	8008258 <process_trigger+0x88>
 8008208:	2b02      	cmp	r3, #2
 800820a:	d02c      	beq.n	8008266 <process_trigger+0x96>
				}

				break;
		}
		//Store Last Value
		adcdata[1].last_adc_val = adcdata[1].adc_val;
 800820c:	4b24      	ldr	r3, [pc, #144]	; (80082a0 <process_trigger+0xd0>)
 800820e:	8a1a      	ldrh	r2, [r3, #16]
 8008210:	825a      	strh	r2, [r3, #18]
	}
}
 8008212:	bd08      	pop	{r3, pc}
				set_reg(settings.trigger_reg_A0, adcdata[0].adc_val);
 8008214:	b2c9      	uxtb	r1, r1
 8008216:	4b21      	ldr	r3, [pc, #132]	; (800829c <process_trigger+0xcc>)
 8008218:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800821c:	f7fd fa26 	bl	800566c <set_reg>
				break;
 8008220:	e7e4      	b.n	80081ec <process_trigger+0x1c>
				if ((adcdata[0].adc_val > settings.trigger_level_A0) && (adcdata[0].last_adc_val < settings.trigger_level_A0))
 8008222:	4b1e      	ldr	r3, [pc, #120]	; (800829c <process_trigger+0xcc>)
 8008224:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008228:	4299      	cmp	r1, r3
 800822a:	d901      	bls.n	8008230 <process_trigger+0x60>
 800822c:	429a      	cmp	r2, r3
 800822e:	d30b      	bcc.n	8008248 <process_trigger+0x78>
				else if ((adcdata[0].adc_val <settings. trigger_level_A0) && (adcdata[0].last_adc_val > settings.trigger_level_A0))
 8008230:	4299      	cmp	r1, r3
 8008232:	d2db      	bcs.n	80081ec <process_trigger+0x1c>
 8008234:	429a      	cmp	r2, r3
 8008236:	d9d9      	bls.n	80081ec <process_trigger+0x1c>
					set_reg(settings.trigger_reg_hilo_A0, settings.trigger_val_hilo_A0);
 8008238:	4b18      	ldr	r3, [pc, #96]	; (800829c <process_trigger+0xcc>)
 800823a:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 800823e:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
 8008242:	f7fd fa13 	bl	800566c <set_reg>
 8008246:	e7d1      	b.n	80081ec <process_trigger+0x1c>
					set_reg(settings.trigger_reg_lohi_A0, settings.trigger_val_lohi_A0);
 8008248:	4b14      	ldr	r3, [pc, #80]	; (800829c <process_trigger+0xcc>)
 800824a:	f893 103b 	ldrb.w	r1, [r3, #59]	; 0x3b
 800824e:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 8008252:	f7fd fa0b 	bl	800566c <set_reg>
 8008256:	e7c9      	b.n	80081ec <process_trigger+0x1c>
				set_reg(settings.trigger_reg_A1, adcdata[1].adc_val);
 8008258:	b2c9      	uxtb	r1, r1
 800825a:	4b10      	ldr	r3, [pc, #64]	; (800829c <process_trigger+0xcc>)
 800825c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008260:	f7fd fa04 	bl	800566c <set_reg>
				break;
 8008264:	e7d2      	b.n	800820c <process_trigger+0x3c>
				if ((adcdata[1].adc_val > settings.trigger_level_A1) && (adcdata[1].last_adc_val < settings.trigger_level_A1))
 8008266:	4b0d      	ldr	r3, [pc, #52]	; (800829c <process_trigger+0xcc>)
 8008268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800826c:	4299      	cmp	r1, r3
 800826e:	d901      	bls.n	8008274 <process_trigger+0xa4>
 8008270:	429a      	cmp	r2, r3
 8008272:	d30b      	bcc.n	800828c <process_trigger+0xbc>
				else if ((adcdata[1].adc_val < settings.trigger_level_A1) && (adcdata[1].last_adc_val > settings.trigger_level_A1))
 8008274:	4299      	cmp	r1, r3
 8008276:	d2c9      	bcs.n	800820c <process_trigger+0x3c>
 8008278:	429a      	cmp	r2, r3
 800827a:	d9c7      	bls.n	800820c <process_trigger+0x3c>
					set_reg(settings.trigger_reg_hilo_A1, settings.trigger_val_hilo_A1);
 800827c:	4b07      	ldr	r3, [pc, #28]	; (800829c <process_trigger+0xcc>)
 800827e:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8008282:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 8008286:	f7fd f9f1 	bl	800566c <set_reg>
 800828a:	e7bf      	b.n	800820c <process_trigger+0x3c>
					set_reg(settings.trigger_reg_lohi_A1, settings.trigger_val_lohi_A1);
 800828c:	4b03      	ldr	r3, [pc, #12]	; (800829c <process_trigger+0xcc>)
 800828e:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8008292:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8008296:	f7fd f9e9 	bl	800566c <set_reg>
 800829a:	e7b7      	b.n	800820c <process_trigger+0x3c>
 800829c:	20000af8 	.word	0x20000af8
 80082a0:	20000e6c 	.word	0x20000e6c

080082a4 <print_adc_data>:
	else
		return 0;
}

void print_adc_data(void)
{
 80082a4:	b570      	push	{r4, r5, r6, lr}
	for (int ii=0;ii<2;ii++)
 80082a6:	2400      	movs	r4, #0
 80082a8:	e01a      	b.n	80082e0 <print_adc_data+0x3c>
	{
		print("ADC %d",ii+1);
 80082aa:	1c65      	adds	r5, r4, #1
 80082ac:	4629      	mov	r1, r5
 80082ae:	480e      	ldr	r0, [pc, #56]	; (80082e8 <print_adc_data+0x44>)
 80082b0:	f7ff f966 	bl	8007580 <print>
		print("-------");
 80082b4:	480d      	ldr	r0, [pc, #52]	; (80082ec <print_adc_data+0x48>)
 80082b6:	f7ff f963 	bl	8007580 <print>
		print("ADC VAL: %d",adcdata[ii].adc_val);
 80082ba:	4b0d      	ldr	r3, [pc, #52]	; (80082f0 <print_adc_data+0x4c>)
 80082bc:	0124      	lsls	r4, r4, #4
 80082be:	191e      	adds	r6, r3, r4
 80082c0:	5b19      	ldrh	r1, [r3, r4]
 80082c2:	480c      	ldr	r0, [pc, #48]	; (80082f4 <print_adc_data+0x50>)
 80082c4:	f7ff f95c 	bl	8007580 <print>
		print("ADC LAST VAL: %d",adcdata[ii].last_adc_val);
 80082c8:	8871      	ldrh	r1, [r6, #2]
 80082ca:	480b      	ldr	r0, [pc, #44]	; (80082f8 <print_adc_data+0x54>)
 80082cc:	f7ff f958 	bl	8007580 <print>
		print("ADC BUFCNT: %d",adcdata[ii].bufcnt);
 80082d0:	7bb1      	ldrb	r1, [r6, #14]
 80082d2:	480a      	ldr	r0, [pc, #40]	; (80082fc <print_adc_data+0x58>)
 80082d4:	f7ff f954 	bl	8007580 <print>
		print("");
 80082d8:	4809      	ldr	r0, [pc, #36]	; (8008300 <print_adc_data+0x5c>)
 80082da:	f7ff f951 	bl	8007580 <print>
	for (int ii=0;ii<2;ii++)
 80082de:	462c      	mov	r4, r5
 80082e0:	2c01      	cmp	r4, #1
 80082e2:	dde2      	ble.n	80082aa <print_adc_data+0x6>
	}

}
 80082e4:	bd70      	pop	{r4, r5, r6, pc}
 80082e6:	bf00      	nop
 80082e8:	0800d22c 	.word	0x0800d22c
 80082ec:	0800cbec 	.word	0x0800cbec
 80082f0:	20000e6c 	.word	0x20000e6c
 80082f4:	0800d234 	.word	0x0800d234
 80082f8:	0800d240 	.word	0x0800d240
 80082fc:	0800d254 	.word	0x0800d254
 8008300:	0800cfb8 	.word	0x0800cfb8

08008304 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008304:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008306:	2200      	movs	r2, #0
 8008308:	490f      	ldr	r1, [pc, #60]	; (8008348 <MX_USB_DEVICE_Init+0x44>)
 800830a:	4810      	ldr	r0, [pc, #64]	; (800834c <MX_USB_DEVICE_Init+0x48>)
 800830c:	f7fc fc70 	bl	8004bf0 <USBD_Init>
 8008310:	b970      	cbnz	r0, 8008330 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008312:	490f      	ldr	r1, [pc, #60]	; (8008350 <MX_USB_DEVICE_Init+0x4c>)
 8008314:	480d      	ldr	r0, [pc, #52]	; (800834c <MX_USB_DEVICE_Init+0x48>)
 8008316:	f7fc fc82 	bl	8004c1e <USBD_RegisterClass>
 800831a:	b960      	cbnz	r0, 8008336 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800831c:	490d      	ldr	r1, [pc, #52]	; (8008354 <MX_USB_DEVICE_Init+0x50>)
 800831e:	480b      	ldr	r0, [pc, #44]	; (800834c <MX_USB_DEVICE_Init+0x48>)
 8008320:	f7fc fc1e 	bl	8004b60 <USBD_CDC_RegisterInterface>
 8008324:	b950      	cbnz	r0, 800833c <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008326:	4809      	ldr	r0, [pc, #36]	; (800834c <MX_USB_DEVICE_Init+0x48>)
 8008328:	f7fc fc80 	bl	8004c2c <USBD_Start>
 800832c:	b948      	cbnz	r0, 8008342 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800832e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008330:	f7fe fb50 	bl	80069d4 <Error_Handler>
 8008334:	e7ed      	b.n	8008312 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8008336:	f7fe fb4d 	bl	80069d4 <Error_Handler>
 800833a:	e7ef      	b.n	800831c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800833c:	f7fe fb4a 	bl	80069d4 <Error_Handler>
 8008340:	e7f1      	b.n	8008326 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8008342:	f7fe fb47 	bl	80069d4 <Error_Handler>
}
 8008346:	e7f2      	b.n	800832e <MX_USB_DEVICE_Init+0x2a>
 8008348:	200001b4 	.word	0x200001b4
 800834c:	20000e8c 	.word	0x20000e8c
 8008350:	20000008 	.word	0x20000008
 8008354:	200001a4 	.word	0x200001a4

08008358 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8008358:	2000      	movs	r0, #0
 800835a:	4770      	bx	lr

0800835c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800835c:	2000      	movs	r0, #0
 800835e:	4770      	bx	lr

08008360 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4605      	mov	r5, r0
  /* USER CODE BEGIN 6 */
  //Loopback Test
  //CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
  //Send Data to ring buffer
  if (UART_mode_USB)
 8008364:	4b0b      	ldr	r3, [pc, #44]	; (8008394 <CDC_Receive_FS+0x34>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	b973      	cbnz	r3, 8008388 <CDC_Receive_FS+0x28>
	  ring_buffer_put(&rx_buff_dmx, Buf, *Len);
  else
	  ring_buffer_put(&rx_buff_shell, Buf, *Len);
 800836a:	680a      	ldr	r2, [r1, #0]
 800836c:	4601      	mov	r1, r0
 800836e:	480a      	ldr	r0, [pc, #40]	; (8008398 <CDC_Receive_FS+0x38>)
 8008370:	f7fe fc4d 	bl	8006c0e <ring_buffer_put>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008374:	4c09      	ldr	r4, [pc, #36]	; (800839c <CDC_Receive_FS+0x3c>)
 8008376:	4629      	mov	r1, r5
 8008378:	4620      	mov	r0, r4
 800837a:	f7fc fc00 	bl	8004b7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800837e:	4620      	mov	r0, r4
 8008380:	f7fc fc1d 	bl	8004bbe <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8008384:	2000      	movs	r0, #0
 8008386:	bd38      	pop	{r3, r4, r5, pc}
	  ring_buffer_put(&rx_buff_dmx, Buf, *Len);
 8008388:	680a      	ldr	r2, [r1, #0]
 800838a:	4601      	mov	r1, r0
 800838c:	4804      	ldr	r0, [pc, #16]	; (80083a0 <CDC_Receive_FS+0x40>)
 800838e:	f7fe fc3e 	bl	8006c0e <ring_buffer_put>
 8008392:	e7ef      	b.n	8008374 <CDC_Receive_FS+0x14>
 8008394:	20000431 	.word	0x20000431
 8008398:	200009e0 	.word	0x200009e0
 800839c:	20000e8c 	.word	0x20000e8c
 80083a0:	200009c8 	.word	0x200009c8

080083a4 <CDC_Init_FS>:
{
 80083a4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083a6:	4c06      	ldr	r4, [pc, #24]	; (80083c0 <CDC_Init_FS+0x1c>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	4906      	ldr	r1, [pc, #24]	; (80083c4 <CDC_Init_FS+0x20>)
 80083ac:	4620      	mov	r0, r4
 80083ae:	f7fc fbde 	bl	8004b6e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083b2:	4905      	ldr	r1, [pc, #20]	; (80083c8 <CDC_Init_FS+0x24>)
 80083b4:	4620      	mov	r0, r4
 80083b6:	f7fc fbe2 	bl	8004b7e <USBD_CDC_SetRxBuffer>
}
 80083ba:	2000      	movs	r0, #0
 80083bc:	bd10      	pop	{r4, pc}
 80083be:	bf00      	nop
 80083c0:	20000e8c 	.word	0x20000e8c
 80083c4:	20001344 	.word	0x20001344
 80083c8:	20001150 	.word	0x20001150

080083cc <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80083cc:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <CDC_Transmit_FS+0x28>)
 80083ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 80083d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083d6:	b10b      	cbz	r3, 80083dc <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 80083d8:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 80083da:	4770      	bx	lr
{
 80083dc:	b510      	push	{r4, lr}
 80083de:	460a      	mov	r2, r1
 80083e0:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80083e2:	4c04      	ldr	r4, [pc, #16]	; (80083f4 <CDC_Transmit_FS+0x28>)
 80083e4:	4620      	mov	r0, r4
 80083e6:	f7fc fbc2 	bl	8004b6e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80083ea:	4620      	mov	r0, r4
 80083ec:	f7fc fbcd 	bl	8004b8a <USBD_CDC_TransmitPacket>
}
 80083f0:	bd10      	pop	{r4, pc}
 80083f2:	bf00      	nop
 80083f4:	20000e8c 	.word	0x20000e8c

080083f8 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80083f8:	b118      	cbz	r0, 8008402 <USBD_Get_USB_Status+0xa>
 80083fa:	2802      	cmp	r0, #2
 80083fc:	d003      	beq.n	8008406 <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083fe:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8008400:	4770      	bx	lr
      usb_status = USBD_OK;
 8008402:	2000      	movs	r0, #0
 8008404:	4770      	bx	lr
      usb_status = USBD_BUSY;
 8008406:	2001      	movs	r0, #1
    break;
 8008408:	4770      	bx	lr
	...

0800840c <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 800840c:	6802      	ldr	r2, [r0, #0]
 800840e:	4b0e      	ldr	r3, [pc, #56]	; (8008448 <HAL_PCD_MspInit+0x3c>)
 8008410:	429a      	cmp	r2, r3
 8008412:	d000      	beq.n	8008416 <HAL_PCD_MspInit+0xa>
 8008414:	4770      	bx	lr
{
 8008416:	b500      	push	{lr}
 8008418:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800841a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800841e:	69da      	ldr	r2, [r3, #28]
 8008420:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008424:	61da      	str	r2, [r3, #28]
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800842c:	9301      	str	r3, [sp, #4]
 800842e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008430:	2200      	movs	r2, #0
 8008432:	4611      	mov	r1, r2
 8008434:	2014      	movs	r0, #20
 8008436:	f7f9 f97f 	bl	8001738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800843a:	2014      	movs	r0, #20
 800843c:	f7f9 f9b0 	bl	80017a0 <HAL_NVIC_EnableIRQ>
}
 8008440:	b003      	add	sp, #12
 8008442:	f85d fb04 	ldr.w	pc, [sp], #4
 8008446:	bf00      	nop
 8008448:	40005c00 	.word	0x40005c00

0800844c <HAL_PCD_SetupStageCallback>:
{
 800844c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800844e:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8008452:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8008456:	f7fc fc02 	bl	8004c5e <USBD_LL_SetupStage>
}
 800845a:	bd08      	pop	{r3, pc}

0800845c <HAL_PCD_DataOutStageCallback>:
{
 800845c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800845e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8008462:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8008466:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800846a:	f7fc fc25 	bl	8004cb8 <USBD_LL_DataOutStage>
}
 800846e:	bd08      	pop	{r3, pc}

08008470 <HAL_PCD_DataInStageCallback>:
{
 8008470:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008472:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8008476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008478:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800847c:	f7fc fc65 	bl	8004d4a <USBD_LL_DataInStage>
}
 8008480:	bd08      	pop	{r3, pc}

08008482 <HAL_PCD_SOFCallback>:
{
 8008482:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008484:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8008488:	f7fc fd07 	bl	8004e9a <USBD_LL_SOF>
}
 800848c:	bd08      	pop	{r3, pc}

0800848e <HAL_PCD_ResetCallback>:
{ 
 800848e:	b510      	push	{r4, lr}
 8008490:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008492:	6883      	ldr	r3, [r0, #8]
 8008494:	2b02      	cmp	r3, #2
 8008496:	d001      	beq.n	800849c <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8008498:	f7fe fa9c 	bl	80069d4 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800849c:	2101      	movs	r1, #1
 800849e:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 80084a2:	f7fc fce3 	bl	8004e6c <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084a6:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 80084aa:	f7fc fcb7 	bl	8004e1c <USBD_LL_Reset>
}
 80084ae:	bd10      	pop	{r4, pc}

080084b0 <HAL_PCD_SuspendCallback>:
{
 80084b0:	b510      	push	{r4, lr}
 80084b2:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084b4:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80084b8:	f7fc fcdb 	bl	8004e72 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80084bc:	69a3      	ldr	r3, [r4, #24]
 80084be:	b123      	cbz	r3, 80084ca <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084c0:	4a02      	ldr	r2, [pc, #8]	; (80084cc <HAL_PCD_SuspendCallback+0x1c>)
 80084c2:	6913      	ldr	r3, [r2, #16]
 80084c4:	f043 0306 	orr.w	r3, r3, #6
 80084c8:	6113      	str	r3, [r2, #16]
}
 80084ca:	bd10      	pop	{r4, pc}
 80084cc:	e000ed00 	.word	0xe000ed00

080084d0 <HAL_PCD_ResumeCallback>:
{
 80084d0:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80084d2:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80084d6:	f7fc fcd5 	bl	8004e84 <USBD_LL_Resume>
}
 80084da:	bd08      	pop	{r3, pc}

080084dc <USBD_LL_Init>:
{
 80084dc:	b510      	push	{r4, lr}
 80084de:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80084e0:	481d      	ldr	r0, [pc, #116]	; (8008558 <USBD_LL_Init+0x7c>)
 80084e2:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80084e6:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 80084ea:	4b1c      	ldr	r3, [pc, #112]	; (800855c <USBD_LL_Init+0x80>)
 80084ec:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80084ee:	2308      	movs	r3, #8
 80084f0:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80084f2:	2302      	movs	r3, #2
 80084f4:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80084fa:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80084fc:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80084fe:	f7f9 fd46 	bl	8001f8e <HAL_PCD_Init>
 8008502:	bb30      	cbnz	r0, 8008552 <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008504:	2318      	movs	r3, #24
 8008506:	2200      	movs	r2, #0
 8008508:	4611      	mov	r1, r2
 800850a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800850e:	f7fa f96c 	bl	80027ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008512:	2358      	movs	r3, #88	; 0x58
 8008514:	2200      	movs	r2, #0
 8008516:	2180      	movs	r1, #128	; 0x80
 8008518:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800851c:	f7fa f965 	bl	80027ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008520:	23c0      	movs	r3, #192	; 0xc0
 8008522:	2200      	movs	r2, #0
 8008524:	2181      	movs	r1, #129	; 0x81
 8008526:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800852a:	f7fa f95e 	bl	80027ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800852e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008532:	2200      	movs	r2, #0
 8008534:	2101      	movs	r1, #1
 8008536:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800853a:	f7fa f956 	bl	80027ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800853e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008542:	2200      	movs	r2, #0
 8008544:	2182      	movs	r1, #130	; 0x82
 8008546:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800854a:	f7fa f94e 	bl	80027ea <HAL_PCDEx_PMAConfig>
}
 800854e:	2000      	movs	r0, #0
 8008550:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8008552:	f7fe fa3f 	bl	80069d4 <Error_Handler>
 8008556:	e7d5      	b.n	8008504 <USBD_LL_Init+0x28>
 8008558:	20001538 	.word	0x20001538
 800855c:	40005c00 	.word	0x40005c00

08008560 <USBD_LL_Start>:
{
 8008560:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8008562:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008566:	f7f9 fd8c 	bl	8002082 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800856a:	f7ff ff45 	bl	80083f8 <USBD_Get_USB_Status>
}
 800856e:	bd08      	pop	{r3, pc}

08008570 <USBD_LL_OpenEP>:
{
 8008570:	b510      	push	{r4, lr}
 8008572:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008574:	4613      	mov	r3, r2
 8008576:	4622      	mov	r2, r4
 8008578:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800857c:	f7f9 fdac 	bl	80020d8 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008580:	f7ff ff3a 	bl	80083f8 <USBD_Get_USB_Status>
}
 8008584:	bd10      	pop	{r4, pc}

08008586 <USBD_LL_CloseEP>:
{
 8008586:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008588:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800858c:	f7f9 fddc 	bl	8002148 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008590:	f7ff ff32 	bl	80083f8 <USBD_Get_USB_Status>
}
 8008594:	bd08      	pop	{r3, pc}

08008596 <USBD_LL_StallEP>:
{
 8008596:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008598:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800859c:	f7fa f8b7 	bl	800270e <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a0:	f7ff ff2a 	bl	80083f8 <USBD_Get_USB_Status>
}
 80085a4:	bd08      	pop	{r3, pc}

080085a6 <USBD_LL_ClearStallEP>:
{
 80085a6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80085a8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80085ac:	f7fa f8e6 	bl	800277c <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b0:	f7ff ff22 	bl	80083f8 <USBD_Get_USB_Status>
}
 80085b4:	bd08      	pop	{r3, pc}

080085b6 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085b6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 80085ba:	f011 0f80 	tst.w	r1, #128	; 0x80
 80085be:	d106      	bne.n	80085ce <USBD_LL_IsStallEP+0x18>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80085c0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80085c4:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 80085c8:	f891 012a 	ldrb.w	r0, [r1, #298]	; 0x12a
}
 80085cc:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80085ce:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80085d2:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 80085d6:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 80085da:	4770      	bx	lr

080085dc <USBD_LL_SetUSBAddress>:
{
 80085dc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085de:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80085e2:	f7f9 fd65 	bl	80020b0 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80085e6:	f7ff ff07 	bl	80083f8 <USBD_Get_USB_Status>
}
 80085ea:	bd08      	pop	{r3, pc}

080085ec <USBD_LL_Transmit>:
{
 80085ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085ee:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80085f2:	f7f9 fdfd 	bl	80021f0 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f6:	f7ff feff 	bl	80083f8 <USBD_Get_USB_Status>
}
 80085fa:	bd08      	pop	{r3, pc}

080085fc <USBD_LL_PrepareReceive>:
{
 80085fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085fe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008602:	f7f9 fdcf 	bl	80021a4 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008606:	f7ff fef7 	bl	80083f8 <USBD_Get_USB_Status>
}
 800860a:	bd08      	pop	{r3, pc}

0800860c <USBD_LL_GetRxDataSize>:
{
 800860c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800860e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008612:	f7f9 fde6 	bl	80021e2 <HAL_PCD_EP_GetRxCount>
}
 8008616:	bd08      	pop	{r3, pc}

08008618 <USBD_static_malloc>:
}
 8008618:	4800      	ldr	r0, [pc, #0]	; (800861c <USBD_static_malloc+0x4>)
 800861a:	4770      	bx	lr
 800861c:	20000710 	.word	0x20000710

08008620 <USBD_static_free>:
}
 8008620:	4770      	bx	lr

08008622 <HAL_PCDEx_SetConnectionState>:
}
 8008622:	4770      	bx	lr

08008624 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008624:	2312      	movs	r3, #18
 8008626:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8008628:	4800      	ldr	r0, [pc, #0]	; (800862c <USBD_FS_DeviceDescriptor+0x8>)
 800862a:	4770      	bx	lr
 800862c:	200001d0 	.word	0x200001d0

08008630 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008630:	2304      	movs	r3, #4
 8008632:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8008634:	4800      	ldr	r0, [pc, #0]	; (8008638 <USBD_FS_LangIDStrDescriptor+0x8>)
 8008636:	4770      	bx	lr
 8008638:	200001e4 	.word	0x200001e4

0800863c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800863c:	2300      	movs	r3, #0
 800863e:	4293      	cmp	r3, r2
 8008640:	d216      	bcs.n	8008670 <IntToUnicode+0x34>
{
 8008642:	b430      	push	{r4, r5}
 8008644:	e00b      	b.n	800865e <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008646:	3437      	adds	r4, #55	; 0x37
 8008648:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 800864c:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800864e:	005c      	lsls	r4, r3, #1
 8008650:	3401      	adds	r4, #1
 8008652:	2500      	movs	r5, #0
 8008654:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 8008656:	3301      	adds	r3, #1
 8008658:	b2db      	uxtb	r3, r3
 800865a:	4293      	cmp	r3, r2
 800865c:	d206      	bcs.n	800866c <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 800865e:	0f04      	lsrs	r4, r0, #28
 8008660:	2c09      	cmp	r4, #9
 8008662:	d8f0      	bhi.n	8008646 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8008664:	3430      	adds	r4, #48	; 0x30
 8008666:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 800866a:	e7ef      	b.n	800864c <IntToUnicode+0x10>
  }
}
 800866c:	bc30      	pop	{r4, r5}
 800866e:	4770      	bx	lr
 8008670:	4770      	bx	lr
	...

08008674 <Get_SerialNum>:
{
 8008674:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008676:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <Get_SerialNum+0x2c>)
 8008678:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800867a:	3304      	adds	r3, #4
 800867c:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800867e:	3304      	adds	r3, #4
 8008680:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8008682:	18c0      	adds	r0, r0, r3
 8008684:	d100      	bne.n	8008688 <Get_SerialNum+0x14>
}
 8008686:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008688:	4d06      	ldr	r5, [pc, #24]	; (80086a4 <Get_SerialNum+0x30>)
 800868a:	2208      	movs	r2, #8
 800868c:	1ca9      	adds	r1, r5, #2
 800868e:	f7ff ffd5 	bl	800863c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008692:	2204      	movs	r2, #4
 8008694:	f105 0112 	add.w	r1, r5, #18
 8008698:	4620      	mov	r0, r4
 800869a:	f7ff ffcf 	bl	800863c <IntToUnicode>
}
 800869e:	e7f2      	b.n	8008686 <Get_SerialNum+0x12>
 80086a0:	1ffff7e8 	.word	0x1ffff7e8
 80086a4:	200001e8 	.word	0x200001e8

080086a8 <USBD_FS_SerialStrDescriptor>:
{
 80086a8:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80086aa:	231a      	movs	r3, #26
 80086ac:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 80086ae:	f7ff ffe1 	bl	8008674 <Get_SerialNum>
}
 80086b2:	4801      	ldr	r0, [pc, #4]	; (80086b8 <USBD_FS_SerialStrDescriptor+0x10>)
 80086b4:	bd08      	pop	{r3, pc}
 80086b6:	bf00      	nop
 80086b8:	200001e8 	.word	0x200001e8

080086bc <USBD_FS_ProductStrDescriptor>:
{
 80086bc:	b508      	push	{r3, lr}
 80086be:	460a      	mov	r2, r1
  if(speed == 0)
 80086c0:	b128      	cbz	r0, 80086ce <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086c2:	4905      	ldr	r1, [pc, #20]	; (80086d8 <USBD_FS_ProductStrDescriptor+0x1c>)
 80086c4:	4805      	ldr	r0, [pc, #20]	; (80086dc <USBD_FS_ProductStrDescriptor+0x20>)
 80086c6:	f7fc ff23 	bl	8005510 <USBD_GetString>
}
 80086ca:	4803      	ldr	r0, [pc, #12]	; (80086d8 <USBD_FS_ProductStrDescriptor+0x1c>)
 80086cc:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086ce:	4902      	ldr	r1, [pc, #8]	; (80086d8 <USBD_FS_ProductStrDescriptor+0x1c>)
 80086d0:	4802      	ldr	r0, [pc, #8]	; (80086dc <USBD_FS_ProductStrDescriptor+0x20>)
 80086d2:	f7fc ff1d 	bl	8005510 <USBD_GetString>
 80086d6:	e7f8      	b.n	80086ca <USBD_FS_ProductStrDescriptor+0xe>
 80086d8:	200017a4 	.word	0x200017a4
 80086dc:	0800d294 	.word	0x0800d294

080086e0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80086e0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086e2:	4c04      	ldr	r4, [pc, #16]	; (80086f4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80086e4:	460a      	mov	r2, r1
 80086e6:	4621      	mov	r1, r4
 80086e8:	4803      	ldr	r0, [pc, #12]	; (80086f8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80086ea:	f7fc ff11 	bl	8005510 <USBD_GetString>
}
 80086ee:	4620      	mov	r0, r4
 80086f0:	bd10      	pop	{r4, pc}
 80086f2:	bf00      	nop
 80086f4:	200017a4 	.word	0x200017a4
 80086f8:	0800d280 	.word	0x0800d280

080086fc <USBD_FS_ConfigStrDescriptor>:
{
 80086fc:	b508      	push	{r3, lr}
 80086fe:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8008700:	b128      	cbz	r0, 800870e <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008702:	4905      	ldr	r1, [pc, #20]	; (8008718 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8008704:	4805      	ldr	r0, [pc, #20]	; (800871c <USBD_FS_ConfigStrDescriptor+0x20>)
 8008706:	f7fc ff03 	bl	8005510 <USBD_GetString>
}
 800870a:	4803      	ldr	r0, [pc, #12]	; (8008718 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800870c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800870e:	4902      	ldr	r1, [pc, #8]	; (8008718 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8008710:	4802      	ldr	r0, [pc, #8]	; (800871c <USBD_FS_ConfigStrDescriptor+0x20>)
 8008712:	f7fc fefd 	bl	8005510 <USBD_GetString>
 8008716:	e7f8      	b.n	800870a <USBD_FS_ConfigStrDescriptor+0xe>
 8008718:	200017a4 	.word	0x200017a4
 800871c:	0800d264 	.word	0x0800d264

08008720 <USBD_FS_InterfaceStrDescriptor>:
{
 8008720:	b508      	push	{r3, lr}
 8008722:	460a      	mov	r2, r1
  if(speed == 0)
 8008724:	b128      	cbz	r0, 8008732 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008726:	4905      	ldr	r1, [pc, #20]	; (800873c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8008728:	4805      	ldr	r0, [pc, #20]	; (8008740 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800872a:	f7fc fef1 	bl	8005510 <USBD_GetString>
}
 800872e:	4803      	ldr	r0, [pc, #12]	; (800873c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8008730:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008732:	4902      	ldr	r1, [pc, #8]	; (800873c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8008734:	4802      	ldr	r0, [pc, #8]	; (8008740 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8008736:	f7fc feeb 	bl	8005510 <USBD_GetString>
 800873a:	e7f8      	b.n	800872e <USBD_FS_InterfaceStrDescriptor+0xe>
 800873c:	200017a4 	.word	0x200017a4
 8008740:	0800d270 	.word	0x0800d270

08008744 <is_printable>:
    {VT100_KEY_MOVE_CURSOR_HOME,    (uint8_t*)key_move_cursor_home,      sizeof(key_move_cursor_home)},
};

static bool is_printable(uint8_t byte)
{
    return (byte >= 0x20 && byte <= 0x7E)? true:false;
 8008744:	3820      	subs	r0, #32
 8008746:	b2c0      	uxtb	r0, r0
}
 8008748:	285e      	cmp	r0, #94	; 0x5e
 800874a:	bf8c      	ite	hi
 800874c:	2000      	movhi	r0, #0
 800874e:	2001      	movls	r0, #1
 8008750:	4770      	bx	lr
	...

08008754 <find_key>:

static vt100_key_t find_key(uint8_t * buf, uint8_t len)
{
 8008754:	b570      	push	{r4, r5, r6, lr}
 8008756:	4606      	mov	r6, r0
 8008758:	460d      	mov	r5, r1
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 800875a:	2400      	movs	r4, #0
 800875c:	e000      	b.n	8008760 <find_key+0xc>
 800875e:	3401      	adds	r4, #1
 8008760:	2c0e      	cmp	r4, #14
 8008762:	d816      	bhi.n	8008792 <find_key+0x3e>
    {
        if ((len == vt100_keycodes[ii].code_len) &&
 8008764:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008768:	009a      	lsls	r2, r3, #2
 800876a:	4b0b      	ldr	r3, [pc, #44]	; (8008798 <find_key+0x44>)
 800876c:	4413      	add	r3, r2
 800876e:	7a1b      	ldrb	r3, [r3, #8]
 8008770:	42ab      	cmp	r3, r5
 8008772:	d1f4      	bne.n	800875e <find_key+0xa>
            (0 == strncmp((const char*)vt100_keycodes[ii].code, (const char*)buf, len)))
 8008774:	4b08      	ldr	r3, [pc, #32]	; (8008798 <find_key+0x44>)
 8008776:	4413      	add	r3, r2
 8008778:	462a      	mov	r2, r5
 800877a:	4631      	mov	r1, r6
 800877c:	6858      	ldr	r0, [r3, #4]
 800877e:	f001 f8a7 	bl	80098d0 <strncmp>
        if ((len == vt100_keycodes[ii].code_len) &&
 8008782:	2800      	cmp	r0, #0
 8008784:	d1eb      	bne.n	800875e <find_key+0xa>
        {
            return vt100_keycodes[ii].key;
 8008786:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800878a:	00a3      	lsls	r3, r4, #2
 800878c:	4a02      	ldr	r2, [pc, #8]	; (8008798 <find_key+0x44>)
 800878e:	5cd0      	ldrb	r0, [r2, r3]
 8008790:	e000      	b.n	8008794 <find_key+0x40>
        }
    }
    
    return VT100_KEY_INVALID;
 8008792:	2000      	movs	r0, #0
}
 8008794:	bd70      	pop	{r4, r5, r6, pc}
 8008796:	bf00      	nop
 8008798:	0800d2d4 	.word	0x0800d2d4

0800879c <vt100_process_byte>:

vt100_key_t vt100_process_byte(uint8_t byte)
{
 800879c:	b570      	push	{r4, r5, r6, lr}
 800879e:	4606      	mov	r6, r0
    static uint8_t cbuf[8] = {0};
    static uint8_t cbuf_idx = 0;
    
    if (0 == cbuf_idx && true == is_printable(byte))
 80087a0:	4b14      	ldr	r3, [pc, #80]	; (80087f4 <vt100_process_byte+0x58>)
 80087a2:	781d      	ldrb	r5, [r3, #0]
 80087a4:	b915      	cbnz	r5, 80087ac <vt100_process_byte+0x10>
 80087a6:	f7ff ffcd 	bl	8008744 <is_printable>
 80087aa:	b9f0      	cbnz	r0, 80087ea <vt100_process_byte+0x4e>
    {
        return VT100_KEY_PRINTABLE;
    }
    else if (0x0D == byte) /* Enter */
 80087ac:	2e0d      	cmp	r6, #13
 80087ae:	d01e      	beq.n	80087ee <vt100_process_byte+0x52>
        return VT100_KEY_ENTER;
    }
    else
    {
        vt100_key_t key = VT100_KEY_INVALID;
        cbuf[cbuf_idx++] = byte;
 80087b0:	1c6c      	adds	r4, r5, #1
 80087b2:	b2e4      	uxtb	r4, r4
 80087b4:	4b0f      	ldr	r3, [pc, #60]	; (80087f4 <vt100_process_byte+0x58>)
 80087b6:	701c      	strb	r4, [r3, #0]
 80087b8:	480f      	ldr	r0, [pc, #60]	; (80087f8 <vt100_process_byte+0x5c>)
 80087ba:	5546      	strb	r6, [r0, r5]
        key = find_key(cbuf, cbuf_idx);
 80087bc:	4621      	mov	r1, r4
 80087be:	f7ff ffc9 	bl	8008754 <find_key>
        if (VT100_KEY_INVALID != key)
 80087c2:	4603      	mov	r3, r0
 80087c4:	b918      	cbnz	r0, 80087ce <vt100_process_byte+0x32>
            memset(cbuf, 0, sizeof(cbuf));
            return key;
        }
        else
        {
            if (cbuf_idx >= sizeof(cbuf))
 80087c6:	2c07      	cmp	r4, #7
 80087c8:	d808      	bhi.n	80087dc <vt100_process_byte+0x40>
            }
        }
    }

    return VT100_KEY_INVALID;
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	bd70      	pop	{r4, r5, r6, pc}
            cbuf_idx = 0;
 80087ce:	2200      	movs	r2, #0
 80087d0:	4908      	ldr	r1, [pc, #32]	; (80087f4 <vt100_process_byte+0x58>)
 80087d2:	700a      	strb	r2, [r1, #0]
            memset(cbuf, 0, sizeof(cbuf));
 80087d4:	4908      	ldr	r1, [pc, #32]	; (80087f8 <vt100_process_byte+0x5c>)
 80087d6:	600a      	str	r2, [r1, #0]
 80087d8:	604a      	str	r2, [r1, #4]
            return key;
 80087da:	e7f6      	b.n	80087ca <vt100_process_byte+0x2e>
                cbuf_idx = 0;
 80087dc:	2200      	movs	r2, #0
 80087de:	4905      	ldr	r1, [pc, #20]	; (80087f4 <vt100_process_byte+0x58>)
 80087e0:	700a      	strb	r2, [r1, #0]
                memset(cbuf, 0, sizeof(cbuf));
 80087e2:	4905      	ldr	r1, [pc, #20]	; (80087f8 <vt100_process_byte+0x5c>)
 80087e4:	600a      	str	r2, [r1, #0]
 80087e6:	604a      	str	r2, [r1, #4]
 80087e8:	e7ef      	b.n	80087ca <vt100_process_byte+0x2e>
        return VT100_KEY_PRINTABLE;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e7ed      	b.n	80087ca <vt100_process_byte+0x2e>
        return VT100_KEY_ENTER;
 80087ee:	2308      	movs	r3, #8
 80087f0:	e7eb      	b.n	80087ca <vt100_process_byte+0x2e>
 80087f2:	bf00      	nop
 80087f4:	20000938 	.word	0x20000938
 80087f8:	20000930 	.word	0x20000930

080087fc <vt100_get_keycode>:

vt100_keycode_t * vt100_get_keycode(vt100_key_t key)
{
    if (key >= VT100_KEY_MAX) return NULL;
 80087fc:	280e      	cmp	r0, #14
 80087fe:	d813      	bhi.n	8008828 <vt100_get_keycode+0x2c>
    
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8008800:	2300      	movs	r3, #0
 8008802:	2b0e      	cmp	r3, #14
 8008804:	d80e      	bhi.n	8008824 <vt100_get_keycode+0x28>
    {
        if (vt100_keycodes[ii].key == key)
 8008806:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800880a:	008a      	lsls	r2, r1, #2
 800880c:	4907      	ldr	r1, [pc, #28]	; (800882c <vt100_get_keycode+0x30>)
 800880e:	5c8a      	ldrb	r2, [r1, r2]
 8008810:	4282      	cmp	r2, r0
 8008812:	d001      	beq.n	8008818 <vt100_get_keycode+0x1c>
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8008814:	3301      	adds	r3, #1
 8008816:	e7f4      	b.n	8008802 <vt100_get_keycode+0x6>
        {
            return (vt100_keycode_t*)&vt100_keycodes[ii];
 8008818:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800881c:	009a      	lsls	r2, r3, #2
 800881e:	4608      	mov	r0, r1
 8008820:	4410      	add	r0, r2
 8008822:	4770      	bx	lr
        }
    }
    
    return NULL;
 8008824:	2000      	movs	r0, #0
 8008826:	4770      	bx	lr
    if (key >= VT100_KEY_MAX) return NULL;
 8008828:	2000      	movs	r0, #0
}
 800882a:	4770      	bx	lr
 800882c:	0800d2d4 	.word	0x0800d2d4

08008830 <fx_pwm_pulsing_light_run>:
	//Register effect
	register_fx(&param2,fx_num);
}

t_fx_result fx_pwm_pulsing_light_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 8008830:	b538      	push	{r3, r4, r5, lr}
	uint8_t ii = 0;
	int16_t val;

	switch(state)
 8008832:	2801      	cmp	r0, #1
 8008834:	d00b      	beq.n	800884e <fx_pwm_pulsing_light_run+0x1e>
 8008836:	b118      	cbz	r0, 8008840 <fx_pwm_pulsing_light_run+0x10>
 8008838:	2802      	cmp	r0, #2
 800883a:	d061      	beq.n	8008900 <fx_pwm_pulsing_light_run+0xd0>
				set_pwm_light(ii, 0);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 800883c:	2003      	movs	r0, #3
 800883e:	e005      	b.n	800884c <fx_pwm_pulsing_light_run+0x1c>
			data = 0;
 8008840:	2400      	movs	r4, #0
 8008842:	4b30      	ldr	r3, [pc, #192]	; (8008904 <fx_pwm_pulsing_light_run+0xd4>)
 8008844:	701c      	strb	r4, [r3, #0]
			reset_frame_delay();
 8008846:	f000 fc57 	bl	80090f8 <reset_frame_delay>
			return FX_OK;
 800884a:	4620      	mov	r0, r4
}
 800884c:	bd38      	pop	{r3, r4, r5, pc}
			if (state == 0)  //Off
 800884e:	b188      	cbz	r0, 8008874 <fx_pwm_pulsing_light_run+0x44>
			else if (state == 1)	//Ramp Up
 8008850:	2801      	cmp	r0, #1
 8008852:	d020      	beq.n	8008896 <fx_pwm_pulsing_light_run+0x66>
			else if (state == 2)  //On
 8008854:	2802      	cmp	r0, #2
 8008856:	d030      	beq.n	80088ba <fx_pwm_pulsing_light_run+0x8a>
				val = data - get_DMX_variable(DMX_STRIP1_V1);
 8008858:	4b2a      	ldr	r3, [pc, #168]	; (8008904 <fx_pwm_pulsing_light_run+0xd4>)
 800885a:	781c      	ldrb	r4, [r3, #0]
 800885c:	2010      	movs	r0, #16
 800885e:	f000 fc6a 	bl	8009136 <get_DMX_variable>
 8008862:	b283      	uxth	r3, r0
 8008864:	1ae3      	subs	r3, r4, r3
				if (val<0)
 8008866:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800886a:	d12f      	bne.n	80088cc <fx_pwm_pulsing_light_run+0x9c>
					data = val;
 800886c:	1a24      	subs	r4, r4, r0
 800886e:	4b25      	ldr	r3, [pc, #148]	; (8008904 <fx_pwm_pulsing_light_run+0xd4>)
 8008870:	701c      	strb	r4, [r3, #0]
 8008872:	e007      	b.n	8008884 <fx_pwm_pulsing_light_run+0x54>
				data = 0;
 8008874:	4b23      	ldr	r3, [pc, #140]	; (8008904 <fx_pwm_pulsing_light_run+0xd4>)
 8008876:	2200      	movs	r2, #0
 8008878:	701a      	strb	r2, [r3, #0]
				if (!check_frame_delay(get_DMX_variable(DMX_STRIP1_SPEED)))
 800887a:	200d      	movs	r0, #13
 800887c:	f000 fc5b 	bl	8009136 <get_DMX_variable>
 8008880:	f000 fc4c 	bl	800911c <check_frame_delay>
			val = get_DMX_variable(DMX_STRIP1_SIZE);
 8008884:	200e      	movs	r0, #14
 8008886:	f000 fc56 	bl	8009136 <get_DMX_variable>
 800888a:	b205      	sxth	r5, r0
			if (val>9)
 800888c:	2d09      	cmp	r5, #9
 800888e:	dd00      	ble.n	8008892 <fx_pwm_pulsing_light_run+0x62>
				val = 9;
 8008890:	2509      	movs	r5, #9
			for (ii=0;ii<val+1;ii++)
 8008892:	2400      	movs	r4, #0
 8008894:	e025      	b.n	80088e2 <fx_pwm_pulsing_light_run+0xb2>
				val = data + get_DMX_variable(DMX_STRIP1_COMPLEXITY);
 8008896:	4b1b      	ldr	r3, [pc, #108]	; (8008904 <fx_pwm_pulsing_light_run+0xd4>)
 8008898:	781c      	ldrb	r4, [r3, #0]
 800889a:	200f      	movs	r0, #15
 800889c:	f000 fc4b 	bl	8009136 <get_DMX_variable>
 80088a0:	b283      	uxth	r3, r0
 80088a2:	4423      	add	r3, r4
 80088a4:	b21b      	sxth	r3, r3
				if (val>255)
 80088a6:	2bff      	cmp	r3, #255	; 0xff
 80088a8:	dd03      	ble.n	80088b2 <fx_pwm_pulsing_light_run+0x82>
					data = 255;
 80088aa:	4b16      	ldr	r3, [pc, #88]	; (8008904 <fx_pwm_pulsing_light_run+0xd4>)
 80088ac:	22ff      	movs	r2, #255	; 0xff
 80088ae:	701a      	strb	r2, [r3, #0]
 80088b0:	e7e8      	b.n	8008884 <fx_pwm_pulsing_light_run+0x54>
					data = val;
 80088b2:	4404      	add	r4, r0
 80088b4:	4b13      	ldr	r3, [pc, #76]	; (8008904 <fx_pwm_pulsing_light_run+0xd4>)
 80088b6:	701c      	strb	r4, [r3, #0]
 80088b8:	e7e4      	b.n	8008884 <fx_pwm_pulsing_light_run+0x54>
				data = 255;
 80088ba:	4b12      	ldr	r3, [pc, #72]	; (8008904 <fx_pwm_pulsing_light_run+0xd4>)
 80088bc:	22ff      	movs	r2, #255	; 0xff
 80088be:	701a      	strb	r2, [r3, #0]
				if (!check_frame_delay(get_DMX_variable(DMX_STRIP1_SPEED)))
 80088c0:	200d      	movs	r0, #13
 80088c2:	f000 fc38 	bl	8009136 <get_DMX_variable>
 80088c6:	f000 fc29 	bl	800911c <check_frame_delay>
 80088ca:	e7db      	b.n	8008884 <fx_pwm_pulsing_light_run+0x54>
					data = 0;
 80088cc:	4b0d      	ldr	r3, [pc, #52]	; (8008904 <fx_pwm_pulsing_light_run+0xd4>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	701a      	strb	r2, [r3, #0]
 80088d2:	e7d7      	b.n	8008884 <fx_pwm_pulsing_light_run+0x54>
				set_pwm_light(ii, data);
 80088d4:	4b0b      	ldr	r3, [pc, #44]	; (8008904 <fx_pwm_pulsing_light_run+0xd4>)
 80088d6:	7819      	ldrb	r1, [r3, #0]
 80088d8:	4620      	mov	r0, r4
 80088da:	f000 fc27 	bl	800912c <set_pwm_light>
			for (ii=0;ii<val+1;ii++)
 80088de:	3401      	adds	r4, #1
 80088e0:	b2e4      	uxtb	r4, r4
 80088e2:	1c6b      	adds	r3, r5, #1
 80088e4:	429c      	cmp	r4, r3
 80088e6:	dbf5      	blt.n	80088d4 <fx_pwm_pulsing_light_run+0xa4>
			return FX_RUNNING;
 80088e8:	2002      	movs	r0, #2
 80088ea:	e7af      	b.n	800884c <fx_pwm_pulsing_light_run+0x1c>
				set_pwm_light(ii, 0);
 80088ec:	2100      	movs	r1, #0
 80088ee:	4620      	mov	r0, r4
 80088f0:	f000 fc1c 	bl	800912c <set_pwm_light>
			for (ii=0;ii<10;ii++)
 80088f4:	3401      	adds	r4, #1
 80088f6:	b2e4      	uxtb	r4, r4
 80088f8:	2c09      	cmp	r4, #9
 80088fa:	d9f7      	bls.n	80088ec <fx_pwm_pulsing_light_run+0xbc>
			return FX_COMPLETED;
 80088fc:	2001      	movs	r0, #1
 80088fe:	e7a5      	b.n	800884c <fx_pwm_pulsing_light_run+0x1c>
			for (ii=0;ii<10;ii++)
 8008900:	2400      	movs	r4, #0
 8008902:	e7f9      	b.n	80088f8 <fx_pwm_pulsing_light_run+0xc8>
 8008904:	200019a4 	.word	0x200019a4

08008908 <fx_pwm_pulsing_light>:
{
 8008908:	b508      	push	{r3, lr}
	register_fx(&param1,fx_num);
 800890a:	4601      	mov	r1, r0
 800890c:	4801      	ldr	r0, [pc, #4]	; (8008914 <fx_pwm_pulsing_light+0xc>)
 800890e:	f7fd f869 	bl	80059e4 <register_fx>
}
 8008912:	bd08      	pop	{r3, pc}
 8008914:	0800d388 	.word	0x0800d388

08008918 <fx_pwm_pulsing_pulse_light>:
{
 8008918:	b508      	push	{r3, lr}
	register_fx(&param2,fx_num);
 800891a:	4601      	mov	r1, r0
 800891c:	4801      	ldr	r0, [pc, #4]	; (8008924 <fx_pwm_pulsing_pulse_light+0xc>)
 800891e:	f7fd f861 	bl	80059e4 <register_fx>
}
 8008922:	bd08      	pop	{r3, pc}
 8008924:	0800d39c 	.word	0x0800d39c

08008928 <fx_pwm_running_light_run>:
	//Register effect
	register_fx(&param2, fx_num);
}

t_fx_result fx_pwm_running_light_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 8008928:	b570      	push	{r4, r5, r6, lr}
	uint8_t ii = 0;
	int16_t val;

	switch(state)
 800892a:	2801      	cmp	r0, #1
 800892c:	d012      	beq.n	8008954 <fx_pwm_running_light_run+0x2c>
 800892e:	b118      	cbz	r0, 8008938 <fx_pwm_running_light_run+0x10>
 8008930:	2802      	cmp	r0, #2
 8008932:	d061      	beq.n	80089f8 <fx_pwm_running_light_run+0xd0>
			free(data);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 8008934:	2003      	movs	r0, #3
}
 8008936:	bd70      	pop	{r4, r5, r6, pc}
			data = malloc(11);
 8008938:	200b      	movs	r0, #11
 800893a:	f000 fee1 	bl	8009700 <malloc>
 800893e:	4b32      	ldr	r3, [pc, #200]	; (8008a08 <fx_pwm_running_light_run+0xe0>)
 8008940:	6018      	str	r0, [r3, #0]
			memset(data, 0, 11);
 8008942:	2400      	movs	r4, #0
 8008944:	6004      	str	r4, [r0, #0]
 8008946:	6044      	str	r4, [r0, #4]
 8008948:	f8c0 4007 	str.w	r4, [r0, #7]
			reset_frame_delay();
 800894c:	f000 fbd4 	bl	80090f8 <reset_frame_delay>
			return FX_OK;
 8008950:	4620      	mov	r0, r4
 8008952:	e7f0      	b.n	8008936 <fx_pwm_running_light_run+0xe>
			if (!check_frame_delay(get_DMX_variable(DMX_STRIP1_SPEED))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 8008954:	200d      	movs	r0, #13
 8008956:	f000 fbee 	bl	8009136 <get_DMX_variable>
 800895a:	f000 fbdf 	bl	800911c <check_frame_delay>
 800895e:	2800      	cmp	r0, #0
 8008960:	d050      	beq.n	8008a04 <fx_pwm_running_light_run+0xdc>
			for (ii=0;ii<10;ii++)
 8008962:	2500      	movs	r5, #0
 8008964:	e004      	b.n	8008970 <fx_pwm_running_light_run+0x48>
				data[ii] = (uint8_t)val;
 8008966:	4b28      	ldr	r3, [pc, #160]	; (8008a08 <fx_pwm_running_light_run+0xe0>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	5598      	strb	r0, [r3, r6]
			for (ii=0;ii<10;ii++)
 800896c:	3501      	adds	r5, #1
 800896e:	b2ed      	uxtb	r5, r5
 8008970:	2d09      	cmp	r5, #9
 8008972:	d80e      	bhi.n	8008992 <fx_pwm_running_light_run+0x6a>
				val = data[ii] - (255 - get_DMX_variable(DMX_STRIP1_COMPLEXITY));
 8008974:	462e      	mov	r6, r5
 8008976:	4b24      	ldr	r3, [pc, #144]	; (8008a08 <fx_pwm_running_light_run+0xe0>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	5d5c      	ldrb	r4, [r3, r5]
 800897c:	200f      	movs	r0, #15
 800897e:	f000 fbda 	bl	8009136 <get_DMX_variable>
 8008982:	b280      	uxth	r0, r0
 8008984:	4420      	add	r0, r4
 8008986:	38ff      	subs	r0, #255	; 0xff
 8008988:	b200      	sxth	r0, r0
				if (val<0)
 800898a:	2800      	cmp	r0, #0
 800898c:	daeb      	bge.n	8008966 <fx_pwm_running_light_run+0x3e>
					val = 0;
 800898e:	2000      	movs	r0, #0
 8008990:	e7e9      	b.n	8008966 <fx_pwm_running_light_run+0x3e>
			ii = get_DMX_variable(DMX_STRIP1_SIZE);
 8008992:	200e      	movs	r0, #14
 8008994:	f000 fbcf 	bl	8009136 <get_DMX_variable>
 8008998:	4604      	mov	r4, r0
			if (ii>9)
 800899a:	2809      	cmp	r0, #9
 800899c:	d900      	bls.n	80089a0 <fx_pwm_running_light_run+0x78>
			   ii = 9;
 800899e:	2409      	movs	r4, #9
			if (get_DMX_variable(DMX_STRIP1_PATTERN))	//Reverse
 80089a0:	200c      	movs	r0, #12
 80089a2:	f000 fbc8 	bl	8009136 <get_DMX_variable>
 80089a6:	b178      	cbz	r0, 80089c8 <fx_pwm_running_light_run+0xa0>
				if (data[10] == 0)
 80089a8:	4b17      	ldr	r3, [pc, #92]	; (8008a08 <fx_pwm_running_light_run+0xe0>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	7a9a      	ldrb	r2, [r3, #10]
 80089ae:	b90a      	cbnz	r2, 80089b4 <fx_pwm_running_light_run+0x8c>
					data[10] = ii + 1;
 80089b0:	3401      	adds	r4, #1
 80089b2:	729c      	strb	r4, [r3, #10]
				data[10]--;
 80089b4:	7a9a      	ldrb	r2, [r3, #10]
 80089b6:	3a01      	subs	r2, #1
 80089b8:	729a      	strb	r2, [r3, #10]
			data[data[10]] = 255;
 80089ba:	4b13      	ldr	r3, [pc, #76]	; (8008a08 <fx_pwm_running_light_run+0xe0>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	7a9a      	ldrb	r2, [r3, #10]
 80089c0:	21ff      	movs	r1, #255	; 0xff
 80089c2:	5499      	strb	r1, [r3, r2]
			for (ii=0;ii<10;ii++)
 80089c4:	2400      	movs	r4, #0
 80089c6:	e013      	b.n	80089f0 <fx_pwm_running_light_run+0xc8>
				if (data[10] == ii)
 80089c8:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <fx_pwm_running_light_run+0xe0>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	7a9a      	ldrb	r2, [r3, #10]
 80089ce:	42a2      	cmp	r2, r4
 80089d0:	d003      	beq.n	80089da <fx_pwm_running_light_run+0xb2>
				data[10]++;
 80089d2:	7a9a      	ldrb	r2, [r3, #10]
 80089d4:	3201      	adds	r2, #1
 80089d6:	729a      	strb	r2, [r3, #10]
 80089d8:	e7ef      	b.n	80089ba <fx_pwm_running_light_run+0x92>
					data[10] = 255;
 80089da:	22ff      	movs	r2, #255	; 0xff
 80089dc:	729a      	strb	r2, [r3, #10]
 80089de:	e7f8      	b.n	80089d2 <fx_pwm_running_light_run+0xaa>
				set_pwm_light(ii, data[ii]);
 80089e0:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <fx_pwm_running_light_run+0xe0>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	5d19      	ldrb	r1, [r3, r4]
 80089e6:	4620      	mov	r0, r4
 80089e8:	f000 fba0 	bl	800912c <set_pwm_light>
			for (ii=0;ii<10;ii++)
 80089ec:	3401      	adds	r4, #1
 80089ee:	b2e4      	uxtb	r4, r4
 80089f0:	2c09      	cmp	r4, #9
 80089f2:	d9f5      	bls.n	80089e0 <fx_pwm_running_light_run+0xb8>
			return FX_RUNNING;
 80089f4:	2002      	movs	r0, #2
 80089f6:	e79e      	b.n	8008936 <fx_pwm_running_light_run+0xe>
			free(data);
 80089f8:	4b03      	ldr	r3, [pc, #12]	; (8008a08 <fx_pwm_running_light_run+0xe0>)
 80089fa:	6818      	ldr	r0, [r3, #0]
 80089fc:	f000 fe88 	bl	8009710 <free>
			return FX_COMPLETED;
 8008a00:	2001      	movs	r0, #1
 8008a02:	e798      	b.n	8008936 <fx_pwm_running_light_run+0xe>
				return FX_RUNNING;
 8008a04:	2002      	movs	r0, #2
 8008a06:	e796      	b.n	8008936 <fx_pwm_running_light_run+0xe>
 8008a08:	200019a4 	.word	0x200019a4

08008a0c <fx_pwm_running_light>:
{
 8008a0c:	b508      	push	{r3, lr}
	register_fx(&param1, fx_num);
 8008a0e:	4601      	mov	r1, r0
 8008a10:	4801      	ldr	r0, [pc, #4]	; (8008a18 <fx_pwm_running_light+0xc>)
 8008a12:	f7fc ffe7 	bl	80059e4 <register_fx>
}
 8008a16:	bd08      	pop	{r3, pc}
 8008a18:	0800d3b0 	.word	0x0800d3b0

08008a1c <fx_pwm_running_pulse_light>:
{
 8008a1c:	b508      	push	{r3, lr}
	register_fx(&param2, fx_num);
 8008a1e:	4601      	mov	r1, r0
 8008a20:	4801      	ldr	r0, [pc, #4]	; (8008a28 <fx_pwm_running_pulse_light+0xc>)
 8008a22:	f7fc ffdf 	bl	80059e4 <register_fx>
}
 8008a26:	bd08      	pop	{r3, pc}
 8008a28:	0800d3c4 	.word	0x0800d3c4
 8008a2c:	00000000 	.word	0x00000000

08008a30 <fx_pwm_strip_engine_run>:
}



t_fx_result fx_pwm_strip_engine_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 8008a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a34:	b083      	sub	sp, #12
	static uint32_t lcount =0;
	uint32_t loc;
	uint32_t colsel;
	static t_rgb_buf buf;

	switch(state)
 8008a36:	2801      	cmp	r0, #1
 8008a38:	d01f      	beq.n	8008a7a <fx_pwm_strip_engine_run+0x4a>
 8008a3a:	b120      	cbz	r0, 8008a46 <fx_pwm_strip_engine_run+0x16>
 8008a3c:	2802      	cmp	r0, #2
 8008a3e:	f000 8159 	beq.w	8008cf4 <fx_pwm_strip_engine_run+0x2c4>
			destroy_rgb_buffer(&buf);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 8008a42:	2003      	movs	r0, #3
 8008a44:	e160      	b.n	8008d08 <fx_pwm_strip_engine_run+0x2d8>
			reset_frame_delay();
 8008a46:	f000 fb57 	bl	80090f8 <reset_frame_delay>
			settings.strip1_length = 8 * 14;
 8008a4a:	4db3      	ldr	r5, [pc, #716]	; (8008d18 <fx_pwm_strip_engine_run+0x2e8>)
 8008a4c:	2170      	movs	r1, #112	; 0x70
 8008a4e:	8669      	strh	r1, [r5, #50]	; 0x32
			settings.strip2_length = 0;
 8008a50:	2400      	movs	r4, #0
 8008a52:	86ac      	strh	r4, [r5, #52]	; 0x34
			WS2812B_init(CH1,settings.strip1_length);
 8008a54:	4620      	mov	r0, r4
 8008a56:	f000 fce1 	bl	800941c <WS2812B_init>
			WS2812B_init(CH2,settings.strip2_length);
 8008a5a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8008a5c:	2001      	movs	r0, #1
 8008a5e:	f000 fcdd 	bl	800941c <WS2812B_init>
			if (0 ==create_rgb_buffer(&buf, WS2812B_numPixels(CH1)))
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 fcb0 	bl	80093c8 <WS2812B_numPixels>
 8008a68:	4601      	mov	r1, r0
 8008a6a:	48ac      	ldr	r0, [pc, #688]	; (8008d1c <fx_pwm_strip_engine_run+0x2ec>)
 8008a6c:	f000 fb7d 	bl	800916a <create_rgb_buffer>
 8008a70:	b108      	cbz	r0, 8008a76 <fx_pwm_strip_engine_run+0x46>
			return FX_OK;
 8008a72:	2000      	movs	r0, #0
 8008a74:	e148      	b.n	8008d08 <fx_pwm_strip_engine_run+0x2d8>
				return FX_ERROR;
 8008a76:	2003      	movs	r0, #3
 8008a78:	e146      	b.n	8008d08 <fx_pwm_strip_engine_run+0x2d8>
			if (lcount>330)
 8008a7a:	4ba9      	ldr	r3, [pc, #676]	; (8008d20 <fx_pwm_strip_engine_run+0x2f0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8008a82:	d915      	bls.n	8008ab0 <fx_pwm_strip_engine_run+0x80>
				set_pwm_light(9, 0);
 8008a84:	2100      	movs	r1, #0
 8008a86:	2009      	movs	r0, #9
 8008a88:	f000 fb50 	bl	800912c <set_pwm_light>
			lcount++;
 8008a8c:	4aa4      	ldr	r2, [pc, #656]	; (8008d20 <fx_pwm_strip_engine_run+0x2f0>)
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	3301      	adds	r3, #1
 8008a92:	6013      	str	r3, [r2, #0]
			if (lcount>350)
 8008a94:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8008a98:	d902      	bls.n	8008aa0 <fx_pwm_strip_engine_run+0x70>
				lcount = 0;
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	601a      	str	r2, [r3, #0]
			if (!check_frame_delay(get_DMX_variable(DMX_STRIP1_SPEED))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 8008aa0:	200d      	movs	r0, #13
 8008aa2:	f000 fb48 	bl	8009136 <get_DMX_variable>
 8008aa6:	f000 fb39 	bl	800911c <check_frame_delay>
 8008aaa:	b930      	cbnz	r0, 8008aba <fx_pwm_strip_engine_run+0x8a>
				return FX_RUNNING;
 8008aac:	2002      	movs	r0, #2
 8008aae:	e12b      	b.n	8008d08 <fx_pwm_strip_engine_run+0x2d8>
				set_pwm_light(9, 255);
 8008ab0:	21ff      	movs	r1, #255	; 0xff
 8008ab2:	2009      	movs	r0, #9
 8008ab4:	f000 fb3a 	bl	800912c <set_pwm_light>
 8008ab8:	e7e8      	b.n	8008a8c <fx_pwm_strip_engine_run+0x5c>
			s1 = sin(cnt);
 8008aba:	4c9a      	ldr	r4, [pc, #616]	; (8008d24 <fx_pwm_strip_engine_run+0x2f4>)
 8008abc:	6820      	ldr	r0, [r4, #0]
 8008abe:	f7f7 fcb3 	bl	8000428 <__aeabi_f2d>
 8008ac2:	f001 fbe7 	bl	800a294 <sin>
 8008ac6:	f7f7 ffdf 	bl	8000a88 <__aeabi_d2f>
			s1 = s1 + 1;
 8008aca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008ace:	f7f8 f831 	bl	8000b34 <__addsf3>
			s1 = s1 / 2;
 8008ad2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008ad6:	f7f8 f935 	bl	8000d44 <__aeabi_fmul>
 8008ada:	4607      	mov	r7, r0
			s2 = sin(cnt + ((float)get_DMX_variable(DMX_STRIP1_COMPLEXITY) / 100));
 8008adc:	200f      	movs	r0, #15
 8008ade:	f000 fb2a 	bl	8009136 <get_DMX_variable>
 8008ae2:	f7f8 f8d7 	bl	8000c94 <__aeabi_ui2f>
 8008ae6:	4990      	ldr	r1, [pc, #576]	; (8008d28 <fx_pwm_strip_engine_run+0x2f8>)
 8008ae8:	f7f8 f9e0 	bl	8000eac <__aeabi_fdiv>
 8008aec:	6821      	ldr	r1, [r4, #0]
 8008aee:	f7f8 f821 	bl	8000b34 <__addsf3>
 8008af2:	f7f7 fc99 	bl	8000428 <__aeabi_f2d>
 8008af6:	f001 fbcd 	bl	800a294 <sin>
 8008afa:	f7f7 ffc5 	bl	8000a88 <__aeabi_d2f>
			s2 = s2 + 1;
 8008afe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008b02:	f7f8 f817 	bl	8000b34 <__addsf3>
			s2 = s2 / 2;
 8008b06:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008b0a:	f7f8 f91b 	bl	8000d44 <__aeabi_fmul>
 8008b0e:	4606      	mov	r6, r0
			s3 = sin(cnt + (((float)get_DMX_variable(DMX_STRIP1_COMPLEXITY) / 100) * 2));
 8008b10:	200f      	movs	r0, #15
 8008b12:	f000 fb10 	bl	8009136 <get_DMX_variable>
 8008b16:	f7f8 f8bd 	bl	8000c94 <__aeabi_ui2f>
 8008b1a:	4983      	ldr	r1, [pc, #524]	; (8008d28 <fx_pwm_strip_engine_run+0x2f8>)
 8008b1c:	f7f8 f9c6 	bl	8000eac <__aeabi_fdiv>
 8008b20:	4601      	mov	r1, r0
 8008b22:	f7f8 f807 	bl	8000b34 <__addsf3>
 8008b26:	6821      	ldr	r1, [r4, #0]
 8008b28:	f7f8 f804 	bl	8000b34 <__addsf3>
 8008b2c:	f7f7 fc7c 	bl	8000428 <__aeabi_f2d>
 8008b30:	f001 fbb0 	bl	800a294 <sin>
 8008b34:	f7f7 ffa8 	bl	8000a88 <__aeabi_d2f>
			s3 = s3 + 1;
 8008b38:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008b3c:	f7f7 fffa 	bl	8000b34 <__addsf3>
			s3 = s3 / 2;
 8008b40:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008b44:	f7f8 f8fe 	bl	8000d44 <__aeabi_fmul>
 8008b48:	4605      	mov	r5, r0
			cnt = cnt + ((float)get_DMX_variable(DMX_STRIP1_SIZE) / 1000);
 8008b4a:	200e      	movs	r0, #14
 8008b4c:	f000 faf3 	bl	8009136 <get_DMX_variable>
 8008b50:	f7f8 f8a0 	bl	8000c94 <__aeabi_ui2f>
 8008b54:	4975      	ldr	r1, [pc, #468]	; (8008d2c <fx_pwm_strip_engine_run+0x2fc>)
 8008b56:	f7f8 f9a9 	bl	8000eac <__aeabi_fdiv>
 8008b5a:	6821      	ldr	r1, [r4, #0]
 8008b5c:	f7f7 ffea 	bl	8000b34 <__addsf3>
 8008b60:	6020      	str	r0, [r4, #0]
			if (cnt > (2.0 * M_PI))
 8008b62:	f7f7 fc61 	bl	8000428 <__aeabi_f2d>
 8008b66:	4680      	mov	r8, r0
 8008b68:	4689      	mov	r9, r1
 8008b6a:	a369      	add	r3, pc, #420	; (adr r3, 8008d10 <fx_pwm_strip_engine_run+0x2e0>)
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	f7f7 ff42 	bl	80009f8 <__aeabi_dcmpgt>
 8008b74:	b148      	cbz	r0, 8008b8a <fx_pwm_strip_engine_run+0x15a>
				cnt = cnt - (2.0 * M_PI);
 8008b76:	a366      	add	r3, pc, #408	; (adr r3, 8008d10 <fx_pwm_strip_engine_run+0x2e0>)
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	4649      	mov	r1, r9
 8008b80:	f7f7 faf2 	bl	8000168 <__aeabi_dsub>
 8008b84:	f7f7 ff80 	bl	8000a88 <__aeabi_d2f>
 8008b88:	6020      	str	r0, [r4, #0]
			rbcol = WS2812B_colorWheel(step);
 8008b8a:	4c69      	ldr	r4, [pc, #420]	; (8008d30 <fx_pwm_strip_engine_run+0x300>)
 8008b8c:	7820      	ldrb	r0, [r4, #0]
 8008b8e:	f000 fce7 	bl	8009560 <WS2812B_colorWheel>
 8008b92:	4680      	mov	r8, r0
			set_pwm_light(0, (uint8_t)(s1 * (float)(rbcol>>16&0xFF)));
 8008b94:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8008b98:	f7f8 f87c 	bl	8000c94 <__aeabi_ui2f>
 8008b9c:	4639      	mov	r1, r7
 8008b9e:	f7f8 f8d1 	bl	8000d44 <__aeabi_fmul>
 8008ba2:	f7f8 fabb 	bl	800111c <__aeabi_f2uiz>
 8008ba6:	b2c1      	uxtb	r1, r0
 8008ba8:	2000      	movs	r0, #0
 8008baa:	f000 fabf 	bl	800912c <set_pwm_light>
			set_pwm_light(1, (uint8_t)(s1 * (float)(rbcol>>8&0xFF)));
 8008bae:	f3c8 2007 	ubfx	r0, r8, #8, #8
 8008bb2:	f7f8 f86f 	bl	8000c94 <__aeabi_ui2f>
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	f7f8 f8c4 	bl	8000d44 <__aeabi_fmul>
 8008bbc:	f7f8 faae 	bl	800111c <__aeabi_f2uiz>
 8008bc0:	b2c1      	uxtb	r1, r0
 8008bc2:	2001      	movs	r0, #1
 8008bc4:	f000 fab2 	bl	800912c <set_pwm_light>
			set_pwm_light(2, (uint8_t)(s1 * (float)(rbcol&0xFF)));
 8008bc8:	fa5f f088 	uxtb.w	r0, r8
 8008bcc:	f7f8 f862 	bl	8000c94 <__aeabi_ui2f>
 8008bd0:	4639      	mov	r1, r7
 8008bd2:	f7f8 f8b7 	bl	8000d44 <__aeabi_fmul>
 8008bd6:	f7f8 faa1 	bl	800111c <__aeabi_f2uiz>
 8008bda:	b2c1      	uxtb	r1, r0
 8008bdc:	2002      	movs	r0, #2
 8008bde:	f000 faa5 	bl	800912c <set_pwm_light>
			rbcol = WS2812B_colorWheel(step+20);
 8008be2:	7820      	ldrb	r0, [r4, #0]
 8008be4:	3014      	adds	r0, #20
 8008be6:	b2c0      	uxtb	r0, r0
 8008be8:	f000 fcba 	bl	8009560 <WS2812B_colorWheel>
 8008bec:	4607      	mov	r7, r0
			set_pwm_light(3, (uint8_t)(s2 * (float)(rbcol>>16&0xFF)));
 8008bee:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8008bf2:	f7f8 f84f 	bl	8000c94 <__aeabi_ui2f>
 8008bf6:	4631      	mov	r1, r6
 8008bf8:	f7f8 f8a4 	bl	8000d44 <__aeabi_fmul>
 8008bfc:	f7f8 fa8e 	bl	800111c <__aeabi_f2uiz>
 8008c00:	b2c1      	uxtb	r1, r0
 8008c02:	2003      	movs	r0, #3
 8008c04:	f000 fa92 	bl	800912c <set_pwm_light>
			set_pwm_light(4, (uint8_t)(s2 * (float)(rbcol>>8&0xFF)));
 8008c08:	f3c7 2007 	ubfx	r0, r7, #8, #8
 8008c0c:	f7f8 f842 	bl	8000c94 <__aeabi_ui2f>
 8008c10:	4631      	mov	r1, r6
 8008c12:	f7f8 f897 	bl	8000d44 <__aeabi_fmul>
 8008c16:	f7f8 fa81 	bl	800111c <__aeabi_f2uiz>
 8008c1a:	b2c1      	uxtb	r1, r0
 8008c1c:	2004      	movs	r0, #4
 8008c1e:	f000 fa85 	bl	800912c <set_pwm_light>
			set_pwm_light(5, (uint8_t)(s2 * (float)(rbcol&0xFF)));
 8008c22:	b2f8      	uxtb	r0, r7
 8008c24:	f7f8 f836 	bl	8000c94 <__aeabi_ui2f>
 8008c28:	4631      	mov	r1, r6
 8008c2a:	f7f8 f88b 	bl	8000d44 <__aeabi_fmul>
 8008c2e:	f7f8 fa75 	bl	800111c <__aeabi_f2uiz>
 8008c32:	b2c1      	uxtb	r1, r0
 8008c34:	2005      	movs	r0, #5
 8008c36:	f000 fa79 	bl	800912c <set_pwm_light>
			rbcol = WS2812B_colorWheel(step+40);
 8008c3a:	7820      	ldrb	r0, [r4, #0]
 8008c3c:	3028      	adds	r0, #40	; 0x28
 8008c3e:	b2c0      	uxtb	r0, r0
 8008c40:	f000 fc8e 	bl	8009560 <WS2812B_colorWheel>
 8008c44:	4606      	mov	r6, r0
			set_pwm_light(6, (uint8_t)(s3 * (float)(rbcol>>16&0xFF)));
 8008c46:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8008c4a:	f7f8 f823 	bl	8000c94 <__aeabi_ui2f>
 8008c4e:	4629      	mov	r1, r5
 8008c50:	f7f8 f878 	bl	8000d44 <__aeabi_fmul>
 8008c54:	f7f8 fa62 	bl	800111c <__aeabi_f2uiz>
 8008c58:	b2c1      	uxtb	r1, r0
 8008c5a:	2006      	movs	r0, #6
 8008c5c:	f000 fa66 	bl	800912c <set_pwm_light>
			set_pwm_light(7, (uint8_t)(s3 * (float)(rbcol>>8&0xFF)));
 8008c60:	f3c6 2007 	ubfx	r0, r6, #8, #8
 8008c64:	f7f8 f816 	bl	8000c94 <__aeabi_ui2f>
 8008c68:	4629      	mov	r1, r5
 8008c6a:	f7f8 f86b 	bl	8000d44 <__aeabi_fmul>
 8008c6e:	f7f8 fa55 	bl	800111c <__aeabi_f2uiz>
 8008c72:	b2c1      	uxtb	r1, r0
 8008c74:	2007      	movs	r0, #7
 8008c76:	f000 fa59 	bl	800912c <set_pwm_light>
			set_pwm_light(8, (uint8_t)(s3 * (float)(rbcol&0xFF)));
 8008c7a:	b2f0      	uxtb	r0, r6
 8008c7c:	f7f8 f80a 	bl	8000c94 <__aeabi_ui2f>
 8008c80:	4629      	mov	r1, r5
 8008c82:	f7f8 f85f 	bl	8000d44 <__aeabi_fmul>
 8008c86:	f7f8 fa49 	bl	800111c <__aeabi_f2uiz>
 8008c8a:	b2c1      	uxtb	r1, r0
 8008c8c:	2008      	movs	r0, #8
 8008c8e:	f000 fa4d 	bl	800912c <set_pwm_light>
			step++;
 8008c92:	7823      	ldrb	r3, [r4, #0]
 8008c94:	3301      	adds	r3, #1
 8008c96:	7023      	strb	r3, [r4, #0]
			fade_rgb_buf(&buf,200);
 8008c98:	4d20      	ldr	r5, [pc, #128]	; (8008d1c <fx_pwm_strip_engine_run+0x2ec>)
 8008c9a:	21c8      	movs	r1, #200	; 0xc8
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f000 faa3 	bl	80091e8 <fade_rgb_buf>
			loc = simple_rnd();
 8008ca2:	f000 fad1 	bl	8009248 <simple_rnd>
			loc = scale_full(loc>>16,0xFFFF, 0, 8*14, 0);
 8008ca6:	2400      	movs	r4, #0
 8008ca8:	9400      	str	r4, [sp, #0]
 8008caa:	2370      	movs	r3, #112	; 0x70
 8008cac:	4622      	mov	r2, r4
 8008cae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008cb2:	0c00      	lsrs	r0, r0, #16
 8008cb4:	f000 fa4b 	bl	800914e <scale_full>
 8008cb8:	4606      	mov	r6, r0
			colsel = simple_rnd();
 8008cba:	f000 fac5 	bl	8009248 <simple_rnd>
			colsel = scale_full(colsel>>16,0xFFFF, 0, 5, 0);
 8008cbe:	9400      	str	r4, [sp, #0]
 8008cc0:	2305      	movs	r3, #5
 8008cc2:	4622      	mov	r2, r4
 8008cc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008cc8:	0c00      	lsrs	r0, r0, #16
 8008cca:	f000 fa40 	bl	800914e <scale_full>
			set_buffer_pixel(&buf,loc, colval[colsel]>>16 & 0xFF, colval[colsel]>>8 & 0xFF, colval[colsel] & 0xFF);
 8008cce:	4b19      	ldr	r3, [pc, #100]	; (8008d34 <fx_pwm_strip_engine_run+0x304>)
 8008cd0:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8008cd4:	b2d3      	uxtb	r3, r2
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008cdc:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8008ce0:	4631      	mov	r1, r6
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f000 fa56 	bl	8009194 <set_buffer_pixel>
			set_pixels_from_buf(CH1,&buf);
 8008ce8:	4629      	mov	r1, r5
 8008cea:	4620      	mov	r0, r4
 8008cec:	f000 fa5e 	bl	80091ac <set_pixels_from_buf>
			return FX_RUNNING;
 8008cf0:	2002      	movs	r0, #2
 8008cf2:	e009      	b.n	8008d08 <fx_pwm_strip_engine_run+0x2d8>
			WS2812B_clear(CH1);
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	f000 fb71 	bl	80093dc <WS2812B_clear>
			WS2812B_clear(CH2);
 8008cfa:	2001      	movs	r0, #1
 8008cfc:	f000 fb6e 	bl	80093dc <WS2812B_clear>
			destroy_rgb_buffer(&buf);
 8008d00:	4806      	ldr	r0, [pc, #24]	; (8008d1c <fx_pwm_strip_engine_run+0x2ec>)
 8008d02:	f000 fa42 	bl	800918a <destroy_rgb_buffer>
			return FX_COMPLETED;
 8008d06:	2001      	movs	r0, #1
}
 8008d08:	b003      	add	sp, #12
 8008d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d0e:	bf00      	nop
 8008d10:	54442d18 	.word	0x54442d18
 8008d14:	401921fb 	.word	0x401921fb
 8008d18:	20000af8 	.word	0x20000af8
 8008d1c:	2000093c 	.word	0x2000093c
 8008d20:	20000948 	.word	0x20000948
 8008d24:	20000944 	.word	0x20000944
 8008d28:	42c80000 	.word	0x42c80000
 8008d2c:	447a0000 	.word	0x447a0000
 8008d30:	2000094c 	.word	0x2000094c
 8008d34:	0800d3d8 	.word	0x0800d3d8

08008d38 <fx_pwm_strip_engine>:
{
 8008d38:	b508      	push	{r3, lr}
	register_fx(&param1, fx_num);
 8008d3a:	4601      	mov	r1, r0
 8008d3c:	4801      	ldr	r0, [pc, #4]	; (8008d44 <fx_pwm_strip_engine+0xc>)
 8008d3e:	f7fc fe51 	bl	80059e4 <register_fx>
}
 8008d42:	bd08      	pop	{r3, pc}
 8008d44:	0800d3f0 	.word	0x0800d3f0

08008d48 <fx_strip_cylon_run>:
	register_fx(&param,fx_num);
}


t_fx_result fx_strip_cylon_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 8008d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d4a:	b083      	sub	sp, #12
	uint16_t poscalc;
	uint8_t corr_r;
	uint8_t corr_g;
	uint8_t corr_b;

	switch(state)
 8008d4c:	2801      	cmp	r0, #1
 8008d4e:	d015      	beq.n	8008d7c <fx_strip_cylon_run+0x34>
 8008d50:	b120      	cbz	r0, 8008d5c <fx_strip_cylon_run+0x14>
 8008d52:	2802      	cmp	r0, #2
 8008d54:	f000 8084 	beq.w	8008e60 <fx_strip_cylon_run+0x118>
			destroy_rgb_buffer(&buf);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 8008d58:	2003      	movs	r0, #3
 8008d5a:	e08b      	b.n	8008e74 <fx_strip_cylon_run+0x12c>
			last_ms = millisec();
 8008d5c:	f000 f9ef 	bl	800913e <millisec>
 8008d60:	4b47      	ldr	r3, [pc, #284]	; (8008e80 <fx_strip_cylon_run+0x138>)
 8008d62:	6018      	str	r0, [r3, #0]
			if (0 ==create_rgb_buffer(&buf, WS2812B_numPixels(CH1)))
 8008d64:	2000      	movs	r0, #0
 8008d66:	f000 fb2f 	bl	80093c8 <WS2812B_numPixels>
 8008d6a:	4601      	mov	r1, r0
 8008d6c:	4845      	ldr	r0, [pc, #276]	; (8008e84 <fx_strip_cylon_run+0x13c>)
 8008d6e:	f000 f9fc 	bl	800916a <create_rgb_buffer>
 8008d72:	b108      	cbz	r0, 8008d78 <fx_strip_cylon_run+0x30>
			return FX_OK;
 8008d74:	2000      	movs	r0, #0
 8008d76:	e07d      	b.n	8008e74 <fx_strip_cylon_run+0x12c>
				return FX_ERROR;
 8008d78:	2003      	movs	r0, #3
 8008d7a:	e07b      	b.n	8008e74 <fx_strip_cylon_run+0x12c>
			if ((millisec() - last_ms) < get_DMX_variable(DMX_STRIP1_SPEED))
 8008d7c:	f000 f9df 	bl	800913e <millisec>
 8008d80:	4b3f      	ldr	r3, [pc, #252]	; (8008e80 <fx_strip_cylon_run+0x138>)
 8008d82:	681c      	ldr	r4, [r3, #0]
 8008d84:	1b04      	subs	r4, r0, r4
 8008d86:	200d      	movs	r0, #13
 8008d88:	f000 f9d5 	bl	8009136 <get_DMX_variable>
 8008d8c:	4284      	cmp	r4, r0
 8008d8e:	d201      	bcs.n	8008d94 <fx_strip_cylon_run+0x4c>
					return FX_RUNNING;
 8008d90:	2002      	movs	r0, #2
 8008d92:	e06f      	b.n	8008e74 <fx_strip_cylon_run+0x12c>
			last_ms = millisec();
 8008d94:	f000 f9d3 	bl	800913e <millisec>
 8008d98:	4b39      	ldr	r3, [pc, #228]	; (8008e80 <fx_strip_cylon_run+0x138>)
 8008d9a:	6018      	str	r0, [r3, #0]
			fade_rgb_buf(&buf,get_DMX_variable(DMX_STRIP1_SIZE));
 8008d9c:	200e      	movs	r0, #14
 8008d9e:	f000 f9ca 	bl	8009136 <get_DMX_variable>
 8008da2:	4601      	mov	r1, r0
 8008da4:	4837      	ldr	r0, [pc, #220]	; (8008e84 <fx_strip_cylon_run+0x13c>)
 8008da6:	f000 fa1f 	bl	80091e8 <fade_rgb_buf>
			res = sin (pos*PI/180);
 8008daa:	4e37      	ldr	r6, [pc, #220]	; (8008e88 <fx_strip_cylon_run+0x140>)
 8008dac:	8830      	ldrh	r0, [r6, #0]
 8008dae:	f7f7 fb29 	bl	8000404 <__aeabi_i2d>
 8008db2:	a331      	add	r3, pc, #196	; (adr r3, 8008e78 <fx_strip_cylon_run+0x130>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	f7f7 fb8e 	bl	80004d8 <__aeabi_dmul>
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	4b33      	ldr	r3, [pc, #204]	; (8008e8c <fx_strip_cylon_run+0x144>)
 8008dc0:	f7f7 fcb4 	bl	800072c <__aeabi_ddiv>
 8008dc4:	f001 fa66 	bl	800a294 <sin>
 8008dc8:	4604      	mov	r4, r0
 8008dca:	460d      	mov	r5, r1
			pos = pos + get_DMX_variable(DMX_STRIP1_COMPLEXITY);
 8008dcc:	200f      	movs	r0, #15
 8008dce:	f000 f9b2 	bl	8009136 <get_DMX_variable>
 8008dd2:	b280      	uxth	r0, r0
 8008dd4:	8833      	ldrh	r3, [r6, #0]
 8008dd6:	4418      	add	r0, r3
 8008dd8:	b280      	uxth	r0, r0
 8008dda:	8030      	strh	r0, [r6, #0]
			if (pos>360)
 8008ddc:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 8008de0:	d902      	bls.n	8008de8 <fx_strip_cylon_run+0xa0>
				pos = pos - 360;
 8008de2:	f5a0 70b4 	sub.w	r0, r0, #360	; 0x168
 8008de6:	8030      	strh	r0, [r6, #0]
			res = res * (double)WS2812B_numPixels(CH1)/2;
 8008de8:	2000      	movs	r0, #0
 8008dea:	f000 faed 	bl	80093c8 <WS2812B_numPixels>
 8008dee:	f7f7 faf9 	bl	80003e4 <__aeabi_ui2d>
 8008df2:	4622      	mov	r2, r4
 8008df4:	462b      	mov	r3, r5
 8008df6:	f7f7 fb6f 	bl	80004d8 <__aeabi_dmul>
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	4b24      	ldr	r3, [pc, #144]	; (8008e90 <fx_strip_cylon_run+0x148>)
 8008dfe:	f7f7 fb6b 	bl	80004d8 <__aeabi_dmul>
			poscalc = (int16_t)res + (WS2812B_numPixels(CH1)/2);
 8008e02:	f7f7 fe19 	bl	8000a38 <__aeabi_d2iz>
 8008e06:	b284      	uxth	r4, r0
 8008e08:	2000      	movs	r0, #0
 8008e0a:	f000 fadd 	bl	80093c8 <WS2812B_numPixels>
 8008e0e:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8008e12:	4404      	add	r4, r0
 8008e14:	b2a4      	uxth	r4, r4
			corr_r = getGamma(GAMMA_STRIP,get_DMX_variable(DMX_STRIP1_V1));
 8008e16:	2010      	movs	r0, #16
 8008e18:	f000 f98d 	bl	8009136 <get_DMX_variable>
 8008e1c:	4601      	mov	r1, r0
 8008e1e:	2003      	movs	r0, #3
 8008e20:	f7fc ffe4 	bl	8005dec <getGamma>
 8008e24:	4606      	mov	r6, r0
			corr_g = getGamma(GAMMA_STRIP,get_DMX_variable(DMX_STRIP1_V2));
 8008e26:	2011      	movs	r0, #17
 8008e28:	f000 f985 	bl	8009136 <get_DMX_variable>
 8008e2c:	4601      	mov	r1, r0
 8008e2e:	2003      	movs	r0, #3
 8008e30:	f7fc ffdc 	bl	8005dec <getGamma>
 8008e34:	4607      	mov	r7, r0
			corr_b = getGamma(GAMMA_STRIP,get_DMX_variable(DMX_STRIP1_V3));
 8008e36:	2012      	movs	r0, #18
 8008e38:	f000 f97d 	bl	8009136 <get_DMX_variable>
 8008e3c:	4601      	mov	r1, r0
 8008e3e:	2003      	movs	r0, #3
 8008e40:	f7fc ffd4 	bl	8005dec <getGamma>
			set_buffer_pixel(&buf,poscalc,corr_r,corr_g,corr_b);
 8008e44:	4d0f      	ldr	r5, [pc, #60]	; (8008e84 <fx_strip_cylon_run+0x13c>)
 8008e46:	9000      	str	r0, [sp, #0]
 8008e48:	463b      	mov	r3, r7
 8008e4a:	4632      	mov	r2, r6
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	4628      	mov	r0, r5
 8008e50:	f000 f9a0 	bl	8009194 <set_buffer_pixel>
			set_pixels_from_buf(CH1,&buf);
 8008e54:	4629      	mov	r1, r5
 8008e56:	2000      	movs	r0, #0
 8008e58:	f000 f9a8 	bl	80091ac <set_pixels_from_buf>
			return FX_RUNNING;
 8008e5c:	2002      	movs	r0, #2
 8008e5e:	e009      	b.n	8008e74 <fx_strip_cylon_run+0x12c>
			WS2812B_clear(CH1);
 8008e60:	2000      	movs	r0, #0
 8008e62:	f000 fabb 	bl	80093dc <WS2812B_clear>
			WS2812B_clear(CH2);
 8008e66:	2001      	movs	r0, #1
 8008e68:	f000 fab8 	bl	80093dc <WS2812B_clear>
			destroy_rgb_buffer(&buf);
 8008e6c:	4805      	ldr	r0, [pc, #20]	; (8008e84 <fx_strip_cylon_run+0x13c>)
 8008e6e:	f000 f98c 	bl	800918a <destroy_rgb_buffer>
			return FX_COMPLETED;
 8008e72:	2001      	movs	r0, #1
}
 8008e74:	b003      	add	sp, #12
 8008e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e78:	53c8d4f1 	.word	0x53c8d4f1
 8008e7c:	400921fb 	.word	0x400921fb
 8008e80:	20000958 	.word	0x20000958
 8008e84:	20000950 	.word	0x20000950
 8008e88:	2000095c 	.word	0x2000095c
 8008e8c:	40668000 	.word	0x40668000
 8008e90:	3fe00000 	.word	0x3fe00000

08008e94 <fx_strip_cylon>:
{
 8008e94:	b508      	push	{r3, lr}
	register_fx(&param,fx_num);
 8008e96:	4601      	mov	r1, r0
 8008e98:	4801      	ldr	r0, [pc, #4]	; (8008ea0 <fx_strip_cylon+0xc>)
 8008e9a:	f7fc fda3 	bl	80059e4 <register_fx>
}
 8008e9e:	bd08      	pop	{r3, pc}
 8008ea0:	0800d404 	.word	0x0800d404

08008ea4 <fx_strip_rainbow_run>:
	register_fx(&param,fx_num);
}


t_fx_result fx_strip_rainbow_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 8008ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ea6:	b083      	sub	sp, #12
	static int16_t pos[CH_MAX] = {0,0};
	static int16_t step[CH_MAX] = {0,0};
	static uint32_t delay[CH_MAX] = {0,0};

	switch(state)
 8008ea8:	2801      	cmp	r0, #1
 8008eaa:	d05d      	beq.n	8008f68 <fx_strip_rainbow_run+0xc4>
 8008eac:	b1e8      	cbz	r0, 8008eea <fx_strip_rainbow_run+0x46>
 8008eae:	2802      	cmp	r0, #2
 8008eb0:	d05e      	beq.n	8008f70 <fx_strip_rainbow_run+0xcc>
			WS2812B_clear(CH2);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 8008eb2:	2003      	movs	r0, #3
 8008eb4:	e01c      	b.n	8008ef0 <fx_strip_rainbow_run+0x4c>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 8008eb6:	3401      	adds	r4, #1
 8008eb8:	b2e4      	uxtb	r4, r4
 8008eba:	2c01      	cmp	r4, #1
 8008ebc:	d817      	bhi.n	8008eee <fx_strip_rainbow_run+0x4a>
				step[ii] = get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SIZE]);
 8008ebe:	4e30      	ldr	r6, [pc, #192]	; (8008f80 <fx_strip_rainbow_run+0xdc>)
 8008ec0:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8008ec4:	1973      	adds	r3, r6, r5
 8008ec6:	7898      	ldrb	r0, [r3, #2]
 8008ec8:	f000 f935 	bl	8009136 <get_DMX_variable>
 8008ecc:	4b2d      	ldr	r3, [pc, #180]	; (8008f84 <fx_strip_rainbow_run+0xe0>)
 8008ece:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
				if (get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_PATTERN]))
 8008ed2:	5d70      	ldrb	r0, [r6, r5]
 8008ed4:	f000 f92f 	bl	8009136 <get_DMX_variable>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d0ec      	beq.n	8008eb6 <fx_strip_rainbow_run+0x12>
					step[ii] = -step[ii];
 8008edc:	4a29      	ldr	r2, [pc, #164]	; (8008f84 <fx_strip_rainbow_run+0xe0>)
 8008ede:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8008ee2:	425b      	negs	r3, r3
 8008ee4:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
 8008ee8:	e7e5      	b.n	8008eb6 <fx_strip_rainbow_run+0x12>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 8008eea:	2400      	movs	r4, #0
 8008eec:	e7e5      	b.n	8008eba <fx_strip_rainbow_run+0x16>
			return FX_OK;
 8008eee:	2000      	movs	r0, #0
}
 8008ef0:	b003      	add	sp, #12
 8008ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if (pos[ii] < 0)
 8008ef4:	2a00      	cmp	r2, #0
 8008ef6:	db32      	blt.n	8008f5e <fx_strip_rainbow_run+0xba>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 8008ef8:	3401      	adds	r4, #1
 8008efa:	b2e4      	uxtb	r4, r4
 8008efc:	2c01      	cmp	r4, #1
 8008efe:	d835      	bhi.n	8008f6c <fx_strip_rainbow_run+0xc8>
				if (check_custom_frame_delay(&delay[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SPEED]))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 8008f00:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8008f04:	4b1e      	ldr	r3, [pc, #120]	; (8008f80 <fx_strip_rainbow_run+0xdc>)
 8008f06:	4413      	add	r3, r2
 8008f08:	7858      	ldrb	r0, [r3, #1]
 8008f0a:	f000 f914 	bl	8009136 <get_DMX_variable>
 8008f0e:	4601      	mov	r1, r0
 8008f10:	481d      	ldr	r0, [pc, #116]	; (8008f88 <fx_strip_rainbow_run+0xe4>)
 8008f12:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8008f16:	f000 f8f5 	bl	8009104 <check_custom_frame_delay>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	d0ec      	beq.n	8008ef8 <fx_strip_rainbow_run+0x54>
					WS2812B_rainbow(ii,0, WS2812B_numPixels(ii),pos[ii],step[ii]);
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f000 fa52 	bl	80093c8 <WS2812B_numPixels>
 8008f24:	4e19      	ldr	r6, [pc, #100]	; (8008f8c <fx_strip_rainbow_run+0xe8>)
 8008f26:	f936 3014 	ldrsh.w	r3, [r6, r4, lsl #1]
 8008f2a:	4f16      	ldr	r7, [pc, #88]	; (8008f84 <fx_strip_rainbow_run+0xe0>)
 8008f2c:	f937 2014 	ldrsh.w	r2, [r7, r4, lsl #1]
 8008f30:	b2d2      	uxtb	r2, r2
 8008f32:	9200      	str	r2, [sp, #0]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	b2c2      	uxtb	r2, r0
 8008f38:	2100      	movs	r1, #0
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f000 fb3a 	bl	80095b4 <WS2812B_rainbow>
					pos[ii] = pos[ii] + step[ii];
 8008f40:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 8008f44:	f837 2014 	ldrh.w	r2, [r7, r4, lsl #1]
 8008f48:	4413      	add	r3, r2
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	b21a      	sxth	r2, r3
 8008f4e:	f826 2014 	strh.w	r2, [r6, r4, lsl #1]
					if (pos[ii] > 255)
 8008f52:	2aff      	cmp	r2, #255	; 0xff
 8008f54:	ddce      	ble.n	8008ef4 <fx_strip_rainbow_run+0x50>
						pos[ii] = pos[ii]-255;
 8008f56:	3bff      	subs	r3, #255	; 0xff
 8008f58:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
 8008f5c:	e7cc      	b.n	8008ef8 <fx_strip_rainbow_run+0x54>
						pos[ii] = pos[ii]+255;
 8008f5e:	33ff      	adds	r3, #255	; 0xff
 8008f60:	4a0a      	ldr	r2, [pc, #40]	; (8008f8c <fx_strip_rainbow_run+0xe8>)
 8008f62:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
 8008f66:	e7c7      	b.n	8008ef8 <fx_strip_rainbow_run+0x54>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 8008f68:	2400      	movs	r4, #0
 8008f6a:	e7c7      	b.n	8008efc <fx_strip_rainbow_run+0x58>
			return FX_RUNNING;
 8008f6c:	2002      	movs	r0, #2
 8008f6e:	e7bf      	b.n	8008ef0 <fx_strip_rainbow_run+0x4c>
			WS2812B_clear(CH1);
 8008f70:	2000      	movs	r0, #0
 8008f72:	f000 fa33 	bl	80093dc <WS2812B_clear>
			WS2812B_clear(CH2);
 8008f76:	2001      	movs	r0, #1
 8008f78:	f000 fa30 	bl	80093dc <WS2812B_clear>
			return FX_COMPLETED;
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	e7b7      	b.n	8008ef0 <fx_strip_rainbow_run+0x4c>
 8008f80:	0800d440 	.word	0x0800d440
 8008f84:	2000096c 	.word	0x2000096c
 8008f88:	20000960 	.word	0x20000960
 8008f8c:	20000968 	.word	0x20000968

08008f90 <fx_strip_rainbow>:
{
 8008f90:	b508      	push	{r3, lr}
	register_fx(&param,fx_num);
 8008f92:	4601      	mov	r1, r0
 8008f94:	4801      	ldr	r0, [pc, #4]	; (8008f9c <fx_strip_rainbow+0xc>)
 8008f96:	f7fc fd25 	bl	80059e4 <register_fx>
}
 8008f9a:	bd08      	pop	{r3, pc}
 8008f9c:	0800d418 	.word	0x0800d418

08008fa0 <fx_strip_running_light_run>:
	register_fx(&param,fx_num);
}


t_fx_result fx_strip_running_light_run(t_fx_state state,uint32_t framecount,const uint32_t duration)
{
 8008fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa4:	b082      	sub	sp, #8
	static int16_t pos[CH_MAX] = {0,0};
	static int16_t step[CH_MAX] = {0,0};
	static uint32_t delay[CH_MAX] = {0,0};

	switch(state)
 8008fa6:	2801      	cmp	r0, #1
 8008fa8:	f000 8089 	beq.w	80090be <fx_strip_running_light_run+0x11e>
 8008fac:	b320      	cbz	r0, 8008ff8 <fx_strip_running_light_run+0x58>
 8008fae:	2802      	cmp	r0, #2
 8008fb0:	f000 8089 	beq.w	80090c6 <fx_strip_running_light_run+0x126>
			WS2812B_clear(CH2);
			return FX_COMPLETED;
		case FX_DONE:
			break;
	}
	return FX_ERROR;
 8008fb4:	2003      	movs	r0, #3
 8008fb6:	e022      	b.n	8008ffe <fx_strip_running_light_run+0x5e>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 8008fb8:	3401      	adds	r4, #1
 8008fba:	b2e4      	uxtb	r4, r4
 8008fbc:	2c01      	cmp	r4, #1
 8008fbe:	d81d      	bhi.n	8008ffc <fx_strip_running_light_run+0x5c>
				step[ii] = get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SIZE]);
 8008fc0:	4e45      	ldr	r6, [pc, #276]	; (80090d8 <fx_strip_running_light_run+0x138>)
 8008fc2:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8008fc6:	1973      	adds	r3, r6, r5
 8008fc8:	7898      	ldrb	r0, [r3, #2]
 8008fca:	f000 f8b4 	bl	8009136 <get_DMX_variable>
 8008fce:	4b43      	ldr	r3, [pc, #268]	; (80090dc <fx_strip_running_light_run+0x13c>)
 8008fd0:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
				if (0 != get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_PATTERN]))
 8008fd4:	5d70      	ldrb	r0, [r6, r5]
 8008fd6:	f000 f8ae 	bl	8009136 <get_DMX_variable>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d0ec      	beq.n	8008fb8 <fx_strip_running_light_run+0x18>
				  pos[ii] = WS2812B_numPixels((t_stripchannel)ii);
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f000 f9f2 	bl	80093c8 <WS2812B_numPixels>
 8008fe4:	4b3e      	ldr	r3, [pc, #248]	; (80090e0 <fx_strip_running_light_run+0x140>)
 8008fe6:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
				  step[ii] = -step[ii];
 8008fea:	4a3c      	ldr	r2, [pc, #240]	; (80090dc <fx_strip_running_light_run+0x13c>)
 8008fec:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8008ff0:	425b      	negs	r3, r3
 8008ff2:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
 8008ff6:	e7df      	b.n	8008fb8 <fx_strip_running_light_run+0x18>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 8008ff8:	2400      	movs	r4, #0
 8008ffa:	e7df      	b.n	8008fbc <fx_strip_running_light_run+0x1c>
			return FX_OK;
 8008ffc:	2000      	movs	r0, #0
}
 8008ffe:	b002      	add	sp, #8
 8009000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					else if (pos[ii] < 0)
 8009004:	4b36      	ldr	r3, [pc, #216]	; (80090e0 <fx_strip_running_light_run+0x140>)
 8009006:	f933 2014 	ldrsh.w	r2, [r3, r4, lsl #1]
 800900a:	2a00      	cmp	r2, #0
 800900c:	db4a      	blt.n	80090a4 <fx_strip_running_light_run+0x104>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 800900e:	3401      	adds	r4, #1
 8009010:	b2e4      	uxtb	r4, r4
 8009012:	2c01      	cmp	r4, #1
 8009014:	d855      	bhi.n	80090c2 <fx_strip_running_light_run+0x122>
				if (check_custom_frame_delay(&delay[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_SPEED]))) //Hmmm.... Speed determines the length of the effect but that's fixed for Single Shot... Problem....
 8009016:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800901a:	4b2f      	ldr	r3, [pc, #188]	; (80090d8 <fx_strip_running_light_run+0x138>)
 800901c:	4413      	add	r3, r2
 800901e:	7858      	ldrb	r0, [r3, #1]
 8009020:	f000 f889 	bl	8009136 <get_DMX_variable>
 8009024:	4601      	mov	r1, r0
 8009026:	482f      	ldr	r0, [pc, #188]	; (80090e4 <fx_strip_running_light_run+0x144>)
 8009028:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800902c:	f000 f86a 	bl	8009104 <check_custom_frame_delay>
 8009030:	2800      	cmp	r0, #0
 8009032:	d0ec      	beq.n	800900e <fx_strip_running_light_run+0x6e>
					WS2812B_clear((t_stripchannel)ii);
 8009034:	4620      	mov	r0, r4
 8009036:	f000 f9d1 	bl	80093dc <WS2812B_clear>
					WS2812B_setPixelColor((t_stripchannel)ii,pos[ii],get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V1]), get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V2]), get_DMX_variable(DMX_CH_REG[ii][DMX_STRIP_V3]));
 800903a:	4f29      	ldr	r7, [pc, #164]	; (80090e0 <fx_strip_running_light_run+0x140>)
 800903c:	f937 8014 	ldrsh.w	r8, [r7, r4, lsl #1]
 8009040:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8009044:	4d24      	ldr	r5, [pc, #144]	; (80090d8 <fx_strip_running_light_run+0x138>)
 8009046:	441d      	add	r5, r3
 8009048:	7928      	ldrb	r0, [r5, #4]
 800904a:	f000 f874 	bl	8009136 <get_DMX_variable>
 800904e:	4681      	mov	r9, r0
 8009050:	7968      	ldrb	r0, [r5, #5]
 8009052:	f000 f870 	bl	8009136 <get_DMX_variable>
 8009056:	4682      	mov	sl, r0
 8009058:	79a8      	ldrb	r0, [r5, #6]
 800905a:	f000 f86c 	bl	8009136 <get_DMX_variable>
 800905e:	9000      	str	r0, [sp, #0]
 8009060:	4653      	mov	r3, sl
 8009062:	464a      	mov	r2, r9
 8009064:	fa1f f188 	uxth.w	r1, r8
 8009068:	4620      	mov	r0, r4
 800906a:	f000 f96b 	bl	8009344 <WS2812B_setPixelColor>
					pos[ii] = pos[ii] + step[ii];
 800906e:	f837 5014 	ldrh.w	r5, [r7, r4, lsl #1]
 8009072:	4b1a      	ldr	r3, [pc, #104]	; (80090dc <fx_strip_running_light_run+0x13c>)
 8009074:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8009078:	441d      	add	r5, r3
 800907a:	b22d      	sxth	r5, r5
 800907c:	f827 5014 	strh.w	r5, [r7, r4, lsl #1]
					if (pos[ii] > WS2812B_numPixels((t_stripchannel)ii))
 8009080:	4620      	mov	r0, r4
 8009082:	f000 f9a1 	bl	80093c8 <WS2812B_numPixels>
 8009086:	4285      	cmp	r5, r0
 8009088:	ddbc      	ble.n	8009004 <fx_strip_running_light_run+0x64>
						step[ii] = -step[ii];
 800908a:	4a14      	ldr	r2, [pc, #80]	; (80090dc <fx_strip_running_light_run+0x13c>)
 800908c:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8009090:	425b      	negs	r3, r3
 8009092:	b29b      	uxth	r3, r3
 8009094:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
						pos[ii] = pos[ii] + step[ii];
 8009098:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
 800909c:	440b      	add	r3, r1
 800909e:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
 80090a2:	e7b4      	b.n	800900e <fx_strip_running_light_run+0x6e>
						step[ii] = -step[ii];
 80090a4:	490d      	ldr	r1, [pc, #52]	; (80090dc <fx_strip_running_light_run+0x13c>)
 80090a6:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
 80090aa:	425b      	negs	r3, r3
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	f821 3014 	strh.w	r3, [r1, r4, lsl #1]
						pos[ii] = pos[ii] + step[ii];
 80090b2:	b292      	uxth	r2, r2
 80090b4:	4413      	add	r3, r2
 80090b6:	4a0a      	ldr	r2, [pc, #40]	; (80090e0 <fx_strip_running_light_run+0x140>)
 80090b8:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
 80090bc:	e7a7      	b.n	800900e <fx_strip_running_light_run+0x6e>
			for (uint8_t ii = 0;ii<CH_MAX;ii++)
 80090be:	2400      	movs	r4, #0
 80090c0:	e7a7      	b.n	8009012 <fx_strip_running_light_run+0x72>
			return FX_RUNNING;
 80090c2:	2002      	movs	r0, #2
 80090c4:	e79b      	b.n	8008ffe <fx_strip_running_light_run+0x5e>
			WS2812B_clear(CH1);
 80090c6:	2000      	movs	r0, #0
 80090c8:	f000 f988 	bl	80093dc <WS2812B_clear>
			WS2812B_clear(CH2);
 80090cc:	2001      	movs	r0, #1
 80090ce:	f000 f985 	bl	80093dc <WS2812B_clear>
			return FX_COMPLETED;
 80090d2:	2001      	movs	r0, #1
 80090d4:	e793      	b.n	8008ffe <fx_strip_running_light_run+0x5e>
 80090d6:	bf00      	nop
 80090d8:	0800d440 	.word	0x0800d440
 80090dc:	2000097c 	.word	0x2000097c
 80090e0:	20000978 	.word	0x20000978
 80090e4:	20000970 	.word	0x20000970

080090e8 <fx_strip_running_light>:
{
 80090e8:	b508      	push	{r3, lr}
	register_fx(&param,fx_num);
 80090ea:	4601      	mov	r1, r0
 80090ec:	4801      	ldr	r0, [pc, #4]	; (80090f4 <fx_strip_running_light+0xc>)
 80090ee:	f7fc fc79 	bl	80059e4 <register_fx>
}
 80090f2:	bd08      	pop	{r3, pc}
 80090f4:	0800d42c 	.word	0x0800d42c

080090f8 <reset_frame_delay>:


//Reset the Frame Delay Counter
void reset_frame_delay(void)
{
	 delay_count = 0;
 80090f8:	4b01      	ldr	r3, [pc, #4]	; (8009100 <reset_frame_delay+0x8>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	601a      	str	r2, [r3, #0]
}
 80090fe:	4770      	bx	lr
 8009100:	20000980 	.word	0x20000980

08009104 <check_custom_frame_delay>:


//Custom Delay with on Variable
uint8_t check_custom_frame_delay(uint32_t* count, uint32_t delay)
{
	if (*count >= delay)
 8009104:	6803      	ldr	r3, [r0, #0]
 8009106:	428b      	cmp	r3, r1
 8009108:	d203      	bcs.n	8009112 <check_custom_frame_delay+0xe>
	{
		*count = 0;
		return 1;
	}
	*count = *count + 1;
 800910a:	3301      	adds	r3, #1
 800910c:	6003      	str	r3, [r0, #0]
	return 0;
 800910e:	2000      	movs	r0, #0
}
 8009110:	4770      	bx	lr
		*count = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	6003      	str	r3, [r0, #0]
		return 1;
 8009116:	2001      	movs	r0, #1
 8009118:	4770      	bx	lr
	...

0800911c <check_frame_delay>:
{
 800911c:	b508      	push	{r3, lr}
	return check_custom_frame_delay(&delay_count, delay);
 800911e:	4601      	mov	r1, r0
 8009120:	4801      	ldr	r0, [pc, #4]	; (8009128 <check_frame_delay+0xc>)
 8009122:	f7ff ffef 	bl	8009104 <check_custom_frame_delay>
}
 8009126:	bd08      	pop	{r3, pc}
 8009128:	20000980 	.word	0x20000980

0800912c <set_pwm_light>:


//Set Light by index (0..9)
void set_pwm_light(uint8_t index, uint8_t val)
{
 800912c:	b508      	push	{r3, lr}
	set_reg(index+1, val);
 800912e:	3001      	adds	r0, #1
 8009130:	f7fc fa9c 	bl	800566c <set_reg>
}
 8009134:	bd08      	pop	{r3, pc}

08009136 <get_DMX_variable>:
}


//Get a DMX Variable
uint8_t get_DMX_variable(t_dmx_var var)
{
 8009136:	b508      	push	{r3, lr}
	return get_reg((uint32_t)var);
 8009138:	f7fc faa6 	bl	8005688 <get_reg>
}
 800913c:	bd08      	pop	{r3, pc}

0800913e <millisec>:
{
	return get_trigger(ch);
}

uint32_t millisec(void)
{
 800913e:	b508      	push	{r3, lr}
	return HAL_GetTick();
 8009140:	f7f8 f850 	bl	80011e4 <HAL_GetTick>
}
 8009144:	bd08      	pop	{r3, pc}

08009146 <scale256>:


uint8_t scale256(uint8_t val, uint8_t scale)
{
	return (uint8_t)(((uint16_t)val * (uint16_t)scale)>>8);
 8009146:	fb01 f000 	mul.w	r0, r1, r0
}
 800914a:	0a00      	lsrs	r0, r0, #8
 800914c:	4770      	bx	lr

0800914e <scale_full>:

uint16_t scale_full(uint16_t in,uint16_t in_max, uint16_t in_min, uint16_t out_max, uint16_t out_min)
{
 800914e:	b410      	push	{r4}
 8009150:	f8bd 4004 	ldrh.w	r4, [sp, #4]
	return (uint16_t) (((uint32_t)(in-in_min)  * (uint32_t)(out_max - out_min))/ (uint32_t)(in_max - in_min) + (uint32_t)out_min);
 8009154:	1a80      	subs	r0, r0, r2
 8009156:	1b1b      	subs	r3, r3, r4
 8009158:	fb03 f000 	mul.w	r0, r3, r0
 800915c:	1a89      	subs	r1, r1, r2
 800915e:	fbb0 f0f1 	udiv	r0, r0, r1
 8009162:	4420      	add	r0, r4
}
 8009164:	b280      	uxth	r0, r0
 8009166:	bc10      	pop	{r4}
 8009168:	4770      	bx	lr

0800916a <create_rgb_buffer>:

uint8_t create_rgb_buffer(t_rgb_buf* pbuf, uint16_t size)
{
 800916a:	b538      	push	{r3, r4, r5, lr}
 800916c:	4604      	mov	r4, r0
 800916e:	460d      	mov	r5, r1
	pbuf->size = 0;
 8009170:	2300      	movs	r3, #0
 8009172:	8083      	strh	r3, [r0, #4]
	pbuf->rgb_pixels = calloc(size, sizeof(t_rgb));
 8009174:	2103      	movs	r1, #3
 8009176:	4628      	mov	r0, r5
 8009178:	f000 fa90 	bl	800969c <calloc>
 800917c:	6020      	str	r0, [r4, #0]
	if (NULL != pbuf->rgb_pixels)
 800917e:	b110      	cbz	r0, 8009186 <create_rgb_buffer+0x1c>
	{
		pbuf->size = size;
 8009180:	80a5      	strh	r5, [r4, #4]
		return 1;
 8009182:	2001      	movs	r0, #1
	}
	return 0;
}
 8009184:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
 8009186:	2000      	movs	r0, #0
 8009188:	e7fc      	b.n	8009184 <create_rgb_buffer+0x1a>

0800918a <destroy_rgb_buffer>:

void destroy_rgb_buffer(t_rgb_buf* pbuf)
{
 800918a:	b508      	push	{r3, lr}
	free(pbuf->rgb_pixels);
 800918c:	6800      	ldr	r0, [r0, #0]
 800918e:	f000 fabf 	bl	8009710 <free>
}
 8009192:	bd08      	pop	{r3, pc}

08009194 <set_buffer_pixel>:

void set_buffer_pixel(t_rgb_buf* pbuf,uint16_t pos, uint8_t r, uint8_t g, uint8_t b)
{
 8009194:	b410      	push	{r4}
	t_rgb *pix = pbuf->rgb_pixels;
 8009196:	6804      	ldr	r4, [r0, #0]
	pix[pos].r = r;
 8009198:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800919c:	1860      	adds	r0, r4, r1
 800919e:	5462      	strb	r2, [r4, r1]
	pix[pos].g = g;
 80091a0:	7043      	strb	r3, [r0, #1]
	pix[pos].b = b;
 80091a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80091a6:	7083      	strb	r3, [r0, #2]
}
 80091a8:	bc10      	pop	{r4}
 80091aa:	4770      	bx	lr

080091ac <set_pixels_from_buf>:

void set_pixels_from_buf(t_stripchannel ch, t_rgb_buf* pbuf)
{
 80091ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ae:	b083      	sub	sp, #12
 80091b0:	4607      	mov	r7, r0
 80091b2:	460c      	mov	r4, r1
	uint16_t cnt;
	uint16_t maxcnt = WS2812B_numPixels(ch);
 80091b4:	f000 f908 	bl	80093c8 <WS2812B_numPixels>
	t_rgb *pix = pbuf->rgb_pixels;
 80091b8:	6825      	ldr	r5, [r4, #0]

	if (maxcnt>pbuf->size)
 80091ba:	88a6      	ldrh	r6, [r4, #4]
 80091bc:	4286      	cmp	r6, r0
 80091be:	d300      	bcc.n	80091c2 <set_pixels_from_buf+0x16>
	uint16_t maxcnt = WS2812B_numPixels(ch);
 80091c0:	4606      	mov	r6, r0
		maxcnt = pbuf->size;

	for (cnt = 0;cnt<maxcnt;cnt++)
 80091c2:	2400      	movs	r4, #0
 80091c4:	e00c      	b.n	80091e0 <set_pixels_from_buf+0x34>
	{
		WS2812B_setPixelColor(ch,cnt,pix[cnt].r,pix[cnt].g,pix[cnt].b);
 80091c6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80091ca:	18a9      	adds	r1, r5, r2
 80091cc:	784b      	ldrb	r3, [r1, #1]
 80091ce:	5caa      	ldrb	r2, [r5, r2]
 80091d0:	7889      	ldrb	r1, [r1, #2]
 80091d2:	9100      	str	r1, [sp, #0]
 80091d4:	4621      	mov	r1, r4
 80091d6:	4638      	mov	r0, r7
 80091d8:	f000 f8b4 	bl	8009344 <WS2812B_setPixelColor>
	for (cnt = 0;cnt<maxcnt;cnt++)
 80091dc:	3401      	adds	r4, #1
 80091de:	b2a4      	uxth	r4, r4
 80091e0:	42b4      	cmp	r4, r6
 80091e2:	d3f0      	bcc.n	80091c6 <set_pixels_from_buf+0x1a>
	}
}
 80091e4:	b003      	add	sp, #12
 80091e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091e8 <fade_rgb_buf>:

void fade_rgb_buf(t_rgb_buf* pbuf,uint8_t scale)
{
 80091e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091ec:	4681      	mov	r9, r0
 80091ee:	4688      	mov	r8, r1
	uint16_t i;
	t_rgb *pix = pbuf->rgb_pixels;
 80091f0:	6807      	ldr	r7, [r0, #0]

	for (i = 0; i<pbuf->size;i++)
 80091f2:	2400      	movs	r4, #0
 80091f4:	e007      	b.n	8009206 <fade_rgb_buf+0x1e>
	{
		pix[i].r = scale256(pix[i].r, scale);
		if (pix[i].r < 2)
			pix[i].r = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	55bb      	strb	r3, [r7, r6]
 80091fa:	e012      	b.n	8009222 <fade_rgb_buf+0x3a>
		pix[i].g = scale256(pix[i].g, scale);
		if (pix[i].g < 2)
			pix[i].g = 0;
 80091fc:	2300      	movs	r3, #0
 80091fe:	706b      	strb	r3, [r5, #1]
 8009200:	e016      	b.n	8009230 <fade_rgb_buf+0x48>
	for (i = 0; i<pbuf->size;i++)
 8009202:	3401      	adds	r4, #1
 8009204:	b2a4      	uxth	r4, r4
 8009206:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800920a:	42a3      	cmp	r3, r4
 800920c:	d91a      	bls.n	8009244 <fade_rgb_buf+0x5c>
		pix[i].r = scale256(pix[i].r, scale);
 800920e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8009212:	19bd      	adds	r5, r7, r6
 8009214:	4641      	mov	r1, r8
 8009216:	5db8      	ldrb	r0, [r7, r6]
 8009218:	f7ff ff95 	bl	8009146 <scale256>
 800921c:	55b8      	strb	r0, [r7, r6]
		if (pix[i].r < 2)
 800921e:	2801      	cmp	r0, #1
 8009220:	d9e9      	bls.n	80091f6 <fade_rgb_buf+0xe>
		pix[i].g = scale256(pix[i].g, scale);
 8009222:	4641      	mov	r1, r8
 8009224:	7868      	ldrb	r0, [r5, #1]
 8009226:	f7ff ff8e 	bl	8009146 <scale256>
 800922a:	7068      	strb	r0, [r5, #1]
		if (pix[i].g < 2)
 800922c:	2801      	cmp	r0, #1
 800922e:	d9e5      	bls.n	80091fc <fade_rgb_buf+0x14>
		pix[i].b = scale256(pix[i].b, scale);
 8009230:	4641      	mov	r1, r8
 8009232:	78a8      	ldrb	r0, [r5, #2]
 8009234:	f7ff ff87 	bl	8009146 <scale256>
 8009238:	70a8      	strb	r0, [r5, #2]
		if (pix[i].b < 2)
 800923a:	2801      	cmp	r0, #1
 800923c:	d8e1      	bhi.n	8009202 <fade_rgb_buf+0x1a>
			pix[i].b = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	70ab      	strb	r3, [r5, #2]
 8009242:	e7de      	b.n	8009202 <fade_rgb_buf+0x1a>
	}
}
 8009244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009248 <simple_rnd>:
//Very simple pseudo-random number generator.
//Returns a number 0x00000000..0xFFFFFFFF
//This is a pseudo-random sequence and will always start the same....

uint32_t simple_rnd()
{
 8009248:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
   x *= x;
 800924c:	490e      	ldr	r1, [pc, #56]	; (8009288 <simple_rnd+0x40>)
 800924e:	680a      	ldr	r2, [r1, #0]
 8009250:	684b      	ldr	r3, [r1, #4]
 8009252:	fb02 f003 	mul.w	r0, r2, r3
 8009256:	fba2 2302 	umull	r2, r3, r2, r2
 800925a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   x += (w += s);
 800925e:	480b      	ldr	r0, [pc, #44]	; (800928c <simple_rnd+0x44>)
 8009260:	e9d0 4500 	ldrd	r4, r5, [r0]
 8009264:	4e0a      	ldr	r6, [pc, #40]	; (8009290 <simple_rnd+0x48>)
 8009266:	cec0      	ldmia	r6, {r6, r7}
 8009268:	eb14 0b06 	adds.w	fp, r4, r6
 800926c:	eb45 0c07 	adc.w	ip, r5, r7
 8009270:	e9c0 bc00 	strd	fp, ip, [r0]
 8009274:	eb12 040b 	adds.w	r4, r2, fp
 8009278:	eb43 050c 	adc.w	r5, r3, ip
   return x = (x>>32) | (x<<32);
 800927c:	600d      	str	r5, [r1, #0]
 800927e:	604c      	str	r4, [r1, #4]
}
 8009280:	4628      	mov	r0, r5
 8009282:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 8009286:	4770      	bx	lr
 8009288:	20000990 	.word	0x20000990
 800928c:	20000988 	.word	0x20000988
 8009290:	20000208 	.word	0x20000208

08009294 <WS2812B_show>:



// Sends the current buffer to the leds
void WS2812B_show(t_stripchannel ch)
{
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	4604      	mov	r4, r0
  uint32_t loopcnt = 0;
  static uint8_t errorcnt = 0;

  //If Strip is set to 0 pixels we ignore it...
  if (stripchannel[ch].numLEDs == 0)
 8009298:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800929c:	00da      	lsls	r2, r3, #3
 800929e:	4b27      	ldr	r3, [pc, #156]	; (800933c <WS2812B_show+0xa8>)
 80092a0:	4413      	add	r3, r2
 80092a2:	889b      	ldrh	r3, [r3, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d03b      	beq.n	8009320 <WS2812B_show+0x8c>
	  return;

  //Wait for last transfer to finish
  while(__HAL_SPI_GET_FLAG(stripchannel[ch].phspi, SPI_FLAG_BSY ))
 80092a8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80092ac:	00da      	lsls	r2, r3, #3
 80092ae:	4b23      	ldr	r3, [pc, #140]	; (800933c <WS2812B_show+0xa8>)
 80092b0:	4413      	add	r3, r2
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092bc:	d1f4      	bne.n	80092a8 <WS2812B_show+0x14>
  {
	  loopcnt++;
  }

  while (HAL_GetTick()<stripchannel[ch].time)
 80092be:	f7f7 ff91 	bl	80011e4 <HAL_GetTick>
 80092c2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80092c6:	00d3      	lsls	r3, r2, #3
 80092c8:	4a1c      	ldr	r2, [pc, #112]	; (800933c <WS2812B_show+0xa8>)
 80092ca:	58d3      	ldr	r3, [r2, r3]
 80092cc:	4298      	cmp	r0, r3
 80092ce:	d3f6      	bcc.n	80092be <WS2812B_show+0x2a>

  //we know how long the transfer takes..
  //(440ns per bit) * 8 bits * 3 colors * number of pixels...

  //Send Data via DMA
  if (HAL_OK != HAL_SPI_Transmit_DMA(stripchannel[ch].phspi, stripchannel[ch].pixels, stripchannel[ch].numBytes))
 80092d0:	0062      	lsls	r2, r4, #1
 80092d2:	4422      	add	r2, r4
 80092d4:	00d1      	lsls	r1, r2, #3
 80092d6:	4b19      	ldr	r3, [pc, #100]	; (800933c <WS2812B_show+0xa8>)
 80092d8:	440b      	add	r3, r1
 80092da:	88da      	ldrh	r2, [r3, #6]
 80092dc:	6899      	ldr	r1, [r3, #8]
 80092de:	6918      	ldr	r0, [r3, #16]
 80092e0:	f7f9 ffbe 	bl	8003260 <HAL_SPI_Transmit_DMA>
 80092e4:	b118      	cbz	r0, 80092ee <WS2812B_show+0x5a>
	  errorcnt++;
 80092e6:	4a16      	ldr	r2, [pc, #88]	; (8009340 <WS2812B_show+0xac>)
 80092e8:	7813      	ldrb	r3, [r2, #0]
 80092ea:	3301      	adds	r3, #1
 80092ec:	7013      	strb	r3, [r2, #0]
  stripchannel[ch].time = HAL_GetTick() + 6;  //we need to wait at least XXX systicks for the colors to latch in after the last transfer.
 80092ee:	f7f7 ff79 	bl	80011e4 <HAL_GetTick>
 80092f2:	3006      	adds	r0, #6
 80092f4:	4911      	ldr	r1, [pc, #68]	; (800933c <WS2812B_show+0xa8>)
 80092f6:	0063      	lsls	r3, r4, #1
 80092f8:	4423      	add	r3, r4
 80092fa:	00da      	lsls	r2, r3, #3
 80092fc:	188b      	adds	r3, r1, r2
 80092fe:	5088      	str	r0, [r1, r2]
  	  	  	  	  	  	  	 //The added 6 ms here are purely experimental...

  // Need to copy the last / current buffer to the other half of the double buffer as most API code does not rebuild the entire contents
  // from scratch. Often just a few pixels are changed e.g in a chaser effect

  if (stripchannel[ch].pixels==stripchannel[ch].doubleBuffer)
 8009300:	689a      	ldr	r2, [r3, #8]
 8009302:	68d8      	ldr	r0, [r3, #12]
 8009304:	4282      	cmp	r2, r0
 8009306:	d00c      	beq.n	8009322 <WS2812B_show+0x8e>
	memcpy(stripchannel[ch].pixels,stripchannel[ch].doubleBuffer,stripchannel[ch].numBytes);// copy first buffer to second buffer
  }
  else
  {
	// pixels was using the second buffer
	  stripchannel[ch].pixels	= stripchannel[ch].doubleBuffer;  // set pixels to first buffer
 8009308:	4d0c      	ldr	r5, [pc, #48]	; (800933c <WS2812B_show+0xa8>)
 800930a:	0063      	lsls	r3, r4, #1
 800930c:	1919      	adds	r1, r3, r4
 800930e:	00ca      	lsls	r2, r1, #3
 8009310:	442a      	add	r2, r5
 8009312:	6090      	str	r0, [r2, #8]
	memcpy(stripchannel[ch].pixels,stripchannel[ch].doubleBuffer+stripchannel[ch].numBytes,stripchannel[ch].numBytes);	 // copy second buffer to first buffer
 8009314:	68d1      	ldr	r1, [r2, #12]
 8009316:	88d3      	ldrh	r3, [r2, #6]
 8009318:	461a      	mov	r2, r3
 800931a:	4419      	add	r1, r3
 800931c:	f000 fa00 	bl	8009720 <memcpy>
  }
}
 8009320:	bd38      	pop	{r3, r4, r5, pc}
	  stripchannel[ch].pixels = stripchannel[ch].doubleBuffer+stripchannel[ch].numBytes;  // set pixels to second buffer
 8009322:	460d      	mov	r5, r1
 8009324:	0062      	lsls	r2, r4, #1
 8009326:	1911      	adds	r1, r2, r4
 8009328:	00cb      	lsls	r3, r1, #3
 800932a:	442b      	add	r3, r5
 800932c:	88d9      	ldrh	r1, [r3, #6]
 800932e:	4408      	add	r0, r1
 8009330:	6098      	str	r0, [r3, #8]
	memcpy(stripchannel[ch].pixels,stripchannel[ch].doubleBuffer,stripchannel[ch].numBytes);// copy first buffer to second buffer
 8009332:	460a      	mov	r2, r1
 8009334:	68d9      	ldr	r1, [r3, #12]
 8009336:	f000 f9f3 	bl	8009720 <memcpy>
 800933a:	e7f1      	b.n	8009320 <WS2812B_show+0x8c>
 800933c:	20000c28 	.word	0x20000c28
 8009340:	20000998 	.word	0x20000998

08009344 <WS2812B_setPixelColor>:

//Sets a specific pixel to a specific r,g,b colour
//Because the pixels buffer contains the encoded bitstream, which is in triplets
//the lookup table need to be used to find the correct pattern for each byte in the 3 byte sequence.
void WS2812B_setPixelColor(t_stripchannel ch,uint16_t n, uint8_t r, uint8_t g, uint8_t b)
 {
 8009344:	b4f0      	push	{r4, r5, r6, r7}
 8009346:	f89d 5010 	ldrb.w	r5, [sp, #16]
   uint8_t *bptr = stripchannel[ch].pixels + (n<<3) + n +1;
 800934a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800934e:	00c4      	lsls	r4, r0, #3
 8009350:	4812      	ldr	r0, [pc, #72]	; (800939c <WS2812B_setPixelColor+0x58>)
 8009352:	4420      	add	r0, r4
 8009354:	6887      	ldr	r7, [r0, #8]
 8009356:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800935a:	3101      	adds	r1, #1
 800935c:	1878      	adds	r0, r7, r1
   uint8_t *tPtr = (uint8_t *)encoderLookup + g*2 + g;// need to index 3 x g into the lookup
 800935e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009362:	4c0f      	ldr	r4, [pc, #60]	; (80093a0 <WS2812B_setPixelColor+0x5c>)
 8009364:	18e6      	adds	r6, r4, r3

   *bptr++ = *tPtr++;
 8009366:	5ce3      	ldrb	r3, [r4, r3]
 8009368:	547b      	strb	r3, [r7, r1]
   *bptr++ = *tPtr++;
 800936a:	7873      	ldrb	r3, [r6, #1]
 800936c:	7043      	strb	r3, [r0, #1]
   *bptr++ = *tPtr++;
 800936e:	78b3      	ldrb	r3, [r6, #2]
 8009370:	7083      	strb	r3, [r0, #2]

   tPtr = (uint8_t *)encoderLookup + r*2 + r;
 8009372:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009376:	18a3      	adds	r3, r4, r2
   *bptr++ = *tPtr++;
 8009378:	5ca2      	ldrb	r2, [r4, r2]
 800937a:	70c2      	strb	r2, [r0, #3]
   *bptr++ = *tPtr++;
 800937c:	785a      	ldrb	r2, [r3, #1]
 800937e:	7102      	strb	r2, [r0, #4]
   *bptr++ = *tPtr++;
 8009380:	789b      	ldrb	r3, [r3, #2]
 8009382:	7143      	strb	r3, [r0, #5]

   tPtr = (uint8_t *)encoderLookup + b*2 + b;
 8009384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009388:	1963      	adds	r3, r4, r5
   *bptr++ = *tPtr++;
 800938a:	5d62      	ldrb	r2, [r4, r5]
 800938c:	7182      	strb	r2, [r0, #6]
   *bptr++ = *tPtr++;
 800938e:	785a      	ldrb	r2, [r3, #1]
 8009390:	71c2      	strb	r2, [r0, #7]
   *bptr++ = *tPtr++;
 8009392:	789b      	ldrb	r3, [r3, #2]
 8009394:	7203      	strb	r3, [r0, #8]
 }
 8009396:	bcf0      	pop	{r4, r5, r6, r7}
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	20000c28 	.word	0x20000c28
 80093a0:	0800d450 	.word	0x0800d450

080093a4 <WS2812B_setPixelColorDirect>:

void WS2812B_setPixelColorDirect(t_stripchannel ch,uint16_t n, uint32_t c)
{
 80093a4:	b500      	push	{lr}
 80093a6:	b083      	sub	sp, #12
  WS2812B_setPixelColor(ch,n,(uint8_t)(c >> 16),(uint8_t)(c >>  8),(uint8_t)c);
 80093a8:	b2d3      	uxtb	r3, r2
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80093b0:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80093b4:	f7ff ffc6 	bl	8009344 <WS2812B_setPixelColor>
}
 80093b8:	b003      	add	sp, #12
 80093ba:	f85d fb04 	ldr.w	pc, [sp], #4

080093be <WS2812B_Color>:

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t WS2812B_Color(uint8_t r, uint8_t g, uint8_t b)
{
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80093be:	0209      	lsls	r1, r1, #8
 80093c0:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
}
 80093c4:	4310      	orrs	r0, r2
 80093c6:	4770      	bx	lr

080093c8 <WS2812B_numPixels>:

//Get the number of pixels
uint16_t WS2812B_numPixels(t_stripchannel ch)
{
  return stripchannel[ch].numLEDs;
 80093c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80093cc:	00c2      	lsls	r2, r0, #3
 80093ce:	4b02      	ldr	r3, [pc, #8]	; (80093d8 <WS2812B_numPixels+0x10>)
 80093d0:	4413      	add	r3, r2
}
 80093d2:	8898      	ldrh	r0, [r3, #4]
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	20000c28 	.word	0x20000c28

080093dc <WS2812B_clear>:



//Sets the encoded pixel data to turn all the LEDs off.
void WS2812B_clear(t_stripchannel ch)
{
 80093dc:	b410      	push	{r4}
	uint8_t * bptr= stripchannel[ch].pixels+1;// Note first byte in the buffer is a preable and is always zero. hence the +1
 80093de:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80093e2:	00da      	lsls	r2, r3, #3
 80093e4:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <WS2812B_clear+0x3c>)
 80093e6:	4413      	add	r3, r2
 80093e8:	689a      	ldr	r2, [r3, #8]
 80093ea:	3201      	adds	r2, #1
	uint8_t *tPtr;

	for(int i=0;i< (stripchannel[ch].numLEDs *3);i++)
 80093ec:	2400      	movs	r4, #0
 80093ee:	e007      	b.n	8009400 <WS2812B_clear+0x24>
	{
		tPtr = (uint8_t *)encoderLookup;
		*bptr++ = *tPtr++;
 80093f0:	2392      	movs	r3, #146	; 0x92
 80093f2:	7013      	strb	r3, [r2, #0]
		*bptr++ = *tPtr++;
 80093f4:	2349      	movs	r3, #73	; 0x49
 80093f6:	7053      	strb	r3, [r2, #1]
		*bptr++ = *tPtr++;
 80093f8:	2324      	movs	r3, #36	; 0x24
 80093fa:	7093      	strb	r3, [r2, #2]
	for(int i=0;i< (stripchannel[ch].numLEDs *3);i++)
 80093fc:	3401      	adds	r4, #1
		*bptr++ = *tPtr++;
 80093fe:	3203      	adds	r2, #3
	for(int i=0;i< (stripchannel[ch].numLEDs *3);i++)
 8009400:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8009404:	00d9      	lsls	r1, r3, #3
 8009406:	4b04      	ldr	r3, [pc, #16]	; (8009418 <WS2812B_clear+0x3c>)
 8009408:	440b      	add	r3, r1
 800940a:	889b      	ldrh	r3, [r3, #4]
 800940c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009410:	42a3      	cmp	r3, r4
 8009412:	dced      	bgt.n	80093f0 <WS2812B_clear+0x14>
	}
}
 8009414:	bc10      	pop	{r4}
 8009416:	4770      	bx	lr
 8009418:	20000c28 	.word	0x20000c28

0800941c <WS2812B_init>:
{
 800941c:	b570      	push	{r4, r5, r6, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	4604      	mov	r4, r0
 8009422:	460d      	mov	r5, r1
	stripchannel[ch].pixels = NULL;
 8009424:	4947      	ldr	r1, [pc, #284]	; (8009544 <WS2812B_init+0x128>)
 8009426:	0043      	lsls	r3, r0, #1
 8009428:	4403      	add	r3, r0
 800942a:	00da      	lsls	r2, r3, #3
 800942c:	1888      	adds	r0, r1, r2
 800942e:	2300      	movs	r3, #0
 8009430:	6083      	str	r3, [r0, #8]
	stripchannel[ch].doubleBuffer = NULL;
 8009432:	60c3      	str	r3, [r0, #12]
	stripchannel[ch].time = 0;
 8009434:	508b      	str	r3, [r1, r2]
	if (ch == CH1)
 8009436:	2c00      	cmp	r4, #0
 8009438:	d12f      	bne.n	800949a <WS2812B_init+0x7e>
		stripchannel[ch].phspi = &hspi1;
 800943a:	4a43      	ldr	r2, [pc, #268]	; (8009548 <WS2812B_init+0x12c>)
 800943c:	6102      	str	r2, [r0, #16]
		stripchannel[ch].phdma_spi_tx = &hdma_spi1_tx;
 800943e:	4a43      	ldr	r2, [pc, #268]	; (800954c <WS2812B_init+0x130>)
 8009440:	6142      	str	r2, [r0, #20]
  uint8_t buffer0[2] = { 0, 0 };
 8009442:	2300      	movs	r3, #0
 8009444:	f88d 3004 	strb.w	r3, [sp, #4]
 8009448:	f88d 3005 	strb.w	r3, [sp, #5]
  stripchannel[ch].numBytes = (number_of_leds<<3) + number_of_leds + 2; // 9 encoded bytes per pixel. 1 byte empty peamble to fix issue with SPI MOSI and on byte at the end to clear down MOSI
 800944c:	00e8      	lsls	r0, r5, #3
 800944e:	b280      	uxth	r0, r0
 8009450:	4428      	add	r0, r5
 8009452:	b280      	uxth	r0, r0
 8009454:	3002      	adds	r0, #2
 8009456:	b280      	uxth	r0, r0
 8009458:	0063      	lsls	r3, r4, #1
 800945a:	4423      	add	r3, r4
 800945c:	00da      	lsls	r2, r3, #3
 800945e:	4e39      	ldr	r6, [pc, #228]	; (8009544 <WS2812B_init+0x128>)
 8009460:	4416      	add	r6, r2
 8009462:	80f0      	strh	r0, [r6, #6]
  if((stripchannel[ch].doubleBuffer = (uint8_t *)malloc(stripchannel[ch].numBytes*2)))
 8009464:	0040      	lsls	r0, r0, #1
 8009466:	f000 f94b 	bl	8009700 <malloc>
 800946a:	60f0      	str	r0, [r6, #12]
 800946c:	b1f8      	cbz	r0, 80094ae <WS2812B_init+0x92>
	stripchannel[ch].numLEDs = number_of_leds;
 800946e:	4633      	mov	r3, r6
 8009470:	80b5      	strh	r5, [r6, #4]
	stripchannel[ch].pixels = stripchannel[ch].doubleBuffer;
 8009472:	6098      	str	r0, [r3, #8]
    *stripchannel[ch].pixels=0;//clear the preamble byte
 8009474:	2200      	movs	r2, #0
 8009476:	7002      	strb	r2, [r0, #0]
    *(stripchannel[ch].pixels+stripchannel[ch].numBytes-1)=0;// clear the post send cleardown byte.
 8009478:	68b1      	ldr	r1, [r6, #8]
 800947a:	88f3      	ldrh	r3, [r6, #6]
 800947c:	3b01      	subs	r3, #1
 800947e:	54ca      	strb	r2, [r1, r3]
    WS2812B_clear(ch);// Set the encoded data to all encoded zeros
 8009480:	4620      	mov	r0, r4
 8009482:	f7ff ffab 	bl	80093dc <WS2812B_clear>
  if (ch == CH1)
 8009486:	b1e4      	cbz	r4, 80094c2 <WS2812B_init+0xa6>
	  stripchannel[ch].phdma_spi_tx->Instance = DMA1_Channel4;
 8009488:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800948c:	00da      	lsls	r2, r3, #3
 800948e:	4b2d      	ldr	r3, [pc, #180]	; (8009544 <WS2812B_init+0x128>)
 8009490:	4413      	add	r3, r2
 8009492:	695b      	ldr	r3, [r3, #20]
 8009494:	4a2e      	ldr	r2, [pc, #184]	; (8009550 <WS2812B_init+0x134>)
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	e01b      	b.n	80094d2 <WS2812B_init+0xb6>
		stripchannel[ch].phspi = &hspi2;
 800949a:	0062      	lsls	r2, r4, #1
 800949c:	4422      	add	r2, r4
 800949e:	00d1      	lsls	r1, r2, #3
 80094a0:	4b28      	ldr	r3, [pc, #160]	; (8009544 <WS2812B_init+0x128>)
 80094a2:	440b      	add	r3, r1
 80094a4:	4a2b      	ldr	r2, [pc, #172]	; (8009554 <WS2812B_init+0x138>)
 80094a6:	611a      	str	r2, [r3, #16]
		stripchannel[ch].phdma_spi_tx = &hdma_spi2_tx;
 80094a8:	4a2b      	ldr	r2, [pc, #172]	; (8009558 <WS2812B_init+0x13c>)
 80094aa:	615a      	str	r2, [r3, #20]
 80094ac:	e7c9      	b.n	8009442 <WS2812B_init+0x26>
	  stripchannel[ch].numLEDs = stripchannel[ch].numBytes = 0;
 80094ae:	4a25      	ldr	r2, [pc, #148]	; (8009544 <WS2812B_init+0x128>)
 80094b0:	0063      	lsls	r3, r4, #1
 80094b2:	1918      	adds	r0, r3, r4
 80094b4:	00c1      	lsls	r1, r0, #3
 80094b6:	4411      	add	r1, r2
 80094b8:	2000      	movs	r0, #0
 80094ba:	80c8      	strh	r0, [r1, #6]
 80094bc:	8088      	strh	r0, [r1, #4]
}
 80094be:	b002      	add	sp, #8
 80094c0:	bd70      	pop	{r4, r5, r6, pc}
	  stripchannel[ch].phdma_spi_tx->Instance = DMA1_Channel3;
 80094c2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80094c6:	00da      	lsls	r2, r3, #3
 80094c8:	4b1e      	ldr	r3, [pc, #120]	; (8009544 <WS2812B_init+0x128>)
 80094ca:	4413      	add	r3, r2
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	4a23      	ldr	r2, [pc, #140]	; (800955c <WS2812B_init+0x140>)
 80094d0:	601a      	str	r2, [r3, #0]
  stripchannel[ch].phdma_spi_tx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80094d2:	0062      	lsls	r2, r4, #1
 80094d4:	4422      	add	r2, r4
 80094d6:	00d1      	lsls	r1, r2, #3
 80094d8:	4b1a      	ldr	r3, [pc, #104]	; (8009544 <WS2812B_init+0x128>)
 80094da:	440b      	add	r3, r1
 80094dc:	695a      	ldr	r2, [r3, #20]
 80094de:	2110      	movs	r1, #16
 80094e0:	6051      	str	r1, [r2, #4]
  stripchannel[ch].phdma_spi_tx->Init.PeriphInc = DMA_PINC_DISABLE;
 80094e2:	6959      	ldr	r1, [r3, #20]
 80094e4:	2200      	movs	r2, #0
 80094e6:	608a      	str	r2, [r1, #8]
  stripchannel[ch].phdma_spi_tx->Init.MemInc = DMA_MINC_ENABLE;
 80094e8:	6959      	ldr	r1, [r3, #20]
 80094ea:	2080      	movs	r0, #128	; 0x80
 80094ec:	60c8      	str	r0, [r1, #12]
  stripchannel[ch].phdma_spi_tx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80094ee:	6959      	ldr	r1, [r3, #20]
 80094f0:	610a      	str	r2, [r1, #16]
  stripchannel[ch].phdma_spi_tx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80094f2:	6959      	ldr	r1, [r3, #20]
 80094f4:	614a      	str	r2, [r1, #20]
  stripchannel[ch].phdma_spi_tx->Init.Mode = DMA_NORMAL;
 80094f6:	6959      	ldr	r1, [r3, #20]
 80094f8:	618a      	str	r2, [r1, #24]
  stripchannel[ch].phdma_spi_tx->Init.Priority = DMA_PRIORITY_MEDIUM;
 80094fa:	695a      	ldr	r2, [r3, #20]
 80094fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009500:	61d1      	str	r1, [r2, #28]
  if (HAL_DMA_Init(stripchannel[ch].phdma_spi_tx) != HAL_OK)
 8009502:	6958      	ldr	r0, [r3, #20]
 8009504:	f7f8 f986 	bl	8001814 <HAL_DMA_Init>
 8009508:	b140      	cbz	r0, 800951c <WS2812B_init+0x100>
	    stripchannel[ch].numLEDs = stripchannel[ch].numBytes = 0;
 800950a:	4a0e      	ldr	r2, [pc, #56]	; (8009544 <WS2812B_init+0x128>)
 800950c:	0063      	lsls	r3, r4, #1
 800950e:	1918      	adds	r0, r3, r4
 8009510:	00c1      	lsls	r1, r0, #3
 8009512:	4411      	add	r1, r2
 8009514:	2000      	movs	r0, #0
 8009516:	80c8      	strh	r0, [r1, #6]
 8009518:	8088      	strh	r0, [r1, #4]
	    return 0;
 800951a:	e7d0      	b.n	80094be <WS2812B_init+0xa2>
  __HAL_LINKDMA(stripchannel[ch].phspi,hdmatx,*stripchannel[ch].phdma_spi_tx);
 800951c:	4909      	ldr	r1, [pc, #36]	; (8009544 <WS2812B_init+0x128>)
 800951e:	0063      	lsls	r3, r4, #1
 8009520:	1918      	adds	r0, r3, r4
 8009522:	00c2      	lsls	r2, r0, #3
 8009524:	440a      	add	r2, r1
 8009526:	6910      	ldr	r0, [r2, #16]
 8009528:	6952      	ldr	r2, [r2, #20]
 800952a:	6482      	str	r2, [r0, #72]	; 0x48
 800952c:	6250      	str	r0, [r2, #36]	; 0x24
   HAL_SPI_Transmit(stripchannel[ch].phspi, buffer0, 1, 100 );
 800952e:	441c      	add	r4, r3
 8009530:	00e0      	lsls	r0, r4, #3
 8009532:	4408      	add	r0, r1
 8009534:	2364      	movs	r3, #100	; 0x64
 8009536:	2201      	movs	r2, #1
 8009538:	a901      	add	r1, sp, #4
 800953a:	6900      	ldr	r0, [r0, #16]
 800953c:	f7f9 fdc3 	bl	80030c6 <HAL_SPI_Transmit>
   return 1;
 8009540:	2001      	movs	r0, #1
 8009542:	e7bc      	b.n	80094be <WS2812B_init+0xa2>
 8009544:	20000c28 	.word	0x20000c28
 8009548:	20000ccc 	.word	0x20000ccc
 800954c:	20000d68 	.word	0x20000d68
 8009550:	40020044 	.word	0x40020044
 8009554:	20000b54 	.word	0x20000b54
 8009558:	20000d24 	.word	0x20000d24
 800955c:	40020030 	.word	0x40020030

08009560 <WS2812B_colorWheel>:
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t WS2812B_colorWheel(uint8_t WheelPos)
{
 8009560:	b508      	push	{r3, lr}
  if(WheelPos < 85)
 8009562:	2854      	cmp	r0, #84	; 0x54
 8009564:	d90e      	bls.n	8009584 <WS2812B_colorWheel+0x24>
  {
    return WS2812B_Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  }
  else
  {
    if(WheelPos < 170)
 8009566:	28a9      	cmp	r0, #169	; 0xa9
 8009568:	d917      	bls.n	800959a <WS2812B_colorWheel+0x3a>
     WheelPos -= 85;
     return WS2812B_Color(255 - WheelPos * 3, 0, WheelPos * 3);
    }
    else
    {
     WheelPos -= 170;
 800956a:	3056      	adds	r0, #86	; 0x56
 800956c:	b2c1      	uxtb	r1, r0
     return WS2812B_Color(0, WheelPos * 3, 255 - WheelPos * 3);
 800956e:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
 8009572:	3a01      	subs	r2, #1
 8009574:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009578:	b2d2      	uxtb	r2, r2
 800957a:	b2c9      	uxtb	r1, r1
 800957c:	2000      	movs	r0, #0
 800957e:	f7ff ff1e 	bl	80093be <WS2812B_Color>
 8009582:	e009      	b.n	8009598 <WS2812B_colorWheel+0x38>
    return WS2812B_Color(WheelPos * 3, 255 - WheelPos * 3, 0);
 8009584:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
 8009588:	3901      	subs	r1, #1
 800958a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800958e:	2200      	movs	r2, #0
 8009590:	b2c9      	uxtb	r1, r1
 8009592:	b2c0      	uxtb	r0, r0
 8009594:	f7ff ff13 	bl	80093be <WS2812B_Color>
    }
  }
}
 8009598:	bd08      	pop	{r3, pc}
     WheelPos -= 85;
 800959a:	3855      	subs	r0, #85	; 0x55
 800959c:	b2c0      	uxtb	r0, r0
     return WS2812B_Color(255 - WheelPos * 3, 0, WheelPos * 3);
 800959e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80095a2:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 80095a6:	3801      	subs	r0, #1
 80095a8:	b2d2      	uxtb	r2, r2
 80095aa:	2100      	movs	r1, #0
 80095ac:	b2c0      	uxtb	r0, r0
 80095ae:	f7ff ff06 	bl	80093be <WS2812B_Color>
 80095b2:	e7f1      	b.n	8009598 <WS2812B_colorWheel+0x38>

080095b4 <WS2812B_rainbow>:


//show rainbow colors starting at pixel start for count pixels with a given startvalue with a defined stepsize
void WS2812B_rainbow(t_stripchannel ch,uint8_t start, uint8_t count, uint8_t startval,  uint8_t stepsize)
{
 80095b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b8:	4680      	mov	r8, r0
 80095ba:	460d      	mov	r5, r1
 80095bc:	4616      	mov	r6, r2
 80095be:	f89d 7020 	ldrb.w	r7, [sp, #32]
  uint16_t i;
  int16_t j;

	j =startval;
 80095c2:	4699      	mov	r9, r3
	for(i=start; i<(start+count); i++)
 80095c4:	b28c      	uxth	r4, r1
 80095c6:	e004      	b.n	80095d2 <WS2812B_rainbow+0x1e>
	{
		WS2812B_setPixelColorDirect(ch,i, WS2812B_colorWheel((j) & 255));
		j = j + stepsize;
		if (j>255)
			j = j - 255;
		else if (j<0)
 80095c8:	f1b9 0f00 	cmp.w	r9, #0
 80095cc:	db19      	blt.n	8009602 <WS2812B_rainbow+0x4e>
	for(i=start; i<(start+count); i++)
 80095ce:	3401      	adds	r4, #1
 80095d0:	b2a4      	uxth	r4, r4
 80095d2:	19ab      	adds	r3, r5, r6
 80095d4:	429c      	cmp	r4, r3
 80095d6:	da18      	bge.n	800960a <WS2812B_rainbow+0x56>
		WS2812B_setPixelColorDirect(ch,i, WS2812B_colorWheel((j) & 255));
 80095d8:	fa5f f089 	uxtb.w	r0, r9
 80095dc:	f7ff ffc0 	bl	8009560 <WS2812B_colorWheel>
 80095e0:	4602      	mov	r2, r0
 80095e2:	4621      	mov	r1, r4
 80095e4:	4640      	mov	r0, r8
 80095e6:	f7ff fedd 	bl	80093a4 <WS2812B_setPixelColorDirect>
		j = j + stepsize;
 80095ea:	eb07 0309 	add.w	r3, r7, r9
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	fa0f f983 	sxth.w	r9, r3
		if (j>255)
 80095f4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80095f8:	dde6      	ble.n	80095c8 <WS2812B_rainbow+0x14>
			j = j - 255;
 80095fa:	3bff      	subs	r3, #255	; 0xff
 80095fc:	fa0f f983 	sxth.w	r9, r3
 8009600:	e7e5      	b.n	80095ce <WS2812B_rainbow+0x1a>
			j= j + 255;
 8009602:	33ff      	adds	r3, #255	; 0xff
 8009604:	fa0f f983 	sxth.w	r9, r3
 8009608:	e7e1      	b.n	80095ce <WS2812B_rainbow+0x1a>
	}
}
 800960a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08009610 <WS2812B_test>:

//Running light pattern
void WS2812B_test(t_stripchannel ch)
{
 8009610:	b530      	push	{r4, r5, lr}
 8009612:	b083      	sub	sp, #12
 8009614:	4605      	mov	r5, r0
	static uint16_t startval = 0;
	WS2812B_rainbow(ch,0, WS2812B_numPixels(ch),startval,10);
 8009616:	f7ff fed7 	bl	80093c8 <WS2812B_numPixels>
 800961a:	4c0a      	ldr	r4, [pc, #40]	; (8009644 <WS2812B_test+0x34>)
 800961c:	7823      	ldrb	r3, [r4, #0]
 800961e:	220a      	movs	r2, #10
 8009620:	9200      	str	r2, [sp, #0]
 8009622:	b2c2      	uxtb	r2, r0
 8009624:	2100      	movs	r1, #0
 8009626:	4628      	mov	r0, r5
 8009628:	f7ff ffc4 	bl	80095b4 <WS2812B_rainbow>

	//Increase Counter
	startval++;
 800962c:	8823      	ldrh	r3, [r4, #0]
 800962e:	3301      	adds	r3, #1
 8009630:	b29b      	uxth	r3, r3
 8009632:	8023      	strh	r3, [r4, #0]
	if (startval == 255)
 8009634:	2bff      	cmp	r3, #255	; 0xff
 8009636:	d001      	beq.n	800963c <WS2812B_test+0x2c>
		startval = 0;
}
 8009638:	b003      	add	sp, #12
 800963a:	bd30      	pop	{r4, r5, pc}
		startval = 0;
 800963c:	2200      	movs	r2, #0
 800963e:	8022      	strh	r2, [r4, #0]
}
 8009640:	e7fa      	b.n	8009638 <WS2812B_test+0x28>
 8009642:	bf00      	nop
 8009644:	2000099a 	.word	0x2000099a

08009648 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8009648:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800964a:	e003      	b.n	8009654 <LoopCopyDataInit>

0800964c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800964c:	4b0b      	ldr	r3, [pc, #44]	; (800967c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800964e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8009650:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8009652:	3104      	adds	r1, #4

08009654 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8009654:	480a      	ldr	r0, [pc, #40]	; (8009680 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8009656:	4b0b      	ldr	r3, [pc, #44]	; (8009684 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8009658:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800965a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800965c:	d3f6      	bcc.n	800964c <CopyDataInit>
  ldr r2, =_sbss
 800965e:	4a0a      	ldr	r2, [pc, #40]	; (8009688 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8009660:	e002      	b.n	8009668 <LoopFillZerobss>

08009662 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8009662:	2300      	movs	r3, #0
  str r3, [r2], #4
 8009664:	f842 3b04 	str.w	r3, [r2], #4

08009668 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8009668:	4b08      	ldr	r3, [pc, #32]	; (800968c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800966a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800966c:	d3f9      	bcc.n	8009662 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800966e:	f7fe fca1 	bl	8007fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009672:	f000 f821 	bl	80096b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009676:	f7fc ffeb 	bl	8006650 <main>
  bx lr
 800967a:	4770      	bx	lr
  ldr r3, =_sidata
 800967c:	0800dab8 	.word	0x0800dab8
  ldr r0, =_sdata
 8009680:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8009684:	200003e4 	.word	0x200003e4
  ldr r2, =_sbss
 8009688:	200003e8 	.word	0x200003e8
  ldr r3, = _ebss
 800968c:	200019ac 	.word	0x200019ac

08009690 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009690:	e7fe      	b.n	8009690 <CAN1_RX1_IRQHandler>

08009692 <atoi>:
 8009692:	220a      	movs	r2, #10
 8009694:	2100      	movs	r1, #0
 8009696:	f000 ba13 	b.w	8009ac0 <strtol>
	...

0800969c <calloc>:
 800969c:	4b02      	ldr	r3, [pc, #8]	; (80096a8 <calloc+0xc>)
 800969e:	460a      	mov	r2, r1
 80096a0:	4601      	mov	r1, r0
 80096a2:	6818      	ldr	r0, [r3, #0]
 80096a4:	f000 b84f 	b.w	8009746 <_calloc_r>
 80096a8:	20000210 	.word	0x20000210

080096ac <__errno>:
 80096ac:	4b01      	ldr	r3, [pc, #4]	; (80096b4 <__errno+0x8>)
 80096ae:	6818      	ldr	r0, [r3, #0]
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	20000210 	.word	0x20000210

080096b8 <__libc_init_array>:
 80096b8:	b570      	push	{r4, r5, r6, lr}
 80096ba:	2500      	movs	r5, #0
 80096bc:	4e0c      	ldr	r6, [pc, #48]	; (80096f0 <__libc_init_array+0x38>)
 80096be:	4c0d      	ldr	r4, [pc, #52]	; (80096f4 <__libc_init_array+0x3c>)
 80096c0:	1ba4      	subs	r4, r4, r6
 80096c2:	10a4      	asrs	r4, r4, #2
 80096c4:	42a5      	cmp	r5, r4
 80096c6:	d109      	bne.n	80096dc <__libc_init_array+0x24>
 80096c8:	f002 fd7a 	bl	800c1c0 <_init>
 80096cc:	2500      	movs	r5, #0
 80096ce:	4e0a      	ldr	r6, [pc, #40]	; (80096f8 <__libc_init_array+0x40>)
 80096d0:	4c0a      	ldr	r4, [pc, #40]	; (80096fc <__libc_init_array+0x44>)
 80096d2:	1ba4      	subs	r4, r4, r6
 80096d4:	10a4      	asrs	r4, r4, #2
 80096d6:	42a5      	cmp	r5, r4
 80096d8:	d105      	bne.n	80096e6 <__libc_init_array+0x2e>
 80096da:	bd70      	pop	{r4, r5, r6, pc}
 80096dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096e0:	4798      	blx	r3
 80096e2:	3501      	adds	r5, #1
 80096e4:	e7ee      	b.n	80096c4 <__libc_init_array+0xc>
 80096e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096ea:	4798      	blx	r3
 80096ec:	3501      	adds	r5, #1
 80096ee:	e7f2      	b.n	80096d6 <__libc_init_array+0x1e>
 80096f0:	0800dab0 	.word	0x0800dab0
 80096f4:	0800dab0 	.word	0x0800dab0
 80096f8:	0800dab0 	.word	0x0800dab0
 80096fc:	0800dab4 	.word	0x0800dab4

08009700 <malloc>:
 8009700:	4b02      	ldr	r3, [pc, #8]	; (800970c <malloc+0xc>)
 8009702:	4601      	mov	r1, r0
 8009704:	6818      	ldr	r0, [r3, #0]
 8009706:	f000 b879 	b.w	80097fc <_malloc_r>
 800970a:	bf00      	nop
 800970c:	20000210 	.word	0x20000210

08009710 <free>:
 8009710:	4b02      	ldr	r3, [pc, #8]	; (800971c <free+0xc>)
 8009712:	4601      	mov	r1, r0
 8009714:	6818      	ldr	r0, [r3, #0]
 8009716:	f000 b825 	b.w	8009764 <_free_r>
 800971a:	bf00      	nop
 800971c:	20000210 	.word	0x20000210

08009720 <memcpy>:
 8009720:	b510      	push	{r4, lr}
 8009722:	1e43      	subs	r3, r0, #1
 8009724:	440a      	add	r2, r1
 8009726:	4291      	cmp	r1, r2
 8009728:	d100      	bne.n	800972c <memcpy+0xc>
 800972a:	bd10      	pop	{r4, pc}
 800972c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009730:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009734:	e7f7      	b.n	8009726 <memcpy+0x6>

08009736 <memset>:
 8009736:	4603      	mov	r3, r0
 8009738:	4402      	add	r2, r0
 800973a:	4293      	cmp	r3, r2
 800973c:	d100      	bne.n	8009740 <memset+0xa>
 800973e:	4770      	bx	lr
 8009740:	f803 1b01 	strb.w	r1, [r3], #1
 8009744:	e7f9      	b.n	800973a <memset+0x4>

08009746 <_calloc_r>:
 8009746:	b538      	push	{r3, r4, r5, lr}
 8009748:	fb02 f401 	mul.w	r4, r2, r1
 800974c:	4621      	mov	r1, r4
 800974e:	f000 f855 	bl	80097fc <_malloc_r>
 8009752:	4605      	mov	r5, r0
 8009754:	b118      	cbz	r0, 800975e <_calloc_r+0x18>
 8009756:	4622      	mov	r2, r4
 8009758:	2100      	movs	r1, #0
 800975a:	f7ff ffec 	bl	8009736 <memset>
 800975e:	4628      	mov	r0, r5
 8009760:	bd38      	pop	{r3, r4, r5, pc}
	...

08009764 <_free_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4605      	mov	r5, r0
 8009768:	2900      	cmp	r1, #0
 800976a:	d043      	beq.n	80097f4 <_free_r+0x90>
 800976c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009770:	1f0c      	subs	r4, r1, #4
 8009772:	2b00      	cmp	r3, #0
 8009774:	bfb8      	it	lt
 8009776:	18e4      	addlt	r4, r4, r3
 8009778:	f000 fa07 	bl	8009b8a <__malloc_lock>
 800977c:	4a1e      	ldr	r2, [pc, #120]	; (80097f8 <_free_r+0x94>)
 800977e:	6813      	ldr	r3, [r2, #0]
 8009780:	4610      	mov	r0, r2
 8009782:	b933      	cbnz	r3, 8009792 <_free_r+0x2e>
 8009784:	6063      	str	r3, [r4, #4]
 8009786:	6014      	str	r4, [r2, #0]
 8009788:	4628      	mov	r0, r5
 800978a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800978e:	f000 b9fd 	b.w	8009b8c <__malloc_unlock>
 8009792:	42a3      	cmp	r3, r4
 8009794:	d90b      	bls.n	80097ae <_free_r+0x4a>
 8009796:	6821      	ldr	r1, [r4, #0]
 8009798:	1862      	adds	r2, r4, r1
 800979a:	4293      	cmp	r3, r2
 800979c:	bf01      	itttt	eq
 800979e:	681a      	ldreq	r2, [r3, #0]
 80097a0:	685b      	ldreq	r3, [r3, #4]
 80097a2:	1852      	addeq	r2, r2, r1
 80097a4:	6022      	streq	r2, [r4, #0]
 80097a6:	6063      	str	r3, [r4, #4]
 80097a8:	6004      	str	r4, [r0, #0]
 80097aa:	e7ed      	b.n	8009788 <_free_r+0x24>
 80097ac:	4613      	mov	r3, r2
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	b10a      	cbz	r2, 80097b6 <_free_r+0x52>
 80097b2:	42a2      	cmp	r2, r4
 80097b4:	d9fa      	bls.n	80097ac <_free_r+0x48>
 80097b6:	6819      	ldr	r1, [r3, #0]
 80097b8:	1858      	adds	r0, r3, r1
 80097ba:	42a0      	cmp	r0, r4
 80097bc:	d10b      	bne.n	80097d6 <_free_r+0x72>
 80097be:	6820      	ldr	r0, [r4, #0]
 80097c0:	4401      	add	r1, r0
 80097c2:	1858      	adds	r0, r3, r1
 80097c4:	4282      	cmp	r2, r0
 80097c6:	6019      	str	r1, [r3, #0]
 80097c8:	d1de      	bne.n	8009788 <_free_r+0x24>
 80097ca:	6810      	ldr	r0, [r2, #0]
 80097cc:	6852      	ldr	r2, [r2, #4]
 80097ce:	4401      	add	r1, r0
 80097d0:	6019      	str	r1, [r3, #0]
 80097d2:	605a      	str	r2, [r3, #4]
 80097d4:	e7d8      	b.n	8009788 <_free_r+0x24>
 80097d6:	d902      	bls.n	80097de <_free_r+0x7a>
 80097d8:	230c      	movs	r3, #12
 80097da:	602b      	str	r3, [r5, #0]
 80097dc:	e7d4      	b.n	8009788 <_free_r+0x24>
 80097de:	6820      	ldr	r0, [r4, #0]
 80097e0:	1821      	adds	r1, r4, r0
 80097e2:	428a      	cmp	r2, r1
 80097e4:	bf01      	itttt	eq
 80097e6:	6811      	ldreq	r1, [r2, #0]
 80097e8:	6852      	ldreq	r2, [r2, #4]
 80097ea:	1809      	addeq	r1, r1, r0
 80097ec:	6021      	streq	r1, [r4, #0]
 80097ee:	6062      	str	r2, [r4, #4]
 80097f0:	605c      	str	r4, [r3, #4]
 80097f2:	e7c9      	b.n	8009788 <_free_r+0x24>
 80097f4:	bd38      	pop	{r3, r4, r5, pc}
 80097f6:	bf00      	nop
 80097f8:	2000099c 	.word	0x2000099c

080097fc <_malloc_r>:
 80097fc:	b570      	push	{r4, r5, r6, lr}
 80097fe:	1ccd      	adds	r5, r1, #3
 8009800:	f025 0503 	bic.w	r5, r5, #3
 8009804:	3508      	adds	r5, #8
 8009806:	2d0c      	cmp	r5, #12
 8009808:	bf38      	it	cc
 800980a:	250c      	movcc	r5, #12
 800980c:	2d00      	cmp	r5, #0
 800980e:	4606      	mov	r6, r0
 8009810:	db01      	blt.n	8009816 <_malloc_r+0x1a>
 8009812:	42a9      	cmp	r1, r5
 8009814:	d903      	bls.n	800981e <_malloc_r+0x22>
 8009816:	230c      	movs	r3, #12
 8009818:	6033      	str	r3, [r6, #0]
 800981a:	2000      	movs	r0, #0
 800981c:	bd70      	pop	{r4, r5, r6, pc}
 800981e:	f000 f9b4 	bl	8009b8a <__malloc_lock>
 8009822:	4a21      	ldr	r2, [pc, #132]	; (80098a8 <_malloc_r+0xac>)
 8009824:	6814      	ldr	r4, [r2, #0]
 8009826:	4621      	mov	r1, r4
 8009828:	b991      	cbnz	r1, 8009850 <_malloc_r+0x54>
 800982a:	4c20      	ldr	r4, [pc, #128]	; (80098ac <_malloc_r+0xb0>)
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	b91b      	cbnz	r3, 8009838 <_malloc_r+0x3c>
 8009830:	4630      	mov	r0, r6
 8009832:	f000 f83d 	bl	80098b0 <_sbrk_r>
 8009836:	6020      	str	r0, [r4, #0]
 8009838:	4629      	mov	r1, r5
 800983a:	4630      	mov	r0, r6
 800983c:	f000 f838 	bl	80098b0 <_sbrk_r>
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	d124      	bne.n	800988e <_malloc_r+0x92>
 8009844:	230c      	movs	r3, #12
 8009846:	4630      	mov	r0, r6
 8009848:	6033      	str	r3, [r6, #0]
 800984a:	f000 f99f 	bl	8009b8c <__malloc_unlock>
 800984e:	e7e4      	b.n	800981a <_malloc_r+0x1e>
 8009850:	680b      	ldr	r3, [r1, #0]
 8009852:	1b5b      	subs	r3, r3, r5
 8009854:	d418      	bmi.n	8009888 <_malloc_r+0x8c>
 8009856:	2b0b      	cmp	r3, #11
 8009858:	d90f      	bls.n	800987a <_malloc_r+0x7e>
 800985a:	600b      	str	r3, [r1, #0]
 800985c:	18cc      	adds	r4, r1, r3
 800985e:	50cd      	str	r5, [r1, r3]
 8009860:	4630      	mov	r0, r6
 8009862:	f000 f993 	bl	8009b8c <__malloc_unlock>
 8009866:	f104 000b 	add.w	r0, r4, #11
 800986a:	1d23      	adds	r3, r4, #4
 800986c:	f020 0007 	bic.w	r0, r0, #7
 8009870:	1ac3      	subs	r3, r0, r3
 8009872:	d0d3      	beq.n	800981c <_malloc_r+0x20>
 8009874:	425a      	negs	r2, r3
 8009876:	50e2      	str	r2, [r4, r3]
 8009878:	e7d0      	b.n	800981c <_malloc_r+0x20>
 800987a:	684b      	ldr	r3, [r1, #4]
 800987c:	428c      	cmp	r4, r1
 800987e:	bf16      	itet	ne
 8009880:	6063      	strne	r3, [r4, #4]
 8009882:	6013      	streq	r3, [r2, #0]
 8009884:	460c      	movne	r4, r1
 8009886:	e7eb      	b.n	8009860 <_malloc_r+0x64>
 8009888:	460c      	mov	r4, r1
 800988a:	6849      	ldr	r1, [r1, #4]
 800988c:	e7cc      	b.n	8009828 <_malloc_r+0x2c>
 800988e:	1cc4      	adds	r4, r0, #3
 8009890:	f024 0403 	bic.w	r4, r4, #3
 8009894:	42a0      	cmp	r0, r4
 8009896:	d005      	beq.n	80098a4 <_malloc_r+0xa8>
 8009898:	1a21      	subs	r1, r4, r0
 800989a:	4630      	mov	r0, r6
 800989c:	f000 f808 	bl	80098b0 <_sbrk_r>
 80098a0:	3001      	adds	r0, #1
 80098a2:	d0cf      	beq.n	8009844 <_malloc_r+0x48>
 80098a4:	6025      	str	r5, [r4, #0]
 80098a6:	e7db      	b.n	8009860 <_malloc_r+0x64>
 80098a8:	2000099c 	.word	0x2000099c
 80098ac:	200009a0 	.word	0x200009a0

080098b0 <_sbrk_r>:
 80098b0:	b538      	push	{r3, r4, r5, lr}
 80098b2:	2300      	movs	r3, #0
 80098b4:	4c05      	ldr	r4, [pc, #20]	; (80098cc <_sbrk_r+0x1c>)
 80098b6:	4605      	mov	r5, r0
 80098b8:	4608      	mov	r0, r1
 80098ba:	6023      	str	r3, [r4, #0]
 80098bc:	f7fe fb5c 	bl	8007f78 <_sbrk>
 80098c0:	1c43      	adds	r3, r0, #1
 80098c2:	d102      	bne.n	80098ca <_sbrk_r+0x1a>
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	b103      	cbz	r3, 80098ca <_sbrk_r+0x1a>
 80098c8:	602b      	str	r3, [r5, #0]
 80098ca:	bd38      	pop	{r3, r4, r5, pc}
 80098cc:	200019a8 	.word	0x200019a8

080098d0 <strncmp>:
 80098d0:	b510      	push	{r4, lr}
 80098d2:	b16a      	cbz	r2, 80098f0 <strncmp+0x20>
 80098d4:	3901      	subs	r1, #1
 80098d6:	1884      	adds	r4, r0, r2
 80098d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80098dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d103      	bne.n	80098ec <strncmp+0x1c>
 80098e4:	42a0      	cmp	r0, r4
 80098e6:	d001      	beq.n	80098ec <strncmp+0x1c>
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1f5      	bne.n	80098d8 <strncmp+0x8>
 80098ec:	1a98      	subs	r0, r3, r2
 80098ee:	bd10      	pop	{r4, pc}
 80098f0:	4610      	mov	r0, r2
 80098f2:	e7fc      	b.n	80098ee <strncmp+0x1e>

080098f4 <strncpy>:
 80098f4:	b570      	push	{r4, r5, r6, lr}
 80098f6:	4604      	mov	r4, r0
 80098f8:	3901      	subs	r1, #1
 80098fa:	b902      	cbnz	r2, 80098fe <strncpy+0xa>
 80098fc:	bd70      	pop	{r4, r5, r6, pc}
 80098fe:	4623      	mov	r3, r4
 8009900:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009904:	1e56      	subs	r6, r2, #1
 8009906:	f803 5b01 	strb.w	r5, [r3], #1
 800990a:	b92d      	cbnz	r5, 8009918 <strncpy+0x24>
 800990c:	4414      	add	r4, r2
 800990e:	42a3      	cmp	r3, r4
 8009910:	d0f4      	beq.n	80098fc <strncpy+0x8>
 8009912:	f803 5b01 	strb.w	r5, [r3], #1
 8009916:	e7fa      	b.n	800990e <strncpy+0x1a>
 8009918:	461c      	mov	r4, r3
 800991a:	4632      	mov	r2, r6
 800991c:	e7ed      	b.n	80098fa <strncpy+0x6>
	...

08009920 <strtok>:
 8009920:	4b13      	ldr	r3, [pc, #76]	; (8009970 <strtok+0x50>)
 8009922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009926:	681d      	ldr	r5, [r3, #0]
 8009928:	4606      	mov	r6, r0
 800992a:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800992c:	460f      	mov	r7, r1
 800992e:	b9b4      	cbnz	r4, 800995e <strtok+0x3e>
 8009930:	2050      	movs	r0, #80	; 0x50
 8009932:	f7ff fee5 	bl	8009700 <malloc>
 8009936:	65a8      	str	r0, [r5, #88]	; 0x58
 8009938:	e9c0 4400 	strd	r4, r4, [r0]
 800993c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009940:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009944:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009948:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800994c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009950:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009954:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009958:	6184      	str	r4, [r0, #24]
 800995a:	7704      	strb	r4, [r0, #28]
 800995c:	6244      	str	r4, [r0, #36]	; 0x24
 800995e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8009960:	4639      	mov	r1, r7
 8009962:	4630      	mov	r0, r6
 8009964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009968:	2301      	movs	r3, #1
 800996a:	f000 b803 	b.w	8009974 <__strtok_r>
 800996e:	bf00      	nop
 8009970:	20000210 	.word	0x20000210

08009974 <__strtok_r>:
 8009974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009976:	b918      	cbnz	r0, 8009980 <__strtok_r+0xc>
 8009978:	6810      	ldr	r0, [r2, #0]
 800997a:	b908      	cbnz	r0, 8009980 <__strtok_r+0xc>
 800997c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800997e:	4620      	mov	r0, r4
 8009980:	4604      	mov	r4, r0
 8009982:	460f      	mov	r7, r1
 8009984:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009988:	f817 6b01 	ldrb.w	r6, [r7], #1
 800998c:	b91e      	cbnz	r6, 8009996 <__strtok_r+0x22>
 800998e:	b96d      	cbnz	r5, 80099ac <__strtok_r+0x38>
 8009990:	6015      	str	r5, [r2, #0]
 8009992:	4628      	mov	r0, r5
 8009994:	e7f2      	b.n	800997c <__strtok_r+0x8>
 8009996:	42b5      	cmp	r5, r6
 8009998:	d1f6      	bne.n	8009988 <__strtok_r+0x14>
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1ef      	bne.n	800997e <__strtok_r+0xa>
 800999e:	6014      	str	r4, [r2, #0]
 80099a0:	7003      	strb	r3, [r0, #0]
 80099a2:	e7eb      	b.n	800997c <__strtok_r+0x8>
 80099a4:	462b      	mov	r3, r5
 80099a6:	e00d      	b.n	80099c4 <__strtok_r+0x50>
 80099a8:	b926      	cbnz	r6, 80099b4 <__strtok_r+0x40>
 80099aa:	461c      	mov	r4, r3
 80099ac:	4623      	mov	r3, r4
 80099ae:	460f      	mov	r7, r1
 80099b0:	f813 5b01 	ldrb.w	r5, [r3], #1
 80099b4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80099b8:	42b5      	cmp	r5, r6
 80099ba:	d1f5      	bne.n	80099a8 <__strtok_r+0x34>
 80099bc:	2d00      	cmp	r5, #0
 80099be:	d0f1      	beq.n	80099a4 <__strtok_r+0x30>
 80099c0:	2100      	movs	r1, #0
 80099c2:	7021      	strb	r1, [r4, #0]
 80099c4:	6013      	str	r3, [r2, #0]
 80099c6:	e7d9      	b.n	800997c <__strtok_r+0x8>

080099c8 <_strtol_l.isra.0>:
 80099c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099cc:	4680      	mov	r8, r0
 80099ce:	4689      	mov	r9, r1
 80099d0:	4692      	mov	sl, r2
 80099d2:	461e      	mov	r6, r3
 80099d4:	460f      	mov	r7, r1
 80099d6:	463d      	mov	r5, r7
 80099d8:	9808      	ldr	r0, [sp, #32]
 80099da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099de:	f000 f8bf 	bl	8009b60 <__locale_ctype_ptr_l>
 80099e2:	4420      	add	r0, r4
 80099e4:	7843      	ldrb	r3, [r0, #1]
 80099e6:	f013 0308 	ands.w	r3, r3, #8
 80099ea:	d132      	bne.n	8009a52 <_strtol_l.isra.0+0x8a>
 80099ec:	2c2d      	cmp	r4, #45	; 0x2d
 80099ee:	d132      	bne.n	8009a56 <_strtol_l.isra.0+0x8e>
 80099f0:	2201      	movs	r2, #1
 80099f2:	787c      	ldrb	r4, [r7, #1]
 80099f4:	1cbd      	adds	r5, r7, #2
 80099f6:	2e00      	cmp	r6, #0
 80099f8:	d05d      	beq.n	8009ab6 <_strtol_l.isra.0+0xee>
 80099fa:	2e10      	cmp	r6, #16
 80099fc:	d109      	bne.n	8009a12 <_strtol_l.isra.0+0x4a>
 80099fe:	2c30      	cmp	r4, #48	; 0x30
 8009a00:	d107      	bne.n	8009a12 <_strtol_l.isra.0+0x4a>
 8009a02:	782b      	ldrb	r3, [r5, #0]
 8009a04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a08:	2b58      	cmp	r3, #88	; 0x58
 8009a0a:	d14f      	bne.n	8009aac <_strtol_l.isra.0+0xe4>
 8009a0c:	2610      	movs	r6, #16
 8009a0e:	786c      	ldrb	r4, [r5, #1]
 8009a10:	3502      	adds	r5, #2
 8009a12:	2a00      	cmp	r2, #0
 8009a14:	bf14      	ite	ne
 8009a16:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009a1a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009a1e:	2700      	movs	r7, #0
 8009a20:	fbb1 fcf6 	udiv	ip, r1, r6
 8009a24:	4638      	mov	r0, r7
 8009a26:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009a2a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009a2e:	2b09      	cmp	r3, #9
 8009a30:	d817      	bhi.n	8009a62 <_strtol_l.isra.0+0x9a>
 8009a32:	461c      	mov	r4, r3
 8009a34:	42a6      	cmp	r6, r4
 8009a36:	dd23      	ble.n	8009a80 <_strtol_l.isra.0+0xb8>
 8009a38:	1c7b      	adds	r3, r7, #1
 8009a3a:	d007      	beq.n	8009a4c <_strtol_l.isra.0+0x84>
 8009a3c:	4584      	cmp	ip, r0
 8009a3e:	d31c      	bcc.n	8009a7a <_strtol_l.isra.0+0xb2>
 8009a40:	d101      	bne.n	8009a46 <_strtol_l.isra.0+0x7e>
 8009a42:	45a6      	cmp	lr, r4
 8009a44:	db19      	blt.n	8009a7a <_strtol_l.isra.0+0xb2>
 8009a46:	2701      	movs	r7, #1
 8009a48:	fb00 4006 	mla	r0, r0, r6, r4
 8009a4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a50:	e7eb      	b.n	8009a2a <_strtol_l.isra.0+0x62>
 8009a52:	462f      	mov	r7, r5
 8009a54:	e7bf      	b.n	80099d6 <_strtol_l.isra.0+0xe>
 8009a56:	2c2b      	cmp	r4, #43	; 0x2b
 8009a58:	bf04      	itt	eq
 8009a5a:	1cbd      	addeq	r5, r7, #2
 8009a5c:	787c      	ldrbeq	r4, [r7, #1]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	e7c9      	b.n	80099f6 <_strtol_l.isra.0+0x2e>
 8009a62:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009a66:	2b19      	cmp	r3, #25
 8009a68:	d801      	bhi.n	8009a6e <_strtol_l.isra.0+0xa6>
 8009a6a:	3c37      	subs	r4, #55	; 0x37
 8009a6c:	e7e2      	b.n	8009a34 <_strtol_l.isra.0+0x6c>
 8009a6e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009a72:	2b19      	cmp	r3, #25
 8009a74:	d804      	bhi.n	8009a80 <_strtol_l.isra.0+0xb8>
 8009a76:	3c57      	subs	r4, #87	; 0x57
 8009a78:	e7dc      	b.n	8009a34 <_strtol_l.isra.0+0x6c>
 8009a7a:	f04f 37ff 	mov.w	r7, #4294967295
 8009a7e:	e7e5      	b.n	8009a4c <_strtol_l.isra.0+0x84>
 8009a80:	1c7b      	adds	r3, r7, #1
 8009a82:	d108      	bne.n	8009a96 <_strtol_l.isra.0+0xce>
 8009a84:	2322      	movs	r3, #34	; 0x22
 8009a86:	4608      	mov	r0, r1
 8009a88:	f8c8 3000 	str.w	r3, [r8]
 8009a8c:	f1ba 0f00 	cmp.w	sl, #0
 8009a90:	d107      	bne.n	8009aa2 <_strtol_l.isra.0+0xda>
 8009a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a96:	b102      	cbz	r2, 8009a9a <_strtol_l.isra.0+0xd2>
 8009a98:	4240      	negs	r0, r0
 8009a9a:	f1ba 0f00 	cmp.w	sl, #0
 8009a9e:	d0f8      	beq.n	8009a92 <_strtol_l.isra.0+0xca>
 8009aa0:	b10f      	cbz	r7, 8009aa6 <_strtol_l.isra.0+0xde>
 8009aa2:	f105 39ff 	add.w	r9, r5, #4294967295
 8009aa6:	f8ca 9000 	str.w	r9, [sl]
 8009aaa:	e7f2      	b.n	8009a92 <_strtol_l.isra.0+0xca>
 8009aac:	2430      	movs	r4, #48	; 0x30
 8009aae:	2e00      	cmp	r6, #0
 8009ab0:	d1af      	bne.n	8009a12 <_strtol_l.isra.0+0x4a>
 8009ab2:	2608      	movs	r6, #8
 8009ab4:	e7ad      	b.n	8009a12 <_strtol_l.isra.0+0x4a>
 8009ab6:	2c30      	cmp	r4, #48	; 0x30
 8009ab8:	d0a3      	beq.n	8009a02 <_strtol_l.isra.0+0x3a>
 8009aba:	260a      	movs	r6, #10
 8009abc:	e7a9      	b.n	8009a12 <_strtol_l.isra.0+0x4a>
	...

08009ac0 <strtol>:
 8009ac0:	4b08      	ldr	r3, [pc, #32]	; (8009ae4 <strtol+0x24>)
 8009ac2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ac4:	681c      	ldr	r4, [r3, #0]
 8009ac6:	4d08      	ldr	r5, [pc, #32]	; (8009ae8 <strtol+0x28>)
 8009ac8:	6a23      	ldr	r3, [r4, #32]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	bf08      	it	eq
 8009ace:	462b      	moveq	r3, r5
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	460a      	mov	r2, r1
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f7ff ff75 	bl	80099c8 <_strtol_l.isra.0>
 8009ade:	b003      	add	sp, #12
 8009ae0:	bd30      	pop	{r4, r5, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20000210 	.word	0x20000210
 8009ae8:	20000274 	.word	0x20000274

08009aec <_vsniprintf_r>:
 8009aec:	b530      	push	{r4, r5, lr}
 8009aee:	1e14      	subs	r4, r2, #0
 8009af0:	4605      	mov	r5, r0
 8009af2:	b09b      	sub	sp, #108	; 0x6c
 8009af4:	4618      	mov	r0, r3
 8009af6:	da05      	bge.n	8009b04 <_vsniprintf_r+0x18>
 8009af8:	238b      	movs	r3, #139	; 0x8b
 8009afa:	f04f 30ff 	mov.w	r0, #4294967295
 8009afe:	602b      	str	r3, [r5, #0]
 8009b00:	b01b      	add	sp, #108	; 0x6c
 8009b02:	bd30      	pop	{r4, r5, pc}
 8009b04:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009b08:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009b0c:	bf0c      	ite	eq
 8009b0e:	4623      	moveq	r3, r4
 8009b10:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009b14:	9302      	str	r3, [sp, #8]
 8009b16:	9305      	str	r3, [sp, #20]
 8009b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b1c:	9100      	str	r1, [sp, #0]
 8009b1e:	9104      	str	r1, [sp, #16]
 8009b20:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009b24:	4602      	mov	r2, r0
 8009b26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009b28:	4669      	mov	r1, sp
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	f000 f88a 	bl	8009c44 <_svfiprintf_r>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	bfbc      	itt	lt
 8009b34:	238b      	movlt	r3, #139	; 0x8b
 8009b36:	602b      	strlt	r3, [r5, #0]
 8009b38:	2c00      	cmp	r4, #0
 8009b3a:	d0e1      	beq.n	8009b00 <_vsniprintf_r+0x14>
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	9b00      	ldr	r3, [sp, #0]
 8009b40:	701a      	strb	r2, [r3, #0]
 8009b42:	e7dd      	b.n	8009b00 <_vsniprintf_r+0x14>

08009b44 <vsniprintf>:
 8009b44:	b507      	push	{r0, r1, r2, lr}
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	460a      	mov	r2, r1
 8009b4c:	4601      	mov	r1, r0
 8009b4e:	4803      	ldr	r0, [pc, #12]	; (8009b5c <vsniprintf+0x18>)
 8009b50:	6800      	ldr	r0, [r0, #0]
 8009b52:	f7ff ffcb 	bl	8009aec <_vsniprintf_r>
 8009b56:	b003      	add	sp, #12
 8009b58:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b5c:	20000210 	.word	0x20000210

08009b60 <__locale_ctype_ptr_l>:
 8009b60:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009b64:	4770      	bx	lr

08009b66 <__ascii_mbtowc>:
 8009b66:	b082      	sub	sp, #8
 8009b68:	b901      	cbnz	r1, 8009b6c <__ascii_mbtowc+0x6>
 8009b6a:	a901      	add	r1, sp, #4
 8009b6c:	b142      	cbz	r2, 8009b80 <__ascii_mbtowc+0x1a>
 8009b6e:	b14b      	cbz	r3, 8009b84 <__ascii_mbtowc+0x1e>
 8009b70:	7813      	ldrb	r3, [r2, #0]
 8009b72:	600b      	str	r3, [r1, #0]
 8009b74:	7812      	ldrb	r2, [r2, #0]
 8009b76:	1c10      	adds	r0, r2, #0
 8009b78:	bf18      	it	ne
 8009b7a:	2001      	movne	r0, #1
 8009b7c:	b002      	add	sp, #8
 8009b7e:	4770      	bx	lr
 8009b80:	4610      	mov	r0, r2
 8009b82:	e7fb      	b.n	8009b7c <__ascii_mbtowc+0x16>
 8009b84:	f06f 0001 	mvn.w	r0, #1
 8009b88:	e7f8      	b.n	8009b7c <__ascii_mbtowc+0x16>

08009b8a <__malloc_lock>:
 8009b8a:	4770      	bx	lr

08009b8c <__malloc_unlock>:
 8009b8c:	4770      	bx	lr

08009b8e <__ssputs_r>:
 8009b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b92:	688e      	ldr	r6, [r1, #8]
 8009b94:	4682      	mov	sl, r0
 8009b96:	429e      	cmp	r6, r3
 8009b98:	460c      	mov	r4, r1
 8009b9a:	4690      	mov	r8, r2
 8009b9c:	4699      	mov	r9, r3
 8009b9e:	d837      	bhi.n	8009c10 <__ssputs_r+0x82>
 8009ba0:	898a      	ldrh	r2, [r1, #12]
 8009ba2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ba6:	d031      	beq.n	8009c0c <__ssputs_r+0x7e>
 8009ba8:	2302      	movs	r3, #2
 8009baa:	6825      	ldr	r5, [r4, #0]
 8009bac:	6909      	ldr	r1, [r1, #16]
 8009bae:	1a6f      	subs	r7, r5, r1
 8009bb0:	6965      	ldr	r5, [r4, #20]
 8009bb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bb6:	fb95 f5f3 	sdiv	r5, r5, r3
 8009bba:	f109 0301 	add.w	r3, r9, #1
 8009bbe:	443b      	add	r3, r7
 8009bc0:	429d      	cmp	r5, r3
 8009bc2:	bf38      	it	cc
 8009bc4:	461d      	movcc	r5, r3
 8009bc6:	0553      	lsls	r3, r2, #21
 8009bc8:	d530      	bpl.n	8009c2c <__ssputs_r+0x9e>
 8009bca:	4629      	mov	r1, r5
 8009bcc:	f7ff fe16 	bl	80097fc <_malloc_r>
 8009bd0:	4606      	mov	r6, r0
 8009bd2:	b950      	cbnz	r0, 8009bea <__ssputs_r+0x5c>
 8009bd4:	230c      	movs	r3, #12
 8009bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bda:	f8ca 3000 	str.w	r3, [sl]
 8009bde:	89a3      	ldrh	r3, [r4, #12]
 8009be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009be4:	81a3      	strh	r3, [r4, #12]
 8009be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bea:	463a      	mov	r2, r7
 8009bec:	6921      	ldr	r1, [r4, #16]
 8009bee:	f7ff fd97 	bl	8009720 <memcpy>
 8009bf2:	89a3      	ldrh	r3, [r4, #12]
 8009bf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bfc:	81a3      	strh	r3, [r4, #12]
 8009bfe:	6126      	str	r6, [r4, #16]
 8009c00:	443e      	add	r6, r7
 8009c02:	6026      	str	r6, [r4, #0]
 8009c04:	464e      	mov	r6, r9
 8009c06:	6165      	str	r5, [r4, #20]
 8009c08:	1bed      	subs	r5, r5, r7
 8009c0a:	60a5      	str	r5, [r4, #8]
 8009c0c:	454e      	cmp	r6, r9
 8009c0e:	d900      	bls.n	8009c12 <__ssputs_r+0x84>
 8009c10:	464e      	mov	r6, r9
 8009c12:	4632      	mov	r2, r6
 8009c14:	4641      	mov	r1, r8
 8009c16:	6820      	ldr	r0, [r4, #0]
 8009c18:	f000 faaf 	bl	800a17a <memmove>
 8009c1c:	68a3      	ldr	r3, [r4, #8]
 8009c1e:	2000      	movs	r0, #0
 8009c20:	1b9b      	subs	r3, r3, r6
 8009c22:	60a3      	str	r3, [r4, #8]
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	441e      	add	r6, r3
 8009c28:	6026      	str	r6, [r4, #0]
 8009c2a:	e7dc      	b.n	8009be6 <__ssputs_r+0x58>
 8009c2c:	462a      	mov	r2, r5
 8009c2e:	f000 fabd 	bl	800a1ac <_realloc_r>
 8009c32:	4606      	mov	r6, r0
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d1e2      	bne.n	8009bfe <__ssputs_r+0x70>
 8009c38:	6921      	ldr	r1, [r4, #16]
 8009c3a:	4650      	mov	r0, sl
 8009c3c:	f7ff fd92 	bl	8009764 <_free_r>
 8009c40:	e7c8      	b.n	8009bd4 <__ssputs_r+0x46>
	...

08009c44 <_svfiprintf_r>:
 8009c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c48:	461d      	mov	r5, r3
 8009c4a:	898b      	ldrh	r3, [r1, #12]
 8009c4c:	b09d      	sub	sp, #116	; 0x74
 8009c4e:	061f      	lsls	r7, r3, #24
 8009c50:	4680      	mov	r8, r0
 8009c52:	460c      	mov	r4, r1
 8009c54:	4616      	mov	r6, r2
 8009c56:	d50f      	bpl.n	8009c78 <_svfiprintf_r+0x34>
 8009c58:	690b      	ldr	r3, [r1, #16]
 8009c5a:	b96b      	cbnz	r3, 8009c78 <_svfiprintf_r+0x34>
 8009c5c:	2140      	movs	r1, #64	; 0x40
 8009c5e:	f7ff fdcd 	bl	80097fc <_malloc_r>
 8009c62:	6020      	str	r0, [r4, #0]
 8009c64:	6120      	str	r0, [r4, #16]
 8009c66:	b928      	cbnz	r0, 8009c74 <_svfiprintf_r+0x30>
 8009c68:	230c      	movs	r3, #12
 8009c6a:	f8c8 3000 	str.w	r3, [r8]
 8009c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c72:	e0c8      	b.n	8009e06 <_svfiprintf_r+0x1c2>
 8009c74:	2340      	movs	r3, #64	; 0x40
 8009c76:	6163      	str	r3, [r4, #20]
 8009c78:	2300      	movs	r3, #0
 8009c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7c:	2320      	movs	r3, #32
 8009c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c82:	2330      	movs	r3, #48	; 0x30
 8009c84:	f04f 0b01 	mov.w	fp, #1
 8009c88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c8c:	9503      	str	r5, [sp, #12]
 8009c8e:	4637      	mov	r7, r6
 8009c90:	463d      	mov	r5, r7
 8009c92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009c96:	b10b      	cbz	r3, 8009c9c <_svfiprintf_r+0x58>
 8009c98:	2b25      	cmp	r3, #37	; 0x25
 8009c9a:	d13e      	bne.n	8009d1a <_svfiprintf_r+0xd6>
 8009c9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009ca0:	d00b      	beq.n	8009cba <_svfiprintf_r+0x76>
 8009ca2:	4653      	mov	r3, sl
 8009ca4:	4632      	mov	r2, r6
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	4640      	mov	r0, r8
 8009caa:	f7ff ff70 	bl	8009b8e <__ssputs_r>
 8009cae:	3001      	adds	r0, #1
 8009cb0:	f000 80a4 	beq.w	8009dfc <_svfiprintf_r+0x1b8>
 8009cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb6:	4453      	add	r3, sl
 8009cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cba:	783b      	ldrb	r3, [r7, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 809d 	beq.w	8009dfc <_svfiprintf_r+0x1b8>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ccc:	9304      	str	r3, [sp, #16]
 8009cce:	9307      	str	r3, [sp, #28]
 8009cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8009cd6:	462f      	mov	r7, r5
 8009cd8:	2205      	movs	r2, #5
 8009cda:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009cde:	4850      	ldr	r0, [pc, #320]	; (8009e20 <_svfiprintf_r+0x1dc>)
 8009ce0:	f000 fa3d 	bl	800a15e <memchr>
 8009ce4:	9b04      	ldr	r3, [sp, #16]
 8009ce6:	b9d0      	cbnz	r0, 8009d1e <_svfiprintf_r+0xda>
 8009ce8:	06d9      	lsls	r1, r3, #27
 8009cea:	bf44      	itt	mi
 8009cec:	2220      	movmi	r2, #32
 8009cee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009cf2:	071a      	lsls	r2, r3, #28
 8009cf4:	bf44      	itt	mi
 8009cf6:	222b      	movmi	r2, #43	; 0x2b
 8009cf8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009cfc:	782a      	ldrb	r2, [r5, #0]
 8009cfe:	2a2a      	cmp	r2, #42	; 0x2a
 8009d00:	d015      	beq.n	8009d2e <_svfiprintf_r+0xea>
 8009d02:	462f      	mov	r7, r5
 8009d04:	2000      	movs	r0, #0
 8009d06:	250a      	movs	r5, #10
 8009d08:	9a07      	ldr	r2, [sp, #28]
 8009d0a:	4639      	mov	r1, r7
 8009d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d10:	3b30      	subs	r3, #48	; 0x30
 8009d12:	2b09      	cmp	r3, #9
 8009d14:	d94d      	bls.n	8009db2 <_svfiprintf_r+0x16e>
 8009d16:	b1b8      	cbz	r0, 8009d48 <_svfiprintf_r+0x104>
 8009d18:	e00f      	b.n	8009d3a <_svfiprintf_r+0xf6>
 8009d1a:	462f      	mov	r7, r5
 8009d1c:	e7b8      	b.n	8009c90 <_svfiprintf_r+0x4c>
 8009d1e:	4a40      	ldr	r2, [pc, #256]	; (8009e20 <_svfiprintf_r+0x1dc>)
 8009d20:	463d      	mov	r5, r7
 8009d22:	1a80      	subs	r0, r0, r2
 8009d24:	fa0b f000 	lsl.w	r0, fp, r0
 8009d28:	4318      	orrs	r0, r3
 8009d2a:	9004      	str	r0, [sp, #16]
 8009d2c:	e7d3      	b.n	8009cd6 <_svfiprintf_r+0x92>
 8009d2e:	9a03      	ldr	r2, [sp, #12]
 8009d30:	1d11      	adds	r1, r2, #4
 8009d32:	6812      	ldr	r2, [r2, #0]
 8009d34:	9103      	str	r1, [sp, #12]
 8009d36:	2a00      	cmp	r2, #0
 8009d38:	db01      	blt.n	8009d3e <_svfiprintf_r+0xfa>
 8009d3a:	9207      	str	r2, [sp, #28]
 8009d3c:	e004      	b.n	8009d48 <_svfiprintf_r+0x104>
 8009d3e:	4252      	negs	r2, r2
 8009d40:	f043 0302 	orr.w	r3, r3, #2
 8009d44:	9207      	str	r2, [sp, #28]
 8009d46:	9304      	str	r3, [sp, #16]
 8009d48:	783b      	ldrb	r3, [r7, #0]
 8009d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d4c:	d10c      	bne.n	8009d68 <_svfiprintf_r+0x124>
 8009d4e:	787b      	ldrb	r3, [r7, #1]
 8009d50:	2b2a      	cmp	r3, #42	; 0x2a
 8009d52:	d133      	bne.n	8009dbc <_svfiprintf_r+0x178>
 8009d54:	9b03      	ldr	r3, [sp, #12]
 8009d56:	3702      	adds	r7, #2
 8009d58:	1d1a      	adds	r2, r3, #4
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	9203      	str	r2, [sp, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	bfb8      	it	lt
 8009d62:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d66:	9305      	str	r3, [sp, #20]
 8009d68:	4d2e      	ldr	r5, [pc, #184]	; (8009e24 <_svfiprintf_r+0x1e0>)
 8009d6a:	2203      	movs	r2, #3
 8009d6c:	7839      	ldrb	r1, [r7, #0]
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f000 f9f5 	bl	800a15e <memchr>
 8009d74:	b138      	cbz	r0, 8009d86 <_svfiprintf_r+0x142>
 8009d76:	2340      	movs	r3, #64	; 0x40
 8009d78:	1b40      	subs	r0, r0, r5
 8009d7a:	fa03 f000 	lsl.w	r0, r3, r0
 8009d7e:	9b04      	ldr	r3, [sp, #16]
 8009d80:	3701      	adds	r7, #1
 8009d82:	4303      	orrs	r3, r0
 8009d84:	9304      	str	r3, [sp, #16]
 8009d86:	7839      	ldrb	r1, [r7, #0]
 8009d88:	2206      	movs	r2, #6
 8009d8a:	4827      	ldr	r0, [pc, #156]	; (8009e28 <_svfiprintf_r+0x1e4>)
 8009d8c:	1c7e      	adds	r6, r7, #1
 8009d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d92:	f000 f9e4 	bl	800a15e <memchr>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d038      	beq.n	8009e0c <_svfiprintf_r+0x1c8>
 8009d9a:	4b24      	ldr	r3, [pc, #144]	; (8009e2c <_svfiprintf_r+0x1e8>)
 8009d9c:	bb13      	cbnz	r3, 8009de4 <_svfiprintf_r+0x1a0>
 8009d9e:	9b03      	ldr	r3, [sp, #12]
 8009da0:	3307      	adds	r3, #7
 8009da2:	f023 0307 	bic.w	r3, r3, #7
 8009da6:	3308      	adds	r3, #8
 8009da8:	9303      	str	r3, [sp, #12]
 8009daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dac:	444b      	add	r3, r9
 8009dae:	9309      	str	r3, [sp, #36]	; 0x24
 8009db0:	e76d      	b.n	8009c8e <_svfiprintf_r+0x4a>
 8009db2:	fb05 3202 	mla	r2, r5, r2, r3
 8009db6:	2001      	movs	r0, #1
 8009db8:	460f      	mov	r7, r1
 8009dba:	e7a6      	b.n	8009d0a <_svfiprintf_r+0xc6>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	250a      	movs	r5, #10
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	3701      	adds	r7, #1
 8009dc4:	9305      	str	r3, [sp, #20]
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dcc:	3a30      	subs	r2, #48	; 0x30
 8009dce:	2a09      	cmp	r2, #9
 8009dd0:	d903      	bls.n	8009dda <_svfiprintf_r+0x196>
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d0c8      	beq.n	8009d68 <_svfiprintf_r+0x124>
 8009dd6:	9105      	str	r1, [sp, #20]
 8009dd8:	e7c6      	b.n	8009d68 <_svfiprintf_r+0x124>
 8009dda:	fb05 2101 	mla	r1, r5, r1, r2
 8009dde:	2301      	movs	r3, #1
 8009de0:	4607      	mov	r7, r0
 8009de2:	e7f0      	b.n	8009dc6 <_svfiprintf_r+0x182>
 8009de4:	ab03      	add	r3, sp, #12
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	4622      	mov	r2, r4
 8009dea:	4b11      	ldr	r3, [pc, #68]	; (8009e30 <_svfiprintf_r+0x1ec>)
 8009dec:	a904      	add	r1, sp, #16
 8009dee:	4640      	mov	r0, r8
 8009df0:	f3af 8000 	nop.w
 8009df4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009df8:	4681      	mov	r9, r0
 8009dfa:	d1d6      	bne.n	8009daa <_svfiprintf_r+0x166>
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	065b      	lsls	r3, r3, #25
 8009e00:	f53f af35 	bmi.w	8009c6e <_svfiprintf_r+0x2a>
 8009e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e06:	b01d      	add	sp, #116	; 0x74
 8009e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0c:	ab03      	add	r3, sp, #12
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	4622      	mov	r2, r4
 8009e12:	4b07      	ldr	r3, [pc, #28]	; (8009e30 <_svfiprintf_r+0x1ec>)
 8009e14:	a904      	add	r1, sp, #16
 8009e16:	4640      	mov	r0, r8
 8009e18:	f000 f882 	bl	8009f20 <_printf_i>
 8009e1c:	e7ea      	b.n	8009df4 <_svfiprintf_r+0x1b0>
 8009e1e:	bf00      	nop
 8009e20:	0800d75a 	.word	0x0800d75a
 8009e24:	0800d760 	.word	0x0800d760
 8009e28:	0800d764 	.word	0x0800d764
 8009e2c:	00000000 	.word	0x00000000
 8009e30:	08009b8f 	.word	0x08009b8f

08009e34 <_printf_common>:
 8009e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e38:	4691      	mov	r9, r2
 8009e3a:	461f      	mov	r7, r3
 8009e3c:	688a      	ldr	r2, [r1, #8]
 8009e3e:	690b      	ldr	r3, [r1, #16]
 8009e40:	4606      	mov	r6, r0
 8009e42:	4293      	cmp	r3, r2
 8009e44:	bfb8      	it	lt
 8009e46:	4613      	movlt	r3, r2
 8009e48:	f8c9 3000 	str.w	r3, [r9]
 8009e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e50:	460c      	mov	r4, r1
 8009e52:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e56:	b112      	cbz	r2, 8009e5e <_printf_common+0x2a>
 8009e58:	3301      	adds	r3, #1
 8009e5a:	f8c9 3000 	str.w	r3, [r9]
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	0699      	lsls	r1, r3, #26
 8009e62:	bf42      	ittt	mi
 8009e64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009e68:	3302      	addmi	r3, #2
 8009e6a:	f8c9 3000 	strmi.w	r3, [r9]
 8009e6e:	6825      	ldr	r5, [r4, #0]
 8009e70:	f015 0506 	ands.w	r5, r5, #6
 8009e74:	d107      	bne.n	8009e86 <_printf_common+0x52>
 8009e76:	f104 0a19 	add.w	sl, r4, #25
 8009e7a:	68e3      	ldr	r3, [r4, #12]
 8009e7c:	f8d9 2000 	ldr.w	r2, [r9]
 8009e80:	1a9b      	subs	r3, r3, r2
 8009e82:	42ab      	cmp	r3, r5
 8009e84:	dc29      	bgt.n	8009eda <_printf_common+0xa6>
 8009e86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009e8a:	6822      	ldr	r2, [r4, #0]
 8009e8c:	3300      	adds	r3, #0
 8009e8e:	bf18      	it	ne
 8009e90:	2301      	movne	r3, #1
 8009e92:	0692      	lsls	r2, r2, #26
 8009e94:	d42e      	bmi.n	8009ef4 <_printf_common+0xc0>
 8009e96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	47c0      	blx	r8
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	d021      	beq.n	8009ee8 <_printf_common+0xb4>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	68e5      	ldr	r5, [r4, #12]
 8009ea8:	f003 0306 	and.w	r3, r3, #6
 8009eac:	2b04      	cmp	r3, #4
 8009eae:	bf18      	it	ne
 8009eb0:	2500      	movne	r5, #0
 8009eb2:	f8d9 2000 	ldr.w	r2, [r9]
 8009eb6:	f04f 0900 	mov.w	r9, #0
 8009eba:	bf08      	it	eq
 8009ebc:	1aad      	subeq	r5, r5, r2
 8009ebe:	68a3      	ldr	r3, [r4, #8]
 8009ec0:	6922      	ldr	r2, [r4, #16]
 8009ec2:	bf08      	it	eq
 8009ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	bfc4      	itt	gt
 8009ecc:	1a9b      	subgt	r3, r3, r2
 8009ece:	18ed      	addgt	r5, r5, r3
 8009ed0:	341a      	adds	r4, #26
 8009ed2:	454d      	cmp	r5, r9
 8009ed4:	d11a      	bne.n	8009f0c <_printf_common+0xd8>
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	e008      	b.n	8009eec <_printf_common+0xb8>
 8009eda:	2301      	movs	r3, #1
 8009edc:	4652      	mov	r2, sl
 8009ede:	4639      	mov	r1, r7
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	47c0      	blx	r8
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d103      	bne.n	8009ef0 <_printf_common+0xbc>
 8009ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8009eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef0:	3501      	adds	r5, #1
 8009ef2:	e7c2      	b.n	8009e7a <_printf_common+0x46>
 8009ef4:	2030      	movs	r0, #48	; 0x30
 8009ef6:	18e1      	adds	r1, r4, r3
 8009ef8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009efc:	1c5a      	adds	r2, r3, #1
 8009efe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f02:	4422      	add	r2, r4
 8009f04:	3302      	adds	r3, #2
 8009f06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f0a:	e7c4      	b.n	8009e96 <_printf_common+0x62>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	4622      	mov	r2, r4
 8009f10:	4639      	mov	r1, r7
 8009f12:	4630      	mov	r0, r6
 8009f14:	47c0      	blx	r8
 8009f16:	3001      	adds	r0, #1
 8009f18:	d0e6      	beq.n	8009ee8 <_printf_common+0xb4>
 8009f1a:	f109 0901 	add.w	r9, r9, #1
 8009f1e:	e7d8      	b.n	8009ed2 <_printf_common+0x9e>

08009f20 <_printf_i>:
 8009f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009f28:	460c      	mov	r4, r1
 8009f2a:	7e09      	ldrb	r1, [r1, #24]
 8009f2c:	b085      	sub	sp, #20
 8009f2e:	296e      	cmp	r1, #110	; 0x6e
 8009f30:	4617      	mov	r7, r2
 8009f32:	4606      	mov	r6, r0
 8009f34:	4698      	mov	r8, r3
 8009f36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f38:	f000 80b3 	beq.w	800a0a2 <_printf_i+0x182>
 8009f3c:	d822      	bhi.n	8009f84 <_printf_i+0x64>
 8009f3e:	2963      	cmp	r1, #99	; 0x63
 8009f40:	d036      	beq.n	8009fb0 <_printf_i+0x90>
 8009f42:	d80a      	bhi.n	8009f5a <_printf_i+0x3a>
 8009f44:	2900      	cmp	r1, #0
 8009f46:	f000 80b9 	beq.w	800a0bc <_printf_i+0x19c>
 8009f4a:	2958      	cmp	r1, #88	; 0x58
 8009f4c:	f000 8083 	beq.w	800a056 <_printf_i+0x136>
 8009f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009f58:	e032      	b.n	8009fc0 <_printf_i+0xa0>
 8009f5a:	2964      	cmp	r1, #100	; 0x64
 8009f5c:	d001      	beq.n	8009f62 <_printf_i+0x42>
 8009f5e:	2969      	cmp	r1, #105	; 0x69
 8009f60:	d1f6      	bne.n	8009f50 <_printf_i+0x30>
 8009f62:	6820      	ldr	r0, [r4, #0]
 8009f64:	6813      	ldr	r3, [r2, #0]
 8009f66:	0605      	lsls	r5, r0, #24
 8009f68:	f103 0104 	add.w	r1, r3, #4
 8009f6c:	d52a      	bpl.n	8009fc4 <_printf_i+0xa4>
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6011      	str	r1, [r2, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	da03      	bge.n	8009f7e <_printf_i+0x5e>
 8009f76:	222d      	movs	r2, #45	; 0x2d
 8009f78:	425b      	negs	r3, r3
 8009f7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009f7e:	486f      	ldr	r0, [pc, #444]	; (800a13c <_printf_i+0x21c>)
 8009f80:	220a      	movs	r2, #10
 8009f82:	e039      	b.n	8009ff8 <_printf_i+0xd8>
 8009f84:	2973      	cmp	r1, #115	; 0x73
 8009f86:	f000 809d 	beq.w	800a0c4 <_printf_i+0x1a4>
 8009f8a:	d808      	bhi.n	8009f9e <_printf_i+0x7e>
 8009f8c:	296f      	cmp	r1, #111	; 0x6f
 8009f8e:	d020      	beq.n	8009fd2 <_printf_i+0xb2>
 8009f90:	2970      	cmp	r1, #112	; 0x70
 8009f92:	d1dd      	bne.n	8009f50 <_printf_i+0x30>
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	f043 0320 	orr.w	r3, r3, #32
 8009f9a:	6023      	str	r3, [r4, #0]
 8009f9c:	e003      	b.n	8009fa6 <_printf_i+0x86>
 8009f9e:	2975      	cmp	r1, #117	; 0x75
 8009fa0:	d017      	beq.n	8009fd2 <_printf_i+0xb2>
 8009fa2:	2978      	cmp	r1, #120	; 0x78
 8009fa4:	d1d4      	bne.n	8009f50 <_printf_i+0x30>
 8009fa6:	2378      	movs	r3, #120	; 0x78
 8009fa8:	4865      	ldr	r0, [pc, #404]	; (800a140 <_printf_i+0x220>)
 8009faa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fae:	e055      	b.n	800a05c <_printf_i+0x13c>
 8009fb0:	6813      	ldr	r3, [r2, #0]
 8009fb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fb6:	1d19      	adds	r1, r3, #4
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6011      	str	r1, [r2, #0]
 8009fbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e08c      	b.n	800a0de <_printf_i+0x1be>
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009fca:	6011      	str	r1, [r2, #0]
 8009fcc:	bf18      	it	ne
 8009fce:	b21b      	sxthne	r3, r3
 8009fd0:	e7cf      	b.n	8009f72 <_printf_i+0x52>
 8009fd2:	6813      	ldr	r3, [r2, #0]
 8009fd4:	6825      	ldr	r5, [r4, #0]
 8009fd6:	1d18      	adds	r0, r3, #4
 8009fd8:	6010      	str	r0, [r2, #0]
 8009fda:	0628      	lsls	r0, r5, #24
 8009fdc:	d501      	bpl.n	8009fe2 <_printf_i+0xc2>
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	e002      	b.n	8009fe8 <_printf_i+0xc8>
 8009fe2:	0668      	lsls	r0, r5, #25
 8009fe4:	d5fb      	bpl.n	8009fde <_printf_i+0xbe>
 8009fe6:	881b      	ldrh	r3, [r3, #0]
 8009fe8:	296f      	cmp	r1, #111	; 0x6f
 8009fea:	bf14      	ite	ne
 8009fec:	220a      	movne	r2, #10
 8009fee:	2208      	moveq	r2, #8
 8009ff0:	4852      	ldr	r0, [pc, #328]	; (800a13c <_printf_i+0x21c>)
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ff8:	6865      	ldr	r5, [r4, #4]
 8009ffa:	2d00      	cmp	r5, #0
 8009ffc:	60a5      	str	r5, [r4, #8]
 8009ffe:	f2c0 8095 	blt.w	800a12c <_printf_i+0x20c>
 800a002:	6821      	ldr	r1, [r4, #0]
 800a004:	f021 0104 	bic.w	r1, r1, #4
 800a008:	6021      	str	r1, [r4, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d13d      	bne.n	800a08a <_printf_i+0x16a>
 800a00e:	2d00      	cmp	r5, #0
 800a010:	f040 808e 	bne.w	800a130 <_printf_i+0x210>
 800a014:	4665      	mov	r5, ip
 800a016:	2a08      	cmp	r2, #8
 800a018:	d10b      	bne.n	800a032 <_printf_i+0x112>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	07db      	lsls	r3, r3, #31
 800a01e:	d508      	bpl.n	800a032 <_printf_i+0x112>
 800a020:	6923      	ldr	r3, [r4, #16]
 800a022:	6862      	ldr	r2, [r4, #4]
 800a024:	429a      	cmp	r2, r3
 800a026:	bfde      	ittt	le
 800a028:	2330      	movle	r3, #48	; 0x30
 800a02a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a02e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a032:	ebac 0305 	sub.w	r3, ip, r5
 800a036:	6123      	str	r3, [r4, #16]
 800a038:	f8cd 8000 	str.w	r8, [sp]
 800a03c:	463b      	mov	r3, r7
 800a03e:	aa03      	add	r2, sp, #12
 800a040:	4621      	mov	r1, r4
 800a042:	4630      	mov	r0, r6
 800a044:	f7ff fef6 	bl	8009e34 <_printf_common>
 800a048:	3001      	adds	r0, #1
 800a04a:	d14d      	bne.n	800a0e8 <_printf_i+0x1c8>
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295
 800a050:	b005      	add	sp, #20
 800a052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a056:	4839      	ldr	r0, [pc, #228]	; (800a13c <_printf_i+0x21c>)
 800a058:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a05c:	6813      	ldr	r3, [r2, #0]
 800a05e:	6821      	ldr	r1, [r4, #0]
 800a060:	1d1d      	adds	r5, r3, #4
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	6015      	str	r5, [r2, #0]
 800a066:	060a      	lsls	r2, r1, #24
 800a068:	d50b      	bpl.n	800a082 <_printf_i+0x162>
 800a06a:	07ca      	lsls	r2, r1, #31
 800a06c:	bf44      	itt	mi
 800a06e:	f041 0120 	orrmi.w	r1, r1, #32
 800a072:	6021      	strmi	r1, [r4, #0]
 800a074:	b91b      	cbnz	r3, 800a07e <_printf_i+0x15e>
 800a076:	6822      	ldr	r2, [r4, #0]
 800a078:	f022 0220 	bic.w	r2, r2, #32
 800a07c:	6022      	str	r2, [r4, #0]
 800a07e:	2210      	movs	r2, #16
 800a080:	e7b7      	b.n	8009ff2 <_printf_i+0xd2>
 800a082:	064d      	lsls	r5, r1, #25
 800a084:	bf48      	it	mi
 800a086:	b29b      	uxthmi	r3, r3
 800a088:	e7ef      	b.n	800a06a <_printf_i+0x14a>
 800a08a:	4665      	mov	r5, ip
 800a08c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a090:	fb02 3311 	mls	r3, r2, r1, r3
 800a094:	5cc3      	ldrb	r3, [r0, r3]
 800a096:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a09a:	460b      	mov	r3, r1
 800a09c:	2900      	cmp	r1, #0
 800a09e:	d1f5      	bne.n	800a08c <_printf_i+0x16c>
 800a0a0:	e7b9      	b.n	800a016 <_printf_i+0xf6>
 800a0a2:	6813      	ldr	r3, [r2, #0]
 800a0a4:	6825      	ldr	r5, [r4, #0]
 800a0a6:	1d18      	adds	r0, r3, #4
 800a0a8:	6961      	ldr	r1, [r4, #20]
 800a0aa:	6010      	str	r0, [r2, #0]
 800a0ac:	0628      	lsls	r0, r5, #24
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	d501      	bpl.n	800a0b6 <_printf_i+0x196>
 800a0b2:	6019      	str	r1, [r3, #0]
 800a0b4:	e002      	b.n	800a0bc <_printf_i+0x19c>
 800a0b6:	066a      	lsls	r2, r5, #25
 800a0b8:	d5fb      	bpl.n	800a0b2 <_printf_i+0x192>
 800a0ba:	8019      	strh	r1, [r3, #0]
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4665      	mov	r5, ip
 800a0c0:	6123      	str	r3, [r4, #16]
 800a0c2:	e7b9      	b.n	800a038 <_printf_i+0x118>
 800a0c4:	6813      	ldr	r3, [r2, #0]
 800a0c6:	1d19      	adds	r1, r3, #4
 800a0c8:	6011      	str	r1, [r2, #0]
 800a0ca:	681d      	ldr	r5, [r3, #0]
 800a0cc:	6862      	ldr	r2, [r4, #4]
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	f000 f844 	bl	800a15e <memchr>
 800a0d6:	b108      	cbz	r0, 800a0dc <_printf_i+0x1bc>
 800a0d8:	1b40      	subs	r0, r0, r5
 800a0da:	6060      	str	r0, [r4, #4]
 800a0dc:	6863      	ldr	r3, [r4, #4]
 800a0de:	6123      	str	r3, [r4, #16]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0e6:	e7a7      	b.n	800a038 <_printf_i+0x118>
 800a0e8:	6923      	ldr	r3, [r4, #16]
 800a0ea:	462a      	mov	r2, r5
 800a0ec:	4639      	mov	r1, r7
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	47c0      	blx	r8
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	d0aa      	beq.n	800a04c <_printf_i+0x12c>
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	079b      	lsls	r3, r3, #30
 800a0fa:	d413      	bmi.n	800a124 <_printf_i+0x204>
 800a0fc:	68e0      	ldr	r0, [r4, #12]
 800a0fe:	9b03      	ldr	r3, [sp, #12]
 800a100:	4298      	cmp	r0, r3
 800a102:	bfb8      	it	lt
 800a104:	4618      	movlt	r0, r3
 800a106:	e7a3      	b.n	800a050 <_printf_i+0x130>
 800a108:	2301      	movs	r3, #1
 800a10a:	464a      	mov	r2, r9
 800a10c:	4639      	mov	r1, r7
 800a10e:	4630      	mov	r0, r6
 800a110:	47c0      	blx	r8
 800a112:	3001      	adds	r0, #1
 800a114:	d09a      	beq.n	800a04c <_printf_i+0x12c>
 800a116:	3501      	adds	r5, #1
 800a118:	68e3      	ldr	r3, [r4, #12]
 800a11a:	9a03      	ldr	r2, [sp, #12]
 800a11c:	1a9b      	subs	r3, r3, r2
 800a11e:	42ab      	cmp	r3, r5
 800a120:	dcf2      	bgt.n	800a108 <_printf_i+0x1e8>
 800a122:	e7eb      	b.n	800a0fc <_printf_i+0x1dc>
 800a124:	2500      	movs	r5, #0
 800a126:	f104 0919 	add.w	r9, r4, #25
 800a12a:	e7f5      	b.n	800a118 <_printf_i+0x1f8>
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1ac      	bne.n	800a08a <_printf_i+0x16a>
 800a130:	7803      	ldrb	r3, [r0, #0]
 800a132:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a136:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a13a:	e76c      	b.n	800a016 <_printf_i+0xf6>
 800a13c:	0800d76b 	.word	0x0800d76b
 800a140:	0800d77c 	.word	0x0800d77c

0800a144 <__ascii_wctomb>:
 800a144:	b149      	cbz	r1, 800a15a <__ascii_wctomb+0x16>
 800a146:	2aff      	cmp	r2, #255	; 0xff
 800a148:	bf8b      	itete	hi
 800a14a:	238a      	movhi	r3, #138	; 0x8a
 800a14c:	700a      	strbls	r2, [r1, #0]
 800a14e:	6003      	strhi	r3, [r0, #0]
 800a150:	2001      	movls	r0, #1
 800a152:	bf88      	it	hi
 800a154:	f04f 30ff 	movhi.w	r0, #4294967295
 800a158:	4770      	bx	lr
 800a15a:	4608      	mov	r0, r1
 800a15c:	4770      	bx	lr

0800a15e <memchr>:
 800a15e:	b510      	push	{r4, lr}
 800a160:	b2c9      	uxtb	r1, r1
 800a162:	4402      	add	r2, r0
 800a164:	4290      	cmp	r0, r2
 800a166:	4603      	mov	r3, r0
 800a168:	d101      	bne.n	800a16e <memchr+0x10>
 800a16a:	2300      	movs	r3, #0
 800a16c:	e003      	b.n	800a176 <memchr+0x18>
 800a16e:	781c      	ldrb	r4, [r3, #0]
 800a170:	3001      	adds	r0, #1
 800a172:	428c      	cmp	r4, r1
 800a174:	d1f6      	bne.n	800a164 <memchr+0x6>
 800a176:	4618      	mov	r0, r3
 800a178:	bd10      	pop	{r4, pc}

0800a17a <memmove>:
 800a17a:	4288      	cmp	r0, r1
 800a17c:	b510      	push	{r4, lr}
 800a17e:	eb01 0302 	add.w	r3, r1, r2
 800a182:	d807      	bhi.n	800a194 <memmove+0x1a>
 800a184:	1e42      	subs	r2, r0, #1
 800a186:	4299      	cmp	r1, r3
 800a188:	d00a      	beq.n	800a1a0 <memmove+0x26>
 800a18a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a18e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a192:	e7f8      	b.n	800a186 <memmove+0xc>
 800a194:	4283      	cmp	r3, r0
 800a196:	d9f5      	bls.n	800a184 <memmove+0xa>
 800a198:	1881      	adds	r1, r0, r2
 800a19a:	1ad2      	subs	r2, r2, r3
 800a19c:	42d3      	cmn	r3, r2
 800a19e:	d100      	bne.n	800a1a2 <memmove+0x28>
 800a1a0:	bd10      	pop	{r4, pc}
 800a1a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1a6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a1aa:	e7f7      	b.n	800a19c <memmove+0x22>

0800a1ac <_realloc_r>:
 800a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ae:	4607      	mov	r7, r0
 800a1b0:	4614      	mov	r4, r2
 800a1b2:	460e      	mov	r6, r1
 800a1b4:	b921      	cbnz	r1, 800a1c0 <_realloc_r+0x14>
 800a1b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	f7ff bb1e 	b.w	80097fc <_malloc_r>
 800a1c0:	b922      	cbnz	r2, 800a1cc <_realloc_r+0x20>
 800a1c2:	f7ff facf 	bl	8009764 <_free_r>
 800a1c6:	4625      	mov	r5, r4
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1cc:	f000 f814 	bl	800a1f8 <_malloc_usable_size_r>
 800a1d0:	42a0      	cmp	r0, r4
 800a1d2:	d20f      	bcs.n	800a1f4 <_realloc_r+0x48>
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	4638      	mov	r0, r7
 800a1d8:	f7ff fb10 	bl	80097fc <_malloc_r>
 800a1dc:	4605      	mov	r5, r0
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	d0f2      	beq.n	800a1c8 <_realloc_r+0x1c>
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	4622      	mov	r2, r4
 800a1e6:	f7ff fa9b 	bl	8009720 <memcpy>
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	4638      	mov	r0, r7
 800a1ee:	f7ff fab9 	bl	8009764 <_free_r>
 800a1f2:	e7e9      	b.n	800a1c8 <_realloc_r+0x1c>
 800a1f4:	4635      	mov	r5, r6
 800a1f6:	e7e7      	b.n	800a1c8 <_realloc_r+0x1c>

0800a1f8 <_malloc_usable_size_r>:
 800a1f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1fc:	1f18      	subs	r0, r3, #4
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	bfbc      	itt	lt
 800a202:	580b      	ldrlt	r3, [r1, r0]
 800a204:	18c0      	addlt	r0, r0, r3
 800a206:	4770      	bx	lr

0800a208 <round>:
 800a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a20e:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800a212:	2c13      	cmp	r4, #19
 800a214:	4606      	mov	r6, r0
 800a216:	460d      	mov	r5, r1
 800a218:	460b      	mov	r3, r1
 800a21a:	468c      	mov	ip, r1
 800a21c:	4602      	mov	r2, r0
 800a21e:	dc17      	bgt.n	800a250 <round+0x48>
 800a220:	2c00      	cmp	r4, #0
 800a222:	da09      	bge.n	800a238 <round+0x30>
 800a224:	3401      	adds	r4, #1
 800a226:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a22a:	d103      	bne.n	800a234 <round+0x2c>
 800a22c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a230:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a234:	2200      	movs	r2, #0
 800a236:	e028      	b.n	800a28a <round+0x82>
 800a238:	4915      	ldr	r1, [pc, #84]	; (800a290 <round+0x88>)
 800a23a:	4121      	asrs	r1, r4
 800a23c:	420d      	tst	r5, r1
 800a23e:	d100      	bne.n	800a242 <round+0x3a>
 800a240:	b178      	cbz	r0, 800a262 <round+0x5a>
 800a242:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a246:	4123      	asrs	r3, r4
 800a248:	4463      	add	r3, ip
 800a24a:	ea23 0301 	bic.w	r3, r3, r1
 800a24e:	e7f1      	b.n	800a234 <round+0x2c>
 800a250:	2c33      	cmp	r4, #51	; 0x33
 800a252:	dd09      	ble.n	800a268 <round+0x60>
 800a254:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a258:	d103      	bne.n	800a262 <round+0x5a>
 800a25a:	f7f5 ff87 	bl	800016c <__adddf3>
 800a25e:	4606      	mov	r6, r0
 800a260:	460d      	mov	r5, r1
 800a262:	4630      	mov	r0, r6
 800a264:	4629      	mov	r1, r5
 800a266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a268:	f04f 30ff 	mov.w	r0, #4294967295
 800a26c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a270:	40f8      	lsrs	r0, r7
 800a272:	4206      	tst	r6, r0
 800a274:	d0f5      	beq.n	800a262 <round+0x5a>
 800a276:	2101      	movs	r1, #1
 800a278:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a27c:	fa01 f404 	lsl.w	r4, r1, r4
 800a280:	1932      	adds	r2, r6, r4
 800a282:	bf28      	it	cs
 800a284:	185b      	addcs	r3, r3, r1
 800a286:	ea22 0200 	bic.w	r2, r2, r0
 800a28a:	4619      	mov	r1, r3
 800a28c:	4610      	mov	r0, r2
 800a28e:	e7e6      	b.n	800a25e <round+0x56>
 800a290:	000fffff 	.word	0x000fffff

0800a294 <sin>:
 800a294:	b530      	push	{r4, r5, lr}
 800a296:	4a1a      	ldr	r2, [pc, #104]	; (800a300 <sin+0x6c>)
 800a298:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a29c:	4293      	cmp	r3, r2
 800a29e:	b087      	sub	sp, #28
 800a2a0:	dc06      	bgt.n	800a2b0 <sin+0x1c>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f001 fd39 	bl	800bd20 <__kernel_sin>
 800a2ae:	e006      	b.n	800a2be <sin+0x2a>
 800a2b0:	4a14      	ldr	r2, [pc, #80]	; (800a304 <sin+0x70>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	dd05      	ble.n	800a2c2 <sin+0x2e>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	f7f5 ff55 	bl	8000168 <__aeabi_dsub>
 800a2be:	b007      	add	sp, #28
 800a2c0:	bd30      	pop	{r4, r5, pc}
 800a2c2:	aa02      	add	r2, sp, #8
 800a2c4:	f000 fe88 	bl	800afd8 <__ieee754_rem_pio2>
 800a2c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2cc:	f000 0403 	and.w	r4, r0, #3
 800a2d0:	2c01      	cmp	r4, #1
 800a2d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2d6:	d005      	beq.n	800a2e4 <sin+0x50>
 800a2d8:	2c02      	cmp	r4, #2
 800a2da:	d006      	beq.n	800a2ea <sin+0x56>
 800a2dc:	b964      	cbnz	r4, 800a2f8 <sin+0x64>
 800a2de:	2401      	movs	r4, #1
 800a2e0:	9400      	str	r4, [sp, #0]
 800a2e2:	e7e2      	b.n	800a2aa <sin+0x16>
 800a2e4:	f001 f914 	bl	800b510 <__kernel_cos>
 800a2e8:	e7e9      	b.n	800a2be <sin+0x2a>
 800a2ea:	2401      	movs	r4, #1
 800a2ec:	9400      	str	r4, [sp, #0]
 800a2ee:	f001 fd17 	bl	800bd20 <__kernel_sin>
 800a2f2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a2f6:	e7e2      	b.n	800a2be <sin+0x2a>
 800a2f8:	f001 f90a 	bl	800b510 <__kernel_cos>
 800a2fc:	e7f9      	b.n	800a2f2 <sin+0x5e>
 800a2fe:	bf00      	nop
 800a300:	3fe921fb 	.word	0x3fe921fb
 800a304:	7fefffff 	.word	0x7fefffff

0800a308 <pow>:
 800a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	b08f      	sub	sp, #60	; 0x3c
 800a30e:	461d      	mov	r5, r3
 800a310:	4680      	mov	r8, r0
 800a312:	4689      	mov	r9, r1
 800a314:	4614      	mov	r4, r2
 800a316:	f000 f953 	bl	800a5c0 <__ieee754_pow>
 800a31a:	4fa1      	ldr	r7, [pc, #644]	; (800a5a0 <pow+0x298>)
 800a31c:	e9cd 0100 	strd	r0, r1, [sp]
 800a320:	f997 3000 	ldrsb.w	r3, [r7]
 800a324:	463e      	mov	r6, r7
 800a326:	9302      	str	r3, [sp, #8]
 800a328:	3301      	adds	r3, #1
 800a32a:	d05f      	beq.n	800a3ec <pow+0xe4>
 800a32c:	4622      	mov	r2, r4
 800a32e:	462b      	mov	r3, r5
 800a330:	4620      	mov	r0, r4
 800a332:	4629      	mov	r1, r5
 800a334:	f7f6 fb6a 	bl	8000a0c <__aeabi_dcmpun>
 800a338:	4682      	mov	sl, r0
 800a33a:	2800      	cmp	r0, #0
 800a33c:	d156      	bne.n	800a3ec <pow+0xe4>
 800a33e:	4642      	mov	r2, r8
 800a340:	464b      	mov	r3, r9
 800a342:	4640      	mov	r0, r8
 800a344:	4649      	mov	r1, r9
 800a346:	f7f6 fb61 	bl	8000a0c <__aeabi_dcmpun>
 800a34a:	9003      	str	r0, [sp, #12]
 800a34c:	b1e8      	cbz	r0, 800a38a <pow+0x82>
 800a34e:	2200      	movs	r2, #0
 800a350:	2300      	movs	r3, #0
 800a352:	4620      	mov	r0, r4
 800a354:	4629      	mov	r1, r5
 800a356:	f7f6 fb27 	bl	80009a8 <__aeabi_dcmpeq>
 800a35a:	2800      	cmp	r0, #0
 800a35c:	d046      	beq.n	800a3ec <pow+0xe4>
 800a35e:	2301      	movs	r3, #1
 800a360:	2200      	movs	r2, #0
 800a362:	9304      	str	r3, [sp, #16]
 800a364:	4b8f      	ldr	r3, [pc, #572]	; (800a5a4 <pow+0x29c>)
 800a366:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800a36a:	9305      	str	r3, [sp, #20]
 800a36c:	4b8e      	ldr	r3, [pc, #568]	; (800a5a8 <pow+0x2a0>)
 800a36e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a372:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a376:	9b02      	ldr	r3, [sp, #8]
 800a378:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d031      	beq.n	800a3e4 <pow+0xdc>
 800a380:	a804      	add	r0, sp, #16
 800a382:	f001 fe11 	bl	800bfa8 <matherr>
 800a386:	bb38      	cbnz	r0, 800a3d8 <pow+0xd0>
 800a388:	e058      	b.n	800a43c <pow+0x134>
 800a38a:	f04f 0a00 	mov.w	sl, #0
 800a38e:	f04f 0b00 	mov.w	fp, #0
 800a392:	4652      	mov	r2, sl
 800a394:	465b      	mov	r3, fp
 800a396:	4640      	mov	r0, r8
 800a398:	4649      	mov	r1, r9
 800a39a:	f7f6 fb05 	bl	80009a8 <__aeabi_dcmpeq>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d051      	beq.n	800a446 <pow+0x13e>
 800a3a2:	4652      	mov	r2, sl
 800a3a4:	465b      	mov	r3, fp
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	f7f6 fafd 	bl	80009a8 <__aeabi_dcmpeq>
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	b308      	cbz	r0, 800a3f6 <pow+0xee>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	9304      	str	r3, [sp, #16]
 800a3b6:	4b7b      	ldr	r3, [pc, #492]	; (800a5a4 <pow+0x29c>)
 800a3b8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a3bc:	9305      	str	r3, [sp, #20]
 800a3be:	9b03      	ldr	r3, [sp, #12]
 800a3c0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a3c4:	930c      	str	r3, [sp, #48]	; 0x30
 800a3c6:	9b02      	ldr	r3, [sp, #8]
 800a3c8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d0d7      	beq.n	800a380 <pow+0x78>
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	4b75      	ldr	r3, [pc, #468]	; (800a5a8 <pow+0x2a0>)
 800a3d4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3da:	b11b      	cbz	r3, 800a3e4 <pow+0xdc>
 800a3dc:	f7ff f966 	bl	80096ac <__errno>
 800a3e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3e2:	6003      	str	r3, [r0, #0]
 800a3e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800a3e8:	e9cd 3400 	strd	r3, r4, [sp]
 800a3ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3f0:	b00f      	add	sp, #60	; 0x3c
 800a3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	f001 fd4b 	bl	800be94 <finite>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d0f4      	beq.n	800a3ec <pow+0xe4>
 800a402:	4652      	mov	r2, sl
 800a404:	465b      	mov	r3, fp
 800a406:	4620      	mov	r0, r4
 800a408:	4629      	mov	r1, r5
 800a40a:	f7f6 fad7 	bl	80009bc <__aeabi_dcmplt>
 800a40e:	2800      	cmp	r0, #0
 800a410:	d0ec      	beq.n	800a3ec <pow+0xe4>
 800a412:	2301      	movs	r3, #1
 800a414:	9304      	str	r3, [sp, #16]
 800a416:	4b63      	ldr	r3, [pc, #396]	; (800a5a4 <pow+0x29c>)
 800a418:	960c      	str	r6, [sp, #48]	; 0x30
 800a41a:	9305      	str	r3, [sp, #20]
 800a41c:	f997 3000 	ldrsb.w	r3, [r7]
 800a420:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a424:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a428:	b913      	cbnz	r3, 800a430 <pow+0x128>
 800a42a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a42e:	e7a7      	b.n	800a380 <pow+0x78>
 800a430:	2000      	movs	r0, #0
 800a432:	495e      	ldr	r1, [pc, #376]	; (800a5ac <pow+0x2a4>)
 800a434:	2b02      	cmp	r3, #2
 800a436:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a43a:	d1a1      	bne.n	800a380 <pow+0x78>
 800a43c:	f7ff f936 	bl	80096ac <__errno>
 800a440:	2321      	movs	r3, #33	; 0x21
 800a442:	6003      	str	r3, [r0, #0]
 800a444:	e7c8      	b.n	800a3d8 <pow+0xd0>
 800a446:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a44a:	f001 fd23 	bl	800be94 <finite>
 800a44e:	9002      	str	r0, [sp, #8]
 800a450:	2800      	cmp	r0, #0
 800a452:	d177      	bne.n	800a544 <pow+0x23c>
 800a454:	4640      	mov	r0, r8
 800a456:	4649      	mov	r1, r9
 800a458:	f001 fd1c 	bl	800be94 <finite>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d071      	beq.n	800a544 <pow+0x23c>
 800a460:	4620      	mov	r0, r4
 800a462:	4629      	mov	r1, r5
 800a464:	f001 fd16 	bl	800be94 <finite>
 800a468:	2800      	cmp	r0, #0
 800a46a:	d06b      	beq.n	800a544 <pow+0x23c>
 800a46c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a470:	4619      	mov	r1, r3
 800a472:	4610      	mov	r0, r2
 800a474:	f7f6 faca 	bl	8000a0c <__aeabi_dcmpun>
 800a478:	f997 7000 	ldrsb.w	r7, [r7]
 800a47c:	4b49      	ldr	r3, [pc, #292]	; (800a5a4 <pow+0x29c>)
 800a47e:	b1a0      	cbz	r0, 800a4aa <pow+0x1a2>
 800a480:	2201      	movs	r2, #1
 800a482:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a486:	9b02      	ldr	r3, [sp, #8]
 800a488:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a48c:	930c      	str	r3, [sp, #48]	; 0x30
 800a48e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a492:	2f00      	cmp	r7, #0
 800a494:	d0c9      	beq.n	800a42a <pow+0x122>
 800a496:	4652      	mov	r2, sl
 800a498:	465b      	mov	r3, fp
 800a49a:	4650      	mov	r0, sl
 800a49c:	4659      	mov	r1, fp
 800a49e:	f7f6 f945 	bl	800072c <__aeabi_ddiv>
 800a4a2:	2f02      	cmp	r7, #2
 800a4a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a4a8:	e7c7      	b.n	800a43a <pow+0x132>
 800a4aa:	2203      	movs	r2, #3
 800a4ac:	900c      	str	r0, [sp, #48]	; 0x30
 800a4ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	4b3d      	ldr	r3, [pc, #244]	; (800a5b0 <pow+0x2a8>)
 800a4ba:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a4be:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a4c2:	f7f6 f809 	bl	80004d8 <__aeabi_dmul>
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	bb17      	cbnz	r7, 800a512 <pow+0x20a>
 800a4cc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a4d0:	4b38      	ldr	r3, [pc, #224]	; (800a5b4 <pow+0x2ac>)
 800a4d2:	4640      	mov	r0, r8
 800a4d4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a4d8:	4649      	mov	r1, r9
 800a4da:	4652      	mov	r2, sl
 800a4dc:	465b      	mov	r3, fp
 800a4de:	f7f6 fa6d 	bl	80009bc <__aeabi_dcmplt>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d054      	beq.n	800a590 <pow+0x288>
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	4629      	mov	r1, r5
 800a4ea:	f001 fd65 	bl	800bfb8 <rint>
 800a4ee:	4622      	mov	r2, r4
 800a4f0:	462b      	mov	r3, r5
 800a4f2:	f7f6 fa59 	bl	80009a8 <__aeabi_dcmpeq>
 800a4f6:	b920      	cbnz	r0, 800a502 <pow+0x1fa>
 800a4f8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a4fc:	4b2e      	ldr	r3, [pc, #184]	; (800a5b8 <pow+0x2b0>)
 800a4fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a502:	f996 3000 	ldrsb.w	r3, [r6]
 800a506:	2b02      	cmp	r3, #2
 800a508:	d142      	bne.n	800a590 <pow+0x288>
 800a50a:	f7ff f8cf 	bl	80096ac <__errno>
 800a50e:	2322      	movs	r3, #34	; 0x22
 800a510:	e797      	b.n	800a442 <pow+0x13a>
 800a512:	2200      	movs	r2, #0
 800a514:	4b29      	ldr	r3, [pc, #164]	; (800a5bc <pow+0x2b4>)
 800a516:	4640      	mov	r0, r8
 800a518:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a51c:	4649      	mov	r1, r9
 800a51e:	4652      	mov	r2, sl
 800a520:	465b      	mov	r3, fp
 800a522:	f7f6 fa4b 	bl	80009bc <__aeabi_dcmplt>
 800a526:	2800      	cmp	r0, #0
 800a528:	d0eb      	beq.n	800a502 <pow+0x1fa>
 800a52a:	4620      	mov	r0, r4
 800a52c:	4629      	mov	r1, r5
 800a52e:	f001 fd43 	bl	800bfb8 <rint>
 800a532:	4622      	mov	r2, r4
 800a534:	462b      	mov	r3, r5
 800a536:	f7f6 fa37 	bl	80009a8 <__aeabi_dcmpeq>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d1e1      	bne.n	800a502 <pow+0x1fa>
 800a53e:	2200      	movs	r2, #0
 800a540:	4b1a      	ldr	r3, [pc, #104]	; (800a5ac <pow+0x2a4>)
 800a542:	e7dc      	b.n	800a4fe <pow+0x1f6>
 800a544:	2200      	movs	r2, #0
 800a546:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a54a:	2300      	movs	r3, #0
 800a54c:	f7f6 fa2c 	bl	80009a8 <__aeabi_dcmpeq>
 800a550:	2800      	cmp	r0, #0
 800a552:	f43f af4b 	beq.w	800a3ec <pow+0xe4>
 800a556:	4640      	mov	r0, r8
 800a558:	4649      	mov	r1, r9
 800a55a:	f001 fc9b 	bl	800be94 <finite>
 800a55e:	2800      	cmp	r0, #0
 800a560:	f43f af44 	beq.w	800a3ec <pow+0xe4>
 800a564:	4620      	mov	r0, r4
 800a566:	4629      	mov	r1, r5
 800a568:	f001 fc94 	bl	800be94 <finite>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	f43f af3d 	beq.w	800a3ec <pow+0xe4>
 800a572:	2304      	movs	r3, #4
 800a574:	9304      	str	r3, [sp, #16]
 800a576:	4b0b      	ldr	r3, [pc, #44]	; (800a5a4 <pow+0x29c>)
 800a578:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a57c:	9305      	str	r3, [sp, #20]
 800a57e:	2300      	movs	r3, #0
 800a580:	2400      	movs	r4, #0
 800a582:	930c      	str	r3, [sp, #48]	; 0x30
 800a584:	2300      	movs	r3, #0
 800a586:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a58a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800a58e:	e7b8      	b.n	800a502 <pow+0x1fa>
 800a590:	a804      	add	r0, sp, #16
 800a592:	f001 fd09 	bl	800bfa8 <matherr>
 800a596:	2800      	cmp	r0, #0
 800a598:	f47f af1e 	bne.w	800a3d8 <pow+0xd0>
 800a59c:	e7b5      	b.n	800a50a <pow+0x202>
 800a59e:	bf00      	nop
 800a5a0:	200003e0 	.word	0x200003e0
 800a5a4:	0800d88e 	.word	0x0800d88e
 800a5a8:	3ff00000 	.word	0x3ff00000
 800a5ac:	fff00000 	.word	0xfff00000
 800a5b0:	3fe00000 	.word	0x3fe00000
 800a5b4:	47efffff 	.word	0x47efffff
 800a5b8:	c7efffff 	.word	0xc7efffff
 800a5bc:	7ff00000 	.word	0x7ff00000

0800a5c0 <__ieee754_pow>:
 800a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c4:	b091      	sub	sp, #68	; 0x44
 800a5c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5ca:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800a5ce:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a5d2:	ea55 0302 	orrs.w	r3, r5, r2
 800a5d6:	4607      	mov	r7, r0
 800a5d8:	4688      	mov	r8, r1
 800a5da:	f000 84b7 	beq.w	800af4c <__ieee754_pow+0x98c>
 800a5de:	4b80      	ldr	r3, [pc, #512]	; (800a7e0 <__ieee754_pow+0x220>)
 800a5e0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a5e4:	429c      	cmp	r4, r3
 800a5e6:	4689      	mov	r9, r1
 800a5e8:	4682      	mov	sl, r0
 800a5ea:	dc09      	bgt.n	800a600 <__ieee754_pow+0x40>
 800a5ec:	d103      	bne.n	800a5f6 <__ieee754_pow+0x36>
 800a5ee:	b938      	cbnz	r0, 800a600 <__ieee754_pow+0x40>
 800a5f0:	42a5      	cmp	r5, r4
 800a5f2:	dc0d      	bgt.n	800a610 <__ieee754_pow+0x50>
 800a5f4:	e001      	b.n	800a5fa <__ieee754_pow+0x3a>
 800a5f6:	429d      	cmp	r5, r3
 800a5f8:	dc02      	bgt.n	800a600 <__ieee754_pow+0x40>
 800a5fa:	429d      	cmp	r5, r3
 800a5fc:	d10e      	bne.n	800a61c <__ieee754_pow+0x5c>
 800a5fe:	b16a      	cbz	r2, 800a61c <__ieee754_pow+0x5c>
 800a600:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a604:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a608:	ea54 030a 	orrs.w	r3, r4, sl
 800a60c:	f000 849e 	beq.w	800af4c <__ieee754_pow+0x98c>
 800a610:	4874      	ldr	r0, [pc, #464]	; (800a7e4 <__ieee754_pow+0x224>)
 800a612:	b011      	add	sp, #68	; 0x44
 800a614:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a618:	f001 bcc8 	b.w	800bfac <nan>
 800a61c:	f1b9 0f00 	cmp.w	r9, #0
 800a620:	da53      	bge.n	800a6ca <__ieee754_pow+0x10a>
 800a622:	4b71      	ldr	r3, [pc, #452]	; (800a7e8 <__ieee754_pow+0x228>)
 800a624:	429d      	cmp	r5, r3
 800a626:	dc4e      	bgt.n	800a6c6 <__ieee754_pow+0x106>
 800a628:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a62c:	429d      	cmp	r5, r3
 800a62e:	dd4c      	ble.n	800a6ca <__ieee754_pow+0x10a>
 800a630:	152b      	asrs	r3, r5, #20
 800a632:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a636:	2b14      	cmp	r3, #20
 800a638:	dd28      	ble.n	800a68c <__ieee754_pow+0xcc>
 800a63a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a63e:	fa22 f103 	lsr.w	r1, r2, r3
 800a642:	fa01 f303 	lsl.w	r3, r1, r3
 800a646:	4293      	cmp	r3, r2
 800a648:	d13f      	bne.n	800a6ca <__ieee754_pow+0x10a>
 800a64a:	f001 0101 	and.w	r1, r1, #1
 800a64e:	f1c1 0302 	rsb	r3, r1, #2
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	2a00      	cmp	r2, #0
 800a656:	d15c      	bne.n	800a712 <__ieee754_pow+0x152>
 800a658:	4b61      	ldr	r3, [pc, #388]	; (800a7e0 <__ieee754_pow+0x220>)
 800a65a:	429d      	cmp	r5, r3
 800a65c:	d126      	bne.n	800a6ac <__ieee754_pow+0xec>
 800a65e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a662:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a666:	ea53 030a 	orrs.w	r3, r3, sl
 800a66a:	f000 846f 	beq.w	800af4c <__ieee754_pow+0x98c>
 800a66e:	4b5f      	ldr	r3, [pc, #380]	; (800a7ec <__ieee754_pow+0x22c>)
 800a670:	429c      	cmp	r4, r3
 800a672:	dd2c      	ble.n	800a6ce <__ieee754_pow+0x10e>
 800a674:	2e00      	cmp	r6, #0
 800a676:	f280 846f 	bge.w	800af58 <__ieee754_pow+0x998>
 800a67a:	f04f 0b00 	mov.w	fp, #0
 800a67e:	f04f 0c00 	mov.w	ip, #0
 800a682:	4658      	mov	r0, fp
 800a684:	4661      	mov	r1, ip
 800a686:	b011      	add	sp, #68	; 0x44
 800a688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68c:	2a00      	cmp	r2, #0
 800a68e:	d13e      	bne.n	800a70e <__ieee754_pow+0x14e>
 800a690:	f1c3 0314 	rsb	r3, r3, #20
 800a694:	fa45 f103 	asr.w	r1, r5, r3
 800a698:	fa01 f303 	lsl.w	r3, r1, r3
 800a69c:	42ab      	cmp	r3, r5
 800a69e:	f040 8463 	bne.w	800af68 <__ieee754_pow+0x9a8>
 800a6a2:	f001 0101 	and.w	r1, r1, #1
 800a6a6:	f1c1 0302 	rsb	r3, r1, #2
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	4b50      	ldr	r3, [pc, #320]	; (800a7f0 <__ieee754_pow+0x230>)
 800a6ae:	429d      	cmp	r5, r3
 800a6b0:	d114      	bne.n	800a6dc <__ieee754_pow+0x11c>
 800a6b2:	2e00      	cmp	r6, #0
 800a6b4:	f280 8454 	bge.w	800af60 <__ieee754_pow+0x9a0>
 800a6b8:	463a      	mov	r2, r7
 800a6ba:	4643      	mov	r3, r8
 800a6bc:	2000      	movs	r0, #0
 800a6be:	494c      	ldr	r1, [pc, #304]	; (800a7f0 <__ieee754_pow+0x230>)
 800a6c0:	f7f6 f834 	bl	800072c <__aeabi_ddiv>
 800a6c4:	e013      	b.n	800a6ee <__ieee754_pow+0x12e>
 800a6c6:	2302      	movs	r3, #2
 800a6c8:	e7c3      	b.n	800a652 <__ieee754_pow+0x92>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	e7c1      	b.n	800a652 <__ieee754_pow+0x92>
 800a6ce:	2e00      	cmp	r6, #0
 800a6d0:	dad3      	bge.n	800a67a <__ieee754_pow+0xba>
 800a6d2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a6d6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a6da:	e7d2      	b.n	800a682 <__ieee754_pow+0xc2>
 800a6dc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800a6e0:	d108      	bne.n	800a6f4 <__ieee754_pow+0x134>
 800a6e2:	463a      	mov	r2, r7
 800a6e4:	4643      	mov	r3, r8
 800a6e6:	4638      	mov	r0, r7
 800a6e8:	4641      	mov	r1, r8
 800a6ea:	f7f5 fef5 	bl	80004d8 <__aeabi_dmul>
 800a6ee:	4683      	mov	fp, r0
 800a6f0:	468c      	mov	ip, r1
 800a6f2:	e7c6      	b.n	800a682 <__ieee754_pow+0xc2>
 800a6f4:	4b3f      	ldr	r3, [pc, #252]	; (800a7f4 <__ieee754_pow+0x234>)
 800a6f6:	429e      	cmp	r6, r3
 800a6f8:	d10b      	bne.n	800a712 <__ieee754_pow+0x152>
 800a6fa:	f1b9 0f00 	cmp.w	r9, #0
 800a6fe:	db08      	blt.n	800a712 <__ieee754_pow+0x152>
 800a700:	4638      	mov	r0, r7
 800a702:	4641      	mov	r1, r8
 800a704:	b011      	add	sp, #68	; 0x44
 800a706:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70a:	f000 be55 	b.w	800b3b8 <__ieee754_sqrt>
 800a70e:	2300      	movs	r3, #0
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	4638      	mov	r0, r7
 800a714:	4641      	mov	r1, r8
 800a716:	f001 fbb9 	bl	800be8c <fabs>
 800a71a:	4683      	mov	fp, r0
 800a71c:	468c      	mov	ip, r1
 800a71e:	f1ba 0f00 	cmp.w	sl, #0
 800a722:	d12b      	bne.n	800a77c <__ieee754_pow+0x1bc>
 800a724:	b124      	cbz	r4, 800a730 <__ieee754_pow+0x170>
 800a726:	4b32      	ldr	r3, [pc, #200]	; (800a7f0 <__ieee754_pow+0x230>)
 800a728:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d125      	bne.n	800a77c <__ieee754_pow+0x1bc>
 800a730:	2e00      	cmp	r6, #0
 800a732:	da07      	bge.n	800a744 <__ieee754_pow+0x184>
 800a734:	465a      	mov	r2, fp
 800a736:	4663      	mov	r3, ip
 800a738:	2000      	movs	r0, #0
 800a73a:	492d      	ldr	r1, [pc, #180]	; (800a7f0 <__ieee754_pow+0x230>)
 800a73c:	f7f5 fff6 	bl	800072c <__aeabi_ddiv>
 800a740:	4683      	mov	fp, r0
 800a742:	468c      	mov	ip, r1
 800a744:	f1b9 0f00 	cmp.w	r9, #0
 800a748:	da9b      	bge.n	800a682 <__ieee754_pow+0xc2>
 800a74a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a74e:	9b00      	ldr	r3, [sp, #0]
 800a750:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a754:	4323      	orrs	r3, r4
 800a756:	d108      	bne.n	800a76a <__ieee754_pow+0x1aa>
 800a758:	465a      	mov	r2, fp
 800a75a:	4663      	mov	r3, ip
 800a75c:	4658      	mov	r0, fp
 800a75e:	4661      	mov	r1, ip
 800a760:	f7f5 fd02 	bl	8000168 <__aeabi_dsub>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	e7aa      	b.n	800a6c0 <__ieee754_pow+0x100>
 800a76a:	9b00      	ldr	r3, [sp, #0]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d188      	bne.n	800a682 <__ieee754_pow+0xc2>
 800a770:	4658      	mov	r0, fp
 800a772:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a776:	4683      	mov	fp, r0
 800a778:	469c      	mov	ip, r3
 800a77a:	e782      	b.n	800a682 <__ieee754_pow+0xc2>
 800a77c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800a780:	f109 33ff 	add.w	r3, r9, #4294967295
 800a784:	930d      	str	r3, [sp, #52]	; 0x34
 800a786:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a788:	9b00      	ldr	r3, [sp, #0]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	d104      	bne.n	800a798 <__ieee754_pow+0x1d8>
 800a78e:	463a      	mov	r2, r7
 800a790:	4643      	mov	r3, r8
 800a792:	4638      	mov	r0, r7
 800a794:	4641      	mov	r1, r8
 800a796:	e7e3      	b.n	800a760 <__ieee754_pow+0x1a0>
 800a798:	4b17      	ldr	r3, [pc, #92]	; (800a7f8 <__ieee754_pow+0x238>)
 800a79a:	429d      	cmp	r5, r3
 800a79c:	f340 80fe 	ble.w	800a99c <__ieee754_pow+0x3dc>
 800a7a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a7a4:	429d      	cmp	r5, r3
 800a7a6:	dd0b      	ble.n	800a7c0 <__ieee754_pow+0x200>
 800a7a8:	4b10      	ldr	r3, [pc, #64]	; (800a7ec <__ieee754_pow+0x22c>)
 800a7aa:	429c      	cmp	r4, r3
 800a7ac:	dc0e      	bgt.n	800a7cc <__ieee754_pow+0x20c>
 800a7ae:	2e00      	cmp	r6, #0
 800a7b0:	f6bf af63 	bge.w	800a67a <__ieee754_pow+0xba>
 800a7b4:	a308      	add	r3, pc, #32	; (adr r3, 800a7d8 <__ieee754_pow+0x218>)
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	4610      	mov	r0, r2
 800a7bc:	4619      	mov	r1, r3
 800a7be:	e794      	b.n	800a6ea <__ieee754_pow+0x12a>
 800a7c0:	4b0e      	ldr	r3, [pc, #56]	; (800a7fc <__ieee754_pow+0x23c>)
 800a7c2:	429c      	cmp	r4, r3
 800a7c4:	ddf3      	ble.n	800a7ae <__ieee754_pow+0x1ee>
 800a7c6:	4b0a      	ldr	r3, [pc, #40]	; (800a7f0 <__ieee754_pow+0x230>)
 800a7c8:	429c      	cmp	r4, r3
 800a7ca:	dd19      	ble.n	800a800 <__ieee754_pow+0x240>
 800a7cc:	2e00      	cmp	r6, #0
 800a7ce:	dcf1      	bgt.n	800a7b4 <__ieee754_pow+0x1f4>
 800a7d0:	e753      	b.n	800a67a <__ieee754_pow+0xba>
 800a7d2:	bf00      	nop
 800a7d4:	f3af 8000 	nop.w
 800a7d8:	8800759c 	.word	0x8800759c
 800a7dc:	7e37e43c 	.word	0x7e37e43c
 800a7e0:	7ff00000 	.word	0x7ff00000
 800a7e4:	0800d75f 	.word	0x0800d75f
 800a7e8:	433fffff 	.word	0x433fffff
 800a7ec:	3fefffff 	.word	0x3fefffff
 800a7f0:	3ff00000 	.word	0x3ff00000
 800a7f4:	3fe00000 	.word	0x3fe00000
 800a7f8:	41e00000 	.word	0x41e00000
 800a7fc:	3feffffe 	.word	0x3feffffe
 800a800:	4661      	mov	r1, ip
 800a802:	2200      	movs	r2, #0
 800a804:	4b60      	ldr	r3, [pc, #384]	; (800a988 <__ieee754_pow+0x3c8>)
 800a806:	4658      	mov	r0, fp
 800a808:	f7f5 fcae 	bl	8000168 <__aeabi_dsub>
 800a80c:	a354      	add	r3, pc, #336	; (adr r3, 800a960 <__ieee754_pow+0x3a0>)
 800a80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a812:	4604      	mov	r4, r0
 800a814:	460d      	mov	r5, r1
 800a816:	f7f5 fe5f 	bl	80004d8 <__aeabi_dmul>
 800a81a:	a353      	add	r3, pc, #332	; (adr r3, 800a968 <__ieee754_pow+0x3a8>)
 800a81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a820:	4606      	mov	r6, r0
 800a822:	460f      	mov	r7, r1
 800a824:	4620      	mov	r0, r4
 800a826:	4629      	mov	r1, r5
 800a828:	f7f5 fe56 	bl	80004d8 <__aeabi_dmul>
 800a82c:	2200      	movs	r2, #0
 800a82e:	4682      	mov	sl, r0
 800a830:	468b      	mov	fp, r1
 800a832:	4b56      	ldr	r3, [pc, #344]	; (800a98c <__ieee754_pow+0x3cc>)
 800a834:	4620      	mov	r0, r4
 800a836:	4629      	mov	r1, r5
 800a838:	f7f5 fe4e 	bl	80004d8 <__aeabi_dmul>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	a14b      	add	r1, pc, #300	; (adr r1, 800a970 <__ieee754_pow+0x3b0>)
 800a842:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a846:	f7f5 fc8f 	bl	8000168 <__aeabi_dsub>
 800a84a:	4622      	mov	r2, r4
 800a84c:	462b      	mov	r3, r5
 800a84e:	f7f5 fe43 	bl	80004d8 <__aeabi_dmul>
 800a852:	4602      	mov	r2, r0
 800a854:	460b      	mov	r3, r1
 800a856:	2000      	movs	r0, #0
 800a858:	494d      	ldr	r1, [pc, #308]	; (800a990 <__ieee754_pow+0x3d0>)
 800a85a:	f7f5 fc85 	bl	8000168 <__aeabi_dsub>
 800a85e:	4622      	mov	r2, r4
 800a860:	462b      	mov	r3, r5
 800a862:	4680      	mov	r8, r0
 800a864:	4689      	mov	r9, r1
 800a866:	4620      	mov	r0, r4
 800a868:	4629      	mov	r1, r5
 800a86a:	f7f5 fe35 	bl	80004d8 <__aeabi_dmul>
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	4640      	mov	r0, r8
 800a874:	4649      	mov	r1, r9
 800a876:	f7f5 fe2f 	bl	80004d8 <__aeabi_dmul>
 800a87a:	a33f      	add	r3, pc, #252	; (adr r3, 800a978 <__ieee754_pow+0x3b8>)
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	f7f5 fe2a 	bl	80004d8 <__aeabi_dmul>
 800a884:	4602      	mov	r2, r0
 800a886:	460b      	mov	r3, r1
 800a888:	4650      	mov	r0, sl
 800a88a:	4659      	mov	r1, fp
 800a88c:	f7f5 fc6c 	bl	8000168 <__aeabi_dsub>
 800a890:	4602      	mov	r2, r0
 800a892:	460b      	mov	r3, r1
 800a894:	4604      	mov	r4, r0
 800a896:	460d      	mov	r5, r1
 800a898:	4630      	mov	r0, r6
 800a89a:	4639      	mov	r1, r7
 800a89c:	f7f5 fc66 	bl	800016c <__adddf3>
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	468b      	mov	fp, r1
 800a8a4:	4682      	mov	sl, r0
 800a8a6:	4632      	mov	r2, r6
 800a8a8:	463b      	mov	r3, r7
 800a8aa:	f7f5 fc5d 	bl	8000168 <__aeabi_dsub>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	f7f5 fc57 	bl	8000168 <__aeabi_dsub>
 800a8ba:	9b00      	ldr	r3, [sp, #0]
 800a8bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	f04f 0300 	mov.w	r3, #0
 800a8c6:	bf0c      	ite	eq
 800a8c8:	4c32      	ldreq	r4, [pc, #200]	; (800a994 <__ieee754_pow+0x3d4>)
 800a8ca:	4c2f      	ldrne	r4, [pc, #188]	; (800a988 <__ieee754_pow+0x3c8>)
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	e9cd 3400 	strd	r3, r4, [sp]
 800a8d2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a8d6:	2400      	movs	r4, #0
 800a8d8:	460f      	mov	r7, r1
 800a8da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8de:	4622      	mov	r2, r4
 800a8e0:	462b      	mov	r3, r5
 800a8e2:	f7f5 fc41 	bl	8000168 <__aeabi_dsub>
 800a8e6:	4652      	mov	r2, sl
 800a8e8:	465b      	mov	r3, fp
 800a8ea:	f7f5 fdf5 	bl	80004d8 <__aeabi_dmul>
 800a8ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8f2:	4680      	mov	r8, r0
 800a8f4:	4689      	mov	r9, r1
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	f7f5 fded 	bl	80004d8 <__aeabi_dmul>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	4640      	mov	r0, r8
 800a904:	4649      	mov	r1, r9
 800a906:	f7f5 fc31 	bl	800016c <__adddf3>
 800a90a:	4622      	mov	r2, r4
 800a90c:	462b      	mov	r3, r5
 800a90e:	4680      	mov	r8, r0
 800a910:	4689      	mov	r9, r1
 800a912:	4650      	mov	r0, sl
 800a914:	4659      	mov	r1, fp
 800a916:	f7f5 fddf 	bl	80004d8 <__aeabi_dmul>
 800a91a:	4604      	mov	r4, r0
 800a91c:	460d      	mov	r5, r1
 800a91e:	460b      	mov	r3, r1
 800a920:	4602      	mov	r2, r0
 800a922:	4649      	mov	r1, r9
 800a924:	4640      	mov	r0, r8
 800a926:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a92a:	f7f5 fc1f 	bl	800016c <__adddf3>
 800a92e:	4b1a      	ldr	r3, [pc, #104]	; (800a998 <__ieee754_pow+0x3d8>)
 800a930:	4682      	mov	sl, r0
 800a932:	4299      	cmp	r1, r3
 800a934:	460f      	mov	r7, r1
 800a936:	460e      	mov	r6, r1
 800a938:	f340 82e1 	ble.w	800aefe <__ieee754_pow+0x93e>
 800a93c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a940:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a944:	4303      	orrs	r3, r0
 800a946:	f000 81db 	beq.w	800ad00 <__ieee754_pow+0x740>
 800a94a:	a30d      	add	r3, pc, #52	; (adr r3, 800a980 <__ieee754_pow+0x3c0>)
 800a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a950:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a954:	f7f5 fdc0 	bl	80004d8 <__aeabi_dmul>
 800a958:	a309      	add	r3, pc, #36	; (adr r3, 800a980 <__ieee754_pow+0x3c0>)
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	e6c4      	b.n	800a6ea <__ieee754_pow+0x12a>
 800a960:	60000000 	.word	0x60000000
 800a964:	3ff71547 	.word	0x3ff71547
 800a968:	f85ddf44 	.word	0xf85ddf44
 800a96c:	3e54ae0b 	.word	0x3e54ae0b
 800a970:	55555555 	.word	0x55555555
 800a974:	3fd55555 	.word	0x3fd55555
 800a978:	652b82fe 	.word	0x652b82fe
 800a97c:	3ff71547 	.word	0x3ff71547
 800a980:	8800759c 	.word	0x8800759c
 800a984:	7e37e43c 	.word	0x7e37e43c
 800a988:	3ff00000 	.word	0x3ff00000
 800a98c:	3fd00000 	.word	0x3fd00000
 800a990:	3fe00000 	.word	0x3fe00000
 800a994:	bff00000 	.word	0xbff00000
 800a998:	408fffff 	.word	0x408fffff
 800a99c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a9a0:	f04f 0200 	mov.w	r2, #0
 800a9a4:	da08      	bge.n	800a9b8 <__ieee754_pow+0x3f8>
 800a9a6:	4658      	mov	r0, fp
 800a9a8:	4bcd      	ldr	r3, [pc, #820]	; (800ace0 <__ieee754_pow+0x720>)
 800a9aa:	4661      	mov	r1, ip
 800a9ac:	f7f5 fd94 	bl	80004d8 <__aeabi_dmul>
 800a9b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a9b4:	4683      	mov	fp, r0
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	1523      	asrs	r3, r4, #20
 800a9ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a9be:	4413      	add	r3, r2
 800a9c0:	930c      	str	r3, [sp, #48]	; 0x30
 800a9c2:	4bc8      	ldr	r3, [pc, #800]	; (800ace4 <__ieee754_pow+0x724>)
 800a9c4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a9c8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a9cc:	429c      	cmp	r4, r3
 800a9ce:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a9d2:	dd08      	ble.n	800a9e6 <__ieee754_pow+0x426>
 800a9d4:	4bc4      	ldr	r3, [pc, #784]	; (800ace8 <__ieee754_pow+0x728>)
 800a9d6:	429c      	cmp	r4, r3
 800a9d8:	f340 815b 	ble.w	800ac92 <__ieee754_pow+0x6d2>
 800a9dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	930c      	str	r3, [sp, #48]	; 0x30
 800a9e6:	f04f 0800 	mov.w	r8, #0
 800a9ea:	4658      	mov	r0, fp
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	4bbf      	ldr	r3, [pc, #764]	; (800acec <__ieee754_pow+0x72c>)
 800a9f0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800a9f4:	444b      	add	r3, r9
 800a9f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9fa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	4623      	mov	r3, r4
 800aa02:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aa06:	f7f5 fbaf 	bl	8000168 <__aeabi_dsub>
 800aa0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa0e:	4606      	mov	r6, r0
 800aa10:	460f      	mov	r7, r1
 800aa12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa16:	f7f5 fba9 	bl	800016c <__adddf3>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	2000      	movs	r0, #0
 800aa20:	49b3      	ldr	r1, [pc, #716]	; (800acf0 <__ieee754_pow+0x730>)
 800aa22:	f7f5 fe83 	bl	800072c <__aeabi_ddiv>
 800aa26:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	4630      	mov	r0, r6
 800aa30:	4639      	mov	r1, r7
 800aa32:	f7f5 fd51 	bl	80004d8 <__aeabi_dmul>
 800aa36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aa3a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800aa3e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aa42:	2300      	movs	r3, #0
 800aa44:	2200      	movs	r2, #0
 800aa46:	106d      	asrs	r5, r5, #1
 800aa48:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800aa4c:	9304      	str	r3, [sp, #16]
 800aa4e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800aa52:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800aa56:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800aa5a:	4650      	mov	r0, sl
 800aa5c:	4659      	mov	r1, fp
 800aa5e:	4614      	mov	r4, r2
 800aa60:	461d      	mov	r5, r3
 800aa62:	f7f5 fd39 	bl	80004d8 <__aeabi_dmul>
 800aa66:	4602      	mov	r2, r0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	4639      	mov	r1, r7
 800aa6e:	f7f5 fb7b 	bl	8000168 <__aeabi_dsub>
 800aa72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aa76:	4606      	mov	r6, r0
 800aa78:	460f      	mov	r7, r1
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	f7f5 fb73 	bl	8000168 <__aeabi_dsub>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa8a:	f7f5 fb6d 	bl	8000168 <__aeabi_dsub>
 800aa8e:	4652      	mov	r2, sl
 800aa90:	465b      	mov	r3, fp
 800aa92:	f7f5 fd21 	bl	80004d8 <__aeabi_dmul>
 800aa96:	4602      	mov	r2, r0
 800aa98:	460b      	mov	r3, r1
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	4639      	mov	r1, r7
 800aa9e:	f7f5 fb63 	bl	8000168 <__aeabi_dsub>
 800aaa2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800aaa6:	f7f5 fd17 	bl	80004d8 <__aeabi_dmul>
 800aaaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aaae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aab2:	4610      	mov	r0, r2
 800aab4:	4619      	mov	r1, r3
 800aab6:	f7f5 fd0f 	bl	80004d8 <__aeabi_dmul>
 800aaba:	a377      	add	r3, pc, #476	; (adr r3, 800ac98 <__ieee754_pow+0x6d8>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	4604      	mov	r4, r0
 800aac2:	460d      	mov	r5, r1
 800aac4:	f7f5 fd08 	bl	80004d8 <__aeabi_dmul>
 800aac8:	a375      	add	r3, pc, #468	; (adr r3, 800aca0 <__ieee754_pow+0x6e0>)
 800aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aace:	f7f5 fb4d 	bl	800016c <__adddf3>
 800aad2:	4622      	mov	r2, r4
 800aad4:	462b      	mov	r3, r5
 800aad6:	f7f5 fcff 	bl	80004d8 <__aeabi_dmul>
 800aada:	a373      	add	r3, pc, #460	; (adr r3, 800aca8 <__ieee754_pow+0x6e8>)
 800aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae0:	f7f5 fb44 	bl	800016c <__adddf3>
 800aae4:	4622      	mov	r2, r4
 800aae6:	462b      	mov	r3, r5
 800aae8:	f7f5 fcf6 	bl	80004d8 <__aeabi_dmul>
 800aaec:	a370      	add	r3, pc, #448	; (adr r3, 800acb0 <__ieee754_pow+0x6f0>)
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	f7f5 fb3b 	bl	800016c <__adddf3>
 800aaf6:	4622      	mov	r2, r4
 800aaf8:	462b      	mov	r3, r5
 800aafa:	f7f5 fced 	bl	80004d8 <__aeabi_dmul>
 800aafe:	a36e      	add	r3, pc, #440	; (adr r3, 800acb8 <__ieee754_pow+0x6f8>)
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	f7f5 fb32 	bl	800016c <__adddf3>
 800ab08:	4622      	mov	r2, r4
 800ab0a:	462b      	mov	r3, r5
 800ab0c:	f7f5 fce4 	bl	80004d8 <__aeabi_dmul>
 800ab10:	a36b      	add	r3, pc, #428	; (adr r3, 800acc0 <__ieee754_pow+0x700>)
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	f7f5 fb29 	bl	800016c <__adddf3>
 800ab1a:	4622      	mov	r2, r4
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	460f      	mov	r7, r1
 800ab20:	462b      	mov	r3, r5
 800ab22:	4620      	mov	r0, r4
 800ab24:	4629      	mov	r1, r5
 800ab26:	f7f5 fcd7 	bl	80004d8 <__aeabi_dmul>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4630      	mov	r0, r6
 800ab30:	4639      	mov	r1, r7
 800ab32:	f7f5 fcd1 	bl	80004d8 <__aeabi_dmul>
 800ab36:	4604      	mov	r4, r0
 800ab38:	460d      	mov	r5, r1
 800ab3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab3e:	4652      	mov	r2, sl
 800ab40:	465b      	mov	r3, fp
 800ab42:	f7f5 fb13 	bl	800016c <__adddf3>
 800ab46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab4a:	f7f5 fcc5 	bl	80004d8 <__aeabi_dmul>
 800ab4e:	4622      	mov	r2, r4
 800ab50:	462b      	mov	r3, r5
 800ab52:	f7f5 fb0b 	bl	800016c <__adddf3>
 800ab56:	4652      	mov	r2, sl
 800ab58:	4606      	mov	r6, r0
 800ab5a:	460f      	mov	r7, r1
 800ab5c:	465b      	mov	r3, fp
 800ab5e:	4650      	mov	r0, sl
 800ab60:	4659      	mov	r1, fp
 800ab62:	f7f5 fcb9 	bl	80004d8 <__aeabi_dmul>
 800ab66:	2200      	movs	r2, #0
 800ab68:	4b62      	ldr	r3, [pc, #392]	; (800acf4 <__ieee754_pow+0x734>)
 800ab6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ab6e:	f7f5 fafd 	bl	800016c <__adddf3>
 800ab72:	4632      	mov	r2, r6
 800ab74:	463b      	mov	r3, r7
 800ab76:	f7f5 faf9 	bl	800016c <__adddf3>
 800ab7a:	9804      	ldr	r0, [sp, #16]
 800ab7c:	460d      	mov	r5, r1
 800ab7e:	4604      	mov	r4, r0
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	4650      	mov	r0, sl
 800ab86:	4659      	mov	r1, fp
 800ab88:	f7f5 fca6 	bl	80004d8 <__aeabi_dmul>
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	4682      	mov	sl, r0
 800ab90:	468b      	mov	fp, r1
 800ab92:	4b58      	ldr	r3, [pc, #352]	; (800acf4 <__ieee754_pow+0x734>)
 800ab94:	4620      	mov	r0, r4
 800ab96:	4629      	mov	r1, r5
 800ab98:	f7f5 fae6 	bl	8000168 <__aeabi_dsub>
 800ab9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aba0:	f7f5 fae2 	bl	8000168 <__aeabi_dsub>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	4630      	mov	r0, r6
 800abaa:	4639      	mov	r1, r7
 800abac:	f7f5 fadc 	bl	8000168 <__aeabi_dsub>
 800abb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abb4:	f7f5 fc90 	bl	80004d8 <__aeabi_dmul>
 800abb8:	4622      	mov	r2, r4
 800abba:	4606      	mov	r6, r0
 800abbc:	460f      	mov	r7, r1
 800abbe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800abc2:	462b      	mov	r3, r5
 800abc4:	f7f5 fc88 	bl	80004d8 <__aeabi_dmul>
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	4630      	mov	r0, r6
 800abce:	4639      	mov	r1, r7
 800abd0:	f7f5 facc 	bl	800016c <__adddf3>
 800abd4:	4606      	mov	r6, r0
 800abd6:	460f      	mov	r7, r1
 800abd8:	4602      	mov	r2, r0
 800abda:	460b      	mov	r3, r1
 800abdc:	4650      	mov	r0, sl
 800abde:	4659      	mov	r1, fp
 800abe0:	f7f5 fac4 	bl	800016c <__adddf3>
 800abe4:	a338      	add	r3, pc, #224	; (adr r3, 800acc8 <__ieee754_pow+0x708>)
 800abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abea:	9804      	ldr	r0, [sp, #16]
 800abec:	460d      	mov	r5, r1
 800abee:	4604      	mov	r4, r0
 800abf0:	f7f5 fc72 	bl	80004d8 <__aeabi_dmul>
 800abf4:	4652      	mov	r2, sl
 800abf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800abfa:	465b      	mov	r3, fp
 800abfc:	4620      	mov	r0, r4
 800abfe:	4629      	mov	r1, r5
 800ac00:	f7f5 fab2 	bl	8000168 <__aeabi_dsub>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	4630      	mov	r0, r6
 800ac0a:	4639      	mov	r1, r7
 800ac0c:	f7f5 faac 	bl	8000168 <__aeabi_dsub>
 800ac10:	a32f      	add	r3, pc, #188	; (adr r3, 800acd0 <__ieee754_pow+0x710>)
 800ac12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac16:	f7f5 fc5f 	bl	80004d8 <__aeabi_dmul>
 800ac1a:	a32f      	add	r3, pc, #188	; (adr r3, 800acd8 <__ieee754_pow+0x718>)
 800ac1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac20:	4606      	mov	r6, r0
 800ac22:	460f      	mov	r7, r1
 800ac24:	4620      	mov	r0, r4
 800ac26:	4629      	mov	r1, r5
 800ac28:	f7f5 fc56 	bl	80004d8 <__aeabi_dmul>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4630      	mov	r0, r6
 800ac32:	4639      	mov	r1, r7
 800ac34:	f7f5 fa9a 	bl	800016c <__adddf3>
 800ac38:	4b2f      	ldr	r3, [pc, #188]	; (800acf8 <__ieee754_pow+0x738>)
 800ac3a:	444b      	add	r3, r9
 800ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac40:	f7f5 fa94 	bl	800016c <__adddf3>
 800ac44:	4604      	mov	r4, r0
 800ac46:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ac48:	460d      	mov	r5, r1
 800ac4a:	f7f5 fbdb 	bl	8000404 <__aeabi_i2d>
 800ac4e:	4606      	mov	r6, r0
 800ac50:	460f      	mov	r7, r1
 800ac52:	4b2a      	ldr	r3, [pc, #168]	; (800acfc <__ieee754_pow+0x73c>)
 800ac54:	4622      	mov	r2, r4
 800ac56:	444b      	add	r3, r9
 800ac58:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac5c:	462b      	mov	r3, r5
 800ac5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac62:	f7f5 fa83 	bl	800016c <__adddf3>
 800ac66:	4642      	mov	r2, r8
 800ac68:	464b      	mov	r3, r9
 800ac6a:	f7f5 fa7f 	bl	800016c <__adddf3>
 800ac6e:	4632      	mov	r2, r6
 800ac70:	463b      	mov	r3, r7
 800ac72:	f7f5 fa7b 	bl	800016c <__adddf3>
 800ac76:	9804      	ldr	r0, [sp, #16]
 800ac78:	4632      	mov	r2, r6
 800ac7a:	463b      	mov	r3, r7
 800ac7c:	4682      	mov	sl, r0
 800ac7e:	468b      	mov	fp, r1
 800ac80:	f7f5 fa72 	bl	8000168 <__aeabi_dsub>
 800ac84:	4642      	mov	r2, r8
 800ac86:	464b      	mov	r3, r9
 800ac88:	f7f5 fa6e 	bl	8000168 <__aeabi_dsub>
 800ac8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac90:	e60b      	b.n	800a8aa <__ieee754_pow+0x2ea>
 800ac92:	f04f 0801 	mov.w	r8, #1
 800ac96:	e6a8      	b.n	800a9ea <__ieee754_pow+0x42a>
 800ac98:	4a454eef 	.word	0x4a454eef
 800ac9c:	3fca7e28 	.word	0x3fca7e28
 800aca0:	93c9db65 	.word	0x93c9db65
 800aca4:	3fcd864a 	.word	0x3fcd864a
 800aca8:	a91d4101 	.word	0xa91d4101
 800acac:	3fd17460 	.word	0x3fd17460
 800acb0:	518f264d 	.word	0x518f264d
 800acb4:	3fd55555 	.word	0x3fd55555
 800acb8:	db6fabff 	.word	0xdb6fabff
 800acbc:	3fdb6db6 	.word	0x3fdb6db6
 800acc0:	33333303 	.word	0x33333303
 800acc4:	3fe33333 	.word	0x3fe33333
 800acc8:	e0000000 	.word	0xe0000000
 800accc:	3feec709 	.word	0x3feec709
 800acd0:	dc3a03fd 	.word	0xdc3a03fd
 800acd4:	3feec709 	.word	0x3feec709
 800acd8:	145b01f5 	.word	0x145b01f5
 800acdc:	be3e2fe0 	.word	0xbe3e2fe0
 800ace0:	43400000 	.word	0x43400000
 800ace4:	0003988e 	.word	0x0003988e
 800ace8:	000bb679 	.word	0x000bb679
 800acec:	0800d898 	.word	0x0800d898
 800acf0:	3ff00000 	.word	0x3ff00000
 800acf4:	40080000 	.word	0x40080000
 800acf8:	0800d8b8 	.word	0x0800d8b8
 800acfc:	0800d8a8 	.word	0x0800d8a8
 800ad00:	a39b      	add	r3, pc, #620	; (adr r3, 800af70 <__ieee754_pow+0x9b0>)
 800ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad06:	4640      	mov	r0, r8
 800ad08:	4649      	mov	r1, r9
 800ad0a:	f7f5 fa2f 	bl	800016c <__adddf3>
 800ad0e:	4622      	mov	r2, r4
 800ad10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad14:	462b      	mov	r3, r5
 800ad16:	4650      	mov	r0, sl
 800ad18:	4639      	mov	r1, r7
 800ad1a:	f7f5 fa25 	bl	8000168 <__aeabi_dsub>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad26:	f7f5 fe67 	bl	80009f8 <__aeabi_dcmpgt>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	f47f ae0d 	bne.w	800a94a <__ieee754_pow+0x38a>
 800ad30:	4aa3      	ldr	r2, [pc, #652]	; (800afc0 <__ieee754_pow+0xa00>)
 800ad32:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800ad36:	4293      	cmp	r3, r2
 800ad38:	f340 8103 	ble.w	800af42 <__ieee754_pow+0x982>
 800ad3c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ad40:	2000      	movs	r0, #0
 800ad42:	151b      	asrs	r3, r3, #20
 800ad44:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ad48:	fa4a f303 	asr.w	r3, sl, r3
 800ad4c:	4433      	add	r3, r6
 800ad4e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ad52:	4f9c      	ldr	r7, [pc, #624]	; (800afc4 <__ieee754_pow+0xa04>)
 800ad54:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ad58:	4117      	asrs	r7, r2
 800ad5a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ad5e:	ea23 0107 	bic.w	r1, r3, r7
 800ad62:	f1c2 0214 	rsb	r2, r2, #20
 800ad66:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ad6a:	fa4a fa02 	asr.w	sl, sl, r2
 800ad6e:	2e00      	cmp	r6, #0
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	4620      	mov	r0, r4
 800ad76:	4629      	mov	r1, r5
 800ad78:	bfb8      	it	lt
 800ad7a:	f1ca 0a00 	rsblt	sl, sl, #0
 800ad7e:	f7f5 f9f3 	bl	8000168 <__aeabi_dsub>
 800ad82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad8a:	4642      	mov	r2, r8
 800ad8c:	464b      	mov	r3, r9
 800ad8e:	f7f5 f9ed 	bl	800016c <__adddf3>
 800ad92:	a379      	add	r3, pc, #484	; (adr r3, 800af78 <__ieee754_pow+0x9b8>)
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	2000      	movs	r0, #0
 800ad9a:	460d      	mov	r5, r1
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	f7f5 fb9b 	bl	80004d8 <__aeabi_dmul>
 800ada2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ada6:	4606      	mov	r6, r0
 800ada8:	460f      	mov	r7, r1
 800adaa:	4620      	mov	r0, r4
 800adac:	4629      	mov	r1, r5
 800adae:	f7f5 f9db 	bl	8000168 <__aeabi_dsub>
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
 800adb6:	4640      	mov	r0, r8
 800adb8:	4649      	mov	r1, r9
 800adba:	f7f5 f9d5 	bl	8000168 <__aeabi_dsub>
 800adbe:	a370      	add	r3, pc, #448	; (adr r3, 800af80 <__ieee754_pow+0x9c0>)
 800adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc4:	f7f5 fb88 	bl	80004d8 <__aeabi_dmul>
 800adc8:	a36f      	add	r3, pc, #444	; (adr r3, 800af88 <__ieee754_pow+0x9c8>)
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	4680      	mov	r8, r0
 800add0:	4689      	mov	r9, r1
 800add2:	4620      	mov	r0, r4
 800add4:	4629      	mov	r1, r5
 800add6:	f7f5 fb7f 	bl	80004d8 <__aeabi_dmul>
 800adda:	4602      	mov	r2, r0
 800addc:	460b      	mov	r3, r1
 800adde:	4640      	mov	r0, r8
 800ade0:	4649      	mov	r1, r9
 800ade2:	f7f5 f9c3 	bl	800016c <__adddf3>
 800ade6:	4604      	mov	r4, r0
 800ade8:	460d      	mov	r5, r1
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	4630      	mov	r0, r6
 800adf0:	4639      	mov	r1, r7
 800adf2:	f7f5 f9bb 	bl	800016c <__adddf3>
 800adf6:	4632      	mov	r2, r6
 800adf8:	463b      	mov	r3, r7
 800adfa:	4680      	mov	r8, r0
 800adfc:	4689      	mov	r9, r1
 800adfe:	f7f5 f9b3 	bl	8000168 <__aeabi_dsub>
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	4620      	mov	r0, r4
 800ae08:	4629      	mov	r1, r5
 800ae0a:	f7f5 f9ad 	bl	8000168 <__aeabi_dsub>
 800ae0e:	4642      	mov	r2, r8
 800ae10:	4606      	mov	r6, r0
 800ae12:	460f      	mov	r7, r1
 800ae14:	464b      	mov	r3, r9
 800ae16:	4640      	mov	r0, r8
 800ae18:	4649      	mov	r1, r9
 800ae1a:	f7f5 fb5d 	bl	80004d8 <__aeabi_dmul>
 800ae1e:	a35c      	add	r3, pc, #368	; (adr r3, 800af90 <__ieee754_pow+0x9d0>)
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	4604      	mov	r4, r0
 800ae26:	460d      	mov	r5, r1
 800ae28:	f7f5 fb56 	bl	80004d8 <__aeabi_dmul>
 800ae2c:	a35a      	add	r3, pc, #360	; (adr r3, 800af98 <__ieee754_pow+0x9d8>)
 800ae2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae32:	f7f5 f999 	bl	8000168 <__aeabi_dsub>
 800ae36:	4622      	mov	r2, r4
 800ae38:	462b      	mov	r3, r5
 800ae3a:	f7f5 fb4d 	bl	80004d8 <__aeabi_dmul>
 800ae3e:	a358      	add	r3, pc, #352	; (adr r3, 800afa0 <__ieee754_pow+0x9e0>)
 800ae40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae44:	f7f5 f992 	bl	800016c <__adddf3>
 800ae48:	4622      	mov	r2, r4
 800ae4a:	462b      	mov	r3, r5
 800ae4c:	f7f5 fb44 	bl	80004d8 <__aeabi_dmul>
 800ae50:	a355      	add	r3, pc, #340	; (adr r3, 800afa8 <__ieee754_pow+0x9e8>)
 800ae52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae56:	f7f5 f987 	bl	8000168 <__aeabi_dsub>
 800ae5a:	4622      	mov	r2, r4
 800ae5c:	462b      	mov	r3, r5
 800ae5e:	f7f5 fb3b 	bl	80004d8 <__aeabi_dmul>
 800ae62:	a353      	add	r3, pc, #332	; (adr r3, 800afb0 <__ieee754_pow+0x9f0>)
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	f7f5 f980 	bl	800016c <__adddf3>
 800ae6c:	4622      	mov	r2, r4
 800ae6e:	462b      	mov	r3, r5
 800ae70:	f7f5 fb32 	bl	80004d8 <__aeabi_dmul>
 800ae74:	4602      	mov	r2, r0
 800ae76:	460b      	mov	r3, r1
 800ae78:	4640      	mov	r0, r8
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	f7f5 f974 	bl	8000168 <__aeabi_dsub>
 800ae80:	4604      	mov	r4, r0
 800ae82:	460d      	mov	r5, r1
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	4640      	mov	r0, r8
 800ae8a:	4649      	mov	r1, r9
 800ae8c:	f7f5 fb24 	bl	80004d8 <__aeabi_dmul>
 800ae90:	2200      	movs	r2, #0
 800ae92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	f7f5 f963 	bl	8000168 <__aeabi_dsub>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeaa:	f7f5 fc3f 	bl	800072c <__aeabi_ddiv>
 800aeae:	4632      	mov	r2, r6
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	460d      	mov	r5, r1
 800aeb4:	463b      	mov	r3, r7
 800aeb6:	4640      	mov	r0, r8
 800aeb8:	4649      	mov	r1, r9
 800aeba:	f7f5 fb0d 	bl	80004d8 <__aeabi_dmul>
 800aebe:	4632      	mov	r2, r6
 800aec0:	463b      	mov	r3, r7
 800aec2:	f7f5 f953 	bl	800016c <__adddf3>
 800aec6:	4602      	mov	r2, r0
 800aec8:	460b      	mov	r3, r1
 800aeca:	4620      	mov	r0, r4
 800aecc:	4629      	mov	r1, r5
 800aece:	f7f5 f94b 	bl	8000168 <__aeabi_dsub>
 800aed2:	4642      	mov	r2, r8
 800aed4:	464b      	mov	r3, r9
 800aed6:	f7f5 f947 	bl	8000168 <__aeabi_dsub>
 800aeda:	4602      	mov	r2, r0
 800aedc:	460b      	mov	r3, r1
 800aede:	2000      	movs	r0, #0
 800aee0:	4939      	ldr	r1, [pc, #228]	; (800afc8 <__ieee754_pow+0xa08>)
 800aee2:	f7f5 f941 	bl	8000168 <__aeabi_dsub>
 800aee6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800aeea:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800aeee:	da2b      	bge.n	800af48 <__ieee754_pow+0x988>
 800aef0:	4652      	mov	r2, sl
 800aef2:	f001 f8ed 	bl	800c0d0 <scalbn>
 800aef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aefa:	f7ff bbf6 	b.w	800a6ea <__ieee754_pow+0x12a>
 800aefe:	4b33      	ldr	r3, [pc, #204]	; (800afcc <__ieee754_pow+0xa0c>)
 800af00:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800af04:	429f      	cmp	r7, r3
 800af06:	f77f af13 	ble.w	800ad30 <__ieee754_pow+0x770>
 800af0a:	4b31      	ldr	r3, [pc, #196]	; (800afd0 <__ieee754_pow+0xa10>)
 800af0c:	440b      	add	r3, r1
 800af0e:	4303      	orrs	r3, r0
 800af10:	d00b      	beq.n	800af2a <__ieee754_pow+0x96a>
 800af12:	a329      	add	r3, pc, #164	; (adr r3, 800afb8 <__ieee754_pow+0x9f8>)
 800af14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af1c:	f7f5 fadc 	bl	80004d8 <__aeabi_dmul>
 800af20:	a325      	add	r3, pc, #148	; (adr r3, 800afb8 <__ieee754_pow+0x9f8>)
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	f7ff bbe0 	b.w	800a6ea <__ieee754_pow+0x12a>
 800af2a:	4622      	mov	r2, r4
 800af2c:	462b      	mov	r3, r5
 800af2e:	f7f5 f91b 	bl	8000168 <__aeabi_dsub>
 800af32:	4642      	mov	r2, r8
 800af34:	464b      	mov	r3, r9
 800af36:	f7f5 fd55 	bl	80009e4 <__aeabi_dcmpge>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	f43f aef8 	beq.w	800ad30 <__ieee754_pow+0x770>
 800af40:	e7e7      	b.n	800af12 <__ieee754_pow+0x952>
 800af42:	f04f 0a00 	mov.w	sl, #0
 800af46:	e71e      	b.n	800ad86 <__ieee754_pow+0x7c6>
 800af48:	4621      	mov	r1, r4
 800af4a:	e7d4      	b.n	800aef6 <__ieee754_pow+0x936>
 800af4c:	f04f 0b00 	mov.w	fp, #0
 800af50:	f8df c074 	ldr.w	ip, [pc, #116]	; 800afc8 <__ieee754_pow+0xa08>
 800af54:	f7ff bb95 	b.w	800a682 <__ieee754_pow+0xc2>
 800af58:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800af5c:	f7ff bb91 	b.w	800a682 <__ieee754_pow+0xc2>
 800af60:	4638      	mov	r0, r7
 800af62:	4641      	mov	r1, r8
 800af64:	f7ff bbc3 	b.w	800a6ee <__ieee754_pow+0x12e>
 800af68:	9200      	str	r2, [sp, #0]
 800af6a:	f7ff bb9f 	b.w	800a6ac <__ieee754_pow+0xec>
 800af6e:	bf00      	nop
 800af70:	652b82fe 	.word	0x652b82fe
 800af74:	3c971547 	.word	0x3c971547
 800af78:	00000000 	.word	0x00000000
 800af7c:	3fe62e43 	.word	0x3fe62e43
 800af80:	fefa39ef 	.word	0xfefa39ef
 800af84:	3fe62e42 	.word	0x3fe62e42
 800af88:	0ca86c39 	.word	0x0ca86c39
 800af8c:	be205c61 	.word	0xbe205c61
 800af90:	72bea4d0 	.word	0x72bea4d0
 800af94:	3e663769 	.word	0x3e663769
 800af98:	c5d26bf1 	.word	0xc5d26bf1
 800af9c:	3ebbbd41 	.word	0x3ebbbd41
 800afa0:	af25de2c 	.word	0xaf25de2c
 800afa4:	3f11566a 	.word	0x3f11566a
 800afa8:	16bebd93 	.word	0x16bebd93
 800afac:	3f66c16c 	.word	0x3f66c16c
 800afb0:	5555553e 	.word	0x5555553e
 800afb4:	3fc55555 	.word	0x3fc55555
 800afb8:	c2f8f359 	.word	0xc2f8f359
 800afbc:	01a56e1f 	.word	0x01a56e1f
 800afc0:	3fe00000 	.word	0x3fe00000
 800afc4:	000fffff 	.word	0x000fffff
 800afc8:	3ff00000 	.word	0x3ff00000
 800afcc:	4090cbff 	.word	0x4090cbff
 800afd0:	3f6f3400 	.word	0x3f6f3400
 800afd4:	00000000 	.word	0x00000000

0800afd8 <__ieee754_rem_pio2>:
 800afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afdc:	4614      	mov	r4, r2
 800afde:	4ac2      	ldr	r2, [pc, #776]	; (800b2e8 <__ieee754_rem_pio2+0x310>)
 800afe0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800afe4:	4592      	cmp	sl, r2
 800afe6:	b08d      	sub	sp, #52	; 0x34
 800afe8:	468b      	mov	fp, r1
 800afea:	dc07      	bgt.n	800affc <__ieee754_rem_pio2+0x24>
 800afec:	2200      	movs	r2, #0
 800afee:	2300      	movs	r3, #0
 800aff0:	e9c4 0100 	strd	r0, r1, [r4]
 800aff4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800aff8:	2500      	movs	r5, #0
 800affa:	e023      	b.n	800b044 <__ieee754_rem_pio2+0x6c>
 800affc:	4abb      	ldr	r2, [pc, #748]	; (800b2ec <__ieee754_rem_pio2+0x314>)
 800affe:	4592      	cmp	sl, r2
 800b000:	dc71      	bgt.n	800b0e6 <__ieee754_rem_pio2+0x10e>
 800b002:	a3ab      	add	r3, pc, #684	; (adr r3, 800b2b0 <__ieee754_rem_pio2+0x2d8>)
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	2900      	cmp	r1, #0
 800b00a:	4db9      	ldr	r5, [pc, #740]	; (800b2f0 <__ieee754_rem_pio2+0x318>)
 800b00c:	dd36      	ble.n	800b07c <__ieee754_rem_pio2+0xa4>
 800b00e:	f7f5 f8ab 	bl	8000168 <__aeabi_dsub>
 800b012:	45aa      	cmp	sl, r5
 800b014:	4606      	mov	r6, r0
 800b016:	460f      	mov	r7, r1
 800b018:	d018      	beq.n	800b04c <__ieee754_rem_pio2+0x74>
 800b01a:	a3a7      	add	r3, pc, #668	; (adr r3, 800b2b8 <__ieee754_rem_pio2+0x2e0>)
 800b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b020:	f7f5 f8a2 	bl	8000168 <__aeabi_dsub>
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	4630      	mov	r0, r6
 800b02a:	e9c4 2300 	strd	r2, r3, [r4]
 800b02e:	4639      	mov	r1, r7
 800b030:	f7f5 f89a 	bl	8000168 <__aeabi_dsub>
 800b034:	a3a0      	add	r3, pc, #640	; (adr r3, 800b2b8 <__ieee754_rem_pio2+0x2e0>)
 800b036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03a:	f7f5 f895 	bl	8000168 <__aeabi_dsub>
 800b03e:	2501      	movs	r5, #1
 800b040:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b044:	4628      	mov	r0, r5
 800b046:	b00d      	add	sp, #52	; 0x34
 800b048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04c:	a39c      	add	r3, pc, #624	; (adr r3, 800b2c0 <__ieee754_rem_pio2+0x2e8>)
 800b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b052:	f7f5 f889 	bl	8000168 <__aeabi_dsub>
 800b056:	a39c      	add	r3, pc, #624	; (adr r3, 800b2c8 <__ieee754_rem_pio2+0x2f0>)
 800b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05c:	4606      	mov	r6, r0
 800b05e:	460f      	mov	r7, r1
 800b060:	f7f5 f882 	bl	8000168 <__aeabi_dsub>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	4630      	mov	r0, r6
 800b06a:	e9c4 2300 	strd	r2, r3, [r4]
 800b06e:	4639      	mov	r1, r7
 800b070:	f7f5 f87a 	bl	8000168 <__aeabi_dsub>
 800b074:	a394      	add	r3, pc, #592	; (adr r3, 800b2c8 <__ieee754_rem_pio2+0x2f0>)
 800b076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07a:	e7de      	b.n	800b03a <__ieee754_rem_pio2+0x62>
 800b07c:	f7f5 f876 	bl	800016c <__adddf3>
 800b080:	45aa      	cmp	sl, r5
 800b082:	4606      	mov	r6, r0
 800b084:	460f      	mov	r7, r1
 800b086:	d016      	beq.n	800b0b6 <__ieee754_rem_pio2+0xde>
 800b088:	a38b      	add	r3, pc, #556	; (adr r3, 800b2b8 <__ieee754_rem_pio2+0x2e0>)
 800b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08e:	f7f5 f86d 	bl	800016c <__adddf3>
 800b092:	4602      	mov	r2, r0
 800b094:	460b      	mov	r3, r1
 800b096:	4630      	mov	r0, r6
 800b098:	e9c4 2300 	strd	r2, r3, [r4]
 800b09c:	4639      	mov	r1, r7
 800b09e:	f7f5 f863 	bl	8000168 <__aeabi_dsub>
 800b0a2:	a385      	add	r3, pc, #532	; (adr r3, 800b2b8 <__ieee754_rem_pio2+0x2e0>)
 800b0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a8:	f7f5 f860 	bl	800016c <__adddf3>
 800b0ac:	f04f 35ff 	mov.w	r5, #4294967295
 800b0b0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b0b4:	e7c6      	b.n	800b044 <__ieee754_rem_pio2+0x6c>
 800b0b6:	a382      	add	r3, pc, #520	; (adr r3, 800b2c0 <__ieee754_rem_pio2+0x2e8>)
 800b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0bc:	f7f5 f856 	bl	800016c <__adddf3>
 800b0c0:	a381      	add	r3, pc, #516	; (adr r3, 800b2c8 <__ieee754_rem_pio2+0x2f0>)
 800b0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	460f      	mov	r7, r1
 800b0ca:	f7f5 f84f 	bl	800016c <__adddf3>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	e9c4 2300 	strd	r2, r3, [r4]
 800b0d8:	4639      	mov	r1, r7
 800b0da:	f7f5 f845 	bl	8000168 <__aeabi_dsub>
 800b0de:	a37a      	add	r3, pc, #488	; (adr r3, 800b2c8 <__ieee754_rem_pio2+0x2f0>)
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	e7e0      	b.n	800b0a8 <__ieee754_rem_pio2+0xd0>
 800b0e6:	4a83      	ldr	r2, [pc, #524]	; (800b2f4 <__ieee754_rem_pio2+0x31c>)
 800b0e8:	4592      	cmp	sl, r2
 800b0ea:	f300 80d2 	bgt.w	800b292 <__ieee754_rem_pio2+0x2ba>
 800b0ee:	f000 fecd 	bl	800be8c <fabs>
 800b0f2:	a377      	add	r3, pc, #476	; (adr r3, 800b2d0 <__ieee754_rem_pio2+0x2f8>)
 800b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f8:	4606      	mov	r6, r0
 800b0fa:	460f      	mov	r7, r1
 800b0fc:	f7f5 f9ec 	bl	80004d8 <__aeabi_dmul>
 800b100:	2200      	movs	r2, #0
 800b102:	4b7d      	ldr	r3, [pc, #500]	; (800b2f8 <__ieee754_rem_pio2+0x320>)
 800b104:	f7f5 f832 	bl	800016c <__adddf3>
 800b108:	f7f5 fc96 	bl	8000a38 <__aeabi_d2iz>
 800b10c:	4605      	mov	r5, r0
 800b10e:	f7f5 f979 	bl	8000404 <__aeabi_i2d>
 800b112:	a367      	add	r3, pc, #412	; (adr r3, 800b2b0 <__ieee754_rem_pio2+0x2d8>)
 800b114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b11c:	f7f5 f9dc 	bl	80004d8 <__aeabi_dmul>
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	4630      	mov	r0, r6
 800b126:	4639      	mov	r1, r7
 800b128:	f7f5 f81e 	bl	8000168 <__aeabi_dsub>
 800b12c:	a362      	add	r3, pc, #392	; (adr r3, 800b2b8 <__ieee754_rem_pio2+0x2e0>)
 800b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b132:	4606      	mov	r6, r0
 800b134:	460f      	mov	r7, r1
 800b136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b13a:	f7f5 f9cd 	bl	80004d8 <__aeabi_dmul>
 800b13e:	2d1f      	cmp	r5, #31
 800b140:	4680      	mov	r8, r0
 800b142:	4689      	mov	r9, r1
 800b144:	dc0e      	bgt.n	800b164 <__ieee754_rem_pio2+0x18c>
 800b146:	4b6d      	ldr	r3, [pc, #436]	; (800b2fc <__ieee754_rem_pio2+0x324>)
 800b148:	1e6a      	subs	r2, r5, #1
 800b14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b14e:	4553      	cmp	r3, sl
 800b150:	d008      	beq.n	800b164 <__ieee754_rem_pio2+0x18c>
 800b152:	4642      	mov	r2, r8
 800b154:	464b      	mov	r3, r9
 800b156:	4630      	mov	r0, r6
 800b158:	4639      	mov	r1, r7
 800b15a:	f7f5 f805 	bl	8000168 <__aeabi_dsub>
 800b15e:	e9c4 0100 	strd	r0, r1, [r4]
 800b162:	e011      	b.n	800b188 <__ieee754_rem_pio2+0x1b0>
 800b164:	464b      	mov	r3, r9
 800b166:	4642      	mov	r2, r8
 800b168:	4630      	mov	r0, r6
 800b16a:	4639      	mov	r1, r7
 800b16c:	f7f4 fffc 	bl	8000168 <__aeabi_dsub>
 800b170:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b174:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b178:	ebaa 0303 	sub.w	r3, sl, r3
 800b17c:	2b10      	cmp	r3, #16
 800b17e:	dc1f      	bgt.n	800b1c0 <__ieee754_rem_pio2+0x1e8>
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	e9c4 2300 	strd	r2, r3, [r4]
 800b188:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800b18c:	4630      	mov	r0, r6
 800b18e:	4653      	mov	r3, sl
 800b190:	4639      	mov	r1, r7
 800b192:	f7f4 ffe9 	bl	8000168 <__aeabi_dsub>
 800b196:	4642      	mov	r2, r8
 800b198:	464b      	mov	r3, r9
 800b19a:	f7f4 ffe5 	bl	8000168 <__aeabi_dsub>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	f1bb 0f00 	cmp.w	fp, #0
 800b1a6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b1aa:	f6bf af4b 	bge.w	800b044 <__ieee754_rem_pio2+0x6c>
 800b1ae:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800b1b2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800b1b6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b1ba:	60e1      	str	r1, [r4, #12]
 800b1bc:	426d      	negs	r5, r5
 800b1be:	e741      	b.n	800b044 <__ieee754_rem_pio2+0x6c>
 800b1c0:	a33f      	add	r3, pc, #252	; (adr r3, 800b2c0 <__ieee754_rem_pio2+0x2e8>)
 800b1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1ca:	f7f5 f985 	bl	80004d8 <__aeabi_dmul>
 800b1ce:	4680      	mov	r8, r0
 800b1d0:	4689      	mov	r9, r1
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	4639      	mov	r1, r7
 800b1da:	f7f4 ffc5 	bl	8000168 <__aeabi_dsub>
 800b1de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	4639      	mov	r1, r7
 800b1ea:	f7f4 ffbd 	bl	8000168 <__aeabi_dsub>
 800b1ee:	4642      	mov	r2, r8
 800b1f0:	464b      	mov	r3, r9
 800b1f2:	f7f4 ffb9 	bl	8000168 <__aeabi_dsub>
 800b1f6:	a334      	add	r3, pc, #208	; (adr r3, 800b2c8 <__ieee754_rem_pio2+0x2f0>)
 800b1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fc:	4606      	mov	r6, r0
 800b1fe:	460f      	mov	r7, r1
 800b200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b204:	f7f5 f968 	bl	80004d8 <__aeabi_dmul>
 800b208:	4632      	mov	r2, r6
 800b20a:	463b      	mov	r3, r7
 800b20c:	f7f4 ffac 	bl	8000168 <__aeabi_dsub>
 800b210:	460b      	mov	r3, r1
 800b212:	4602      	mov	r2, r0
 800b214:	4680      	mov	r8, r0
 800b216:	4689      	mov	r9, r1
 800b218:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b21c:	f7f4 ffa4 	bl	8000168 <__aeabi_dsub>
 800b220:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b224:	ebaa 0a03 	sub.w	sl, sl, r3
 800b228:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800b22c:	dc06      	bgt.n	800b23c <__ieee754_rem_pio2+0x264>
 800b22e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800b232:	4602      	mov	r2, r0
 800b234:	460b      	mov	r3, r1
 800b236:	e9c4 2300 	strd	r2, r3, [r4]
 800b23a:	e7a5      	b.n	800b188 <__ieee754_rem_pio2+0x1b0>
 800b23c:	a326      	add	r3, pc, #152	; (adr r3, 800b2d8 <__ieee754_rem_pio2+0x300>)
 800b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b246:	f7f5 f947 	bl	80004d8 <__aeabi_dmul>
 800b24a:	4680      	mov	r8, r0
 800b24c:	4689      	mov	r9, r1
 800b24e:	4602      	mov	r2, r0
 800b250:	460b      	mov	r3, r1
 800b252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b256:	f7f4 ff87 	bl	8000168 <__aeabi_dsub>
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	4606      	mov	r6, r0
 800b260:	460f      	mov	r7, r1
 800b262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b266:	f7f4 ff7f 	bl	8000168 <__aeabi_dsub>
 800b26a:	4642      	mov	r2, r8
 800b26c:	464b      	mov	r3, r9
 800b26e:	f7f4 ff7b 	bl	8000168 <__aeabi_dsub>
 800b272:	a31b      	add	r3, pc, #108	; (adr r3, 800b2e0 <__ieee754_rem_pio2+0x308>)
 800b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b278:	4680      	mov	r8, r0
 800b27a:	4689      	mov	r9, r1
 800b27c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b280:	f7f5 f92a 	bl	80004d8 <__aeabi_dmul>
 800b284:	4642      	mov	r2, r8
 800b286:	464b      	mov	r3, r9
 800b288:	f7f4 ff6e 	bl	8000168 <__aeabi_dsub>
 800b28c:	4680      	mov	r8, r0
 800b28e:	4689      	mov	r9, r1
 800b290:	e75f      	b.n	800b152 <__ieee754_rem_pio2+0x17a>
 800b292:	4a1b      	ldr	r2, [pc, #108]	; (800b300 <__ieee754_rem_pio2+0x328>)
 800b294:	4592      	cmp	sl, r2
 800b296:	dd35      	ble.n	800b304 <__ieee754_rem_pio2+0x32c>
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	f7f4 ff64 	bl	8000168 <__aeabi_dsub>
 800b2a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2a4:	e9c4 0100 	strd	r0, r1, [r4]
 800b2a8:	e6a6      	b.n	800aff8 <__ieee754_rem_pio2+0x20>
 800b2aa:	bf00      	nop
 800b2ac:	f3af 8000 	nop.w
 800b2b0:	54400000 	.word	0x54400000
 800b2b4:	3ff921fb 	.word	0x3ff921fb
 800b2b8:	1a626331 	.word	0x1a626331
 800b2bc:	3dd0b461 	.word	0x3dd0b461
 800b2c0:	1a600000 	.word	0x1a600000
 800b2c4:	3dd0b461 	.word	0x3dd0b461
 800b2c8:	2e037073 	.word	0x2e037073
 800b2cc:	3ba3198a 	.word	0x3ba3198a
 800b2d0:	6dc9c883 	.word	0x6dc9c883
 800b2d4:	3fe45f30 	.word	0x3fe45f30
 800b2d8:	2e000000 	.word	0x2e000000
 800b2dc:	3ba3198a 	.word	0x3ba3198a
 800b2e0:	252049c1 	.word	0x252049c1
 800b2e4:	397b839a 	.word	0x397b839a
 800b2e8:	3fe921fb 	.word	0x3fe921fb
 800b2ec:	4002d97b 	.word	0x4002d97b
 800b2f0:	3ff921fb 	.word	0x3ff921fb
 800b2f4:	413921fb 	.word	0x413921fb
 800b2f8:	3fe00000 	.word	0x3fe00000
 800b2fc:	0800d8c8 	.word	0x0800d8c8
 800b300:	7fefffff 	.word	0x7fefffff
 800b304:	ea4f 552a 	mov.w	r5, sl, asr #20
 800b308:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b30c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800b310:	460f      	mov	r7, r1
 800b312:	4606      	mov	r6, r0
 800b314:	f7f5 fb90 	bl	8000a38 <__aeabi_d2iz>
 800b318:	f7f5 f874 	bl	8000404 <__aeabi_i2d>
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	4630      	mov	r0, r6
 800b322:	4639      	mov	r1, r7
 800b324:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b328:	f7f4 ff1e 	bl	8000168 <__aeabi_dsub>
 800b32c:	2200      	movs	r2, #0
 800b32e:	4b20      	ldr	r3, [pc, #128]	; (800b3b0 <__ieee754_rem_pio2+0x3d8>)
 800b330:	f7f5 f8d2 	bl	80004d8 <__aeabi_dmul>
 800b334:	460f      	mov	r7, r1
 800b336:	4606      	mov	r6, r0
 800b338:	f7f5 fb7e 	bl	8000a38 <__aeabi_d2iz>
 800b33c:	f7f5 f862 	bl	8000404 <__aeabi_i2d>
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	4630      	mov	r0, r6
 800b346:	4639      	mov	r1, r7
 800b348:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b34c:	f7f4 ff0c 	bl	8000168 <__aeabi_dsub>
 800b350:	2200      	movs	r2, #0
 800b352:	4b17      	ldr	r3, [pc, #92]	; (800b3b0 <__ieee754_rem_pio2+0x3d8>)
 800b354:	f7f5 f8c0 	bl	80004d8 <__aeabi_dmul>
 800b358:	f04f 0803 	mov.w	r8, #3
 800b35c:	2600      	movs	r6, #0
 800b35e:	2700      	movs	r7, #0
 800b360:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b364:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b368:	4632      	mov	r2, r6
 800b36a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b36e:	463b      	mov	r3, r7
 800b370:	f108 3aff 	add.w	sl, r8, #4294967295
 800b374:	f7f5 fb18 	bl	80009a8 <__aeabi_dcmpeq>
 800b378:	b9b8      	cbnz	r0, 800b3aa <__ieee754_rem_pio2+0x3d2>
 800b37a:	4b0e      	ldr	r3, [pc, #56]	; (800b3b4 <__ieee754_rem_pio2+0x3dc>)
 800b37c:	462a      	mov	r2, r5
 800b37e:	9301      	str	r3, [sp, #4]
 800b380:	2302      	movs	r3, #2
 800b382:	4621      	mov	r1, r4
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	a806      	add	r0, sp, #24
 800b388:	4643      	mov	r3, r8
 800b38a:	f000 f97f 	bl	800b68c <__kernel_rem_pio2>
 800b38e:	f1bb 0f00 	cmp.w	fp, #0
 800b392:	4605      	mov	r5, r0
 800b394:	f6bf ae56 	bge.w	800b044 <__ieee754_rem_pio2+0x6c>
 800b398:	6863      	ldr	r3, [r4, #4]
 800b39a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b39e:	6063      	str	r3, [r4, #4]
 800b3a0:	68e3      	ldr	r3, [r4, #12]
 800b3a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b3a6:	60e3      	str	r3, [r4, #12]
 800b3a8:	e708      	b.n	800b1bc <__ieee754_rem_pio2+0x1e4>
 800b3aa:	46d0      	mov	r8, sl
 800b3ac:	e7dc      	b.n	800b368 <__ieee754_rem_pio2+0x390>
 800b3ae:	bf00      	nop
 800b3b0:	41700000 	.word	0x41700000
 800b3b4:	0800d948 	.word	0x0800d948

0800b3b8 <__ieee754_sqrt>:
 800b3b8:	4b54      	ldr	r3, [pc, #336]	; (800b50c <__ieee754_sqrt+0x154>)
 800b3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3be:	438b      	bics	r3, r1
 800b3c0:	4606      	mov	r6, r0
 800b3c2:	460d      	mov	r5, r1
 800b3c4:	460a      	mov	r2, r1
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	d10f      	bne.n	800b3ea <__ieee754_sqrt+0x32>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	f7f5 f883 	bl	80004d8 <__aeabi_dmul>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	4629      	mov	r1, r5
 800b3da:	f7f4 fec7 	bl	800016c <__adddf3>
 800b3de:	4606      	mov	r6, r0
 800b3e0:	460d      	mov	r5, r1
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ea:	2900      	cmp	r1, #0
 800b3ec:	4607      	mov	r7, r0
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	dc0e      	bgt.n	800b410 <__ieee754_sqrt+0x58>
 800b3f2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b3f6:	ea5c 0707 	orrs.w	r7, ip, r7
 800b3fa:	d0f2      	beq.n	800b3e2 <__ieee754_sqrt+0x2a>
 800b3fc:	b141      	cbz	r1, 800b410 <__ieee754_sqrt+0x58>
 800b3fe:	4602      	mov	r2, r0
 800b400:	460b      	mov	r3, r1
 800b402:	f7f4 feb1 	bl	8000168 <__aeabi_dsub>
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	f7f5 f98f 	bl	800072c <__aeabi_ddiv>
 800b40e:	e7e6      	b.n	800b3de <__ieee754_sqrt+0x26>
 800b410:	1512      	asrs	r2, r2, #20
 800b412:	d074      	beq.n	800b4fe <__ieee754_sqrt+0x146>
 800b414:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b418:	07d5      	lsls	r5, r2, #31
 800b41a:	f04f 0500 	mov.w	r5, #0
 800b41e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b422:	bf48      	it	mi
 800b424:	0fd9      	lsrmi	r1, r3, #31
 800b426:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800b42a:	bf44      	itt	mi
 800b42c:	005b      	lslmi	r3, r3, #1
 800b42e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800b432:	1051      	asrs	r1, r2, #1
 800b434:	0fda      	lsrs	r2, r3, #31
 800b436:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b43a:	4628      	mov	r0, r5
 800b43c:	2216      	movs	r2, #22
 800b43e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b442:	005b      	lsls	r3, r3, #1
 800b444:	1987      	adds	r7, r0, r6
 800b446:	42a7      	cmp	r7, r4
 800b448:	bfde      	ittt	le
 800b44a:	19b8      	addle	r0, r7, r6
 800b44c:	1be4      	suble	r4, r4, r7
 800b44e:	19ad      	addle	r5, r5, r6
 800b450:	0fdf      	lsrs	r7, r3, #31
 800b452:	3a01      	subs	r2, #1
 800b454:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800b458:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b45c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b460:	d1f0      	bne.n	800b444 <__ieee754_sqrt+0x8c>
 800b462:	f04f 0c20 	mov.w	ip, #32
 800b466:	4696      	mov	lr, r2
 800b468:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b46c:	4284      	cmp	r4, r0
 800b46e:	eb06 070e 	add.w	r7, r6, lr
 800b472:	dc02      	bgt.n	800b47a <__ieee754_sqrt+0xc2>
 800b474:	d112      	bne.n	800b49c <__ieee754_sqrt+0xe4>
 800b476:	429f      	cmp	r7, r3
 800b478:	d810      	bhi.n	800b49c <__ieee754_sqrt+0xe4>
 800b47a:	2f00      	cmp	r7, #0
 800b47c:	eb07 0e06 	add.w	lr, r7, r6
 800b480:	da42      	bge.n	800b508 <__ieee754_sqrt+0x150>
 800b482:	f1be 0f00 	cmp.w	lr, #0
 800b486:	db3f      	blt.n	800b508 <__ieee754_sqrt+0x150>
 800b488:	f100 0801 	add.w	r8, r0, #1
 800b48c:	1a24      	subs	r4, r4, r0
 800b48e:	4640      	mov	r0, r8
 800b490:	429f      	cmp	r7, r3
 800b492:	bf88      	it	hi
 800b494:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800b498:	1bdb      	subs	r3, r3, r7
 800b49a:	4432      	add	r2, r6
 800b49c:	0064      	lsls	r4, r4, #1
 800b49e:	f1bc 0c01 	subs.w	ip, ip, #1
 800b4a2:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800b4a6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b4aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b4ae:	d1dd      	bne.n	800b46c <__ieee754_sqrt+0xb4>
 800b4b0:	4323      	orrs	r3, r4
 800b4b2:	d006      	beq.n	800b4c2 <__ieee754_sqrt+0x10a>
 800b4b4:	1c54      	adds	r4, r2, #1
 800b4b6:	bf0b      	itete	eq
 800b4b8:	4662      	moveq	r2, ip
 800b4ba:	3201      	addne	r2, #1
 800b4bc:	3501      	addeq	r5, #1
 800b4be:	f022 0201 	bicne.w	r2, r2, #1
 800b4c2:	106b      	asrs	r3, r5, #1
 800b4c4:	0852      	lsrs	r2, r2, #1
 800b4c6:	07e8      	lsls	r0, r5, #31
 800b4c8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b4cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b4d0:	bf48      	it	mi
 800b4d2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b4d6:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800b4da:	4616      	mov	r6, r2
 800b4dc:	e781      	b.n	800b3e2 <__ieee754_sqrt+0x2a>
 800b4de:	0adc      	lsrs	r4, r3, #11
 800b4e0:	3915      	subs	r1, #21
 800b4e2:	055b      	lsls	r3, r3, #21
 800b4e4:	2c00      	cmp	r4, #0
 800b4e6:	d0fa      	beq.n	800b4de <__ieee754_sqrt+0x126>
 800b4e8:	02e6      	lsls	r6, r4, #11
 800b4ea:	d50a      	bpl.n	800b502 <__ieee754_sqrt+0x14a>
 800b4ec:	f1c2 0020 	rsb	r0, r2, #32
 800b4f0:	fa23 f000 	lsr.w	r0, r3, r0
 800b4f4:	1e55      	subs	r5, r2, #1
 800b4f6:	4093      	lsls	r3, r2
 800b4f8:	4304      	orrs	r4, r0
 800b4fa:	1b4a      	subs	r2, r1, r5
 800b4fc:	e78a      	b.n	800b414 <__ieee754_sqrt+0x5c>
 800b4fe:	4611      	mov	r1, r2
 800b500:	e7f0      	b.n	800b4e4 <__ieee754_sqrt+0x12c>
 800b502:	0064      	lsls	r4, r4, #1
 800b504:	3201      	adds	r2, #1
 800b506:	e7ef      	b.n	800b4e8 <__ieee754_sqrt+0x130>
 800b508:	4680      	mov	r8, r0
 800b50a:	e7bf      	b.n	800b48c <__ieee754_sqrt+0xd4>
 800b50c:	7ff00000 	.word	0x7ff00000

0800b510 <__kernel_cos>:
 800b510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b518:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b51c:	4680      	mov	r8, r0
 800b51e:	460f      	mov	r7, r1
 800b520:	e9cd 2300 	strd	r2, r3, [sp]
 800b524:	da04      	bge.n	800b530 <__kernel_cos+0x20>
 800b526:	f7f5 fa87 	bl	8000a38 <__aeabi_d2iz>
 800b52a:	2800      	cmp	r0, #0
 800b52c:	f000 8086 	beq.w	800b63c <__kernel_cos+0x12c>
 800b530:	4642      	mov	r2, r8
 800b532:	463b      	mov	r3, r7
 800b534:	4640      	mov	r0, r8
 800b536:	4639      	mov	r1, r7
 800b538:	f7f4 ffce 	bl	80004d8 <__aeabi_dmul>
 800b53c:	2200      	movs	r2, #0
 800b53e:	4b4e      	ldr	r3, [pc, #312]	; (800b678 <__kernel_cos+0x168>)
 800b540:	4604      	mov	r4, r0
 800b542:	460d      	mov	r5, r1
 800b544:	f7f4 ffc8 	bl	80004d8 <__aeabi_dmul>
 800b548:	a33f      	add	r3, pc, #252	; (adr r3, 800b648 <__kernel_cos+0x138>)
 800b54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54e:	4682      	mov	sl, r0
 800b550:	468b      	mov	fp, r1
 800b552:	4620      	mov	r0, r4
 800b554:	4629      	mov	r1, r5
 800b556:	f7f4 ffbf 	bl	80004d8 <__aeabi_dmul>
 800b55a:	a33d      	add	r3, pc, #244	; (adr r3, 800b650 <__kernel_cos+0x140>)
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	f7f4 fe04 	bl	800016c <__adddf3>
 800b564:	4622      	mov	r2, r4
 800b566:	462b      	mov	r3, r5
 800b568:	f7f4 ffb6 	bl	80004d8 <__aeabi_dmul>
 800b56c:	a33a      	add	r3, pc, #232	; (adr r3, 800b658 <__kernel_cos+0x148>)
 800b56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b572:	f7f4 fdf9 	bl	8000168 <__aeabi_dsub>
 800b576:	4622      	mov	r2, r4
 800b578:	462b      	mov	r3, r5
 800b57a:	f7f4 ffad 	bl	80004d8 <__aeabi_dmul>
 800b57e:	a338      	add	r3, pc, #224	; (adr r3, 800b660 <__kernel_cos+0x150>)
 800b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b584:	f7f4 fdf2 	bl	800016c <__adddf3>
 800b588:	4622      	mov	r2, r4
 800b58a:	462b      	mov	r3, r5
 800b58c:	f7f4 ffa4 	bl	80004d8 <__aeabi_dmul>
 800b590:	a335      	add	r3, pc, #212	; (adr r3, 800b668 <__kernel_cos+0x158>)
 800b592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b596:	f7f4 fde7 	bl	8000168 <__aeabi_dsub>
 800b59a:	4622      	mov	r2, r4
 800b59c:	462b      	mov	r3, r5
 800b59e:	f7f4 ff9b 	bl	80004d8 <__aeabi_dmul>
 800b5a2:	a333      	add	r3, pc, #204	; (adr r3, 800b670 <__kernel_cos+0x160>)
 800b5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a8:	f7f4 fde0 	bl	800016c <__adddf3>
 800b5ac:	4622      	mov	r2, r4
 800b5ae:	462b      	mov	r3, r5
 800b5b0:	f7f4 ff92 	bl	80004d8 <__aeabi_dmul>
 800b5b4:	4622      	mov	r2, r4
 800b5b6:	462b      	mov	r3, r5
 800b5b8:	f7f4 ff8e 	bl	80004d8 <__aeabi_dmul>
 800b5bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	460d      	mov	r5, r1
 800b5c4:	4640      	mov	r0, r8
 800b5c6:	4639      	mov	r1, r7
 800b5c8:	f7f4 ff86 	bl	80004d8 <__aeabi_dmul>
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f7f4 fdc8 	bl	8000168 <__aeabi_dsub>
 800b5d8:	4b28      	ldr	r3, [pc, #160]	; (800b67c <__kernel_cos+0x16c>)
 800b5da:	4680      	mov	r8, r0
 800b5dc:	429e      	cmp	r6, r3
 800b5de:	4689      	mov	r9, r1
 800b5e0:	dc0e      	bgt.n	800b600 <__kernel_cos+0xf0>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	4650      	mov	r0, sl
 800b5e8:	4659      	mov	r1, fp
 800b5ea:	f7f4 fdbd 	bl	8000168 <__aeabi_dsub>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	2000      	movs	r0, #0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	4922      	ldr	r1, [pc, #136]	; (800b680 <__kernel_cos+0x170>)
 800b5f6:	f7f4 fdb7 	bl	8000168 <__aeabi_dsub>
 800b5fa:	b003      	add	sp, #12
 800b5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b600:	2400      	movs	r4, #0
 800b602:	4b20      	ldr	r3, [pc, #128]	; (800b684 <__kernel_cos+0x174>)
 800b604:	4622      	mov	r2, r4
 800b606:	429e      	cmp	r6, r3
 800b608:	bfcc      	ite	gt
 800b60a:	4d1f      	ldrgt	r5, [pc, #124]	; (800b688 <__kernel_cos+0x178>)
 800b60c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b610:	462b      	mov	r3, r5
 800b612:	2000      	movs	r0, #0
 800b614:	491a      	ldr	r1, [pc, #104]	; (800b680 <__kernel_cos+0x170>)
 800b616:	f7f4 fda7 	bl	8000168 <__aeabi_dsub>
 800b61a:	4622      	mov	r2, r4
 800b61c:	4606      	mov	r6, r0
 800b61e:	460f      	mov	r7, r1
 800b620:	462b      	mov	r3, r5
 800b622:	4650      	mov	r0, sl
 800b624:	4659      	mov	r1, fp
 800b626:	f7f4 fd9f 	bl	8000168 <__aeabi_dsub>
 800b62a:	4642      	mov	r2, r8
 800b62c:	464b      	mov	r3, r9
 800b62e:	f7f4 fd9b 	bl	8000168 <__aeabi_dsub>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	4630      	mov	r0, r6
 800b638:	4639      	mov	r1, r7
 800b63a:	e7dc      	b.n	800b5f6 <__kernel_cos+0xe6>
 800b63c:	2000      	movs	r0, #0
 800b63e:	4910      	ldr	r1, [pc, #64]	; (800b680 <__kernel_cos+0x170>)
 800b640:	e7db      	b.n	800b5fa <__kernel_cos+0xea>
 800b642:	bf00      	nop
 800b644:	f3af 8000 	nop.w
 800b648:	be8838d4 	.word	0xbe8838d4
 800b64c:	bda8fae9 	.word	0xbda8fae9
 800b650:	bdb4b1c4 	.word	0xbdb4b1c4
 800b654:	3e21ee9e 	.word	0x3e21ee9e
 800b658:	809c52ad 	.word	0x809c52ad
 800b65c:	3e927e4f 	.word	0x3e927e4f
 800b660:	19cb1590 	.word	0x19cb1590
 800b664:	3efa01a0 	.word	0x3efa01a0
 800b668:	16c15177 	.word	0x16c15177
 800b66c:	3f56c16c 	.word	0x3f56c16c
 800b670:	5555554c 	.word	0x5555554c
 800b674:	3fa55555 	.word	0x3fa55555
 800b678:	3fe00000 	.word	0x3fe00000
 800b67c:	3fd33332 	.word	0x3fd33332
 800b680:	3ff00000 	.word	0x3ff00000
 800b684:	3fe90000 	.word	0x3fe90000
 800b688:	3fd20000 	.word	0x3fd20000

0800b68c <__kernel_rem_pio2>:
 800b68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b690:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b694:	9307      	str	r3, [sp, #28]
 800b696:	9104      	str	r1, [sp, #16]
 800b698:	4bbf      	ldr	r3, [pc, #764]	; (800b998 <__kernel_rem_pio2+0x30c>)
 800b69a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b69c:	1ed4      	subs	r4, r2, #3
 800b69e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b6a2:	2500      	movs	r5, #0
 800b6a4:	9302      	str	r3, [sp, #8]
 800b6a6:	9b07      	ldr	r3, [sp, #28]
 800b6a8:	9008      	str	r0, [sp, #32]
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	9306      	str	r3, [sp, #24]
 800b6ae:	2318      	movs	r3, #24
 800b6b0:	fb94 f4f3 	sdiv	r4, r4, r3
 800b6b4:	f06f 0317 	mvn.w	r3, #23
 800b6b8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b6bc:	fb04 3303 	mla	r3, r4, r3, r3
 800b6c0:	eb03 0a02 	add.w	sl, r3, r2
 800b6c4:	9a06      	ldr	r2, [sp, #24]
 800b6c6:	9b02      	ldr	r3, [sp, #8]
 800b6c8:	1aa7      	subs	r7, r4, r2
 800b6ca:	eb03 0802 	add.w	r8, r3, r2
 800b6ce:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	ae1e      	add	r6, sp, #120	; 0x78
 800b6da:	4545      	cmp	r5, r8
 800b6dc:	dd14      	ble.n	800b708 <__kernel_rem_pio2+0x7c>
 800b6de:	2600      	movs	r6, #0
 800b6e0:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800b6e4:	9b02      	ldr	r3, [sp, #8]
 800b6e6:	429e      	cmp	r6, r3
 800b6e8:	dc39      	bgt.n	800b75e <__kernel_rem_pio2+0xd2>
 800b6ea:	9b08      	ldr	r3, [sp, #32]
 800b6ec:	f04f 0800 	mov.w	r8, #0
 800b6f0:	3b08      	subs	r3, #8
 800b6f2:	9300      	str	r3, [sp, #0]
 800b6f4:	9b07      	ldr	r3, [sp, #28]
 800b6f6:	f04f 0900 	mov.w	r9, #0
 800b6fa:	199d      	adds	r5, r3, r6
 800b6fc:	ab20      	add	r3, sp, #128	; 0x80
 800b6fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b702:	9305      	str	r3, [sp, #20]
 800b704:	2700      	movs	r7, #0
 800b706:	e023      	b.n	800b750 <__kernel_rem_pio2+0xc4>
 800b708:	42ef      	cmn	r7, r5
 800b70a:	d40b      	bmi.n	800b724 <__kernel_rem_pio2+0x98>
 800b70c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b710:	e9cd 2300 	strd	r2, r3, [sp]
 800b714:	f7f4 fe76 	bl	8000404 <__aeabi_i2d>
 800b718:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b71c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800b720:	3501      	adds	r5, #1
 800b722:	e7da      	b.n	800b6da <__kernel_rem_pio2+0x4e>
 800b724:	4610      	mov	r0, r2
 800b726:	4619      	mov	r1, r3
 800b728:	e7f8      	b.n	800b71c <__kernel_rem_pio2+0x90>
 800b72a:	9905      	ldr	r1, [sp, #20]
 800b72c:	9d00      	ldr	r5, [sp, #0]
 800b72e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b732:	9105      	str	r1, [sp, #20]
 800b734:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800b738:	9500      	str	r5, [sp, #0]
 800b73a:	f7f4 fecd 	bl	80004d8 <__aeabi_dmul>
 800b73e:	4602      	mov	r2, r0
 800b740:	460b      	mov	r3, r1
 800b742:	4640      	mov	r0, r8
 800b744:	4649      	mov	r1, r9
 800b746:	f7f4 fd11 	bl	800016c <__adddf3>
 800b74a:	4680      	mov	r8, r0
 800b74c:	4689      	mov	r9, r1
 800b74e:	3701      	adds	r7, #1
 800b750:	9b06      	ldr	r3, [sp, #24]
 800b752:	429f      	cmp	r7, r3
 800b754:	dde9      	ble.n	800b72a <__kernel_rem_pio2+0x9e>
 800b756:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800b75a:	3601      	adds	r6, #1
 800b75c:	e7c2      	b.n	800b6e4 <__kernel_rem_pio2+0x58>
 800b75e:	9b02      	ldr	r3, [sp, #8]
 800b760:	aa0c      	add	r2, sp, #48	; 0x30
 800b762:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b766:	930b      	str	r3, [sp, #44]	; 0x2c
 800b768:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b76a:	9f02      	ldr	r7, [sp, #8]
 800b76c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b770:	930a      	str	r3, [sp, #40]	; 0x28
 800b772:	2600      	movs	r6, #0
 800b774:	ab98      	add	r3, sp, #608	; 0x260
 800b776:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800b77a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b77e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b782:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b786:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b78a:	ab98      	add	r3, sp, #608	; 0x260
 800b78c:	445b      	add	r3, fp
 800b78e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800b792:	1bbb      	subs	r3, r7, r6
 800b794:	2b00      	cmp	r3, #0
 800b796:	dc71      	bgt.n	800b87c <__kernel_rem_pio2+0x1f0>
 800b798:	4652      	mov	r2, sl
 800b79a:	4640      	mov	r0, r8
 800b79c:	4649      	mov	r1, r9
 800b79e:	f000 fc97 	bl	800c0d0 <scalbn>
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b7a8:	4604      	mov	r4, r0
 800b7aa:	460d      	mov	r5, r1
 800b7ac:	f7f4 fe94 	bl	80004d8 <__aeabi_dmul>
 800b7b0:	f000 fb76 	bl	800bea0 <floor>
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	4b79      	ldr	r3, [pc, #484]	; (800b99c <__kernel_rem_pio2+0x310>)
 800b7b8:	f7f4 fe8e 	bl	80004d8 <__aeabi_dmul>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	460b      	mov	r3, r1
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	f7f4 fcd0 	bl	8000168 <__aeabi_dsub>
 800b7c8:	460d      	mov	r5, r1
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	f7f5 f934 	bl	8000a38 <__aeabi_d2iz>
 800b7d0:	9005      	str	r0, [sp, #20]
 800b7d2:	f7f4 fe17 	bl	8000404 <__aeabi_i2d>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	4620      	mov	r0, r4
 800b7dc:	4629      	mov	r1, r5
 800b7de:	f7f4 fcc3 	bl	8000168 <__aeabi_dsub>
 800b7e2:	f1ba 0f00 	cmp.w	sl, #0
 800b7e6:	4680      	mov	r8, r0
 800b7e8:	4689      	mov	r9, r1
 800b7ea:	dd6c      	ble.n	800b8c6 <__kernel_rem_pio2+0x23a>
 800b7ec:	1e7a      	subs	r2, r7, #1
 800b7ee:	ab0c      	add	r3, sp, #48	; 0x30
 800b7f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b7f4:	f1ca 0118 	rsb	r1, sl, #24
 800b7f8:	9c05      	ldr	r4, [sp, #20]
 800b7fa:	fa40 f301 	asr.w	r3, r0, r1
 800b7fe:	441c      	add	r4, r3
 800b800:	408b      	lsls	r3, r1
 800b802:	1ac0      	subs	r0, r0, r3
 800b804:	ab0c      	add	r3, sp, #48	; 0x30
 800b806:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b80a:	f1ca 0317 	rsb	r3, sl, #23
 800b80e:	9405      	str	r4, [sp, #20]
 800b810:	fa40 f303 	asr.w	r3, r0, r3
 800b814:	9300      	str	r3, [sp, #0]
 800b816:	9b00      	ldr	r3, [sp, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	dd62      	ble.n	800b8e2 <__kernel_rem_pio2+0x256>
 800b81c:	2200      	movs	r2, #0
 800b81e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b822:	4614      	mov	r4, r2
 800b824:	9b05      	ldr	r3, [sp, #20]
 800b826:	3301      	adds	r3, #1
 800b828:	9305      	str	r3, [sp, #20]
 800b82a:	4297      	cmp	r7, r2
 800b82c:	f300 809f 	bgt.w	800b96e <__kernel_rem_pio2+0x2e2>
 800b830:	f1ba 0f00 	cmp.w	sl, #0
 800b834:	dd07      	ble.n	800b846 <__kernel_rem_pio2+0x1ba>
 800b836:	f1ba 0f01 	cmp.w	sl, #1
 800b83a:	f000 80bb 	beq.w	800b9b4 <__kernel_rem_pio2+0x328>
 800b83e:	f1ba 0f02 	cmp.w	sl, #2
 800b842:	f000 80c1 	beq.w	800b9c8 <__kernel_rem_pio2+0x33c>
 800b846:	9b00      	ldr	r3, [sp, #0]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d14a      	bne.n	800b8e2 <__kernel_rem_pio2+0x256>
 800b84c:	4642      	mov	r2, r8
 800b84e:	464b      	mov	r3, r9
 800b850:	2000      	movs	r0, #0
 800b852:	4953      	ldr	r1, [pc, #332]	; (800b9a0 <__kernel_rem_pio2+0x314>)
 800b854:	f7f4 fc88 	bl	8000168 <__aeabi_dsub>
 800b858:	4680      	mov	r8, r0
 800b85a:	4689      	mov	r9, r1
 800b85c:	2c00      	cmp	r4, #0
 800b85e:	d040      	beq.n	800b8e2 <__kernel_rem_pio2+0x256>
 800b860:	4652      	mov	r2, sl
 800b862:	2000      	movs	r0, #0
 800b864:	494e      	ldr	r1, [pc, #312]	; (800b9a0 <__kernel_rem_pio2+0x314>)
 800b866:	f000 fc33 	bl	800c0d0 <scalbn>
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	4640      	mov	r0, r8
 800b870:	4649      	mov	r1, r9
 800b872:	f7f4 fc79 	bl	8000168 <__aeabi_dsub>
 800b876:	4680      	mov	r8, r0
 800b878:	4689      	mov	r9, r1
 800b87a:	e032      	b.n	800b8e2 <__kernel_rem_pio2+0x256>
 800b87c:	2200      	movs	r2, #0
 800b87e:	4b49      	ldr	r3, [pc, #292]	; (800b9a4 <__kernel_rem_pio2+0x318>)
 800b880:	4640      	mov	r0, r8
 800b882:	4649      	mov	r1, r9
 800b884:	f7f4 fe28 	bl	80004d8 <__aeabi_dmul>
 800b888:	f7f5 f8d6 	bl	8000a38 <__aeabi_d2iz>
 800b88c:	f7f4 fdba 	bl	8000404 <__aeabi_i2d>
 800b890:	2200      	movs	r2, #0
 800b892:	4b45      	ldr	r3, [pc, #276]	; (800b9a8 <__kernel_rem_pio2+0x31c>)
 800b894:	e9cd 0100 	strd	r0, r1, [sp]
 800b898:	f7f4 fe1e 	bl	80004d8 <__aeabi_dmul>
 800b89c:	4602      	mov	r2, r0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	4640      	mov	r0, r8
 800b8a2:	4649      	mov	r1, r9
 800b8a4:	f7f4 fc60 	bl	8000168 <__aeabi_dsub>
 800b8a8:	f7f5 f8c6 	bl	8000a38 <__aeabi_d2iz>
 800b8ac:	ab0c      	add	r3, sp, #48	; 0x30
 800b8ae:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b8b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b8b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8ba:	f7f4 fc57 	bl	800016c <__adddf3>
 800b8be:	3601      	adds	r6, #1
 800b8c0:	4680      	mov	r8, r0
 800b8c2:	4689      	mov	r9, r1
 800b8c4:	e765      	b.n	800b792 <__kernel_rem_pio2+0x106>
 800b8c6:	d105      	bne.n	800b8d4 <__kernel_rem_pio2+0x248>
 800b8c8:	1e7b      	subs	r3, r7, #1
 800b8ca:	aa0c      	add	r2, sp, #48	; 0x30
 800b8cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b8d0:	15c3      	asrs	r3, r0, #23
 800b8d2:	e79f      	b.n	800b814 <__kernel_rem_pio2+0x188>
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	4b35      	ldr	r3, [pc, #212]	; (800b9ac <__kernel_rem_pio2+0x320>)
 800b8d8:	f7f5 f884 	bl	80009e4 <__aeabi_dcmpge>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d143      	bne.n	800b968 <__kernel_rem_pio2+0x2dc>
 800b8e0:	9000      	str	r0, [sp, #0]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	4640      	mov	r0, r8
 800b8e8:	4649      	mov	r1, r9
 800b8ea:	f7f5 f85d 	bl	80009a8 <__aeabi_dcmpeq>
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	f000 80c3 	beq.w	800ba7a <__kernel_rem_pio2+0x3ee>
 800b8f4:	1e7c      	subs	r4, r7, #1
 800b8f6:	4623      	mov	r3, r4
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	9902      	ldr	r1, [sp, #8]
 800b8fc:	428b      	cmp	r3, r1
 800b8fe:	da6a      	bge.n	800b9d6 <__kernel_rem_pio2+0x34a>
 800b900:	2a00      	cmp	r2, #0
 800b902:	f000 8084 	beq.w	800ba0e <__kernel_rem_pio2+0x382>
 800b906:	ab0c      	add	r3, sp, #48	; 0x30
 800b908:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b90c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b910:	2b00      	cmp	r3, #0
 800b912:	f000 80b0 	beq.w	800ba76 <__kernel_rem_pio2+0x3ea>
 800b916:	4652      	mov	r2, sl
 800b918:	2000      	movs	r0, #0
 800b91a:	4921      	ldr	r1, [pc, #132]	; (800b9a0 <__kernel_rem_pio2+0x314>)
 800b91c:	f000 fbd8 	bl	800c0d0 <scalbn>
 800b920:	4625      	mov	r5, r4
 800b922:	4606      	mov	r6, r0
 800b924:	460f      	mov	r7, r1
 800b926:	f04f 0a00 	mov.w	sl, #0
 800b92a:	00e3      	lsls	r3, r4, #3
 800b92c:	aa98      	add	r2, sp, #608	; 0x260
 800b92e:	eb02 0803 	add.w	r8, r2, r3
 800b932:	f8df b070 	ldr.w	fp, [pc, #112]	; 800b9a4 <__kernel_rem_pio2+0x318>
 800b936:	9306      	str	r3, [sp, #24]
 800b938:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800b93c:	2d00      	cmp	r5, #0
 800b93e:	f280 80d2 	bge.w	800bae6 <__kernel_rem_pio2+0x45a>
 800b942:	2500      	movs	r5, #0
 800b944:	9a06      	ldr	r2, [sp, #24]
 800b946:	ab98      	add	r3, sp, #608	; 0x260
 800b948:	189e      	adds	r6, r3, r2
 800b94a:	3ea8      	subs	r6, #168	; 0xa8
 800b94c:	1b63      	subs	r3, r4, r5
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f2c0 80f9 	blt.w	800bb46 <__kernel_rem_pio2+0x4ba>
 800b954:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800b9b0 <__kernel_rem_pio2+0x324>
 800b958:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800b95c:	f04f 0a00 	mov.w	sl, #0
 800b960:	f04f 0b00 	mov.w	fp, #0
 800b964:	2700      	movs	r7, #0
 800b966:	e0e2      	b.n	800bb2e <__kernel_rem_pio2+0x4a2>
 800b968:	2302      	movs	r3, #2
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	e756      	b.n	800b81c <__kernel_rem_pio2+0x190>
 800b96e:	ab0c      	add	r3, sp, #48	; 0x30
 800b970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b974:	b94c      	cbnz	r4, 800b98a <__kernel_rem_pio2+0x2fe>
 800b976:	b12b      	cbz	r3, 800b984 <__kernel_rem_pio2+0x2f8>
 800b978:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b97c:	a80c      	add	r0, sp, #48	; 0x30
 800b97e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b982:	2301      	movs	r3, #1
 800b984:	3201      	adds	r2, #1
 800b986:	461c      	mov	r4, r3
 800b988:	e74f      	b.n	800b82a <__kernel_rem_pio2+0x19e>
 800b98a:	1acb      	subs	r3, r1, r3
 800b98c:	a80c      	add	r0, sp, #48	; 0x30
 800b98e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b992:	4623      	mov	r3, r4
 800b994:	e7f6      	b.n	800b984 <__kernel_rem_pio2+0x2f8>
 800b996:	bf00      	nop
 800b998:	0800da90 	.word	0x0800da90
 800b99c:	40200000 	.word	0x40200000
 800b9a0:	3ff00000 	.word	0x3ff00000
 800b9a4:	3e700000 	.word	0x3e700000
 800b9a8:	41700000 	.word	0x41700000
 800b9ac:	3fe00000 	.word	0x3fe00000
 800b9b0:	0800da48 	.word	0x0800da48
 800b9b4:	1e7a      	subs	r2, r7, #1
 800b9b6:	ab0c      	add	r3, sp, #48	; 0x30
 800b9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b9c0:	a90c      	add	r1, sp, #48	; 0x30
 800b9c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b9c6:	e73e      	b.n	800b846 <__kernel_rem_pio2+0x1ba>
 800b9c8:	1e7a      	subs	r2, r7, #1
 800b9ca:	ab0c      	add	r3, sp, #48	; 0x30
 800b9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b9d4:	e7f4      	b.n	800b9c0 <__kernel_rem_pio2+0x334>
 800b9d6:	a90c      	add	r1, sp, #48	; 0x30
 800b9d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	430a      	orrs	r2, r1
 800b9e0:	e78b      	b.n	800b8fa <__kernel_rem_pio2+0x26e>
 800b9e2:	3401      	adds	r4, #1
 800b9e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b9e8:	2a00      	cmp	r2, #0
 800b9ea:	d0fa      	beq.n	800b9e2 <__kernel_rem_pio2+0x356>
 800b9ec:	ab98      	add	r3, sp, #608	; 0x260
 800b9ee:	449b      	add	fp, r3
 800b9f0:	9b07      	ldr	r3, [sp, #28]
 800b9f2:	1c7e      	adds	r6, r7, #1
 800b9f4:	19dd      	adds	r5, r3, r7
 800b9f6:	ab98      	add	r3, sp, #608	; 0x260
 800b9f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b9fc:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800ba00:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800ba04:	443c      	add	r4, r7
 800ba06:	42b4      	cmp	r4, r6
 800ba08:	da04      	bge.n	800ba14 <__kernel_rem_pio2+0x388>
 800ba0a:	4627      	mov	r7, r4
 800ba0c:	e6b1      	b.n	800b772 <__kernel_rem_pio2+0xe6>
 800ba0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba10:	2401      	movs	r4, #1
 800ba12:	e7e7      	b.n	800b9e4 <__kernel_rem_pio2+0x358>
 800ba14:	f105 0308 	add.w	r3, r5, #8
 800ba18:	9309      	str	r3, [sp, #36]	; 0x24
 800ba1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba1c:	2700      	movs	r7, #0
 800ba1e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ba22:	f7f4 fcef 	bl	8000404 <__aeabi_i2d>
 800ba26:	f04f 0800 	mov.w	r8, #0
 800ba2a:	f04f 0900 	mov.w	r9, #0
 800ba2e:	9b08      	ldr	r3, [sp, #32]
 800ba30:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ba34:	3b08      	subs	r3, #8
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	f105 0310 	add.w	r3, r5, #16
 800ba3c:	9305      	str	r3, [sp, #20]
 800ba3e:	9b06      	ldr	r3, [sp, #24]
 800ba40:	429f      	cmp	r7, r3
 800ba42:	dd04      	ble.n	800ba4e <__kernel_rem_pio2+0x3c2>
 800ba44:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800ba48:	3601      	adds	r6, #1
 800ba4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ba4c:	e7db      	b.n	800ba06 <__kernel_rem_pio2+0x37a>
 800ba4e:	9905      	ldr	r1, [sp, #20]
 800ba50:	9d00      	ldr	r5, [sp, #0]
 800ba52:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800ba56:	9105      	str	r1, [sp, #20]
 800ba58:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800ba5c:	9500      	str	r5, [sp, #0]
 800ba5e:	f7f4 fd3b 	bl	80004d8 <__aeabi_dmul>
 800ba62:	4602      	mov	r2, r0
 800ba64:	460b      	mov	r3, r1
 800ba66:	4640      	mov	r0, r8
 800ba68:	4649      	mov	r1, r9
 800ba6a:	f7f4 fb7f 	bl	800016c <__adddf3>
 800ba6e:	3701      	adds	r7, #1
 800ba70:	4680      	mov	r8, r0
 800ba72:	4689      	mov	r9, r1
 800ba74:	e7e3      	b.n	800ba3e <__kernel_rem_pio2+0x3b2>
 800ba76:	3c01      	subs	r4, #1
 800ba78:	e745      	b.n	800b906 <__kernel_rem_pio2+0x27a>
 800ba7a:	f1ca 0200 	rsb	r2, sl, #0
 800ba7e:	4640      	mov	r0, r8
 800ba80:	4649      	mov	r1, r9
 800ba82:	f000 fb25 	bl	800c0d0 <scalbn>
 800ba86:	2200      	movs	r2, #0
 800ba88:	4ba3      	ldr	r3, [pc, #652]	; (800bd18 <__kernel_rem_pio2+0x68c>)
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	460d      	mov	r5, r1
 800ba8e:	f7f4 ffa9 	bl	80009e4 <__aeabi_dcmpge>
 800ba92:	b1f8      	cbz	r0, 800bad4 <__kernel_rem_pio2+0x448>
 800ba94:	2200      	movs	r2, #0
 800ba96:	4ba1      	ldr	r3, [pc, #644]	; (800bd1c <__kernel_rem_pio2+0x690>)
 800ba98:	4620      	mov	r0, r4
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	f7f4 fd1c 	bl	80004d8 <__aeabi_dmul>
 800baa0:	f7f4 ffca 	bl	8000a38 <__aeabi_d2iz>
 800baa4:	4606      	mov	r6, r0
 800baa6:	f7f4 fcad 	bl	8000404 <__aeabi_i2d>
 800baaa:	2200      	movs	r2, #0
 800baac:	4b9a      	ldr	r3, [pc, #616]	; (800bd18 <__kernel_rem_pio2+0x68c>)
 800baae:	f7f4 fd13 	bl	80004d8 <__aeabi_dmul>
 800bab2:	460b      	mov	r3, r1
 800bab4:	4602      	mov	r2, r0
 800bab6:	4629      	mov	r1, r5
 800bab8:	4620      	mov	r0, r4
 800baba:	f7f4 fb55 	bl	8000168 <__aeabi_dsub>
 800babe:	f7f4 ffbb 	bl	8000a38 <__aeabi_d2iz>
 800bac2:	1c7c      	adds	r4, r7, #1
 800bac4:	ab0c      	add	r3, sp, #48	; 0x30
 800bac6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800baca:	f10a 0a18 	add.w	sl, sl, #24
 800bace:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800bad2:	e720      	b.n	800b916 <__kernel_rem_pio2+0x28a>
 800bad4:	4620      	mov	r0, r4
 800bad6:	4629      	mov	r1, r5
 800bad8:	f7f4 ffae 	bl	8000a38 <__aeabi_d2iz>
 800badc:	ab0c      	add	r3, sp, #48	; 0x30
 800bade:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bae2:	463c      	mov	r4, r7
 800bae4:	e717      	b.n	800b916 <__kernel_rem_pio2+0x28a>
 800bae6:	ab0c      	add	r3, sp, #48	; 0x30
 800bae8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800baec:	f7f4 fc8a 	bl	8000404 <__aeabi_i2d>
 800baf0:	4632      	mov	r2, r6
 800baf2:	463b      	mov	r3, r7
 800baf4:	f7f4 fcf0 	bl	80004d8 <__aeabi_dmul>
 800baf8:	4652      	mov	r2, sl
 800bafa:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800bafe:	465b      	mov	r3, fp
 800bb00:	4630      	mov	r0, r6
 800bb02:	4639      	mov	r1, r7
 800bb04:	f7f4 fce8 	bl	80004d8 <__aeabi_dmul>
 800bb08:	3d01      	subs	r5, #1
 800bb0a:	4606      	mov	r6, r0
 800bb0c:	460f      	mov	r7, r1
 800bb0e:	e715      	b.n	800b93c <__kernel_rem_pio2+0x2b0>
 800bb10:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800bb14:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800bb18:	f7f4 fcde 	bl	80004d8 <__aeabi_dmul>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	460b      	mov	r3, r1
 800bb20:	4650      	mov	r0, sl
 800bb22:	4659      	mov	r1, fp
 800bb24:	f7f4 fb22 	bl	800016c <__adddf3>
 800bb28:	4682      	mov	sl, r0
 800bb2a:	468b      	mov	fp, r1
 800bb2c:	3701      	adds	r7, #1
 800bb2e:	9b02      	ldr	r3, [sp, #8]
 800bb30:	429f      	cmp	r7, r3
 800bb32:	dc01      	bgt.n	800bb38 <__kernel_rem_pio2+0x4ac>
 800bb34:	42bd      	cmp	r5, r7
 800bb36:	daeb      	bge.n	800bb10 <__kernel_rem_pio2+0x484>
 800bb38:	ab48      	add	r3, sp, #288	; 0x120
 800bb3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bb3e:	e9c3 ab00 	strd	sl, fp, [r3]
 800bb42:	3501      	adds	r5, #1
 800bb44:	e702      	b.n	800b94c <__kernel_rem_pio2+0x2c0>
 800bb46:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800bb48:	2b03      	cmp	r3, #3
 800bb4a:	d86c      	bhi.n	800bc26 <__kernel_rem_pio2+0x59a>
 800bb4c:	e8df f003 	tbb	[pc, r3]
 800bb50:	022f2f59 	.word	0x022f2f59
 800bb54:	9a06      	ldr	r2, [sp, #24]
 800bb56:	ab48      	add	r3, sp, #288	; 0x120
 800bb58:	189d      	adds	r5, r3, r2
 800bb5a:	46aa      	mov	sl, r5
 800bb5c:	46a3      	mov	fp, r4
 800bb5e:	f1bb 0f00 	cmp.w	fp, #0
 800bb62:	f300 8087 	bgt.w	800bc74 <__kernel_rem_pio2+0x5e8>
 800bb66:	46a2      	mov	sl, r4
 800bb68:	f1ba 0f01 	cmp.w	sl, #1
 800bb6c:	f300 809f 	bgt.w	800bcae <__kernel_rem_pio2+0x622>
 800bb70:	2700      	movs	r7, #0
 800bb72:	463e      	mov	r6, r7
 800bb74:	9d06      	ldr	r5, [sp, #24]
 800bb76:	ab48      	add	r3, sp, #288	; 0x120
 800bb78:	3508      	adds	r5, #8
 800bb7a:	441d      	add	r5, r3
 800bb7c:	2c01      	cmp	r4, #1
 800bb7e:	f300 80b3 	bgt.w	800bce8 <__kernel_rem_pio2+0x65c>
 800bb82:	9b00      	ldr	r3, [sp, #0]
 800bb84:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800bb86:	9849      	ldr	r0, [sp, #292]	; 0x124
 800bb88:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800bb8a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f040 80b5 	bne.w	800bcfc <__kernel_rem_pio2+0x670>
 800bb92:	4603      	mov	r3, r0
 800bb94:	462a      	mov	r2, r5
 800bb96:	9804      	ldr	r0, [sp, #16]
 800bb98:	e9c0 2300 	strd	r2, r3, [r0]
 800bb9c:	4622      	mov	r2, r4
 800bb9e:	460b      	mov	r3, r1
 800bba0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bba4:	463a      	mov	r2, r7
 800bba6:	4633      	mov	r3, r6
 800bba8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bbac:	e03b      	b.n	800bc26 <__kernel_rem_pio2+0x59a>
 800bbae:	f04f 0c00 	mov.w	ip, #0
 800bbb2:	4626      	mov	r6, r4
 800bbb4:	4667      	mov	r7, ip
 800bbb6:	9d06      	ldr	r5, [sp, #24]
 800bbb8:	ab48      	add	r3, sp, #288	; 0x120
 800bbba:	3508      	adds	r5, #8
 800bbbc:	441d      	add	r5, r3
 800bbbe:	2e00      	cmp	r6, #0
 800bbc0:	da42      	bge.n	800bc48 <__kernel_rem_pio2+0x5bc>
 800bbc2:	9b00      	ldr	r3, [sp, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d049      	beq.n	800bc5c <__kernel_rem_pio2+0x5d0>
 800bbc8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800bbcc:	4662      	mov	r2, ip
 800bbce:	460b      	mov	r3, r1
 800bbd0:	9904      	ldr	r1, [sp, #16]
 800bbd2:	2601      	movs	r6, #1
 800bbd4:	e9c1 2300 	strd	r2, r3, [r1]
 800bbd8:	a948      	add	r1, sp, #288	; 0x120
 800bbda:	463b      	mov	r3, r7
 800bbdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbe0:	f7f4 fac2 	bl	8000168 <__aeabi_dsub>
 800bbe4:	4684      	mov	ip, r0
 800bbe6:	460f      	mov	r7, r1
 800bbe8:	ad48      	add	r5, sp, #288	; 0x120
 800bbea:	42b4      	cmp	r4, r6
 800bbec:	da38      	bge.n	800bc60 <__kernel_rem_pio2+0x5d4>
 800bbee:	9b00      	ldr	r3, [sp, #0]
 800bbf0:	b10b      	cbz	r3, 800bbf6 <__kernel_rem_pio2+0x56a>
 800bbf2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bbf6:	4662      	mov	r2, ip
 800bbf8:	463b      	mov	r3, r7
 800bbfa:	9904      	ldr	r1, [sp, #16]
 800bbfc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800bc00:	e011      	b.n	800bc26 <__kernel_rem_pio2+0x59a>
 800bc02:	2700      	movs	r7, #0
 800bc04:	463d      	mov	r5, r7
 800bc06:	9b06      	ldr	r3, [sp, #24]
 800bc08:	aa98      	add	r2, sp, #608	; 0x260
 800bc0a:	4413      	add	r3, r2
 800bc0c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800bc10:	2c00      	cmp	r4, #0
 800bc12:	da0f      	bge.n	800bc34 <__kernel_rem_pio2+0x5a8>
 800bc14:	9b00      	ldr	r3, [sp, #0]
 800bc16:	b10b      	cbz	r3, 800bc1c <__kernel_rem_pio2+0x590>
 800bc18:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800bc1c:	463a      	mov	r2, r7
 800bc1e:	462b      	mov	r3, r5
 800bc20:	9904      	ldr	r1, [sp, #16]
 800bc22:	e9c1 2300 	strd	r2, r3, [r1]
 800bc26:	9b05      	ldr	r3, [sp, #20]
 800bc28:	f003 0007 	and.w	r0, r3, #7
 800bc2c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc34:	4638      	mov	r0, r7
 800bc36:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	f7f4 fa96 	bl	800016c <__adddf3>
 800bc40:	3c01      	subs	r4, #1
 800bc42:	4607      	mov	r7, r0
 800bc44:	460d      	mov	r5, r1
 800bc46:	e7e3      	b.n	800bc10 <__kernel_rem_pio2+0x584>
 800bc48:	4660      	mov	r0, ip
 800bc4a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bc4e:	4639      	mov	r1, r7
 800bc50:	f7f4 fa8c 	bl	800016c <__adddf3>
 800bc54:	3e01      	subs	r6, #1
 800bc56:	4684      	mov	ip, r0
 800bc58:	460f      	mov	r7, r1
 800bc5a:	e7b0      	b.n	800bbbe <__kernel_rem_pio2+0x532>
 800bc5c:	4639      	mov	r1, r7
 800bc5e:	e7b5      	b.n	800bbcc <__kernel_rem_pio2+0x540>
 800bc60:	4660      	mov	r0, ip
 800bc62:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800bc66:	4639      	mov	r1, r7
 800bc68:	f7f4 fa80 	bl	800016c <__adddf3>
 800bc6c:	3601      	adds	r6, #1
 800bc6e:	4684      	mov	ip, r0
 800bc70:	460f      	mov	r7, r1
 800bc72:	e7ba      	b.n	800bbea <__kernel_rem_pio2+0x55e>
 800bc74:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800bc78:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800bc7c:	4640      	mov	r0, r8
 800bc7e:	4649      	mov	r1, r9
 800bc80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc84:	f7f4 fa72 	bl	800016c <__adddf3>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	4606      	mov	r6, r0
 800bc8e:	460f      	mov	r7, r1
 800bc90:	4640      	mov	r0, r8
 800bc92:	4649      	mov	r1, r9
 800bc94:	f7f4 fa68 	bl	8000168 <__aeabi_dsub>
 800bc98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc9c:	f7f4 fa66 	bl	800016c <__adddf3>
 800bca0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bca4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bca8:	e9ca 6700 	strd	r6, r7, [sl]
 800bcac:	e757      	b.n	800bb5e <__kernel_rem_pio2+0x4d2>
 800bcae:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800bcb2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	4639      	mov	r1, r7
 800bcba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcbe:	f7f4 fa55 	bl	800016c <__adddf3>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4680      	mov	r8, r0
 800bcc8:	4689      	mov	r9, r1
 800bcca:	4630      	mov	r0, r6
 800bccc:	4639      	mov	r1, r7
 800bcce:	f7f4 fa4b 	bl	8000168 <__aeabi_dsub>
 800bcd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcd6:	f7f4 fa49 	bl	800016c <__adddf3>
 800bcda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bcde:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800bce2:	e9c5 8900 	strd	r8, r9, [r5]
 800bce6:	e73f      	b.n	800bb68 <__kernel_rem_pio2+0x4dc>
 800bce8:	4638      	mov	r0, r7
 800bcea:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bcee:	4631      	mov	r1, r6
 800bcf0:	f7f4 fa3c 	bl	800016c <__adddf3>
 800bcf4:	3c01      	subs	r4, #1
 800bcf6:	4607      	mov	r7, r0
 800bcf8:	460e      	mov	r6, r1
 800bcfa:	e73f      	b.n	800bb7c <__kernel_rem_pio2+0x4f0>
 800bcfc:	9b04      	ldr	r3, [sp, #16]
 800bcfe:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bd02:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bd06:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800bd0a:	601d      	str	r5, [r3, #0]
 800bd0c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800bd10:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800bd14:	615e      	str	r6, [r3, #20]
 800bd16:	e786      	b.n	800bc26 <__kernel_rem_pio2+0x59a>
 800bd18:	41700000 	.word	0x41700000
 800bd1c:	3e700000 	.word	0x3e700000

0800bd20 <__kernel_sin>:
 800bd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd24:	b086      	sub	sp, #24
 800bd26:	e9cd 2300 	strd	r2, r3, [sp]
 800bd2a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd2e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bd32:	4682      	mov	sl, r0
 800bd34:	460c      	mov	r4, r1
 800bd36:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800bd38:	da03      	bge.n	800bd42 <__kernel_sin+0x22>
 800bd3a:	f7f4 fe7d 	bl	8000a38 <__aeabi_d2iz>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	d050      	beq.n	800bde4 <__kernel_sin+0xc4>
 800bd42:	4652      	mov	r2, sl
 800bd44:	4623      	mov	r3, r4
 800bd46:	4650      	mov	r0, sl
 800bd48:	4621      	mov	r1, r4
 800bd4a:	f7f4 fbc5 	bl	80004d8 <__aeabi_dmul>
 800bd4e:	4606      	mov	r6, r0
 800bd50:	460f      	mov	r7, r1
 800bd52:	4602      	mov	r2, r0
 800bd54:	460b      	mov	r3, r1
 800bd56:	4650      	mov	r0, sl
 800bd58:	4621      	mov	r1, r4
 800bd5a:	f7f4 fbbd 	bl	80004d8 <__aeabi_dmul>
 800bd5e:	a33e      	add	r3, pc, #248	; (adr r3, 800be58 <__kernel_sin+0x138>)
 800bd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd64:	4680      	mov	r8, r0
 800bd66:	4689      	mov	r9, r1
 800bd68:	4630      	mov	r0, r6
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	f7f4 fbb4 	bl	80004d8 <__aeabi_dmul>
 800bd70:	a33b      	add	r3, pc, #236	; (adr r3, 800be60 <__kernel_sin+0x140>)
 800bd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd76:	f7f4 f9f7 	bl	8000168 <__aeabi_dsub>
 800bd7a:	4632      	mov	r2, r6
 800bd7c:	463b      	mov	r3, r7
 800bd7e:	f7f4 fbab 	bl	80004d8 <__aeabi_dmul>
 800bd82:	a339      	add	r3, pc, #228	; (adr r3, 800be68 <__kernel_sin+0x148>)
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	f7f4 f9f0 	bl	800016c <__adddf3>
 800bd8c:	4632      	mov	r2, r6
 800bd8e:	463b      	mov	r3, r7
 800bd90:	f7f4 fba2 	bl	80004d8 <__aeabi_dmul>
 800bd94:	a336      	add	r3, pc, #216	; (adr r3, 800be70 <__kernel_sin+0x150>)
 800bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9a:	f7f4 f9e5 	bl	8000168 <__aeabi_dsub>
 800bd9e:	4632      	mov	r2, r6
 800bda0:	463b      	mov	r3, r7
 800bda2:	f7f4 fb99 	bl	80004d8 <__aeabi_dmul>
 800bda6:	a334      	add	r3, pc, #208	; (adr r3, 800be78 <__kernel_sin+0x158>)
 800bda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdac:	f7f4 f9de 	bl	800016c <__adddf3>
 800bdb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdb4:	b9dd      	cbnz	r5, 800bdee <__kernel_sin+0xce>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	460b      	mov	r3, r1
 800bdba:	4630      	mov	r0, r6
 800bdbc:	4639      	mov	r1, r7
 800bdbe:	f7f4 fb8b 	bl	80004d8 <__aeabi_dmul>
 800bdc2:	a32f      	add	r3, pc, #188	; (adr r3, 800be80 <__kernel_sin+0x160>)
 800bdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc8:	f7f4 f9ce 	bl	8000168 <__aeabi_dsub>
 800bdcc:	4642      	mov	r2, r8
 800bdce:	464b      	mov	r3, r9
 800bdd0:	f7f4 fb82 	bl	80004d8 <__aeabi_dmul>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	4650      	mov	r0, sl
 800bdda:	4621      	mov	r1, r4
 800bddc:	f7f4 f9c6 	bl	800016c <__adddf3>
 800bde0:	4682      	mov	sl, r0
 800bde2:	460c      	mov	r4, r1
 800bde4:	4650      	mov	r0, sl
 800bde6:	4621      	mov	r1, r4
 800bde8:	b006      	add	sp, #24
 800bdea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdee:	2200      	movs	r2, #0
 800bdf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdf4:	4b24      	ldr	r3, [pc, #144]	; (800be88 <__kernel_sin+0x168>)
 800bdf6:	f7f4 fb6f 	bl	80004d8 <__aeabi_dmul>
 800bdfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be02:	4640      	mov	r0, r8
 800be04:	4649      	mov	r1, r9
 800be06:	f7f4 fb67 	bl	80004d8 <__aeabi_dmul>
 800be0a:	4602      	mov	r2, r0
 800be0c:	460b      	mov	r3, r1
 800be0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be12:	f7f4 f9a9 	bl	8000168 <__aeabi_dsub>
 800be16:	4632      	mov	r2, r6
 800be18:	463b      	mov	r3, r7
 800be1a:	f7f4 fb5d 	bl	80004d8 <__aeabi_dmul>
 800be1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be22:	f7f4 f9a1 	bl	8000168 <__aeabi_dsub>
 800be26:	a316      	add	r3, pc, #88	; (adr r3, 800be80 <__kernel_sin+0x160>)
 800be28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2c:	4606      	mov	r6, r0
 800be2e:	460f      	mov	r7, r1
 800be30:	4640      	mov	r0, r8
 800be32:	4649      	mov	r1, r9
 800be34:	f7f4 fb50 	bl	80004d8 <__aeabi_dmul>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4630      	mov	r0, r6
 800be3e:	4639      	mov	r1, r7
 800be40:	f7f4 f994 	bl	800016c <__adddf3>
 800be44:	4602      	mov	r2, r0
 800be46:	460b      	mov	r3, r1
 800be48:	4650      	mov	r0, sl
 800be4a:	4621      	mov	r1, r4
 800be4c:	f7f4 f98c 	bl	8000168 <__aeabi_dsub>
 800be50:	e7c6      	b.n	800bde0 <__kernel_sin+0xc0>
 800be52:	bf00      	nop
 800be54:	f3af 8000 	nop.w
 800be58:	5acfd57c 	.word	0x5acfd57c
 800be5c:	3de5d93a 	.word	0x3de5d93a
 800be60:	8a2b9ceb 	.word	0x8a2b9ceb
 800be64:	3e5ae5e6 	.word	0x3e5ae5e6
 800be68:	57b1fe7d 	.word	0x57b1fe7d
 800be6c:	3ec71de3 	.word	0x3ec71de3
 800be70:	19c161d5 	.word	0x19c161d5
 800be74:	3f2a01a0 	.word	0x3f2a01a0
 800be78:	1110f8a6 	.word	0x1110f8a6
 800be7c:	3f811111 	.word	0x3f811111
 800be80:	55555549 	.word	0x55555549
 800be84:	3fc55555 	.word	0x3fc55555
 800be88:	3fe00000 	.word	0x3fe00000

0800be8c <fabs>:
 800be8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be90:	4619      	mov	r1, r3
 800be92:	4770      	bx	lr

0800be94 <finite>:
 800be94:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800be98:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800be9c:	0fc0      	lsrs	r0, r0, #31
 800be9e:	4770      	bx	lr

0800bea0 <floor>:
 800bea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bea4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800bea8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800beac:	2e13      	cmp	r6, #19
 800beae:	4607      	mov	r7, r0
 800beb0:	460b      	mov	r3, r1
 800beb2:	460c      	mov	r4, r1
 800beb4:	4605      	mov	r5, r0
 800beb6:	dc35      	bgt.n	800bf24 <floor+0x84>
 800beb8:	2e00      	cmp	r6, #0
 800beba:	da16      	bge.n	800beea <floor+0x4a>
 800bebc:	a336      	add	r3, pc, #216	; (adr r3, 800bf98 <floor+0xf8>)
 800bebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec2:	f7f4 f953 	bl	800016c <__adddf3>
 800bec6:	2200      	movs	r2, #0
 800bec8:	2300      	movs	r3, #0
 800beca:	f7f4 fd95 	bl	80009f8 <__aeabi_dcmpgt>
 800bece:	b148      	cbz	r0, 800bee4 <floor+0x44>
 800bed0:	2c00      	cmp	r4, #0
 800bed2:	da5b      	bge.n	800bf8c <floor+0xec>
 800bed4:	2500      	movs	r5, #0
 800bed6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800beda:	4a31      	ldr	r2, [pc, #196]	; (800bfa0 <floor+0x100>)
 800bedc:	433b      	orrs	r3, r7
 800bede:	42ab      	cmp	r3, r5
 800bee0:	bf18      	it	ne
 800bee2:	4614      	movne	r4, r2
 800bee4:	4623      	mov	r3, r4
 800bee6:	462f      	mov	r7, r5
 800bee8:	e026      	b.n	800bf38 <floor+0x98>
 800beea:	4a2e      	ldr	r2, [pc, #184]	; (800bfa4 <floor+0x104>)
 800beec:	fa42 f806 	asr.w	r8, r2, r6
 800bef0:	ea01 0208 	and.w	r2, r1, r8
 800bef4:	4302      	orrs	r2, r0
 800bef6:	d01f      	beq.n	800bf38 <floor+0x98>
 800bef8:	a327      	add	r3, pc, #156	; (adr r3, 800bf98 <floor+0xf8>)
 800befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befe:	f7f4 f935 	bl	800016c <__adddf3>
 800bf02:	2200      	movs	r2, #0
 800bf04:	2300      	movs	r3, #0
 800bf06:	f7f4 fd77 	bl	80009f8 <__aeabi_dcmpgt>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d0ea      	beq.n	800bee4 <floor+0x44>
 800bf0e:	2c00      	cmp	r4, #0
 800bf10:	bfbe      	ittt	lt
 800bf12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bf16:	fa43 f606 	asrlt.w	r6, r3, r6
 800bf1a:	19a4      	addlt	r4, r4, r6
 800bf1c:	ea24 0408 	bic.w	r4, r4, r8
 800bf20:	2500      	movs	r5, #0
 800bf22:	e7df      	b.n	800bee4 <floor+0x44>
 800bf24:	2e33      	cmp	r6, #51	; 0x33
 800bf26:	dd0b      	ble.n	800bf40 <floor+0xa0>
 800bf28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bf2c:	d104      	bne.n	800bf38 <floor+0x98>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	f7f4 f91c 	bl	800016c <__adddf3>
 800bf34:	4607      	mov	r7, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	4638      	mov	r0, r7
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf40:	f04f 32ff 	mov.w	r2, #4294967295
 800bf44:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800bf48:	fa22 f808 	lsr.w	r8, r2, r8
 800bf4c:	ea18 0f00 	tst.w	r8, r0
 800bf50:	d0f2      	beq.n	800bf38 <floor+0x98>
 800bf52:	a311      	add	r3, pc, #68	; (adr r3, 800bf98 <floor+0xf8>)
 800bf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf58:	f7f4 f908 	bl	800016c <__adddf3>
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	2300      	movs	r3, #0
 800bf60:	f7f4 fd4a 	bl	80009f8 <__aeabi_dcmpgt>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	d0bd      	beq.n	800bee4 <floor+0x44>
 800bf68:	2c00      	cmp	r4, #0
 800bf6a:	da02      	bge.n	800bf72 <floor+0xd2>
 800bf6c:	2e14      	cmp	r6, #20
 800bf6e:	d103      	bne.n	800bf78 <floor+0xd8>
 800bf70:	3401      	adds	r4, #1
 800bf72:	ea25 0508 	bic.w	r5, r5, r8
 800bf76:	e7b5      	b.n	800bee4 <floor+0x44>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bf7e:	fa03 f606 	lsl.w	r6, r3, r6
 800bf82:	4435      	add	r5, r6
 800bf84:	42bd      	cmp	r5, r7
 800bf86:	bf38      	it	cc
 800bf88:	18e4      	addcc	r4, r4, r3
 800bf8a:	e7f2      	b.n	800bf72 <floor+0xd2>
 800bf8c:	2500      	movs	r5, #0
 800bf8e:	462c      	mov	r4, r5
 800bf90:	e7a8      	b.n	800bee4 <floor+0x44>
 800bf92:	bf00      	nop
 800bf94:	f3af 8000 	nop.w
 800bf98:	8800759c 	.word	0x8800759c
 800bf9c:	7e37e43c 	.word	0x7e37e43c
 800bfa0:	bff00000 	.word	0xbff00000
 800bfa4:	000fffff 	.word	0x000fffff

0800bfa8 <matherr>:
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	4770      	bx	lr

0800bfac <nan>:
 800bfac:	2000      	movs	r0, #0
 800bfae:	4901      	ldr	r1, [pc, #4]	; (800bfb4 <nan+0x8>)
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	7ff80000 	.word	0x7ff80000

0800bfb8 <rint>:
 800bfb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bfbe:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800bfc2:	f1bc 0f13 	cmp.w	ip, #19
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	460d      	mov	r5, r1
 800bfca:	460b      	mov	r3, r1
 800bfcc:	4606      	mov	r6, r0
 800bfce:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800bfd2:	dc5a      	bgt.n	800c08a <rint+0xd2>
 800bfd4:	f1bc 0f00 	cmp.w	ip, #0
 800bfd8:	da2b      	bge.n	800c032 <rint+0x7a>
 800bfda:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800bfde:	4302      	orrs	r2, r0
 800bfe0:	d023      	beq.n	800c02a <rint+0x72>
 800bfe2:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800bfe6:	4302      	orrs	r2, r0
 800bfe8:	4256      	negs	r6, r2
 800bfea:	4316      	orrs	r6, r2
 800bfec:	0c4b      	lsrs	r3, r1, #17
 800bfee:	0b36      	lsrs	r6, r6, #12
 800bff0:	4934      	ldr	r1, [pc, #208]	; (800c0c4 <rint+0x10c>)
 800bff2:	045b      	lsls	r3, r3, #17
 800bff4:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800bff8:	ea46 0503 	orr.w	r5, r6, r3
 800bffc:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800c000:	4602      	mov	r2, r0
 800c002:	462b      	mov	r3, r5
 800c004:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c008:	4620      	mov	r0, r4
 800c00a:	4629      	mov	r1, r5
 800c00c:	f7f4 f8ae 	bl	800016c <__adddf3>
 800c010:	e9cd 0100 	strd	r0, r1, [sp]
 800c014:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c018:	462b      	mov	r3, r5
 800c01a:	4622      	mov	r2, r4
 800c01c:	f7f4 f8a4 	bl	8000168 <__aeabi_dsub>
 800c020:	4604      	mov	r4, r0
 800c022:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c026:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800c02a:	4620      	mov	r0, r4
 800c02c:	4629      	mov	r1, r5
 800c02e:	b003      	add	sp, #12
 800c030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c032:	4a25      	ldr	r2, [pc, #148]	; (800c0c8 <rint+0x110>)
 800c034:	fa42 f20c 	asr.w	r2, r2, ip
 800c038:	4011      	ands	r1, r2
 800c03a:	4301      	orrs	r1, r0
 800c03c:	d0f5      	beq.n	800c02a <rint+0x72>
 800c03e:	0852      	lsrs	r2, r2, #1
 800c040:	ea05 0102 	and.w	r1, r5, r2
 800c044:	ea50 0601 	orrs.w	r6, r0, r1
 800c048:	d00c      	beq.n	800c064 <rint+0xac>
 800c04a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c04e:	f1bc 0f13 	cmp.w	ip, #19
 800c052:	bf0c      	ite	eq
 800c054:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800c058:	2600      	movne	r6, #0
 800c05a:	ea25 0202 	bic.w	r2, r5, r2
 800c05e:	fa43 f30c 	asr.w	r3, r3, ip
 800c062:	4313      	orrs	r3, r2
 800c064:	4917      	ldr	r1, [pc, #92]	; (800c0c4 <rint+0x10c>)
 800c066:	4632      	mov	r2, r6
 800c068:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800c06c:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c070:	4620      	mov	r0, r4
 800c072:	4629      	mov	r1, r5
 800c074:	f7f4 f87a 	bl	800016c <__adddf3>
 800c078:	e9cd 0100 	strd	r0, r1, [sp]
 800c07c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c080:	4622      	mov	r2, r4
 800c082:	462b      	mov	r3, r5
 800c084:	f7f4 f870 	bl	8000168 <__aeabi_dsub>
 800c088:	e008      	b.n	800c09c <rint+0xe4>
 800c08a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800c08e:	dd08      	ble.n	800c0a2 <rint+0xea>
 800c090:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800c094:	d1c9      	bne.n	800c02a <rint+0x72>
 800c096:	4602      	mov	r2, r0
 800c098:	f7f4 f868 	bl	800016c <__adddf3>
 800c09c:	4604      	mov	r4, r0
 800c09e:	460d      	mov	r5, r1
 800c0a0:	e7c3      	b.n	800c02a <rint+0x72>
 800c0a2:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800c0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0aa:	40ca      	lsrs	r2, r1
 800c0ac:	4210      	tst	r0, r2
 800c0ae:	d0bc      	beq.n	800c02a <rint+0x72>
 800c0b0:	0852      	lsrs	r2, r2, #1
 800c0b2:	4210      	tst	r0, r2
 800c0b4:	bf1f      	itttt	ne
 800c0b6:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800c0ba:	ea20 0202 	bicne.w	r2, r0, r2
 800c0be:	410e      	asrne	r6, r1
 800c0c0:	4316      	orrne	r6, r2
 800c0c2:	e7cf      	b.n	800c064 <rint+0xac>
 800c0c4:	0800daa0 	.word	0x0800daa0
 800c0c8:	000fffff 	.word	0x000fffff
 800c0cc:	00000000 	.word	0x00000000

0800c0d0 <scalbn>:
 800c0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d2:	4616      	mov	r6, r2
 800c0d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c0d8:	4604      	mov	r4, r0
 800c0da:	460d      	mov	r5, r1
 800c0dc:	460b      	mov	r3, r1
 800c0de:	b982      	cbnz	r2, 800c102 <scalbn+0x32>
 800c0e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c0e4:	4303      	orrs	r3, r0
 800c0e6:	d034      	beq.n	800c152 <scalbn+0x82>
 800c0e8:	4b2d      	ldr	r3, [pc, #180]	; (800c1a0 <scalbn+0xd0>)
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f7f4 f9f4 	bl	80004d8 <__aeabi_dmul>
 800c0f0:	4b2c      	ldr	r3, [pc, #176]	; (800c1a4 <scalbn+0xd4>)
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	429e      	cmp	r6, r3
 800c0f6:	460d      	mov	r5, r1
 800c0f8:	da0d      	bge.n	800c116 <scalbn+0x46>
 800c0fa:	a325      	add	r3, pc, #148	; (adr r3, 800c190 <scalbn+0xc0>)
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	e01c      	b.n	800c13c <scalbn+0x6c>
 800c102:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c106:	42ba      	cmp	r2, r7
 800c108:	d109      	bne.n	800c11e <scalbn+0x4e>
 800c10a:	4602      	mov	r2, r0
 800c10c:	f7f4 f82e 	bl	800016c <__adddf3>
 800c110:	4604      	mov	r4, r0
 800c112:	460d      	mov	r5, r1
 800c114:	e01d      	b.n	800c152 <scalbn+0x82>
 800c116:	460b      	mov	r3, r1
 800c118:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c11c:	3a36      	subs	r2, #54	; 0x36
 800c11e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c122:	4432      	add	r2, r6
 800c124:	428a      	cmp	r2, r1
 800c126:	dd0c      	ble.n	800c142 <scalbn+0x72>
 800c128:	4622      	mov	r2, r4
 800c12a:	462b      	mov	r3, r5
 800c12c:	a11a      	add	r1, pc, #104	; (adr r1, 800c198 <scalbn+0xc8>)
 800c12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c132:	f000 f83b 	bl	800c1ac <copysign>
 800c136:	a318      	add	r3, pc, #96	; (adr r3, 800c198 <scalbn+0xc8>)
 800c138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13c:	f7f4 f9cc 	bl	80004d8 <__aeabi_dmul>
 800c140:	e7e6      	b.n	800c110 <scalbn+0x40>
 800c142:	2a00      	cmp	r2, #0
 800c144:	dd08      	ble.n	800c158 <scalbn+0x88>
 800c146:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c14a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c14e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c152:	4620      	mov	r0, r4
 800c154:	4629      	mov	r1, r5
 800c156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c158:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c15c:	da0b      	bge.n	800c176 <scalbn+0xa6>
 800c15e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c162:	429e      	cmp	r6, r3
 800c164:	4622      	mov	r2, r4
 800c166:	462b      	mov	r3, r5
 800c168:	dce0      	bgt.n	800c12c <scalbn+0x5c>
 800c16a:	a109      	add	r1, pc, #36	; (adr r1, 800c190 <scalbn+0xc0>)
 800c16c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c170:	f000 f81c 	bl	800c1ac <copysign>
 800c174:	e7c1      	b.n	800c0fa <scalbn+0x2a>
 800c176:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c17a:	3236      	adds	r2, #54	; 0x36
 800c17c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c180:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c184:	4620      	mov	r0, r4
 800c186:	4629      	mov	r1, r5
 800c188:	2200      	movs	r2, #0
 800c18a:	4b07      	ldr	r3, [pc, #28]	; (800c1a8 <scalbn+0xd8>)
 800c18c:	e7d6      	b.n	800c13c <scalbn+0x6c>
 800c18e:	bf00      	nop
 800c190:	c2f8f359 	.word	0xc2f8f359
 800c194:	01a56e1f 	.word	0x01a56e1f
 800c198:	8800759c 	.word	0x8800759c
 800c19c:	7e37e43c 	.word	0x7e37e43c
 800c1a0:	43500000 	.word	0x43500000
 800c1a4:	ffff3cb0 	.word	0xffff3cb0
 800c1a8:	3c900000 	.word	0x3c900000

0800c1ac <copysign>:
 800c1ac:	b530      	push	{r4, r5, lr}
 800c1ae:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c1b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1b6:	ea42 0503 	orr.w	r5, r2, r3
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	bd30      	pop	{r4, r5, pc}
	...

0800c1c0 <_init>:
 800c1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c2:	bf00      	nop
 800c1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1c6:	bc08      	pop	{r3}
 800c1c8:	469e      	mov	lr, r3
 800c1ca:	4770      	bx	lr

0800c1cc <_fini>:
 800c1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ce:	bf00      	nop
 800c1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1d2:	bc08      	pop	{r3}
 800c1d4:	469e      	mov	lr, r3
 800c1d6:	4770      	bx	lr
