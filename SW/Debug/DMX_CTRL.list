
DMX_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d8  08005b8c  08005b8c  00015b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006564  08006564  00016564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006568  08006568  00016568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000264  20000000  0800656c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a18  20000268  080067d0  00020268  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000c80  080067d0  00020c80  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
  9 .debug_info   00022b02  00000000  00000000  0002028d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000058c5  00000000  00000000  00042d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c1a3  00000000  00000000  00048654  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001230  00000000  00000000  000547f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001a60  00000000  00000000  00055a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a7d8  00000000  00000000  00057488  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000060bf  00000000  00000000  00061c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00067d1f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003814  00000000  00000000  00067d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000268 	.word	0x20000268
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b74 	.word	0x08005b74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000026c 	.word	0x2000026c
 8000148:	08005b74 	.word	0x08005b74

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_llsr>:
 800015c:	40d0      	lsrs	r0, r2
 800015e:	1c0b      	adds	r3, r1, #0
 8000160:	40d1      	lsrs	r1, r2
 8000162:	469c      	mov	ip, r3
 8000164:	3a20      	subs	r2, #32
 8000166:	40d3      	lsrs	r3, r2
 8000168:	4318      	orrs	r0, r3
 800016a:	4252      	negs	r2, r2
 800016c:	4663      	mov	r3, ip
 800016e:	4093      	lsls	r3, r2
 8000170:	4318      	orrs	r0, r3
 8000172:	4770      	bx	lr

08000174 <__aeabi_frsub>:
 8000174:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__addsf3>
 800017a:	bf00      	nop

0800017c <__aeabi_fsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000180 <__addsf3>:
 8000180:	0042      	lsls	r2, r0, #1
 8000182:	bf1f      	itttt	ne
 8000184:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000188:	ea92 0f03 	teqne	r2, r3
 800018c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000190:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000194:	d06a      	beq.n	800026c <__addsf3+0xec>
 8000196:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800019a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019e:	bfc1      	itttt	gt
 80001a0:	18d2      	addgt	r2, r2, r3
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	4048      	eorgt	r0, r1
 80001a6:	4041      	eorgt	r1, r0
 80001a8:	bfb8      	it	lt
 80001aa:	425b      	neglt	r3, r3
 80001ac:	2b19      	cmp	r3, #25
 80001ae:	bf88      	it	hi
 80001b0:	4770      	bxhi	lr
 80001b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001be:	bf18      	it	ne
 80001c0:	4240      	negne	r0, r0
 80001c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ce:	bf18      	it	ne
 80001d0:	4249      	negne	r1, r1
 80001d2:	ea92 0f03 	teq	r2, r3
 80001d6:	d03f      	beq.n	8000258 <__addsf3+0xd8>
 80001d8:	f1a2 0201 	sub.w	r2, r2, #1
 80001dc:	fa41 fc03 	asr.w	ip, r1, r3
 80001e0:	eb10 000c 	adds.w	r0, r0, ip
 80001e4:	f1c3 0320 	rsb	r3, r3, #32
 80001e8:	fa01 f103 	lsl.w	r1, r1, r3
 80001ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f0:	d502      	bpl.n	80001f8 <__addsf3+0x78>
 80001f2:	4249      	negs	r1, r1
 80001f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001fc:	d313      	bcc.n	8000226 <__addsf3+0xa6>
 80001fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000202:	d306      	bcc.n	8000212 <__addsf3+0x92>
 8000204:	0840      	lsrs	r0, r0, #1
 8000206:	ea4f 0131 	mov.w	r1, r1, rrx
 800020a:	f102 0201 	add.w	r2, r2, #1
 800020e:	2afe      	cmp	r2, #254	; 0xfe
 8000210:	d251      	bcs.n	80002b6 <__addsf3+0x136>
 8000212:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000216:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800021a:	bf08      	it	eq
 800021c:	f020 0001 	biceq.w	r0, r0, #1
 8000220:	ea40 0003 	orr.w	r0, r0, r3
 8000224:	4770      	bx	lr
 8000226:	0049      	lsls	r1, r1, #1
 8000228:	eb40 0000 	adc.w	r0, r0, r0
 800022c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000230:	f1a2 0201 	sub.w	r2, r2, #1
 8000234:	d1ed      	bne.n	8000212 <__addsf3+0x92>
 8000236:	fab0 fc80 	clz	ip, r0
 800023a:	f1ac 0c08 	sub.w	ip, ip, #8
 800023e:	ebb2 020c 	subs.w	r2, r2, ip
 8000242:	fa00 f00c 	lsl.w	r0, r0, ip
 8000246:	bfaa      	itet	ge
 8000248:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800024c:	4252      	neglt	r2, r2
 800024e:	4318      	orrge	r0, r3
 8000250:	bfbc      	itt	lt
 8000252:	40d0      	lsrlt	r0, r2
 8000254:	4318      	orrlt	r0, r3
 8000256:	4770      	bx	lr
 8000258:	f092 0f00 	teq	r2, #0
 800025c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000260:	bf06      	itte	eq
 8000262:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000266:	3201      	addeq	r2, #1
 8000268:	3b01      	subne	r3, #1
 800026a:	e7b5      	b.n	80001d8 <__addsf3+0x58>
 800026c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000270:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000274:	bf18      	it	ne
 8000276:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800027a:	d021      	beq.n	80002c0 <__addsf3+0x140>
 800027c:	ea92 0f03 	teq	r2, r3
 8000280:	d004      	beq.n	800028c <__addsf3+0x10c>
 8000282:	f092 0f00 	teq	r2, #0
 8000286:	bf08      	it	eq
 8000288:	4608      	moveq	r0, r1
 800028a:	4770      	bx	lr
 800028c:	ea90 0f01 	teq	r0, r1
 8000290:	bf1c      	itt	ne
 8000292:	2000      	movne	r0, #0
 8000294:	4770      	bxne	lr
 8000296:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800029a:	d104      	bne.n	80002a6 <__addsf3+0x126>
 800029c:	0040      	lsls	r0, r0, #1
 800029e:	bf28      	it	cs
 80002a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	4770      	bx	lr
 80002a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002aa:	bf3c      	itt	cc
 80002ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b0:	4770      	bxcc	lr
 80002b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002be:	4770      	bx	lr
 80002c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c4:	bf16      	itet	ne
 80002c6:	4608      	movne	r0, r1
 80002c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002cc:	4601      	movne	r1, r0
 80002ce:	0242      	lsls	r2, r0, #9
 80002d0:	bf06      	itte	eq
 80002d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d6:	ea90 0f01 	teqeq	r0, r1
 80002da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002de:	4770      	bx	lr

080002e0 <__aeabi_ui2f>:
 80002e0:	f04f 0300 	mov.w	r3, #0
 80002e4:	e004      	b.n	80002f0 <__aeabi_i2f+0x8>
 80002e6:	bf00      	nop

080002e8 <__aeabi_i2f>:
 80002e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002ec:	bf48      	it	mi
 80002ee:	4240      	negmi	r0, r0
 80002f0:	ea5f 0c00 	movs.w	ip, r0
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002fc:	4601      	mov	r1, r0
 80002fe:	f04f 0000 	mov.w	r0, #0
 8000302:	e01c      	b.n	800033e <__aeabi_l2f+0x2a>

08000304 <__aeabi_ul2f>:
 8000304:	ea50 0201 	orrs.w	r2, r0, r1
 8000308:	bf08      	it	eq
 800030a:	4770      	bxeq	lr
 800030c:	f04f 0300 	mov.w	r3, #0
 8000310:	e00a      	b.n	8000328 <__aeabi_l2f+0x14>
 8000312:	bf00      	nop

08000314 <__aeabi_l2f>:
 8000314:	ea50 0201 	orrs.w	r2, r0, r1
 8000318:	bf08      	it	eq
 800031a:	4770      	bxeq	lr
 800031c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000320:	d502      	bpl.n	8000328 <__aeabi_l2f+0x14>
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	ea5f 0c01 	movs.w	ip, r1
 800032c:	bf02      	ittt	eq
 800032e:	4684      	moveq	ip, r0
 8000330:	4601      	moveq	r1, r0
 8000332:	2000      	moveq	r0, #0
 8000334:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000338:	bf08      	it	eq
 800033a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000342:	fabc f28c 	clz	r2, ip
 8000346:	3a08      	subs	r2, #8
 8000348:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800034c:	db10      	blt.n	8000370 <__aeabi_l2f+0x5c>
 800034e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000352:	4463      	add	r3, ip
 8000354:	fa00 fc02 	lsl.w	ip, r0, r2
 8000358:	f1c2 0220 	rsb	r2, r2, #32
 800035c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000360:	fa20 f202 	lsr.w	r2, r0, r2
 8000364:	eb43 0002 	adc.w	r0, r3, r2
 8000368:	bf08      	it	eq
 800036a:	f020 0001 	biceq.w	r0, r0, #1
 800036e:	4770      	bx	lr
 8000370:	f102 0220 	add.w	r2, r2, #32
 8000374:	fa01 fc02 	lsl.w	ip, r1, r2
 8000378:	f1c2 0220 	rsb	r2, r2, #32
 800037c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000380:	fa21 f202 	lsr.w	r2, r1, r2
 8000384:	eb43 0002 	adc.w	r0, r3, r2
 8000388:	bf08      	it	eq
 800038a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038e:	4770      	bx	lr

08000390 <__aeabi_fmul>:
 8000390:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000394:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000398:	bf1e      	ittt	ne
 800039a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039e:	ea92 0f0c 	teqne	r2, ip
 80003a2:	ea93 0f0c 	teqne	r3, ip
 80003a6:	d06f      	beq.n	8000488 <__aeabi_fmul+0xf8>
 80003a8:	441a      	add	r2, r3
 80003aa:	ea80 0c01 	eor.w	ip, r0, r1
 80003ae:	0240      	lsls	r0, r0, #9
 80003b0:	bf18      	it	ne
 80003b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b6:	d01e      	beq.n	80003f6 <__aeabi_fmul+0x66>
 80003b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c4:	fba0 3101 	umull	r3, r1, r0, r1
 80003c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d0:	bf3e      	ittt	cc
 80003d2:	0049      	lslcc	r1, r1, #1
 80003d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d8:	005b      	lslcc	r3, r3, #1
 80003da:	ea40 0001 	orr.w	r0, r0, r1
 80003de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003e2:	2afd      	cmp	r2, #253	; 0xfd
 80003e4:	d81d      	bhi.n	8000422 <__aeabi_fmul+0x92>
 80003e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ee:	bf08      	it	eq
 80003f0:	f020 0001 	biceq.w	r0, r0, #1
 80003f4:	4770      	bx	lr
 80003f6:	f090 0f00 	teq	r0, #0
 80003fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fe:	bf08      	it	eq
 8000400:	0249      	lsleq	r1, r1, #9
 8000402:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000406:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800040a:	3a7f      	subs	r2, #127	; 0x7f
 800040c:	bfc2      	ittt	gt
 800040e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000412:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000416:	4770      	bxgt	lr
 8000418:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800041c:	f04f 0300 	mov.w	r3, #0
 8000420:	3a01      	subs	r2, #1
 8000422:	dc5d      	bgt.n	80004e0 <__aeabi_fmul+0x150>
 8000424:	f112 0f19 	cmn.w	r2, #25
 8000428:	bfdc      	itt	le
 800042a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042e:	4770      	bxle	lr
 8000430:	f1c2 0200 	rsb	r2, r2, #0
 8000434:	0041      	lsls	r1, r0, #1
 8000436:	fa21 f102 	lsr.w	r1, r1, r2
 800043a:	f1c2 0220 	rsb	r2, r2, #32
 800043e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000442:	ea5f 0031 	movs.w	r0, r1, rrx
 8000446:	f140 0000 	adc.w	r0, r0, #0
 800044a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044e:	bf08      	it	eq
 8000450:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000454:	4770      	bx	lr
 8000456:	f092 0f00 	teq	r2, #0
 800045a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0040      	lsleq	r0, r0, #1
 8000462:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000466:	3a01      	subeq	r2, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xce>
 800046a:	ea40 000c 	orr.w	r0, r0, ip
 800046e:	f093 0f00 	teq	r3, #0
 8000472:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000476:	bf02      	ittt	eq
 8000478:	0049      	lsleq	r1, r1, #1
 800047a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047e:	3b01      	subeq	r3, #1
 8000480:	d0f9      	beq.n	8000476 <__aeabi_fmul+0xe6>
 8000482:	ea41 010c 	orr.w	r1, r1, ip
 8000486:	e78f      	b.n	80003a8 <__aeabi_fmul+0x18>
 8000488:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800048c:	ea92 0f0c 	teq	r2, ip
 8000490:	bf18      	it	ne
 8000492:	ea93 0f0c 	teqne	r3, ip
 8000496:	d00a      	beq.n	80004ae <__aeabi_fmul+0x11e>
 8000498:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800049c:	bf18      	it	ne
 800049e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004a2:	d1d8      	bne.n	8000456 <__aeabi_fmul+0xc6>
 80004a4:	ea80 0001 	eor.w	r0, r0, r1
 80004a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ac:	4770      	bx	lr
 80004ae:	f090 0f00 	teq	r0, #0
 80004b2:	bf17      	itett	ne
 80004b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b8:	4608      	moveq	r0, r1
 80004ba:	f091 0f00 	teqne	r1, #0
 80004be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004c2:	d014      	beq.n	80004ee <__aeabi_fmul+0x15e>
 80004c4:	ea92 0f0c 	teq	r2, ip
 80004c8:	d101      	bne.n	80004ce <__aeabi_fmul+0x13e>
 80004ca:	0242      	lsls	r2, r0, #9
 80004cc:	d10f      	bne.n	80004ee <__aeabi_fmul+0x15e>
 80004ce:	ea93 0f0c 	teq	r3, ip
 80004d2:	d103      	bne.n	80004dc <__aeabi_fmul+0x14c>
 80004d4:	024b      	lsls	r3, r1, #9
 80004d6:	bf18      	it	ne
 80004d8:	4608      	movne	r0, r1
 80004da:	d108      	bne.n	80004ee <__aeabi_fmul+0x15e>
 80004dc:	ea80 0001 	eor.w	r0, r0, r1
 80004e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004ec:	4770      	bx	lr
 80004ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_fdiv>:
 80004f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000500:	bf1e      	ittt	ne
 8000502:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000506:	ea92 0f0c 	teqne	r2, ip
 800050a:	ea93 0f0c 	teqne	r3, ip
 800050e:	d069      	beq.n	80005e4 <__aeabi_fdiv+0xec>
 8000510:	eba2 0203 	sub.w	r2, r2, r3
 8000514:	ea80 0c01 	eor.w	ip, r0, r1
 8000518:	0249      	lsls	r1, r1, #9
 800051a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051e:	d037      	beq.n	8000590 <__aeabi_fdiv+0x98>
 8000520:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000524:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000528:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800052c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000530:	428b      	cmp	r3, r1
 8000532:	bf38      	it	cc
 8000534:	005b      	lslcc	r3, r3, #1
 8000536:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800053a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053e:	428b      	cmp	r3, r1
 8000540:	bf24      	itt	cs
 8000542:	1a5b      	subcs	r3, r3, r1
 8000544:	ea40 000c 	orrcs.w	r0, r0, ip
 8000548:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800054c:	bf24      	itt	cs
 800054e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000552:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000556:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800055a:	bf24      	itt	cs
 800055c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000560:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000564:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000568:	bf24      	itt	cs
 800056a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	bf18      	it	ne
 8000576:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800057a:	d1e0      	bne.n	800053e <__aeabi_fdiv+0x46>
 800057c:	2afd      	cmp	r2, #253	; 0xfd
 800057e:	f63f af50 	bhi.w	8000422 <__aeabi_fmul+0x92>
 8000582:	428b      	cmp	r3, r1
 8000584:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000588:	bf08      	it	eq
 800058a:	f020 0001 	biceq.w	r0, r0, #1
 800058e:	4770      	bx	lr
 8000590:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000594:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000598:	327f      	adds	r2, #127	; 0x7f
 800059a:	bfc2      	ittt	gt
 800059c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a4:	4770      	bxgt	lr
 80005a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005aa:	f04f 0300 	mov.w	r3, #0
 80005ae:	3a01      	subs	r2, #1
 80005b0:	e737      	b.n	8000422 <__aeabi_fmul+0x92>
 80005b2:	f092 0f00 	teq	r2, #0
 80005b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0040      	lsleq	r0, r0, #1
 80005be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005c2:	3a01      	subeq	r2, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xc2>
 80005c6:	ea40 000c 	orr.w	r0, r0, ip
 80005ca:	f093 0f00 	teq	r3, #0
 80005ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005d2:	bf02      	ittt	eq
 80005d4:	0049      	lsleq	r1, r1, #1
 80005d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005da:	3b01      	subeq	r3, #1
 80005dc:	d0f9      	beq.n	80005d2 <__aeabi_fdiv+0xda>
 80005de:	ea41 010c 	orr.w	r1, r1, ip
 80005e2:	e795      	b.n	8000510 <__aeabi_fdiv+0x18>
 80005e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e8:	ea92 0f0c 	teq	r2, ip
 80005ec:	d108      	bne.n	8000600 <__aeabi_fdiv+0x108>
 80005ee:	0242      	lsls	r2, r0, #9
 80005f0:	f47f af7d 	bne.w	80004ee <__aeabi_fmul+0x15e>
 80005f4:	ea93 0f0c 	teq	r3, ip
 80005f8:	f47f af70 	bne.w	80004dc <__aeabi_fmul+0x14c>
 80005fc:	4608      	mov	r0, r1
 80005fe:	e776      	b.n	80004ee <__aeabi_fmul+0x15e>
 8000600:	ea93 0f0c 	teq	r3, ip
 8000604:	d104      	bne.n	8000610 <__aeabi_fdiv+0x118>
 8000606:	024b      	lsls	r3, r1, #9
 8000608:	f43f af4c 	beq.w	80004a4 <__aeabi_fmul+0x114>
 800060c:	4608      	mov	r0, r1
 800060e:	e76e      	b.n	80004ee <__aeabi_fmul+0x15e>
 8000610:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000614:	bf18      	it	ne
 8000616:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800061a:	d1ca      	bne.n	80005b2 <__aeabi_fdiv+0xba>
 800061c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000620:	f47f af5c 	bne.w	80004dc <__aeabi_fmul+0x14c>
 8000624:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000628:	f47f af3c 	bne.w	80004a4 <__aeabi_fmul+0x114>
 800062c:	e75f      	b.n	80004ee <__aeabi_fmul+0x15e>
 800062e:	bf00      	nop

08000630 <__aeabi_f2iz>:
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000638:	d30f      	bcc.n	800065a <__aeabi_f2iz+0x2a>
 800063a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800063e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000642:	d90d      	bls.n	8000660 <__aeabi_f2iz+0x30>
 8000644:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000648:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800064c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000650:	fa23 f002 	lsr.w	r0, r3, r2
 8000654:	bf18      	it	ne
 8000656:	4240      	negne	r0, r0
 8000658:	4770      	bx	lr
 800065a:	f04f 0000 	mov.w	r0, #0
 800065e:	4770      	bx	lr
 8000660:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000664:	d101      	bne.n	800066a <__aeabi_f2iz+0x3a>
 8000666:	0242      	lsls	r2, r0, #9
 8000668:	d105      	bne.n	8000676 <__aeabi_f2iz+0x46>
 800066a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800066e:	bf08      	it	eq
 8000670:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000674:	4770      	bx	lr
 8000676:	f04f 0000 	mov.w	r0, #0
 800067a:	4770      	bx	lr

0800067c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800067c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <HAL_InitTick+0x3c>)
{
 8000680:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000682:	7818      	ldrb	r0, [r3, #0]
 8000684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000688:	fbb3 f3f0 	udiv	r3, r3, r0
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <HAL_InitTick+0x40>)
 800068e:	6810      	ldr	r0, [r2, #0]
 8000690:	fbb0 f0f3 	udiv	r0, r0, r3
 8000694:	f000 face 	bl	8000c34 <HAL_SYSTICK_Config>
 8000698:	4604      	mov	r4, r0
 800069a:	b958      	cbnz	r0, 80006b4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069c:	2d0f      	cmp	r5, #15
 800069e:	d809      	bhi.n	80006b4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a0:	4602      	mov	r2, r0
 80006a2:	4629      	mov	r1, r5
 80006a4:	f04f 30ff 	mov.w	r0, #4294967295
 80006a8:	f000 fa82 	bl	8000bb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <HAL_InitTick+0x44>)
 80006ae:	4620      	mov	r0, r4
 80006b0:	601d      	str	r5, [r3, #0]
 80006b2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80006b4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006b6:	bd38      	pop	{r3, r4, r5, pc}
 80006b8:	20000000 	.word	0x20000000
 80006bc:	20000074 	.word	0x20000074
 80006c0:	20000004 	.word	0x20000004

080006c4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <HAL_Init+0x20>)
{
 80006c6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ca:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	f043 0310 	orr.w	r3, r3, #16
 80006d0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d2:	f000 fa5b 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff ffd0 	bl	800067c <HAL_InitTick>
  HAL_MspInit();
 80006dc:	f004 f8d6 	bl	800488c <HAL_MspInit>
}
 80006e0:	2000      	movs	r0, #0
 80006e2:	bd08      	pop	{r3, pc}
 80006e4:	40022000 	.word	0x40022000

080006e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006e8:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <HAL_IncTick+0x10>)
 80006ea:	4b04      	ldr	r3, [pc, #16]	; (80006fc <HAL_IncTick+0x14>)
 80006ec:	6811      	ldr	r1, [r2, #0]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	440b      	add	r3, r1
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	200007d4 	.word	0x200007d4
 80006fc:	20000000 	.word	0x20000000

08000700 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000700:	4b01      	ldr	r3, [pc, #4]	; (8000708 <HAL_GetTick+0x8>)
 8000702:	6818      	ldr	r0, [r3, #0]
}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	200007d4 	.word	0x200007d4

0800070c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800070c:	6803      	ldr	r3, [r0, #0]
 800070e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000710:	4770      	bx	lr

08000712 <HAL_ADC_LevelOutOfWindowCallback>:
 8000712:	4770      	bx	lr

08000714 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000714:	6803      	ldr	r3, [r0, #0]
{
 8000716:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000718:	685a      	ldr	r2, [r3, #4]
{
 800071a:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800071c:	0690      	lsls	r0, r2, #26
 800071e:	d527      	bpl.n	8000770 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	0791      	lsls	r1, r2, #30
 8000724:	d524      	bpl.n	8000770 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000726:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000728:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800072a:	bf5e      	ittt	pl
 800072c:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800072e:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000732:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000734:	689a      	ldr	r2, [r3, #8]
 8000736:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800073a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800073e:	d110      	bne.n	8000762 <HAL_ADC_IRQHandler+0x4e>
 8000740:	7b22      	ldrb	r2, [r4, #12]
 8000742:	b972      	cbnz	r2, 8000762 <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	f022 0220 	bic.w	r2, r2, #32
 800074a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800074c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800074e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000752:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000754:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000756:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000758:	bf5e      	ittt	pl
 800075a:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800075c:	f043 0301 	orrpl.w	r3, r3, #1
 8000760:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000762:	4620      	mov	r0, r4
 8000764:	f004 fa24 	bl	8004bb0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000768:	f06f 0212 	mvn.w	r2, #18
 800076c:	6823      	ldr	r3, [r4, #0]
 800076e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	685a      	ldr	r2, [r3, #4]
 8000774:	0610      	lsls	r0, r2, #24
 8000776:	d530      	bpl.n	80007da <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	0751      	lsls	r1, r2, #29
 800077c:	d52d      	bpl.n	80007da <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800077e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000780:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000782:	bf5e      	ittt	pl
 8000784:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000786:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800078a:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800078c:	689a      	ldr	r2, [r3, #8]
 800078e:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000792:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000796:	d00a      	beq.n	80007ae <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000798:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800079a:	0550      	lsls	r0, r2, #21
 800079c:	d416      	bmi.n	80007cc <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800079e:	689a      	ldr	r2, [r3, #8]
 80007a0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80007a4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80007a8:	d110      	bne.n	80007cc <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80007aa:	7b22      	ldrb	r2, [r4, #12]
 80007ac:	b972      	cbnz	r2, 80007cc <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80007ae:	685a      	ldr	r2, [r3, #4]
 80007b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007b4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80007b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007bc:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80007be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007c0:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007c2:	bf5e      	ittt	pl
 80007c4:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80007c6:	f043 0301 	orrpl.w	r3, r3, #1
 80007ca:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80007cc:	4620      	mov	r0, r4
 80007ce:	f000 f9db 	bl	8000b88 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80007d2:	f06f 020c 	mvn.w	r2, #12
 80007d6:	6823      	ldr	r3, [r4, #0]
 80007d8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80007da:	6823      	ldr	r3, [r4, #0]
 80007dc:	685a      	ldr	r2, [r3, #4]
 80007de:	0652      	lsls	r2, r2, #25
 80007e0:	d50d      	bpl.n	80007fe <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	07db      	lsls	r3, r3, #31
 80007e6:	d50a      	bpl.n	80007fe <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80007e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80007ea:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80007ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007f0:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80007f2:	f7ff ff8e 	bl	8000712 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80007f6:	f06f 0201 	mvn.w	r2, #1
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	bd10      	pop	{r4, pc}

08000800 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000800:	2300      	movs	r3, #0
{ 
 8000802:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000804:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000806:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800080a:	2b01      	cmp	r3, #1
 800080c:	d074      	beq.n	80008f8 <HAL_ADC_ConfigChannel+0xf8>
 800080e:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000810:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000812:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000816:	2d06      	cmp	r5, #6
 8000818:	6802      	ldr	r2, [r0, #0]
 800081a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800081e:	680c      	ldr	r4, [r1, #0]
 8000820:	d825      	bhi.n	800086e <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000822:	442b      	add	r3, r5
 8000824:	251f      	movs	r5, #31
 8000826:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000828:	3b05      	subs	r3, #5
 800082a:	409d      	lsls	r5, r3
 800082c:	ea26 0505 	bic.w	r5, r6, r5
 8000830:	fa04 f303 	lsl.w	r3, r4, r3
 8000834:	432b      	orrs	r3, r5
 8000836:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000838:	2c09      	cmp	r4, #9
 800083a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800083e:	688d      	ldr	r5, [r1, #8]
 8000840:	d92f      	bls.n	80008a2 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000842:	2607      	movs	r6, #7
 8000844:	4423      	add	r3, r4
 8000846:	68d1      	ldr	r1, [r2, #12]
 8000848:	3b1e      	subs	r3, #30
 800084a:	409e      	lsls	r6, r3
 800084c:	ea21 0106 	bic.w	r1, r1, r6
 8000850:	fa05 f303 	lsl.w	r3, r5, r3
 8000854:	430b      	orrs	r3, r1
 8000856:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000858:	f1a4 0310 	sub.w	r3, r4, #16
 800085c:	2b01      	cmp	r3, #1
 800085e:	d92b      	bls.n	80008b8 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000860:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000862:	2200      	movs	r2, #0
 8000864:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000868:	4618      	mov	r0, r3
 800086a:	b002      	add	sp, #8
 800086c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800086e:	2d0c      	cmp	r5, #12
 8000870:	d80b      	bhi.n	800088a <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000872:	442b      	add	r3, r5
 8000874:	251f      	movs	r5, #31
 8000876:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000878:	3b23      	subs	r3, #35	; 0x23
 800087a:	409d      	lsls	r5, r3
 800087c:	ea26 0505 	bic.w	r5, r6, r5
 8000880:	fa04 f303 	lsl.w	r3, r4, r3
 8000884:	432b      	orrs	r3, r5
 8000886:	6313      	str	r3, [r2, #48]	; 0x30
 8000888:	e7d6      	b.n	8000838 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800088a:	442b      	add	r3, r5
 800088c:	251f      	movs	r5, #31
 800088e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000890:	3b41      	subs	r3, #65	; 0x41
 8000892:	409d      	lsls	r5, r3
 8000894:	ea26 0505 	bic.w	r5, r6, r5
 8000898:	fa04 f303 	lsl.w	r3, r4, r3
 800089c:	432b      	orrs	r3, r5
 800089e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008a0:	e7ca      	b.n	8000838 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80008a2:	2607      	movs	r6, #7
 80008a4:	6911      	ldr	r1, [r2, #16]
 80008a6:	4423      	add	r3, r4
 80008a8:	409e      	lsls	r6, r3
 80008aa:	ea21 0106 	bic.w	r1, r1, r6
 80008ae:	fa05 f303 	lsl.w	r3, r5, r3
 80008b2:	430b      	orrs	r3, r1
 80008b4:	6113      	str	r3, [r2, #16]
 80008b6:	e7cf      	b.n	8000858 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_ADC_ConfigChannel+0xfc>)
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d116      	bne.n	80008ec <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80008be:	6893      	ldr	r3, [r2, #8]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	d4cd      	bmi.n	8000860 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008c4:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008c6:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008cc:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008ce:	d1c7      	bne.n	8000860 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <HAL_ADC_ConfigChannel+0x100>)
 80008d2:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <HAL_ADC_ConfigChannel+0x104>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80008da:	230a      	movs	r3, #10
 80008dc:	4353      	muls	r3, r2
            wait_loop_index--;
 80008de:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80008e0:	9b01      	ldr	r3, [sp, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0bc      	beq.n	8000860 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80008e6:	9b01      	ldr	r3, [sp, #4]
 80008e8:	3b01      	subs	r3, #1
 80008ea:	e7f8      	b.n	80008de <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80008ee:	f043 0320 	orr.w	r3, r3, #32
 80008f2:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e7b4      	b.n	8000862 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80008f8:	2302      	movs	r3, #2
 80008fa:	e7b5      	b.n	8000868 <HAL_ADC_ConfigChannel+0x68>
 80008fc:	40012400 	.word	0x40012400
 8000900:	20000074 	.word	0x20000074
 8000904:	000f4240 	.word	0x000f4240

08000908 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000908:	2300      	movs	r3, #0
{
 800090a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800090c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800090e:	6803      	ldr	r3, [r0, #0]
{
 8000910:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000912:	689a      	ldr	r2, [r3, #8]
 8000914:	07d2      	lsls	r2, r2, #31
 8000916:	d502      	bpl.n	800091e <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000918:	2000      	movs	r0, #0
}
 800091a:	b002      	add	sp, #8
 800091c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	f042 0201 	orr.w	r2, r2, #1
 8000924:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <ADC_Enable+0x68>)
 8000928:	4a12      	ldr	r2, [pc, #72]	; (8000974 <ADC_Enable+0x6c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000930:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000932:	9b01      	ldr	r3, [sp, #4]
 8000934:	b9c3      	cbnz	r3, 8000968 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000936:	f7ff fee3 	bl	8000700 <HAL_GetTick>
 800093a:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800093c:	6823      	ldr	r3, [r4, #0]
 800093e:	689d      	ldr	r5, [r3, #8]
 8000940:	f015 0501 	ands.w	r5, r5, #1
 8000944:	d1e8      	bne.n	8000918 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000946:	f7ff fedb 	bl	8000700 <HAL_GetTick>
 800094a:	1b80      	subs	r0, r0, r6
 800094c:	2802      	cmp	r0, #2
 800094e:	d9f5      	bls.n	800093c <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000950:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000952:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800095c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800095e:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000966:	e7d8      	b.n	800091a <ADC_Enable+0x12>
      wait_loop_index--;
 8000968:	9b01      	ldr	r3, [sp, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	e7e0      	b.n	8000930 <ADC_Enable+0x28>
 800096e:	bf00      	nop
 8000970:	20000074 	.word	0x20000074
 8000974:	000f4240 	.word	0x000f4240

08000978 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 8000978:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800097c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800097e:	2b01      	cmp	r3, #1
{
 8000980:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000982:	d058      	beq.n	8000a36 <HAL_ADC_Start_IT+0xbe>
 8000984:	2301      	movs	r3, #1
 8000986:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800098a:	f7ff ffbd 	bl	8000908 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800098e:	2800      	cmp	r0, #0
 8000990:	d14d      	bne.n	8000a2e <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 8000992:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000994:	4a29      	ldr	r2, [pc, #164]	; (8000a3c <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8000996:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800099a:	f023 0301 	bic.w	r3, r3, #1
 800099e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d104      	bne.n	80009b4 <HAL_ADC_Start_IT+0x3c>
 80009aa:	4925      	ldr	r1, [pc, #148]	; (8000a40 <HAL_ADC_Start_IT+0xc8>)
 80009ac:	684a      	ldr	r2, [r1, #4]
 80009ae:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80009b2:	d132      	bne.n	8000a1a <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009b6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80009ba:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009bc:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009be:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009c0:	bf41      	itttt	mi
 80009c2:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80009c4:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80009c8:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80009cc:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009d4:	bf1c      	itt	ne
 80009d6:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80009d8:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80009dc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80009de:	2200      	movs	r2, #0
 80009e0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009e4:	f06f 0202 	mvn.w	r2, #2
 80009e8:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	f042 0220 	orr.w	r2, r2, #32
 80009f0:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80009f8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80009fc:	d113      	bne.n	8000a26 <HAL_ADC_Start_IT+0xae>
 80009fe:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <HAL_ADC_Start_IT+0xc4>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d105      	bne.n	8000a10 <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a04:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000a08:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a0a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000a0e:	d10a      	bne.n	8000a26 <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a1a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a1c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a20:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a22:	684a      	ldr	r2, [r1, #4]
 8000a24:	e7cb      	b.n	80009be <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a26:	689a      	ldr	r2, [r3, #8]
 8000a28:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a2c:	e7f3      	b.n	8000a16 <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000a34:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000a36:	2002      	movs	r0, #2
}
 8000a38:	bd10      	pop	{r4, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40012800 	.word	0x40012800
 8000a40:	40012400 	.word	0x40012400

08000a44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000a44:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a46:	6803      	ldr	r3, [r0, #0]
{
 8000a48:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a4a:	689a      	ldr	r2, [r3, #8]
 8000a4c:	07d2      	lsls	r2, r2, #31
 8000a4e:	d401      	bmi.n	8000a54 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a50:	2000      	movs	r0, #0
 8000a52:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	f022 0201 	bic.w	r2, r2, #1
 8000a5a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000a5c:	f7ff fe50 	bl	8000700 <HAL_GetTick>
 8000a60:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a62:	6823      	ldr	r3, [r4, #0]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	07db      	lsls	r3, r3, #31
 8000a68:	d5f2      	bpl.n	8000a50 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000a6a:	f7ff fe49 	bl	8000700 <HAL_GetTick>
 8000a6e:	1b40      	subs	r0, r0, r5
 8000a70:	2802      	cmp	r0, #2
 8000a72:	d9f6      	bls.n	8000a62 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a76:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a78:	f043 0310 	orr.w	r3, r3, #16
 8000a7c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a86:	bd38      	pop	{r3, r4, r5, pc}

08000a88 <HAL_ADC_Init>:
{
 8000a88:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	2800      	cmp	r0, #0
 8000a8e:	d071      	beq.n	8000b74 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a92:	b923      	cbnz	r3, 8000a9e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000a94:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000a96:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000a9a:	f003 ff19 	bl	80048d0 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	f7ff ffd0 	bl	8000a44 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000aa6:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000aaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aac:	d164      	bne.n	8000b78 <HAL_ADC_Init+0xf0>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d162      	bne.n	8000b78 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ab2:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000ab4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ab8:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000aba:	f023 0302 	bic.w	r3, r3, #2
 8000abe:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ac2:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ac4:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000ac6:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ac8:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000aca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ace:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ad2:	d038      	beq.n	8000b46 <HAL_ADC_Init+0xbe>
 8000ad4:	2901      	cmp	r1, #1
 8000ad6:	bf14      	ite	ne
 8000ad8:	4606      	movne	r6, r0
 8000ada:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ade:	7d25      	ldrb	r5, [r4, #20]
 8000ae0:	2d01      	cmp	r5, #1
 8000ae2:	d107      	bne.n	8000af4 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d130      	bne.n	8000b4a <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ae8:	69a3      	ldr	r3, [r4, #24]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000af0:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000af4:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000af6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000afa:	685d      	ldr	r5, [r3, #4]
 8000afc:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000b00:	ea45 0506 	orr.w	r5, r5, r6
 8000b04:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000b06:	689e      	ldr	r6, [r3, #8]
 8000b08:	4d1d      	ldr	r5, [pc, #116]	; (8000b80 <HAL_ADC_Init+0xf8>)
 8000b0a:	ea05 0506 	and.w	r5, r5, r6
 8000b0e:	ea45 0502 	orr.w	r5, r5, r2
 8000b12:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b14:	d001      	beq.n	8000b1a <HAL_ADC_Init+0x92>
 8000b16:	2901      	cmp	r1, #1
 8000b18:	d120      	bne.n	8000b5c <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b1a:	6921      	ldr	r1, [r4, #16]
 8000b1c:	3901      	subs	r1, #1
 8000b1e:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000b20:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000b22:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000b26:	4329      	orrs	r1, r5
 8000b28:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b2a:	6899      	ldr	r1, [r3, #8]
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_ADC_Init+0xfc>)
 8000b2e:	400b      	ands	r3, r1
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d115      	bne.n	8000b60 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000b34:	2300      	movs	r3, #0
 8000b36:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000b38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b3a:	f023 0303 	bic.w	r3, r3, #3
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b44:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b46:	460e      	mov	r6, r1
 8000b48:	e7c9      	b.n	8000ade <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b4c:	f043 0320 	orr.w	r3, r3, #32
 8000b50:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b5a:	e7cb      	b.n	8000af4 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e7df      	b.n	8000b20 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000b60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b62:	f023 0312 	bic.w	r3, r3, #18
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000b74:	2001      	movs	r0, #1
}
 8000b76:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b78:	f043 0310 	orr.w	r3, r3, #16
 8000b7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b7e:	e7f9      	b.n	8000b74 <HAL_ADC_Init+0xec>
 8000b80:	ffe1f7fd 	.word	0xffe1f7fd
 8000b84:	ff1f0efe 	.word	0xff1f0efe

08000b88 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b88:	4770      	bx	lr
	...

08000b8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b8e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b92:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b9a:	041b      	lsls	r3, r3, #16
 8000b9c:	0c1b      	lsrs	r3, r3, #16
 8000b9e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000ba6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ba8:	60d3      	str	r3, [r2, #12]
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb2:	b530      	push	{r4, r5, lr}
 8000bb4:	68dc      	ldr	r4, [r3, #12]
 8000bb6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	bf28      	it	cs
 8000bc4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bcc:	bf98      	it	ls
 8000bce:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	fa05 f303 	lsl.w	r3, r5, r3
 8000bd4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd8:	bf88      	it	hi
 8000bda:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	4019      	ands	r1, r3
 8000bde:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	fa05 f404 	lsl.w	r4, r5, r4
 8000be4:	3c01      	subs	r4, #1
 8000be6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000be8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bea:	ea42 0201 	orr.w	r2, r2, r1
 8000bee:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	bfa9      	itett	ge
 8000bf4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	4b06      	ldrlt	r3, [pc, #24]	; (8000c14 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	b2d2      	uxtbge	r2, r2
 8000bfc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	bfbb      	ittet	lt
 8000c02:	f000 000f 	andlt.w	r0, r0, #15
 8000c06:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	541a      	strblt	r2, [r3, r0]
 8000c0e:	bd30      	pop	{r4, r5, pc}
 8000c10:	e000ed00 	.word	0xe000ed00
 8000c14:	e000ed14 	.word	0xe000ed14

08000c18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	db08      	blt.n	8000c2e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	0942      	lsrs	r2, r0, #5
 8000c20:	f000 001f 	and.w	r0, r0, #31
 8000c24:	fa03 f000 	lsl.w	r0, r3, r0
 8000c28:	4b01      	ldr	r3, [pc, #4]	; (8000c30 <HAL_NVIC_EnableIRQ+0x18>)
 8000c2a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c2e:	4770      	bx	lr
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	3801      	subs	r0, #1
 8000c36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c3a:	d20a      	bcs.n	8000c52 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c42:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c48:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c52:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e010 	.word	0xe000e010
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c60:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000c64:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d003      	beq.n	8000c72 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c6e:	2001      	movs	r0, #1
 8000c70:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c72:	6803      	ldr	r3, [r0, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	f022 020e 	bic.w	r2, r2, #14
 8000c7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	f022 0201 	bic.w	r2, r2, #1
 8000c82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c84:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <HAL_DMA_Abort_IT+0x88>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d01f      	beq.n	8000cca <HAL_DMA_Abort_IT+0x6a>
 8000c8a:	3214      	adds	r2, #20
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d01e      	beq.n	8000cce <HAL_DMA_Abort_IT+0x6e>
 8000c90:	3214      	adds	r2, #20
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d01d      	beq.n	8000cd2 <HAL_DMA_Abort_IT+0x72>
 8000c96:	3214      	adds	r2, #20
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d01d      	beq.n	8000cd8 <HAL_DMA_Abort_IT+0x78>
 8000c9c:	3214      	adds	r2, #20
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d01d      	beq.n	8000cde <HAL_DMA_Abort_IT+0x7e>
 8000ca2:	3214      	adds	r2, #20
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	bf0c      	ite	eq
 8000ca8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000cac:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb2:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cb4:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000cbe:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000cc2:	b17b      	cbz	r3, 8000ce4 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000cc4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e7f0      	b.n	8000cb0 <HAL_DMA_Abort_IT+0x50>
 8000cce:	2310      	movs	r3, #16
 8000cd0:	e7ee      	b.n	8000cb0 <HAL_DMA_Abort_IT+0x50>
 8000cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd6:	e7eb      	b.n	8000cb0 <HAL_DMA_Abort_IT+0x50>
 8000cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cdc:	e7e8      	b.n	8000cb0 <HAL_DMA_Abort_IT+0x50>
 8000cde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce2:	e7e5      	b.n	8000cb0 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000ce4:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000ce6:	bd10      	pop	{r4, pc}
 8000ce8:	40020008 	.word	0x40020008
 8000cec:	40020000 	.word	0x40020000

08000cf0 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000cf0:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <FLASH_SetErrorCode+0x48>)
 8000cf2:	68d3      	ldr	r3, [r2, #12]
 8000cf4:	f013 0310 	ands.w	r3, r3, #16
 8000cf8:	d005      	beq.n	8000d06 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000cfa:	4910      	ldr	r1, [pc, #64]	; (8000d3c <FLASH_SetErrorCode+0x4c>)
 8000cfc:	69cb      	ldr	r3, [r1, #28]
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000d04:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d06:	68d2      	ldr	r2, [r2, #12]
 8000d08:	0750      	lsls	r0, r2, #29
 8000d0a:	d506      	bpl.n	8000d1a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000d0c:	490b      	ldr	r1, [pc, #44]	; (8000d3c <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000d12:	69ca      	ldr	r2, [r1, #28]
 8000d14:	f042 0201 	orr.w	r2, r2, #1
 8000d18:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000d1a:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <FLASH_SetErrorCode+0x48>)
 8000d1c:	69d1      	ldr	r1, [r2, #28]
 8000d1e:	07c9      	lsls	r1, r1, #31
 8000d20:	d508      	bpl.n	8000d34 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <FLASH_SetErrorCode+0x4c>)
 8000d24:	69c1      	ldr	r1, [r0, #28]
 8000d26:	f041 0104 	orr.w	r1, r1, #4
 8000d2a:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000d2c:	69d1      	ldr	r1, [r2, #28]
 8000d2e:	f021 0101 	bic.w	r1, r1, #1
 8000d32:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000d34:	60d3      	str	r3, [r2, #12]
 8000d36:	4770      	bx	lr
 8000d38:	40022000 	.word	0x40022000
 8000d3c:	200007d8 	.word	0x200007d8

08000d40 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_FLASH_Unlock+0x1c>)
 8000d42:	6918      	ldr	r0, [r3, #16]
 8000d44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d48:	d007      	beq.n	8000d5a <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <HAL_FLASH_Unlock+0x20>)
 8000d4c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d4e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000d52:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d54:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000d56:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000d5a:	4770      	bx	lr
 8000d5c:	40022000 	.word	0x40022000
 8000d60:	45670123 	.word	0x45670123

08000d64 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000d64:	4a03      	ldr	r2, [pc, #12]	; (8000d74 <HAL_FLASH_Lock+0x10>)
}
 8000d66:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000d68:	6913      	ldr	r3, [r2, #16]
 8000d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6e:	6113      	str	r3, [r2, #16]
}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40022000 	.word	0x40022000

08000d78 <FLASH_WaitForLastOperation>:
{
 8000d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7a:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff fcc0 	bl	8000700 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000d80:	4c11      	ldr	r4, [pc, #68]	; (8000dc8 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8000d82:	4607      	mov	r7, r0
 8000d84:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000d86:	68e3      	ldr	r3, [r4, #12]
 8000d88:	07d8      	lsls	r0, r3, #31
 8000d8a:	d412      	bmi.n	8000db2 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000d8c:	68e3      	ldr	r3, [r4, #12]
 8000d8e:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000d90:	bf44      	itt	mi
 8000d92:	2320      	movmi	r3, #32
 8000d94:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d96:	68eb      	ldr	r3, [r5, #12]
 8000d98:	06da      	lsls	r2, r3, #27
 8000d9a:	d406      	bmi.n	8000daa <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000d9c:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d9e:	07db      	lsls	r3, r3, #31
 8000da0:	d403      	bmi.n	8000daa <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000da2:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000da4:	f010 0004 	ands.w	r0, r0, #4
 8000da8:	d002      	beq.n	8000db0 <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 8000daa:	f7ff ffa1 	bl	8000cf0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000dae:	2001      	movs	r0, #1
}
 8000db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000db2:	1c73      	adds	r3, r6, #1
 8000db4:	d0e7      	beq.n	8000d86 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000db6:	b90e      	cbnz	r6, 8000dbc <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8000db8:	2003      	movs	r0, #3
 8000dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000dbc:	f7ff fca0 	bl	8000700 <HAL_GetTick>
 8000dc0:	1bc0      	subs	r0, r0, r7
 8000dc2:	4286      	cmp	r6, r0
 8000dc4:	d2df      	bcs.n	8000d86 <FLASH_WaitForLastOperation+0xe>
 8000dc6:	e7f7      	b.n	8000db8 <FLASH_WaitForLastOperation+0x40>
 8000dc8:	40022000 	.word	0x40022000

08000dcc <HAL_FLASH_Program>:
{
 8000dcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8000dd0:	4c1f      	ldr	r4, [pc, #124]	; (8000e50 <HAL_FLASH_Program+0x84>)
{
 8000dd2:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8000dd4:	7e23      	ldrb	r3, [r4, #24]
{
 8000dd6:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000dd8:	2b01      	cmp	r3, #1
{
 8000dda:	460f      	mov	r7, r1
 8000ddc:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8000dde:	d033      	beq.n	8000e48 <HAL_FLASH_Program+0x7c>
 8000de0:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000de2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000de6:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000de8:	f7ff ffc6 	bl	8000d78 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000dec:	bb40      	cbnz	r0, 8000e40 <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000dee:	2d01      	cmp	r5, #1
 8000df0:	d003      	beq.n	8000dfa <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8000df2:	2d02      	cmp	r5, #2
 8000df4:	bf0c      	ite	eq
 8000df6:	2502      	moveq	r5, #2
 8000df8:	2504      	movne	r5, #4
 8000dfa:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000dfc:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000dfe:	f8df b054 	ldr.w	fp, [pc, #84]	; 8000e54 <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000e02:	0132      	lsls	r2, r6, #4
 8000e04:	4640      	mov	r0, r8
 8000e06:	4649      	mov	r1, r9
 8000e08:	f7ff f9a8 	bl	800015c <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e0c:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000e10:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000e14:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 8000e1e:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e22:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e26:	f7ff ffa7 	bl	8000d78 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000e2a:	f8db 3010 	ldr.w	r3, [fp, #16]
 8000e2e:	f023 0301 	bic.w	r3, r3, #1
 8000e32:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 8000e36:	b918      	cbnz	r0, 8000e40 <HAL_FLASH_Program+0x74>
 8000e38:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 8000e3a:	b2f3      	uxtb	r3, r6
 8000e3c:	429d      	cmp	r5, r3
 8000e3e:	d8e0      	bhi.n	8000e02 <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 8000e40:	2300      	movs	r3, #0
 8000e42:	7623      	strb	r3, [r4, #24]
  return status;
 8000e44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000e48:	2002      	movs	r0, #2
}
 8000e4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e4e:	bf00      	nop
 8000e50:	200007d8 	.word	0x200007d8
 8000e54:	40022000 	.word	0x40022000

08000e58 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <FLASH_MassErase.isra.0+0x1c>)
 8000e5c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <FLASH_MassErase.isra.0+0x20>)
 8000e60:	691a      	ldr	r2, [r3, #16]
 8000e62:	f042 0204 	orr.w	r2, r2, #4
 8000e66:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000e68:	691a      	ldr	r2, [r3, #16]
 8000e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e6e:	611a      	str	r2, [r3, #16]
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	200007d8 	.word	0x200007d8
 8000e78:	40022000 	.word	0x40022000

08000e7c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <FLASH_PageErase+0x1c>)
 8000e80:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <FLASH_PageErase+0x20>)
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	f042 0202 	orr.w	r2, r2, #2
 8000e8a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000e8c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	4770      	bx	lr
 8000e98:	200007d8 	.word	0x200007d8
 8000e9c:	40022000 	.word	0x40022000

08000ea0 <HAL_FLASHEx_Erase>:
{
 8000ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000ea4:	4d23      	ldr	r5, [pc, #140]	; (8000f34 <HAL_FLASHEx_Erase+0x94>)
{
 8000ea6:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 8000ea8:	7e2b      	ldrb	r3, [r5, #24]
{
 8000eaa:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d03d      	beq.n	8000f2c <HAL_FLASHEx_Erase+0x8c>
 8000eb0:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000eb2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 8000eb4:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000eb6:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000eb8:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000ebc:	d113      	bne.n	8000ee6 <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000ebe:	f7ff ff5b 	bl	8000d78 <FLASH_WaitForLastOperation>
 8000ec2:	b120      	cbz	r0, 8000ece <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ec4:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	762b      	strb	r3, [r5, #24]
  return status;
 8000eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 8000ece:	f7ff ffc3 	bl	8000e58 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ed2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ed6:	f7ff ff4f 	bl	8000d78 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000eda:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_FLASHEx_Erase+0x98>)
 8000edc:	6913      	ldr	r3, [r2, #16]
 8000ede:	f023 0304 	bic.w	r3, r3, #4
 8000ee2:	6113      	str	r3, [r2, #16]
 8000ee4:	e7ef      	b.n	8000ec6 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000ee6:	f7ff ff47 	bl	8000d78 <FLASH_WaitForLastOperation>
 8000eea:	2800      	cmp	r0, #0
 8000eec:	d1ea      	bne.n	8000ec4 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ef6:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8000ef8:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000efa:	4c0f      	ldr	r4, [pc, #60]	; (8000f38 <HAL_FLASHEx_Erase+0x98>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8000f04:	429e      	cmp	r6, r3
 8000f06:	d2de      	bcs.n	8000ec6 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8000f08:	4630      	mov	r0, r6
 8000f0a:	f7ff ffb7 	bl	8000e7c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f12:	f7ff ff31 	bl	8000d78 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000f16:	6923      	ldr	r3, [r4, #16]
 8000f18:	f023 0302 	bic.w	r3, r3, #2
 8000f1c:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000f1e:	b110      	cbz	r0, 8000f26 <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8000f20:	f8c8 6000 	str.w	r6, [r8]
            break;
 8000f24:	e7cf      	b.n	8000ec6 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8000f26:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f2a:	e7e7      	b.n	8000efc <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8000f2c:	2002      	movs	r0, #2
}
 8000f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f32:	bf00      	nop
 8000f34:	200007d8 	.word	0x200007d8
 8000f38:	40022000 	.word	0x40022000

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f40:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000f42:	4626      	mov	r6, r4
 8000f44:	4b66      	ldr	r3, [pc, #408]	; (80010e0 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f46:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80010f0 <HAL_GPIO_Init+0x1b4>
 8000f4a:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80010f4 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4e:	680a      	ldr	r2, [r1, #0]
 8000f50:	fa32 f506 	lsrs.w	r5, r2, r6
 8000f54:	d102      	bne.n	8000f5c <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000f56:	b003      	add	sp, #12
 8000f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000f5c:	f04f 0801 	mov.w	r8, #1
 8000f60:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f64:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000f68:	4590      	cmp	r8, r2
 8000f6a:	d17f      	bne.n	800106c <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000f6c:	684d      	ldr	r5, [r1, #4]
 8000f6e:	2d12      	cmp	r5, #18
 8000f70:	f000 80aa 	beq.w	80010c8 <HAL_GPIO_Init+0x18c>
 8000f74:	f200 8083 	bhi.w	800107e <HAL_GPIO_Init+0x142>
 8000f78:	2d02      	cmp	r5, #2
 8000f7a:	f000 80a2 	beq.w	80010c2 <HAL_GPIO_Init+0x186>
 8000f7e:	d877      	bhi.n	8001070 <HAL_GPIO_Init+0x134>
 8000f80:	2d00      	cmp	r5, #0
 8000f82:	f000 8089 	beq.w	8001098 <HAL_GPIO_Init+0x15c>
 8000f86:	2d01      	cmp	r5, #1
 8000f88:	f000 8099 	beq.w	80010be <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f8c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f90:	2aff      	cmp	r2, #255	; 0xff
 8000f92:	bf93      	iteet	ls
 8000f94:	4682      	movls	sl, r0
 8000f96:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000f9a:	3d08      	subhi	r5, #8
 8000f9c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000fa0:	bf92      	itee	ls
 8000fa2:	00b5      	lslls	r5, r6, #2
 8000fa4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000fa8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000faa:	fa09 f805 	lsl.w	r8, r9, r5
 8000fae:	ea2b 0808 	bic.w	r8, fp, r8
 8000fb2:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fb6:	bf88      	it	hi
 8000fb8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fbc:	ea48 0505 	orr.w	r5, r8, r5
 8000fc0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000fc8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000fcc:	d04e      	beq.n	800106c <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fce:	4d45      	ldr	r5, [pc, #276]	; (80010e4 <HAL_GPIO_Init+0x1a8>)
 8000fd0:	4f44      	ldr	r7, [pc, #272]	; (80010e4 <HAL_GPIO_Init+0x1a8>)
 8000fd2:	69ad      	ldr	r5, [r5, #24]
 8000fd4:	f026 0803 	bic.w	r8, r6, #3
 8000fd8:	f045 0501 	orr.w	r5, r5, #1
 8000fdc:	61bd      	str	r5, [r7, #24]
 8000fde:	69bd      	ldr	r5, [r7, #24]
 8000fe0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000fe4:	f005 0501 	and.w	r5, r5, #1
 8000fe8:	9501      	str	r5, [sp, #4]
 8000fea:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fee:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ff4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000ff8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ffc:	fa09 f90b 	lsl.w	r9, r9, fp
 8001000:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001004:	4d38      	ldr	r5, [pc, #224]	; (80010e8 <HAL_GPIO_Init+0x1ac>)
 8001006:	42a8      	cmp	r0, r5
 8001008:	d063      	beq.n	80010d2 <HAL_GPIO_Init+0x196>
 800100a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800100e:	42a8      	cmp	r0, r5
 8001010:	d061      	beq.n	80010d6 <HAL_GPIO_Init+0x19a>
 8001012:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001016:	42a8      	cmp	r0, r5
 8001018:	d05f      	beq.n	80010da <HAL_GPIO_Init+0x19e>
 800101a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800101e:	42a8      	cmp	r0, r5
 8001020:	bf0c      	ite	eq
 8001022:	2503      	moveq	r5, #3
 8001024:	2504      	movne	r5, #4
 8001026:	fa05 f50b 	lsl.w	r5, r5, fp
 800102a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800102e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001032:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001034:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001038:	bf14      	ite	ne
 800103a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800103c:	4395      	biceq	r5, r2
 800103e:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001040:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001042:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001046:	bf14      	ite	ne
 8001048:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800104a:	4395      	biceq	r5, r2
 800104c:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800104e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001050:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001054:	bf14      	ite	ne
 8001056:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001058:	4395      	biceq	r5, r2
 800105a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800105c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800105e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001062:	bf14      	ite	ne
 8001064:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001066:	ea25 0202 	biceq.w	r2, r5, r2
 800106a:	60da      	str	r2, [r3, #12]
	position++;
 800106c:	3601      	adds	r6, #1
 800106e:	e76e      	b.n	8000f4e <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8001070:	2d03      	cmp	r5, #3
 8001072:	d022      	beq.n	80010ba <HAL_GPIO_Init+0x17e>
 8001074:	2d11      	cmp	r5, #17
 8001076:	d189      	bne.n	8000f8c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001078:	68cc      	ldr	r4, [r1, #12]
 800107a:	3404      	adds	r4, #4
          break;
 800107c:	e786      	b.n	8000f8c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800107e:	4f1b      	ldr	r7, [pc, #108]	; (80010ec <HAL_GPIO_Init+0x1b0>)
 8001080:	42bd      	cmp	r5, r7
 8001082:	d009      	beq.n	8001098 <HAL_GPIO_Init+0x15c>
 8001084:	d812      	bhi.n	80010ac <HAL_GPIO_Init+0x170>
 8001086:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80010f8 <HAL_GPIO_Init+0x1bc>
 800108a:	454d      	cmp	r5, r9
 800108c:	d004      	beq.n	8001098 <HAL_GPIO_Init+0x15c>
 800108e:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001092:	454d      	cmp	r5, r9
 8001094:	f47f af7a 	bne.w	8000f8c <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001098:	688c      	ldr	r4, [r1, #8]
 800109a:	b1c4      	cbz	r4, 80010ce <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800109c:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800109e:	bf0c      	ite	eq
 80010a0:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80010a4:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a8:	2408      	movs	r4, #8
 80010aa:	e76f      	b.n	8000f8c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80010ac:	4575      	cmp	r5, lr
 80010ae:	d0f3      	beq.n	8001098 <HAL_GPIO_Init+0x15c>
 80010b0:	4565      	cmp	r5, ip
 80010b2:	d0f1      	beq.n	8001098 <HAL_GPIO_Init+0x15c>
 80010b4:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80010fc <HAL_GPIO_Init+0x1c0>
 80010b8:	e7eb      	b.n	8001092 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010ba:	2400      	movs	r4, #0
 80010bc:	e766      	b.n	8000f8c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010be:	68cc      	ldr	r4, [r1, #12]
          break;
 80010c0:	e764      	b.n	8000f8c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010c2:	68cc      	ldr	r4, [r1, #12]
 80010c4:	3408      	adds	r4, #8
          break;
 80010c6:	e761      	b.n	8000f8c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010c8:	68cc      	ldr	r4, [r1, #12]
 80010ca:	340c      	adds	r4, #12
          break;
 80010cc:	e75e      	b.n	8000f8c <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010ce:	2404      	movs	r4, #4
 80010d0:	e75c      	b.n	8000f8c <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010d2:	2500      	movs	r5, #0
 80010d4:	e7a7      	b.n	8001026 <HAL_GPIO_Init+0xea>
 80010d6:	2501      	movs	r5, #1
 80010d8:	e7a5      	b.n	8001026 <HAL_GPIO_Init+0xea>
 80010da:	2502      	movs	r5, #2
 80010dc:	e7a3      	b.n	8001026 <HAL_GPIO_Init+0xea>
 80010de:	bf00      	nop
 80010e0:	40010400 	.word	0x40010400
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010800 	.word	0x40010800
 80010ec:	10210000 	.word	0x10210000
 80010f0:	10310000 	.word	0x10310000
 80010f4:	10320000 	.word	0x10320000
 80010f8:	10110000 	.word	0x10110000
 80010fc:	10220000 	.word	0x10220000

08001100 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001100:	6883      	ldr	r3, [r0, #8]
 8001102:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001104:	bf14      	ite	ne
 8001106:	2001      	movne	r0, #1
 8001108:	2000      	moveq	r0, #0
 800110a:	4770      	bx	lr

0800110c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800110c:	b10a      	cbz	r2, 8001112 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800110e:	6101      	str	r1, [r0, #16]
 8001110:	4770      	bx	lr
 8001112:	0409      	lsls	r1, r1, #16
 8001114:	e7fb      	b.n	800110e <HAL_GPIO_WritePin+0x2>

08001116 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001116:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 800111a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800111c:	2a01      	cmp	r2, #1
{
 800111e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001120:	d00b      	beq.n	800113a <HAL_PCD_SetAddress+0x24>
 8001122:	2201      	movs	r2, #1
 8001124:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8001128:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800112c:	6800      	ldr	r0, [r0, #0]
 800112e:	f001 fce2 	bl	8002af6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001132:	2000      	movs	r0, #0
 8001134:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 8001138:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800113a:	2002      	movs	r0, #2
  return HAL_OK;
}
 800113c:	bd10      	pop	{r4, pc}

0800113e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800113e:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001140:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8001144:	4604      	mov	r4, r0
 8001146:	f001 0007 	and.w	r0, r1, #7
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800114a:	ea4f 1540 	mov.w	r5, r0, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 800114e:	d01f      	beq.n	8001190 <HAL_PCD_EP_Open+0x52>
    ep->is_in = 1U;
 8001150:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001152:	f105 0128 	add.w	r1, r5, #40	; 0x28
    ep->is_in = 1U;
 8001156:	4425      	add	r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001158:	4421      	add	r1, r4
    ep->is_in = 1U;
 800115a:	f885 6029 	strb.w	r6, [r5, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 800115e:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8001160:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001162:	b2c0      	uxtb	r0, r0
 8001164:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8001166:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001168:	b102      	cbz	r2, 800116c <HAL_PCD_EP_Open+0x2e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800116a:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800116c:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 800116e:	bf04      	itt	eq
 8001170:	2300      	moveq	r3, #0
 8001172:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8001174:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001178:	2b01      	cmp	r3, #1
 800117a:	d011      	beq.n	80011a0 <HAL_PCD_EP_Open+0x62>
 800117c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800117e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001180:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001184:	f001 fad4 	bl	8002730 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001188:	2000      	movs	r0, #0
 800118a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 800118e:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8001190:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001192:	f505 7194 	add.w	r1, r5, #296	; 0x128
    ep->is_in = 0U;
 8001196:	4425      	add	r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001198:	4421      	add	r1, r4
    ep->is_in = 0U;
 800119a:	f885 6129 	strb.w	r6, [r5, #297]	; 0x129
 800119e:	e7de      	b.n	800115e <HAL_PCD_EP_Open+0x20>
  __HAL_LOCK(hpcd);
 80011a0:	2002      	movs	r0, #2
}
 80011a2:	bd70      	pop	{r4, r5, r6, pc}

080011a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011a4:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80011a6:	2600      	movs	r6, #0
 80011a8:	f001 0107 	and.w	r1, r1, #7
 80011ac:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 80011ae:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 80011b0:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011b4:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011b8:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80011ba:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 80011be:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 80011c2:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 80011c6:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011ca:	6800      	ldr	r0, [r0, #0]
 80011cc:	f001 fcb0 	bl	8002b30 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80011d0:	4630      	mov	r0, r6
 80011d2:	bd70      	pop	{r4, r5, r6, pc}

080011d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011d4:	f001 0107 	and.w	r1, r1, #7
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011dc:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80011de:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80011e0:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80011e2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80011e4:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011e8:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011ec:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80011ee:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80011f0:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80011f2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011f6:	6800      	ldr	r0, [r0, #0]
 80011f8:	f001 fc9a 	bl	8002b30 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80011fc:	4630      	mov	r0, r6
 80011fe:	bd70      	pop	{r4, r5, r6, pc}

08001200 <HAL_PCD_IRQHandler>:
{
 8001200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001204:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001206:	6800      	ldr	r0, [r0, #0]
 8001208:	f001 fc7b 	bl	8002b02 <USB_ReadInterrupts>
 800120c:	0402      	lsls	r2, r0, #16
 800120e:	f100 8210 	bmi.w	8001632 <HAL_PCD_IRQHandler+0x432>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001212:	6820      	ldr	r0, [r4, #0]
 8001214:	f001 fc75 	bl	8002b02 <USB_ReadInterrupts>
 8001218:	0543      	lsls	r3, r0, #21
 800121a:	d50f      	bpl.n	800123c <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800121c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800121e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001220:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001228:	041b      	lsls	r3, r3, #16
 800122a:	0c1b      	lsrs	r3, r3, #16
 800122c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001230:	f003 fdc9 	bl	8004dc6 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001234:	2100      	movs	r1, #0
 8001236:	4620      	mov	r0, r4
 8001238:	f7ff ff6d 	bl	8001116 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800123c:	6820      	ldr	r0, [r4, #0]
 800123e:	f001 fc60 	bl	8002b02 <USB_ReadInterrupts>
 8001242:	0447      	lsls	r7, r0, #17
 8001244:	d508      	bpl.n	8001258 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001246:	6822      	ldr	r2, [r4, #0]
 8001248:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800124c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001250:	041b      	lsls	r3, r3, #16
 8001252:	0c1b      	lsrs	r3, r3, #16
 8001254:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001258:	6820      	ldr	r0, [r4, #0]
 800125a:	f001 fc52 	bl	8002b02 <USB_ReadInterrupts>
 800125e:	0486      	lsls	r6, r0, #18
 8001260:	d508      	bpl.n	8001274 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001262:	6822      	ldr	r2, [r4, #0]
 8001264:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800126c:	041b      	lsls	r3, r3, #16
 800126e:	0c1b      	lsrs	r3, r3, #16
 8001270:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001274:	6820      	ldr	r0, [r4, #0]
 8001276:	f001 fc44 	bl	8002b02 <USB_ReadInterrupts>
 800127a:	04c5      	lsls	r5, r0, #19
 800127c:	d51c      	bpl.n	80012b8 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800127e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8001280:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001282:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001286:	f023 0304 	bic.w	r3, r3, #4
 800128a:	041b      	lsls	r3, r3, #16
 800128c:	0c1b      	lsrs	r3, r3, #16
 800128e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001292:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001296:	f023 0308 	bic.w	r3, r3, #8
 800129a:	041b      	lsls	r3, r3, #16
 800129c:	0c1b      	lsrs	r3, r3, #16
 800129e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80012a2:	f003 fdb3 	bl	8004e0c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012a6:	6822      	ldr	r2, [r4, #0]
 80012a8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80012ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012b0:	041b      	lsls	r3, r3, #16
 80012b2:	0c1b      	lsrs	r3, r3, #16
 80012b4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80012b8:	6820      	ldr	r0, [r4, #0]
 80012ba:	f001 fc22 	bl	8002b02 <USB_ReadInterrupts>
 80012be:	0500      	lsls	r0, r0, #20
 80012c0:	d526      	bpl.n	8001310 <HAL_PCD_IRQHandler+0x110>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80012c2:	6820      	ldr	r0, [r4, #0]
 80012c4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	f043 0308 	orr.w	r3, r3, #8
 80012ce:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80012d2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80012d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012da:	041b      	lsls	r3, r3, #16
 80012dc:	0c1b      	lsrs	r3, r3, #16
 80012de:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80012e2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80012f0:	f001 fc07 	bl	8002b02 <USB_ReadInterrupts>
 80012f4:	04c1      	lsls	r1, r0, #19
 80012f6:	d508      	bpl.n	800130a <HAL_PCD_IRQHandler+0x10a>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012f8:	6822      	ldr	r2, [r4, #0]
 80012fa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80012fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001302:	041b      	lsls	r3, r3, #16
 8001304:	0c1b      	lsrs	r3, r3, #16
 8001306:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 800130a:	4620      	mov	r0, r4
 800130c:	f003 fd6e 	bl	8004dec <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001310:	6820      	ldr	r0, [r4, #0]
 8001312:	f001 fbf6 	bl	8002b02 <USB_ReadInterrupts>
 8001316:	0582      	lsls	r2, r0, #22
 8001318:	d50b      	bpl.n	8001332 <HAL_PCD_IRQHandler+0x132>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800131a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800131c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800131e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001322:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001326:	041b      	lsls	r3, r3, #16
 8001328:	0c1b      	lsrs	r3, r3, #16
 800132a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800132e:	f003 fd46 	bl	8004dbe <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001332:	6820      	ldr	r0, [r4, #0]
 8001334:	f001 fbe5 	bl	8002b02 <USB_ReadInterrupts>
 8001338:	05c3      	lsls	r3, r0, #23
 800133a:	d508      	bpl.n	800134e <HAL_PCD_IRQHandler+0x14e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800133c:	6822      	ldr	r2, [r4, #0]
 800133e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001346:	041b      	lsls	r3, r3, #16
 8001348:	0c1b      	lsrs	r3, r3, #16
 800134a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 800134e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 8001352:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8001356:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8001358:	f011 060f 	ands.w	r6, r1, #15
 800135c:	f040 80b7 	bne.w	80014ce <HAL_PCD_IRQHandler+0x2ce>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001360:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001362:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001366:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001368:	d12c      	bne.n	80013c4 <HAL_PCD_IRQHandler+0x1c4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800136a:	ea03 0309 	and.w	r3, r3, r9
 800136e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001372:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001374:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001378:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800137c:	b29b      	uxth	r3, r3
 800137e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001382:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001386:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 800138a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800138c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001390:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001392:	4413      	add	r3, r2
 8001394:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001396:	4620      	mov	r0, r4
 8001398:	f003 fd0a 	bl	8004db0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800139c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80013a0:	b153      	cbz	r3, 80013b8 <HAL_PCD_IRQHandler+0x1b8>
 80013a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013a4:	b942      	cbnz	r2, 80013b8 <HAL_PCD_IRQHandler+0x1b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80013a6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80013aa:	6821      	ldr	r1, [r4, #0]
 80013ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b0:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80013b4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013b8:	6820      	ldr	r0, [r4, #0]
 80013ba:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	d4c7      	bmi.n	8001352 <HAL_PCD_IRQHandler+0x152>
 80013c2:	e726      	b.n	8001212 <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80013c4:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 80013c8:	d021      	beq.n	800140e <HAL_PCD_IRQHandler+0x20e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013ca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80013ce:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80013d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80013dc:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80013e0:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80013e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013e8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80013ec:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80013f0:	f001 fc86 	bl	8002d00 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013f4:	6822      	ldr	r2, [r4, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80013f6:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013f8:	8813      	ldrh	r3, [r2, #0]
 80013fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013fe:	051b      	lsls	r3, r3, #20
 8001400:	0d1b      	lsrs	r3, r3, #20
 8001402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001406:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001408:	f003 fcc4 	bl	8004d94 <HAL_PCD_SetupStageCallback>
 800140c:	e7d4      	b.n	80013b8 <HAL_PCD_IRQHandler+0x1b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800140e:	041f      	lsls	r7, r3, #16
 8001410:	d5d2      	bpl.n	80013b8 <HAL_PCD_IRQHandler+0x1b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001412:	8803      	ldrh	r3, [r0, #0]
 8001414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001418:	051b      	lsls	r3, r3, #20
 800141a:	0d1b      	lsrs	r3, r3, #20
 800141c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001420:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001422:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001426:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 800142a:	b29b      	uxth	r3, r3
 800142c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001430:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001434:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800143c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001440:	b18b      	cbz	r3, 8001466 <HAL_PCD_IRQHandler+0x266>
 8001442:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8001446:	b171      	cbz	r1, 8001466 <HAL_PCD_IRQHandler+0x266>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001448:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 800144c:	f001 fc58 	bl	8002d00 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8001450:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8001454:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001458:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 800145a:	4413      	add	r3, r2
 800145c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001460:	4620      	mov	r0, r4
 8001462:	f003 fc9d 	bl	8004da0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001466:	6821      	ldr	r1, [r4, #0]
 8001468:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 800146c:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001470:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8001474:	b29b      	uxth	r3, r3
 8001476:	b9cd      	cbnz	r5, 80014ac <HAL_PCD_IRQHandler+0x2ac>
 8001478:	5ac2      	ldrh	r2, [r0, r3]
 800147a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800147e:	0412      	lsls	r2, r2, #16
 8001480:	0c12      	lsrs	r2, r2, #16
 8001482:	52c2      	strh	r2, [r0, r3]
 8001484:	5ac2      	ldrh	r2, [r0, r3]
 8001486:	b292      	uxth	r2, r2
 8001488:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800148c:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800148e:	880b      	ldrh	r3, [r1, #0]
 8001490:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001498:	041b      	lsls	r3, r3, #16
 800149a:	0c1b      	lsrs	r3, r3, #16
 800149c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80014a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a8:	800b      	strh	r3, [r1, #0]
 80014aa:	e785      	b.n	80013b8 <HAL_PCD_IRQHandler+0x1b8>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80014ac:	2d3e      	cmp	r5, #62	; 0x3e
 80014ae:	d806      	bhi.n	80014be <HAL_PCD_IRQHandler+0x2be>
 80014b0:	086a      	lsrs	r2, r5, #1
 80014b2:	07ee      	lsls	r6, r5, #31
 80014b4:	bf48      	it	mi
 80014b6:	3201      	addmi	r2, #1
 80014b8:	0292      	lsls	r2, r2, #10
 80014ba:	b292      	uxth	r2, r2
 80014bc:	e7e6      	b.n	800148c <HAL_PCD_IRQHandler+0x28c>
 80014be:	096a      	lsrs	r2, r5, #5
 80014c0:	06ed      	lsls	r5, r5, #27
 80014c2:	bf08      	it	eq
 80014c4:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80014c8:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 80014cc:	e7f5      	b.n	80014ba <HAL_PCD_IRQHandler+0x2ba>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80014ce:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 80014d2:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014d6:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 80014da:	d03d      	beq.n	8001558 <HAL_PCD_IRQHandler+0x358>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80014dc:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80014e0:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80014e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014e6:	051b      	lsls	r3, r3, #20
 80014e8:	0d1b      	lsrs	r3, r3, #20
 80014ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ee:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80014f2:	19e1      	adds	r1, r4, r7
 80014f4:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d158      	bne.n	80015ae <HAL_PCD_IRQHandler+0x3ae>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014fc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001500:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 8001504:	b29b      	uxth	r3, r3
 8001506:	3306      	adds	r3, #6
 8001508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800150c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001510:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8001514:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8001518:	b135      	cbz	r5, 8001528 <HAL_PCD_IRQHandler+0x328>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800151a:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 800151e:	462b      	mov	r3, r5
 8001520:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8001524:	f001 fbec 	bl	8002d00 <USB_ReadPMA>
 8001528:	19e1      	adds	r1, r4, r7
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800152a:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 800152e:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 8001532:	442b      	add	r3, r5
 8001534:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001538:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 800153c:	442a      	add	r2, r5
 800153e:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001542:	b11b      	cbz	r3, 800154c <HAL_PCD_IRQHandler+0x34c>
 8001544:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8001548:	4285      	cmp	r5, r0
 800154a:	d269      	bcs.n	8001620 <HAL_PCD_IRQHandler+0x420>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800154c:	4427      	add	r7, r4
 800154e:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8001552:	4620      	mov	r0, r4
 8001554:	f003 fc24 	bl	8004da0 <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001558:	f018 0f80 	tst.w	r8, #128	; 0x80
 800155c:	f43f af2c 	beq.w	80013b8 <HAL_PCD_IRQHandler+0x1b8>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001560:	6821      	ldr	r1, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001562:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001564:	f831 2026 	ldrh.w	r2, [r1, r6, lsl #2]
 8001568:	b292      	uxth	r2, r2
 800156a:	ea02 0209 	and.w	r2, r2, r9
 800156e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001572:	f821 2026 	strh.w	r2, [r1, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001576:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800157a:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 800157e:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8001582:	b29b      	uxth	r3, r3
 8001584:	3302      	adds	r3, #2
 8001586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800158a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800158e:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 8001592:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001594:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001598:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800159a:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 800159c:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 800159e:	63f2      	str	r2, [r6, #60]	; 0x3c
 80015a0:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
        if (ep->xfer_len == 0U)
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d141      	bne.n	800162c <HAL_PCD_IRQHandler+0x42c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015a8:	f003 fc02 	bl	8004db0 <HAL_PCD_DataInStageCallback>
 80015ac:	e704      	b.n	80013b8 <HAL_PCD_IRQHandler+0x1b8>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80015ae:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 80015b2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015bc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80015c0:	b292      	uxth	r2, r2
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80015c2:	d01f      	beq.n	8001604 <HAL_PCD_IRQHandler+0x404>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015c4:	3202      	adds	r2, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80015cc:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 80015d0:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80015d4:	b135      	cbz	r5, 80015e4 <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80015d6:	462b      	mov	r3, r5
 80015d8:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80015dc:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80015e0:	f001 fb8e 	bl	8002d00 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80015e4:	19e3      	adds	r3, r4, r7
 80015e6:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 80015ea:	6822      	ldr	r2, [r4, #0]
 80015ec:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	ea03 030b 	and.w	r3, r3, fp
 80015f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015fe:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001602:	e791      	b.n	8001528 <HAL_PCD_IRQHandler+0x328>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001604:	3206      	adds	r2, #6
 8001606:	4413      	add	r3, r2
 8001608:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800160c:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8001610:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001614:	2d00      	cmp	r5, #0
 8001616:	d0e5      	beq.n	80015e4 <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001618:	462b      	mov	r3, r5
 800161a:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 800161e:	e7dd      	b.n	80015dc <HAL_PCD_IRQHandler+0x3dc>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001620:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8001624:	4620      	mov	r0, r4
 8001626:	f7ff fdbd 	bl	80011a4 <HAL_PCD_EP_Receive>
 800162a:	e795      	b.n	8001558 <HAL_PCD_IRQHandler+0x358>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800162c:	f7ff fdd2 	bl	80011d4 <HAL_PCD_EP_Transmit>
 8001630:	e6c2      	b.n	80013b8 <HAL_PCD_IRQHandler+0x1b8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001632:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8001640 <HAL_PCD_IRQHandler+0x440>
 8001636:	f8df a00c 	ldr.w	sl, [pc, #12]	; 8001644 <HAL_PCD_IRQHandler+0x444>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800163a:	f8df b00c 	ldr.w	fp, [pc, #12]	; 8001648 <HAL_PCD_IRQHandler+0x448>
 800163e:	e6bb      	b.n	80013b8 <HAL_PCD_IRQHandler+0x1b8>
 8001640:	ffff8f0f 	.word	0xffff8f0f
 8001644:	ffff8000 	.word	0xffff8000
 8001648:	ffff8f8f 	.word	0xffff8f8f

0800164c <HAL_PCD_EP_SetStall>:
{
 800164c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800164e:	6843      	ldr	r3, [r0, #4]
 8001650:	f001 0507 	and.w	r5, r1, #7
 8001654:	429d      	cmp	r5, r3
{
 8001656:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001658:	d828      	bhi.n	80016ac <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 800165a:	060b      	lsls	r3, r1, #24
 800165c:	d51d      	bpl.n	800169a <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 800165e:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001660:	016b      	lsls	r3, r5, #5
 8001662:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8001666:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001668:	4401      	add	r1, r0
    ep->is_in = 1U;
 800166a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 800166e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001670:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001672:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8001674:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001678:	429a      	cmp	r2, r3
 800167a:	d019      	beq.n	80016b0 <HAL_PCD_EP_SetStall+0x64>
 800167c:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001680:	6820      	ldr	r0, [r4, #0]
 8001682:	f001 f9cd 	bl	8002a20 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001686:	b925      	cbnz	r5, 8001692 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001688:	f504 710c 	add.w	r1, r4, #560	; 0x230
 800168c:	6820      	ldr	r0, [r4, #0]
 800168e:	f001 fa3c 	bl	8002b0a <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001692:	2000      	movs	r0, #0
 8001694:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8001698:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 800169a:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800169c:	014b      	lsls	r3, r1, #5
 800169e:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 80016a2:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80016a4:	4401      	add	r1, r0
    ep->is_in = 0U;
 80016a6:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 80016aa:	e7e0      	b.n	800166e <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80016ac:	2001      	movs	r0, #1
 80016ae:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80016b0:	2002      	movs	r0, #2
}
 80016b2:	bd38      	pop	{r3, r4, r5, pc}

080016b4 <HAL_PCD_EP_ClrStall>:
{
 80016b4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016b6:	6843      	ldr	r3, [r0, #4]
 80016b8:	f001 020f 	and.w	r2, r1, #15
 80016bc:	429a      	cmp	r2, r3
{
 80016be:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016c0:	d826      	bhi.n	8001710 <HAL_PCD_EP_ClrStall+0x5c>
 80016c2:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 80016c6:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ca:	ea4f 1243 	mov.w	r2, r3, lsl #5
  if ((0x80U & ep_addr) == 0x80U)
 80016ce:	d017      	beq.n	8001700 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016d0:	f102 0128 	add.w	r1, r2, #40	; 0x28
 80016d4:	4401      	add	r1, r0
    ep->is_in = 1U;
 80016d6:	4402      	add	r2, r0
 80016d8:	2001      	movs	r0, #1
 80016da:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  ep->is_stall = 0U;
 80016de:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80016e0:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 80016e2:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80016e4:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d013      	beq.n	8001714 <HAL_PCD_EP_ClrStall+0x60>
 80016ec:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016ee:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80016f0:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016f4:	f001 f9b4 	bl	8002a60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80016f8:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 80016fc:	4628      	mov	r0, r5
 80016fe:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001700:	f502 7194 	add.w	r1, r2, #296	; 0x128
 8001704:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001706:	4402      	add	r2, r0
 8001708:	2000      	movs	r0, #0
 800170a:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 800170e:	e7e6      	b.n	80016de <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 8001710:	2001      	movs	r0, #1
 8001712:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001714:	2002      	movs	r0, #2
}
 8001716:	bd38      	pop	{r3, r4, r5, pc}

08001718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001718:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800171c:	4605      	mov	r5, r0
 800171e:	b908      	cbnz	r0, 8001724 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001720:	2001      	movs	r0, #1
 8001722:	e03c      	b.n	800179e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001724:	6803      	ldr	r3, [r0, #0]
 8001726:	07db      	lsls	r3, r3, #31
 8001728:	d410      	bmi.n	800174c <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172a:	682b      	ldr	r3, [r5, #0]
 800172c:	079f      	lsls	r7, r3, #30
 800172e:	d45d      	bmi.n	80017ec <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001730:	682b      	ldr	r3, [r5, #0]
 8001732:	0719      	lsls	r1, r3, #28
 8001734:	f100 8094 	bmi.w	8001860 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001738:	682b      	ldr	r3, [r5, #0]
 800173a:	075a      	lsls	r2, r3, #29
 800173c:	f100 80be 	bmi.w	80018bc <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001740:	69e8      	ldr	r0, [r5, #28]
 8001742:	2800      	cmp	r0, #0
 8001744:	f040 812c 	bne.w	80019a0 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001748:	2000      	movs	r0, #0
 800174a:	e028      	b.n	800179e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800174c:	4c8f      	ldr	r4, [pc, #572]	; (800198c <HAL_RCC_OscConfig+0x274>)
 800174e:	6863      	ldr	r3, [r4, #4]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b04      	cmp	r3, #4
 8001756:	d007      	beq.n	8001768 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001758:	6863      	ldr	r3, [r4, #4]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b08      	cmp	r3, #8
 8001760:	d109      	bne.n	8001776 <HAL_RCC_OscConfig+0x5e>
 8001762:	6863      	ldr	r3, [r4, #4]
 8001764:	03de      	lsls	r6, r3, #15
 8001766:	d506      	bpl.n	8001776 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	039c      	lsls	r4, r3, #14
 800176c:	d5dd      	bpl.n	800172a <HAL_RCC_OscConfig+0x12>
 800176e:	686b      	ldr	r3, [r5, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1da      	bne.n	800172a <HAL_RCC_OscConfig+0x12>
 8001774:	e7d4      	b.n	8001720 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001776:	686b      	ldr	r3, [r5, #4]
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177c:	d112      	bne.n	80017a4 <HAL_RCC_OscConfig+0x8c>
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001786:	f7fe ffbb 	bl	8000700 <HAL_GetTick>
 800178a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	0398      	lsls	r0, r3, #14
 8001790:	d4cb      	bmi.n	800172a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001792:	f7fe ffb5 	bl	8000700 <HAL_GetTick>
 8001796:	1b80      	subs	r0, r0, r6
 8001798:	2864      	cmp	r0, #100	; 0x64
 800179a:	d9f7      	bls.n	800178c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800179c:	2003      	movs	r0, #3
}
 800179e:	b002      	add	sp, #8
 80017a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a4:	b99b      	cbnz	r3, 80017ce <HAL_RCC_OscConfig+0xb6>
 80017a6:	6823      	ldr	r3, [r4, #0]
 80017a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ac:	6023      	str	r3, [r4, #0]
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017b6:	f7fe ffa3 	bl	8000700 <HAL_GetTick>
 80017ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	0399      	lsls	r1, r3, #14
 80017c0:	d5b3      	bpl.n	800172a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c2:	f7fe ff9d 	bl	8000700 <HAL_GetTick>
 80017c6:	1b80      	subs	r0, r0, r6
 80017c8:	2864      	cmp	r0, #100	; 0x64
 80017ca:	d9f7      	bls.n	80017bc <HAL_RCC_OscConfig+0xa4>
 80017cc:	e7e6      	b.n	800179c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	d103      	bne.n	80017de <HAL_RCC_OscConfig+0xc6>
 80017d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017da:	6023      	str	r3, [r4, #0]
 80017dc:	e7cf      	b.n	800177e <HAL_RCC_OscConfig+0x66>
 80017de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e2:	6023      	str	r3, [r4, #0]
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ea:	e7cb      	b.n	8001784 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ec:	4c67      	ldr	r4, [pc, #412]	; (800198c <HAL_RCC_OscConfig+0x274>)
 80017ee:	6863      	ldr	r3, [r4, #4]
 80017f0:	f013 0f0c 	tst.w	r3, #12
 80017f4:	d007      	beq.n	8001806 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017f6:	6863      	ldr	r3, [r4, #4]
 80017f8:	f003 030c 	and.w	r3, r3, #12
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d110      	bne.n	8001822 <HAL_RCC_OscConfig+0x10a>
 8001800:	6863      	ldr	r3, [r4, #4]
 8001802:	03da      	lsls	r2, r3, #15
 8001804:	d40d      	bmi.n	8001822 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001806:	6823      	ldr	r3, [r4, #0]
 8001808:	079b      	lsls	r3, r3, #30
 800180a:	d502      	bpl.n	8001812 <HAL_RCC_OscConfig+0xfa>
 800180c:	692b      	ldr	r3, [r5, #16]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d186      	bne.n	8001720 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	696a      	ldr	r2, [r5, #20]
 8001816:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800181a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800181e:	6023      	str	r3, [r4, #0]
 8001820:	e786      	b.n	8001730 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001822:	692a      	ldr	r2, [r5, #16]
 8001824:	4b5a      	ldr	r3, [pc, #360]	; (8001990 <HAL_RCC_OscConfig+0x278>)
 8001826:	b16a      	cbz	r2, 8001844 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001828:	2201      	movs	r2, #1
 800182a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800182c:	f7fe ff68 	bl	8000700 <HAL_GetTick>
 8001830:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	079f      	lsls	r7, r3, #30
 8001836:	d4ec      	bmi.n	8001812 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001838:	f7fe ff62 	bl	8000700 <HAL_GetTick>
 800183c:	1b80      	subs	r0, r0, r6
 800183e:	2802      	cmp	r0, #2
 8001840:	d9f7      	bls.n	8001832 <HAL_RCC_OscConfig+0x11a>
 8001842:	e7ab      	b.n	800179c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001844:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001846:	f7fe ff5b 	bl	8000700 <HAL_GetTick>
 800184a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	0798      	lsls	r0, r3, #30
 8001850:	f57f af6e 	bpl.w	8001730 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001854:	f7fe ff54 	bl	8000700 <HAL_GetTick>
 8001858:	1b80      	subs	r0, r0, r6
 800185a:	2802      	cmp	r0, #2
 800185c:	d9f6      	bls.n	800184c <HAL_RCC_OscConfig+0x134>
 800185e:	e79d      	b.n	800179c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001860:	69aa      	ldr	r2, [r5, #24]
 8001862:	4c4a      	ldr	r4, [pc, #296]	; (800198c <HAL_RCC_OscConfig+0x274>)
 8001864:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 8001866:	b1da      	cbz	r2, 80018a0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001868:	2201      	movs	r2, #1
 800186a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800186c:	f7fe ff48 	bl	8000700 <HAL_GetTick>
 8001870:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001874:	079b      	lsls	r3, r3, #30
 8001876:	d50d      	bpl.n	8001894 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001878:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800187c:	4b46      	ldr	r3, [pc, #280]	; (8001998 <HAL_RCC_OscConfig+0x280>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	fbb3 f3f2 	udiv	r3, r3, r2
 8001884:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001886:	bf00      	nop
  }
  while (Delay --);
 8001888:	9b01      	ldr	r3, [sp, #4]
 800188a:	1e5a      	subs	r2, r3, #1
 800188c:	9201      	str	r2, [sp, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f9      	bne.n	8001886 <HAL_RCC_OscConfig+0x16e>
 8001892:	e751      	b.n	8001738 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001894:	f7fe ff34 	bl	8000700 <HAL_GetTick>
 8001898:	1b80      	subs	r0, r0, r6
 800189a:	2802      	cmp	r0, #2
 800189c:	d9e9      	bls.n	8001872 <HAL_RCC_OscConfig+0x15a>
 800189e:	e77d      	b.n	800179c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80018a0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80018a2:	f7fe ff2d 	bl	8000700 <HAL_GetTick>
 80018a6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018aa:	079f      	lsls	r7, r3, #30
 80018ac:	f57f af44 	bpl.w	8001738 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b0:	f7fe ff26 	bl	8000700 <HAL_GetTick>
 80018b4:	1b80      	subs	r0, r0, r6
 80018b6:	2802      	cmp	r0, #2
 80018b8:	d9f6      	bls.n	80018a8 <HAL_RCC_OscConfig+0x190>
 80018ba:	e76f      	b.n	800179c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018bc:	4c33      	ldr	r4, [pc, #204]	; (800198c <HAL_RCC_OscConfig+0x274>)
 80018be:	69e3      	ldr	r3, [r4, #28]
 80018c0:	00d8      	lsls	r0, r3, #3
 80018c2:	d424      	bmi.n	800190e <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80018c4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	69e3      	ldr	r3, [r4, #28]
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	61e3      	str	r3, [r4, #28]
 80018ce:	69e3      	ldr	r3, [r4, #28]
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	4e30      	ldr	r6, [pc, #192]	; (800199c <HAL_RCC_OscConfig+0x284>)
 80018da:	6833      	ldr	r3, [r6, #0]
 80018dc:	05d9      	lsls	r1, r3, #23
 80018de:	d518      	bpl.n	8001912 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	68eb      	ldr	r3, [r5, #12]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d126      	bne.n	8001934 <HAL_RCC_OscConfig+0x21c>
 80018e6:	6a23      	ldr	r3, [r4, #32]
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80018ee:	f7fe ff07 	bl	8000700 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018f6:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f8:	6a23      	ldr	r3, [r4, #32]
 80018fa:	079b      	lsls	r3, r3, #30
 80018fc:	d53f      	bpl.n	800197e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80018fe:	2f00      	cmp	r7, #0
 8001900:	f43f af1e 	beq.w	8001740 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001904:	69e3      	ldr	r3, [r4, #28]
 8001906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800190a:	61e3      	str	r3, [r4, #28]
 800190c:	e718      	b.n	8001740 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800190e:	2700      	movs	r7, #0
 8001910:	e7e2      	b.n	80018d8 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001912:	6833      	ldr	r3, [r6, #0]
 8001914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001918:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800191a:	f7fe fef1 	bl	8000700 <HAL_GetTick>
 800191e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	6833      	ldr	r3, [r6, #0]
 8001922:	05da      	lsls	r2, r3, #23
 8001924:	d4dc      	bmi.n	80018e0 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001926:	f7fe feeb 	bl	8000700 <HAL_GetTick>
 800192a:	eba0 0008 	sub.w	r0, r0, r8
 800192e:	2864      	cmp	r0, #100	; 0x64
 8001930:	d9f6      	bls.n	8001920 <HAL_RCC_OscConfig+0x208>
 8001932:	e733      	b.n	800179c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001934:	b9ab      	cbnz	r3, 8001962 <HAL_RCC_OscConfig+0x24a>
 8001936:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001938:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	6223      	str	r3, [r4, #32]
 8001942:	6a23      	ldr	r3, [r4, #32]
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800194a:	f7fe fed9 	bl	8000700 <HAL_GetTick>
 800194e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001950:	6a23      	ldr	r3, [r4, #32]
 8001952:	0798      	lsls	r0, r3, #30
 8001954:	d5d3      	bpl.n	80018fe <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001956:	f7fe fed3 	bl	8000700 <HAL_GetTick>
 800195a:	1b80      	subs	r0, r0, r6
 800195c:	4540      	cmp	r0, r8
 800195e:	d9f7      	bls.n	8001950 <HAL_RCC_OscConfig+0x238>
 8001960:	e71c      	b.n	800179c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001962:	2b05      	cmp	r3, #5
 8001964:	6a23      	ldr	r3, [r4, #32]
 8001966:	d103      	bne.n	8001970 <HAL_RCC_OscConfig+0x258>
 8001968:	f043 0304 	orr.w	r3, r3, #4
 800196c:	6223      	str	r3, [r4, #32]
 800196e:	e7ba      	b.n	80018e6 <HAL_RCC_OscConfig+0x1ce>
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	6223      	str	r3, [r4, #32]
 8001976:	6a23      	ldr	r3, [r4, #32]
 8001978:	f023 0304 	bic.w	r3, r3, #4
 800197c:	e7b6      	b.n	80018ec <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197e:	f7fe febf 	bl	8000700 <HAL_GetTick>
 8001982:	eba0 0008 	sub.w	r0, r0, r8
 8001986:	42b0      	cmp	r0, r6
 8001988:	d9b6      	bls.n	80018f8 <HAL_RCC_OscConfig+0x1e0>
 800198a:	e707      	b.n	800179c <HAL_RCC_OscConfig+0x84>
 800198c:	40021000 	.word	0x40021000
 8001990:	42420000 	.word	0x42420000
 8001994:	42420480 	.word	0x42420480
 8001998:	20000074 	.word	0x20000074
 800199c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a0:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <HAL_RCC_OscConfig+0x334>)
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	461c      	mov	r4, r3
 80019a6:	f002 020c 	and.w	r2, r2, #12
 80019aa:	2a08      	cmp	r2, #8
 80019ac:	d03d      	beq.n	8001a2a <HAL_RCC_OscConfig+0x312>
 80019ae:	2300      	movs	r3, #0
 80019b0:	4e27      	ldr	r6, [pc, #156]	; (8001a50 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80019b4:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b6:	d12b      	bne.n	8001a10 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80019b8:	f7fe fea2 	bl	8000700 <HAL_GetTick>
 80019bc:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	0199      	lsls	r1, r3, #6
 80019c2:	d41f      	bmi.n	8001a04 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019c4:	6a2b      	ldr	r3, [r5, #32]
 80019c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ca:	d105      	bne.n	80019d8 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019cc:	6862      	ldr	r2, [r4, #4]
 80019ce:	68a9      	ldr	r1, [r5, #8]
 80019d0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80019d4:	430a      	orrs	r2, r1
 80019d6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80019da:	6862      	ldr	r2, [r4, #4]
 80019dc:	430b      	orrs	r3, r1
 80019de:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80019e2:	4313      	orrs	r3, r2
 80019e4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80019e6:	2301      	movs	r3, #1
 80019e8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80019ea:	f7fe fe89 	bl	8000700 <HAL_GetTick>
 80019ee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	019a      	lsls	r2, r3, #6
 80019f4:	f53f aea8 	bmi.w	8001748 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f8:	f7fe fe82 	bl	8000700 <HAL_GetTick>
 80019fc:	1b40      	subs	r0, r0, r5
 80019fe:	2802      	cmp	r0, #2
 8001a00:	d9f6      	bls.n	80019f0 <HAL_RCC_OscConfig+0x2d8>
 8001a02:	e6cb      	b.n	800179c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a04:	f7fe fe7c 	bl	8000700 <HAL_GetTick>
 8001a08:	1bc0      	subs	r0, r0, r7
 8001a0a:	2802      	cmp	r0, #2
 8001a0c:	d9d7      	bls.n	80019be <HAL_RCC_OscConfig+0x2a6>
 8001a0e:	e6c5      	b.n	800179c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001a10:	f7fe fe76 	bl	8000700 <HAL_GetTick>
 8001a14:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	019b      	lsls	r3, r3, #6
 8001a1a:	f57f ae95 	bpl.w	8001748 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1e:	f7fe fe6f 	bl	8000700 <HAL_GetTick>
 8001a22:	1b40      	subs	r0, r0, r5
 8001a24:	2802      	cmp	r0, #2
 8001a26:	d9f6      	bls.n	8001a16 <HAL_RCC_OscConfig+0x2fe>
 8001a28:	e6b8      	b.n	800179c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a2a:	2801      	cmp	r0, #1
 8001a2c:	f43f aeb7 	beq.w	800179e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001a30:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	6a2b      	ldr	r3, [r5, #32]
 8001a34:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	f47f ae71 	bne.w	8001720 <HAL_RCC_OscConfig+0x8>
 8001a3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a40:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001a44:	1ac0      	subs	r0, r0, r3
 8001a46:	bf18      	it	ne
 8001a48:	2001      	movne	r0, #1
 8001a4a:	e6a8      	b.n	800179e <HAL_RCC_OscConfig+0x86>
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	42420060 	.word	0x42420060

08001a54 <HAL_RCC_GetSysClockFreq>:
{
 8001a54:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001a58:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a5a:	ac02      	add	r4, sp, #8
 8001a5c:	f103 0510 	add.w	r5, r3, #16
 8001a60:	4622      	mov	r2, r4
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	6859      	ldr	r1, [r3, #4]
 8001a66:	3308      	adds	r3, #8
 8001a68:	c203      	stmia	r2!, {r0, r1}
 8001a6a:	42ab      	cmp	r3, r5
 8001a6c:	4614      	mov	r4, r2
 8001a6e:	d1f7      	bne.n	8001a60 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a70:	2301      	movs	r3, #1
 8001a72:	f88d 3004 	strb.w	r3, [sp, #4]
 8001a76:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001a78:	4911      	ldr	r1, [pc, #68]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a7a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001a7e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001a80:	f003 020c 	and.w	r2, r3, #12
 8001a84:	2a08      	cmp	r2, #8
 8001a86:	d117      	bne.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a88:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001a8c:	a806      	add	r0, sp, #24
 8001a8e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a90:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a92:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a96:	d50c      	bpl.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a98:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a9a:	480a      	ldr	r0, [pc, #40]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a9c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aa0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aa2:	aa06      	add	r2, sp, #24
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aaa:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001aae:	b007      	add	sp, #28
 8001ab0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x74>)
 8001ab4:	4350      	muls	r0, r2
 8001ab6:	e7fa      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001aba:	e7f8      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x5a>
 8001abc:	08005b8c 	.word	0x08005b8c
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	007a1200 	.word	0x007a1200
 8001ac8:	003d0900 	.word	0x003d0900

08001acc <HAL_RCC_ClockConfig>:
{
 8001acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	b910      	cbnz	r0, 8001adc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4a45      	ldr	r2, [pc, #276]	; (8001bf4 <HAL_RCC_ClockConfig+0x128>)
 8001ade:	6813      	ldr	r3, [r2, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	428b      	cmp	r3, r1
 8001ae6:	d329      	bcc.n	8001b3c <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	6821      	ldr	r1, [r4, #0]
 8001aea:	078e      	lsls	r6, r1, #30
 8001aec:	d431      	bmi.n	8001b52 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aee:	07ca      	lsls	r2, r1, #31
 8001af0:	d444      	bmi.n	8001b7c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af2:	4a40      	ldr	r2, [pc, #256]	; (8001bf4 <HAL_RCC_ClockConfig+0x128>)
 8001af4:	6813      	ldr	r3, [r2, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	429d      	cmp	r5, r3
 8001afc:	d367      	bcc.n	8001bce <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afe:	6822      	ldr	r2, [r4, #0]
 8001b00:	4d3d      	ldr	r5, [pc, #244]	; (8001bf8 <HAL_RCC_ClockConfig+0x12c>)
 8001b02:	f012 0f04 	tst.w	r2, #4
 8001b06:	d16e      	bne.n	8001be6 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b08:	0713      	lsls	r3, r2, #28
 8001b0a:	d506      	bpl.n	8001b1a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b0c:	686b      	ldr	r3, [r5, #4]
 8001b0e:	6922      	ldr	r2, [r4, #16]
 8001b10:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b18:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b1a:	f7ff ff9b 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8001b1e:	686b      	ldr	r3, [r5, #4]
 8001b20:	4a36      	ldr	r2, [pc, #216]	; (8001bfc <HAL_RCC_ClockConfig+0x130>)
 8001b22:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b26:	5cd3      	ldrb	r3, [r2, r3]
 8001b28:	40d8      	lsrs	r0, r3
 8001b2a:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <HAL_RCC_ClockConfig+0x134>)
 8001b2c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001b2e:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <HAL_RCC_ClockConfig+0x138>)
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	f7fe fda3 	bl	800067c <HAL_InitTick>
  return HAL_OK;
 8001b36:	2000      	movs	r0, #0
 8001b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3c:	6813      	ldr	r3, [r2, #0]
 8001b3e:	f023 0307 	bic.w	r3, r3, #7
 8001b42:	430b      	orrs	r3, r1
 8001b44:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	6813      	ldr	r3, [r2, #0]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	4299      	cmp	r1, r3
 8001b4e:	d1c2      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xa>
 8001b50:	e7ca      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1c>
 8001b52:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b58:	bf1e      	ittt	ne
 8001b5a:	685a      	ldrne	r2, [r3, #4]
 8001b5c:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001b60:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b62:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b64:	bf42      	ittt	mi
 8001b66:	685a      	ldrmi	r2, [r3, #4]
 8001b68:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001b6c:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	68a0      	ldr	r0, [r4, #8]
 8001b72:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001b76:	4302      	orrs	r2, r0
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	e7b8      	b.n	8001aee <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7c:	6862      	ldr	r2, [r4, #4]
 8001b7e:	4e1e      	ldr	r6, [pc, #120]	; (8001bf8 <HAL_RCC_ClockConfig+0x12c>)
 8001b80:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b84:	d11b      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8a:	d0a4      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8c:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b92:	f023 0303 	bic.w	r3, r3, #3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001b9a:	f7fe fdb1 	bl	8000700 <HAL_GetTick>
 8001b9e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba0:	6873      	ldr	r3, [r6, #4]
 8001ba2:	6862      	ldr	r2, [r4, #4]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001bac:	d0a1      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bae:	f7fe fda7 	bl	8000700 <HAL_GetTick>
 8001bb2:	1bc0      	subs	r0, r0, r7
 8001bb4:	4540      	cmp	r0, r8
 8001bb6:	d9f3      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001bb8:	2003      	movs	r0, #3
}
 8001bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bbe:	2a02      	cmp	r2, #2
 8001bc0:	d102      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bc6:	e7e0      	b.n	8001b8a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	f013 0f02 	tst.w	r3, #2
 8001bcc:	e7dd      	b.n	8001b8a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	6813      	ldr	r3, [r2, #0]
 8001bd0:	f023 0307 	bic.w	r3, r3, #7
 8001bd4:	432b      	orrs	r3, r5
 8001bd6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd8:	6813      	ldr	r3, [r2, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	429d      	cmp	r5, r3
 8001be0:	f47f af79 	bne.w	8001ad6 <HAL_RCC_ClockConfig+0xa>
 8001be4:	e78b      	b.n	8001afe <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be6:	686b      	ldr	r3, [r5, #4]
 8001be8:	68e1      	ldr	r1, [r4, #12]
 8001bea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	606b      	str	r3, [r5, #4]
 8001bf2:	e789      	b.n	8001b08 <HAL_RCC_ClockConfig+0x3c>
 8001bf4:	40022000 	.word	0x40022000
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	080062fe 	.word	0x080062fe
 8001c00:	20000074 	.word	0x20000074
 8001c04:	20000004 	.word	0x20000004

08001c08 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001c12:	5cd3      	ldrb	r3, [r2, r3]
 8001c14:	4a03      	ldr	r2, [pc, #12]	; (8001c24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c16:	6810      	ldr	r0, [r2, #0]
}
 8001c18:	40d8      	lsrs	r0, r3
 8001c1a:	4770      	bx	lr
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	0800630e 	.word	0x0800630e
 8001c24:	20000074 	.word	0x20000074

08001c28 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001c32:	5cd3      	ldrb	r3, [r2, r3]
 8001c34:	4a03      	ldr	r2, [pc, #12]	; (8001c44 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c36:	6810      	ldr	r0, [r2, #0]
}
 8001c38:	40d8      	lsrs	r0, r3
 8001c3a:	4770      	bx	lr
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	0800630e 	.word	0x0800630e
 8001c44:	20000074 	.word	0x20000074

08001c48 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c48:	6803      	ldr	r3, [r0, #0]
{
 8001c4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c4e:	07d9      	lsls	r1, r3, #31
{
 8001c50:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c52:	d520      	bpl.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c54:	4c35      	ldr	r4, [pc, #212]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001c56:	69e3      	ldr	r3, [r4, #28]
 8001c58:	00da      	lsls	r2, r3, #3
 8001c5a:	d432      	bmi.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001c5c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	69e3      	ldr	r3, [r4, #28]
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	61e3      	str	r3, [r4, #28]
 8001c66:	69e3      	ldr	r3, [r4, #28]
 8001c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	4e2f      	ldr	r6, [pc, #188]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001c72:	6833      	ldr	r3, [r6, #0]
 8001c74:	05db      	lsls	r3, r3, #23
 8001c76:	d526      	bpl.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c78:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c7a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001c7e:	d136      	bne.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c80:	6a23      	ldr	r3, [r4, #32]
 8001c82:	686a      	ldr	r2, [r5, #4]
 8001c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c8c:	b11f      	cbz	r7, 8001c96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c8e:	69e3      	ldr	r3, [r4, #28]
 8001c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c94:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c96:	6828      	ldr	r0, [r5, #0]
 8001c98:	0783      	lsls	r3, r0, #30
 8001c9a:	d506      	bpl.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c9c:	4a23      	ldr	r2, [pc, #140]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001c9e:	68a9      	ldr	r1, [r5, #8]
 8001ca0:	6853      	ldr	r3, [r2, #4]
 8001ca2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ca6:	430b      	orrs	r3, r1
 8001ca8:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001caa:	f010 0010 	ands.w	r0, r0, #16
 8001cae:	d01b      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cb0:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001cb2:	68e9      	ldr	r1, [r5, #12]
 8001cb4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001cb6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cb8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	6053      	str	r3, [r2, #4]
 8001cc0:	e012      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001cc2:	2700      	movs	r7, #0
 8001cc4:	e7d4      	b.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc6:	6833      	ldr	r3, [r6, #0]
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ccc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001cce:	f7fe fd17 	bl	8000700 <HAL_GetTick>
 8001cd2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	6833      	ldr	r3, [r6, #0]
 8001cd6:	05d8      	lsls	r0, r3, #23
 8001cd8:	d4ce      	bmi.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cda:	f7fe fd11 	bl	8000700 <HAL_GetTick>
 8001cde:	eba0 0008 	sub.w	r0, r0, r8
 8001ce2:	2864      	cmp	r0, #100	; 0x64
 8001ce4:	d9f6      	bls.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001ce6:	2003      	movs	r0, #3
}
 8001ce8:	b002      	add	sp, #8
 8001cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cee:	686a      	ldr	r2, [r5, #4]
 8001cf0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d0c3      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	4a0e      	ldr	r2, [pc, #56]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cfc:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cfe:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d00:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d06:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001d08:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d0a:	07d9      	lsls	r1, r3, #31
 8001d0c:	d5b8      	bpl.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001d0e:	f7fe fcf7 	bl	8000700 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001d16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	6a23      	ldr	r3, [r4, #32]
 8001d1a:	079a      	lsls	r2, r3, #30
 8001d1c:	d4b0      	bmi.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7fe fcef 	bl	8000700 <HAL_GetTick>
 8001d22:	1b80      	subs	r0, r0, r6
 8001d24:	4540      	cmp	r0, r8
 8001d26:	d9f7      	bls.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001d28:	e7dd      	b.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40007000 	.word	0x40007000
 8001d34:	42420440 	.word	0x42420440

08001d38 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d38:	6a03      	ldr	r3, [r0, #32]
{
 8001d3a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d42:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d44:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d46:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d48:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d4a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001d4e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d50:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001d52:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001d56:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001d58:	4d0a      	ldr	r5, [pc, #40]	; (8001d84 <TIM_OC1_SetConfig+0x4c>)
 8001d5a:	42a8      	cmp	r0, r5
 8001d5c:	d10b      	bne.n	8001d76 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d5e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d60:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001d64:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d66:	698e      	ldr	r6, [r1, #24]
 8001d68:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d6a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d6e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d70:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d74:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d76:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d78:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d7a:	684a      	ldr	r2, [r1, #4]
 8001d7c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d7e:	6203      	str	r3, [r0, #32]
 8001d80:	bd70      	pop	{r4, r5, r6, pc}
 8001d82:	bf00      	nop
 8001d84:	40012c00 	.word	0x40012c00

08001d88 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d88:	6a03      	ldr	r3, [r0, #32]
{
 8001d8a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d90:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d92:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d94:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d96:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d98:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001d9a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001d9e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001da0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001da2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001da6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001daa:	4d0b      	ldr	r5, [pc, #44]	; (8001dd8 <TIM_OC3_SetConfig+0x50>)
 8001dac:	42a8      	cmp	r0, r5
 8001dae:	d10d      	bne.n	8001dcc <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001db0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001db6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001dba:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001dbc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001dbe:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001dc2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001dc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001dc8:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dcc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001dce:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001dd0:	684a      	ldr	r2, [r1, #4]
 8001dd2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dd4:	6203      	str	r3, [r0, #32]
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}
 8001dd8:	40012c00 	.word	0x40012c00

08001ddc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ddc:	6a03      	ldr	r3, [r0, #32]
{
 8001dde:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001de0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001de4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001de6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001de8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001dea:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001dee:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001df2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001df6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001df8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001dfc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e00:	4d06      	ldr	r5, [pc, #24]	; (8001e1c <TIM_OC4_SetConfig+0x40>)
 8001e02:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e04:	bf02      	ittt	eq
 8001e06:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e08:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e0c:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e10:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e12:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e14:	684a      	ldr	r2, [r1, #4]
 8001e16:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e18:	6203      	str	r3, [r0, #32]
 8001e1a:	bd30      	pop	{r4, r5, pc}
 8001e1c:	40012c00 	.word	0x40012c00

08001e20 <HAL_TIM_Base_MspInit>:
 8001e20:	4770      	bx	lr

08001e22 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001e22:	2302      	movs	r3, #2
 8001e24:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e28:	6803      	ldr	r3, [r0, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e30:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001e32:	bf1e      	ittt	ne
 8001e34:	681a      	ldrne	r2, [r3, #0]
 8001e36:	f042 0201 	orrne.w	r2, r2, #1
 8001e3a:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8001e42:	2000      	movs	r0, #0
 8001e44:	4770      	bx	lr

08001e46 <HAL_TIM_PWM_MspInit>:
 8001e46:	4770      	bx	lr

08001e48 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e48:	4a1a      	ldr	r2, [pc, #104]	; (8001eb4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001e4a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e4c:	4290      	cmp	r0, r2
 8001e4e:	d00a      	beq.n	8001e66 <TIM_Base_SetConfig+0x1e>
 8001e50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e54:	d007      	beq.n	8001e66 <TIM_Base_SetConfig+0x1e>
 8001e56:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e5a:	4290      	cmp	r0, r2
 8001e5c:	d003      	beq.n	8001e66 <TIM_Base_SetConfig+0x1e>
 8001e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e62:	4290      	cmp	r0, r2
 8001e64:	d115      	bne.n	8001e92 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001e66:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e6c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e6e:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <TIM_Base_SetConfig+0x6c>)
 8001e70:	4290      	cmp	r0, r2
 8001e72:	d00a      	beq.n	8001e8a <TIM_Base_SetConfig+0x42>
 8001e74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e78:	d007      	beq.n	8001e8a <TIM_Base_SetConfig+0x42>
 8001e7a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e7e:	4290      	cmp	r0, r2
 8001e80:	d003      	beq.n	8001e8a <TIM_Base_SetConfig+0x42>
 8001e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e86:	4290      	cmp	r0, r2
 8001e88:	d103      	bne.n	8001e92 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e90:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e92:	694a      	ldr	r2, [r1, #20]
 8001e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e98:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001e9a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e9c:	688b      	ldr	r3, [r1, #8]
 8001e9e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001ea0:	680b      	ldr	r3, [r1, #0]
 8001ea2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <TIM_Base_SetConfig+0x6c>)
 8001ea6:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea8:	bf04      	itt	eq
 8001eaa:	690b      	ldreq	r3, [r1, #16]
 8001eac:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	6143      	str	r3, [r0, #20]
 8001eb2:	4770      	bx	lr
 8001eb4:	40012c00 	.word	0x40012c00

08001eb8 <HAL_TIM_Base_Init>:
{
 8001eb8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001eba:	4604      	mov	r4, r0
 8001ebc:	b1a0      	cbz	r0, 8001ee8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001ebe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ec2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ec6:	b91b      	cbnz	r3, 8001ed0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001ec8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001ecc:	f7ff ffa8 	bl	8001e20 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed8:	1d21      	adds	r1, r4, #4
 8001eda:	f7ff ffb5 	bl	8001e48 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001ede:	2301      	movs	r3, #1
  return HAL_OK;
 8001ee0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001ee2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001ee6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ee8:	2001      	movs	r0, #1
}
 8001eea:	bd10      	pop	{r4, pc}

08001eec <HAL_TIM_PWM_Init>:
{
 8001eec:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001eee:	4604      	mov	r4, r0
 8001ef0:	b1a0      	cbz	r0, 8001f1c <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ef6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001efa:	b91b      	cbnz	r3, 8001f04 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001efc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001f00:	f7ff ffa1 	bl	8001e46 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f04:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f06:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001f08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f0c:	1d21      	adds	r1, r4, #4
 8001f0e:	f7ff ff9b 	bl	8001e48 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001f12:	2301      	movs	r3, #1
  return HAL_OK;
 8001f14:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001f16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001f1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f1c:	2001      	movs	r0, #1
}
 8001f1e:	bd10      	pop	{r4, pc}

08001f20 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f20:	6a03      	ldr	r3, [r0, #32]
{
 8001f22:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f24:	f023 0310 	bic.w	r3, r3, #16
 8001f28:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001f2a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001f2c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001f2e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f30:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f32:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f36:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f3a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001f3c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f40:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f44:	4d0b      	ldr	r5, [pc, #44]	; (8001f74 <TIM_OC2_SetConfig+0x54>)
 8001f46:	42a8      	cmp	r0, r5
 8001f48:	d10d      	bne.n	8001f66 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f4a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f50:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f54:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f56:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f58:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f5c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f62:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001f66:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001f68:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001f6a:	684a      	ldr	r2, [r1, #4]
 8001f6c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001f6e:	6203      	str	r3, [r0, #32]
 8001f70:	bd70      	pop	{r4, r5, r6, pc}
 8001f72:	bf00      	nop
 8001f74:	40012c00 	.word	0x40012c00

08001f78 <HAL_TIM_PWM_ConfigChannel>:
{
 8001f78:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001f7a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001f7e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	f04f 0002 	mov.w	r0, #2
 8001f86:	d025      	beq.n	8001fd4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001f88:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001f8e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001f92:	2a0c      	cmp	r2, #12
 8001f94:	d818      	bhi.n	8001fc8 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001f96:	e8df f002 	tbb	[pc, r2]
 8001f9a:	1707      	.short	0x1707
 8001f9c:	171e1717 	.word	0x171e1717
 8001fa0:	172f1717 	.word	0x172f1717
 8001fa4:	1717      	.short	0x1717
 8001fa6:	40          	.byte	0x40
 8001fa7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fa8:	6820      	ldr	r0, [r4, #0]
 8001faa:	f7ff fec5 	bl	8001d38 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fae:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fb0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fb2:	699a      	ldr	r2, [r3, #24]
 8001fb4:	f042 0208 	orr.w	r2, r2, #8
 8001fb8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fba:	699a      	ldr	r2, [r3, #24]
 8001fbc:	f022 0204 	bic.w	r2, r2, #4
 8001fc0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fc2:	699a      	ldr	r2, [r3, #24]
 8001fc4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fc6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001fc8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001fca:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001fcc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001fd0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001fd4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fd6:	6820      	ldr	r0, [r4, #0]
 8001fd8:	f7ff ffa2 	bl	8001f20 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fdc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fde:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fe8:	699a      	ldr	r2, [r3, #24]
 8001fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ff6:	e7e6      	b.n	8001fc6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ff8:	6820      	ldr	r0, [r4, #0]
 8001ffa:	f7ff fec5 	bl	8001d88 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ffe:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002000:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002002:	69da      	ldr	r2, [r3, #28]
 8002004:	f042 0208 	orr.w	r2, r2, #8
 8002008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800200a:	69da      	ldr	r2, [r3, #28]
 800200c:	f022 0204 	bic.w	r2, r2, #4
 8002010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002012:	69da      	ldr	r2, [r3, #28]
 8002014:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002016:	61da      	str	r2, [r3, #28]
      break;
 8002018:	e7d6      	b.n	8001fc8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800201a:	6820      	ldr	r0, [r4, #0]
 800201c:	f7ff fede 	bl	8001ddc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002020:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002022:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800202a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800202c:	69da      	ldr	r2, [r3, #28]
 800202e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002032:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800203a:	e7ec      	b.n	8002016 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800203c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800203c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800203e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002040:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002042:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002046:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800204a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800204c:	6083      	str	r3, [r0, #8]
 800204e:	bd10      	pop	{r4, pc}

08002050 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002050:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002054:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002056:	2b01      	cmp	r3, #1
{
 8002058:	4604      	mov	r4, r0
 800205a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800205e:	d019      	beq.n	8002094 <HAL_TIM_ConfigClockSource+0x44>
 8002060:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002062:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002066:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002068:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800206c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800206e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002072:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002076:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002078:	680b      	ldr	r3, [r1, #0]
 800207a:	2b40      	cmp	r3, #64	; 0x40
 800207c:	d065      	beq.n	800214a <HAL_TIM_ConfigClockSource+0xfa>
 800207e:	d815      	bhi.n	80020ac <HAL_TIM_ConfigClockSource+0x5c>
 8002080:	2b10      	cmp	r3, #16
 8002082:	d00c      	beq.n	800209e <HAL_TIM_ConfigClockSource+0x4e>
 8002084:	d807      	bhi.n	8002096 <HAL_TIM_ConfigClockSource+0x46>
 8002086:	b153      	cbz	r3, 800209e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002088:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800208a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800208c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002090:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002094:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002096:	2b20      	cmp	r3, #32
 8002098:	d001      	beq.n	800209e <HAL_TIM_ConfigClockSource+0x4e>
 800209a:	2b30      	cmp	r3, #48	; 0x30
 800209c:	d1f4      	bne.n	8002088 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800209e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020a0:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80020a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020a8:	4313      	orrs	r3, r2
 80020aa:	e01a      	b.n	80020e2 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80020ac:	2b60      	cmp	r3, #96	; 0x60
 80020ae:	d034      	beq.n	800211a <HAL_TIM_ConfigClockSource+0xca>
 80020b0:	d819      	bhi.n	80020e6 <HAL_TIM_ConfigClockSource+0x96>
 80020b2:	2b50      	cmp	r3, #80	; 0x50
 80020b4:	d1e8      	bne.n	8002088 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020b6:	684a      	ldr	r2, [r1, #4]
 80020b8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80020ba:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020bc:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020be:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020c2:	f025 0501 	bic.w	r5, r5, #1
 80020c6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020c8:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80020ca:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020d0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80020d4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80020d6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80020d8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80020da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020de:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80020e2:	6083      	str	r3, [r0, #8]
 80020e4:	e7d0      	b.n	8002088 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80020e6:	2b70      	cmp	r3, #112	; 0x70
 80020e8:	d00c      	beq.n	8002104 <HAL_TIM_ConfigClockSource+0xb4>
 80020ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ee:	d1cb      	bne.n	8002088 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80020f0:	68cb      	ldr	r3, [r1, #12]
 80020f2:	684a      	ldr	r2, [r1, #4]
 80020f4:	6889      	ldr	r1, [r1, #8]
 80020f6:	f7ff ffa1 	bl	800203c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020fa:	6822      	ldr	r2, [r4, #0]
 80020fc:	6893      	ldr	r3, [r2, #8]
 80020fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002102:	e008      	b.n	8002116 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002104:	68cb      	ldr	r3, [r1, #12]
 8002106:	684a      	ldr	r2, [r1, #4]
 8002108:	6889      	ldr	r1, [r1, #8]
 800210a:	f7ff ff97 	bl	800203c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800210e:	6822      	ldr	r2, [r4, #0]
 8002110:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002112:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002116:	6093      	str	r3, [r2, #8]
      break;
 8002118:	e7b6      	b.n	8002088 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800211a:	684d      	ldr	r5, [r1, #4]
 800211c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800211e:	6a01      	ldr	r1, [r0, #32]
 8002120:	f021 0110 	bic.w	r1, r1, #16
 8002124:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002126:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002128:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800212a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800212e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002132:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002136:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800213a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800213c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800213e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002144:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002148:	e7cb      	b.n	80020e2 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800214a:	684a      	ldr	r2, [r1, #4]
 800214c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800214e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002150:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002152:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002156:	f025 0501 	bic.w	r5, r5, #1
 800215a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800215c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800215e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002160:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002164:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002168:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800216a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800216c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800216e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002172:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002176:	e7b4      	b.n	80020e2 <HAL_TIM_ConfigClockSource+0x92>

08002178 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002178:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800217a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800217c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800217e:	f001 011f 	and.w	r1, r1, #31
 8002182:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002184:	ea23 0304 	bic.w	r3, r3, r4
 8002188:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800218a:	6a03      	ldr	r3, [r0, #32]
 800218c:	408a      	lsls	r2, r1
 800218e:	431a      	orrs	r2, r3
 8002190:	6202      	str	r2, [r0, #32]
 8002192:	bd10      	pop	{r4, pc}

08002194 <HAL_TIM_PWM_Start>:
{
 8002194:	b510      	push	{r4, lr}
 8002196:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002198:	2201      	movs	r2, #1
 800219a:	6800      	ldr	r0, [r0, #0]
 800219c:	f7ff ffec 	bl	8002178 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <HAL_TIM_PWM_Start+0x34>)
}
 80021a4:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021a6:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80021a8:	bf02      	ittt	eq
 80021aa:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80021ac:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80021b0:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b8:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80021ba:	bf1e      	ittt	ne
 80021bc:	681a      	ldrne	r2, [r3, #0]
 80021be:	f042 0201 	orrne.w	r2, r2, #1
 80021c2:	601a      	strne	r2, [r3, #0]
}
 80021c4:	bd10      	pop	{r4, pc}
 80021c6:	bf00      	nop
 80021c8:	40012c00 	.word	0x40012c00

080021cc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021cc:	6803      	ldr	r3, [r0, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021d4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	f022 0201 	bic.w	r2, r2, #1
 80021dc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021de:	2320      	movs	r3, #32
 80021e0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80021e4:	4770      	bx	lr
	...

080021e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021e8:	b538      	push	{r3, r4, r5, lr}
 80021ea:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ec:	6803      	ldr	r3, [r0, #0]
 80021ee:	68c1      	ldr	r1, [r0, #12]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	2419      	movs	r4, #25
 80021f4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80021f8:	430a      	orrs	r2, r1
 80021fa:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021fc:	6882      	ldr	r2, [r0, #8]
 80021fe:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002200:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002202:	4302      	orrs	r2, r0
 8002204:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002206:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800220a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800220e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002210:	430a      	orrs	r2, r1
 8002212:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	69a9      	ldr	r1, [r5, #24]
 8002218:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800221c:	430a      	orrs	r2, r1
 800221e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002220:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <UART_SetConfig+0x70>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d114      	bne.n	8002250 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002226:	f7ff fcff 	bl	8001c28 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800222a:	4360      	muls	r0, r4
 800222c:	686c      	ldr	r4, [r5, #4]
 800222e:	2264      	movs	r2, #100	; 0x64
 8002230:	00a4      	lsls	r4, r4, #2
 8002232:	fbb0 f0f4 	udiv	r0, r0, r4
 8002236:	fbb0 f4f2 	udiv	r4, r0, r2
 800223a:	fb02 0314 	mls	r3, r2, r4, r0
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	3332      	adds	r3, #50	; 0x32
 8002242:	fbb3 f3f2 	udiv	r3, r3, r2
 8002246:	6829      	ldr	r1, [r5, #0]
 8002248:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800224c:	608b      	str	r3, [r1, #8]
 800224e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002250:	f7ff fcda 	bl	8001c08 <HAL_RCC_GetPCLK1Freq>
 8002254:	e7e9      	b.n	800222a <UART_SetConfig+0x42>
 8002256:	bf00      	nop
 8002258:	40013800 	.word	0x40013800

0800225c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225e:	4604      	mov	r4, r0
 8002260:	460e      	mov	r6, r1
 8002262:	4617      	mov	r7, r2
 8002264:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002266:	6821      	ldr	r1, [r4, #0]
 8002268:	680b      	ldr	r3, [r1, #0]
 800226a:	ea36 0303 	bics.w	r3, r6, r3
 800226e:	d101      	bne.n	8002274 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002270:	2000      	movs	r0, #0
}
 8002272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002274:	1c6b      	adds	r3, r5, #1
 8002276:	d0f7      	beq.n	8002268 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002278:	b995      	cbnz	r5, 80022a0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800227a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800227c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002284:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	f022 0201 	bic.w	r2, r2, #1
 800228c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800228e:	2320      	movs	r3, #32
 8002290:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002294:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002298:	2300      	movs	r3, #0
 800229a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800229e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022a0:	f7fe fa2e 	bl	8000700 <HAL_GetTick>
 80022a4:	1bc0      	subs	r0, r0, r7
 80022a6:	4285      	cmp	r5, r0
 80022a8:	d2dd      	bcs.n	8002266 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80022aa:	e7e6      	b.n	800227a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080022ac <HAL_UART_Init>:
{
 80022ac:	b510      	push	{r4, lr}
  if (huart == NULL)
 80022ae:	4604      	mov	r4, r0
 80022b0:	b340      	cbz	r0, 8002304 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80022b2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022ba:	b91b      	cbnz	r3, 80022c4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80022bc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80022c0:	f002 fb56 	bl	8004970 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80022c4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80022c6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80022c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80022cc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80022ce:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80022d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022d4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80022d6:	f7ff ff87 	bl	80021e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022da:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022dc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ec:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022f4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80022f6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80022fe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002302:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002304:	2001      	movs	r0, #1
}
 8002306:	bd10      	pop	{r4, pc}

08002308 <HAL_HalfDuplex_Init>:
{
 8002308:	b510      	push	{r4, lr}
  if (huart == NULL)
 800230a:	4604      	mov	r4, r0
 800230c:	b360      	cbz	r0, 8002368 <HAL_HalfDuplex_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800230e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002312:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002316:	b91b      	cbnz	r3, 8002320 <HAL_HalfDuplex_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002318:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800231c:	f002 fb28 	bl	8004970 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002320:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002322:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002324:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002328:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800232a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800232c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002330:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002332:	f7ff ff59 	bl	80021e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002336:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002338:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002348:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	f042 0208 	orr.w	r2, r2, #8
 8002350:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002358:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800235a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800235c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800235e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002362:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002366:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002368:	2001      	movs	r0, #1
}
 800236a:	bd10      	pop	{r4, pc}

0800236c <HAL_UART_Transmit>:
{
 800236c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002370:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002372:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8002376:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002378:	2b20      	cmp	r3, #32
{
 800237a:	460d      	mov	r5, r1
 800237c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800237e:	d14e      	bne.n	800241e <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8002380:	2900      	cmp	r1, #0
 8002382:	d049      	beq.n	8002418 <HAL_UART_Transmit+0xac>
 8002384:	2a00      	cmp	r2, #0
 8002386:	d047      	beq.n	8002418 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002388:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800238c:	2b01      	cmp	r3, #1
 800238e:	d046      	beq.n	800241e <HAL_UART_Transmit+0xb2>
 8002390:	2301      	movs	r3, #1
 8002392:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002396:	2300      	movs	r3, #0
 8002398:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800239a:	2321      	movs	r3, #33	; 0x21
 800239c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80023a0:	f7fe f9ae 	bl	8000700 <HAL_GetTick>
 80023a4:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80023a6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80023aa:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023ae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	b96b      	cbnz	r3, 80023d0 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023b4:	463b      	mov	r3, r7
 80023b6:	4632      	mov	r2, r6
 80023b8:	2140      	movs	r1, #64	; 0x40
 80023ba:	4620      	mov	r0, r4
 80023bc:	f7ff ff4e 	bl	800225c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80023c0:	b9a8      	cbnz	r0, 80023ee <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80023c2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80023c4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80023c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80023cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80023d0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023d2:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023da:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023dc:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023e2:	4620      	mov	r0, r4
 80023e4:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023e6:	d10e      	bne.n	8002406 <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023e8:	f7ff ff38 	bl	800225c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80023ec:	b110      	cbz	r0, 80023f4 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80023ee:	2003      	movs	r0, #3
 80023f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023f4:	882b      	ldrh	r3, [r5, #0]
 80023f6:	6822      	ldr	r2, [r4, #0]
 80023f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023fc:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023fe:	6923      	ldr	r3, [r4, #16]
 8002400:	b943      	cbnz	r3, 8002414 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8002402:	3502      	adds	r5, #2
 8002404:	e7d3      	b.n	80023ae <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002406:	f7ff ff29 	bl	800225c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800240a:	2800      	cmp	r0, #0
 800240c:	d1ef      	bne.n	80023ee <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	782a      	ldrb	r2, [r5, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	3501      	adds	r5, #1
 8002416:	e7ca      	b.n	80023ae <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002418:	2001      	movs	r0, #1
 800241a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800241e:	2002      	movs	r0, #2
}
 8002420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002424 <HAL_UART_Receive>:
{
 8002424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002428:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800242a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800242e:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8002430:	2b20      	cmp	r3, #32
{
 8002432:	460d      	mov	r5, r1
 8002434:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002436:	d151      	bne.n	80024dc <HAL_UART_Receive+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8002438:	2900      	cmp	r1, #0
 800243a:	d04c      	beq.n	80024d6 <HAL_UART_Receive+0xb2>
 800243c:	2a00      	cmp	r2, #0
 800243e:	d04a      	beq.n	80024d6 <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 8002440:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002444:	2b01      	cmp	r3, #1
 8002446:	d049      	beq.n	80024dc <HAL_UART_Receive+0xb8>
 8002448:	2301      	movs	r3, #1
 800244a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244e:	2300      	movs	r3, #0
 8002450:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002452:	2322      	movs	r3, #34	; 0x22
 8002454:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8002458:	f7fe f952 	bl	8000700 <HAL_GetTick>
 800245c:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 800245e:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002462:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002466:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8002468:	b280      	uxth	r0, r0
 800246a:	b930      	cbnz	r0, 800247a <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 800246c:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800246e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 8002472:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8002476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 800247a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800247c:	4632      	mov	r2, r6
      huart->RxXferCount--;
 800247e:	3b01      	subs	r3, #1
 8002480:	b29b      	uxth	r3, r3
 8002482:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002484:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002486:	2120      	movs	r1, #32
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800248c:	4620      	mov	r0, r4
 800248e:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002490:	d112      	bne.n	80024b8 <HAL_UART_Receive+0x94>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002492:	f7ff fee3 	bl	800225c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002496:	b110      	cbz	r0, 800249e <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8002498:	2003      	movs	r0, #3
 800249a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800249e:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024a0:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024a2:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024a4:	b922      	cbnz	r2, 80024b0 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024aa:	f825 3b02 	strh.w	r3, [r5], #2
 80024ae:	e7da      	b.n	8002466 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f825 3b01 	strh.w	r3, [r5], #1
 80024b6:	e7d6      	b.n	8002466 <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024b8:	f7ff fed0 	bl	800225c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80024bc:	2800      	cmp	r0, #0
 80024be:	d1eb      	bne.n	8002498 <HAL_UART_Receive+0x74>
 80024c0:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024c2:	6921      	ldr	r1, [r4, #16]
 80024c4:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024c6:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024c8:	b911      	cbnz	r1, 80024d0 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024ca:	702b      	strb	r3, [r5, #0]
 80024cc:	4615      	mov	r5, r2
 80024ce:	e7ca      	b.n	8002466 <HAL_UART_Receive+0x42>
 80024d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024d4:	e7f9      	b.n	80024ca <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 80024d6:	2001      	movs	r0, #1
 80024d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80024dc:	2002      	movs	r0, #2
}
 80024de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024e2 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80024e2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d120      	bne.n	800252c <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80024ea:	b1e9      	cbz	r1, 8002528 <HAL_UART_Receive_IT+0x46>
 80024ec:	b1e2      	cbz	r2, 8002528 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80024ee:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d01a      	beq.n	800252c <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80024f6:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80024f8:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fa:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024fc:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fe:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002500:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002504:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8002506:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002508:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 800250a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800250e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002512:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002514:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8002516:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002518:	f041 0101 	orr.w	r1, r1, #1
 800251c:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800251e:	68d1      	ldr	r1, [r2, #12]
 8002520:	f041 0120 	orr.w	r1, r1, #32
 8002524:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8002526:	4770      	bx	lr
      return HAL_ERROR;
 8002528:	2001      	movs	r0, #1
 800252a:	4770      	bx	lr
    return HAL_BUSY;
 800252c:	2002      	movs	r0, #2
}
 800252e:	4770      	bx	lr

08002530 <HAL_UART_TxCpltCallback>:
 8002530:	4770      	bx	lr

08002532 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002532:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8002536:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002538:	2b22      	cmp	r3, #34	; 0x22
 800253a:	d136      	bne.n	80025aa <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800253c:	6883      	ldr	r3, [r0, #8]
 800253e:	6901      	ldr	r1, [r0, #16]
 8002540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002544:	6802      	ldr	r2, [r0, #0]
 8002546:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002548:	d123      	bne.n	8002592 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800254a:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800254c:	b9e9      	cbnz	r1, 800258a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800254e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002552:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002556:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002558:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800255a:	3c01      	subs	r4, #1
 800255c:	b2a4      	uxth	r4, r4
 800255e:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002560:	b98c      	cbnz	r4, 8002586 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002562:	6803      	ldr	r3, [r0, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	f022 0220 	bic.w	r2, r2, #32
 800256a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002572:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800257c:	2320      	movs	r3, #32
 800257e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002582:	f000 ff9d 	bl	80034c0 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8002586:	2000      	movs	r0, #0
}
 8002588:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f823 2b01 	strh.w	r2, [r3], #1
 8002590:	e7e1      	b.n	8002556 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002592:	b921      	cbnz	r1, 800259e <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002594:	1c59      	adds	r1, r3, #1
 8002596:	6852      	ldr	r2, [r2, #4]
 8002598:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800259a:	701a      	strb	r2, [r3, #0]
 800259c:	e7dc      	b.n	8002558 <UART_Receive_IT+0x26>
 800259e:	6852      	ldr	r2, [r2, #4]
 80025a0:	1c59      	adds	r1, r3, #1
 80025a2:	6281      	str	r1, [r0, #40]	; 0x28
 80025a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025a8:	e7f7      	b.n	800259a <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80025aa:	2002      	movs	r0, #2
 80025ac:	bd10      	pop	{r4, pc}

080025ae <HAL_UART_ErrorCallback>:
 80025ae:	4770      	bx	lr

080025b0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025b0:	6803      	ldr	r3, [r0, #0]
{
 80025b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025b4:	681a      	ldr	r2, [r3, #0]
{
 80025b6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80025b8:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025ba:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025bc:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80025be:	d107      	bne.n	80025d0 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025c0:	0696      	lsls	r6, r2, #26
 80025c2:	d55a      	bpl.n	800267a <HAL_UART_IRQHandler+0xca>
 80025c4:	068d      	lsls	r5, r1, #26
 80025c6:	d558      	bpl.n	800267a <HAL_UART_IRQHandler+0xca>
}
 80025c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80025cc:	f7ff bfb1 	b.w	8002532 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025d0:	f015 0501 	ands.w	r5, r5, #1
 80025d4:	d102      	bne.n	80025dc <HAL_UART_IRQHandler+0x2c>
 80025d6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80025da:	d04e      	beq.n	800267a <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025dc:	07d3      	lsls	r3, r2, #31
 80025de:	d505      	bpl.n	80025ec <HAL_UART_IRQHandler+0x3c>
 80025e0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025e2:	bf42      	ittt	mi
 80025e4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80025e6:	f043 0301 	orrmi.w	r3, r3, #1
 80025ea:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ec:	0750      	lsls	r0, r2, #29
 80025ee:	d504      	bpl.n	80025fa <HAL_UART_IRQHandler+0x4a>
 80025f0:	b11d      	cbz	r5, 80025fa <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025fa:	0793      	lsls	r3, r2, #30
 80025fc:	d504      	bpl.n	8002608 <HAL_UART_IRQHandler+0x58>
 80025fe:	b11d      	cbz	r5, 8002608 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002600:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002608:	0716      	lsls	r6, r2, #28
 800260a:	d504      	bpl.n	8002616 <HAL_UART_IRQHandler+0x66>
 800260c:	b11d      	cbz	r5, 8002616 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800260e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002610:	f043 0308 	orr.w	r3, r3, #8
 8002614:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002616:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d066      	beq.n	80026ea <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800261c:	0695      	lsls	r5, r2, #26
 800261e:	d504      	bpl.n	800262a <HAL_UART_IRQHandler+0x7a>
 8002620:	0688      	lsls	r0, r1, #26
 8002622:	d502      	bpl.n	800262a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff ff84 	bl	8002532 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800262a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800262c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800262e:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002630:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002632:	0711      	lsls	r1, r2, #28
 8002634:	d402      	bmi.n	800263c <HAL_UART_IRQHandler+0x8c>
 8002636:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800263a:	d01a      	beq.n	8002672 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800263c:	f7ff fdc6 	bl	80021cc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	0652      	lsls	r2, r2, #25
 8002646:	d510      	bpl.n	800266a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002648:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800264a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800264c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002650:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002652:	b150      	cbz	r0, 800266a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <HAL_UART_IRQHandler+0x13c>)
 8002656:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002658:	f7fe fb02 	bl	8000c60 <HAL_DMA_Abort_IT>
 800265c:	2800      	cmp	r0, #0
 800265e:	d044      	beq.n	80026ea <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002660:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002666:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002668:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800266a:	4620      	mov	r0, r4
 800266c:	f7ff ff9f 	bl	80025ae <HAL_UART_ErrorCallback>
 8002670:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002672:	f7ff ff9c 	bl	80025ae <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002676:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002678:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800267a:	0616      	lsls	r6, r2, #24
 800267c:	d527      	bpl.n	80026ce <HAL_UART_IRQHandler+0x11e>
 800267e:	060d      	lsls	r5, r1, #24
 8002680:	d525      	bpl.n	80026ce <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002682:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002686:	2a21      	cmp	r2, #33	; 0x21
 8002688:	d12f      	bne.n	80026ea <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800268a:	68a2      	ldr	r2, [r4, #8]
 800268c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002690:	6a22      	ldr	r2, [r4, #32]
 8002692:	d117      	bne.n	80026c4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002694:	8811      	ldrh	r1, [r2, #0]
 8002696:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800269a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800269c:	6921      	ldr	r1, [r4, #16]
 800269e:	b979      	cbnz	r1, 80026c0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80026a0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80026a2:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80026a4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80026a6:	3a01      	subs	r2, #1
 80026a8:	b292      	uxth	r2, r2
 80026aa:	84e2      	strh	r2, [r4, #38]	; 0x26
 80026ac:	b9ea      	cbnz	r2, 80026ea <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026b4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80026c0:	3201      	adds	r2, #1
 80026c2:	e7ee      	b.n	80026a2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026c4:	1c51      	adds	r1, r2, #1
 80026c6:	6221      	str	r1, [r4, #32]
 80026c8:	7812      	ldrb	r2, [r2, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	e7ea      	b.n	80026a4 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026ce:	0650      	lsls	r0, r2, #25
 80026d0:	d50b      	bpl.n	80026ea <HAL_UART_IRQHandler+0x13a>
 80026d2:	064a      	lsls	r2, r1, #25
 80026d4:	d509      	bpl.n	80026ea <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026d6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80026d8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026de:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80026e0:	2320      	movs	r3, #32
 80026e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80026e6:	f7ff ff23 	bl	8002530 <HAL_UART_TxCpltCallback>
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
 80026ec:	080026f1 	.word	0x080026f1

080026f0 <UART_DMAAbortOnError>:
{
 80026f0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80026f2:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80026f6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026f8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80026fa:	f7ff ff58 	bl	80025ae <HAL_UART_ErrorCallback>
 80026fe:	bd08      	pop	{r3, pc}

08002700 <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 8002700:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002704:	2b01      	cmp	r3, #1
 8002706:	d011      	beq.n	800272c <HAL_HalfDuplex_EnableReceiver+0x2c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002708:	2324      	movs	r3, #36	; 0x24
  tmpreg = huart->Instance->CR1;
 800270a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800270c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpreg = huart->Instance->CR1;
 8002710:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002712:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_RE;
 8002716:	f043 0304 	orr.w	r3, r3, #4
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800271a:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800271c:	2320      	movs	r3, #32
 800271e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8002722:	2300      	movs	r3, #0
 8002724:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8002728:	4618      	mov	r0, r3
 800272a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800272c:	2002      	movs	r0, #2
}
 800272e:	4770      	bx	lr

08002730 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002730:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002732:	780d      	ldrb	r5, [r1, #0]
{
 8002734:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002736:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 800273a:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800273c:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002740:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002744:	0412      	lsls	r2, r2, #16
 8002746:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8002748:	2803      	cmp	r0, #3
 800274a:	d84e      	bhi.n	80027ea <USB_ActivateEndpoint+0xba>
 800274c:	e8df f000 	tbb	[pc, r0]
 8002750:	47044a02 	.word	0x47044a02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8002758:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800275a:	f248 0480 	movw	r4, #32896	; 0x8080
 800275e:	4322      	orrs	r2, r4
 8002760:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002764:	780e      	ldrb	r6, [r1, #0]
 8002766:	4dab      	ldr	r5, [pc, #684]	; (8002a14 <USB_ActivateEndpoint+0x2e4>)
 8002768:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 800276c:	4334      	orrs	r4, r6
 800276e:	b292      	uxth	r2, r2
 8002770:	402a      	ands	r2, r5
 8002772:	4322      	orrs	r2, r4
 8002774:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8002778:	7b0c      	ldrb	r4, [r1, #12]
 800277a:	780a      	ldrb	r2, [r1, #0]
 800277c:	2c00      	cmp	r4, #0
 800277e:	f040 8088 	bne.w	8002892 <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 8002782:	784e      	ldrb	r6, [r1, #1]
 8002784:	88cc      	ldrh	r4, [r1, #6]
 8002786:	b396      	cbz	r6, 80027ee <USB_ActivateEndpoint+0xbe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002788:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800278c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002790:	f024 0401 	bic.w	r4, r4, #1
 8002794:	b2b6      	uxth	r6, r6
 8002796:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800279a:	b2a4      	uxth	r4, r4
 800279c:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800279e:	780c      	ldrb	r4, [r1, #0]
 80027a0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027a4:	0656      	lsls	r6, r2, #25
 80027a6:	d509      	bpl.n	80027bc <USB_ActivateEndpoint+0x8c>
 80027a8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027ac:	b292      	uxth	r2, r2
 80027ae:	402a      	ands	r2, r5
 80027b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027b4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80027b8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80027bc:	78ca      	ldrb	r2, [r1, #3]
 80027be:	7809      	ldrb	r1, [r1, #0]
 80027c0:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80027c2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80027c6:	4c94      	ldr	r4, [pc, #592]	; (8002a18 <USB_ActivateEndpoint+0x2e8>)
 80027c8:	b292      	uxth	r2, r2
 80027ca:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 80027ce:	d001      	beq.n	80027d4 <USB_ActivateEndpoint+0xa4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80027d0:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80027d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027dc:	e0cb      	b.n	8002976 <USB_ActivateEndpoint+0x246>
      wEpRegVal |= USB_EP_INTERRUPT;
 80027de:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80027e2:	e7b9      	b.n	8002758 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80027e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027e8:	e7b6      	b.n	8002758 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 80027ea:	2001      	movs	r0, #1
 80027ec:	e7b5      	b.n	800275a <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80027ee:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80027f2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80027f6:	f024 0401 	bic.w	r4, r4, #1
 80027fa:	b2ad      	uxth	r5, r5
 80027fc:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8002800:	b2a4      	uxth	r4, r4
 8002802:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002804:	780a      	ldrb	r2, [r1, #0]
 8002806:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800280a:	690d      	ldr	r5, [r1, #16]
 800280c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002810:	b2b6      	uxth	r6, r6
 8002812:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8002816:	bb5d      	cbnz	r5, 8002870 <USB_ActivateEndpoint+0x140>
 8002818:	5b94      	ldrh	r4, [r2, r6]
 800281a:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800281e:	0424      	lsls	r4, r4, #16
 8002820:	0c24      	lsrs	r4, r4, #16
 8002822:	5394      	strh	r4, [r2, r6]
 8002824:	5b94      	ldrh	r4, [r2, r6]
 8002826:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800282a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800282e:	b2a4      	uxth	r4, r4
 8002830:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002832:	780c      	ldrb	r4, [r1, #0]
 8002834:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002838:	0455      	lsls	r5, r2, #17
 800283a:	d50d      	bpl.n	8002858 <USB_ActivateEndpoint+0x128>
 800283c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002840:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002844:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002848:	0412      	lsls	r2, r2, #16
 800284a:	0c12      	lsrs	r2, r2, #16
 800284c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002850:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002854:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002858:	7809      	ldrb	r1, [r1, #0]
 800285a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800285e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002862:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002866:	0412      	lsls	r2, r2, #16
 8002868:	0c12      	lsrs	r2, r2, #16
 800286a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800286e:	e7b1      	b.n	80027d4 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002870:	2d3e      	cmp	r5, #62	; 0x3e
 8002872:	d805      	bhi.n	8002880 <USB_ActivateEndpoint+0x150>
 8002874:	086c      	lsrs	r4, r5, #1
 8002876:	07ed      	lsls	r5, r5, #31
 8002878:	bf48      	it	mi
 800287a:	3401      	addmi	r4, #1
 800287c:	02a4      	lsls	r4, r4, #10
 800287e:	e7d6      	b.n	800282e <USB_ActivateEndpoint+0xfe>
 8002880:	096f      	lsrs	r7, r5, #5
 8002882:	06ec      	lsls	r4, r5, #27
 8002884:	4c65      	ldr	r4, [pc, #404]	; (8002a1c <USB_ActivateEndpoint+0x2ec>)
 8002886:	bf08      	it	eq
 8002888:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800288c:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 8002890:	e7cd      	b.n	800282e <USB_ActivateEndpoint+0xfe>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002892:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002896:	b2a4      	uxth	r4, r4
 8002898:	402c      	ands	r4, r5
 800289a:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800289e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80028a2:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80028a6:	780a      	ldrb	r2, [r1, #0]
 80028a8:	890c      	ldrh	r4, [r1, #8]
 80028aa:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80028ae:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80028b2:	f024 0401 	bic.w	r4, r4, #1
 80028b6:	b2b6      	uxth	r6, r6
 80028b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028bc:	b2a4      	uxth	r4, r4
 80028be:	5394      	strh	r4, [r2, r6]
 80028c0:	780a      	ldrb	r2, [r1, #0]
 80028c2:	894c      	ldrh	r4, [r1, #10]
 80028c4:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80028c8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80028cc:	f024 0401 	bic.w	r4, r4, #1
 80028d0:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 80028d4:	b2a4      	uxth	r4, r4
 80028d6:	b2b6      	uxth	r6, r6
 80028d8:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 80028da:	784a      	ldrb	r2, [r1, #1]
 80028dc:	780c      	ldrb	r4, [r1, #0]
 80028de:	2a00      	cmp	r2, #0
 80028e0:	d14c      	bne.n	800297c <USB_ActivateEndpoint+0x24c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028e2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80028e6:	0452      	lsls	r2, r2, #17
 80028e8:	d509      	bpl.n	80028fe <USB_ActivateEndpoint+0x1ce>
 80028ea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80028ee:	b292      	uxth	r2, r2
 80028f0:	402a      	ands	r2, r5
 80028f2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80028f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028fa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028fe:	780c      	ldrb	r4, [r1, #0]
 8002900:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002904:	0657      	lsls	r7, r2, #25
 8002906:	d50d      	bpl.n	8002924 <USB_ActivateEndpoint+0x1f4>
 8002908:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800290c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002910:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002914:	0412      	lsls	r2, r2, #16
 8002916:	0c12      	lsrs	r2, r2, #16
 8002918:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800291c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002920:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002924:	780c      	ldrb	r4, [r1, #0]
 8002926:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800292a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800292e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002932:	0412      	lsls	r2, r2, #16
 8002934:	0c12      	lsrs	r2, r2, #16
 8002936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800293a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800293e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002942:	f248 0480 	movw	r4, #32896	; 0x8080
 8002946:	780d      	ldrb	r5, [r1, #0]
 8002948:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800294c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002950:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002954:	0412      	lsls	r2, r2, #16
 8002956:	0c12      	lsrs	r2, r2, #16
 8002958:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800295c:	4322      	orrs	r2, r4
 800295e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002962:	7809      	ldrb	r1, [r1, #0]
 8002964:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002968:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800296c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002970:	0412      	lsls	r2, r2, #16
 8002972:	0c12      	lsrs	r2, r2, #16
 8002974:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002976:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 800297a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800297c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002980:	0456      	lsls	r6, r2, #17
 8002982:	d509      	bpl.n	8002998 <USB_ActivateEndpoint+0x268>
 8002984:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002988:	b292      	uxth	r2, r2
 800298a:	402a      	ands	r2, r5
 800298c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002990:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002994:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002998:	780c      	ldrb	r4, [r1, #0]
 800299a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800299e:	0652      	lsls	r2, r2, #25
 80029a0:	d50d      	bpl.n	80029be <USB_ActivateEndpoint+0x28e>
 80029a2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80029a6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80029aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029ae:	0412      	lsls	r2, r2, #16
 80029b0:	0c12      	lsrs	r2, r2, #16
 80029b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029b6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80029ba:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80029be:	780c      	ldrb	r4, [r1, #0]
 80029c0:	4d15      	ldr	r5, [pc, #84]	; (8002a18 <USB_ActivateEndpoint+0x2e8>)
 80029c2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80029c6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80029ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029ce:	0412      	lsls	r2, r2, #16
 80029d0:	0c12      	lsrs	r2, r2, #16
 80029d2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80029d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029da:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80029de:	78ca      	ldrb	r2, [r1, #3]
 80029e0:	780c      	ldrb	r4, [r1, #0]
 80029e2:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80029e4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80029e8:	b292      	uxth	r2, r2
 80029ea:	ea02 0205 	and.w	r2, r2, r5
 80029ee:	bf18      	it	ne
 80029f0:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029fc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a00:	7809      	ldrb	r1, [r1, #0]
 8002a02:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002a06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a0e:	0412      	lsls	r2, r2, #16
 8002a10:	0c12      	lsrs	r2, r2, #16
 8002a12:	e6df      	b.n	80027d4 <USB_ActivateEndpoint+0xa4>
 8002a14:	ffff8f8f 	.word	0xffff8f8f
 8002a18:	ffff8fbf 	.word	0xffff8fbf
 8002a1c:	ffff8000 	.word	0xffff8000

08002a20 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8002a20:	784b      	ldrb	r3, [r1, #1]
 8002a22:	780a      	ldrb	r2, [r1, #0]
 8002a24:	b18b      	cbz	r3, 8002a4a <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002a26:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	0c1b      	lsrs	r3, r3, #16
 8002a36:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a42:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8002a46:	2000      	movs	r0, #0
 8002a48:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002a4a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	0c1b      	lsrs	r3, r3, #16
 8002a5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a5e:	e7ec      	b.n	8002a3a <USB_EPSetStall+0x1a>

08002a60 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002a60:	7b0b      	ldrb	r3, [r1, #12]
 8002a62:	bb43      	cbnz	r3, 8002ab6 <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 8002a64:	784b      	ldrb	r3, [r1, #1]
 8002a66:	780a      	ldrb	r2, [r1, #0]
 8002a68:	b33b      	cbz	r3, 8002aba <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a6e:	065b      	lsls	r3, r3, #25
 8002a70:	d50d      	bpl.n	8002a8e <USB_EPClearStall+0x2e>
 8002a72:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7e:	041b      	lsls	r3, r3, #16
 8002a80:	0c1b      	lsrs	r3, r3, #16
 8002a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a8a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002a8e:	78cb      	ldrb	r3, [r1, #3]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d010      	beq.n	8002ab6 <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002a94:	780a      	ldrb	r2, [r1, #0]
 8002a96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aa2:	041b      	lsls	r3, r3, #16
 8002aa4:	0c1b      	lsrs	r3, r3, #16
 8002aa6:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002aba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002abe:	045b      	lsls	r3, r3, #17
 8002ac0:	d50d      	bpl.n	8002ade <USB_EPClearStall+0x7e>
 8002ac2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ace:	041b      	lsls	r3, r3, #16
 8002ad0:	0c1b      	lsrs	r3, r3, #16
 8002ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ada:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ade:	780a      	ldrb	r2, [r1, #0]
 8002ae0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ae4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aec:	041b      	lsls	r3, r3, #16
 8002aee:	0c1b      	lsrs	r3, r3, #16
 8002af0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002af4:	e7d9      	b.n	8002aaa <USB_EPClearStall+0x4a>

08002af6 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002af6:	b911      	cbnz	r1, 8002afe <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8002afe:	2000      	movs	r0, #0
 8002b00:	4770      	bx	lr

08002b02 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002b02:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002b06:	b280      	uxth	r0, r0
 8002b08:	4770      	bx	lr

08002b0a <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	4770      	bx	lr

08002b0e <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002b0e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002b12:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002b14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d100      	bne.n	8002b24 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8002b22:	4770      	bx	lr
 8002b24:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8002b28:	f822 0b04 	strh.w	r0, [r2], #4
 8002b2c:	e7f7      	b.n	8002b1e <USB_WritePMA+0x10>
	...

08002b30 <USB_EPStartXfer>:
{
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8002b34:	7849      	ldrb	r1, [r1, #1]
{
 8002b36:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8002b38:	2901      	cmp	r1, #1
 8002b3a:	69aa      	ldr	r2, [r5, #24]
 8002b3c:	692b      	ldr	r3, [r5, #16]
 8002b3e:	7b28      	ldrb	r0, [r5, #12]
 8002b40:	d166      	bne.n	8002c10 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8002b42:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8002b44:	bf9d      	ittte	ls
 8002b46:	2300      	movls	r3, #0
 8002b48:	61ab      	strls	r3, [r5, #24]
 8002b4a:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8002b4c:	1ad2      	subhi	r2, r2, r3
 8002b4e:	bf88      	it	hi
 8002b50:	61aa      	strhi	r2, [r5, #24]
 8002b52:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8002b54:	bb08      	cbnz	r0, 8002b9a <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002b56:	4633      	mov	r3, r6
 8002b58:	88ea      	ldrh	r2, [r5, #6]
 8002b5a:	6969      	ldr	r1, [r5, #20]
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f7ff ffd6 	bl	8002b0e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002b62:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002b66:	782a      	ldrb	r2, [r5, #0]
 8002b68:	b299      	uxth	r1, r3
 8002b6a:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8002b6e:	0112      	lsls	r2, r2, #4
 8002b70:	440b      	add	r3, r1
 8002b72:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002b74:	782a      	ldrb	r2, [r5, #0]
 8002b76:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b82:	041b      	lsls	r3, r3, #16
 8002b84:	0c1b      	lsrs	r3, r3, #16
 8002b86:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b92:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8002b96:	2000      	movs	r0, #0
 8002b98:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002b9a:	782b      	ldrb	r3, [r5, #0]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002b9c:	4620      	mov	r0, r4
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002b9e:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002ba8:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002bac:	b291      	uxth	r1, r2
 8002bae:	bf15      	itete	ne
 8002bb0:	f204 420c 	addwne	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002bb4:	f204 4204 	addweq	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002bb8:	1852      	addne	r2, r2, r1
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002bba:	1852      	addeq	r2, r2, r1
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002bbc:	bf15      	itete	ne
 8002bbe:	52d6      	strhne	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002bc0:	52d6      	strheq	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 8002bc2:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8002bc4:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002bc6:	4633      	mov	r3, r6
 8002bc8:	6969      	ldr	r1, [r5, #20]
 8002bca:	f7ff ffa0 	bl	8002b0e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002bce:	786b      	ldrb	r3, [r5, #1]
 8002bd0:	782a      	ldrb	r2, [r5, #0]
 8002bd2:	b973      	cbnz	r3, 8002bf2 <USB_EPStartXfer+0xc2>
 8002bd4:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be0:	041b      	lsls	r3, r3, #16
 8002be2:	0c1b      	lsrs	r3, r3, #16
 8002be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bec:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8002bf0:	e7c0      	b.n	8002b74 <USB_EPStartXfer+0x44>
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d1be      	bne.n	8002b74 <USB_EPStartXfer+0x44>
 8002bf6:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0e:	e7ed      	b.n	8002bec <USB_EPStartXfer+0xbc>
    if (ep->xfer_len > ep->maxpacket)
 8002c10:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8002c12:	bf93      	iteet	ls
 8002c14:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8002c16:	1ad2      	subhi	r2, r2, r3
 8002c18:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8002c1a:	61ab      	strls	r3, [r5, #24]
 8002c1c:	bf98      	it	ls
 8002c1e:	4613      	movls	r3, r2
 8002c20:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8002c22:	b9b0      	cbnz	r0, 8002c52 <USB_EPStartXfer+0x122>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002c24:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8002c28:	0112      	lsls	r2, r2, #4
 8002c2a:	b281      	uxth	r1, r0
 8002c2c:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8002c30:	4408      	add	r0, r1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d144      	bne.n	8002cc0 <USB_EPStartXfer+0x190>
 8002c36:	5a83      	ldrh	r3, [r0, r2]
 8002c38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c3c:	041b      	lsls	r3, r3, #16
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	5283      	strh	r3, [r0, r2]
 8002c42:	5a83      	ldrh	r3, [r0, r2]
 8002c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	5283      	strh	r3, [r0, r2]
 8002c50:	e03f      	b.n	8002cd2 <USB_EPStartXfer+0x1a2>
 8002c52:	b9a1      	cbnz	r1, 8002c7e <USB_EPStartXfer+0x14e>
 8002c54:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	b281      	uxth	r1, r0
 8002c5c:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8002c60:	4408      	add	r0, r1
 8002c62:	b9e3      	cbnz	r3, 8002c9e <USB_EPStartXfer+0x16e>
 8002c64:	5a81      	ldrh	r1, [r0, r2]
 8002c66:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002c6a:	0409      	lsls	r1, r1, #16
 8002c6c:	0c09      	lsrs	r1, r1, #16
 8002c6e:	5281      	strh	r1, [r0, r2]
 8002c70:	5a81      	ldrh	r1, [r0, r2]
 8002c72:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002c76:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002c7a:	b289      	uxth	r1, r1
 8002c7c:	5281      	strh	r1, [r0, r2]
 8002c7e:	7869      	ldrb	r1, [r5, #1]
 8002c80:	782a      	ldrb	r2, [r5, #0]
 8002c82:	2900      	cmp	r1, #0
 8002c84:	d0ce      	beq.n	8002c24 <USB_EPStartXfer+0xf4>
 8002c86:	2901      	cmp	r1, #1
 8002c88:	d123      	bne.n	8002cd2 <USB_EPStartXfer+0x1a2>
 8002c8a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8002c8e:	0112      	lsls	r2, r2, #4
 8002c90:	b288      	uxth	r0, r1
 8002c92:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8002c96:	4401      	add	r1, r0
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	528b      	strh	r3, [r1, r2]
 8002c9c:	e019      	b.n	8002cd2 <USB_EPStartXfer+0x1a2>
 8002c9e:	2b3e      	cmp	r3, #62	; 0x3e
 8002ca0:	d805      	bhi.n	8002cae <USB_EPStartXfer+0x17e>
 8002ca2:	0859      	lsrs	r1, r3, #1
 8002ca4:	07de      	lsls	r6, r3, #31
 8002ca6:	bf48      	it	mi
 8002ca8:	3101      	addmi	r1, #1
 8002caa:	0289      	lsls	r1, r1, #10
 8002cac:	e7e5      	b.n	8002c7a <USB_EPStartXfer+0x14a>
 8002cae:	095e      	lsrs	r6, r3, #5
 8002cb0:	06d9      	lsls	r1, r3, #27
 8002cb2:	4912      	ldr	r1, [pc, #72]	; (8002cfc <USB_EPStartXfer+0x1cc>)
 8002cb4:	bf08      	it	eq
 8002cb6:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002cba:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002cbe:	e7dc      	b.n	8002c7a <USB_EPStartXfer+0x14a>
 8002cc0:	2b3e      	cmp	r3, #62	; 0x3e
 8002cc2:	d812      	bhi.n	8002cea <USB_EPStartXfer+0x1ba>
 8002cc4:	0859      	lsrs	r1, r3, #1
 8002cc6:	07de      	lsls	r6, r3, #31
 8002cc8:	bf48      	it	mi
 8002cca:	3101      	addmi	r1, #1
 8002ccc:	0289      	lsls	r1, r1, #10
 8002cce:	b289      	uxth	r1, r1
 8002cd0:	5281      	strh	r1, [r0, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002cd2:	782a      	ldrb	r2, [r5, #0]
 8002cd4:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	0c1b      	lsrs	r3, r3, #16
 8002ce4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002ce8:	e74f      	b.n	8002b8a <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002cea:	0959      	lsrs	r1, r3, #5
 8002cec:	06db      	lsls	r3, r3, #27
 8002cee:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <USB_EPStartXfer+0x1cc>)
 8002cf0:	bf08      	it	eq
 8002cf2:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002cf6:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002cfa:	e7a7      	b.n	8002c4c <USB_EPStartXfer+0x11c>
 8002cfc:	ffff8000 	.word	0xffff8000

08002d00 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002d00:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8002d04:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002d06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002d0a:	085d      	lsrs	r5, r3, #1
 8002d0c:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002d0e:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8002d10:	462e      	mov	r6, r5
 8002d12:	3002      	adds	r0, #2
 8002d14:	b936      	cbnz	r6, 8002d24 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8002d16:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8002d18:	bf44      	itt	mi
 8002d1a:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002d1e:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 8002d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8002d24:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8002d28:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8002d2a:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002d2c:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002d30:	0a24      	lsrs	r4, r4, #8
 8002d32:	f800 4c01 	strb.w	r4, [r0, #-1]
 8002d36:	e7ec      	b.n	8002d12 <USB_ReadPMA+0x12>

08002d38 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002d38:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002d3a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002d3e:	b90b      	cbnz	r3, 8002d44 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002d40:	2002      	movs	r0, #2
 8002d42:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4798      	blx	r3
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	d1f9      	bne.n	8002d40 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002d4c:	bd08      	pop	{r3, pc}

08002d4e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002d4e:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002d50:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4798      	blx	r3

  return USBD_OK;
}
 8002d58:	2000      	movs	r0, #0
 8002d5a:	bd08      	pop	{r3, pc}

08002d5c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002d5c:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002d5e:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8002d62:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002d64:	4628      	mov	r0, r5
 8002d66:	f000 fae1 	bl	800332c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002d6a:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002d6c:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8002d70:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8002d74:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8002d78:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8002d7c:	f001 031f 	and.w	r3, r1, #31
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d00e      	beq.n	8002da2 <USBD_LL_SetupStage+0x46>
 8002d84:	d307      	bcc.n	8002d96 <USBD_LL_SetupStage+0x3a>
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d010      	beq.n	8002dac <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002d8a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f002 f850 	bl	8004e34 <USBD_LL_StallEP>
      break;
 8002d94:	e003      	b.n	8002d9e <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8002d96:	4629      	mov	r1, r5
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f000 f8f5 	bl	8002f88 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8002d9e:	2000      	movs	r0, #0
 8002da0:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8002da2:	4629      	mov	r1, r5
 8002da4:	4620      	mov	r0, r4
 8002da6:	f000 fa13 	bl	80031d0 <USBD_StdItfReq>
      break;
 8002daa:	e7f8      	b.n	8002d9e <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8002dac:	4629      	mov	r1, r5
 8002dae:	4620      	mov	r0, r4
 8002db0:	f000 fa33 	bl	800321a <USBD_StdEPReq>
      break;
 8002db4:	e7f3      	b.n	8002d9e <USBD_LL_SetupStage+0x42>

08002db6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002db6:	b570      	push	{r4, r5, r6, lr}
 8002db8:	4605      	mov	r5, r0
 8002dba:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002dbc:	bb49      	cbnz	r1, 8002e12 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002dbe:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d11e      	bne.n	8002e04 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8002dc6:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8002dca:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d90b      	bls.n	8002dea <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8002dd2:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8002dd4:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8002dd6:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8002dda:	bf8c      	ite	hi
 8002ddc:	b29a      	uxthhi	r2, r3
 8002dde:	b292      	uxthls	r2, r2
 8002de0:	4631      	mov	r1, r6
 8002de2:	f000 facc 	bl	800337e <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002de6:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8002de8:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8002dea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	b123      	cbz	r3, 8002dfc <USBD_LL_DataOutStage+0x46>
 8002df2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002df6:	2a03      	cmp	r2, #3
 8002df8:	d100      	bne.n	8002dfc <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8002dfa:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	f000 fac6 	bl	800338e <USBD_CtlSendStatus>
 8002e02:	e7f0      	b.n	8002de6 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d1ee      	bne.n	8002de6 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8002e08:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8002e0c:	f002 f812 	bl	8004e34 <USBD_LL_StallEP>
 8002e10:	e7e9      	b.n	8002de6 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8002e12:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	b12b      	cbz	r3, 8002e26 <USBD_LL_DataOutStage+0x70>
 8002e1a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002e1e:	2a03      	cmp	r2, #3
 8002e20:	d101      	bne.n	8002e26 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8002e22:	4798      	blx	r3
 8002e24:	e7df      	b.n	8002de6 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8002e26:	2002      	movs	r0, #2
}
 8002e28:	bd70      	pop	{r4, r5, r6, pc}

08002e2a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8002e2a:	b570      	push	{r4, r5, r6, lr}
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002e30:	460e      	mov	r6, r1
 8002e32:	2900      	cmp	r1, #0
 8002e34:	d147      	bne.n	8002ec6 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002e36:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8002e3a:	2a02      	cmp	r2, #2
 8002e3c:	d13c      	bne.n	8002eb8 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8002e3e:	6a05      	ldr	r5, [r0, #32]
 8002e40:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002e42:	4295      	cmp	r5, r2
 8002e44:	d913      	bls.n	8002e6e <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8002e46:	1aaa      	subs	r2, r5, r2
 8002e48:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	b292      	uxth	r2, r2
 8002e4e:	f000 fa8e 	bl	800336e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002e52:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002e54:	461a      	mov	r2, r3
 8002e56:	4619      	mov	r1, r3
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f002 f833 	bl	8004ec4 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002e5e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8002e62:	2000      	movs	r0, #0
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d13a      	bne.n	8002ede <USBD_LL_DataInStage+0xb4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002e68:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8002e6c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8002e6e:	69c3      	ldr	r3, [r0, #28]
 8002e70:	fbb3 f5f2 	udiv	r5, r3, r2
 8002e74:	fb02 3515 	mls	r5, r2, r5, r3
 8002e78:	b965      	cbnz	r5, 8002e94 <USBD_LL_DataInStage+0x6a>
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d80a      	bhi.n	8002e94 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8002e7e:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d206      	bcs.n	8002e94 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002e86:	462a      	mov	r2, r5
 8002e88:	f000 fa71 	bl	800336e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002e8c:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002e90:	462b      	mov	r3, r5
 8002e92:	e7df      	b.n	8002e54 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8002e94:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	b12b      	cbz	r3, 8002ea8 <USBD_LL_DataInStage+0x7e>
 8002e9c:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8002ea0:	2a03      	cmp	r2, #3
 8002ea2:	d101      	bne.n	8002ea8 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002ea8:	2180      	movs	r1, #128	; 0x80
 8002eaa:	4620      	mov	r0, r4
 8002eac:	f001 ffc2 	bl	8004e34 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f000 fa77 	bl	80033a4 <USBD_CtlReceiveStatus>
 8002eb6:	e7d2      	b.n	8002e5e <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002eb8:	f032 0304 	bics.w	r3, r2, #4
 8002ebc:	d1cf      	bne.n	8002e5e <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002ebe:	2180      	movs	r1, #128	; 0x80
 8002ec0:	f001 ffb8 	bl	8004e34 <USBD_LL_StallEP>
 8002ec4:	e7cb      	b.n	8002e5e <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8002ec6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	b133      	cbz	r3, 8002edc <USBD_LL_DataInStage+0xb2>
 8002ece:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002ed2:	2a03      	cmp	r2, #3
 8002ed4:	d102      	bne.n	8002edc <USBD_LL_DataInStage+0xb2>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8002ed6:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002ed8:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8002edc:	2002      	movs	r0, #2
}
 8002ede:	bd70      	pop	{r4, r5, r6, pc}

08002ee0 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002ee0:	2200      	movs	r2, #0
{
 8002ee2:	b570      	push	{r4, r5, r6, lr}
 8002ee4:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002ee6:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002ee8:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002eea:	4611      	mov	r1, r2
 8002eec:	2340      	movs	r3, #64	; 0x40
 8002eee:	f001 ff91 	bl	8004e14 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002ef2:	4633      	mov	r3, r6
 8002ef4:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002ef6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002efa:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002efe:	2200      	movs	r2, #0
 8002f00:	4620      	mov	r0, r4
 8002f02:	f001 ff87 	bl	8004e14 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8002f06:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002f08:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002f0c:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002f0e:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f10:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8002f14:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8002f18:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002f1a:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8002f1e:	b123      	cbz	r3, 8002f2a <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002f20:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002f24:	4620      	mov	r0, r4
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	bd70      	pop	{r4, r5, r6, pc}

08002f2e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002f2e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8002f30:	2000      	movs	r0, #0
 8002f32:	4770      	bx	lr

08002f34 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002f34:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002f38:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8002f42:	2000      	movs	r0, #0
 8002f44:	4770      	bx	lr

08002f46 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8002f46:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002f4a:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8002f4c:	bf04      	itt	eq
 8002f4e:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8002f52:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8002f56:	2000      	movs	r0, #0
 8002f58:	4770      	bx	lr

08002f5a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8002f5a:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f5c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002f60:	2a03      	cmp	r2, #3
 8002f62:	d104      	bne.n	8002f6e <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8002f64:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	b103      	cbz	r3, 8002f6e <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002f6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8002f6e:	2000      	movs	r0, #0
 8002f70:	bd08      	pop	{r3, pc}

08002f72 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8002f72:	b510      	push	{r4, lr}
 8002f74:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8002f76:	2180      	movs	r1, #128	; 0x80
 8002f78:	f001 ff5c 	bl	8004e34 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002f7c:	4620      	mov	r0, r4
}
 8002f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8002f82:	2100      	movs	r1, #0
 8002f84:	f001 bf56 	b.w	8004e34 <USBD_LL_StallEP>

08002f88 <USBD_StdDevReq>:
{
 8002f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f8a:	780b      	ldrb	r3, [r1, #0]
{
 8002f8c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002f92:	2b20      	cmp	r3, #32
{
 8002f94:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f96:	d012      	beq.n	8002fbe <USBD_StdDevReq+0x36>
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	d010      	beq.n	8002fbe <USBD_StdDevReq+0x36>
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d15c      	bne.n	800305a <USBD_StdDevReq+0xd2>
      switch (req->bRequest)
 8002fa0:	784b      	ldrb	r3, [r1, #1]
 8002fa2:	2b09      	cmp	r3, #9
 8002fa4:	d858      	bhi.n	8003058 <USBD_StdDevReq+0xd0>
 8002fa6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002faa:	00e9      	.short	0x00e9
 8002fac:	00570105 	.word	0x00570105
 8002fb0:	005700fe 	.word	0x005700fe
 8002fb4:	00130084 	.word	0x00130084
 8002fb8:	00d20057 	.word	0x00d20057
 8002fbc:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 8002fbe:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	4798      	blx	r3
}
 8002fca:	2000      	movs	r0, #0
 8002fcc:	b003      	add	sp, #12
 8002fce:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8002fd6:	884b      	ldrh	r3, [r1, #2]
 8002fd8:	0a1a      	lsrs	r2, r3, #8
 8002fda:	3a01      	subs	r2, #1
 8002fdc:	2a06      	cmp	r2, #6
 8002fde:	d83b      	bhi.n	8003058 <USBD_StdDevReq+0xd0>
 8002fe0:	e8df f002 	tbb	[pc, r2]
 8002fe4:	3a2d2004 	.word	0x3a2d2004
 8002fe8:	523a      	.short	0x523a
 8002fea:	5c          	.byte	0x5c
 8002feb:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002fec:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002ff0:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002ff2:	f10d 0106 	add.w	r1, sp, #6
 8002ff6:	7c20      	ldrb	r0, [r4, #16]
 8002ff8:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8002ffa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002ffe:	b152      	cbz	r2, 8003016 <USBD_StdDevReq+0x8e>
 8003000:	88eb      	ldrh	r3, [r5, #6]
 8003002:	b143      	cbz	r3, 8003016 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8003004:	429a      	cmp	r2, r3
 8003006:	bf28      	it	cs
 8003008:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800300a:	4601      	mov	r1, r0
 800300c:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800300e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003012:	f000 f99f 	bl	8003354 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003016:	88eb      	ldrh	r3, [r5, #6]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1d6      	bne.n	8002fca <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 800301c:	4620      	mov	r0, r4
 800301e:	f000 f9b6 	bl	800338e <USBD_CtlSendStatus>
 8003022:	e7d2      	b.n	8002fca <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003024:	7c02      	ldrb	r2, [r0, #16]
 8003026:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800302a:	b932      	cbnz	r2, 800303a <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800302e:	f10d 0006 	add.w	r0, sp, #6
 8003032:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003034:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003036:	7043      	strb	r3, [r0, #1]
 8003038:	e7df      	b.n	8002ffa <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	e7f7      	b.n	800302e <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b05      	cmp	r3, #5
 8003042:	d809      	bhi.n	8003058 <USBD_StdDevReq+0xd0>
 8003044:	e8df f003 	tbb	[pc, r3]
 8003048:	14100c03 	.word	0x14100c03
 800304c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800304e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003052:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1cc      	bne.n	8002ff2 <USBD_StdDevReq+0x6a>
          USBD_CtlError(pdev, req);
 8003058:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 800305a:	f7ff ff8a 	bl	8002f72 <USBD_CtlError.constprop.1>
  return ret;
 800305e:	e7b4      	b.n	8002fca <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003060:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	e7f5      	b.n	8003054 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003068:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	e7f1      	b.n	8003054 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003070:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	e7ed      	b.n	8003054 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003078:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	e7e9      	b.n	8003054 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003080:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	e7e5      	b.n	8003054 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003088:	7c03      	ldrb	r3, [r0, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1e4      	bne.n	8003058 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800308e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003092:	f10d 0006 	add.w	r0, sp, #6
 8003096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003098:	4798      	blx	r3
 800309a:	e7ae      	b.n	8002ffa <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800309c:	7c03      	ldrb	r3, [r0, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1da      	bne.n	8003058 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80030a2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80030a6:	f10d 0006 	add.w	r0, sp, #6
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80030ae:	2307      	movs	r3, #7
 80030b0:	e7c1      	b.n	8003036 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80030b2:	888b      	ldrh	r3, [r1, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1cf      	bne.n	8003058 <USBD_StdDevReq+0xd0>
 80030b8:	88cb      	ldrh	r3, [r1, #6]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1cc      	bne.n	8003058 <USBD_StdDevReq+0xd0>
 80030be:	884d      	ldrh	r5, [r1, #2]
 80030c0:	2d7f      	cmp	r5, #127	; 0x7f
 80030c2:	d8c9      	bhi.n	8003058 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80030c4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80030c8:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d0c4      	beq.n	8003058 <USBD_StdDevReq+0xd0>
      pdev->dev_address = dev_addr;
 80030ce:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80030d2:	f001 fedb 	bl	8004e8c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80030d6:	4620      	mov	r0, r4
 80030d8:	f000 f959 	bl	800338e <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80030dc:	b11d      	cbz	r5, 80030e6 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80030de:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80030e0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80030e4:	e771      	b.n	8002fca <USBD_StdDevReq+0x42>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e7fa      	b.n	80030e0 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 80030ea:	7889      	ldrb	r1, [r1, #2]
 80030ec:	4d37      	ldr	r5, [pc, #220]	; (80031cc <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80030ee:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80030f0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80030f2:	d8b1      	bhi.n	8003058 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 80030f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d008      	beq.n	800310e <USBD_StdDevReq+0x186>
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d014      	beq.n	800312a <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8003100:	f7ff ff37 	bl	8002f72 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003104:	7829      	ldrb	r1, [r5, #0]
 8003106:	4620      	mov	r0, r4
 8003108:	f7ff fe21 	bl	8002d4e <USBD_ClrClassConfig>
 800310c:	e75d      	b.n	8002fca <USBD_StdDevReq+0x42>
        if (cfgidx)
 800310e:	2900      	cmp	r1, #0
 8003110:	d084      	beq.n	800301c <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8003112:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003114:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8003116:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003118:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800311c:	4620      	mov	r0, r4
 800311e:	f7ff fe0b 	bl	8002d38 <USBD_SetClassConfig>
 8003122:	2802      	cmp	r0, #2
 8003124:	f47f af7a 	bne.w	800301c <USBD_StdDevReq+0x94>
 8003128:	e796      	b.n	8003058 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 800312a:	b931      	cbnz	r1, 800313a <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800312c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800312e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003130:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8003134:	f7ff fe0b 	bl	8002d4e <USBD_ClrClassConfig>
 8003138:	e770      	b.n	800301c <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 800313a:	6841      	ldr	r1, [r0, #4]
 800313c:	2901      	cmp	r1, #1
 800313e:	f43f af6d 	beq.w	800301c <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003142:	b2c9      	uxtb	r1, r1
 8003144:	f7ff fe03 	bl	8002d4e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003148:	7829      	ldrb	r1, [r5, #0]
 800314a:	6061      	str	r1, [r4, #4]
 800314c:	e7e6      	b.n	800311c <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 800314e:	88ca      	ldrh	r2, [r1, #6]
 8003150:	2a01      	cmp	r2, #1
 8003152:	d181      	bne.n	8003058 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8003154:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003158:	2b00      	cmp	r3, #0
 800315a:	f43f af7d 	beq.w	8003058 <USBD_StdDevReq+0xd0>
 800315e:	2b02      	cmp	r3, #2
 8003160:	d904      	bls.n	800316c <USBD_StdDevReq+0x1e4>
 8003162:	2b03      	cmp	r3, #3
 8003164:	f47f af78 	bne.w	8003058 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003168:	1d01      	adds	r1, r0, #4
 800316a:	e003      	b.n	8003174 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 800316c:	4601      	mov	r1, r0
 800316e:	2300      	movs	r3, #0
 8003170:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003174:	4620      	mov	r0, r4
 8003176:	f000 f8ed 	bl	8003354 <USBD_CtlSendData>
 800317a:	e726      	b.n	8002fca <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 800317c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003180:	3b01      	subs	r3, #1
 8003182:	2b02      	cmp	r3, #2
 8003184:	f63f af68 	bhi.w	8003058 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8003188:	88cb      	ldrh	r3, [r1, #6]
 800318a:	2b02      	cmp	r3, #2
 800318c:	f47f af64 	bne.w	8003058 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003190:	2301      	movs	r3, #1
 8003192:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003194:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003198:	b10b      	cbz	r3, 800319e <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800319a:	2303      	movs	r3, #3
 800319c:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800319e:	2202      	movs	r2, #2
 80031a0:	f104 010c 	add.w	r1, r4, #12
 80031a4:	e7e6      	b.n	8003174 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80031a6:	884b      	ldrh	r3, [r1, #2]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	f47f af0e 	bne.w	8002fca <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80031ae:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80031b2:	e733      	b.n	800301c <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 80031b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80031b8:	3b01      	subs	r3, #1
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	f63f af4c 	bhi.w	8003058 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80031c0:	884b      	ldrh	r3, [r1, #2]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	f47f af01 	bne.w	8002fca <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e7f0      	b.n	80031ae <USBD_StdDevReq+0x226>
 80031cc:	20000284 	.word	0x20000284

080031d0 <USBD_StdItfReq>:
{
 80031d0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80031d2:	780b      	ldrb	r3, [r1, #0]
{
 80031d4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80031d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80031da:	2b20      	cmp	r3, #32
{
 80031dc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80031de:	d002      	beq.n	80031e6 <USBD_StdItfReq+0x16>
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d000      	beq.n	80031e6 <USBD_StdItfReq+0x16>
 80031e4:	b9b3      	cbnz	r3, 8003214 <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 80031e6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80031ea:	3b01      	subs	r3, #1
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d810      	bhi.n	8003212 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80031f0:	792b      	ldrb	r3, [r5, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d80d      	bhi.n	8003212 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80031f6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80031fa:	4629      	mov	r1, r5
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	4620      	mov	r0, r4
 8003200:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003202:	88eb      	ldrh	r3, [r5, #6]
 8003204:	b91b      	cbnz	r3, 800320e <USBD_StdItfReq+0x3e>
 8003206:	b910      	cbnz	r0, 800320e <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8003208:	4620      	mov	r0, r4
 800320a:	f000 f8c0 	bl	800338e <USBD_CtlSendStatus>
}
 800320e:	2000      	movs	r0, #0
 8003210:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8003212:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 8003214:	f7ff fead 	bl	8002f72 <USBD_CtlError.constprop.1>
      break;
 8003218:	e7f9      	b.n	800320e <USBD_StdItfReq+0x3e>

0800321a <USBD_StdEPReq>:
{
 800321a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800321c:	780a      	ldrb	r2, [r1, #0]
{
 800321e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003220:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003224:	2a20      	cmp	r2, #32
{
 8003226:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003228:	d013      	beq.n	8003252 <USBD_StdEPReq+0x38>
 800322a:	2a40      	cmp	r2, #64	; 0x40
 800322c:	d011      	beq.n	8003252 <USBD_StdEPReq+0x38>
 800322e:	b96a      	cbnz	r2, 800324c <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8003230:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8003232:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 8003234:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8003236:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8003238:	d01f      	beq.n	800327a <USBD_StdEPReq+0x60>
 800323a:	d335      	bcc.n	80032a8 <USBD_StdEPReq+0x8e>
 800323c:	2d03      	cmp	r5, #3
 800323e:	d105      	bne.n	800324c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8003240:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003244:	2a02      	cmp	r2, #2
 8003246:	d026      	beq.n	8003296 <USBD_StdEPReq+0x7c>
 8003248:	2a03      	cmp	r2, #3
 800324a:	d00a      	beq.n	8003262 <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 800324c:	f7ff fe91 	bl	8002f72 <USBD_CtlError.constprop.1>
      break;
 8003250:	e005      	b.n	800325e <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 8003252:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8003256:	4619      	mov	r1, r3
 8003258:	6892      	ldr	r2, [r2, #8]
 800325a:	4620      	mov	r0, r4
 800325c:	4790      	blx	r2
}
 800325e:	2000      	movs	r0, #0
 8003260:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003262:	885a      	ldrh	r2, [r3, #2]
 8003264:	b92a      	cbnz	r2, 8003272 <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 8003266:	064a      	lsls	r2, r1, #25
 8003268:	d003      	beq.n	8003272 <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800326a:	88db      	ldrh	r3, [r3, #6]
 800326c:	b90b      	cbnz	r3, 8003272 <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 800326e:	f001 fde1 	bl	8004e34 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8003272:	4620      	mov	r0, r4
 8003274:	f000 f88b 	bl	800338e <USBD_CtlSendStatus>
              break;
 8003278:	e7f1      	b.n	800325e <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 800327a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800327e:	2a02      	cmp	r2, #2
 8003280:	d009      	beq.n	8003296 <USBD_StdEPReq+0x7c>
 8003282:	2a03      	cmp	r2, #3
 8003284:	d1e2      	bne.n	800324c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003286:	885b      	ldrh	r3, [r3, #2]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e8      	bne.n	800325e <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 800328c:	064d      	lsls	r5, r1, #25
 800328e:	d0f0      	beq.n	8003272 <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003290:	f001 fdde 	bl	8004e50 <USBD_LL_ClearStallEP>
 8003294:	e7ed      	b.n	8003272 <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003296:	064b      	lsls	r3, r1, #25
 8003298:	d016      	beq.n	80032c8 <USBD_StdEPReq+0xae>
                USBD_LL_StallEP(pdev, ep_addr);
 800329a:	f001 fdcb 	bl	8004e34 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	4620      	mov	r0, r4
 80032a2:	f001 fdc7 	bl	8004e34 <USBD_LL_StallEP>
 80032a6:	e7da      	b.n	800325e <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 80032a8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d00d      	beq.n	80032cc <USBD_StdEPReq+0xb2>
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d1cb      	bne.n	800324c <USBD_StdEPReq+0x32>
 80032b4:	2314      	movs	r3, #20
              if ((ep_addr & 0x80U) == 0x80U)
 80032b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80032ba:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80032be:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80032c2:	d014      	beq.n	80032ee <USBD_StdEPReq+0xd4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80032c4:	6992      	ldr	r2, [r2, #24]
 80032c6:	b9ea      	cbnz	r2, 8003304 <USBD_StdEPReq+0xea>
                USBD_CtlError(pdev, req);
 80032c8:	4620      	mov	r0, r4
 80032ca:	e7bf      	b.n	800324c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80032cc:	0649      	lsls	r1, r1, #25
 80032ce:	d1fb      	bne.n	80032c8 <USBD_StdEPReq+0xae>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80032d0:	0613      	lsls	r3, r2, #24
              pep->status = 0x0000U;
 80032d2:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80032d6:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80032da:	bf4c      	ite	mi
 80032dc:	f100 0114 	addmi.w	r1, r0, #20
 80032e0:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 80032e4:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80032e6:	4620      	mov	r0, r4
 80032e8:	f000 f834 	bl	8003354 <USBD_CtlSendData>
              break;
 80032ec:	e7b7      	b.n	800325e <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80032ee:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 80032f2:	2a00      	cmp	r2, #0
 80032f4:	d0e8      	beq.n	80032c8 <USBD_StdEPReq+0xae>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80032f6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80032fa:	fb03 0505 	mla	r5, r3, r5, r0
 80032fe:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8003302:	e004      	b.n	800330e <USBD_StdEPReq+0xf4>
 8003304:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003308:	fb05 3503 	mla	r5, r5, r3, r3
 800330c:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800330e:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8003312:	d103      	bne.n	800331c <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 8003314:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003316:	2202      	movs	r2, #2
 8003318:	4629      	mov	r1, r5
 800331a:	e7e4      	b.n	80032e6 <USBD_StdEPReq+0xcc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800331c:	4620      	mov	r0, r4
 800331e:	f001 fda5 	bl	8004e6c <USBD_LL_IsStallEP>
 8003322:	b108      	cbz	r0, 8003328 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8003324:	2301      	movs	r3, #1
 8003326:	e7f5      	b.n	8003314 <USBD_StdEPReq+0xfa>
                pep->status = 0x0000U;
 8003328:	6028      	str	r0, [r5, #0]
 800332a:	e7f4      	b.n	8003316 <USBD_StdEPReq+0xfc>

0800332c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800332c:	780b      	ldrb	r3, [r1, #0]
 800332e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003330:	784b      	ldrb	r3, [r1, #1]
 8003332:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003334:	78ca      	ldrb	r2, [r1, #3]
 8003336:	788b      	ldrb	r3, [r1, #2]
 8003338:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800333c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800333e:	794a      	ldrb	r2, [r1, #5]
 8003340:	790b      	ldrb	r3, [r1, #4]
 8003342:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003346:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003348:	79ca      	ldrb	r2, [r1, #7]
 800334a:	798b      	ldrb	r3, [r1, #6]
 800334c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003350:	80c3      	strh	r3, [r0, #6]
 8003352:	4770      	bx	lr

08003354 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8003354:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003356:	2202      	movs	r2, #2
{
 8003358:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800335a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800335e:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003360:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8003362:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003364:	2100      	movs	r1, #0
 8003366:	f001 fd9f 	bl	8004ea8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800336a:	2000      	movs	r0, #0
 800336c:	bd10      	pop	{r4, pc}

0800336e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800336e:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003370:	4613      	mov	r3, r2
 8003372:	460a      	mov	r2, r1
 8003374:	2100      	movs	r1, #0
 8003376:	f001 fd97 	bl	8004ea8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800337a:	2000      	movs	r0, #0
 800337c:	bd08      	pop	{r3, pc}

0800337e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800337e:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003380:	4613      	mov	r3, r2
 8003382:	460a      	mov	r2, r1
 8003384:	2100      	movs	r1, #0
 8003386:	f001 fd9d 	bl	8004ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800338a:	2000      	movs	r0, #0
 800338c:	bd08      	pop	{r3, pc}

0800338e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800338e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003390:	2304      	movs	r3, #4
 8003392:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003396:	2300      	movs	r3, #0
 8003398:	461a      	mov	r2, r3
 800339a:	4619      	mov	r1, r3
 800339c:	f001 fd84 	bl	8004ea8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80033a0:	2000      	movs	r0, #0
 80033a2:	bd08      	pop	{r3, pc}

080033a4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80033a4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80033a6:	2305      	movs	r3, #5
 80033a8:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80033ac:	2300      	movs	r3, #0
 80033ae:	461a      	mov	r2, r3
 80033b0:	4619      	mov	r1, r3
 80033b2:	f001 fd87 	bl	8004ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80033b6:	2000      	movs	r0, #0
 80033b8:	bd08      	pop	{r3, pc}
	...

080033bc <get_addr>:
}

uint32_t get_addr(void)
{
	return reg_addr;
}
 80033bc:	4b01      	ldr	r3, [pc, #4]	; (80033c4 <get_addr+0x8>)
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000288 	.word	0x20000288

080033c8 <get_mode>:

dmxmode_t get_mode(void)
{
	return dmx_mode;
}
 80033c8:	4b01      	ldr	r3, [pc, #4]	; (80033d0 <get_mode+0x8>)
 80033ca:	7818      	ldrb	r0, [r3, #0]
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000285 	.word	0x20000285

080033d4 <get_reg_length>:
}

uint32_t get_reg_length(void)
{
	return reg_len;
}
 80033d4:	4b01      	ldr	r3, [pc, #4]	; (80033dc <get_reg_length+0x8>)
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000290 	.word	0x20000290

080033e0 <init_regs>:

void init_regs(void)
{
 80033e0:	b538      	push	{r3, r4, r5, lr}
	//allocate memory
	if (reg_data != NULL)
 80033e2:	4c08      	ldr	r4, [pc, #32]	; (8003404 <init_regs+0x24>)
 80033e4:	6820      	ldr	r0, [r4, #0]
 80033e6:	b108      	cbz	r0, 80033ec <init_regs+0xc>
		free(reg_data);
 80033e8:	f001 fe32 	bl	8005050 <free>

	reg_data = malloc(reg_len);
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <init_regs+0x28>)
 80033ee:	681d      	ldr	r5, [r3, #0]
 80033f0:	4628      	mov	r0, r5
 80033f2:	f001 fe25 	bl	8005040 <malloc>
	memset(reg_data, 0, reg_len);
 80033f6:	462a      	mov	r2, r5
	reg_data = malloc(reg_len);
 80033f8:	6020      	str	r0, [r4, #0]
	memset(reg_data, 0, reg_len);
 80033fa:	2100      	movs	r1, #0
}
 80033fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(reg_data, 0, reg_len);
 8003400:	f001 be2e 	b.w	8005060 <memset>
 8003404:	2000028c 	.word	0x2000028c
 8003408:	20000290 	.word	0x20000290

0800340c <dmx512_init>:
	dmx_mode = DMX_MODE1;
 800340c:	2201      	movs	r2, #1
	reg_addr = addr;
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <dmx512_init+0x1c>)
	switch (mode)
 8003410:	2802      	cmp	r0, #2
	reg_addr = addr;
 8003412:	6019      	str	r1, [r3, #0]
	dmx_mode = DMX_MODE1;
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <dmx512_init+0x20>)
 8003416:	701a      	strb	r2, [r3, #0]
	reg_len = len;
 8003418:	bf14      	ite	ne
 800341a:	220b      	movne	r2, #11
 800341c:	221a      	moveq	r2, #26
 800341e:	4b04      	ldr	r3, [pc, #16]	; (8003430 <dmx512_init+0x24>)
 8003420:	601a      	str	r2, [r3, #0]
	init_regs();
 8003422:	f7ff bfdd 	b.w	80033e0 <init_regs>
 8003426:	bf00      	nop
 8003428:	20000288 	.word	0x20000288
 800342c:	20000285 	.word	0x20000285
 8003430:	20000290 	.word	0x20000290

08003434 <set_reg>:

void set_reg(uint32_t reg, uint8_t val)
{
	if ((reg_data != NULL) && (reg<reg_len))
 8003434:	4b04      	ldr	r3, [pc, #16]	; (8003448 <set_reg+0x14>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	b123      	cbz	r3, 8003444 <set_reg+0x10>
 800343a:	4a04      	ldr	r2, [pc, #16]	; (800344c <set_reg+0x18>)
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	4282      	cmp	r2, r0
	{
		reg_data[reg] = val;
 8003440:	bf88      	it	hi
 8003442:	5419      	strbhi	r1, [r3, r0]
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	2000028c 	.word	0x2000028c
 800344c:	20000290 	.word	0x20000290

08003450 <get_reg>:
	}
}

uint8_t get_reg(uint32_t reg)
{
	if ((reg_data != NULL) && (reg<reg_len))
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <get_reg+0x18>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	b12b      	cbz	r3, 8003462 <get_reg+0x12>
 8003456:	4a05      	ldr	r2, [pc, #20]	; (800346c <get_reg+0x1c>)
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	4282      	cmp	r2, r0
 800345c:	d901      	bls.n	8003462 <get_reg+0x12>
	{
		return reg_data[reg];
 800345e:	5c18      	ldrb	r0, [r3, r0]
 8003460:	4770      	bx	lr
	}
	else
	{
		return 0;
 8003462:	2000      	movs	r0, #0
	}
}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	2000028c 	.word	0x2000028c
 800346c:	20000290 	.word	0x20000290

08003470 <get_reg_name>:
}


const char* get_reg_name(uint32_t reg)
{
	if (reg<reg_len)
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <get_reg_name+0x14>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4283      	cmp	r3, r0
		return regnames[reg];
 8003476:	bf86      	itte	hi
 8003478:	4b03      	ldrhi	r3, [pc, #12]	; (8003488 <get_reg_name+0x18>)
 800347a:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
	else
		return 0;
 800347e:	2000      	movls	r0, #0
}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000290 	.word	0x20000290
 8003488:	20000008 	.word	0x20000008

0800348c <USART1_IRQHandler>:
//END TODO
#endif

/* UART1 Interrupt Service Routine */
void USART1_IRQHandler(void)
{
 800348c:	b507      	push	{r0, r1, r2, lr}
	//Get the received byte and clear Frame Error IRQ flag
	//On Framing Error restart Timer to search for a start condition
	if (__HAL_UART_GET_FLAG(&huart1,UART_FLAG_FE))
 800348e:	480a      	ldr	r0, [pc, #40]	; (80034b8 <USART1_IRQHandler+0x2c>)
 8003490:	6803      	ldr	r3, [r0, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	0792      	lsls	r2, r2, #30
 8003496:	d509      	bpl.n	80034ac <USART1_IRQHandler+0x20>
	{
		__HAL_UART_CLEAR_FEFLAG(&huart1);
 8003498:	2200      	movs	r2, #0
 800349a:	9201      	str	r2, [sp, #4]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	9201      	str	r2, [sp, #4]
#ifdef USE_TIMER
		TIM_ITConfig(TIM1, TIM_IT_CC1, ENABLE);
#else
		start_flag = 1;
 80034a0:	2201      	movs	r2, #1
		__HAL_UART_CLEAR_FEFLAG(&huart1);
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	9b01      	ldr	r3, [sp, #4]
		start_flag = 1;
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <USART1_IRQHandler+0x30>)
 80034aa:	701a      	strb	r2, [r3, #0]
#endif
		HAL_UART_IRQHandler(&huart1);
		return;
	}
	HAL_UART_IRQHandler(&huart1);
 80034ac:	f7ff f880 	bl	80025b0 <HAL_UART_IRQHandler>
}
 80034b0:	b003      	add	sp, #12
 80034b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80034b6:	bf00      	nop
 80034b8:	200008f0 	.word	0x200008f0
 80034bc:	200002a0 	.word	0x200002a0

080034c0 <HAL_UART_RxCpltCallback>:
//UART IRQ Triggered by incoming characters
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	volatile uint8_t rx_byte;

	if (huart->Instance == USART1)
 80034c0:	6802      	ldr	r2, [r0, #0]
 80034c2:	4b2e      	ldr	r3, [pc, #184]	; (800357c <HAL_UART_RxCpltCallback+0xbc>)
{
 80034c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (huart->Instance == USART1)
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d130      	bne.n	800352c <HAL_UART_RxCpltCallback+0x6c>
    {
		rx_byte = buffer;
 80034ca:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <HAL_UART_RxCpltCallback+0xc0>)

		//Timer has signaled a start flag.
		//We can start to capture data.
		if (start_flag)
 80034cc:	4d2d      	ldr	r5, [pc, #180]	; (8003584 <HAL_UART_RxCpltCallback+0xc4>)
		rx_byte = buffer;
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4c2d      	ldr	r4, [pc, #180]	; (8003588 <HAL_UART_RxCpltCallback+0xc8>)
 80034d2:	f88d 3007 	strb.w	r3, [sp, #7]
		if (start_flag)
 80034d6:	782b      	ldrb	r3, [r5, #0]
 80034d8:	b363      	cbz	r3, 8003534 <HAL_UART_RxCpltCallback+0x74>
		{
			//On every incoming start packet we invert the LED to signal incoming data
			msg_cnt++;
 80034da:	4a2c      	ldr	r2, [pc, #176]	; (800358c <HAL_UART_RxCpltCallback+0xcc>)
 80034dc:	7813      	ldrb	r3, [r2, #0]
 80034de:	3301      	adds	r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	7013      	strb	r3, [r2, #0]
			if (msg_cnt == 44)
 80034e4:	7813      	ldrb	r3, [r2, #0]
 80034e6:	2b2c      	cmp	r3, #44	; 0x2c
 80034e8:	d10d      	bne.n	8003506 <HAL_UART_RxCpltCallback+0x46>
			{
				msg_cnt = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	7013      	strb	r3, [r2, #0]
				led_status =!led_status;
 80034ee:	4a28      	ldr	r2, [pc, #160]	; (8003590 <HAL_UART_RxCpltCallback+0xd0>)
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 80034f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
				led_status =!led_status;
 80034f4:	7813      	ldrb	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 80034f6:	4827      	ldr	r0, [pc, #156]	; (8003594 <HAL_UART_RxCpltCallback+0xd4>)
				led_status =!led_status;
 80034f8:	fab3 f383 	clz	r3, r3
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	7013      	strb	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_status);
 8003500:	7812      	ldrb	r2, [r2, #0]
 8003502:	f7fd fe03 	bl	800110c <HAL_GPIO_WritePin>
			}

			//Reset Variables
			dmx_error = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	4923      	ldr	r1, [pc, #140]	; (8003598 <HAL_UART_RxCpltCallback+0xd8>)
 800350a:	700b      	strb	r3, [r1, #0]
			byte_count = 0;
 800350c:	8023      	strh	r3, [r4, #0]
			start_flag = 0;
 800350e:	702b      	strb	r3, [r5, #0]

			/* first byte determines packet type */
			switch (rx_byte)
 8003510:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003514:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8003518:	b152      	cbz	r2, 8003530 <HAL_UART_RxCpltCallback+0x70>
 800351a:	2b17      	cmp	r3, #23
 800351c:	f04f 0201 	mov.w	r2, #1
 8003520:	d028      	beq.n	8003574 <HAL_UART_RxCpltCallback+0xb4>
			case 0x17:
				packet_type = TEST_PACKET;
				break;
			default:
				//Anything else we declare an error....
				dmx_error = 1;
 8003522:	700a      	strb	r2, [r1, #0]
		}
		//Increase Counter
		byte_count++;

		//Get more data
		HAL_UART_Receive_IT(&huart1, &buffer, 1);
 8003524:	4916      	ldr	r1, [pc, #88]	; (8003580 <HAL_UART_RxCpltCallback+0xc0>)
 8003526:	481d      	ldr	r0, [pc, #116]	; (800359c <HAL_UART_RxCpltCallback+0xdc>)
 8003528:	f7fe ffdb 	bl	80024e2 <HAL_UART_Receive_IT>
    }
}
 800352c:	b002      	add	sp, #8
 800352e:	bd70      	pop	{r4, r5, r6, pc}
				packet_type = DATA_PACKET;
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <HAL_UART_RxCpltCallback+0xe0>)
 8003532:	7013      	strb	r3, [r2, #0]
		if (packet_type == DATA_PACKET)
 8003534:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <HAL_UART_RxCpltCallback+0xe0>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b9b3      	cbnz	r3, 8003568 <HAL_UART_RxCpltCallback+0xa8>
			if (byte_count >= start_addr && byte_count < start_addr + get_reg_length())
 800353a:	4d1a      	ldr	r5, [pc, #104]	; (80035a4 <HAL_UART_RxCpltCallback+0xe4>)
 800353c:	8823      	ldrh	r3, [r4, #0]
 800353e:	682a      	ldr	r2, [r5, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	4293      	cmp	r3, r2
 8003544:	d310      	bcc.n	8003568 <HAL_UART_RxCpltCallback+0xa8>
 8003546:	8826      	ldrh	r6, [r4, #0]
 8003548:	f7ff ff44 	bl	80033d4 <get_reg_length>
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	b2b6      	uxth	r6, r6
 8003550:	4418      	add	r0, r3
 8003552:	4286      	cmp	r6, r0
 8003554:	d208      	bcs.n	8003568 <HAL_UART_RxCpltCallback+0xa8>
				set_reg(byte_count - start_addr-1, rx_byte);
 8003556:	8820      	ldrh	r0, [r4, #0]
 8003558:	682b      	ldr	r3, [r5, #0]
 800355a:	b280      	uxth	r0, r0
 800355c:	1ac0      	subs	r0, r0, r3
 800355e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003562:	3801      	subs	r0, #1
 8003564:	f7ff ff66 	bl	8003434 <set_reg>
		byte_count++;
 8003568:	8823      	ldrh	r3, [r4, #0]
		HAL_UART_Receive_IT(&huart1, &buffer, 1);
 800356a:	2201      	movs	r2, #1
		byte_count++;
 800356c:	3301      	adds	r3, #1
 800356e:	b29b      	uxth	r3, r3
 8003570:	8023      	strh	r3, [r4, #0]
 8003572:	e7d7      	b.n	8003524 <HAL_UART_RxCpltCallback+0x64>
				packet_type = TEST_PACKET;
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <HAL_UART_RxCpltCallback+0xe0>)
 8003576:	701a      	strb	r2, [r3, #0]
				break;
 8003578:	e7dc      	b.n	8003534 <HAL_UART_RxCpltCallback+0x74>
 800357a:	bf00      	nop
 800357c:	40013800 	.word	0x40013800
 8003580:	20000294 	.word	0x20000294
 8003584:	200002a0 	.word	0x200002a0
 8003588:	20000296 	.word	0x20000296
 800358c:	20000299 	.word	0x20000299
 8003590:	20000298 	.word	0x20000298
 8003594:	40011000 	.word	0x40011000
 8003598:	20000070 	.word	0x20000070
 800359c:	200008f0 	.word	0x200008f0
 80035a0:	2000029a 	.word	0x2000029a
 80035a4:	2000029c 	.word	0x2000029c

080035a8 <dmx512_setRx>:
}



void dmx512_setRx(void)
{
 80035a8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 80035aa:	4805      	ldr	r0, [pc, #20]	; (80035c0 <dmx512_setRx+0x18>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	2180      	movs	r1, #128	; 0x80
 80035b0:	f7fd fdac 	bl	800110c <HAL_GPIO_WritePin>
    HAL_HalfDuplex_EnableReceiver(&huart1);
}
 80035b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_HalfDuplex_EnableReceiver(&huart1);
 80035b8:	4802      	ldr	r0, [pc, #8]	; (80035c4 <dmx512_setRx+0x1c>)
 80035ba:	f7ff b8a1 	b.w	8002700 <HAL_HalfDuplex_EnableReceiver>
 80035be:	bf00      	nop
 80035c0:	40010c00 	.word	0x40010c00
 80035c4:	200008f0 	.word	0x200008f0

080035c8 <dmx512_rec_enable.part.0>:
{
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_SET);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
}

void dmx512_rec_enable(uint8_t on)
 80035c8:	b508      	push	{r3, lr}
{
	if (on)
	{
		//Determine Start Addr
		start_addr = get_addr();
 80035ca:	f7ff fef7 	bl	80033bc <get_addr>
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <dmx512_rec_enable.part.0+0x1c>)
 80035d0:	6018      	str	r0, [r3, #0]

		//Set Receiver to input
		dmx512_setRx();
 80035d2:	f7ff ffe9 	bl	80035a8 <dmx512_setRx>
		//Disable Timer
#ifdef USE_TIMER
		TIM_ITConfig(dmx512_config.tim, TIM_IT_CC1, DISABLE);
#endif
	}
}
 80035d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	HAL_UART_Receive_IT(&huart1, &buffer, 1);
 80035da:	2201      	movs	r2, #1
 80035dc:	4902      	ldr	r1, [pc, #8]	; (80035e8 <dmx512_rec_enable.part.0+0x20>)
 80035de:	4803      	ldr	r0, [pc, #12]	; (80035ec <dmx512_rec_enable.part.0+0x24>)
 80035e0:	f7fe bf7f 	b.w	80024e2 <HAL_UART_Receive_IT>
 80035e4:	2000029c 	.word	0x2000029c
 80035e8:	20000294 	.word	0x20000294
 80035ec:	200008f0 	.word	0x200008f0

080035f0 <dmx512_rec_init>:
{
 80035f0:	f7ff bfea 	b.w	80035c8 <dmx512_rec_enable.part.0>

080035f4 <EE_LL_Format>:
//##########################################################################################################
//##########################################################################################################


bool    EE_LL_Format(uint16_t startpage, uint16_t pages)
{
 80035f4:	b530      	push	{r4, r5, lr}
 80035f6:	4604      	mov	r4, r0
  uint32_t    error;
    HAL_FLASH_Unlock();
    FLASH_EraseInitTypeDef  flashErase;
    flashErase.NbPages=pages;
    flashErase.Banks = FLASH_BANK_1;
    flashErase.PageAddress = (ADDR_FLASH_PAGE_0|(_EEPROM_FLASH_PAGE_SIZE*startpage));
 80035f8:	02a4      	lsls	r4, r4, #10
{
 80035fa:	b087      	sub	sp, #28
    flashErase.PageAddress = (ADDR_FLASH_PAGE_0|(_EEPROM_FLASH_PAGE_SIZE*startpage));
 80035fc:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
{
 8003600:	460d      	mov	r5, r1
    HAL_FLASH_Unlock();
 8003602:	f7fd fb9d 	bl	8000d40 <HAL_FLASH_Unlock>
    flashErase.Banks = FLASH_BANK_1;
 8003606:	2301      	movs	r3, #1
    flashErase.PageAddress = (ADDR_FLASH_PAGE_0|(_EEPROM_FLASH_PAGE_SIZE*startpage));
 8003608:	9404      	str	r4, [sp, #16]
    flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 800360a:	2400      	movs	r4, #0
    if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 800360c:	a901      	add	r1, sp, #4
 800360e:	a802      	add	r0, sp, #8
    flashErase.NbPages=pages;
 8003610:	9505      	str	r5, [sp, #20]
    flashErase.Banks = FLASH_BANK_1;
 8003612:	9303      	str	r3, [sp, #12]
    flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8003614:	9402      	str	r4, [sp, #8]
    if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 8003616:	f7fd fc43 	bl	8000ea0 <HAL_FLASHEx_Erase>
 800361a:	b938      	cbnz	r0, 800362c <EE_LL_Format+0x38>
    {
        HAL_FLASH_Lock();
 800361c:	f7fd fba2 	bl	8000d64 <HAL_FLASH_Lock>
        if(error != 0xFFFFFFFF)
 8003620:	9801      	ldr	r0, [sp, #4]
 8003622:	1c43      	adds	r3, r0, #1
 8003624:	4258      	negs	r0, r3
 8003626:	4158      	adcs	r0, r3
        else
            return true;
    }
    HAL_FLASH_Lock();
    return false;
}
 8003628:	b007      	add	sp, #28
 800362a:	bd30      	pop	{r4, r5, pc}
    HAL_FLASH_Lock();
 800362c:	f7fd fb9a 	bl	8000d64 <HAL_FLASH_Lock>
    return false;
 8003630:	4620      	mov	r0, r4
 8003632:	e7f9      	b.n	8003628 <EE_LL_Format+0x34>

08003634 <EE_Format>:
//##########################################################################################################
//##########################################################################################################

bool	EE_Format()
{
  return EE_LL_Format(_EEPROM_USE_FLASH_PAGE,1);
 8003634:	2101      	movs	r1, #1
 8003636:	207f      	movs	r0, #127	; 0x7f
 8003638:	f7ff bfdc 	b.w	80035f4 <EE_LL_Format>

0800363c <EE_Reads>:
}

//##########################################################################################################
bool EE_Reads(uint16_t VirtualAddress,uint16_t HowMuchToRead,uint32_t* Data)
{
	if((VirtualAddress+HowMuchToRead) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 800363c:	4401      	add	r1, r0
 800363e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003642:	dd0b      	ble.n	800365c <EE_Reads+0x20>
		return false;
 8003644:	2000      	movs	r0, #0
	{
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
		Data++;
	}
	return true;
}
 8003646:	4770      	bx	lr
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8003648:	0083      	lsls	r3, r0, #2
 800364a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800364e:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8003652:	681b      	ldr	r3, [r3, #0]
	for(uint16_t	i=VirtualAddress ; i<HowMuchToRead+VirtualAddress ; i++)
 8003654:	3001      	adds	r0, #1
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8003656:	f842 3b04 	str.w	r3, [r2], #4
	for(uint16_t	i=VirtualAddress ; i<HowMuchToRead+VirtualAddress ; i++)
 800365a:	b280      	uxth	r0, r0
 800365c:	4281      	cmp	r1, r0
 800365e:	dcf3      	bgt.n	8003648 <EE_Reads+0xc>
	return true;
 8003660:	2001      	movs	r0, #1
 8003662:	4770      	bx	lr

08003664 <EE_Writes>:

//##########################################################################################################
bool 	EE_Writes(uint16_t VirtualAddress,uint16_t HowMuchToWrite,uint32_t* Data)
{
	if((VirtualAddress+HowMuchToWrite) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 8003664:	4401      	add	r1, r0
 8003666:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 800366a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366c:	4616      	mov	r6, r2
	if((VirtualAddress+HowMuchToWrite) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 800366e:	dd02      	ble.n	8003676 <EE_Writes+0x12>
	for(uint16_t	i=0 ; i<(_EEPROM_FLASH_PAGE_SIZE/4); i++)
	{
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(i*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)*Data)!=HAL_OK)
		{
			HAL_FLASH_Lock();
			return false;
 8003670:	2400      	movs	r4, #0
		}
		Data++;
	}
	HAL_FLASH_Lock();
	return true;
}
 8003672:	4620      	mov	r0, r4
 8003674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(EE_Format()==false)
 8003676:	f7ff ffdd 	bl	8003634 <EE_Format>
 800367a:	4604      	mov	r4, r0
 800367c:	2800      	cmp	r0, #0
 800367e:	d0f7      	beq.n	8003670 <EE_Writes+0xc>
	HAL_FLASH_Unlock();
 8003680:	f7fd fb5e 	bl	8000d40 <HAL_FLASH_Unlock>
 8003684:	4d09      	ldr	r5, [pc, #36]	; (80036ac <EE_Writes+0x48>)
	for(uint16_t	i=0 ; i<(_EEPROM_FLASH_PAGE_SIZE/4); i++)
 8003686:	4f0a      	ldr	r7, [pc, #40]	; (80036b0 <EE_Writes+0x4c>)
 8003688:	3e04      	subs	r6, #4
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(i*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)*Data)!=HAL_OK)
 800368a:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800368e:	2300      	movs	r3, #0
 8003690:	4629      	mov	r1, r5
 8003692:	2002      	movs	r0, #2
 8003694:	f7fd fb9a 	bl	8000dcc <HAL_FLASH_Program>
 8003698:	b110      	cbz	r0, 80036a0 <EE_Writes+0x3c>
			HAL_FLASH_Lock();
 800369a:	f7fd fb63 	bl	8000d64 <HAL_FLASH_Lock>
 800369e:	e7e7      	b.n	8003670 <EE_Writes+0xc>
 80036a0:	3504      	adds	r5, #4
	for(uint16_t	i=0 ; i<(_EEPROM_FLASH_PAGE_SIZE/4); i++)
 80036a2:	42bd      	cmp	r5, r7
 80036a4:	d1f1      	bne.n	800368a <EE_Writes+0x26>
	HAL_FLASH_Lock();
 80036a6:	f7fd fb5d 	bl	8000d64 <HAL_FLASH_Lock>
	return true;
 80036aa:	e7e2      	b.n	8003672 <EE_Writes+0xe>
 80036ac:	0801fc00 	.word	0x0801fc00
 80036b0:	08020000 	.word	0x08020000

080036b4 <get_mode_from_pins>:
#include <stm32f103xb.h>
#include <stm32f1xx.h>
#include <stm32f1xx_hal_gpio.h>

uint8_t get_mode_from_pins(void)
{
 80036b4:	b510      	push	{r4, lr}
	uint8_t mode = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_0_GPIO_Port, MODE_0_Pin))
 80036b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036ba:	4808      	ldr	r0, [pc, #32]	; (80036dc <get_mode_from_pins+0x28>)
 80036bc:	f7fd fd20 	bl	8001100 <HAL_GPIO_ReadPin>
	uint8_t mode = 0;
 80036c0:	fab0 f480 	clz	r4, r0
		mode = mode | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_1_GPIO_Port, MODE_1_Pin))
 80036c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036c8:	4804      	ldr	r0, [pc, #16]	; (80036dc <get_mode_from_pins+0x28>)
	uint8_t mode = 0;
 80036ca:	0964      	lsrs	r4, r4, #5
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_1_GPIO_Port, MODE_1_Pin))
 80036cc:	f7fd fd18 	bl	8001100 <HAL_GPIO_ReadPin>
 80036d0:	b908      	cbnz	r0, 80036d6 <get_mode_from_pins+0x22>
		mode = mode | 0x02;
 80036d2:	f044 0402 	orr.w	r4, r4, #2
	return mode;
}
 80036d6:	4620      	mov	r0, r4
 80036d8:	bd10      	pop	{r4, pc}
 80036da:	bf00      	nop
 80036dc:	40011000 	.word	0x40011000

080036e0 <get_addr_from_pins>:

uint8_t get_addr_from_pins(void)
{
 80036e0:	b510      	push	{r4, lr}
	uint8_t addr = 0;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_0_GPIO_Port, ADDR_0_Pin))
 80036e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036e6:	481f      	ldr	r0, [pc, #124]	; (8003764 <get_addr_from_pins+0x84>)
 80036e8:	f7fd fd0a 	bl	8001100 <HAL_GPIO_ReadPin>
	uint8_t addr = 0;
 80036ec:	fab0 f480 	clz	r4, r0
		addr = addr | 0x01;
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_1_GPIO_Port, ADDR_1_Pin))
 80036f0:	2108      	movs	r1, #8
 80036f2:	481d      	ldr	r0, [pc, #116]	; (8003768 <get_addr_from_pins+0x88>)
	uint8_t addr = 0;
 80036f4:	0964      	lsrs	r4, r4, #5
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_1_GPIO_Port, ADDR_1_Pin))
 80036f6:	f7fd fd03 	bl	8001100 <HAL_GPIO_ReadPin>
 80036fa:	b908      	cbnz	r0, 8003700 <get_addr_from_pins+0x20>
		addr = addr | 0x02;
 80036fc:	f044 0402 	orr.w	r4, r4, #2
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_2_GPIO_Port, ADDR_2_Pin))
 8003700:	2110      	movs	r1, #16
 8003702:	4819      	ldr	r0, [pc, #100]	; (8003768 <get_addr_from_pins+0x88>)
 8003704:	f7fd fcfc 	bl	8001100 <HAL_GPIO_ReadPin>
 8003708:	b908      	cbnz	r0, 800370e <get_addr_from_pins+0x2e>
		addr = addr | 0x04;
 800370a:	f044 0404 	orr.w	r4, r4, #4
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_3_GPIO_Port, ADDR_3_Pin))
 800370e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003712:	4815      	ldr	r0, [pc, #84]	; (8003768 <get_addr_from_pins+0x88>)
 8003714:	f7fd fcf4 	bl	8001100 <HAL_GPIO_ReadPin>
 8003718:	b908      	cbnz	r0, 800371e <get_addr_from_pins+0x3e>
		addr = addr | 0x08;
 800371a:	f044 0408 	orr.w	r4, r4, #8
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_4_GPIO_Port, ADDR_4_Pin))
 800371e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003722:	4811      	ldr	r0, [pc, #68]	; (8003768 <get_addr_from_pins+0x88>)
 8003724:	f7fd fcec 	bl	8001100 <HAL_GPIO_ReadPin>
 8003728:	b908      	cbnz	r0, 800372e <get_addr_from_pins+0x4e>
		addr = addr | 0x10;
 800372a:	f044 0410 	orr.w	r4, r4, #16
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_5_GPIO_Port, ADDR_5_Pin))
 800372e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003732:	480d      	ldr	r0, [pc, #52]	; (8003768 <get_addr_from_pins+0x88>)
 8003734:	f7fd fce4 	bl	8001100 <HAL_GPIO_ReadPin>
 8003738:	b908      	cbnz	r0, 800373e <get_addr_from_pins+0x5e>
		addr = addr | 0x20;
 800373a:	f044 0420 	orr.w	r4, r4, #32
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_6_GPIO_Port, ADDR_6_Pin))
 800373e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003742:	4809      	ldr	r0, [pc, #36]	; (8003768 <get_addr_from_pins+0x88>)
 8003744:	f7fd fcdc 	bl	8001100 <HAL_GPIO_ReadPin>
 8003748:	b908      	cbnz	r0, 800374e <get_addr_from_pins+0x6e>
		addr = addr | 0x40;
 800374a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ADDR_7_GPIO_Port, ADDR_7_Pin))
 800374e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003752:	4805      	ldr	r0, [pc, #20]	; (8003768 <get_addr_from_pins+0x88>)
 8003754:	f7fd fcd4 	bl	8001100 <HAL_GPIO_ReadPin>
 8003758:	b908      	cbnz	r0, 800375e <get_addr_from_pins+0x7e>
		addr = addr | 0x80;
 800375a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	return addr;
}
 800375e:	4620      	mov	r0, r4
 8003760:	bd10      	pop	{r4, pc}
 8003762:	bf00      	nop
 8003764:	40010800 	.word	0x40010800
 8003768:	40010c00 	.word	0x40010c00

0800376c <check_button>:

uint8_t check_button(void)
{
 800376c:	b508      	push	{r3, lr}
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin))
 800376e:	2120      	movs	r1, #32
 8003770:	4803      	ldr	r0, [pc, #12]	; (8003780 <check_button+0x14>)
 8003772:	f7fd fcc5 	bl	8001100 <HAL_GPIO_ReadPin>
		return 1;

	return 0;
}
 8003776:	fab0 f080 	clz	r0, r0
 800377a:	0940      	lsrs	r0, r0, #5
 800377c:	bd08      	pop	{r3, pc}
 800377e:	bf00      	nop
 8003780:	40010800 	.word	0x40010800

08003784 <scale_value>:
	reg_shadow[MAX_BRIGHTNESS] = 255;
	update_pwm_lights(1);
}

uint16_t scale_value( uint8_t val,int16_t offset, int16_t gain, int16_t gamma)
{
 8003784:	b570      	push	{r4, r5, r6, lr}
	int32_t res = 0;
	//1) Scale input between 0 and max
	res = ((uint32_t)val * (uint32_t) MAX_PWM)/(uint32_t)255;
 8003786:	f240 4434 	movw	r4, #1076	; 0x434
 800378a:	23ff      	movs	r3, #255	; 0xff
 800378c:	4360      	muls	r0, r4
 800378e:	fbb0 f3f3 	udiv	r3, r0, r3
{
 8003792:	4616      	mov	r6, r2
	res = (res * (uint32_t)brightness_scale) / (uint32_t) MAX_PWM;
 8003794:	4a0e      	ldr	r2, [pc, #56]	; (80037d0 <scale_value+0x4c>)
 8003796:	8810      	ldrh	r0, [r2, #0]
 8003798:	4358      	muls	r0, r3
 800379a:	fbb0 f0f4 	udiv	r0, r0, r4

	//Subtract offset
	res = res - offset;

	//Apply Gain
	res = (int16_t) ((float)res * ((float)gain)/100);
 800379e:	1a40      	subs	r0, r0, r1
 80037a0:	f7fc fda2 	bl	80002e8 <__aeabi_i2f>
 80037a4:	4605      	mov	r5, r0
 80037a6:	4630      	mov	r0, r6
 80037a8:	f7fc fd9e 	bl	80002e8 <__aeabi_i2f>
 80037ac:	4601      	mov	r1, r0
 80037ae:	4628      	mov	r0, r5
 80037b0:	f7fc fdee 	bl	8000390 <__aeabi_fmul>
 80037b4:	4907      	ldr	r1, [pc, #28]	; (80037d4 <scale_value+0x50>)
 80037b6:	f7fc fe9f 	bl	80004f8 <__aeabi_fdiv>
 80037ba:	f7fc ff39 	bl	8000630 <__aeabi_f2iz>
 80037be:	b200      	sxth	r0, r0
 80037c0:	42a0      	cmp	r0, r4
 80037c2:	bfa8      	it	ge
 80037c4:	4620      	movge	r0, r4
	//Limit output to valid range
	if (res<0)
		res = 0;
	if (res > MAX_PWM)
		res = MAX_PWM;
	return res;
 80037c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80037ca:	b280      	uxth	r0, r0
 80037cc:	bd70      	pop	{r4, r5, r6, pc}
 80037ce:	bf00      	nop
 80037d0:	200002a2 	.word	0x200002a2
 80037d4:	42c80000 	.word	0x42c80000

080037d8 <update_pwm_lights>:

//Check what has changed and update Lights
//We only update parameters that have changed otherwise we might have waveform-artifacts...
void update_pwm_lights(uint8_t force)
{
 80037d8:	b570      	push	{r4, r5, r6, lr}
	//Check if global brightness has changed and scale value
	if ((reg_shadow[MAX_BRIGHTNESS])!= get_reg(MAX_BRIGHTNESS) || force)
 80037da:	4ca3      	ldr	r4, [pc, #652]	; (8003a68 <update_pwm_lights+0x290>)
{
 80037dc:	4605      	mov	r5, r0
	if ((reg_shadow[MAX_BRIGHTNESS])!= get_reg(MAX_BRIGHTNESS) || force)
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	2000      	movs	r0, #0
 80037e2:	781e      	ldrb	r6, [r3, #0]
 80037e4:	f7ff fe34 	bl	8003450 <get_reg>
 80037e8:	4286      	cmp	r6, r0
 80037ea:	d100      	bne.n	80037ee <update_pwm_lights+0x16>
 80037ec:	b185      	cbz	r5, 8003810 <update_pwm_lights+0x38>
	{
		brightness_scale = ((uint32_t)get_reg(MAX_BRIGHTNESS) * (uint32_t) MAX_PWM)/(uint32_t)255;
 80037ee:	2000      	movs	r0, #0
 80037f0:	f7ff fe2e 	bl	8003450 <get_reg>
 80037f4:	f240 4334 	movw	r3, #1076	; 0x434
 80037f8:	4358      	muls	r0, r3
 80037fa:	23ff      	movs	r3, #255	; 0xff
 80037fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8003800:	4b9a      	ldr	r3, [pc, #616]	; (8003a6c <update_pwm_lights+0x294>)
		//After a brightness update we need to update all the over PWM outputs
		force = 1;
		reg_shadow[MAX_BRIGHTNESS] = get_reg(MAX_BRIGHTNESS);
 8003802:	6825      	ldr	r5, [r4, #0]
		brightness_scale = ((uint32_t)get_reg(MAX_BRIGHTNESS) * (uint32_t) MAX_PWM)/(uint32_t)255;
 8003804:	8018      	strh	r0, [r3, #0]
		reg_shadow[MAX_BRIGHTNESS] = get_reg(MAX_BRIGHTNESS);
 8003806:	2000      	movs	r0, #0
 8003808:	f7ff fe22 	bl	8003450 <get_reg>
 800380c:	7028      	strb	r0, [r5, #0]
		force = 1;
 800380e:	2501      	movs	r5, #1
	}

	//Update PWM Values if needed
	if ((reg_shadow[CH1_RED])!= get_reg(CH1_RED) || force)
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	2001      	movs	r0, #1
 8003814:	785e      	ldrb	r6, [r3, #1]
 8003816:	f7ff fe1b 	bl	8003450 <get_reg>
 800381a:	4286      	cmp	r6, r0
 800381c:	d100      	bne.n	8003820 <update_pwm_lights+0x48>
 800381e:	b1ad      	cbz	r5, 800384c <update_pwm_lights+0x74>
	{
		configPWM(PWM_CH1,CH_RED,scale_value(get_reg(CH1_RED),settings.offset_red,settings.gain_red,settings.gamma_red));
 8003820:	2001      	movs	r0, #1
 8003822:	f7ff fe15 	bl	8003450 <get_reg>
 8003826:	4992      	ldr	r1, [pc, #584]	; (8003a70 <update_pwm_lights+0x298>)
 8003828:	f9b1 303c 	ldrsh.w	r3, [r1, #60]	; 0x3c
 800382c:	f9b1 203a 	ldrsh.w	r2, [r1, #58]	; 0x3a
 8003830:	f9b1 1038 	ldrsh.w	r1, [r1, #56]	; 0x38
 8003834:	f7ff ffa6 	bl	8003784 <scale_value>
 8003838:	2100      	movs	r1, #0
 800383a:	4602      	mov	r2, r0
 800383c:	4608      	mov	r0, r1
 800383e:	f000 fbc5 	bl	8003fcc <configPWM>
		reg_shadow[CH1_RED] = get_reg(CH1_RED);
 8003842:	2001      	movs	r0, #1
 8003844:	6826      	ldr	r6, [r4, #0]
 8003846:	f7ff fe03 	bl	8003450 <get_reg>
 800384a:	7070      	strb	r0, [r6, #1]
	}

	if ((reg_shadow[CH1_GREEN])!= get_reg(CH1_GREEN) || force)
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	2002      	movs	r0, #2
 8003850:	789e      	ldrb	r6, [r3, #2]
 8003852:	f7ff fdfd 	bl	8003450 <get_reg>
 8003856:	4286      	cmp	r6, r0
 8003858:	d100      	bne.n	800385c <update_pwm_lights+0x84>
 800385a:	b1ad      	cbz	r5, 8003888 <update_pwm_lights+0xb0>
	{
		configPWM(PWM_CH1,CH_GREEN,scale_value(get_reg(CH1_GREEN),settings.offset_green,settings.gain_green,settings.gamma_green));
 800385c:	2002      	movs	r0, #2
 800385e:	f7ff fdf7 	bl	8003450 <get_reg>
 8003862:	4983      	ldr	r1, [pc, #524]	; (8003a70 <update_pwm_lights+0x298>)
 8003864:	f9b1 3042 	ldrsh.w	r3, [r1, #66]	; 0x42
 8003868:	f9b1 2040 	ldrsh.w	r2, [r1, #64]	; 0x40
 800386c:	f9b1 103e 	ldrsh.w	r1, [r1, #62]	; 0x3e
 8003870:	f7ff ff88 	bl	8003784 <scale_value>
 8003874:	2101      	movs	r1, #1
 8003876:	4602      	mov	r2, r0
 8003878:	2000      	movs	r0, #0
 800387a:	f000 fba7 	bl	8003fcc <configPWM>
		reg_shadow[CH1_GREEN] = get_reg(CH1_GREEN);
 800387e:	2002      	movs	r0, #2
 8003880:	6826      	ldr	r6, [r4, #0]
 8003882:	f7ff fde5 	bl	8003450 <get_reg>
 8003886:	70b0      	strb	r0, [r6, #2]
	}

	if ((reg_shadow[CH1_BLUE])!= get_reg(CH1_BLUE) || force)
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	2003      	movs	r0, #3
 800388c:	78de      	ldrb	r6, [r3, #3]
 800388e:	f7ff fddf 	bl	8003450 <get_reg>
 8003892:	4286      	cmp	r6, r0
 8003894:	d100      	bne.n	8003898 <update_pwm_lights+0xc0>
 8003896:	b1ad      	cbz	r5, 80038c4 <update_pwm_lights+0xec>
	{
		configPWM(PWM_CH1,CH_BLUE,scale_value(get_reg(CH1_BLUE),settings.offset_blue,settings.gain_blue,settings.gamma_blue));
 8003898:	2003      	movs	r0, #3
 800389a:	f7ff fdd9 	bl	8003450 <get_reg>
 800389e:	4974      	ldr	r1, [pc, #464]	; (8003a70 <update_pwm_lights+0x298>)
 80038a0:	f9b1 3048 	ldrsh.w	r3, [r1, #72]	; 0x48
 80038a4:	f9b1 2046 	ldrsh.w	r2, [r1, #70]	; 0x46
 80038a8:	f9b1 1044 	ldrsh.w	r1, [r1, #68]	; 0x44
 80038ac:	f7ff ff6a 	bl	8003784 <scale_value>
 80038b0:	2102      	movs	r1, #2
 80038b2:	4602      	mov	r2, r0
 80038b4:	2000      	movs	r0, #0
 80038b6:	f000 fb89 	bl	8003fcc <configPWM>
		reg_shadow[CH1_BLUE] = get_reg(CH1_BLUE);
 80038ba:	2003      	movs	r0, #3
 80038bc:	6826      	ldr	r6, [r4, #0]
 80038be:	f7ff fdc7 	bl	8003450 <get_reg>
 80038c2:	70f0      	strb	r0, [r6, #3]
	}

	if ((reg_shadow[CH2_RED])!= get_reg(CH2_RED) || force)
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	2004      	movs	r0, #4
 80038c8:	791e      	ldrb	r6, [r3, #4]
 80038ca:	f7ff fdc1 	bl	8003450 <get_reg>
 80038ce:	4286      	cmp	r6, r0
 80038d0:	d100      	bne.n	80038d4 <update_pwm_lights+0xfc>
 80038d2:	b1ad      	cbz	r5, 8003900 <update_pwm_lights+0x128>
	{
		configPWM(PWM_CH2,CH_RED,scale_value(get_reg(CH2_RED),settings.offset_red,settings.gain_red,settings.gamma_red));
 80038d4:	2004      	movs	r0, #4
 80038d6:	f7ff fdbb 	bl	8003450 <get_reg>
 80038da:	4965      	ldr	r1, [pc, #404]	; (8003a70 <update_pwm_lights+0x298>)
 80038dc:	f9b1 303c 	ldrsh.w	r3, [r1, #60]	; 0x3c
 80038e0:	f9b1 203a 	ldrsh.w	r2, [r1, #58]	; 0x3a
 80038e4:	f9b1 1038 	ldrsh.w	r1, [r1, #56]	; 0x38
 80038e8:	f7ff ff4c 	bl	8003784 <scale_value>
 80038ec:	2100      	movs	r1, #0
 80038ee:	4602      	mov	r2, r0
 80038f0:	2001      	movs	r0, #1
 80038f2:	f000 fb6b 	bl	8003fcc <configPWM>
		reg_shadow[CH2_RED] = get_reg(CH2_RED);
 80038f6:	2004      	movs	r0, #4
 80038f8:	6826      	ldr	r6, [r4, #0]
 80038fa:	f7ff fda9 	bl	8003450 <get_reg>
 80038fe:	7130      	strb	r0, [r6, #4]
	}

	if ((reg_shadow[CH2_GREEN])!= get_reg(CH2_GREEN) || force)
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	2005      	movs	r0, #5
 8003904:	795e      	ldrb	r6, [r3, #5]
 8003906:	f7ff fda3 	bl	8003450 <get_reg>
 800390a:	4286      	cmp	r6, r0
 800390c:	d100      	bne.n	8003910 <update_pwm_lights+0x138>
 800390e:	b1ad      	cbz	r5, 800393c <update_pwm_lights+0x164>
	{
		configPWM(PWM_CH2,CH_GREEN,scale_value(get_reg(CH2_GREEN),settings.offset_green,settings.gain_green,settings.gamma_green));
 8003910:	2005      	movs	r0, #5
 8003912:	f7ff fd9d 	bl	8003450 <get_reg>
 8003916:	4956      	ldr	r1, [pc, #344]	; (8003a70 <update_pwm_lights+0x298>)
 8003918:	f9b1 3042 	ldrsh.w	r3, [r1, #66]	; 0x42
 800391c:	f9b1 2040 	ldrsh.w	r2, [r1, #64]	; 0x40
 8003920:	f9b1 103e 	ldrsh.w	r1, [r1, #62]	; 0x3e
 8003924:	f7ff ff2e 	bl	8003784 <scale_value>
 8003928:	2101      	movs	r1, #1
 800392a:	4602      	mov	r2, r0
 800392c:	4608      	mov	r0, r1
 800392e:	f000 fb4d 	bl	8003fcc <configPWM>
		reg_shadow[CH2_GREEN] = get_reg(CH2_GREEN);
 8003932:	2005      	movs	r0, #5
 8003934:	6826      	ldr	r6, [r4, #0]
 8003936:	f7ff fd8b 	bl	8003450 <get_reg>
 800393a:	7170      	strb	r0, [r6, #5]
	}

	if ((reg_shadow[CH2_BLUE])!= get_reg(CH2_BLUE) || force)
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	2006      	movs	r0, #6
 8003940:	799e      	ldrb	r6, [r3, #6]
 8003942:	f7ff fd85 	bl	8003450 <get_reg>
 8003946:	4286      	cmp	r6, r0
 8003948:	d100      	bne.n	800394c <update_pwm_lights+0x174>
 800394a:	b1ad      	cbz	r5, 8003978 <update_pwm_lights+0x1a0>
	{
		configPWM(PWM_CH2,CH_BLUE,scale_value(get_reg(CH2_BLUE),settings.offset_blue,settings.gain_blue,settings.gamma_blue));
 800394c:	2006      	movs	r0, #6
 800394e:	f7ff fd7f 	bl	8003450 <get_reg>
 8003952:	4947      	ldr	r1, [pc, #284]	; (8003a70 <update_pwm_lights+0x298>)
 8003954:	f9b1 3048 	ldrsh.w	r3, [r1, #72]	; 0x48
 8003958:	f9b1 2046 	ldrsh.w	r2, [r1, #70]	; 0x46
 800395c:	f9b1 1044 	ldrsh.w	r1, [r1, #68]	; 0x44
 8003960:	f7ff ff10 	bl	8003784 <scale_value>
 8003964:	2102      	movs	r1, #2
 8003966:	4602      	mov	r2, r0
 8003968:	2001      	movs	r0, #1
 800396a:	f000 fb2f 	bl	8003fcc <configPWM>
		reg_shadow[CH2_BLUE] = get_reg(CH2_BLUE);
 800396e:	2006      	movs	r0, #6
 8003970:	6826      	ldr	r6, [r4, #0]
 8003972:	f7ff fd6d 	bl	8003450 <get_reg>
 8003976:	71b0      	strb	r0, [r6, #6]
	}

	if ((reg_shadow[CH3_RED])!= get_reg(CH3_RED) || force)
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	2007      	movs	r0, #7
 800397c:	79de      	ldrb	r6, [r3, #7]
 800397e:	f7ff fd67 	bl	8003450 <get_reg>
 8003982:	4286      	cmp	r6, r0
 8003984:	d100      	bne.n	8003988 <update_pwm_lights+0x1b0>
 8003986:	b1ad      	cbz	r5, 80039b4 <update_pwm_lights+0x1dc>
	{
		configPWM(PWM_CH3,CH_RED,scale_value(get_reg(CH3_RED),settings.offset_red,settings.gain_red,settings.gamma_red));
 8003988:	2007      	movs	r0, #7
 800398a:	f7ff fd61 	bl	8003450 <get_reg>
 800398e:	4938      	ldr	r1, [pc, #224]	; (8003a70 <update_pwm_lights+0x298>)
 8003990:	f9b1 303c 	ldrsh.w	r3, [r1, #60]	; 0x3c
 8003994:	f9b1 203a 	ldrsh.w	r2, [r1, #58]	; 0x3a
 8003998:	f9b1 1038 	ldrsh.w	r1, [r1, #56]	; 0x38
 800399c:	f7ff fef2 	bl	8003784 <scale_value>
 80039a0:	2100      	movs	r1, #0
 80039a2:	4602      	mov	r2, r0
 80039a4:	2002      	movs	r0, #2
 80039a6:	f000 fb11 	bl	8003fcc <configPWM>
		reg_shadow[CH3_RED] = get_reg(CH3_RED);
 80039aa:	2007      	movs	r0, #7
 80039ac:	6826      	ldr	r6, [r4, #0]
 80039ae:	f7ff fd4f 	bl	8003450 <get_reg>
 80039b2:	71f0      	strb	r0, [r6, #7]
	}

	if ((reg_shadow[CH3_GREEN])!= get_reg(CH3_GREEN) || force)
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	2008      	movs	r0, #8
 80039b8:	7a1e      	ldrb	r6, [r3, #8]
 80039ba:	f7ff fd49 	bl	8003450 <get_reg>
 80039be:	4286      	cmp	r6, r0
 80039c0:	d100      	bne.n	80039c4 <update_pwm_lights+0x1ec>
 80039c2:	b1ad      	cbz	r5, 80039f0 <update_pwm_lights+0x218>
	{
		configPWM(PWM_CH3,CH_GREEN,scale_value(get_reg(CH3_GREEN),settings.offset_green,settings.gain_green,settings.gamma_green));
 80039c4:	2008      	movs	r0, #8
 80039c6:	f7ff fd43 	bl	8003450 <get_reg>
 80039ca:	4929      	ldr	r1, [pc, #164]	; (8003a70 <update_pwm_lights+0x298>)
 80039cc:	f9b1 3042 	ldrsh.w	r3, [r1, #66]	; 0x42
 80039d0:	f9b1 2040 	ldrsh.w	r2, [r1, #64]	; 0x40
 80039d4:	f9b1 103e 	ldrsh.w	r1, [r1, #62]	; 0x3e
 80039d8:	f7ff fed4 	bl	8003784 <scale_value>
 80039dc:	2101      	movs	r1, #1
 80039de:	4602      	mov	r2, r0
 80039e0:	2002      	movs	r0, #2
 80039e2:	f000 faf3 	bl	8003fcc <configPWM>
		reg_shadow[CH3_GREEN] = get_reg(CH3_GREEN);
 80039e6:	2008      	movs	r0, #8
 80039e8:	6826      	ldr	r6, [r4, #0]
 80039ea:	f7ff fd31 	bl	8003450 <get_reg>
 80039ee:	7230      	strb	r0, [r6, #8]
	}

	if ((reg_shadow[CH3_BLUE])!= get_reg(CH3_BLUE) || force)
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	2009      	movs	r0, #9
 80039f4:	7a5e      	ldrb	r6, [r3, #9]
 80039f6:	f7ff fd2b 	bl	8003450 <get_reg>
 80039fa:	4286      	cmp	r6, r0
 80039fc:	d100      	bne.n	8003a00 <update_pwm_lights+0x228>
 80039fe:	b1ad      	cbz	r5, 8003a2c <update_pwm_lights+0x254>
	{
		configPWM(PWM_CH3,CH_BLUE,scale_value(get_reg(CH3_BLUE),settings.offset_blue,settings.gain_blue,settings.gamma_blue));
 8003a00:	2009      	movs	r0, #9
 8003a02:	f7ff fd25 	bl	8003450 <get_reg>
 8003a06:	491a      	ldr	r1, [pc, #104]	; (8003a70 <update_pwm_lights+0x298>)
 8003a08:	f9b1 3048 	ldrsh.w	r3, [r1, #72]	; 0x48
 8003a0c:	f9b1 2046 	ldrsh.w	r2, [r1, #70]	; 0x46
 8003a10:	f9b1 1044 	ldrsh.w	r1, [r1, #68]	; 0x44
 8003a14:	f7ff feb6 	bl	8003784 <scale_value>
 8003a18:	2102      	movs	r1, #2
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	f000 fad5 	bl	8003fcc <configPWM>
		reg_shadow[CH3_BLUE] = get_reg(CH3_BLUE);
 8003a22:	2009      	movs	r0, #9
 8003a24:	6826      	ldr	r6, [r4, #0]
 8003a26:	f7ff fd13 	bl	8003450 <get_reg>
 8003a2a:	7270      	strb	r0, [r6, #9]
	}

	if ((reg_shadow[CH3_WHITE])!= get_reg(CH3_WHITE) || force)
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	200a      	movs	r0, #10
 8003a30:	7a9e      	ldrb	r6, [r3, #10]
 8003a32:	f7ff fd0d 	bl	8003450 <get_reg>
 8003a36:	4286      	cmp	r6, r0
 8003a38:	d100      	bne.n	8003a3c <update_pwm_lights+0x264>
 8003a3a:	b18d      	cbz	r5, 8003a60 <update_pwm_lights+0x288>
	{
		configPWM(PWM_CH3,CH_WHITE,scale_value(get_reg(CH3_WHITE),0,100,220));  //TBD, no settings?
 8003a3c:	200a      	movs	r0, #10
 8003a3e:	f7ff fd07 	bl	8003450 <get_reg>
 8003a42:	23dc      	movs	r3, #220	; 0xdc
 8003a44:	2264      	movs	r2, #100	; 0x64
 8003a46:	2100      	movs	r1, #0
 8003a48:	f7ff fe9c 	bl	8003784 <scale_value>
 8003a4c:	2103      	movs	r1, #3
 8003a4e:	4602      	mov	r2, r0
 8003a50:	2002      	movs	r0, #2
 8003a52:	f000 fabb 	bl	8003fcc <configPWM>
		reg_shadow[CH3_WHITE] = get_reg(CH3_WHITE);
 8003a56:	200a      	movs	r0, #10
 8003a58:	6824      	ldr	r4, [r4, #0]
 8003a5a:	f7ff fcf9 	bl	8003450 <get_reg>
 8003a5e:	72a0      	strb	r0, [r4, #10]
	//Deal with LED Strip Registers
	if (DMX_MODE2 == get_mode())
	{

	}
}
 8003a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (DMX_MODE2 == get_mode())
 8003a64:	f7ff bcb0 	b.w	80033c8 <get_mode>
 8003a68:	200002a4 	.word	0x200002a4
 8003a6c:	200002a2 	.word	0x200002a2
 8003a70:	200007f8 	.word	0x200007f8

08003a74 <init_update_lights>:
{
 8003a74:	b538      	push	{r3, r4, r5, lr}
	if (reg_shadow != NULL)
 8003a76:	4c0d      	ldr	r4, [pc, #52]	; (8003aac <init_update_lights+0x38>)
 8003a78:	6820      	ldr	r0, [r4, #0]
 8003a7a:	b108      	cbz	r0, 8003a80 <init_update_lights+0xc>
		free(reg_shadow);
 8003a7c:	f001 fae8 	bl	8005050 <free>
	reg_shadow = malloc(get_reg_length()+1);
 8003a80:	f7ff fca8 	bl	80033d4 <get_reg_length>
 8003a84:	3001      	adds	r0, #1
 8003a86:	f001 fadb 	bl	8005040 <malloc>
 8003a8a:	4605      	mov	r5, r0
 8003a8c:	6020      	str	r0, [r4, #0]
	memset(reg_shadow,0,get_reg_length());
 8003a8e:	f7ff fca1 	bl	80033d4 <get_reg_length>
 8003a92:	2100      	movs	r1, #0
 8003a94:	4602      	mov	r2, r0
 8003a96:	4628      	mov	r0, r5
 8003a98:	f001 fae2 	bl	8005060 <memset>
	reg_shadow[MAX_BRIGHTNESS] = 255;
 8003a9c:	22ff      	movs	r2, #255	; 0xff
 8003a9e:	6823      	ldr	r3, [r4, #0]
	update_pwm_lights(1);
 8003aa0:	2001      	movs	r0, #1
	reg_shadow[MAX_BRIGHTNESS] = 255;
 8003aa2:	701a      	strb	r2, [r3, #0]
}
 8003aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	update_pwm_lights(1);
 8003aa8:	f7ff be96 	b.w	80037d8 <update_pwm_lights>
 8003aac:	200002a4 	.word	0x200002a4

08003ab0 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ab0:	2228      	movs	r2, #40	; 0x28
{
 8003ab2:	b530      	push	{r4, r5, lr}
 8003ab4:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ab6:	eb0d 0002 	add.w	r0, sp, r2
 8003aba:	2100      	movs	r1, #0
 8003abc:	f001 fad0 	bl	8005060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ac0:	2214      	movs	r2, #20
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	eb0d 0002 	add.w	r0, sp, r2
 8003ac8:	f001 faca 	bl	8005060 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003acc:	2100      	movs	r1, #0
 8003ace:	2210      	movs	r2, #16
 8003ad0:	a801      	add	r0, sp, #4
 8003ad2:	f001 fac5 	bl	8005060 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003ad6:	2309      	movs	r3, #9
 8003ad8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ade:	2201      	movs	r2, #1
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ae0:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ae2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ae4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003ae6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aea:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003aec:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003aee:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003af0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003af2:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003af4:	f7fd fe10 	bl	8001718 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003af8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003afa:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003afc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b02:	4629      	mov	r1, r5
 8003b04:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b06:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b08:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b0a:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b0c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b0e:	f7fd ffdd 	bl	8001acc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8003b12:	2312      	movs	r3, #18
 8003b14:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b1a:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003b1c:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003b1e:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b20:	f7fe f892 	bl	8001c48 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003b24:	b015      	add	sp, #84	; 0x54
 8003b26:	bd30      	pop	{r4, r5, pc}

08003b28 <main>:
{
 8003b28:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003b2c:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8003b2e:	f7fc fdc9 	bl	80006c4 <HAL_Init>
  SystemClock_Config();
 8003b32:	f7ff ffbd 	bl	8003ab0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b36:	2210      	movs	r2, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b38:	4da7      	ldr	r5, [pc, #668]	; (8003dd8 <main+0x2b0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b3a:	eb0d 0002 	add.w	r0, sp, r2
 8003b3e:	2100      	movs	r1, #0
 8003b40:	f001 fa8e 	bl	8005060 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b44:	2701      	movs	r7, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b46:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b48:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 8003b4a:	f04f 0880 	mov.w	r8, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b4e:	f043 0310 	orr.w	r3, r3, #16
 8003b52:	61ab      	str	r3, [r5, #24]
 8003b54:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8003b56:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b60:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8003b62:	489e      	ldr	r0, [pc, #632]	; (8003ddc <main+0x2b4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b64:	f043 0320 	orr.w	r3, r3, #32
 8003b68:	61ab      	str	r3, [r5, #24]
 8003b6a:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin MODE_0_Pin MODE_1_Pin */
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b6c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b76:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LED_Pin;
 8003b78:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7c:	f043 0304 	orr.w	r3, r3, #4
 8003b80:	61ab      	str	r3, [r5, #24]
 8003b82:	69ab      	ldr	r3, [r5, #24]
  /*Configure GPIO pins : CH1_R_Pin CH1_G_Pin CH1_B_Pin CH2_R_Pin 
                           CH2_G_Pin CH3_R_Pin CH3_G_Pin CH3_B_Pin */
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
                          |CH2_G_Pin|CH3_R_Pin|CH3_G_Pin|CH3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b84:	f04f 0a03 	mov.w	sl, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	9302      	str	r3, [sp, #8]
 8003b8e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b90:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : BUTTON_Pin ADDR_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|ADDR_0_Pin;
 8003b92:	f248 0b20 	movw	fp, #32800	; 0x8020
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b96:	f043 0308 	orr.w	r3, r3, #8
 8003b9a:	61ab      	str	r3, [r5, #24]
 8003b9c:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9e:	9607      	str	r6, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	9303      	str	r3, [sp, #12]
 8003ba6:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 8003ba8:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bac:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8003bae:	f7fd f9c5 	bl	8000f3c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	4889      	ldr	r0, [pc, #548]	; (8003ddc <main+0x2b4>)
 8003bb8:	f7fd faa8 	bl	800110c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
 8003bbc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc0:	a904      	add	r1, sp, #16
 8003bc2:	4887      	ldr	r0, [pc, #540]	; (8003de0 <main+0x2b8>)
  GPIO_InitStruct.Pin = MODE_0_Pin|MODE_1_Pin;
 8003bc4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bc6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bca:	f7fd f9b7 	bl	8000f3c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bce:	a904      	add	r1, sp, #16
 8003bd0:	4883      	ldr	r0, [pc, #524]	; (8003de0 <main+0x2b8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd2:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pin = LED_Pin;
 8003bd4:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd8:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bda:	f7fd f9af 	bl	8000f3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
 8003bde:	f240 73ce 	movw	r3, #1998	; 0x7ce
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be2:	a904      	add	r1, sp, #16
 8003be4:	487f      	ldr	r0, [pc, #508]	; (8003de4 <main+0x2bc>)
  GPIO_InitStruct.Pin = CH1_R_Pin|CH1_G_Pin|CH1_B_Pin|CH2_R_Pin 
 8003be6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be8:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bea:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bee:	f7fd f9a5 	bl	8000f3c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf2:	a904      	add	r1, sp, #16
 8003bf4:	4879      	ldr	r0, [pc, #484]	; (8003ddc <main+0x2b4>)
  GPIO_InitStruct.Pin = CH2_B_Pin|CH2_W_Pin;
 8003bf6:	f8cd a010 	str.w	sl, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfa:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bfc:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c00:	f7fd f99c 	bl	8000f3c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c04:	a904      	add	r1, sp, #16
 8003c06:	4877      	ldr	r0, [pc, #476]	; (8003de4 <main+0x2bc>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c08:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUTTON_Pin|ADDR_0_Pin;
 8003c0a:	f8cd b010 	str.w	fp, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c0e:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c10:	f7fd f994 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR_5_Pin ADDR_6_Pin ADDR_7_Pin ADDR_1_Pin 
                           ADDR_2_Pin ADDR_3_Pin ADDR_4_Pin */
  GPIO_InitStruct.Pin = ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_1_Pin 
 8003c14:	f247 3318 	movw	r3, #29464	; 0x7318
                          |ADDR_2_Pin|ADDR_3_Pin|ADDR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c18:	a904      	add	r1, sp, #16
 8003c1a:	4870      	ldr	r0, [pc, #448]	; (8003ddc <main+0x2b4>)
  GPIO_InitStruct.Pin = ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_1_Pin 
 8003c1c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c1e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c20:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c22:	f7fd f98b 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : WS8212_CH2_Pin WS8212_CH1_Pin */
  GPIO_InitStruct.Pin = WS8212_CH2_Pin|WS8212_CH1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c26:	a904      	add	r1, sp, #16
 8003c28:	486c      	ldr	r0, [pc, #432]	; (8003ddc <main+0x2b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2a:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c2c:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Pin = WS8212_CH2_Pin|WS8212_CH1_Pin;
 8003c30:	f8cd b010 	str.w	fp, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c34:	f7fd f982 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DIR_Pin */
  GPIO_InitStruct.Pin = RS232_TX_Pin;
 8003c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c3c:	f44f 2a60 	mov.w	sl, #917504	; 0xe0000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8003c40:	a904      	add	r1, sp, #16
 8003c42:	4866      	ldr	r0, [pc, #408]	; (8003ddc <main+0x2b4>)
  GPIO_InitStruct.Pin = RS232_TX_Pin;
 8003c44:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c48:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c4a:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8003c4c:	f7fd f976 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003c50:	4a65      	ldr	r2, [pc, #404]	; (8003de8 <main+0x2c0>)
  hadc1.Instance = ADC1;
 8003c52:	4e66      	ldr	r6, [pc, #408]	; (8003dec <main+0x2c4>)
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003c54:	6853      	ldr	r3, [r2, #4]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003c56:	4649      	mov	r1, r9
  __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003c58:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003c5c:	433b      	orrs	r3, r7
 8003c5e:	6053      	str	r3, [r2, #4]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003c60:	485f      	ldr	r0, [pc, #380]	; (8003de0 <main+0x2b8>)
 8003c62:	4622      	mov	r2, r4
 8003c64:	f7fd fa52 	bl	800110c <HAL_GPIO_WritePin>
  hadc1.Instance = ADC1;
 8003c68:	4b61      	ldr	r3, [pc, #388]	; (8003df0 <main+0x2c8>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c6a:	4630      	mov	r0, r6
  hadc1.Instance = ADC1;
 8003c6c:	6033      	str	r3, [r6, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003c6e:	60b4      	str	r4, [r6, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003c70:	7334      	strb	r4, [r6, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c72:	7534      	strb	r4, [r6, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c74:	6074      	str	r4, [r6, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003c76:	9404      	str	r4, [sp, #16]
 8003c78:	9405      	str	r4, [sp, #20]
 8003c7a:	9406      	str	r4, [sp, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c7c:	f8c6 a01c 	str.w	sl, [r6, #28]
  hadc1.Init.NbrOfConversion = 1;
 8003c80:	6137      	str	r7, [r6, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c82:	f7fc ff01 	bl	8000a88 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c86:	a904      	add	r1, sp, #16
 8003c88:	4630      	mov	r0, r6
  hadc2.Instance = ADC2;
 8003c8a:	4e5a      	ldr	r6, [pc, #360]	; (8003df4 <main+0x2cc>)
  sConfig.Channel = ADC_CHANNEL_0;
 8003c8c:	9404      	str	r4, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003c8e:	9406      	str	r4, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c90:	9705      	str	r7, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c92:	f7fc fdb5 	bl	8000800 <HAL_ADC_ConfigChannel>
  hadc2.Instance = ADC2;
 8003c96:	4b58      	ldr	r3, [pc, #352]	; (8003df8 <main+0x2d0>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003c98:	4630      	mov	r0, r6
  hadc2.Instance = ADC2;
 8003c9a:	6033      	str	r3, [r6, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003c9c:	60b4      	str	r4, [r6, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003c9e:	7334      	strb	r4, [r6, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003ca0:	7534      	strb	r4, [r6, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ca2:	6074      	str	r4, [r6, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003ca4:	9404      	str	r4, [sp, #16]
 8003ca6:	9405      	str	r4, [sp, #20]
 8003ca8:	9406      	str	r4, [sp, #24]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003caa:	f8c6 a01c 	str.w	sl, [r6, #28]
  hadc2.Init.NbrOfConversion = 1;
 8003cae:	6137      	str	r7, [r6, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003cb0:	f7fc feea 	bl	8000a88 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 8003cb4:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003cb6:	4630      	mov	r0, r6
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cb8:	260c      	movs	r6, #12
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003cba:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_4;
 8003cbc:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003cbe:	9406      	str	r4, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003cc0:	9705      	str	r7, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003cc2:	f7fc fd9d 	bl	8000800 <HAL_ADC_ConfigChannel>
  huart1.Instance = USART1;
 8003cc6:	484d      	ldr	r0, [pc, #308]	; (8003dfc <main+0x2d4>)
  huart1.Init.BaudRate = 250000;
 8003cc8:	4b4d      	ldr	r3, [pc, #308]	; (8003e00 <main+0x2d8>)
 8003cca:	4a4e      	ldr	r2, [pc, #312]	; (8003e04 <main+0x2dc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ccc:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 250000;
 8003cce:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Parity = UART_PARITY_NONE;
 8003cd2:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cd4:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cd6:	61c4      	str	r4, [r0, #28]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8003cd8:	f8c0 900c 	str.w	r9, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cdc:	6146      	str	r6, [r0, #20]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8003cde:	f7fe fb13 	bl	8002308 <HAL_HalfDuplex_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ce2:	4622      	mov	r2, r4
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	2025      	movs	r0, #37	; 0x25
 8003ce8:	f7fc ff62 	bl	8000bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cec:	2025      	movs	r0, #37	; 0x25
 8003cee:	f7fc ff93 	bl	8000c18 <HAL_NVIC_EnableIRQ>
  huart3.Init.BaudRate = 115200;
 8003cf2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003cf6:	4944      	ldr	r1, [pc, #272]	; (8003e08 <main+0x2e0>)
  huart3.Instance = USART3;
 8003cf8:	4844      	ldr	r0, [pc, #272]	; (8003e0c <main+0x2e4>)
  huart3.Init.BaudRate = 115200;
 8003cfa:	e880 000a 	stmia.w	r0, {r1, r3}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003cfe:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d00:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d02:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d04:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d06:	61c4      	str	r4, [r0, #28]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d08:	6146      	str	r6, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d0a:	f7fe facf 	bl	80022ac <HAL_UART_Init>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0e:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <main+0x2e8>)
  print("");
 8003d10:	4840      	ldr	r0, [pc, #256]	; (8003e14 <main+0x2ec>)
 8003d12:	f8c3 8004 	str.w	r8, [r3, #4]
 8003d16:	f000 fb77 	bl	8004408 <print>
  print("-------------");
 8003d1a:	483f      	ldr	r0, [pc, #252]	; (8003e18 <main+0x2f0>)
 8003d1c:	f000 fb74 	bl	8004408 <print>
  print("DMX CTRL V1.0");
 8003d20:	483e      	ldr	r0, [pc, #248]	; (8003e1c <main+0x2f4>)
 8003d22:	f000 fb71 	bl	8004408 <print>
  print("-------------");
 8003d26:	483c      	ldr	r0, [pc, #240]	; (8003e18 <main+0x2f0>)
 8003d28:	f000 fb6e 	bl	8004408 <print>
  print("");
 8003d2c:	4839      	ldr	r0, [pc, #228]	; (8003e14 <main+0x2ec>)
 8003d2e:	f000 fb6b 	bl	8004408 <print>
 if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == SET)
 8003d32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  init_timers();
 8003d34:	f000 f91e 	bl	8003f74 <init_timers>
  print("Timer Init complete");
 8003d38:	4839      	ldr	r0, [pc, #228]	; (8003e20 <main+0x2f8>)
 8003d3a:	f000 fb65 	bl	8004408 <print>
  dmx512_init((dmxmode_t)get_mode_from_pins(),get_addr_from_pins());
 8003d3e:	f7ff fcb9 	bl	80036b4 <get_mode_from_pins>
 8003d42:	4604      	mov	r4, r0
 8003d44:	f7ff fccc 	bl	80036e0 <get_addr_from_pins>
 8003d48:	4601      	mov	r1, r0
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	f7ff fb5e 	bl	800340c <dmx512_init>
  print("DMX512 Config complete");
 8003d50:	4834      	ldr	r0, [pc, #208]	; (8003e24 <main+0x2fc>)
 8003d52:	f000 fb59 	bl	8004408 <print>
  dmx512_rec_init();
 8003d56:	f7ff fc4b 	bl	80035f0 <dmx512_rec_init>
  print("DMX512 Init complete");
 8003d5a:	4833      	ldr	r0, [pc, #204]	; (8003e28 <main+0x300>)
 8003d5c:	f000 fb54 	bl	8004408 <print>
  init_update_lights();
 8003d60:	f7ff fe88 	bl	8003a74 <init_update_lights>
  print("PWM Update Init complete");
 8003d64:	4831      	ldr	r0, [pc, #196]	; (8003e2c <main+0x304>)
 8003d66:	f000 fb4f 	bl	8004408 <print>
  init_trigger();
 8003d6a:	f000 ff67 	bl	8004c3c <init_trigger>
  print("Trigger Init complete");
 8003d6e:	4830      	ldr	r0, [pc, #192]	; (8003e30 <main+0x308>)
 8003d70:	f000 fb4a 	bl	8004408 <print>
  init_settings();
 8003d74:	f000 f962 	bl	800403c <init_settings>
  if (0 == check_button())
 8003d78:	f7ff fcf8 	bl	800376c <check_button>
 8003d7c:	bb00      	cbnz	r0, 8003dc0 <main+0x298>
	  load_settings();
 8003d7e:	f000 fa03 	bl	8004188 <load_settings>
  apply_settings();
 8003d82:	f000 f989 	bl	8004098 <apply_settings>
  print("Settings complete");
 8003d86:	482b      	ldr	r0, [pc, #172]	; (8003e34 <main+0x30c>)
 8003d88:	f000 fb3e 	bl	8004408 <print>
  print("Shell Active");
 8003d8c:	482a      	ldr	r0, [pc, #168]	; (8003e38 <main+0x310>)
 8003d8e:	f000 fb3b 	bl	8004408 <print>
  print_no_newline("DBG>");
 8003d92:	482a      	ldr	r0, [pc, #168]	; (8003e3c <main+0x314>)
 8003d94:	f000 fb58 	bl	8004448 <print_no_newline>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d9e:	4810      	ldr	r0, [pc, #64]	; (8003de0 <main+0x2b8>)
 8003da0:	f7fd f9b4 	bl	800110c <HAL_GPIO_WritePin>
	if (testmode)
 8003da4:	4c26      	ldr	r4, [pc, #152]	; (8003e40 <main+0x318>)
	shell_process();
 8003da6:	f000 fb69 	bl	800447c <shell_process>
	if (testmode)
 8003daa:	7823      	ldrb	r3, [r4, #0]
 8003dac:	b15b      	cbz	r3, 8003dc6 <main+0x29e>
		testmode = process_testmode();
 8003dae:	f000 fea9 	bl	8004b04 <process_testmode>
 8003db2:	7020      	strb	r0, [r4, #0]
		if (testmode == 0)
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d1f6      	bne.n	8003da6 <main+0x27e>
			update_pwm_lights(1);
 8003db8:	2001      	movs	r0, #1
		    update_pwm_lights(0);
 8003dba:	f7ff fd0d 	bl	80037d8 <update_pwm_lights>
 8003dbe:	e7f2      	b.n	8003da6 <main+0x27e>
	  save_settings();
 8003dc0:	f000 f9ea 	bl	8004198 <save_settings>
 8003dc4:	e7dd      	b.n	8003d82 <main+0x25a>
		if (1 == check_button())
 8003dc6:	f7ff fcd1 	bl	800376c <check_button>
 8003dca:	2801      	cmp	r0, #1
			testmode = 1;
 8003dcc:	bf08      	it	eq
 8003dce:	7020      	strbeq	r0, [r4, #0]
			process_trigger();
 8003dd0:	f000 ff54 	bl	8004c7c <process_trigger>
		    update_pwm_lights(0);
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	e7f0      	b.n	8003dba <main+0x292>
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40010c00 	.word	0x40010c00
 8003de0:	40011000 	.word	0x40011000
 8003de4:	40010800 	.word	0x40010800
 8003de8:	40010000 	.word	0x40010000
 8003dec:	200008c0 	.word	0x200008c0
 8003df0:	40012400 	.word	0x40012400
 8003df4:	20000884 	.word	0x20000884
 8003df8:	40012800 	.word	0x40012800
 8003dfc:	200008f0 	.word	0x200008f0
 8003e00:	0003d090 	.word	0x0003d090
 8003e04:	40013800 	.word	0x40013800
 8003e08:	40004800 	.word	0x40004800
 8003e0c:	20000844 	.word	0x20000844
 8003e10:	e000e100 	.word	0xe000e100
 8003e14:	08005ffb 	.word	0x08005ffb
 8003e18:	0800603e 	.word	0x0800603e
 8003e1c:	08005cb8 	.word	0x08005cb8
 8003e20:	08005cc6 	.word	0x08005cc6
 8003e24:	08005cda 	.word	0x08005cda
 8003e28:	08005cf1 	.word	0x08005cf1
 8003e2c:	08005d06 	.word	0x08005d06
 8003e30:	08005d1f 	.word	0x08005d1f
 8003e34:	08005d35 	.word	0x08005d35
 8003e38:	08005d47 	.word	0x08005d47
 8003e3c:	08005d54 	.word	0x08005d54
 8003e40:	200002a8 	.word	0x200002a8

08003e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e44:	4770      	bx	lr
	...

08003e48 <PWM_Timer_Init>:

	  TIM_MasterConfigTypeDef sMasterConfig;
	  TIM_OC_InitTypeDef sConfigOC;
	  TIM_ClockConfigTypeDef sClockSourceConfig;

	  memset(&sConfigOC, 0, sizeof(sConfigOC));
 8003e48:	221c      	movs	r2, #28
{
 8003e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e4e:	b08e      	sub	sp, #56	; 0x38
 8003e50:	4606      	mov	r6, r0
	  memset(&sConfigOC, 0, sizeof(sConfigOC));
 8003e52:	2100      	movs	r1, #0
 8003e54:	eb0d 0002 	add.w	r0, sp, r2
 8003e58:	f001 f902 	bl	8005060 <memset>
	  memset(&sMasterConfig, 0, sizeof(sMasterConfig));
 8003e5c:	2100      	movs	r1, #0
	  memset(&sClockSourceConfig, 0, sizeof(sClockSourceConfig));
 8003e5e:	2210      	movs	r2, #16
 8003e60:	a803      	add	r0, sp, #12
	  memset(&sMasterConfig, 0, sizeof(sMasterConfig));
 8003e62:	9101      	str	r1, [sp, #4]
 8003e64:	9102      	str	r1, [sp, #8]
	  memset(&sClockSourceConfig, 0, sizeof(sClockSourceConfig));
 8003e66:	f001 f8fb 	bl	8005060 <memset>

	  switch(ID)
 8003e6a:	2e01      	cmp	r6, #1
 8003e6c:	4c38      	ldr	r4, [pc, #224]	; (8003f50 <PWM_Timer_Init+0x108>)
 8003e6e:	d067      	beq.n	8003f40 <PWM_Timer_Init+0xf8>
 8003e70:	d362      	bcc.n	8003f38 <PWM_Timer_Init+0xf0>
 8003e72:	2e02      	cmp	r6, #2
 8003e74:	d067      	beq.n	8003f46 <PWM_Timer_Init+0xfe>
	  	  case PWM_CH3:
	  		timerinfo[ID].Instance = TIM1;
		  break;
	  }

	  timerinfo[(uint8_t)ID].Init.Prescaler = 0;
 8003e76:	2300      	movs	r3, #0
	  timerinfo[(uint8_t)ID].Init.CounterMode = TIM_COUNTERMODE_UP;
	  timerinfo[(uint8_t)ID].Init.Period = 1066; //TBD....
 8003e78:	f240 422a 	movw	r2, #1066	; 0x42a
	  timerinfo[(uint8_t)ID].Init.Prescaler = 0;
 8003e7c:	eb04 1486 	add.w	r4, r4, r6, lsl #6
 8003e80:	6063      	str	r3, [r4, #4]
	  timerinfo[(uint8_t)ID].Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e82:	60a3      	str	r3, [r4, #8]
	  timerinfo[(uint8_t)ID].Init.Period = 1066; //TBD....
 8003e84:	60e2      	str	r2, [r4, #12]
	  timerinfo[(uint8_t)ID].Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e86:	6123      	str	r3, [r4, #16]
	  timerinfo[(uint8_t)ID].Init.RepetitionCounter = 0;
 8003e88:	6163      	str	r3, [r4, #20]
	  if (HAL_TIM_Base_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)/* to use the Timer to generate a simple time base for TIM1 */
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f7fe f814 	bl	8001eb8 <HAL_TIM_Base_Init>
 8003e90:	b110      	cbz	r0, 8003e98 <PWM_Timer_Init+0x50>
	  {
		  print("Timer Init Error 1");
 8003e92:	4830      	ldr	r0, [pc, #192]	; (8003f54 <PWM_Timer_Init+0x10c>)
 8003e94:	f000 fab8 	bl	8004408 <print>
	  }

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;//the default clock is the internal clock from the APBx, using this function
 8003e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&timerinfo[(uint8_t)ID], &sClockSourceConfig) != HAL_OK)//Initializes the TIM PWM Time Base according to the specified
 8003e9c:	a903      	add	r1, sp, #12
 8003e9e:	4620      	mov	r0, r4
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;//the default clock is the internal clock from the APBx, using this function
 8003ea0:	9303      	str	r3, [sp, #12]
	  if (HAL_TIM_ConfigClockSource(&timerinfo[(uint8_t)ID], &sClockSourceConfig) != HAL_OK)//Initializes the TIM PWM Time Base according to the specified
 8003ea2:	f7fe f8d5 	bl	8002050 <HAL_TIM_ConfigClockSource>
 8003ea6:	b110      	cbz	r0, 8003eae <PWM_Timer_Init+0x66>
	 //parameters in the TIM_HandleTypeDef and create the associated handle.
	   {
		  print("Timer Init Error 2");
 8003ea8:	482b      	ldr	r0, [pc, #172]	; (8003f58 <PWM_Timer_Init+0x110>)
 8003eaa:	f000 faad 	bl	8004408 <print>
	   }


	  if (HAL_TIM_PWM_Init(&timerinfo[(uint8_t)ID]) != HAL_OK)
 8003eae:	4620      	mov	r0, r4
 8003eb0:	f7fe f81c 	bl	8001eec <HAL_TIM_PWM_Init>
 8003eb4:	b110      	cbz	r0, 8003ebc <PWM_Timer_Init+0x74>
	  {
		  print("Timer Init Error 3");
 8003eb6:	4829      	ldr	r0, [pc, #164]	; (8003f5c <PWM_Timer_Init+0x114>)
 8003eb8:	f000 faa6 	bl	8004408 <print>
	  }


	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ebc:	2360      	movs	r3, #96	; 0x60
 8003ebe:	9307      	str	r3, [sp, #28]
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
	  sConfigOC.Pulse = MAX_PWM/2; /* 50% duty cycle is 538, set to 0 initially*///
 8003ec0:	f240 231a 	movw	r3, #538	; 0x21a
 8003ec4:	9308      	str	r3, [sp, #32]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003ec6:	2304      	movs	r3, #4
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ec8:	2500      	movs	r5, #0
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ecc:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <PWM_Timer_Init+0x118>)
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
		  {
			  if (HAL_OK != HAL_TIM_PWM_ConfigChannel(&timerinfo[(uint8_t)ID], &sConfigOC, channelinfo[(int8_t)ID][ii]))
			  {
				  print("Timer Init Error 4");
 8003ece:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8003f6c <PWM_Timer_Init+0x124>
 8003ed2:	eb03 1706 	add.w	r7, r3, r6, lsl #4
 8003ed6:	b276      	sxtb	r6, r6
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ed8:	9509      	str	r5, [sp, #36]	; 0x24
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003eda:	950a      	str	r5, [sp, #40]	; 0x28
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003edc:	950c      	str	r5, [sp, #48]	; 0x30
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ede:	950d      	str	r5, [sp, #52]	; 0x34
 8003ee0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 8003ee4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8003ee8:	2bff      	cmp	r3, #255	; 0xff
 8003eea:	d009      	beq.n	8003f00 <PWM_Timer_Init+0xb8>
			  if (HAL_OK != HAL_TIM_PWM_ConfigChannel(&timerinfo[(uint8_t)ID], &sConfigOC, channelinfo[(int8_t)ID][ii]))
 8003eec:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 8003ef0:	a907      	add	r1, sp, #28
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f7fe f840 	bl	8001f78 <HAL_TIM_PWM_ConfigChannel>
 8003ef8:	b110      	cbz	r0, 8003f00 <PWM_Timer_Init+0xb8>
				  print("Timer Init Error 4");
 8003efa:	4640      	mov	r0, r8
 8003efc:	f000 fa84 	bl	8004408 <print>
	  for (int ii=0;ii<4;ii++)
 8003f00:	3501      	adds	r5, #1
 8003f02:	2d04      	cmp	r5, #4
 8003f04:	d1ee      	bne.n	8003ee4 <PWM_Timer_Init+0x9c>

		  }
	  }

	 // HAL_TIM_MspPostInit(&timerinfo[(uint8_t)ID]);//output pin assignment
	  HAL_TIM_Base_Start(&timerinfo[(uint8_t)ID]); //Starts the TIM Base generation
 8003f06:	4620      	mov	r0, r4
 8003f08:	f7fd ff8b 	bl	8001e22 <HAL_TIM_Base_Start>

	  for (int ii=0;ii<4;ii++)
 8003f0c:	2500      	movs	r5, #0
	  {
		  if (channelinfo[(uint8_t) ID][ii] != 255)
		  {
			  if (HAL_OK != HAL_TIM_PWM_Start(&timerinfo[(uint8_t)ID], channelinfo[(int8_t)ID][ii]))
			  {
				  print("Timer Init Error 5");
 8003f0e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8003f70 <PWM_Timer_Init+0x128>
		  if (channelinfo[(uint8_t) ID][ii] != 255)
 8003f12:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8003f16:	2bff      	cmp	r3, #255	; 0xff
 8003f18:	d008      	beq.n	8003f2c <PWM_Timer_Init+0xe4>
			  if (HAL_OK != HAL_TIM_PWM_Start(&timerinfo[(uint8_t)ID], channelinfo[(int8_t)ID][ii]))
 8003f1a:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f7fe f938 	bl	8002194 <HAL_TIM_PWM_Start>
 8003f24:	b110      	cbz	r0, 8003f2c <PWM_Timer_Init+0xe4>
				  print("Timer Init Error 5");
 8003f26:	4640      	mov	r0, r8
 8003f28:	f000 fa6e 	bl	8004408 <print>
	  for (int ii=0;ii<4;ii++)
 8003f2c:	3501      	adds	r5, #1
 8003f2e:	2d04      	cmp	r5, #4
 8003f30:	d1ef      	bne.n	8003f12 <PWM_Timer_Init+0xca>
			  }

		  }
	  }
}
 8003f32:	b00e      	add	sp, #56	; 0x38
 8003f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  		timerinfo[ID].Instance = TIM2;
 8003f38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f3c:	6023      	str	r3, [r4, #0]
		  break;
 8003f3e:	e79a      	b.n	8003e76 <PWM_Timer_Init+0x2e>
	  		timerinfo[ID].Instance = TIM3;
 8003f40:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <PWM_Timer_Init+0x11c>)
 8003f42:	6423      	str	r3, [r4, #64]	; 0x40
		  break;
 8003f44:	e797      	b.n	8003e76 <PWM_Timer_Init+0x2e>
	  		timerinfo[ID].Instance = TIM1;
 8003f46:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <PWM_Timer_Init+0x120>)
 8003f48:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		  break;
 8003f4c:	e793      	b.n	8003e76 <PWM_Timer_Init+0x2e>
 8003f4e:	bf00      	nop
 8003f50:	20000930 	.word	0x20000930
 8003f54:	08005d59 	.word	0x08005d59
 8003f58:	08005d6c 	.word	0x08005d6c
 8003f5c:	08005d7f 	.word	0x08005d7f
 8003f60:	08005db8 	.word	0x08005db8
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40012c00 	.word	0x40012c00
 8003f6c:	08005d92 	.word	0x08005d92
 8003f70:	08005da5 	.word	0x08005da5

08003f74 <init_timers>:
{
 8003f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__HAL_RCC_TIM1_CLK_ENABLE();
 8003f76:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <init_timers+0x54>)
	PWM_Timer_Init(PWM_CH1);
 8003f78:	2000      	movs	r0, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 8003f7a:	699a      	ldr	r2, [r3, #24]
 8003f7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f80:	619a      	str	r2, [r3, #24]
 8003f82:	699a      	ldr	r2, [r3, #24]
 8003f84:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f88:	9201      	str	r2, [sp, #4]
 8003f8a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8003f8c:	69da      	ldr	r2, [r3, #28]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	61da      	str	r2, [r3, #28]
 8003f94:	69da      	ldr	r2, [r3, #28]
 8003f96:	f002 0201 	and.w	r2, r2, #1
 8003f9a:	9202      	str	r2, [sp, #8]
 8003f9c:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_TIM3_CLK_ENABLE();
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	f042 0202 	orr.w	r2, r2, #2
 8003fa4:	61da      	str	r2, [r3, #28]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	9303      	str	r3, [sp, #12]
 8003fae:	9b03      	ldr	r3, [sp, #12]
	PWM_Timer_Init(PWM_CH1);
 8003fb0:	f7ff ff4a 	bl	8003e48 <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH2);
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	f7ff ff47 	bl	8003e48 <PWM_Timer_Init>
	PWM_Timer_Init(PWM_CH3);
 8003fba:	2002      	movs	r0, #2
 8003fbc:	f7ff ff44 	bl	8003e48 <PWM_Timer_Init>
}
 8003fc0:	b005      	add	sp, #20
 8003fc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000

08003fcc <configPWM>:


//Setup PWM
void configPWM(pwmtimerid_t ID,pwmchid_t channel, uint16_t duty)
{
	  if (channelinfo[(uint8_t) ID][channel] != 255)
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <configPWM+0x30>)
 8003fce:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8003fd2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003fd6:	29ff      	cmp	r1, #255	; 0xff
 8003fd8:	d00e      	beq.n	8003ff8 <configPWM+0x2c>
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <configPWM+0x34>)
 8003fdc:	0180      	lsls	r0, r0, #6
	  {
	  __HAL_TIM_SET_COMPARE(&timerinfo[ID],  channelinfo[(uint8_t)ID][(uint8_t)channel], duty);
 8003fde:	581b      	ldr	r3, [r3, r0]
 8003fe0:	b909      	cbnz	r1, 8003fe6 <configPWM+0x1a>
 8003fe2:	635a      	str	r2, [r3, #52]	; 0x34
 8003fe4:	4770      	bx	lr
 8003fe6:	2904      	cmp	r1, #4
 8003fe8:	d101      	bne.n	8003fee <configPWM+0x22>
 8003fea:	639a      	str	r2, [r3, #56]	; 0x38
 8003fec:	4770      	bx	lr
 8003fee:	2908      	cmp	r1, #8
 8003ff0:	d101      	bne.n	8003ff6 <configPWM+0x2a>
 8003ff2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ff4:	4770      	bx	lr
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	08005db8 	.word	0x08005db8
 8004000:	20000930 	.word	0x20000930

08004004 <tracer_puts>:
	HAL_UART_Transmit(&huart3, &ch, 1, 5000);
}

void tracer_puts(uint8_t *str,const uint16_t size)
{
	HAL_UART_Transmit(&huart3,str,size, 5000);
 8004004:	460a      	mov	r2, r1
 8004006:	f241 3388 	movw	r3, #5000	; 0x1388
 800400a:	4601      	mov	r1, r0
 800400c:	4801      	ldr	r0, [pc, #4]	; (8004014 <tracer_puts+0x10>)
 800400e:	f7fe b9ad 	b.w	800236c <HAL_UART_Transmit>
 8004012:	bf00      	nop
 8004014:	20000844 	.word	0x20000844

08004018 <tracer_getchar>:
}


uint8_t tracer_getchar(void)
{
 8004018:	b507      	push	{r0, r1, r2, lr}
	uint8_t data;
	if (HAL_OK == HAL_UART_Receive(&huart3, &data, 1, 0))
 800401a:	2300      	movs	r3, #0
 800401c:	2201      	movs	r2, #1
 800401e:	f10d 0107 	add.w	r1, sp, #7
 8004022:	4805      	ldr	r0, [pc, #20]	; (8004038 <tracer_getchar+0x20>)
 8004024:	f7fe f9fe 	bl	8002424 <HAL_UART_Receive>
 8004028:	b920      	cbnz	r0, 8004034 <tracer_getchar+0x1c>
		return data;
 800402a:	f89d 0007 	ldrb.w	r0, [sp, #7]
	else
		return 0;
}
 800402e:	b003      	add	sp, #12
 8004030:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
 8004034:	2000      	movs	r0, #0
 8004036:	e7fa      	b.n	800402e <tracer_getchar+0x16>
 8004038:	20000844 	.word	0x20000844

0800403c <init_settings>:
#define PAGE_SETTING_START 123
#define PAGE_SETTING_COUNT 4


void init_settings(void)
{
 800403c:	b510      	push	{r4, lr}
	//Set everything to 0....
	memset(&settings,0,sizeof(settings_s));
 800403e:	4c15      	ldr	r4, [pc, #84]	; (8004094 <init_settings+0x58>)
 8004040:	224a      	movs	r2, #74	; 0x4a
 8004042:	2100      	movs	r1, #0
 8004044:	4620      	mov	r0, r4
 8004046:	f001 f80b 	bl	8005060 <memset>

	//Set deviations from 0...
	settings.max_brightness = 255;
 800404a:	23ff      	movs	r3, #255	; 0xff
 800404c:	8023      	strh	r3, [r4, #0]
	settings.strip1_speed = 10;
 800404e:	230a      	movs	r3, #10
 8004050:	7623      	strb	r3, [r4, #24]
	settings.strip1_size = 10;;
 8004052:	7663      	strb	r3, [r4, #25]
	settings.strip1_complexity = 10;
 8004054:	76a3      	strb	r3, [r4, #26]
	settings.strip2_speed = 10;
 8004056:	77e3      	strb	r3, [r4, #31]
	settings.strip2_size = 10;
 8004058:	f884 3020 	strb.w	r3, [r4, #32]
	settings.strip2_complexity = 10;
 800405c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21


	settings.strip1_length = 300;
 8004060:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004064:	84e3      	strh	r3, [r4, #38]	; 0x26
	settings.strip2_length = 300;
 8004066:	8523      	strh	r3, [r4, #40]	; 0x28

	settings.offset_red = -100;
 8004068:	f64f 739c 	movw	r3, #65436	; 0xff9c
	settings.gain_red = 100;    //Gain * 100
 800406c:	2264      	movs	r2, #100	; 0x64
	settings.gamma_red = 220;   //Gamma * 100
	settings.offset_green = -80;
 800406e:	f64f 71b0 	movw	r1, #65456	; 0xffb0
	settings.offset_red = -100;
 8004072:	8723      	strh	r3, [r4, #56]	; 0x38
	settings.gamma_red = 220;   //Gamma * 100
 8004074:	23dc      	movs	r3, #220	; 0xdc
	settings.gain_red = 100;    //Gain * 100
 8004076:	8762      	strh	r2, [r4, #58]	; 0x3a
	settings.gamma_red = 220;   //Gamma * 100
 8004078:	87a3      	strh	r3, [r4, #60]	; 0x3c
	settings.offset_green = -80;
 800407a:	87e1      	strh	r1, [r4, #62]	; 0x3e
	settings.gain_green =100;    //Gain * 100
 800407c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
	settings.gamma_green = 220;   //Gamma * 100
 8004080:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
	settings.offset_blue = -80;
 8004084:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
	settings.gain_blue = 100;    //Gain * 100
 8004088:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	settings.gamma_blue = 220;   //Gamma * 100
 800408c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8004090:	bd10      	pop	{r4, pc}
 8004092:	bf00      	nop
 8004094:	200007f8 	.word	0x200007f8

08004098 <apply_settings>:
}

void apply_settings(void)
{
 8004098:	b510      	push	{r4, lr}
	//Apply settings to registers
	set_reg(MAX_BRIGHTNESS,settings.max_brightness);
 800409a:	4c3a      	ldr	r4, [pc, #232]	; (8004184 <apply_settings+0xec>)
 800409c:	2000      	movs	r0, #0
 800409e:	7821      	ldrb	r1, [r4, #0]
 80040a0:	f7ff f9c8 	bl	8003434 <set_reg>
	set_reg(CH1_RED,settings.pwm_ch1_r);
 80040a4:	78a1      	ldrb	r1, [r4, #2]
 80040a6:	2001      	movs	r0, #1
 80040a8:	f7ff f9c4 	bl	8003434 <set_reg>
	set_reg(CH1_GREEN,settings.pwm_ch1_g);
 80040ac:	7921      	ldrb	r1, [r4, #4]
 80040ae:	2002      	movs	r0, #2
 80040b0:	f7ff f9c0 	bl	8003434 <set_reg>
	set_reg(CH1_BLUE,settings.pwm_ch1_b);
 80040b4:	79a1      	ldrb	r1, [r4, #6]
 80040b6:	2003      	movs	r0, #3
 80040b8:	f7ff f9bc 	bl	8003434 <set_reg>
	set_reg(CH2_RED,settings.pwm_ch2_r);
 80040bc:	7a21      	ldrb	r1, [r4, #8]
 80040be:	2004      	movs	r0, #4
 80040c0:	f7ff f9b8 	bl	8003434 <set_reg>
	set_reg(CH2_GREEN,settings.pwm_ch2_g);
 80040c4:	7aa1      	ldrb	r1, [r4, #10]
 80040c6:	2005      	movs	r0, #5
 80040c8:	f7ff f9b4 	bl	8003434 <set_reg>
	set_reg(CH2_BLUE,settings.pwm_ch2_b);
 80040cc:	7b21      	ldrb	r1, [r4, #12]
 80040ce:	2006      	movs	r0, #6
 80040d0:	f7ff f9b0 	bl	8003434 <set_reg>
	set_reg(CH3_RED,settings.pwm_ch3_r);
 80040d4:	7ba1      	ldrb	r1, [r4, #14]
 80040d6:	2007      	movs	r0, #7
 80040d8:	f7ff f9ac 	bl	8003434 <set_reg>
	set_reg(CH3_GREEN,settings.pwm_ch3_g);
 80040dc:	7c21      	ldrb	r1, [r4, #16]
 80040de:	2008      	movs	r0, #8
 80040e0:	f7ff f9a8 	bl	8003434 <set_reg>
	set_reg(CH3_BLUE,settings.pwm_ch3_b);
 80040e4:	7ca1      	ldrb	r1, [r4, #18]
 80040e6:	2009      	movs	r0, #9
 80040e8:	f7ff f9a4 	bl	8003434 <set_reg>
	set_reg(CH3_WHITE,settings.pwm_ch3_w);
 80040ec:	7d21      	ldrb	r1, [r4, #20]
 80040ee:	200a      	movs	r0, #10
 80040f0:	f7ff f9a0 	bl	8003434 <set_reg>

	//Deal with LED Strip Registers
	if (DMX_MODE2 == get_mode())
 80040f4:	f7ff f968 	bl	80033c8 <get_mode>
 80040f8:	2802      	cmp	r0, #2
 80040fa:	d142      	bne.n	8004182 <apply_settings+0xea>
	{
		set_reg(STRIP_BITS,settings.strip_bits);
 80040fc:	7da1      	ldrb	r1, [r4, #22]
 80040fe:	200b      	movs	r0, #11
 8004100:	f7ff f998 	bl	8003434 <set_reg>

		set_reg(STRIP1_PATTERN,settings.strip1_pattern);
 8004104:	7de1      	ldrb	r1, [r4, #23]
 8004106:	200c      	movs	r0, #12
 8004108:	f7ff f994 	bl	8003434 <set_reg>
		set_reg(STRIP1_SPEED,settings.strip1_speed);
 800410c:	7e21      	ldrb	r1, [r4, #24]
 800410e:	200d      	movs	r0, #13
 8004110:	f7ff f990 	bl	8003434 <set_reg>
		set_reg(STRIP1_SIZE,settings.strip1_size);
 8004114:	7e61      	ldrb	r1, [r4, #25]
 8004116:	200e      	movs	r0, #14
 8004118:	f7ff f98c 	bl	8003434 <set_reg>
		set_reg(STRIP1_COMPLEXITY,settings.strip1_complexity);
 800411c:	7ea1      	ldrb	r1, [r4, #26]
 800411e:	200f      	movs	r0, #15
 8004120:	f7ff f988 	bl	8003434 <set_reg>
		set_reg(STRIP1_V1,settings.strip1_v1);
 8004124:	7ee1      	ldrb	r1, [r4, #27]
 8004126:	2010      	movs	r0, #16
 8004128:	f7ff f984 	bl	8003434 <set_reg>
		set_reg(STRIP1_V2,settings.strip1_v2);
 800412c:	7f21      	ldrb	r1, [r4, #28]
 800412e:	2011      	movs	r0, #17
 8004130:	f7ff f980 	bl	8003434 <set_reg>
		set_reg(STRIP1_V3,settings.strip1_v3);
 8004134:	7f61      	ldrb	r1, [r4, #29]
 8004136:	2012      	movs	r0, #18
 8004138:	f7ff f97c 	bl	8003434 <set_reg>

		set_reg(STRIP2_PATTERN,settings.strip2_pattern);
 800413c:	7fa1      	ldrb	r1, [r4, #30]
 800413e:	2013      	movs	r0, #19
 8004140:	f7ff f978 	bl	8003434 <set_reg>
		set_reg(STRIP2_SPEED,settings.strip2_speed);
 8004144:	7fe1      	ldrb	r1, [r4, #31]
 8004146:	2014      	movs	r0, #20
 8004148:	f7ff f974 	bl	8003434 <set_reg>
		set_reg(STRIP2_SIZE,settings.strip2_size);
 800414c:	f894 1020 	ldrb.w	r1, [r4, #32]
 8004150:	2015      	movs	r0, #21
 8004152:	f7ff f96f 	bl	8003434 <set_reg>
		set_reg(STRIP2_COMPLEXITY,settings.strip2_complexity);
 8004156:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 800415a:	2016      	movs	r0, #22
 800415c:	f7ff f96a 	bl	8003434 <set_reg>
		set_reg(STRIP2_V1,settings.strip2_v1);
 8004160:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 8004164:	2017      	movs	r0, #23
 8004166:	f7ff f965 	bl	8003434 <set_reg>
		set_reg(STRIP2_V2,settings.strip2_v2);
 800416a:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 800416e:	2018      	movs	r0, #24
 8004170:	f7ff f960 	bl	8003434 <set_reg>
		set_reg(STRIP2_V3,settings.strip2_v3);
 8004174:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8004178:	2019      	movs	r0, #25
	}
}
 800417a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		set_reg(STRIP2_V3,settings.strip2_v3);
 800417e:	f7ff b959 	b.w	8003434 <set_reg>
 8004182:	bd10      	pop	{r4, pc}
 8004184:	200007f8 	.word	0x200007f8

08004188 <load_settings>:

void load_settings(void)
{
	EE_Reads(0,sizeof(settings_s),(uint32_t*)&settings);
 8004188:	4a02      	ldr	r2, [pc, #8]	; (8004194 <load_settings+0xc>)
 800418a:	214a      	movs	r1, #74	; 0x4a
 800418c:	2000      	movs	r0, #0
 800418e:	f7ff ba55 	b.w	800363c <EE_Reads>
 8004192:	bf00      	nop
 8004194:	200007f8 	.word	0x200007f8

08004198 <save_settings>:
}

void save_settings(void)
{
	EE_Writes(0,256,(uint32_t*)&settings);
 8004198:	4a02      	ldr	r2, [pc, #8]	; (80041a4 <save_settings+0xc>)
 800419a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800419e:	2000      	movs	r0, #0
 80041a0:	f7ff ba60 	b.w	8003664 <EE_Writes>
 80041a4:	200007f8 	.word	0x200007f8

080041a8 <print_settings>:
}

void print_settings(void)
{
 80041a8:	b510      	push	{r4, lr}
	print("Settings");
 80041aa:	4848      	ldr	r0, [pc, #288]	; (80042cc <print_settings+0x124>)
	print("-------");
	//Strips
	print("Strip 1 Length: %d",settings.strip1_length);
 80041ac:	4c48      	ldr	r4, [pc, #288]	; (80042d0 <print_settings+0x128>)
	print("Settings");
 80041ae:	f000 f92b 	bl	8004408 <print>
	print("-------");
 80041b2:	4848      	ldr	r0, [pc, #288]	; (80042d4 <print_settings+0x12c>)
 80041b4:	f000 f928 	bl	8004408 <print>
	print("Strip 1 Length: %d",settings.strip1_length);
 80041b8:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80041ba:	4847      	ldr	r0, [pc, #284]	; (80042d8 <print_settings+0x130>)
 80041bc:	f000 f924 	bl	8004408 <print>
	print("Strip 2 Length: %d",settings.strip2_length);
 80041c0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80041c2:	4846      	ldr	r0, [pc, #280]	; (80042dc <print_settings+0x134>)
 80041c4:	f000 f920 	bl	8004408 <print>

	//Triggers
	print("Triggers");
 80041c8:	4845      	ldr	r0, [pc, #276]	; (80042e0 <print_settings+0x138>)
 80041ca:	f000 f91d 	bl	8004408 <print>
	print("--------");
 80041ce:	4845      	ldr	r0, [pc, #276]	; (80042e4 <print_settings+0x13c>)
 80041d0:	f000 f91a 	bl	8004408 <print>
	print("Trigger A0 Mode",settings.trigger_mode_A0);
 80041d4:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 80041d8:	4843      	ldr	r0, [pc, #268]	; (80042e8 <print_settings+0x140>)
 80041da:	f000 f915 	bl	8004408 <print>
	print("Trigger A0 Reg: %d",settings.trigger_reg_A0);
 80041de:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 80041e2:	4842      	ldr	r0, [pc, #264]	; (80042ec <print_settings+0x144>)
 80041e4:	f000 f910 	bl	8004408 <print>
	print("Trigger A0 Reg Low->Hi: %d",settings.trigger_reg_lohi_A0);
 80041e8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80041ec:	4840      	ldr	r0, [pc, #256]	; (80042f0 <print_settings+0x148>)
 80041ee:	f000 f90b 	bl	8004408 <print>
	print("Trigger A0 Val Low->Hi: %d",settings.trigger_val_lohi_A0);
 80041f2:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 80041f6:	483f      	ldr	r0, [pc, #252]	; (80042f4 <print_settings+0x14c>)
 80041f8:	f000 f906 	bl	8004408 <print>
	print("Trigger A0 Reg Hi->Low: %d",settings.trigger_reg_hilo_A0);
 80041fc:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 8004200:	483d      	ldr	r0, [pc, #244]	; (80042f8 <print_settings+0x150>)
 8004202:	f000 f901 	bl	8004408 <print>
	print("Trigger A0 Val Hi-Low: %d",settings.trigger_val_hilo_A0);
 8004206:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800420a:	483c      	ldr	r0, [pc, #240]	; (80042fc <print_settings+0x154>)
 800420c:	f000 f8fc 	bl	8004408 <print>
	print("Trigger A0 Level: %d",settings.trigger_level_A0);
 8004210:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8004214:	483a      	ldr	r0, [pc, #232]	; (8004300 <print_settings+0x158>)
 8004216:	f000 f8f7 	bl	8004408 <print>

	print("Trigger A1 Mode",settings.trigger_mode_A1);
 800421a:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 800421e:	4839      	ldr	r0, [pc, #228]	; (8004304 <print_settings+0x15c>)
 8004220:	f000 f8f2 	bl	8004408 <print>
	print("Trigger A1 Reg: %d",settings.trigger_reg_A1);
 8004224:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 8004228:	4837      	ldr	r0, [pc, #220]	; (8004308 <print_settings+0x160>)
 800422a:	f000 f8ed 	bl	8004408 <print>
	print("Trigger A1 Reg Low->Hi: %d",settings.trigger_reg_lohi_A1);
 800422e:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
 8004232:	4836      	ldr	r0, [pc, #216]	; (800430c <print_settings+0x164>)
 8004234:	f000 f8e8 	bl	8004408 <print>
	print("Trigger A1 Val Low->Hi: %d",settings.trigger_val_lohi_A1);
 8004238:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800423c:	4834      	ldr	r0, [pc, #208]	; (8004310 <print_settings+0x168>)
 800423e:	f000 f8e3 	bl	8004408 <print>
	print("Trigger A1 Reg Hi->Low: %d",settings.trigger_reg_hilo_A1);
 8004242:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 8004246:	4833      	ldr	r0, [pc, #204]	; (8004314 <print_settings+0x16c>)
 8004248:	f000 f8de 	bl	8004408 <print>
	print("Trigger A1 Val Hi-Low: %d",settings.trigger_val_hilo_A1);
 800424c:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
 8004250:	4831      	ldr	r0, [pc, #196]	; (8004318 <print_settings+0x170>)
 8004252:	f000 f8d9 	bl	8004408 <print>
	print("Trigger A1 Level: %d",settings.trigger_level_A1);
 8004256:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 800425a:	4830      	ldr	r0, [pc, #192]	; (800431c <print_settings+0x174>)
 800425c:	f000 f8d4 	bl	8004408 <print>

    //Calibration
	print("Calibration");
 8004260:	482f      	ldr	r0, [pc, #188]	; (8004320 <print_settings+0x178>)
 8004262:	f000 f8d1 	bl	8004408 <print>
	print("-----------");
 8004266:	482f      	ldr	r0, [pc, #188]	; (8004324 <print_settings+0x17c>)
 8004268:	f000 f8ce 	bl	8004408 <print>
	print("Offset Red: %d",settings.offset_red);
 800426c:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8004270:	482d      	ldr	r0, [pc, #180]	; (8004328 <print_settings+0x180>)
 8004272:	f000 f8c9 	bl	8004408 <print>
	print("Gain Red: %d",settings.gain_red);
 8004276:	f9b4 103a 	ldrsh.w	r1, [r4, #58]	; 0x3a
 800427a:	482c      	ldr	r0, [pc, #176]	; (800432c <print_settings+0x184>)
 800427c:	f000 f8c4 	bl	8004408 <print>
	print("Gamma Red: %d",settings.gamma_red);
 8004280:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8004284:	482a      	ldr	r0, [pc, #168]	; (8004330 <print_settings+0x188>)
 8004286:	f000 f8bf 	bl	8004408 <print>
	print("Offset Green: %d",settings.offset_green);
 800428a:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
 800428e:	4829      	ldr	r0, [pc, #164]	; (8004334 <print_settings+0x18c>)
 8004290:	f000 f8ba 	bl	8004408 <print>
	print("Gain Green: %d",settings.gain_green);
 8004294:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8004298:	4827      	ldr	r0, [pc, #156]	; (8004338 <print_settings+0x190>)
 800429a:	f000 f8b5 	bl	8004408 <print>
	print("Gamma Green: %d",settings.gamma_green);
 800429e:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
 80042a2:	4826      	ldr	r0, [pc, #152]	; (800433c <print_settings+0x194>)
 80042a4:	f000 f8b0 	bl	8004408 <print>
	print("Offset Blue: %d",settings.offset_blue);
 80042a8:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
 80042ac:	4824      	ldr	r0, [pc, #144]	; (8004340 <print_settings+0x198>)
 80042ae:	f000 f8ab 	bl	8004408 <print>
	print("Gain Blue: %d",settings.gain_blue);
 80042b2:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
 80042b6:	4823      	ldr	r0, [pc, #140]	; (8004344 <print_settings+0x19c>)
 80042b8:	f000 f8a6 	bl	8004408 <print>
	print("Gamma Blue: %d",settings.gamma_blue);
 80042bc:	f9b4 1048 	ldrsh.w	r1, [r4, #72]	; 0x48
 80042c0:	4821      	ldr	r0, [pc, #132]	; (8004348 <print_settings+0x1a0>)
}
 80042c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	print("Gamma Blue: %d",settings.gamma_blue);
 80042c6:	f000 b89f 	b.w	8004408 <print>
 80042ca:	bf00      	nop
 80042cc:	08005de8 	.word	0x08005de8
 80042d0:	200007f8 	.word	0x200007f8
 80042d4:	08006044 	.word	0x08006044
 80042d8:	08005df1 	.word	0x08005df1
 80042dc:	08005e04 	.word	0x08005e04
 80042e0:	08005e17 	.word	0x08005e17
 80042e4:	08006043 	.word	0x08006043
 80042e8:	08005e20 	.word	0x08005e20
 80042ec:	08005e30 	.word	0x08005e30
 80042f0:	08005e43 	.word	0x08005e43
 80042f4:	08005e5e 	.word	0x08005e5e
 80042f8:	08005e79 	.word	0x08005e79
 80042fc:	08005e94 	.word	0x08005e94
 8004300:	08005eae 	.word	0x08005eae
 8004304:	08005ec3 	.word	0x08005ec3
 8004308:	08005ed3 	.word	0x08005ed3
 800430c:	08005ee6 	.word	0x08005ee6
 8004310:	08005f01 	.word	0x08005f01
 8004314:	08005f1c 	.word	0x08005f1c
 8004318:	08005f37 	.word	0x08005f37
 800431c:	08005f51 	.word	0x08005f51
 8004320:	08005f66 	.word	0x08005f66
 8004324:	08006040 	.word	0x08006040
 8004328:	08005f72 	.word	0x08005f72
 800432c:	08005f81 	.word	0x08005f81
 8004330:	08005f8e 	.word	0x08005f8e
 8004334:	08005f9c 	.word	0x08005f9c
 8004338:	08005fad 	.word	0x08005fad
 800433c:	08005fbc 	.word	0x08005fbc
 8004340:	08005fcc 	.word	0x08005fcc
 8004344:	08005fdc 	.word	0x08005fdc
 8004348:	08005fea 	.word	0x08005fea

0800434c <cmd_buf_reset>:
    }
}

static void cmd_buf_reset(void)
{
    cmd_buf_idx = 0;
 800434c:	2100      	movs	r1, #0
 800434e:	4b03      	ldr	r3, [pc, #12]	; (800435c <cmd_buf_reset+0x10>)
    memset(cmd_buf, 0, sizeof(cmd_buf));
 8004350:	2280      	movs	r2, #128	; 0x80
 8004352:	4803      	ldr	r0, [pc, #12]	; (8004360 <cmd_buf_reset+0x14>)
    cmd_buf_idx = 0;
 8004354:	6019      	str	r1, [r3, #0]
    memset(cmd_buf, 0, sizeof(cmd_buf));
 8004356:	f000 be83 	b.w	8005060 <memset>
 800435a:	bf00      	nop
 800435c:	2000032c 	.word	0x2000032c
 8004360:	200002a9 	.word	0x200002a9

08004364 <load_command_from_command_history>:
    }
    cmd_hist_get_idx = cmd_hist_put_idx;
}

static void load_command_from_command_history(uint8_t dir)
{
 8004364:	b510      	push	{r4, lr}
 8004366:	4c19      	ldr	r4, [pc, #100]	; (80043cc <load_command_from_command_history+0x68>)
 8004368:	4a19      	ldr	r2, [pc, #100]	; (80043d0 <load_command_from_command_history+0x6c>)
    /* backwards */
    if (0 == dir)
    {
        if (0 == cmd_hist_get_idx)
 800436a:	6823      	ldr	r3, [r4, #0]
    if (0 == dir)
 800436c:	b9d0      	cbnz	r0, 80043a4 <load_command_from_command_history+0x40>
        if (0 == cmd_hist_get_idx)
 800436e:	b9a3      	cbnz	r3, 800439a <load_command_from_command_history+0x36>
        {
            if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_put_idx)
 8004370:	6813      	ldr	r3, [r2, #0]
 8004372:	2b07      	cmp	r3, #7
 8004374:	d015      	beq.n	80043a2 <load_command_from_command_history+0x3e>
            {
                return;
            }
            cmd_hist_get_idx = SHELL_CMD_HISTORY_LEN - 1;
 8004376:	2307      	movs	r3, #7
        }
        
        cmd_hist_get_idx++;
        if (SHELL_CMD_HISTORY_LEN == cmd_hist_get_idx)
        {
            cmd_hist_get_idx = 0;
 8004378:	6023      	str	r3, [r4, #0]
        }
    }
    
    cmd_buf_reset();
 800437a:	f7ff ffe7 	bl	800434c <cmd_buf_reset>
    strncpy(cmd_buf, cmd_hist[cmd_hist_get_idx], sizeof(cmd_buf));
 800437e:	4b15      	ldr	r3, [pc, #84]	; (80043d4 <load_command_from_command_history+0x70>)
 8004380:	6821      	ldr	r1, [r4, #0]
 8004382:	2280      	movs	r2, #128	; 0x80
 8004384:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 8004388:	4813      	ldr	r0, [pc, #76]	; (80043d8 <load_command_from_command_history+0x74>)
 800438a:	f000 ff4c 	bl	8005226 <strncpy>
    cmd_buf_idx = strlen(cmd_buf);
 800438e:	4812      	ldr	r0, [pc, #72]	; (80043d8 <load_command_from_command_history+0x74>)
 8004390:	f7fb fedc 	bl	800014c <strlen>
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <load_command_from_command_history+0x78>)
 8004396:	6018      	str	r0, [r3, #0]
 8004398:	e003      	b.n	80043a2 <load_command_from_command_history+0x3e>
            if (cmd_hist_get_idx - 1 == cmd_hist_put_idx)
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	3b01      	subs	r3, #1
 800439e:	4293      	cmp	r3, r2
 80043a0:	d1ea      	bne.n	8004378 <load_command_from_command_history+0x14>
 80043a2:	bd10      	pop	{r4, pc}
        if (cmd_hist_get_idx == cmd_hist_put_idx)
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d0fb      	beq.n	80043a2 <load_command_from_command_history+0x3e>
        if (SHELL_CMD_HISTORY_LEN - 1 == cmd_hist_get_idx)
 80043aa:	2b07      	cmp	r3, #7
 80043ac:	d105      	bne.n	80043ba <load_command_from_command_history+0x56>
            if (0 == cmd_hist_put_idx)
 80043ae:	b93a      	cbnz	r2, 80043c0 <load_command_from_command_history+0x5c>
                cmd_hist_get_idx++;
 80043b0:	6022      	str	r2, [r4, #0]
}
 80043b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                cmd_buf_reset();
 80043b6:	f7ff bfc9 	b.w	800434c <cmd_buf_reset>
            if (cmd_hist_get_idx + 1 == cmd_hist_put_idx)
 80043ba:	1c59      	adds	r1, r3, #1
 80043bc:	428a      	cmp	r2, r1
 80043be:	d0f7      	beq.n	80043b0 <load_command_from_command_history+0x4c>
        cmd_hist_get_idx++;
 80043c0:	3301      	adds	r3, #1
        if (SHELL_CMD_HISTORY_LEN == cmd_hist_get_idx)
 80043c2:	2b08      	cmp	r3, #8
            cmd_hist_get_idx = 0;
 80043c4:	bf08      	it	eq
 80043c6:	2300      	moveq	r3, #0
 80043c8:	e7d6      	b.n	8004378 <load_command_from_command_history+0x14>
 80043ca:	bf00      	nop
 80043cc:	20000730 	.word	0x20000730
 80043d0:	20000734 	.word	0x20000734
 80043d4:	20000330 	.word	0x20000330
 80043d8:	200002a9 	.word	0x200002a9
 80043dc:	2000032c 	.word	0x2000032c

080043e0 <send_vt100_key>:

static void send_vt100_key(vt100_key_t key)
{
 80043e0:	b508      	push	{r3, lr}
    vt100_keycode_t * keycode = vt100_get_keycode(key);
 80043e2:	f000 fdc5 	bl	8004f70 <vt100_get_keycode>
    if (NULL != keycode)
 80043e6:	b128      	cbz	r0, 80043f4 <send_vt100_key+0x14>
    {
        uart_send( keycode->code, keycode->code_len);
    }
}
 80043e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tracer_puts(bytes,size);
 80043ec:	7a01      	ldrb	r1, [r0, #8]
 80043ee:	6840      	ldr	r0, [r0, #4]
 80043f0:	f7ff be08 	b.w	8004004 <tracer_puts>
 80043f4:	bd08      	pop	{r3, pc}

080043f6 <uart_receive_byte>:
{
 80043f6:	b510      	push	{r4, lr}
 80043f8:	4604      	mov	r4, r0
	unsigned char data = tracer_getchar();
 80043fa:	f7ff fe0d 	bl	8004018 <tracer_getchar>
		*byte = 0;
 80043fe:	7020      	strb	r0, [r4, #0]
	if (data == 0)
 8004400:	b900      	cbnz	r0, 8004404 <uart_receive_byte+0xe>
		return 0;
 8004402:	bd10      	pop	{r4, pc}
		return 1;
 8004404:	2001      	movs	r0, #1
}
 8004406:	bd10      	pop	{r4, pc}

08004408 <print>:
{	
 8004408:	b40f      	push	{r0, r1, r2, r3}
 800440a:	b513      	push	{r0, r1, r4, lr}
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 800440c:	4c0c      	ldr	r4, [pc, #48]	; (8004440 <print+0x38>)
{	
 800440e:	ab04      	add	r3, sp, #16
 8004410:	f853 2b04 	ldr.w	r2, [r3], #4
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 8004414:	217c      	movs	r1, #124	; 0x7c
 8004416:	4620      	mov	r0, r4
    va_start(args, fmt);
 8004418:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 800441a:	f001 f82f 	bl	800547c <vsniprintf>
    strcat(dbgMsg, "\r\n");
 800441e:	4909      	ldr	r1, [pc, #36]	; (8004444 <print+0x3c>)
 8004420:	4620      	mov	r0, r4
 8004422:	f000 fedf 	bl	80051e4 <strcat>
    len = strlen(dbgMsg);
 8004426:	4620      	mov	r0, r4
 8004428:	f7fb fe90 	bl	800014c <strlen>
	tracer_puts(bytes,size);
 800442c:	b281      	uxth	r1, r0
 800442e:	4620      	mov	r0, r4
 8004430:	f7ff fde8 	bl	8004004 <tracer_puts>
}
 8004434:	b002      	add	sp, #8
 8004436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800443a:	b004      	add	sp, #16
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000738 	.word	0x20000738
 8004444:	08005ff9 	.word	0x08005ff9

08004448 <print_no_newline>:
{	
 8004448:	b40f      	push	{r0, r1, r2, r3}
 800444a:	b513      	push	{r0, r1, r4, lr}
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 800444c:	4c0a      	ldr	r4, [pc, #40]	; (8004478 <print_no_newline+0x30>)
{	
 800444e:	ab04      	add	r3, sp, #16
 8004450:	f853 2b04 	ldr.w	r2, [r3], #4
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 8004454:	217c      	movs	r1, #124	; 0x7c
 8004456:	4620      	mov	r0, r4
    va_start(args, fmt);
 8004458:	9301      	str	r3, [sp, #4]
    (void) vsnprintf(dbgMsg, sizeof(dbgMsg)-4, fmt, args);
 800445a:	f001 f80f 	bl	800547c <vsniprintf>
    (void) uart_send((uint8_t *)dbgMsg, (uint16_t) strlen(dbgMsg));		
 800445e:	4620      	mov	r0, r4
 8004460:	f7fb fe74 	bl	800014c <strlen>
	tracer_puts(bytes,size);
 8004464:	b281      	uxth	r1, r0
 8004466:	4620      	mov	r0, r4
 8004468:	f7ff fdcc 	bl	8004004 <tracer_puts>
}
 800446c:	b002      	add	sp, #8
 800446e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004472:	b004      	add	sp, #16
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000738 	.word	0x20000738

0800447c <shell_process>:
    
    cmd_buf_reset();
}

void shell_process(void)
{
 800447c:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
	char byte;
	const char prompt[] = "DBG>";
 8004480:	4b70      	ldr	r3, [pc, #448]	; (8004644 <shell_process+0x1c8>)
{
 8004482:	b097      	sub	sp, #92	; 0x5c
	const char prompt[] = "DBG>";
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	791b      	ldrb	r3, [r3, #4]
            print_no_newline(cmd_buf);
        }
        else if (VT100_KEY_CURSOR_DOWN == key)
        {
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 8004488:	4d6f      	ldr	r5, [pc, #444]	; (8004648 <shell_process+0x1cc>)
            print(shell_cmd_list[i].cmd);
 800448a:	4e70      	ldr	r6, [pc, #448]	; (800464c <shell_process+0x1d0>)
	const char prompt[] = "DBG>";
 800448c:	9003      	str	r0, [sp, #12]
 800448e:	f88d 3010 	strb.w	r3, [sp, #16]
	while (1 == uart_receive_byte((uint8_t*)&byte))
 8004492:	f10d 000b 	add.w	r0, sp, #11
 8004496:	f7ff ffae 	bl	80043f6 <uart_receive_byte>
 800449a:	2801      	cmp	r0, #1
 800449c:	d002      	beq.n	80044a4 <shell_process+0x28>
            }
            load_command_from_command_history(1);
            print_no_newline(cmd_buf);
        }
	}
}
 800449e:	b017      	add	sp, #92	; 0x5c
 80044a0:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
        vt100_key_t key = vt100_process_byte(byte);
 80044a4:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80044a8:	f000 fd1a 	bl	8004ee0 <vt100_process_byte>
        if (VT100_KEY_PRINTABLE == key)
 80044ac:	2801      	cmp	r0, #1
 80044ae:	d10e      	bne.n	80044ce <shell_process+0x52>
    if ((unsigned int)cmd_buf_idx < sizeof(cmd_buf))
 80044b0:	682b      	ldr	r3, [r5, #0]
 80044b2:	2b7f      	cmp	r3, #127	; 0x7f
 80044b4:	d805      	bhi.n	80044c2 <shell_process+0x46>
        cmd_buf[cmd_buf_idx++] = c;
 80044b6:	1c5a      	adds	r2, r3, #1
            cmd_buf_add_char(byte);
 80044b8:	f89d 100b 	ldrb.w	r1, [sp, #11]
        cmd_buf[cmd_buf_idx++] = c;
 80044bc:	602a      	str	r2, [r5, #0]
 80044be:	4a64      	ldr	r2, [pc, #400]	; (8004650 <shell_process+0x1d4>)
 80044c0:	54d1      	strb	r1, [r2, r3]
	tracer_puts(bytes,size);
 80044c2:	2101      	movs	r1, #1
 80044c4:	f10d 000b 	add.w	r0, sp, #11
 80044c8:	f7ff fd9c 	bl	8004004 <tracer_puts>
 80044cc:	e7e1      	b.n	8004492 <shell_process+0x16>
        else if (VT100_KEY_ENTER == key)
 80044ce:	2808      	cmp	r0, #8
 80044d0:	d17a      	bne.n	80045c8 <shell_process+0x14c>
			print("");
 80044d2:	4860      	ldr	r0, [pc, #384]	; (8004654 <shell_process+0x1d8>)
 80044d4:	f7ff ff98 	bl	8004408 <print>
	if (0 != strlen(cmd_buf))
 80044d8:	495d      	ldr	r1, [pc, #372]	; (8004650 <shell_process+0x1d4>)
 80044da:	780b      	ldrb	r3, [r1, #0]
 80044dc:	b183      	cbz	r3, 8004500 <shell_process+0x84>
    strncpy(cmd_hist[cmd_hist_put_idx], cmd_buf, sizeof(cmd_buf));
 80044de:	4f5e      	ldr	r7, [pc, #376]	; (8004658 <shell_process+0x1dc>)
 80044e0:	485e      	ldr	r0, [pc, #376]	; (800465c <shell_process+0x1e0>)
 80044e2:	683c      	ldr	r4, [r7, #0]
 80044e4:	2280      	movs	r2, #128	; 0x80
 80044e6:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    cmd_hist_put_idx++;
 80044ea:	3401      	adds	r4, #1
    strncpy(cmd_hist[cmd_hist_put_idx], cmd_buf, sizeof(cmd_buf));
 80044ec:	f000 fe9b 	bl	8005226 <strncpy>
    if (cmd_hist_put_idx >= SHELL_CMD_HISTORY_LEN)
 80044f0:	2c07      	cmp	r4, #7
        cmd_hist_put_idx = 0;
 80044f2:	bfca      	itet	gt
 80044f4:	2300      	movgt	r3, #0
    cmd_hist_put_idx++;
 80044f6:	603c      	strle	r4, [r7, #0]
        cmd_hist_put_idx = 0;
 80044f8:	603b      	strgt	r3, [r7, #0]
    cmd_hist_get_idx = cmd_hist_put_idx;
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	4b58      	ldr	r3, [pc, #352]	; (8004660 <shell_process+0x1e4>)
 80044fe:	601a      	str	r2, [r3, #0]
	tokens[arg_num] = strtok(buffer, " ");
 8004500:	4958      	ldr	r1, [pc, #352]	; (8004664 <shell_process+0x1e8>)
 8004502:	4853      	ldr	r0, [pc, #332]	; (8004650 <shell_process+0x1d4>)
 8004504:	f000 fea4 	bl	8005250 <strtok>
	int arg_num = 0;
 8004508:	2400      	movs	r4, #0
	tokens[arg_num] = strtok(buffer, " ");
 800450a:	f10d 0958 	add.w	r9, sp, #88	; 0x58
		tokens[++arg_num] = strtok(NULL, " ");
 800450e:	4f55      	ldr	r7, [pc, #340]	; (8004664 <shell_process+0x1e8>)
	tokens[arg_num] = strtok(buffer, " ");
 8004510:	f849 0d44 	str.w	r0, [r9, #-68]!
	while(NULL != tokens[arg_num] && arg_num < (MAX_ARGUMENT_NUM-1))
 8004514:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
 8004518:	b10b      	cbz	r3, 800451e <shell_process+0xa2>
 800451a:	2c0f      	cmp	r4, #15
 800451c:	d11f      	bne.n	800455e <shell_process+0xe2>
    if (0 == strncmp(argv[0], "help", SHELL_CMD_BUF_LEN))
 800451e:	2280      	movs	r2, #128	; 0x80
 8004520:	4951      	ldr	r1, [pc, #324]	; (8004668 <shell_process+0x1ec>)
 8004522:	9805      	ldr	r0, [sp, #20]
 8004524:	f000 fe6d 	bl	8005202 <strncmp>
	return arg_num - 1;
 8004528:	3c01      	subs	r4, #1
    if (0 == strncmp(argv[0], "help", SHELL_CMD_BUF_LEN))
 800452a:	4607      	mov	r7, r0
 800452c:	b1f8      	cbz	r0, 800456e <shell_process+0xf2>
    if (0 == strncmp(argv[0], "cls", SHELL_CMD_BUF_LEN))
 800452e:	2280      	movs	r2, #128	; 0x80
 8004530:	494e      	ldr	r1, [pc, #312]	; (800466c <shell_process+0x1f0>)
 8004532:	9805      	ldr	r0, [sp, #20]
 8004534:	f000 fe65 	bl	8005202 <strncmp>
 8004538:	bb58      	cbnz	r0, 8004592 <shell_process+0x116>
        send_vt100_key(VT100_KEY_CLEAR_SCREEN);
 800453a:	200d      	movs	r0, #13
 800453c:	f7ff ff50 	bl	80043e0 <send_vt100_key>
        send_vt100_key(VT100_KEY_MOVE_CURSOR_HOME);
 8004540:	200e      	movs	r0, #14
 8004542:	f7ff ff4d 	bl	80043e0 <send_vt100_key>
    cmd_buf_reset();
 8004546:	f7ff ff01 	bl	800434c <cmd_buf_reset>
	tracer_puts(bytes,size);
 800454a:	f10d 000b 	add.w	r0, sp, #11
 800454e:	2101      	movs	r1, #1
 8004550:	f7ff fd58 	bl	8004004 <tracer_puts>
			print_no_newline("\n%s", prompt);
 8004554:	a903      	add	r1, sp, #12
 8004556:	4846      	ldr	r0, [pc, #280]	; (8004670 <shell_process+0x1f4>)
 8004558:	f7ff ff76 	bl	8004448 <print_no_newline>
 800455c:	e799      	b.n	8004492 <shell_process+0x16>
		tokens[++arg_num] = strtok(NULL, " ");
 800455e:	4639      	mov	r1, r7
 8004560:	2000      	movs	r0, #0
 8004562:	f000 fe75 	bl	8005250 <strtok>
 8004566:	3401      	adds	r4, #1
 8004568:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
 800456c:	e7d2      	b.n	8004514 <shell_process+0x98>
            print(shell_cmd_list[i].cmd);
 800456e:	f04f 0a0c 	mov.w	sl, #12
        print("");
 8004572:	4838      	ldr	r0, [pc, #224]	; (8004654 <shell_process+0x1d8>)
 8004574:	f7ff ff48 	bl	8004408 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 8004578:	4b3e      	ldr	r3, [pc, #248]	; (8004674 <shell_process+0x1f8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	9b01      	ldr	r3, [sp, #4]
 8004580:	429f      	cmp	r7, r3
 8004582:	dad4      	bge.n	800452e <shell_process+0xb2>
            print(shell_cmd_list[i].cmd);
 8004584:	fb0a f307 	mul.w	r3, sl, r7
 8004588:	5998      	ldr	r0, [r3, r6]
 800458a:	f7ff ff3d 	bl	8004408 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 800458e:	3701      	adds	r7, #1
 8004590:	e7f5      	b.n	800457e <shell_process+0x102>
    if (0 == strncmp(argv[0], "cls", SHELL_CMD_BUF_LEN))
 8004592:	f04f 0a00 	mov.w	sl, #0
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 8004596:	4b37      	ldr	r3, [pc, #220]	; (8004674 <shell_process+0x1f8>)
 8004598:	4f2c      	ldr	r7, [pc, #176]	; (800464c <shell_process+0x1d0>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	9b01      	ldr	r3, [sp, #4]
 80045a0:	459a      	cmp	sl, r3
 80045a2:	dad0      	bge.n	8004546 <shell_process+0xca>
            if(0 == strncmp(argv[0], shell_cmd_list[i].cmd, SHELL_CMD_BUF_LEN))
 80045a4:	2280      	movs	r2, #128	; 0x80
 80045a6:	6839      	ldr	r1, [r7, #0]
 80045a8:	9805      	ldr	r0, [sp, #20]
 80045aa:	f000 fe2a 	bl	8005202 <strncmp>
 80045ae:	b938      	cbnz	r0, 80045c0 <shell_process+0x144>
                if(0 == shell_cmd_list[i].handler(argc, argv))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4649      	mov	r1, r9
 80045b4:	4620      	mov	r0, r4
 80045b6:	4798      	blx	r3
 80045b8:	b910      	cbnz	r0, 80045c0 <shell_process+0x144>
                    print(shell_cmd_list[i].desc);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff ff24 	bl	8004408 <print>
        for(int i = 0; i < SHELL_CMD_NUM; ++i)
 80045c0:	f10a 0a01 	add.w	sl, sl, #1
 80045c4:	370c      	adds	r7, #12
 80045c6:	e7ea      	b.n	800459e <shell_process+0x122>
        else if (VT100_KEY_INVALID == key)
 80045c8:	2800      	cmp	r0, #0
 80045ca:	f43f af62 	beq.w	8004492 <shell_process+0x16>
        else if (VT100_KEY_BACKSPACE == key)
 80045ce:	2807      	cmp	r0, #7
 80045d0:	d10e      	bne.n	80045f0 <shell_process+0x174>
    if (cmd_buf_idx > 0)
 80045d2:	682b      	ldr	r3, [r5, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	dd04      	ble.n	80045e2 <shell_process+0x166>
        cmd_buf[--cmd_buf_idx] = 0;
 80045d8:	2100      	movs	r1, #0
 80045da:	4a1d      	ldr	r2, [pc, #116]	; (8004650 <shell_process+0x1d4>)
 80045dc:	3b01      	subs	r3, #1
 80045de:	602b      	str	r3, [r5, #0]
 80045e0:	54d1      	strb	r1, [r2, r3]
            send_vt100_key(VT100_KEY_BACKSPACE);
 80045e2:	2007      	movs	r0, #7
 80045e4:	f7ff fefc 	bl	80043e0 <send_vt100_key>
            send_vt100_key(VT100_KEY_CLEAR_EOL);
 80045e8:	200a      	movs	r0, #10
 80045ea:	f7ff fef9 	bl	80043e0 <send_vt100_key>
 80045ee:	e750      	b.n	8004492 <shell_process+0x16>
        else if (VT100_KEY_CURSOR_UP == key)
 80045f0:	2802      	cmp	r0, #2
 80045f2:	d116      	bne.n	8004622 <shell_process+0x1a6>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 80045f4:	200b      	movs	r0, #11
 80045f6:	f7ff fef3 	bl	80043e0 <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 80045fa:	2400      	movs	r4, #0
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	3304      	adds	r3, #4
 8004600:	429c      	cmp	r4, r3
 8004602:	d309      	bcc.n	8004618 <shell_process+0x19c>
			print_no_newline(prompt);
 8004604:	a803      	add	r0, sp, #12
 8004606:	f7ff ff1f 	bl	8004448 <print_no_newline>
            load_command_from_command_history(0);
 800460a:	2000      	movs	r0, #0
            load_command_from_command_history(1);
 800460c:	f7ff feaa 	bl	8004364 <load_command_from_command_history>
            print_no_newline(cmd_buf);
 8004610:	480f      	ldr	r0, [pc, #60]	; (8004650 <shell_process+0x1d4>)
 8004612:	f7ff ff19 	bl	8004448 <print_no_newline>
 8004616:	e73c      	b.n	8004492 <shell_process+0x16>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 8004618:	200c      	movs	r0, #12
 800461a:	f7ff fee1 	bl	80043e0 <send_vt100_key>
            for (unsigned int ii = 0; ii < cmd_buf_idx + sizeof(prompt) - 1; ++ii)
 800461e:	3401      	adds	r4, #1
 8004620:	e7ec      	b.n	80045fc <shell_process+0x180>
        else if (VT100_KEY_CURSOR_DOWN == key)
 8004622:	2803      	cmp	r0, #3
 8004624:	f47f af35 	bne.w	8004492 <shell_process+0x16>
            send_vt100_key(VT100_KEY_CLEAR_ENTIRE_LINE);
 8004628:	200b      	movs	r0, #11
 800462a:	f7ff fed9 	bl	80043e0 <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 800462e:	2400      	movs	r4, #0
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	429c      	cmp	r4, r3
 8004634:	db01      	blt.n	800463a <shell_process+0x1be>
            load_command_from_command_history(1);
 8004636:	2001      	movs	r0, #1
 8004638:	e7e8      	b.n	800460c <shell_process+0x190>
                send_vt100_key(VT100_KEY_MOVE_CURSOR_LEFT);
 800463a:	200c      	movs	r0, #12
 800463c:	f7ff fed0 	bl	80043e0 <send_vt100_key>
            for (int ii = 0; ii < cmd_buf_idx; ++ii)
 8004640:	3401      	adds	r4, #1
 8004642:	e7f5      	b.n	8004630 <shell_process+0x1b4>
 8004644:	08005d54 	.word	0x08005d54
 8004648:	2000032c 	.word	0x2000032c
 800464c:	080060c0 	.word	0x080060c0
 8004650:	200002a9 	.word	0x200002a9
 8004654:	08005ffb 	.word	0x08005ffb
 8004658:	20000734 	.word	0x20000734
 800465c:	20000330 	.word	0x20000330
 8004660:	20000730 	.word	0x20000730
 8004664:	08006432 	.word	0x08006432
 8004668:	08005ffc 	.word	0x08005ffc
 800466c:	08006001 	.word	0x08006001
 8004670:	08006005 	.word	0x08006005
 8004674:	0800600c 	.word	0x0800600c

08004678 <shell_cmd_dumpadc>:
}


//dumpconfig
static int shell_cmd_dumpadc(int argc, char ** argv)
{
 8004678:	b508      	push	{r3, lr}
	print_adc_data();
 800467a:	f000 fb57 	bl	8004d2c <print_adc_data>
	return 1;
}
 800467e:	2001      	movs	r0, #1
 8004680:	bd08      	pop	{r3, pc}

08004682 <shell_cmd_savesettings>:
{
 8004682:	b508      	push	{r3, lr}
		save_settings();
 8004684:	f7ff fd88 	bl	8004198 <save_settings>
}
 8004688:	2001      	movs	r0, #1
 800468a:	bd08      	pop	{r3, pc}

0800468c <shell_cmd_dumpconfig>:
{
 800468c:	b508      	push	{r3, lr}
		print_settings();
 800468e:	f7ff fd8b 	bl	80041a8 <print_settings>
}
 8004692:	2001      	movs	r0, #1
 8004694:	bd08      	pop	{r3, pc}
	...

08004698 <shell_cmd_getaddr>:
{
 8004698:	b508      	push	{r3, lr}
		print("DMX512 Address: %d",get_addr());
 800469a:	f7fe fe8f 	bl	80033bc <get_addr>
 800469e:	4601      	mov	r1, r0
 80046a0:	4802      	ldr	r0, [pc, #8]	; (80046ac <shell_cmd_getaddr+0x14>)
 80046a2:	f7ff feb1 	bl	8004408 <print>
}
 80046a6:	2001      	movs	r0, #1
 80046a8:	bd08      	pop	{r3, pc}
 80046aa:	bf00      	nop
 80046ac:	0800606e 	.word	0x0800606e

080046b0 <shell_cmd_getmode>:
{
 80046b0:	b508      	push	{r3, lr}
	switch (get_mode())
 80046b2:	f7fe fe89 	bl	80033c8 <get_mode>
 80046b6:	2801      	cmp	r0, #1
 80046b8:	d008      	beq.n	80046cc <shell_cmd_getmode+0x1c>
 80046ba:	d303      	bcc.n	80046c4 <shell_cmd_getmode+0x14>
 80046bc:	2802      	cmp	r0, #2
 80046be:	d007      	beq.n	80046d0 <shell_cmd_getmode+0x20>
}
 80046c0:	2001      	movs	r0, #1
 80046c2:	bd08      	pop	{r3, pc}
		print("Mode None (Uninitialized)");
 80046c4:	4803      	ldr	r0, [pc, #12]	; (80046d4 <shell_cmd_getmode+0x24>)
		print("Mode 2 (PWM + Strip)");
 80046c6:	f7ff fe9f 	bl	8004408 <print>
		break;
 80046ca:	e7f9      	b.n	80046c0 <shell_cmd_getmode+0x10>
		print("Mode 1 (PWM)");
 80046cc:	4802      	ldr	r0, [pc, #8]	; (80046d8 <shell_cmd_getmode+0x28>)
 80046ce:	e7fa      	b.n	80046c6 <shell_cmd_getmode+0x16>
		print("Mode 2 (PWM + Strip)");
 80046d0:	4802      	ldr	r0, [pc, #8]	; (80046dc <shell_cmd_getmode+0x2c>)
 80046d2:	e7f8      	b.n	80046c6 <shell_cmd_getmode+0x16>
 80046d4:	08006081 	.word	0x08006081
 80046d8:	0800609b 	.word	0x0800609b
 80046dc:	080060a8 	.word	0x080060a8

080046e0 <shell_cmd_dumpregs>:
{
 80046e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		print("DMX512 Address: %d",get_addr());
 80046e2:	f7fe fe6b 	bl	80033bc <get_addr>
 80046e6:	4601      	mov	r1, r0
 80046e8:	4816      	ldr	r0, [pc, #88]	; (8004744 <shell_cmd_dumpregs+0x64>)
 80046ea:	f7ff fe8d 	bl	8004408 <print>
		print("DMX512 Blocklength: %d",get_reg_length());
 80046ee:	f7fe fe71 	bl	80033d4 <get_reg_length>
 80046f2:	4601      	mov	r1, r0
 80046f4:	4814      	ldr	r0, [pc, #80]	; (8004748 <shell_cmd_dumpregs+0x68>)
 80046f6:	f7ff fe87 	bl	8004408 <print>
		print("Mode: %d",(uint8_t)get_mode());
 80046fa:	f7fe fe65 	bl	80033c8 <get_mode>
 80046fe:	4601      	mov	r1, r0
 8004700:	4812      	ldr	r0, [pc, #72]	; (800474c <shell_cmd_dumpregs+0x6c>)
 8004702:	f7ff fe81 	bl	8004408 <print>
		print("---------------------------");
 8004706:	4812      	ldr	r0, [pc, #72]	; (8004750 <shell_cmd_dumpregs+0x70>)
 8004708:	f7ff fe7e 	bl	8004408 <print>
		for(int ii=0;ii< get_reg_length();ii++)
 800470c:	2400      	movs	r4, #0
			print("Reg: %d\t Addr:%d  \t (%s)\t Val: %d",ii,get_addr()+ii,get_reg_name(ii),get_reg(ii));
 800470e:	4d11      	ldr	r5, [pc, #68]	; (8004754 <shell_cmd_dumpregs+0x74>)
		for(int ii=0;ii< get_reg_length();ii++)
 8004710:	f7fe fe60 	bl	80033d4 <get_reg_length>
 8004714:	42a0      	cmp	r0, r4
 8004716:	d802      	bhi.n	800471e <shell_cmd_dumpregs+0x3e>
}
 8004718:	2001      	movs	r0, #1
 800471a:	b003      	add	sp, #12
 800471c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			print("Reg: %d\t Addr:%d  \t (%s)\t Val: %d",ii,get_addr()+ii,get_reg_name(ii),get_reg(ii));
 800471e:	f7fe fe4d 	bl	80033bc <get_addr>
 8004722:	1826      	adds	r6, r4, r0
 8004724:	4620      	mov	r0, r4
 8004726:	f7fe fea3 	bl	8003470 <get_reg_name>
 800472a:	4607      	mov	r7, r0
 800472c:	4620      	mov	r0, r4
 800472e:	f7fe fe8f 	bl	8003450 <get_reg>
 8004732:	4621      	mov	r1, r4
 8004734:	9000      	str	r0, [sp, #0]
 8004736:	463b      	mov	r3, r7
 8004738:	4632      	mov	r2, r6
 800473a:	4628      	mov	r0, r5
 800473c:	f7ff fe64 	bl	8004408 <print>
		for(int ii=0;ii< get_reg_length();ii++)
 8004740:	3401      	adds	r4, #1
 8004742:	e7e5      	b.n	8004710 <shell_cmd_dumpregs+0x30>
 8004744:	0800606e 	.word	0x0800606e
 8004748:	08006010 	.word	0x08006010
 800474c:	08006027 	.word	0x08006027
 8004750:	08006030 	.word	0x08006030
 8004754:	0800604c 	.word	0x0800604c

08004758 <shell_cmd_setgamma>:
	if (argc == 2)
 8004758:	2802      	cmp	r0, #2
{
 800475a:	b538      	push	{r3, r4, r5, lr}
 800475c:	460c      	mov	r4, r1
	if (argc == 2)
 800475e:	d118      	bne.n	8004792 <shell_cmd_setgamma+0x3a>
		switch (atoi(argv[1]))
 8004760:	6848      	ldr	r0, [r1, #4]
 8004762:	f000 fc3e 	bl	8004fe2 <atoi>
 8004766:	4d0c      	ldr	r5, [pc, #48]	; (8004798 <shell_cmd_setgamma+0x40>)
 8004768:	b138      	cbz	r0, 800477a <shell_cmd_setgamma+0x22>
 800476a:	2802      	cmp	r0, #2
 800476c:	d00b      	beq.n	8004786 <shell_cmd_setgamma+0x2e>
			settings.gamma_green = atoi(argv[2]);
 800476e:	68a0      	ldr	r0, [r4, #8]
 8004770:	f000 fc37 	bl	8004fe2 <atoi>
 8004774:	f8a5 0042 	strh.w	r0, [r5, #66]	; 0x42
 8004778:	e003      	b.n	8004782 <shell_cmd_setgamma+0x2a>
			settings.gamma_red = atoi(argv[2]);
 800477a:	68a0      	ldr	r0, [r4, #8]
 800477c:	f000 fc31 	bl	8004fe2 <atoi>
 8004780:	87a8      	strh	r0, [r5, #60]	; 0x3c
	return 1;
 8004782:	2001      	movs	r0, #1
			break;
 8004784:	bd38      	pop	{r3, r4, r5, pc}
			settings.gamma_blue = atoi(argv[2]);
 8004786:	68a0      	ldr	r0, [r4, #8]
 8004788:	f000 fc2b 	bl	8004fe2 <atoi>
 800478c:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
 8004790:	e7f7      	b.n	8004782 <shell_cmd_setgamma+0x2a>
		return 0;
 8004792:	2000      	movs	r0, #0
}
 8004794:	bd38      	pop	{r3, r4, r5, pc}
 8004796:	bf00      	nop
 8004798:	200007f8 	.word	0x200007f8

0800479c <shell_cmd_setoffset>:
	if (argc == 2)
 800479c:	2802      	cmp	r0, #2
{
 800479e:	b538      	push	{r3, r4, r5, lr}
 80047a0:	460c      	mov	r4, r1
	if (argc == 2)
 80047a2:	d117      	bne.n	80047d4 <shell_cmd_setoffset+0x38>
		switch (atoi(argv[1]))
 80047a4:	6848      	ldr	r0, [r1, #4]
 80047a6:	f000 fc1c 	bl	8004fe2 <atoi>
 80047aa:	4d0b      	ldr	r5, [pc, #44]	; (80047d8 <shell_cmd_setoffset+0x3c>)
 80047ac:	b130      	cbz	r0, 80047bc <shell_cmd_setoffset+0x20>
 80047ae:	2802      	cmp	r0, #2
 80047b0:	d00a      	beq.n	80047c8 <shell_cmd_setoffset+0x2c>
			settings.offset_green = atoi(argv[2]);
 80047b2:	68a0      	ldr	r0, [r4, #8]
 80047b4:	f000 fc15 	bl	8004fe2 <atoi>
 80047b8:	87e8      	strh	r0, [r5, #62]	; 0x3e
 80047ba:	e003      	b.n	80047c4 <shell_cmd_setoffset+0x28>
			settings.offset_red = atoi(argv[2]);
 80047bc:	68a0      	ldr	r0, [r4, #8]
 80047be:	f000 fc10 	bl	8004fe2 <atoi>
 80047c2:	8728      	strh	r0, [r5, #56]	; 0x38
	return 1;
 80047c4:	2001      	movs	r0, #1
			break;
 80047c6:	bd38      	pop	{r3, r4, r5, pc}
			settings.offset_blue = atoi(argv[2]);
 80047c8:	68a0      	ldr	r0, [r4, #8]
 80047ca:	f000 fc0a 	bl	8004fe2 <atoi>
 80047ce:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
 80047d2:	e7f7      	b.n	80047c4 <shell_cmd_setoffset+0x28>
		return 0;
 80047d4:	2000      	movs	r0, #0
}
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	200007f8 	.word	0x200007f8

080047dc <shell_cmd_setgain>:
	if (argc == 2)
 80047dc:	2802      	cmp	r0, #2
{
 80047de:	b538      	push	{r3, r4, r5, lr}
 80047e0:	460c      	mov	r4, r1
	if (argc == 2)
 80047e2:	d118      	bne.n	8004816 <shell_cmd_setgain+0x3a>
		switch (atoi(argv[1]))
 80047e4:	6848      	ldr	r0, [r1, #4]
 80047e6:	f000 fbfc 	bl	8004fe2 <atoi>
 80047ea:	4d0c      	ldr	r5, [pc, #48]	; (800481c <shell_cmd_setgain+0x40>)
 80047ec:	b138      	cbz	r0, 80047fe <shell_cmd_setgain+0x22>
 80047ee:	2802      	cmp	r0, #2
 80047f0:	d00b      	beq.n	800480a <shell_cmd_setgain+0x2e>
			settings.gain_green = atoi(argv[2]);
 80047f2:	68a0      	ldr	r0, [r4, #8]
 80047f4:	f000 fbf5 	bl	8004fe2 <atoi>
 80047f8:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
 80047fc:	e003      	b.n	8004806 <shell_cmd_setgain+0x2a>
			settings.gain_red = atoi(argv[2]);
 80047fe:	68a0      	ldr	r0, [r4, #8]
 8004800:	f000 fbef 	bl	8004fe2 <atoi>
 8004804:	8768      	strh	r0, [r5, #58]	; 0x3a
	return 1;
 8004806:	2001      	movs	r0, #1
			break;
 8004808:	bd38      	pop	{r3, r4, r5, pc}
			settings.gain_blue = atoi(argv[2]);
 800480a:	68a0      	ldr	r0, [r4, #8]
 800480c:	f000 fbe9 	bl	8004fe2 <atoi>
 8004810:	f8a5 0046 	strh.w	r0, [r5, #70]	; 0x46
 8004814:	e7f7      	b.n	8004806 <shell_cmd_setgain+0x2a>
		return 0;
 8004816:	2000      	movs	r0, #0
}
 8004818:	bd38      	pop	{r3, r4, r5, pc}
 800481a:	bf00      	nop
 800481c:	200007f8 	.word	0x200007f8

08004820 <shell_cmd_setbrightness>:
	if (argc == 1)
 8004820:	2801      	cmp	r0, #1
{
 8004822:	b510      	push	{r4, lr}
 8004824:	4604      	mov	r4, r0
	if (argc == 1)
 8004826:	d108      	bne.n	800483a <shell_cmd_setbrightness+0x1a>
		set_reg(MAX_BRIGHTNESS,(uint8_t) atoi(argv[1]));
 8004828:	6848      	ldr	r0, [r1, #4]
 800482a:	f000 fbda 	bl	8004fe2 <atoi>
 800482e:	b2c1      	uxtb	r1, r0
 8004830:	2000      	movs	r0, #0
 8004832:	f7fe fdff 	bl	8003434 <set_reg>
}
 8004836:	4620      	mov	r0, r4
 8004838:	bd10      	pop	{r4, pc}
		return 0;
 800483a:	2400      	movs	r4, #0
 800483c:	e7fb      	b.n	8004836 <shell_cmd_setbrightness+0x16>

0800483e <shell_cmd_setpwm>:
	if (argc == 3)
 800483e:	2803      	cmp	r0, #3
{
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	460c      	mov	r4, r1
	if (argc == 3)
 8004844:	d111      	bne.n	800486a <shell_cmd_setpwm+0x2c>
		configPWM((pwmtimerid_t)atoi(argv[1]),(pwmchid_t)atoi(argv[2]), (uint16_t)atoi(argv[3]));
 8004846:	6848      	ldr	r0, [r1, #4]
 8004848:	f000 fbcb 	bl	8004fe2 <atoi>
 800484c:	4605      	mov	r5, r0
 800484e:	68a0      	ldr	r0, [r4, #8]
 8004850:	f000 fbc7 	bl	8004fe2 <atoi>
 8004854:	4606      	mov	r6, r0
 8004856:	68e0      	ldr	r0, [r4, #12]
 8004858:	f000 fbc3 	bl	8004fe2 <atoi>
 800485c:	b2f1      	uxtb	r1, r6
 800485e:	b282      	uxth	r2, r0
 8004860:	b2e8      	uxtb	r0, r5
 8004862:	f7ff fbb3 	bl	8003fcc <configPWM>
 8004866:	2001      	movs	r0, #1
 8004868:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 800486a:	2000      	movs	r0, #0
}
 800486c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004870 <shell_cmd_test>:
	if (argc == 1)
 8004870:	2801      	cmp	r0, #1
{
 8004872:	b510      	push	{r4, lr}
 8004874:	4604      	mov	r4, r0
	if (argc == 1)
 8004876:	d105      	bne.n	8004884 <shell_cmd_test+0x14>
		print("Loopback Data: %s",argv[1]);
 8004878:	6849      	ldr	r1, [r1, #4]
 800487a:	4803      	ldr	r0, [pc, #12]	; (8004888 <shell_cmd_test+0x18>)
 800487c:	f7ff fdc4 	bl	8004408 <print>
}
 8004880:	4620      	mov	r0, r4
 8004882:	bd10      	pop	{r4, pc}
	return 0;
 8004884:	2400      	movs	r4, #0
 8004886:	e7fb      	b.n	8004880 <shell_cmd_test+0x10>
 8004888:	08006150 	.word	0x08006150

0800488c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800488c:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <HAL_MspInit+0x3c>)
{
 800488e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	619a      	str	r2, [r3, #24]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	f002 0201 	and.w	r2, r2, #1
 800489e:	9200      	str	r2, [sp, #0]
 80048a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80048a8:	61da      	str	r2, [r3, #28]
 80048aa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80048ac:	4a07      	ldr	r2, [pc, #28]	; (80048cc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80048b6:	6853      	ldr	r3, [r2, #4]
 80048b8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80048bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048c2:	b002      	add	sp, #8
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40010000 	.word	0x40010000

080048d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048d0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d2:	2410      	movs	r4, #16
{
 80048d4:	4605      	mov	r5, r0
 80048d6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d8:	4622      	mov	r2, r4
 80048da:	2100      	movs	r1, #0
 80048dc:	eb0d 0004 	add.w	r0, sp, r4
 80048e0:	f000 fbbe 	bl	8005060 <memset>
  if(hadc->Instance==ADC1)
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	4a1e      	ldr	r2, [pc, #120]	; (8004960 <HAL_ADC_MspInit+0x90>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d11d      	bne.n	8004928 <HAL_ADC_MspInit+0x58>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048ec:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <HAL_ADC_MspInit+0x94>)
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = ANALOG_0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(ANALOG_0_GPIO_Port, &GPIO_InitStruct);
 80048ee:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048f2:	699a      	ldr	r2, [r3, #24]
 80048f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f8:	619a      	str	r2, [r3, #24]
 80048fa:	699a      	ldr	r2, [r3, #24]
 80048fc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004900:	9200      	str	r2, [sp, #0]
 8004902:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	f042 0204 	orr.w	r2, r2, #4
 800490a:	619a      	str	r2, [r3, #24]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	9301      	str	r3, [sp, #4]
 8004914:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ANALOG_0_Pin;
 8004916:	2301      	movs	r3, #1
 8004918:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800491a:	2303      	movs	r3, #3
 800491c:	9305      	str	r3, [sp, #20]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN4 
    */
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 800491e:	4812      	ldr	r0, [pc, #72]	; (8004968 <HAL_ADC_MspInit+0x98>)
 8004920:	f7fc fb0c 	bl	8000f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004924:	b009      	add	sp, #36	; 0x24
 8004926:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 8004928:	4a10      	ldr	r2, [pc, #64]	; (800496c <HAL_ADC_MspInit+0x9c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d1fa      	bne.n	8004924 <HAL_ADC_MspInit+0x54>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800492e:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <HAL_ADC_MspInit+0x94>)
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8004930:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004932:	699a      	ldr	r2, [r3, #24]
 8004934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004938:	619a      	str	r2, [r3, #24]
 800493a:	699a      	ldr	r2, [r3, #24]
 800493c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8004940:	9202      	str	r2, [sp, #8]
 8004942:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	f042 0204 	orr.w	r2, r2, #4
 800494a:	619a      	str	r2, [r3, #24]
 800494c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 800494e:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	9303      	str	r3, [sp, #12]
 8004956:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004958:	2303      	movs	r3, #3
 800495a:	9305      	str	r3, [sp, #20]
 800495c:	e7df      	b.n	800491e <HAL_ADC_MspInit+0x4e>
 800495e:	bf00      	nop
 8004960:	40012400 	.word	0x40012400
 8004964:	40021000 	.word	0x40021000
 8004968:	40010800 	.word	0x40010800
 800496c:	40012800 	.word	0x40012800

08004970 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004970:	2210      	movs	r2, #16
{
 8004972:	b510      	push	{r4, lr}
 8004974:	4604      	mov	r4, r0
 8004976:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004978:	eb0d 0002 	add.w	r0, sp, r2
 800497c:	2100      	movs	r1, #0
 800497e:	f000 fb6f 	bl	8005060 <memset>
  if(huart->Instance==USART1)
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	4a2a      	ldr	r2, [pc, #168]	; (8004a30 <HAL_UART_MspInit+0xc0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d125      	bne.n	80049d6 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800498a:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <HAL_UART_MspInit+0xc4>)
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = RS485_RXTX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 800498c:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 800498e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 8004990:	4829      	ldr	r0, [pc, #164]	; (8004a38 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004996:	619a      	str	r2, [r3, #24]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800499e:	9200      	str	r2, [sp, #0]
 80049a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049a2:	699a      	ldr	r2, [r3, #24]
 80049a4:	f042 0208 	orr.w	r2, r2, #8
 80049a8:	619a      	str	r2, [r3, #24]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = RS485_RXTX_Pin;
 80049b4:	2340      	movs	r3, #64	; 0x40
 80049b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049b8:	2312      	movs	r3, #18
 80049ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049bc:	2303      	movs	r3, #3
 80049be:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS485_RXTX_GPIO_Port, &GPIO_InitStruct);
 80049c0:	f7fc fabc 	bl	8000f3c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80049c4:	4a1d      	ldr	r2, [pc, #116]	; (8004a3c <HAL_UART_MspInit+0xcc>)
 80049c6:	6853      	ldr	r3, [r2, #4]
 80049c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80049cc:	f043 0304 	orr.w	r3, r3, #4
 80049d0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80049d2:	b008      	add	sp, #32
 80049d4:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80049d6:	4a1a      	ldr	r2, [pc, #104]	; (8004a40 <HAL_UART_MspInit+0xd0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d1fa      	bne.n	80049d2 <HAL_UART_MspInit+0x62>
    __HAL_RCC_USART3_CLK_ENABLE();
 80049dc:	4b15      	ldr	r3, [pc, #84]	; (8004a34 <HAL_UART_MspInit+0xc4>)
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 80049de:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 80049e0:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 80049e2:	4815      	ldr	r0, [pc, #84]	; (8004a38 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80049e4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80049e8:	61da      	str	r2, [r3, #28]
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80049f0:	9202      	str	r2, [sp, #8]
 80049f2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	f042 0208 	orr.w	r2, r2, #8
 80049fa:	619a      	str	r2, [r3, #24]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	9303      	str	r3, [sp, #12]
 8004a04:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = RS232_TX_Pin;
 8004a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a0a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a10:	2303      	movs	r3, #3
 8004a12:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 8004a14:	f7fc fa92 	bl	8000f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS232_RX_Pin;
 8004a18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a1c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a1e:	2300      	movs	r3, #0
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 8004a20:	a904      	add	r1, sp, #16
 8004a22:	4805      	ldr	r0, [pc, #20]	; (8004a38 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a24:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a26:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 8004a28:	f7fc fa88 	bl	8000f3c <HAL_GPIO_Init>
}
 8004a2c:	e7d1      	b.n	80049d2 <HAL_UART_MspInit+0x62>
 8004a2e:	bf00      	nop
 8004a30:	40013800 	.word	0x40013800
 8004a34:	40021000 	.word	0x40021000
 8004a38:	40010c00 	.word	0x40010c00
 8004a3c:	40010000 	.word	0x40010000
 8004a40:	40004800 	.word	0x40004800

08004a44 <NMI_Handler>:
 8004a44:	4770      	bx	lr

08004a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a46:	e7fe      	b.n	8004a46 <HardFault_Handler>

08004a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a48:	e7fe      	b.n	8004a48 <MemManage_Handler>

08004a4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a4a:	e7fe      	b.n	8004a4a <BusFault_Handler>

08004a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a4c:	e7fe      	b.n	8004a4c <UsageFault_Handler>

08004a4e <SVC_Handler>:
 8004a4e:	4770      	bx	lr

08004a50 <DebugMon_Handler>:
 8004a50:	4770      	bx	lr

08004a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a52:	4770      	bx	lr

08004a54 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a54:	f7fb be48 	b.w	80006e8 <HAL_IncTick>

08004a58 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8004a5a:	f7fc bbd1 	b.w	8001200 <HAL_PCD_IRQHandler>
 8004a5e:	bf00      	nop
 8004a60:	20000a10 	.word	0x20000a10

08004a64 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004a64:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004a66:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <_sbrk+0x2c>)
{
 8004a68:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004a6a:	6819      	ldr	r1, [r3, #0]
 8004a6c:	b909      	cbnz	r1, 8004a72 <_sbrk+0xe>
		heap_end = &end;
 8004a6e:	4909      	ldr	r1, [pc, #36]	; (8004a94 <_sbrk+0x30>)
 8004a70:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8004a72:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8004a74:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004a76:	4402      	add	r2, r0
 8004a78:	428a      	cmp	r2, r1
 8004a7a:	d906      	bls.n	8004a8a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004a7c:	f000 fab6 	bl	8004fec <__errno>
 8004a80:	230c      	movs	r3, #12
 8004a82:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295
 8004a88:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004a8a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004a8c:	bd08      	pop	{r3, pc}
 8004a8e:	bf00      	nop
 8004a90:	200007b8 	.word	0x200007b8
 8004a94:	20000c80 	.word	0x20000c80

08004a98 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004a98:	4b0f      	ldr	r3, [pc, #60]	; (8004ad8 <SystemInit+0x40>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004aa2:	6859      	ldr	r1, [r3, #4]
 8004aa4:	4a0d      	ldr	r2, [pc, #52]	; (8004adc <SystemInit+0x44>)
 8004aa6:	400a      	ands	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004ab0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ab4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004abc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004ac4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004ac6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004aca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004acc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ad0:	4b03      	ldr	r3, [pc, #12]	; (8004ae0 <SystemInit+0x48>)
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	f8ff0000 	.word	0xf8ff0000
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <lights_off>:
							 {PWM_CH3,CH_RED},{PWM_CH3,CH_GREEN},{PWM_CH3,CH_BLUE},{PWM_CH3,CH_WHITE}};



void lights_off(void)
{
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	2400      	movs	r4, #0
	for (uint8_t ii=0;ii<STATE_CNT;ii++)
		configPWM(states[ii].id,states[ii].ch, 0);
 8004ae8:	4d05      	ldr	r5, [pc, #20]	; (8004b00 <lights_off+0x1c>)
 8004aea:	192b      	adds	r3, r5, r4
 8004aec:	5d28      	ldrb	r0, [r5, r4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	7859      	ldrb	r1, [r3, #1]
 8004af2:	3402      	adds	r4, #2
 8004af4:	f7ff fa6a 	bl	8003fcc <configPWM>
	for (uint8_t ii=0;ii<STATE_CNT;ii++)
 8004af8:	2c14      	cmp	r4, #20
 8004afa:	d1f6      	bne.n	8004aea <lights_off+0x6>
}
 8004afc:	bd38      	pop	{r3, r4, r5, pc}
 8004afe:	bf00      	nop
 8004b00:	20000079 	.word	0x20000079

08004b04 <process_testmode>:

uint8_t process_testmode(void)
{
 8004b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t button_state = 1;

	if (done)
 8004b08:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <process_testmode+0x8c>)
 8004b0a:	4c22      	ldr	r4, [pc, #136]	; (8004b94 <process_testmode+0x90>)
 8004b0c:	781a      	ldrb	r2, [r3, #0]
 8004b0e:	461f      	mov	r7, r3
 8004b10:	b14a      	cbz	r2, 8004b26 <process_testmode+0x22>
	{
		if (cnt == 0)
 8004b12:	8820      	ldrh	r0, [r4, #0]
 8004b14:	b910      	cbnz	r0, 8004b1c <process_testmode+0x18>
		{
			done = 0;
 8004b16:	7018      	strb	r0, [r3, #0]
			return 0;
 8004b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		cnt--;
 8004b1c:	3801      	subs	r0, #1
 8004b1e:	8020      	strh	r0, [r4, #0]
			state = 0;
			done = 1;
		}
		last_button_state = button_state;
	}
	return 1;
 8004b20:	2001      	movs	r0, #1
}
 8004b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cnt == 0)
 8004b26:	8826      	ldrh	r6, [r4, #0]
 8004b28:	b9be      	cbnz	r6, 8004b5a <process_testmode+0x56>
			cnt = STEP_CNT;
 8004b2a:	f64e 2360 	movw	r3, #60000	; 0xea60
			configPWM(states[state].id,states[state].ch, MAX_PWM);
 8004b2e:	4d1a      	ldr	r5, [pc, #104]	; (8004b98 <process_testmode+0x94>)
			cnt = STEP_CNT;
 8004b30:	8023      	strh	r3, [r4, #0]
			lights_off();
 8004b32:	f7ff ffd7 	bl	8004ae4 <lights_off>
			configPWM(states[state].id,states[state].ch, MAX_PWM);
 8004b36:	4b19      	ldr	r3, [pc, #100]	; (8004b9c <process_testmode+0x98>)
 8004b38:	7828      	ldrb	r0, [r5, #0]
 8004b3a:	f240 4234 	movw	r2, #1076	; 0x434
 8004b3e:	eb03 0140 	add.w	r1, r3, r0, lsl #1
 8004b42:	7849      	ldrb	r1, [r1, #1]
 8004b44:	f813 0010 	ldrb.w	r0, [r3, r0, lsl #1]
 8004b48:	f7ff fa40 	bl	8003fcc <configPWM>
			state++;
 8004b4c:	782b      	ldrb	r3, [r5, #0]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	b2db      	uxtb	r3, r3
			if (state == STATE_CNT)
 8004b52:	2b0a      	cmp	r3, #10
			state++;
 8004b54:	bf14      	ite	ne
 8004b56:	702b      	strbne	r3, [r5, #0]
				state = 0;
 8004b58:	702e      	strbeq	r6, [r5, #0]
		cnt--;
 8004b5a:	8823      	ldrh	r3, [r4, #0]
		if ((last_button_state == 0) && (button_state == 1))
 8004b5c:	4d10      	ldr	r5, [pc, #64]	; (8004ba0 <process_testmode+0x9c>)
		cnt--;
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	8023      	strh	r3, [r4, #0]
		button_state = check_button();
 8004b62:	f7fe fe03 	bl	800376c <check_button>
		if ((last_button_state == 0) && (button_state == 1))
 8004b66:	f895 8000 	ldrb.w	r8, [r5]
		button_state = check_button();
 8004b6a:	4606      	mov	r6, r0
		if ((last_button_state == 0) && (button_state == 1))
 8004b6c:	f1b8 0f00 	cmp.w	r8, #0
 8004b70:	d10b      	bne.n	8004b8a <process_testmode+0x86>
 8004b72:	2801      	cmp	r0, #1
 8004b74:	d109      	bne.n	8004b8a <process_testmode+0x86>
			last_button_state = 1;
 8004b76:	7028      	strb	r0, [r5, #0]
			lights_off();
 8004b78:	f7ff ffb4 	bl	8004ae4 <lights_off>
			cnt = STEP_CNT;
 8004b7c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004b80:	8023      	strh	r3, [r4, #0]
			state = 0;
 8004b82:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <process_testmode+0x94>)
			done = 1;
 8004b84:	703e      	strb	r6, [r7, #0]
			state = 0;
 8004b86:	f883 8000 	strb.w	r8, [r3]
		last_button_state = button_state;
 8004b8a:	702e      	strb	r6, [r5, #0]
 8004b8c:	e7c8      	b.n	8004b20 <process_testmode+0x1c>
 8004b8e:	bf00      	nop
 8004b90:	200007be 	.word	0x200007be
 8004b94:	200007bc 	.word	0x200007bc
 8004b98:	200007bf 	.word	0x200007bf
 8004b9c:	20000079 	.word	0x20000079
 8004ba0:	20000078 	.word	0x20000078

08004ba4 <ADC1_2_IRQHandler>:
ADC_HandleTypeDef* currentADCHandler = &hadc1;

void ADC1_2_IRQHandler()
{
	//need to figure out where IRQ comes from here....
	HAL_ADC_IRQHandler(currentADCHandler);
 8004ba4:	4b01      	ldr	r3, [pc, #4]	; (8004bac <ADC1_2_IRQHandler+0x8>)
 8004ba6:	6818      	ldr	r0, [r3, #0]
 8004ba8:	f7fb bdb4 	b.w	8000714 <HAL_ADC_IRQHandler>
 8004bac:	20000090 	.word	0x20000090

08004bb0 <HAL_ADC_ConvCpltCallback>:
    //HAL_ADC_IRQHandler(&hadc1);
    //HAL_ADC_IRQHandler(&hadc2);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t adc = 0;
	uint32_t sum = 0;
	uint32_t adcval = 0;

	if (hadc->Instance == ADC2)
 8004bb2:	6804      	ldr	r4, [r0, #0]
 8004bb4:	4b1b      	ldr	r3, [pc, #108]	; (8004c24 <HAL_ADC_ConvCpltCallback+0x74>)
{
 8004bb6:	4605      	mov	r5, r0
	if (hadc->Instance == ADC2)
 8004bb8:	1ae3      	subs	r3, r4, r3
 8004bba:	425c      	negs	r4, r3
 8004bbc:	415c      	adcs	r4, r3
	{
		adc = 1;
	}

	adcval = HAL_ADC_GetValue(hadc);
 8004bbe:	f7fb fda5 	bl	800070c <HAL_ADC_GetValue>
	adcval = adcval / 16; //Convert to 8-bit...
	adcdata[adc].buf[adcdata[adc].bufcnt] = (uint16_t)adcval;
 8004bc2:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <HAL_ADC_ConvCpltCallback+0x78>)
 8004bc4:	0126      	lsls	r6, r4, #4
 8004bc6:	1997      	adds	r7, r2, r6
 8004bc8:	7bbb      	ldrb	r3, [r7, #14]
 8004bca:	00e4      	lsls	r4, r4, #3
 8004bcc:	18e1      	adds	r1, r4, r3
	adcdata[adc].bufcnt++;
 8004bce:	3301      	adds	r3, #1
 8004bd0:	b2db      	uxtb	r3, r3
	adcdata[adc].buf[adcdata[adc].bufcnt] = (uint16_t)adcval;
 8004bd2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
	adcval = adcval / 16; //Convert to 8-bit...
 8004bd6:	0900      	lsrs	r0, r0, #4

	//Calculate average over x samples to reduce noise
	if (ADC_BUF_SIZE == adcdata[adc].bufcnt)
 8004bd8:	2b05      	cmp	r3, #5
	adcdata[adc].buf[adcdata[adc].bufcnt] = (uint16_t)adcval;
 8004bda:	8088      	strh	r0, [r1, #4]
	adcdata[adc].bufcnt++;
 8004bdc:	73bb      	strb	r3, [r7, #14]
	if (ADC_BUF_SIZE == adcdata[adc].bufcnt)
 8004bde:	d112      	bne.n	8004c06 <HAL_ADC_ConvCpltCallback+0x56>
 8004be0:	2100      	movs	r1, #0
 8004be2:	3406      	adds	r4, #6
 8004be4:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 8004be8:	1d30      	adds	r0, r6, #4
 8004bea:	3302      	adds	r3, #2
 8004bec:	4410      	add	r0, r2
	{
		do
		{
			adcdata[adc].bufcnt--;
			sum = sum + adcdata[adc].buf[adcdata[adc].bufcnt];
 8004bee:	f833 4d02 	ldrh.w	r4, [r3, #-2]!
		}
		while(adcdata[adc].bufcnt > 0);
 8004bf2:	4283      	cmp	r3, r0
			sum = sum + adcdata[adc].buf[adcdata[adc].bufcnt];
 8004bf4:	4421      	add	r1, r4
		while(adcdata[adc].bufcnt > 0);
 8004bf6:	d1fa      	bne.n	8004bee <HAL_ADC_ConvCpltCallback+0x3e>
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	1993      	adds	r3, r2, r6
 8004bfc:	7398      	strb	r0, [r3, #14]
		adcdata[adc].adc_val = (uint16_t)(sum / ADC_BUF_SIZE);
 8004bfe:	2305      	movs	r3, #5
 8004c00:	fbb1 f1f3 	udiv	r1, r1, r3
 8004c04:	5391      	strh	r1, [r2, r6]
	}

	//swap ADC
	if (hadc->Instance == ADC1)
 8004c06:	682a      	ldr	r2, [r5, #0]
 8004c08:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <HAL_ADC_ConvCpltCallback+0x7c>)
 8004c0a:	429a      	cmp	r2, r3
		currentADCHandler = &hadc2;
 8004c0c:	bf08      	it	eq
 8004c0e:	4a08      	ldreq	r2, [pc, #32]	; (8004c30 <HAL_ADC_ConvCpltCallback+0x80>)
 8004c10:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <HAL_ADC_ConvCpltCallback+0x84>)
	else
		currentADCHandler = &hadc1;
 8004c12:	bf18      	it	ne
 8004c14:	4a08      	ldrne	r2, [pc, #32]	; (8004c38 <HAL_ADC_ConvCpltCallback+0x88>)
 8004c16:	601a      	str	r2, [r3, #0]
	//Start ADC Again
    HAL_ADC_Start_IT(currentADCHandler);
 8004c18:	6818      	ldr	r0, [r3, #0]
}
 8004c1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADC_Start_IT(currentADCHandler);
 8004c1e:	f7fb beab 	b.w	8000978 <HAL_ADC_Start_IT>
 8004c22:	bf00      	nop
 8004c24:	40012800 	.word	0x40012800
 8004c28:	200009f0 	.word	0x200009f0
 8004c2c:	40012400 	.word	0x40012400
 8004c30:	20000884 	.word	0x20000884
 8004c34:	20000090 	.word	0x20000090
 8004c38:	200008c0 	.word	0x200008c0

08004c3c <init_trigger>:


void init_trigger(void)
{
 8004c3c:	b538      	push	{r3, r4, r5, lr}
	//Clear data
	for (uint8_t ii=0;ii<2;ii++)
		memset(&adcdata[ii], 0, sizeof(adcdata_s));
 8004c3e:	2510      	movs	r5, #16
 8004c40:	4c0c      	ldr	r4, [pc, #48]	; (8004c74 <init_trigger+0x38>)
 8004c42:	462a      	mov	r2, r5
 8004c44:	2100      	movs	r1, #0
 8004c46:	4620      	mov	r0, r4
 8004c48:	f000 fa0a 	bl	8005060 <memset>
 8004c4c:	462a      	mov	r2, r5
 8004c4e:	2100      	movs	r1, #0
 8004c50:	1960      	adds	r0, r4, r5
 8004c52:	f000 fa05 	bl	8005060 <memset>

	//Eanble IRQ's
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004c56:	2200      	movs	r2, #0
 8004c58:	2012      	movs	r0, #18
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	f7fb ffa8 	bl	8000bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004c60:	2012      	movs	r0, #18
 8004c62:	f7fb ffd9 	bl	8000c18 <HAL_NVIC_EnableIRQ>

	//Setup IRQ's
	HAL_ADC_Start_IT(currentADCHandler);
 8004c66:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <init_trigger+0x3c>)
 8004c68:	6818      	ldr	r0, [r3, #0]
}
 8004c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_ADC_Start_IT(currentADCHandler);
 8004c6e:	f7fb be83 	b.w	8000978 <HAL_ADC_Start_IT>
 8004c72:	bf00      	nop
 8004c74:	200009f0 	.word	0x200009f0
 8004c78:	20000090 	.word	0x20000090

08004c7c <process_trigger>:

void process_trigger(void)
{
 8004c7c:	b538      	push	{r3, r4, r5, lr}
	//check if ADC Value has changed
	if ((settings.trigger_mode_A0 != TRIGGERMODE_NONE) && (adcdata[0].adc_val != adcdata[0].last_adc_val))
 8004c7e:	4c29      	ldr	r4, [pc, #164]	; (8004d24 <process_trigger+0xa8>)
 8004c80:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8004c84:	b150      	cbz	r0, 8004c9c <process_trigger+0x20>
 8004c86:	4d28      	ldr	r5, [pc, #160]	; (8004d28 <process_trigger+0xac>)
 8004c88:	8829      	ldrh	r1, [r5, #0]
 8004c8a:	886a      	ldrh	r2, [r5, #2]
 8004c8c:	4291      	cmp	r1, r2
 8004c8e:	d005      	beq.n	8004c9c <process_trigger+0x20>
	{
		//Based on Settings manipulate Registers
		switch(settings.trigger_mode_A0)
 8004c90:	2801      	cmp	r0, #1
 8004c92:	d012      	beq.n	8004cba <process_trigger+0x3e>
 8004c94:	2802      	cmp	r0, #2
 8004c96:	d016      	beq.n	8004cc6 <process_trigger+0x4a>
				}

				break;
		}
		//Store Last Value
		adcdata[0].last_adc_val = adcdata[0].adc_val;
 8004c98:	882b      	ldrh	r3, [r5, #0]
 8004c9a:	806b      	strh	r3, [r5, #2]
	}

	//check if ADC Value has changed
	if ((settings.trigger_mode_A1 != TRIGGERMODE_NONE) && (adcdata[1].adc_val != adcdata[1].last_adc_val))
 8004c9c:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 8004ca0:	b150      	cbz	r0, 8004cb8 <process_trigger+0x3c>
 8004ca2:	4d21      	ldr	r5, [pc, #132]	; (8004d28 <process_trigger+0xac>)
 8004ca4:	8a29      	ldrh	r1, [r5, #16]
 8004ca6:	8a6a      	ldrh	r2, [r5, #18]
 8004ca8:	4291      	cmp	r1, r2
 8004caa:	d005      	beq.n	8004cb8 <process_trigger+0x3c>
	{
		//Based on Settings manipulate Registers
		switch(settings.trigger_mode_A1)
 8004cac:	2801      	cmp	r0, #1
 8004cae:	d01e      	beq.n	8004cee <process_trigger+0x72>
 8004cb0:	2802      	cmp	r0, #2
 8004cb2:	d022      	beq.n	8004cfa <process_trigger+0x7e>
				}

				break;
		}
		//Store Last Value
		adcdata[1].last_adc_val = adcdata[1].adc_val;
 8004cb4:	8a2b      	ldrh	r3, [r5, #16]
 8004cb6:	826b      	strh	r3, [r5, #18]
 8004cb8:	bd38      	pop	{r3, r4, r5, pc}
				set_reg(settings.trigger_reg_A0, adcdata[0].adc_val);
 8004cba:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 8004cbe:	b2c9      	uxtb	r1, r1
					set_reg(settings.trigger_reg_hilo_A0, settings.trigger_val_hilo_A0);
 8004cc0:	f7fe fbb8 	bl	8003434 <set_reg>
 8004cc4:	e7e8      	b.n	8004c98 <process_trigger+0x1c>
				if ((adcdata[0].adc_val > settings.trigger_level_A0) && (adcdata[0].last_adc_val < settings.trigger_level_A0))
 8004cc6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004cca:	4299      	cmp	r1, r3
 8004ccc:	d906      	bls.n	8004cdc <process_trigger+0x60>
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d204      	bcs.n	8004cdc <process_trigger+0x60>
					set_reg(settings.trigger_reg_lohi_A0, settings.trigger_val_lohi_A0);
 8004cd2:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8004cd6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8004cda:	e7f1      	b.n	8004cc0 <process_trigger+0x44>
				else if ((adcdata[0].adc_val <settings. trigger_level_A0) && (adcdata[0].last_adc_val > settings.trigger_level_A0))
 8004cdc:	4299      	cmp	r1, r3
 8004cde:	d2db      	bcs.n	8004c98 <process_trigger+0x1c>
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d9d9      	bls.n	8004c98 <process_trigger+0x1c>
					set_reg(settings.trigger_reg_hilo_A0, settings.trigger_val_hilo_A0);
 8004ce4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8004ce8:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8004cec:	e7e8      	b.n	8004cc0 <process_trigger+0x44>
				set_reg(settings.trigger_reg_A1, adcdata[1].adc_val);
 8004cee:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8004cf2:	b2c9      	uxtb	r1, r1
					set_reg(settings.trigger_reg_hilo_A1, settings.trigger_val_hilo_A1);
 8004cf4:	f7fe fb9e 	bl	8003434 <set_reg>
 8004cf8:	e7dc      	b.n	8004cb4 <process_trigger+0x38>
				if ((adcdata[1].adc_val > settings.trigger_level_A1) && (adcdata[1].last_adc_val < settings.trigger_level_A1))
 8004cfa:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8004cfe:	4299      	cmp	r1, r3
 8004d00:	d906      	bls.n	8004d10 <process_trigger+0x94>
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d204      	bcs.n	8004d10 <process_trigger+0x94>
					set_reg(settings.trigger_reg_lohi_A1, settings.trigger_val_lohi_A1);
 8004d06:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8004d0a:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
 8004d0e:	e7f1      	b.n	8004cf4 <process_trigger+0x78>
				else if ((adcdata[1].adc_val < settings.trigger_level_A1) && (adcdata[1].last_adc_val > settings.trigger_level_A1))
 8004d10:	4299      	cmp	r1, r3
 8004d12:	d2cf      	bcs.n	8004cb4 <process_trigger+0x38>
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d9cd      	bls.n	8004cb4 <process_trigger+0x38>
					set_reg(settings.trigger_reg_hilo_A1, settings.trigger_val_hilo_A1);
 8004d18:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
 8004d1c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8004d20:	e7e8      	b.n	8004cf4 <process_trigger+0x78>
 8004d22:	bf00      	nop
 8004d24:	200007f8 	.word	0x200007f8
 8004d28:	200009f0 	.word	0x200009f0

08004d2c <print_adc_data>:
	}
}

void print_adc_data(void)
{
 8004d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int ii=0;ii<2;ii++)
 8004d30:	2500      	movs	r5, #0
 8004d32:	4c11      	ldr	r4, [pc, #68]	; (8004d78 <print_adc_data+0x4c>)
	{
		print("ADC %d",ii+1);
 8004d34:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8004d90 <print_adc_data+0x64>
		print("-------");
 8004d38:	4f10      	ldr	r7, [pc, #64]	; (8004d7c <print_adc_data+0x50>)
		print("ADC VAL: %d",adcdata[ii].adc_val);
 8004d3a:	4e11      	ldr	r6, [pc, #68]	; (8004d80 <print_adc_data+0x54>)
		print("ADC %d",ii+1);
 8004d3c:	3501      	adds	r5, #1
 8004d3e:	4629      	mov	r1, r5
 8004d40:	4640      	mov	r0, r8
 8004d42:	f7ff fb61 	bl	8004408 <print>
		print("-------");
 8004d46:	4638      	mov	r0, r7
 8004d48:	f7ff fb5e 	bl	8004408 <print>
		print("ADC VAL: %d",adcdata[ii].adc_val);
 8004d4c:	8821      	ldrh	r1, [r4, #0]
 8004d4e:	4630      	mov	r0, r6
 8004d50:	f7ff fb5a 	bl	8004408 <print>
		print("ADC LAST VAL: %d",adcdata[ii].last_adc_val);
 8004d54:	8861      	ldrh	r1, [r4, #2]
 8004d56:	480b      	ldr	r0, [pc, #44]	; (8004d84 <print_adc_data+0x58>)
 8004d58:	f7ff fb56 	bl	8004408 <print>
		print("ADC BUFCNT: %d",adcdata[ii].bufcnt);
 8004d5c:	7ba1      	ldrb	r1, [r4, #14]
 8004d5e:	480a      	ldr	r0, [pc, #40]	; (8004d88 <print_adc_data+0x5c>)
 8004d60:	f7ff fb52 	bl	8004408 <print>
		print("");
 8004d64:	4809      	ldr	r0, [pc, #36]	; (8004d8c <print_adc_data+0x60>)
 8004d66:	f7ff fb4f 	bl	8004408 <print>
	for (int ii=0;ii<2;ii++)
 8004d6a:	2d02      	cmp	r5, #2
 8004d6c:	f104 0410 	add.w	r4, r4, #16
 8004d70:	d1e4      	bne.n	8004d3c <print_adc_data+0x10>
	}

}
 8004d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d76:	bf00      	nop
 8004d78:	200009f0 	.word	0x200009f0
 8004d7c:	08006044 	.word	0x08006044
 8004d80:	0800631d 	.word	0x0800631d
 8004d84:	08006329 	.word	0x08006329
 8004d88:	0800633a 	.word	0x0800633a
 8004d8c:	08005ffb 	.word	0x08005ffb
 8004d90:	08006316 	.word	0x08006316

08004d94 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004d94:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8004d98:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004d9c:	f7fd bfde 	b.w	8002d5c <USBD_LL_SetupStage>

08004da0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004da0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004da4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8004da8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004dac:	f7fe b803 	b.w	8002db6 <USBD_LL_DataOutStage>

08004db0 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004db0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004db6:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004dba:	f7fe b836 	b.w	8002e2a <USBD_LL_DataInStage>

08004dbe <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004dbe:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004dc2:	f7fe b8ca 	b.w	8002f5a <USBD_LL_SOF>

08004dc6 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004dc6:	6883      	ldr	r3, [r0, #8]
{ 
 8004dc8:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004dca:	2b02      	cmp	r3, #2
{ 
 8004dcc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004dce:	d001      	beq.n	8004dd4 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8004dd0:	f7ff f838 	bl	8003e44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004dd4:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8004dd8:	2101      	movs	r1, #1
 8004dda:	f7fe f8a8 	bl	8002f2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004dde:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8004de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004de6:	f7fe b87b 	b.w	8002ee0 <USBD_LL_Reset>
	...

08004dec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004dec:	b510      	push	{r4, lr}
 8004dee:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004df0:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004df4:	f7fe f89e 	bl	8002f34 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004df8:	69a3      	ldr	r3, [r4, #24]
 8004dfa:	b123      	cbz	r3, 8004e06 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004dfc:	4a02      	ldr	r2, [pc, #8]	; (8004e08 <HAL_PCD_SuspendCallback+0x1c>)
 8004dfe:	6913      	ldr	r3, [r2, #16]
 8004e00:	f043 0306 	orr.w	r3, r3, #6
 8004e04:	6113      	str	r3, [r2, #16]
 8004e06:	bd10      	pop	{r4, pc}
 8004e08:	e000ed00 	.word	0xe000ed00

08004e0c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004e0c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004e10:	f7fe b899 	b.w	8002f46 <USBD_LL_Resume>

08004e14 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004e14:	b510      	push	{r4, lr}
 8004e16:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004e18:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	4622      	mov	r2, r4
 8004e20:	f7fc f98d 	bl	800113e <HAL_PCD_EP_Open>
 8004e24:	2803      	cmp	r0, #3
 8004e26:	bf9a      	itte	ls
 8004e28:	4b01      	ldrls	r3, [pc, #4]	; (8004e30 <USBD_LL_OpenEP+0x1c>)
 8004e2a:	5c18      	ldrbls	r0, [r3, r0]
 8004e2c:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8004e2e:	bd10      	pop	{r4, pc}
 8004e30:	08006349 	.word	0x08006349

08004e34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004e34:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004e36:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e3a:	f7fc fc07 	bl	800164c <HAL_PCD_EP_SetStall>
 8004e3e:	2803      	cmp	r0, #3
 8004e40:	bf9a      	itte	ls
 8004e42:	4b02      	ldrls	r3, [pc, #8]	; (8004e4c <USBD_LL_StallEP+0x18>)
 8004e44:	5c18      	ldrbls	r0, [r3, r0]
 8004e46:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8004e48:	bd08      	pop	{r3, pc}
 8004e4a:	bf00      	nop
 8004e4c:	08006349 	.word	0x08006349

08004e50 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004e50:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004e52:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e56:	f7fc fc2d 	bl	80016b4 <HAL_PCD_EP_ClrStall>
 8004e5a:	2803      	cmp	r0, #3
 8004e5c:	bf9a      	itte	ls
 8004e5e:	4b02      	ldrls	r3, [pc, #8]	; (8004e68 <USBD_LL_ClearStallEP+0x18>)
 8004e60:	5c18      	ldrbls	r0, [r3, r0]
 8004e62:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8004e64:	bd08      	pop	{r3, pc}
 8004e66:	bf00      	nop
 8004e68:	08006349 	.word	0x08006349

08004e6c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004e6c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004e6e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004e72:	bf45      	ittet	mi
 8004e74:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8004e78:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004e7c:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004e80:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004e84:	bf58      	it	pl
 8004e86:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 8004e8a:	4770      	bx	lr

08004e8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004e8c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004e8e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e92:	f7fc f940 	bl	8001116 <HAL_PCD_SetAddress>
 8004e96:	2803      	cmp	r0, #3
 8004e98:	bf9a      	itte	ls
 8004e9a:	4b02      	ldrls	r3, [pc, #8]	; (8004ea4 <USBD_LL_SetUSBAddress+0x18>)
 8004e9c:	5c18      	ldrbls	r0, [r3, r0]
 8004e9e:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8004ea0:	bd08      	pop	{r3, pc}
 8004ea2:	bf00      	nop
 8004ea4:	08006349 	.word	0x08006349

08004ea8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004ea8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004eaa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004eae:	f7fc f991 	bl	80011d4 <HAL_PCD_EP_Transmit>
 8004eb2:	2803      	cmp	r0, #3
 8004eb4:	bf9a      	itte	ls
 8004eb6:	4b02      	ldrls	r3, [pc, #8]	; (8004ec0 <USBD_LL_Transmit+0x18>)
 8004eb8:	5c18      	ldrbls	r0, [r3, r0]
 8004eba:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8004ebc:	bd08      	pop	{r3, pc}
 8004ebe:	bf00      	nop
 8004ec0:	08006349 	.word	0x08006349

08004ec4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004ec4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004ec6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004eca:	f7fc f96b 	bl	80011a4 <HAL_PCD_EP_Receive>
 8004ece:	2803      	cmp	r0, #3
 8004ed0:	bf9a      	itte	ls
 8004ed2:	4b02      	ldrls	r3, [pc, #8]	; (8004edc <USBD_LL_PrepareReceive+0x18>)
 8004ed4:	5c18      	ldrbls	r0, [r3, r0]
 8004ed6:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8004ed8:	bd08      	pop	{r3, pc}
 8004eda:	bf00      	nop
 8004edc:	08006349 	.word	0x08006349

08004ee0 <vt100_process_byte>:
    
    return VT100_KEY_INVALID;
}

vt100_key_t vt100_process_byte(uint8_t byte)
{
 8004ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    static uint8_t cbuf[8] = {0};
    static uint8_t cbuf_idx = 0;
    
    if (0 == cbuf_idx && true == is_printable(byte))
 8004ee4:	4d1f      	ldr	r5, [pc, #124]	; (8004f64 <vt100_process_byte+0x84>)
 8004ee6:	782b      	ldrb	r3, [r5, #0]
 8004ee8:	b91b      	cbnz	r3, 8004ef2 <vt100_process_byte+0x12>
 8004eea:	f1a0 0220 	sub.w	r2, r0, #32
 8004eee:	2a5e      	cmp	r2, #94	; 0x5e
 8004ef0:	d931      	bls.n	8004f56 <vt100_process_byte+0x76>
    {
        return VT100_KEY_PRINTABLE;
    }
    else if (0x0D == byte) /* Enter */
 8004ef2:	280d      	cmp	r0, #13
 8004ef4:	d032      	beq.n	8004f5c <vt100_process_byte+0x7c>
        return VT100_KEY_ENTER;
    }
    else
    {
        vt100_key_t key = VT100_KEY_INVALID;
        cbuf[cbuf_idx++] = byte;
 8004ef6:	4c1c      	ldr	r4, [pc, #112]	; (8004f68 <vt100_process_byte+0x88>)
 8004ef8:	4f1c      	ldr	r7, [pc, #112]	; (8004f6c <vt100_process_byte+0x8c>)
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8004efa:	f04f 0800 	mov.w	r8, #0
 8004efe:	46b9      	mov	r9, r7
            (0 == strncmp((const char*)vt100_keycodes[ii].code, (const char*)buf, len)))
 8004f00:	46a2      	mov	sl, r4
        cbuf[cbuf_idx++] = byte;
 8004f02:	1c5e      	adds	r6, r3, #1
 8004f04:	b2f6      	uxtb	r6, r6
 8004f06:	702e      	strb	r6, [r5, #0]
 8004f08:	54e0      	strb	r0, [r4, r3]
        if ((len == vt100_keycodes[ii].code_len) &&
 8004f0a:	7a3b      	ldrb	r3, [r7, #8]
 8004f0c:	42b3      	cmp	r3, r6
 8004f0e:	d115      	bne.n	8004f3c <vt100_process_byte+0x5c>
            (0 == strncmp((const char*)vt100_keycodes[ii].code, (const char*)buf, len)))
 8004f10:	4632      	mov	r2, r6
 8004f12:	4651      	mov	r1, sl
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f974 	bl	8005202 <strncmp>
        if ((len == vt100_keycodes[ii].code_len) &&
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	b970      	cbnz	r0, 8004f3c <vt100_process_byte+0x5c>
            return vt100_keycodes[ii].key;
 8004f1e:	220c      	movs	r2, #12
 8004f20:	fb02 f808 	mul.w	r8, r2, r8
 8004f24:	f819 0008 	ldrb.w	r0, [r9, r8]
        key = find_key(cbuf, cbuf_idx);
        if (VT100_KEY_INVALID != key)
 8004f28:	b980      	cbnz	r0, 8004f4c <vt100_process_byte+0x6c>
            memset(cbuf, 0, sizeof(cbuf));
            return key;
        }
        else
        {
            if (cbuf_idx >= sizeof(cbuf))
 8004f2a:	2e07      	cmp	r6, #7
 8004f2c:	f04f 0000 	mov.w	r0, #0
 8004f30:	d915      	bls.n	8004f5e <vt100_process_byte+0x7e>
            {
                cbuf_idx = 0;
 8004f32:	7028      	strb	r0, [r5, #0]
                memset(cbuf, 0, sizeof(cbuf));
 8004f34:	6020      	str	r0, [r4, #0]
 8004f36:	6060      	str	r0, [r4, #4]
 8004f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8004f3c:	f108 0801 	add.w	r8, r8, #1
 8004f40:	f1b8 0f0f 	cmp.w	r8, #15
 8004f44:	f107 070c 	add.w	r7, r7, #12
 8004f48:	d1df      	bne.n	8004f0a <vt100_process_byte+0x2a>
 8004f4a:	e7ee      	b.n	8004f2a <vt100_process_byte+0x4a>
            cbuf_idx = 0;
 8004f4c:	702b      	strb	r3, [r5, #0]
            memset(cbuf, 0, sizeof(cbuf));
 8004f4e:	6023      	str	r3, [r4, #0]
 8004f50:	6063      	str	r3, [r4, #4]
            return key;
 8004f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return VT100_KEY_PRINTABLE;
 8004f56:	2001      	movs	r0, #1
 8004f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return VT100_KEY_ENTER;
 8004f5c:	2008      	movs	r0, #8
            }
        }
    }

    return VT100_KEY_INVALID;
}
 8004f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f62:	bf00      	nop
 8004f64:	200007c8 	.word	0x200007c8
 8004f68:	200007c0 	.word	0x200007c0
 8004f6c:	08006370 	.word	0x08006370

08004f70 <vt100_get_keycode>:

vt100_keycode_t * vt100_get_keycode(vt100_key_t key)
{
    if (key >= VT100_KEY_MAX) return NULL;
 8004f70:	280e      	cmp	r0, #14
{
 8004f72:	b530      	push	{r4, r5, lr}
    if (key >= VT100_KEY_MAX) return NULL;
 8004f74:	d80c      	bhi.n	8004f90 <vt100_get_keycode+0x20>
 8004f76:	2200      	movs	r2, #0
 8004f78:	240c      	movs	r4, #12
    
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
    {
        if (vt100_keycodes[ii].key == key)
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <vt100_get_keycode+0x24>)
 8004f7c:	fb04 f102 	mul.w	r1, r4, r2
 8004f80:	5ccd      	ldrb	r5, [r1, r3]
 8004f82:	4285      	cmp	r5, r0
 8004f84:	d101      	bne.n	8004f8a <vt100_get_keycode+0x1a>
        {
            return (vt100_keycode_t*)&vt100_keycodes[ii];
 8004f86:	1858      	adds	r0, r3, r1
 8004f88:	bd30      	pop	{r4, r5, pc}
    for (unsigned int ii = 0; ii < sizeof(vt100_keycodes)/sizeof(vt100_keycode_t); ++ii)
 8004f8a:	3201      	adds	r2, #1
 8004f8c:	2a0f      	cmp	r2, #15
 8004f8e:	d1f5      	bne.n	8004f7c <vt100_get_keycode+0xc>
    if (key >= VT100_KEY_MAX) return NULL;
 8004f90:	2000      	movs	r0, #0
        }
    }
    
    return NULL;
}
 8004f92:	bd30      	pop	{r4, r5, pc}
 8004f94:	08006370 	.word	0x08006370

08004f98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004f98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004f9a:	e003      	b.n	8004fa4 <LoopCopyDataInit>

08004f9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004f9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004fa0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004fa2:	3104      	adds	r1, #4

08004fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004fa4:	480a      	ldr	r0, [pc, #40]	; (8004fd0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004fa8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004faa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004fac:	d3f6      	bcc.n	8004f9c <CopyDataInit>
  ldr r2, =_sbss
 8004fae:	4a0a      	ldr	r2, [pc, #40]	; (8004fd8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004fb0:	e002      	b.n	8004fb8 <LoopFillZerobss>

08004fb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004fb2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004fb4:	f842 3b04 	str.w	r3, [r2], #4

08004fb8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004fb8:	4b08      	ldr	r3, [pc, #32]	; (8004fdc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004fba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004fbc:	d3f9      	bcc.n	8004fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004fbe:	f7ff fd6b 	bl	8004a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fc2:	f000 f819 	bl	8004ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004fc6:	f7fe fdaf 	bl	8003b28 <main>
  bx lr
 8004fca:	4770      	bx	lr
  ldr r3, =_sidata
 8004fcc:	0800656c 	.word	0x0800656c
  ldr r0, =_sdata
 8004fd0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004fd4:	20000264 	.word	0x20000264
  ldr r2, =_sbss
 8004fd8:	20000268 	.word	0x20000268
  ldr r3, = _ebss
 8004fdc:	20000c80 	.word	0x20000c80

08004fe0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004fe0:	e7fe      	b.n	8004fe0 <CAN1_RX1_IRQHandler>

08004fe2 <atoi>:
 8004fe2:	220a      	movs	r2, #10
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	f000 ba07 	b.w	80053f8 <strtol>
	...

08004fec <__errno>:
 8004fec:	4b01      	ldr	r3, [pc, #4]	; (8004ff4 <__errno+0x8>)
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000094 	.word	0x20000094

08004ff8 <__libc_init_array>:
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	2500      	movs	r5, #0
 8004ffc:	4e0c      	ldr	r6, [pc, #48]	; (8005030 <__libc_init_array+0x38>)
 8004ffe:	4c0d      	ldr	r4, [pc, #52]	; (8005034 <__libc_init_array+0x3c>)
 8005000:	1ba4      	subs	r4, r4, r6
 8005002:	10a4      	asrs	r4, r4, #2
 8005004:	42a5      	cmp	r5, r4
 8005006:	d109      	bne.n	800501c <__libc_init_array+0x24>
 8005008:	f000 fdb4 	bl	8005b74 <_init>
 800500c:	2500      	movs	r5, #0
 800500e:	4e0a      	ldr	r6, [pc, #40]	; (8005038 <__libc_init_array+0x40>)
 8005010:	4c0a      	ldr	r4, [pc, #40]	; (800503c <__libc_init_array+0x44>)
 8005012:	1ba4      	subs	r4, r4, r6
 8005014:	10a4      	asrs	r4, r4, #2
 8005016:	42a5      	cmp	r5, r4
 8005018:	d105      	bne.n	8005026 <__libc_init_array+0x2e>
 800501a:	bd70      	pop	{r4, r5, r6, pc}
 800501c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005020:	4798      	blx	r3
 8005022:	3501      	adds	r5, #1
 8005024:	e7ee      	b.n	8005004 <__libc_init_array+0xc>
 8005026:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800502a:	4798      	blx	r3
 800502c:	3501      	adds	r5, #1
 800502e:	e7f2      	b.n	8005016 <__libc_init_array+0x1e>
 8005030:	08006564 	.word	0x08006564
 8005034:	08006564 	.word	0x08006564
 8005038:	08006564 	.word	0x08006564
 800503c:	08006568 	.word	0x08006568

08005040 <malloc>:
 8005040:	4b02      	ldr	r3, [pc, #8]	; (800504c <malloc+0xc>)
 8005042:	4601      	mov	r1, r0
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	f000 b85f 	b.w	8005108 <_malloc_r>
 800504a:	bf00      	nop
 800504c:	20000094 	.word	0x20000094

08005050 <free>:
 8005050:	4b02      	ldr	r3, [pc, #8]	; (800505c <free+0xc>)
 8005052:	4601      	mov	r1, r0
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	f000 b80b 	b.w	8005070 <_free_r>
 800505a:	bf00      	nop
 800505c:	20000094 	.word	0x20000094

08005060 <memset>:
 8005060:	4603      	mov	r3, r0
 8005062:	4402      	add	r2, r0
 8005064:	4293      	cmp	r3, r2
 8005066:	d100      	bne.n	800506a <memset+0xa>
 8005068:	4770      	bx	lr
 800506a:	f803 1b01 	strb.w	r1, [r3], #1
 800506e:	e7f9      	b.n	8005064 <memset+0x4>

08005070 <_free_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4605      	mov	r5, r0
 8005074:	2900      	cmp	r1, #0
 8005076:	d043      	beq.n	8005100 <_free_r+0x90>
 8005078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800507c:	1f0c      	subs	r4, r1, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	bfb8      	it	lt
 8005082:	18e4      	addlt	r4, r4, r3
 8005084:	f000 fa1d 	bl	80054c2 <__malloc_lock>
 8005088:	4a1e      	ldr	r2, [pc, #120]	; (8005104 <_free_r+0x94>)
 800508a:	6813      	ldr	r3, [r2, #0]
 800508c:	4610      	mov	r0, r2
 800508e:	b933      	cbnz	r3, 800509e <_free_r+0x2e>
 8005090:	6063      	str	r3, [r4, #4]
 8005092:	6014      	str	r4, [r2, #0]
 8005094:	4628      	mov	r0, r5
 8005096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800509a:	f000 ba13 	b.w	80054c4 <__malloc_unlock>
 800509e:	42a3      	cmp	r3, r4
 80050a0:	d90b      	bls.n	80050ba <_free_r+0x4a>
 80050a2:	6821      	ldr	r1, [r4, #0]
 80050a4:	1862      	adds	r2, r4, r1
 80050a6:	4293      	cmp	r3, r2
 80050a8:	bf01      	itttt	eq
 80050aa:	681a      	ldreq	r2, [r3, #0]
 80050ac:	685b      	ldreq	r3, [r3, #4]
 80050ae:	1852      	addeq	r2, r2, r1
 80050b0:	6022      	streq	r2, [r4, #0]
 80050b2:	6063      	str	r3, [r4, #4]
 80050b4:	6004      	str	r4, [r0, #0]
 80050b6:	e7ed      	b.n	8005094 <_free_r+0x24>
 80050b8:	4613      	mov	r3, r2
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	b10a      	cbz	r2, 80050c2 <_free_r+0x52>
 80050be:	42a2      	cmp	r2, r4
 80050c0:	d9fa      	bls.n	80050b8 <_free_r+0x48>
 80050c2:	6819      	ldr	r1, [r3, #0]
 80050c4:	1858      	adds	r0, r3, r1
 80050c6:	42a0      	cmp	r0, r4
 80050c8:	d10b      	bne.n	80050e2 <_free_r+0x72>
 80050ca:	6820      	ldr	r0, [r4, #0]
 80050cc:	4401      	add	r1, r0
 80050ce:	1858      	adds	r0, r3, r1
 80050d0:	4282      	cmp	r2, r0
 80050d2:	6019      	str	r1, [r3, #0]
 80050d4:	d1de      	bne.n	8005094 <_free_r+0x24>
 80050d6:	6810      	ldr	r0, [r2, #0]
 80050d8:	6852      	ldr	r2, [r2, #4]
 80050da:	4401      	add	r1, r0
 80050dc:	6019      	str	r1, [r3, #0]
 80050de:	605a      	str	r2, [r3, #4]
 80050e0:	e7d8      	b.n	8005094 <_free_r+0x24>
 80050e2:	d902      	bls.n	80050ea <_free_r+0x7a>
 80050e4:	230c      	movs	r3, #12
 80050e6:	602b      	str	r3, [r5, #0]
 80050e8:	e7d4      	b.n	8005094 <_free_r+0x24>
 80050ea:	6820      	ldr	r0, [r4, #0]
 80050ec:	1821      	adds	r1, r4, r0
 80050ee:	428a      	cmp	r2, r1
 80050f0:	bf01      	itttt	eq
 80050f2:	6811      	ldreq	r1, [r2, #0]
 80050f4:	6852      	ldreq	r2, [r2, #4]
 80050f6:	1809      	addeq	r1, r1, r0
 80050f8:	6021      	streq	r1, [r4, #0]
 80050fa:	6062      	str	r2, [r4, #4]
 80050fc:	605c      	str	r4, [r3, #4]
 80050fe:	e7c9      	b.n	8005094 <_free_r+0x24>
 8005100:	bd38      	pop	{r3, r4, r5, pc}
 8005102:	bf00      	nop
 8005104:	200007cc 	.word	0x200007cc

08005108 <_malloc_r>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	1ccd      	adds	r5, r1, #3
 800510c:	f025 0503 	bic.w	r5, r5, #3
 8005110:	3508      	adds	r5, #8
 8005112:	2d0c      	cmp	r5, #12
 8005114:	bf38      	it	cc
 8005116:	250c      	movcc	r5, #12
 8005118:	2d00      	cmp	r5, #0
 800511a:	4606      	mov	r6, r0
 800511c:	db01      	blt.n	8005122 <_malloc_r+0x1a>
 800511e:	42a9      	cmp	r1, r5
 8005120:	d903      	bls.n	800512a <_malloc_r+0x22>
 8005122:	230c      	movs	r3, #12
 8005124:	6033      	str	r3, [r6, #0]
 8005126:	2000      	movs	r0, #0
 8005128:	bd70      	pop	{r4, r5, r6, pc}
 800512a:	f000 f9ca 	bl	80054c2 <__malloc_lock>
 800512e:	4a23      	ldr	r2, [pc, #140]	; (80051bc <_malloc_r+0xb4>)
 8005130:	6814      	ldr	r4, [r2, #0]
 8005132:	4621      	mov	r1, r4
 8005134:	b991      	cbnz	r1, 800515c <_malloc_r+0x54>
 8005136:	4c22      	ldr	r4, [pc, #136]	; (80051c0 <_malloc_r+0xb8>)
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	b91b      	cbnz	r3, 8005144 <_malloc_r+0x3c>
 800513c:	4630      	mov	r0, r6
 800513e:	f000 f841 	bl	80051c4 <_sbrk_r>
 8005142:	6020      	str	r0, [r4, #0]
 8005144:	4629      	mov	r1, r5
 8005146:	4630      	mov	r0, r6
 8005148:	f000 f83c 	bl	80051c4 <_sbrk_r>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d126      	bne.n	800519e <_malloc_r+0x96>
 8005150:	230c      	movs	r3, #12
 8005152:	4630      	mov	r0, r6
 8005154:	6033      	str	r3, [r6, #0]
 8005156:	f000 f9b5 	bl	80054c4 <__malloc_unlock>
 800515a:	e7e4      	b.n	8005126 <_malloc_r+0x1e>
 800515c:	680b      	ldr	r3, [r1, #0]
 800515e:	1b5b      	subs	r3, r3, r5
 8005160:	d41a      	bmi.n	8005198 <_malloc_r+0x90>
 8005162:	2b0b      	cmp	r3, #11
 8005164:	d90f      	bls.n	8005186 <_malloc_r+0x7e>
 8005166:	600b      	str	r3, [r1, #0]
 8005168:	18cc      	adds	r4, r1, r3
 800516a:	50cd      	str	r5, [r1, r3]
 800516c:	4630      	mov	r0, r6
 800516e:	f000 f9a9 	bl	80054c4 <__malloc_unlock>
 8005172:	f104 000b 	add.w	r0, r4, #11
 8005176:	1d23      	adds	r3, r4, #4
 8005178:	f020 0007 	bic.w	r0, r0, #7
 800517c:	1ac3      	subs	r3, r0, r3
 800517e:	d01b      	beq.n	80051b8 <_malloc_r+0xb0>
 8005180:	425a      	negs	r2, r3
 8005182:	50e2      	str	r2, [r4, r3]
 8005184:	bd70      	pop	{r4, r5, r6, pc}
 8005186:	428c      	cmp	r4, r1
 8005188:	bf0b      	itete	eq
 800518a:	6863      	ldreq	r3, [r4, #4]
 800518c:	684b      	ldrne	r3, [r1, #4]
 800518e:	6013      	streq	r3, [r2, #0]
 8005190:	6063      	strne	r3, [r4, #4]
 8005192:	bf18      	it	ne
 8005194:	460c      	movne	r4, r1
 8005196:	e7e9      	b.n	800516c <_malloc_r+0x64>
 8005198:	460c      	mov	r4, r1
 800519a:	6849      	ldr	r1, [r1, #4]
 800519c:	e7ca      	b.n	8005134 <_malloc_r+0x2c>
 800519e:	1cc4      	adds	r4, r0, #3
 80051a0:	f024 0403 	bic.w	r4, r4, #3
 80051a4:	42a0      	cmp	r0, r4
 80051a6:	d005      	beq.n	80051b4 <_malloc_r+0xac>
 80051a8:	1a21      	subs	r1, r4, r0
 80051aa:	4630      	mov	r0, r6
 80051ac:	f000 f80a 	bl	80051c4 <_sbrk_r>
 80051b0:	3001      	adds	r0, #1
 80051b2:	d0cd      	beq.n	8005150 <_malloc_r+0x48>
 80051b4:	6025      	str	r5, [r4, #0]
 80051b6:	e7d9      	b.n	800516c <_malloc_r+0x64>
 80051b8:	bd70      	pop	{r4, r5, r6, pc}
 80051ba:	bf00      	nop
 80051bc:	200007cc 	.word	0x200007cc
 80051c0:	200007d0 	.word	0x200007d0

080051c4 <_sbrk_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	2300      	movs	r3, #0
 80051c8:	4c05      	ldr	r4, [pc, #20]	; (80051e0 <_sbrk_r+0x1c>)
 80051ca:	4605      	mov	r5, r0
 80051cc:	4608      	mov	r0, r1
 80051ce:	6023      	str	r3, [r4, #0]
 80051d0:	f7ff fc48 	bl	8004a64 <_sbrk>
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	d102      	bne.n	80051de <_sbrk_r+0x1a>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	b103      	cbz	r3, 80051de <_sbrk_r+0x1a>
 80051dc:	602b      	str	r3, [r5, #0]
 80051de:	bd38      	pop	{r3, r4, r5, pc}
 80051e0:	20000c7c 	.word	0x20000c7c

080051e4 <strcat>:
 80051e4:	4602      	mov	r2, r0
 80051e6:	b510      	push	{r4, lr}
 80051e8:	4613      	mov	r3, r2
 80051ea:	781c      	ldrb	r4, [r3, #0]
 80051ec:	3201      	adds	r2, #1
 80051ee:	2c00      	cmp	r4, #0
 80051f0:	d1fa      	bne.n	80051e8 <strcat+0x4>
 80051f2:	3b01      	subs	r3, #1
 80051f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051fc:	2a00      	cmp	r2, #0
 80051fe:	d1f9      	bne.n	80051f4 <strcat+0x10>
 8005200:	bd10      	pop	{r4, pc}

08005202 <strncmp>:
 8005202:	b510      	push	{r4, lr}
 8005204:	b16a      	cbz	r2, 8005222 <strncmp+0x20>
 8005206:	3901      	subs	r1, #1
 8005208:	1884      	adds	r4, r0, r2
 800520a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800520e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005212:	4293      	cmp	r3, r2
 8005214:	d103      	bne.n	800521e <strncmp+0x1c>
 8005216:	42a0      	cmp	r0, r4
 8005218:	d001      	beq.n	800521e <strncmp+0x1c>
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f5      	bne.n	800520a <strncmp+0x8>
 800521e:	1a98      	subs	r0, r3, r2
 8005220:	bd10      	pop	{r4, pc}
 8005222:	4610      	mov	r0, r2
 8005224:	bd10      	pop	{r4, pc}

08005226 <strncpy>:
 8005226:	b570      	push	{r4, r5, r6, lr}
 8005228:	4604      	mov	r4, r0
 800522a:	b902      	cbnz	r2, 800522e <strncpy+0x8>
 800522c:	bd70      	pop	{r4, r5, r6, pc}
 800522e:	4623      	mov	r3, r4
 8005230:	f811 5b01 	ldrb.w	r5, [r1], #1
 8005234:	1e56      	subs	r6, r2, #1
 8005236:	f803 5b01 	strb.w	r5, [r3], #1
 800523a:	b91d      	cbnz	r5, 8005244 <strncpy+0x1e>
 800523c:	4414      	add	r4, r2
 800523e:	42a3      	cmp	r3, r4
 8005240:	d103      	bne.n	800524a <strncpy+0x24>
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	461c      	mov	r4, r3
 8005246:	4632      	mov	r2, r6
 8005248:	e7ef      	b.n	800522a <strncpy+0x4>
 800524a:	f803 5b01 	strb.w	r5, [r3], #1
 800524e:	e7f6      	b.n	800523e <strncpy+0x18>

08005250 <strtok>:
 8005250:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <strtok+0x50>)
 8005252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005256:	681d      	ldr	r5, [r3, #0]
 8005258:	4606      	mov	r6, r0
 800525a:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800525c:	460f      	mov	r7, r1
 800525e:	b9b4      	cbnz	r4, 800528e <strtok+0x3e>
 8005260:	2050      	movs	r0, #80	; 0x50
 8005262:	f7ff feed 	bl	8005040 <malloc>
 8005266:	65a8      	str	r0, [r5, #88]	; 0x58
 8005268:	6004      	str	r4, [r0, #0]
 800526a:	6044      	str	r4, [r0, #4]
 800526c:	6084      	str	r4, [r0, #8]
 800526e:	60c4      	str	r4, [r0, #12]
 8005270:	6104      	str	r4, [r0, #16]
 8005272:	6144      	str	r4, [r0, #20]
 8005274:	6184      	str	r4, [r0, #24]
 8005276:	6284      	str	r4, [r0, #40]	; 0x28
 8005278:	62c4      	str	r4, [r0, #44]	; 0x2c
 800527a:	6304      	str	r4, [r0, #48]	; 0x30
 800527c:	6344      	str	r4, [r0, #52]	; 0x34
 800527e:	6384      	str	r4, [r0, #56]	; 0x38
 8005280:	63c4      	str	r4, [r0, #60]	; 0x3c
 8005282:	6404      	str	r4, [r0, #64]	; 0x40
 8005284:	6444      	str	r4, [r0, #68]	; 0x44
 8005286:	6484      	str	r4, [r0, #72]	; 0x48
 8005288:	64c4      	str	r4, [r0, #76]	; 0x4c
 800528a:	7704      	strb	r4, [r0, #28]
 800528c:	6244      	str	r4, [r0, #36]	; 0x24
 800528e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005290:	4639      	mov	r1, r7
 8005292:	4630      	mov	r0, r6
 8005294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005298:	2301      	movs	r3, #1
 800529a:	f000 b803 	b.w	80052a4 <__strtok_r>
 800529e:	bf00      	nop
 80052a0:	20000094 	.word	0x20000094

080052a4 <__strtok_r>:
 80052a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a6:	b918      	cbnz	r0, 80052b0 <__strtok_r+0xc>
 80052a8:	6810      	ldr	r0, [r2, #0]
 80052aa:	b908      	cbnz	r0, 80052b0 <__strtok_r+0xc>
 80052ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ae:	4620      	mov	r0, r4
 80052b0:	4604      	mov	r4, r0
 80052b2:	460f      	mov	r7, r1
 80052b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80052b8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80052bc:	b91e      	cbnz	r6, 80052c6 <__strtok_r+0x22>
 80052be:	b965      	cbnz	r5, 80052da <__strtok_r+0x36>
 80052c0:	6015      	str	r5, [r2, #0]
 80052c2:	4628      	mov	r0, r5
 80052c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c6:	42b5      	cmp	r5, r6
 80052c8:	d1f6      	bne.n	80052b8 <__strtok_r+0x14>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1ef      	bne.n	80052ae <__strtok_r+0xa>
 80052ce:	6014      	str	r4, [r2, #0]
 80052d0:	7003      	strb	r3, [r0, #0]
 80052d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d4:	461c      	mov	r4, r3
 80052d6:	e00c      	b.n	80052f2 <__strtok_r+0x4e>
 80052d8:	b915      	cbnz	r5, 80052e0 <__strtok_r+0x3c>
 80052da:	460e      	mov	r6, r1
 80052dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80052e0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80052e4:	42ab      	cmp	r3, r5
 80052e6:	d1f7      	bne.n	80052d8 <__strtok_r+0x34>
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f3      	beq.n	80052d4 <__strtok_r+0x30>
 80052ec:	2300      	movs	r3, #0
 80052ee:	f804 3c01 	strb.w	r3, [r4, #-1]
 80052f2:	6014      	str	r4, [r2, #0]
 80052f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052f6 <_strtol_l.isra.0>:
 80052f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fa:	4680      	mov	r8, r0
 80052fc:	4689      	mov	r9, r1
 80052fe:	4692      	mov	sl, r2
 8005300:	461f      	mov	r7, r3
 8005302:	468b      	mov	fp, r1
 8005304:	465d      	mov	r5, fp
 8005306:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005308:	f815 4b01 	ldrb.w	r4, [r5], #1
 800530c:	f000 f8c4 	bl	8005498 <__locale_ctype_ptr_l>
 8005310:	4420      	add	r0, r4
 8005312:	7846      	ldrb	r6, [r0, #1]
 8005314:	f016 0608 	ands.w	r6, r6, #8
 8005318:	d10b      	bne.n	8005332 <_strtol_l.isra.0+0x3c>
 800531a:	2c2d      	cmp	r4, #45	; 0x2d
 800531c:	d10b      	bne.n	8005336 <_strtol_l.isra.0+0x40>
 800531e:	2601      	movs	r6, #1
 8005320:	782c      	ldrb	r4, [r5, #0]
 8005322:	f10b 0502 	add.w	r5, fp, #2
 8005326:	b167      	cbz	r7, 8005342 <_strtol_l.isra.0+0x4c>
 8005328:	2f10      	cmp	r7, #16
 800532a:	d114      	bne.n	8005356 <_strtol_l.isra.0+0x60>
 800532c:	2c30      	cmp	r4, #48	; 0x30
 800532e:	d00a      	beq.n	8005346 <_strtol_l.isra.0+0x50>
 8005330:	e011      	b.n	8005356 <_strtol_l.isra.0+0x60>
 8005332:	46ab      	mov	fp, r5
 8005334:	e7e6      	b.n	8005304 <_strtol_l.isra.0+0xe>
 8005336:	2c2b      	cmp	r4, #43	; 0x2b
 8005338:	bf04      	itt	eq
 800533a:	782c      	ldrbeq	r4, [r5, #0]
 800533c:	f10b 0502 	addeq.w	r5, fp, #2
 8005340:	e7f1      	b.n	8005326 <_strtol_l.isra.0+0x30>
 8005342:	2c30      	cmp	r4, #48	; 0x30
 8005344:	d127      	bne.n	8005396 <_strtol_l.isra.0+0xa0>
 8005346:	782b      	ldrb	r3, [r5, #0]
 8005348:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800534c:	2b58      	cmp	r3, #88	; 0x58
 800534e:	d14b      	bne.n	80053e8 <_strtol_l.isra.0+0xf2>
 8005350:	2710      	movs	r7, #16
 8005352:	786c      	ldrb	r4, [r5, #1]
 8005354:	3502      	adds	r5, #2
 8005356:	2e00      	cmp	r6, #0
 8005358:	bf0c      	ite	eq
 800535a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800535e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005362:	2200      	movs	r2, #0
 8005364:	fbb1 fef7 	udiv	lr, r1, r7
 8005368:	4610      	mov	r0, r2
 800536a:	fb07 1c1e 	mls	ip, r7, lr, r1
 800536e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005372:	2b09      	cmp	r3, #9
 8005374:	d811      	bhi.n	800539a <_strtol_l.isra.0+0xa4>
 8005376:	461c      	mov	r4, r3
 8005378:	42a7      	cmp	r7, r4
 800537a:	dd1d      	ble.n	80053b8 <_strtol_l.isra.0+0xc2>
 800537c:	1c53      	adds	r3, r2, #1
 800537e:	d007      	beq.n	8005390 <_strtol_l.isra.0+0x9a>
 8005380:	4586      	cmp	lr, r0
 8005382:	d316      	bcc.n	80053b2 <_strtol_l.isra.0+0xbc>
 8005384:	d101      	bne.n	800538a <_strtol_l.isra.0+0x94>
 8005386:	45a4      	cmp	ip, r4
 8005388:	db13      	blt.n	80053b2 <_strtol_l.isra.0+0xbc>
 800538a:	2201      	movs	r2, #1
 800538c:	fb00 4007 	mla	r0, r0, r7, r4
 8005390:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005394:	e7eb      	b.n	800536e <_strtol_l.isra.0+0x78>
 8005396:	270a      	movs	r7, #10
 8005398:	e7dd      	b.n	8005356 <_strtol_l.isra.0+0x60>
 800539a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800539e:	2b19      	cmp	r3, #25
 80053a0:	d801      	bhi.n	80053a6 <_strtol_l.isra.0+0xb0>
 80053a2:	3c37      	subs	r4, #55	; 0x37
 80053a4:	e7e8      	b.n	8005378 <_strtol_l.isra.0+0x82>
 80053a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80053aa:	2b19      	cmp	r3, #25
 80053ac:	d804      	bhi.n	80053b8 <_strtol_l.isra.0+0xc2>
 80053ae:	3c57      	subs	r4, #87	; 0x57
 80053b0:	e7e2      	b.n	8005378 <_strtol_l.isra.0+0x82>
 80053b2:	f04f 32ff 	mov.w	r2, #4294967295
 80053b6:	e7eb      	b.n	8005390 <_strtol_l.isra.0+0x9a>
 80053b8:	1c53      	adds	r3, r2, #1
 80053ba:	d108      	bne.n	80053ce <_strtol_l.isra.0+0xd8>
 80053bc:	2322      	movs	r3, #34	; 0x22
 80053be:	4608      	mov	r0, r1
 80053c0:	f8c8 3000 	str.w	r3, [r8]
 80053c4:	f1ba 0f00 	cmp.w	sl, #0
 80053c8:	d107      	bne.n	80053da <_strtol_l.isra.0+0xe4>
 80053ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ce:	b106      	cbz	r6, 80053d2 <_strtol_l.isra.0+0xdc>
 80053d0:	4240      	negs	r0, r0
 80053d2:	f1ba 0f00 	cmp.w	sl, #0
 80053d6:	d00c      	beq.n	80053f2 <_strtol_l.isra.0+0xfc>
 80053d8:	b122      	cbz	r2, 80053e4 <_strtol_l.isra.0+0xee>
 80053da:	3d01      	subs	r5, #1
 80053dc:	f8ca 5000 	str.w	r5, [sl]
 80053e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e4:	464d      	mov	r5, r9
 80053e6:	e7f9      	b.n	80053dc <_strtol_l.isra.0+0xe6>
 80053e8:	2430      	movs	r4, #48	; 0x30
 80053ea:	2f00      	cmp	r7, #0
 80053ec:	d1b3      	bne.n	8005356 <_strtol_l.isra.0+0x60>
 80053ee:	2708      	movs	r7, #8
 80053f0:	e7b1      	b.n	8005356 <_strtol_l.isra.0+0x60>
 80053f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080053f8 <strtol>:
 80053f8:	4b08      	ldr	r3, [pc, #32]	; (800541c <strtol+0x24>)
 80053fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053fc:	681c      	ldr	r4, [r3, #0]
 80053fe:	4d08      	ldr	r5, [pc, #32]	; (8005420 <strtol+0x28>)
 8005400:	6a23      	ldr	r3, [r4, #32]
 8005402:	2b00      	cmp	r3, #0
 8005404:	bf08      	it	eq
 8005406:	462b      	moveq	r3, r5
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	4613      	mov	r3, r2
 800540c:	460a      	mov	r2, r1
 800540e:	4601      	mov	r1, r0
 8005410:	4620      	mov	r0, r4
 8005412:	f7ff ff70 	bl	80052f6 <_strtol_l.isra.0>
 8005416:	b003      	add	sp, #12
 8005418:	bd30      	pop	{r4, r5, pc}
 800541a:	bf00      	nop
 800541c:	20000094 	.word	0x20000094
 8005420:	200000f8 	.word	0x200000f8

08005424 <_vsniprintf_r>:
 8005424:	b530      	push	{r4, r5, lr}
 8005426:	1e14      	subs	r4, r2, #0
 8005428:	4605      	mov	r5, r0
 800542a:	b09b      	sub	sp, #108	; 0x6c
 800542c:	4618      	mov	r0, r3
 800542e:	da05      	bge.n	800543c <_vsniprintf_r+0x18>
 8005430:	238b      	movs	r3, #139	; 0x8b
 8005432:	f04f 30ff 	mov.w	r0, #4294967295
 8005436:	602b      	str	r3, [r5, #0]
 8005438:	b01b      	add	sp, #108	; 0x6c
 800543a:	bd30      	pop	{r4, r5, pc}
 800543c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005440:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005444:	bf0c      	ite	eq
 8005446:	4623      	moveq	r3, r4
 8005448:	f104 33ff 	addne.w	r3, r4, #4294967295
 800544c:	9302      	str	r3, [sp, #8]
 800544e:	9305      	str	r3, [sp, #20]
 8005450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005454:	9100      	str	r1, [sp, #0]
 8005456:	9104      	str	r1, [sp, #16]
 8005458:	f8ad 300e 	strh.w	r3, [sp, #14]
 800545c:	4602      	mov	r2, r0
 800545e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005460:	4669      	mov	r1, sp
 8005462:	4628      	mov	r0, r5
 8005464:	f000 f88a 	bl	800557c <_svfiprintf_r>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	bfbc      	itt	lt
 800546c:	238b      	movlt	r3, #139	; 0x8b
 800546e:	602b      	strlt	r3, [r5, #0]
 8005470:	2c00      	cmp	r4, #0
 8005472:	d0e1      	beq.n	8005438 <_vsniprintf_r+0x14>
 8005474:	2200      	movs	r2, #0
 8005476:	9b00      	ldr	r3, [sp, #0]
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	e7dd      	b.n	8005438 <_vsniprintf_r+0x14>

0800547c <vsniprintf>:
 800547c:	b507      	push	{r0, r1, r2, lr}
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	460a      	mov	r2, r1
 8005484:	4601      	mov	r1, r0
 8005486:	4803      	ldr	r0, [pc, #12]	; (8005494 <vsniprintf+0x18>)
 8005488:	6800      	ldr	r0, [r0, #0]
 800548a:	f7ff ffcb 	bl	8005424 <_vsniprintf_r>
 800548e:	b003      	add	sp, #12
 8005490:	f85d fb04 	ldr.w	pc, [sp], #4
 8005494:	20000094 	.word	0x20000094

08005498 <__locale_ctype_ptr_l>:
 8005498:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800549c:	4770      	bx	lr

0800549e <__ascii_mbtowc>:
 800549e:	b082      	sub	sp, #8
 80054a0:	b901      	cbnz	r1, 80054a4 <__ascii_mbtowc+0x6>
 80054a2:	a901      	add	r1, sp, #4
 80054a4:	b142      	cbz	r2, 80054b8 <__ascii_mbtowc+0x1a>
 80054a6:	b14b      	cbz	r3, 80054bc <__ascii_mbtowc+0x1e>
 80054a8:	7813      	ldrb	r3, [r2, #0]
 80054aa:	600b      	str	r3, [r1, #0]
 80054ac:	7812      	ldrb	r2, [r2, #0]
 80054ae:	1c10      	adds	r0, r2, #0
 80054b0:	bf18      	it	ne
 80054b2:	2001      	movne	r0, #1
 80054b4:	b002      	add	sp, #8
 80054b6:	4770      	bx	lr
 80054b8:	4610      	mov	r0, r2
 80054ba:	e7fb      	b.n	80054b4 <__ascii_mbtowc+0x16>
 80054bc:	f06f 0001 	mvn.w	r0, #1
 80054c0:	e7f8      	b.n	80054b4 <__ascii_mbtowc+0x16>

080054c2 <__malloc_lock>:
 80054c2:	4770      	bx	lr

080054c4 <__malloc_unlock>:
 80054c4:	4770      	bx	lr

080054c6 <__ssputs_r>:
 80054c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ca:	688e      	ldr	r6, [r1, #8]
 80054cc:	4682      	mov	sl, r0
 80054ce:	429e      	cmp	r6, r3
 80054d0:	460c      	mov	r4, r1
 80054d2:	4691      	mov	r9, r2
 80054d4:	4698      	mov	r8, r3
 80054d6:	d835      	bhi.n	8005544 <__ssputs_r+0x7e>
 80054d8:	898a      	ldrh	r2, [r1, #12]
 80054da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054de:	d031      	beq.n	8005544 <__ssputs_r+0x7e>
 80054e0:	2302      	movs	r3, #2
 80054e2:	6825      	ldr	r5, [r4, #0]
 80054e4:	6909      	ldr	r1, [r1, #16]
 80054e6:	1a6f      	subs	r7, r5, r1
 80054e8:	6965      	ldr	r5, [r4, #20]
 80054ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054ee:	fb95 f5f3 	sdiv	r5, r5, r3
 80054f2:	f108 0301 	add.w	r3, r8, #1
 80054f6:	443b      	add	r3, r7
 80054f8:	429d      	cmp	r5, r3
 80054fa:	bf38      	it	cc
 80054fc:	461d      	movcc	r5, r3
 80054fe:	0553      	lsls	r3, r2, #21
 8005500:	d531      	bpl.n	8005566 <__ssputs_r+0xa0>
 8005502:	4629      	mov	r1, r5
 8005504:	f7ff fe00 	bl	8005108 <_malloc_r>
 8005508:	4606      	mov	r6, r0
 800550a:	b950      	cbnz	r0, 8005522 <__ssputs_r+0x5c>
 800550c:	230c      	movs	r3, #12
 800550e:	f8ca 3000 	str.w	r3, [sl]
 8005512:	89a3      	ldrh	r3, [r4, #12]
 8005514:	f04f 30ff 	mov.w	r0, #4294967295
 8005518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800551c:	81a3      	strh	r3, [r4, #12]
 800551e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005522:	463a      	mov	r2, r7
 8005524:	6921      	ldr	r1, [r4, #16]
 8005526:	f000 fad0 	bl	8005aca <memcpy>
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005534:	81a3      	strh	r3, [r4, #12]
 8005536:	6126      	str	r6, [r4, #16]
 8005538:	443e      	add	r6, r7
 800553a:	6026      	str	r6, [r4, #0]
 800553c:	4646      	mov	r6, r8
 800553e:	6165      	str	r5, [r4, #20]
 8005540:	1bed      	subs	r5, r5, r7
 8005542:	60a5      	str	r5, [r4, #8]
 8005544:	4546      	cmp	r6, r8
 8005546:	bf28      	it	cs
 8005548:	4646      	movcs	r6, r8
 800554a:	4649      	mov	r1, r9
 800554c:	4632      	mov	r2, r6
 800554e:	6820      	ldr	r0, [r4, #0]
 8005550:	f000 fac6 	bl	8005ae0 <memmove>
 8005554:	68a3      	ldr	r3, [r4, #8]
 8005556:	2000      	movs	r0, #0
 8005558:	1b9b      	subs	r3, r3, r6
 800555a:	60a3      	str	r3, [r4, #8]
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	441e      	add	r6, r3
 8005560:	6026      	str	r6, [r4, #0]
 8005562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005566:	462a      	mov	r2, r5
 8005568:	f000 fad4 	bl	8005b14 <_realloc_r>
 800556c:	4606      	mov	r6, r0
 800556e:	2800      	cmp	r0, #0
 8005570:	d1e1      	bne.n	8005536 <__ssputs_r+0x70>
 8005572:	6921      	ldr	r1, [r4, #16]
 8005574:	4650      	mov	r0, sl
 8005576:	f7ff fd7b 	bl	8005070 <_free_r>
 800557a:	e7c7      	b.n	800550c <__ssputs_r+0x46>

0800557c <_svfiprintf_r>:
 800557c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005580:	b09d      	sub	sp, #116	; 0x74
 8005582:	9303      	str	r3, [sp, #12]
 8005584:	898b      	ldrh	r3, [r1, #12]
 8005586:	4680      	mov	r8, r0
 8005588:	061c      	lsls	r4, r3, #24
 800558a:	460d      	mov	r5, r1
 800558c:	4616      	mov	r6, r2
 800558e:	d50f      	bpl.n	80055b0 <_svfiprintf_r+0x34>
 8005590:	690b      	ldr	r3, [r1, #16]
 8005592:	b96b      	cbnz	r3, 80055b0 <_svfiprintf_r+0x34>
 8005594:	2140      	movs	r1, #64	; 0x40
 8005596:	f7ff fdb7 	bl	8005108 <_malloc_r>
 800559a:	6028      	str	r0, [r5, #0]
 800559c:	6128      	str	r0, [r5, #16]
 800559e:	b928      	cbnz	r0, 80055ac <_svfiprintf_r+0x30>
 80055a0:	230c      	movs	r3, #12
 80055a2:	f8c8 3000 	str.w	r3, [r8]
 80055a6:	f04f 30ff 	mov.w	r0, #4294967295
 80055aa:	e0c4      	b.n	8005736 <_svfiprintf_r+0x1ba>
 80055ac:	2340      	movs	r3, #64	; 0x40
 80055ae:	616b      	str	r3, [r5, #20]
 80055b0:	2300      	movs	r3, #0
 80055b2:	9309      	str	r3, [sp, #36]	; 0x24
 80055b4:	2320      	movs	r3, #32
 80055b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055ba:	2330      	movs	r3, #48	; 0x30
 80055bc:	f04f 0b01 	mov.w	fp, #1
 80055c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055c4:	4637      	mov	r7, r6
 80055c6:	463c      	mov	r4, r7
 80055c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d13c      	bne.n	800564a <_svfiprintf_r+0xce>
 80055d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80055d4:	d00b      	beq.n	80055ee <_svfiprintf_r+0x72>
 80055d6:	4653      	mov	r3, sl
 80055d8:	4632      	mov	r2, r6
 80055da:	4629      	mov	r1, r5
 80055dc:	4640      	mov	r0, r8
 80055de:	f7ff ff72 	bl	80054c6 <__ssputs_r>
 80055e2:	3001      	adds	r0, #1
 80055e4:	f000 80a2 	beq.w	800572c <_svfiprintf_r+0x1b0>
 80055e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ea:	4453      	add	r3, sl
 80055ec:	9309      	str	r3, [sp, #36]	; 0x24
 80055ee:	783b      	ldrb	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 809b 	beq.w	800572c <_svfiprintf_r+0x1b0>
 80055f6:	2300      	movs	r3, #0
 80055f8:	f04f 32ff 	mov.w	r2, #4294967295
 80055fc:	9304      	str	r3, [sp, #16]
 80055fe:	9307      	str	r3, [sp, #28]
 8005600:	9205      	str	r2, [sp, #20]
 8005602:	9306      	str	r3, [sp, #24]
 8005604:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005608:	931a      	str	r3, [sp, #104]	; 0x68
 800560a:	2205      	movs	r2, #5
 800560c:	7821      	ldrb	r1, [r4, #0]
 800560e:	4850      	ldr	r0, [pc, #320]	; (8005750 <_svfiprintf_r+0x1d4>)
 8005610:	f000 fa4d 	bl	8005aae <memchr>
 8005614:	1c67      	adds	r7, r4, #1
 8005616:	9b04      	ldr	r3, [sp, #16]
 8005618:	b9d8      	cbnz	r0, 8005652 <_svfiprintf_r+0xd6>
 800561a:	06d9      	lsls	r1, r3, #27
 800561c:	bf44      	itt	mi
 800561e:	2220      	movmi	r2, #32
 8005620:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005624:	071a      	lsls	r2, r3, #28
 8005626:	bf44      	itt	mi
 8005628:	222b      	movmi	r2, #43	; 0x2b
 800562a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800562e:	7822      	ldrb	r2, [r4, #0]
 8005630:	2a2a      	cmp	r2, #42	; 0x2a
 8005632:	d016      	beq.n	8005662 <_svfiprintf_r+0xe6>
 8005634:	2100      	movs	r1, #0
 8005636:	200a      	movs	r0, #10
 8005638:	9a07      	ldr	r2, [sp, #28]
 800563a:	4627      	mov	r7, r4
 800563c:	783b      	ldrb	r3, [r7, #0]
 800563e:	3401      	adds	r4, #1
 8005640:	3b30      	subs	r3, #48	; 0x30
 8005642:	2b09      	cmp	r3, #9
 8005644:	d950      	bls.n	80056e8 <_svfiprintf_r+0x16c>
 8005646:	b1c9      	cbz	r1, 800567c <_svfiprintf_r+0x100>
 8005648:	e011      	b.n	800566e <_svfiprintf_r+0xf2>
 800564a:	2b25      	cmp	r3, #37	; 0x25
 800564c:	d0c0      	beq.n	80055d0 <_svfiprintf_r+0x54>
 800564e:	4627      	mov	r7, r4
 8005650:	e7b9      	b.n	80055c6 <_svfiprintf_r+0x4a>
 8005652:	4a3f      	ldr	r2, [pc, #252]	; (8005750 <_svfiprintf_r+0x1d4>)
 8005654:	463c      	mov	r4, r7
 8005656:	1a80      	subs	r0, r0, r2
 8005658:	fa0b f000 	lsl.w	r0, fp, r0
 800565c:	4318      	orrs	r0, r3
 800565e:	9004      	str	r0, [sp, #16]
 8005660:	e7d3      	b.n	800560a <_svfiprintf_r+0x8e>
 8005662:	9a03      	ldr	r2, [sp, #12]
 8005664:	1d11      	adds	r1, r2, #4
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	9103      	str	r1, [sp, #12]
 800566a:	2a00      	cmp	r2, #0
 800566c:	db01      	blt.n	8005672 <_svfiprintf_r+0xf6>
 800566e:	9207      	str	r2, [sp, #28]
 8005670:	e004      	b.n	800567c <_svfiprintf_r+0x100>
 8005672:	4252      	negs	r2, r2
 8005674:	f043 0302 	orr.w	r3, r3, #2
 8005678:	9207      	str	r2, [sp, #28]
 800567a:	9304      	str	r3, [sp, #16]
 800567c:	783b      	ldrb	r3, [r7, #0]
 800567e:	2b2e      	cmp	r3, #46	; 0x2e
 8005680:	d10d      	bne.n	800569e <_svfiprintf_r+0x122>
 8005682:	787b      	ldrb	r3, [r7, #1]
 8005684:	1c79      	adds	r1, r7, #1
 8005686:	2b2a      	cmp	r3, #42	; 0x2a
 8005688:	d132      	bne.n	80056f0 <_svfiprintf_r+0x174>
 800568a:	9b03      	ldr	r3, [sp, #12]
 800568c:	3702      	adds	r7, #2
 800568e:	1d1a      	adds	r2, r3, #4
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	9203      	str	r2, [sp, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	bfb8      	it	lt
 8005698:	f04f 33ff 	movlt.w	r3, #4294967295
 800569c:	9305      	str	r3, [sp, #20]
 800569e:	4c2d      	ldr	r4, [pc, #180]	; (8005754 <_svfiprintf_r+0x1d8>)
 80056a0:	2203      	movs	r2, #3
 80056a2:	7839      	ldrb	r1, [r7, #0]
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 fa02 	bl	8005aae <memchr>
 80056aa:	b138      	cbz	r0, 80056bc <_svfiprintf_r+0x140>
 80056ac:	2340      	movs	r3, #64	; 0x40
 80056ae:	1b00      	subs	r0, r0, r4
 80056b0:	fa03 f000 	lsl.w	r0, r3, r0
 80056b4:	9b04      	ldr	r3, [sp, #16]
 80056b6:	3701      	adds	r7, #1
 80056b8:	4303      	orrs	r3, r0
 80056ba:	9304      	str	r3, [sp, #16]
 80056bc:	7839      	ldrb	r1, [r7, #0]
 80056be:	2206      	movs	r2, #6
 80056c0:	4825      	ldr	r0, [pc, #148]	; (8005758 <_svfiprintf_r+0x1dc>)
 80056c2:	1c7e      	adds	r6, r7, #1
 80056c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056c8:	f000 f9f1 	bl	8005aae <memchr>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d035      	beq.n	800573c <_svfiprintf_r+0x1c0>
 80056d0:	4b22      	ldr	r3, [pc, #136]	; (800575c <_svfiprintf_r+0x1e0>)
 80056d2:	b9fb      	cbnz	r3, 8005714 <_svfiprintf_r+0x198>
 80056d4:	9b03      	ldr	r3, [sp, #12]
 80056d6:	3307      	adds	r3, #7
 80056d8:	f023 0307 	bic.w	r3, r3, #7
 80056dc:	3308      	adds	r3, #8
 80056de:	9303      	str	r3, [sp, #12]
 80056e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e2:	444b      	add	r3, r9
 80056e4:	9309      	str	r3, [sp, #36]	; 0x24
 80056e6:	e76d      	b.n	80055c4 <_svfiprintf_r+0x48>
 80056e8:	fb00 3202 	mla	r2, r0, r2, r3
 80056ec:	2101      	movs	r1, #1
 80056ee:	e7a4      	b.n	800563a <_svfiprintf_r+0xbe>
 80056f0:	2300      	movs	r3, #0
 80056f2:	240a      	movs	r4, #10
 80056f4:	4618      	mov	r0, r3
 80056f6:	9305      	str	r3, [sp, #20]
 80056f8:	460f      	mov	r7, r1
 80056fa:	783a      	ldrb	r2, [r7, #0]
 80056fc:	3101      	adds	r1, #1
 80056fe:	3a30      	subs	r2, #48	; 0x30
 8005700:	2a09      	cmp	r2, #9
 8005702:	d903      	bls.n	800570c <_svfiprintf_r+0x190>
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0ca      	beq.n	800569e <_svfiprintf_r+0x122>
 8005708:	9005      	str	r0, [sp, #20]
 800570a:	e7c8      	b.n	800569e <_svfiprintf_r+0x122>
 800570c:	fb04 2000 	mla	r0, r4, r0, r2
 8005710:	2301      	movs	r3, #1
 8005712:	e7f1      	b.n	80056f8 <_svfiprintf_r+0x17c>
 8005714:	ab03      	add	r3, sp, #12
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	462a      	mov	r2, r5
 800571a:	4b11      	ldr	r3, [pc, #68]	; (8005760 <_svfiprintf_r+0x1e4>)
 800571c:	a904      	add	r1, sp, #16
 800571e:	4640      	mov	r0, r8
 8005720:	f3af 8000 	nop.w
 8005724:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005728:	4681      	mov	r9, r0
 800572a:	d1d9      	bne.n	80056e0 <_svfiprintf_r+0x164>
 800572c:	89ab      	ldrh	r3, [r5, #12]
 800572e:	065b      	lsls	r3, r3, #25
 8005730:	f53f af39 	bmi.w	80055a6 <_svfiprintf_r+0x2a>
 8005734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005736:	b01d      	add	sp, #116	; 0x74
 8005738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573c:	ab03      	add	r3, sp, #12
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	462a      	mov	r2, r5
 8005742:	4b07      	ldr	r3, [pc, #28]	; (8005760 <_svfiprintf_r+0x1e4>)
 8005744:	a904      	add	r1, sp, #16
 8005746:	4640      	mov	r0, r8
 8005748:	f000 f884 	bl	8005854 <_printf_i>
 800574c:	e7ea      	b.n	8005724 <_svfiprintf_r+0x1a8>
 800574e:	bf00      	nop
 8005750:	0800642e 	.word	0x0800642e
 8005754:	08006434 	.word	0x08006434
 8005758:	08006438 	.word	0x08006438
 800575c:	00000000 	.word	0x00000000
 8005760:	080054c7 	.word	0x080054c7

08005764 <_printf_common>:
 8005764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005768:	4691      	mov	r9, r2
 800576a:	461f      	mov	r7, r3
 800576c:	688a      	ldr	r2, [r1, #8]
 800576e:	690b      	ldr	r3, [r1, #16]
 8005770:	4606      	mov	r6, r0
 8005772:	4293      	cmp	r3, r2
 8005774:	bfb8      	it	lt
 8005776:	4613      	movlt	r3, r2
 8005778:	f8c9 3000 	str.w	r3, [r9]
 800577c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005780:	460c      	mov	r4, r1
 8005782:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005786:	b112      	cbz	r2, 800578e <_printf_common+0x2a>
 8005788:	3301      	adds	r3, #1
 800578a:	f8c9 3000 	str.w	r3, [r9]
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	0699      	lsls	r1, r3, #26
 8005792:	bf42      	ittt	mi
 8005794:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005798:	3302      	addmi	r3, #2
 800579a:	f8c9 3000 	strmi.w	r3, [r9]
 800579e:	6825      	ldr	r5, [r4, #0]
 80057a0:	f015 0506 	ands.w	r5, r5, #6
 80057a4:	d107      	bne.n	80057b6 <_printf_common+0x52>
 80057a6:	f104 0a19 	add.w	sl, r4, #25
 80057aa:	68e3      	ldr	r3, [r4, #12]
 80057ac:	f8d9 2000 	ldr.w	r2, [r9]
 80057b0:	1a9b      	subs	r3, r3, r2
 80057b2:	429d      	cmp	r5, r3
 80057b4:	db2a      	blt.n	800580c <_printf_common+0xa8>
 80057b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80057ba:	6822      	ldr	r2, [r4, #0]
 80057bc:	3300      	adds	r3, #0
 80057be:	bf18      	it	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	0692      	lsls	r2, r2, #26
 80057c4:	d42f      	bmi.n	8005826 <_printf_common+0xc2>
 80057c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057ca:	4639      	mov	r1, r7
 80057cc:	4630      	mov	r0, r6
 80057ce:	47c0      	blx	r8
 80057d0:	3001      	adds	r0, #1
 80057d2:	d022      	beq.n	800581a <_printf_common+0xb6>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	68e5      	ldr	r5, [r4, #12]
 80057d8:	f003 0306 	and.w	r3, r3, #6
 80057dc:	2b04      	cmp	r3, #4
 80057de:	bf18      	it	ne
 80057e0:	2500      	movne	r5, #0
 80057e2:	f8d9 2000 	ldr.w	r2, [r9]
 80057e6:	f04f 0900 	mov.w	r9, #0
 80057ea:	bf08      	it	eq
 80057ec:	1aad      	subeq	r5, r5, r2
 80057ee:	68a3      	ldr	r3, [r4, #8]
 80057f0:	6922      	ldr	r2, [r4, #16]
 80057f2:	bf08      	it	eq
 80057f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057f8:	4293      	cmp	r3, r2
 80057fa:	bfc4      	itt	gt
 80057fc:	1a9b      	subgt	r3, r3, r2
 80057fe:	18ed      	addgt	r5, r5, r3
 8005800:	341a      	adds	r4, #26
 8005802:	454d      	cmp	r5, r9
 8005804:	d11b      	bne.n	800583e <_printf_common+0xda>
 8005806:	2000      	movs	r0, #0
 8005808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580c:	2301      	movs	r3, #1
 800580e:	4652      	mov	r2, sl
 8005810:	4639      	mov	r1, r7
 8005812:	4630      	mov	r0, r6
 8005814:	47c0      	blx	r8
 8005816:	3001      	adds	r0, #1
 8005818:	d103      	bne.n	8005822 <_printf_common+0xbe>
 800581a:	f04f 30ff 	mov.w	r0, #4294967295
 800581e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005822:	3501      	adds	r5, #1
 8005824:	e7c1      	b.n	80057aa <_printf_common+0x46>
 8005826:	2030      	movs	r0, #48	; 0x30
 8005828:	18e1      	adds	r1, r4, r3
 800582a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005834:	4422      	add	r2, r4
 8005836:	3302      	adds	r3, #2
 8005838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800583c:	e7c3      	b.n	80057c6 <_printf_common+0x62>
 800583e:	2301      	movs	r3, #1
 8005840:	4622      	mov	r2, r4
 8005842:	4639      	mov	r1, r7
 8005844:	4630      	mov	r0, r6
 8005846:	47c0      	blx	r8
 8005848:	3001      	adds	r0, #1
 800584a:	d0e6      	beq.n	800581a <_printf_common+0xb6>
 800584c:	f109 0901 	add.w	r9, r9, #1
 8005850:	e7d7      	b.n	8005802 <_printf_common+0x9e>
	...

08005854 <_printf_i>:
 8005854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005858:	4617      	mov	r7, r2
 800585a:	7e0a      	ldrb	r2, [r1, #24]
 800585c:	b085      	sub	sp, #20
 800585e:	2a6e      	cmp	r2, #110	; 0x6e
 8005860:	4698      	mov	r8, r3
 8005862:	4606      	mov	r6, r0
 8005864:	460c      	mov	r4, r1
 8005866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005868:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800586c:	f000 80bc 	beq.w	80059e8 <_printf_i+0x194>
 8005870:	d81a      	bhi.n	80058a8 <_printf_i+0x54>
 8005872:	2a63      	cmp	r2, #99	; 0x63
 8005874:	d02e      	beq.n	80058d4 <_printf_i+0x80>
 8005876:	d80a      	bhi.n	800588e <_printf_i+0x3a>
 8005878:	2a00      	cmp	r2, #0
 800587a:	f000 80c8 	beq.w	8005a0e <_printf_i+0x1ba>
 800587e:	2a58      	cmp	r2, #88	; 0x58
 8005880:	f000 808a 	beq.w	8005998 <_printf_i+0x144>
 8005884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005888:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800588c:	e02a      	b.n	80058e4 <_printf_i+0x90>
 800588e:	2a64      	cmp	r2, #100	; 0x64
 8005890:	d001      	beq.n	8005896 <_printf_i+0x42>
 8005892:	2a69      	cmp	r2, #105	; 0x69
 8005894:	d1f6      	bne.n	8005884 <_printf_i+0x30>
 8005896:	6821      	ldr	r1, [r4, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800589e:	d023      	beq.n	80058e8 <_printf_i+0x94>
 80058a0:	1d11      	adds	r1, r2, #4
 80058a2:	6019      	str	r1, [r3, #0]
 80058a4:	6813      	ldr	r3, [r2, #0]
 80058a6:	e027      	b.n	80058f8 <_printf_i+0xa4>
 80058a8:	2a73      	cmp	r2, #115	; 0x73
 80058aa:	f000 80b4 	beq.w	8005a16 <_printf_i+0x1c2>
 80058ae:	d808      	bhi.n	80058c2 <_printf_i+0x6e>
 80058b0:	2a6f      	cmp	r2, #111	; 0x6f
 80058b2:	d02a      	beq.n	800590a <_printf_i+0xb6>
 80058b4:	2a70      	cmp	r2, #112	; 0x70
 80058b6:	d1e5      	bne.n	8005884 <_printf_i+0x30>
 80058b8:	680a      	ldr	r2, [r1, #0]
 80058ba:	f042 0220 	orr.w	r2, r2, #32
 80058be:	600a      	str	r2, [r1, #0]
 80058c0:	e003      	b.n	80058ca <_printf_i+0x76>
 80058c2:	2a75      	cmp	r2, #117	; 0x75
 80058c4:	d021      	beq.n	800590a <_printf_i+0xb6>
 80058c6:	2a78      	cmp	r2, #120	; 0x78
 80058c8:	d1dc      	bne.n	8005884 <_printf_i+0x30>
 80058ca:	2278      	movs	r2, #120	; 0x78
 80058cc:	496f      	ldr	r1, [pc, #444]	; (8005a8c <_printf_i+0x238>)
 80058ce:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80058d2:	e064      	b.n	800599e <_printf_i+0x14a>
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80058da:	1d11      	adds	r1, r2, #4
 80058dc:	6019      	str	r1, [r3, #0]
 80058de:	6813      	ldr	r3, [r2, #0]
 80058e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0a3      	b.n	8005a30 <_printf_i+0x1dc>
 80058e8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80058ec:	f102 0104 	add.w	r1, r2, #4
 80058f0:	6019      	str	r1, [r3, #0]
 80058f2:	d0d7      	beq.n	80058a4 <_printf_i+0x50>
 80058f4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	da03      	bge.n	8005904 <_printf_i+0xb0>
 80058fc:	222d      	movs	r2, #45	; 0x2d
 80058fe:	425b      	negs	r3, r3
 8005900:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005904:	4962      	ldr	r1, [pc, #392]	; (8005a90 <_printf_i+0x23c>)
 8005906:	220a      	movs	r2, #10
 8005908:	e017      	b.n	800593a <_printf_i+0xe6>
 800590a:	6820      	ldr	r0, [r4, #0]
 800590c:	6819      	ldr	r1, [r3, #0]
 800590e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005912:	d003      	beq.n	800591c <_printf_i+0xc8>
 8005914:	1d08      	adds	r0, r1, #4
 8005916:	6018      	str	r0, [r3, #0]
 8005918:	680b      	ldr	r3, [r1, #0]
 800591a:	e006      	b.n	800592a <_printf_i+0xd6>
 800591c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005920:	f101 0004 	add.w	r0, r1, #4
 8005924:	6018      	str	r0, [r3, #0]
 8005926:	d0f7      	beq.n	8005918 <_printf_i+0xc4>
 8005928:	880b      	ldrh	r3, [r1, #0]
 800592a:	2a6f      	cmp	r2, #111	; 0x6f
 800592c:	bf14      	ite	ne
 800592e:	220a      	movne	r2, #10
 8005930:	2208      	moveq	r2, #8
 8005932:	4957      	ldr	r1, [pc, #348]	; (8005a90 <_printf_i+0x23c>)
 8005934:	2000      	movs	r0, #0
 8005936:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800593a:	6865      	ldr	r5, [r4, #4]
 800593c:	2d00      	cmp	r5, #0
 800593e:	60a5      	str	r5, [r4, #8]
 8005940:	f2c0 809c 	blt.w	8005a7c <_printf_i+0x228>
 8005944:	6820      	ldr	r0, [r4, #0]
 8005946:	f020 0004 	bic.w	r0, r0, #4
 800594a:	6020      	str	r0, [r4, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d13f      	bne.n	80059d0 <_printf_i+0x17c>
 8005950:	2d00      	cmp	r5, #0
 8005952:	f040 8095 	bne.w	8005a80 <_printf_i+0x22c>
 8005956:	4675      	mov	r5, lr
 8005958:	2a08      	cmp	r2, #8
 800595a:	d10b      	bne.n	8005974 <_printf_i+0x120>
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	07da      	lsls	r2, r3, #31
 8005960:	d508      	bpl.n	8005974 <_printf_i+0x120>
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	6862      	ldr	r2, [r4, #4]
 8005966:	429a      	cmp	r2, r3
 8005968:	bfde      	ittt	le
 800596a:	2330      	movle	r3, #48	; 0x30
 800596c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005970:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005974:	ebae 0305 	sub.w	r3, lr, r5
 8005978:	6123      	str	r3, [r4, #16]
 800597a:	f8cd 8000 	str.w	r8, [sp]
 800597e:	463b      	mov	r3, r7
 8005980:	aa03      	add	r2, sp, #12
 8005982:	4621      	mov	r1, r4
 8005984:	4630      	mov	r0, r6
 8005986:	f7ff feed 	bl	8005764 <_printf_common>
 800598a:	3001      	adds	r0, #1
 800598c:	d155      	bne.n	8005a3a <_printf_i+0x1e6>
 800598e:	f04f 30ff 	mov.w	r0, #4294967295
 8005992:	b005      	add	sp, #20
 8005994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005998:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800599c:	493c      	ldr	r1, [pc, #240]	; (8005a90 <_printf_i+0x23c>)
 800599e:	6822      	ldr	r2, [r4, #0]
 80059a0:	6818      	ldr	r0, [r3, #0]
 80059a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80059a6:	f100 0504 	add.w	r5, r0, #4
 80059aa:	601d      	str	r5, [r3, #0]
 80059ac:	d001      	beq.n	80059b2 <_printf_i+0x15e>
 80059ae:	6803      	ldr	r3, [r0, #0]
 80059b0:	e002      	b.n	80059b8 <_printf_i+0x164>
 80059b2:	0655      	lsls	r5, r2, #25
 80059b4:	d5fb      	bpl.n	80059ae <_printf_i+0x15a>
 80059b6:	8803      	ldrh	r3, [r0, #0]
 80059b8:	07d0      	lsls	r0, r2, #31
 80059ba:	bf44      	itt	mi
 80059bc:	f042 0220 	orrmi.w	r2, r2, #32
 80059c0:	6022      	strmi	r2, [r4, #0]
 80059c2:	b91b      	cbnz	r3, 80059cc <_printf_i+0x178>
 80059c4:	6822      	ldr	r2, [r4, #0]
 80059c6:	f022 0220 	bic.w	r2, r2, #32
 80059ca:	6022      	str	r2, [r4, #0]
 80059cc:	2210      	movs	r2, #16
 80059ce:	e7b1      	b.n	8005934 <_printf_i+0xe0>
 80059d0:	4675      	mov	r5, lr
 80059d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80059d6:	fb02 3310 	mls	r3, r2, r0, r3
 80059da:	5ccb      	ldrb	r3, [r1, r3]
 80059dc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80059e0:	4603      	mov	r3, r0
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d1f5      	bne.n	80059d2 <_printf_i+0x17e>
 80059e6:	e7b7      	b.n	8005958 <_printf_i+0x104>
 80059e8:	6808      	ldr	r0, [r1, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	f010 0f80 	tst.w	r0, #128	; 0x80
 80059f0:	6949      	ldr	r1, [r1, #20]
 80059f2:	d004      	beq.n	80059fe <_printf_i+0x1aa>
 80059f4:	1d10      	adds	r0, r2, #4
 80059f6:	6018      	str	r0, [r3, #0]
 80059f8:	6813      	ldr	r3, [r2, #0]
 80059fa:	6019      	str	r1, [r3, #0]
 80059fc:	e007      	b.n	8005a0e <_printf_i+0x1ba>
 80059fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a02:	f102 0004 	add.w	r0, r2, #4
 8005a06:	6018      	str	r0, [r3, #0]
 8005a08:	6813      	ldr	r3, [r2, #0]
 8005a0a:	d0f6      	beq.n	80059fa <_printf_i+0x1a6>
 8005a0c:	8019      	strh	r1, [r3, #0]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	4675      	mov	r5, lr
 8005a12:	6123      	str	r3, [r4, #16]
 8005a14:	e7b1      	b.n	800597a <_printf_i+0x126>
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	1d11      	adds	r1, r2, #4
 8005a1a:	6019      	str	r1, [r3, #0]
 8005a1c:	6815      	ldr	r5, [r2, #0]
 8005a1e:	2100      	movs	r1, #0
 8005a20:	6862      	ldr	r2, [r4, #4]
 8005a22:	4628      	mov	r0, r5
 8005a24:	f000 f843 	bl	8005aae <memchr>
 8005a28:	b108      	cbz	r0, 8005a2e <_printf_i+0x1da>
 8005a2a:	1b40      	subs	r0, r0, r5
 8005a2c:	6060      	str	r0, [r4, #4]
 8005a2e:	6863      	ldr	r3, [r4, #4]
 8005a30:	6123      	str	r3, [r4, #16]
 8005a32:	2300      	movs	r3, #0
 8005a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a38:	e79f      	b.n	800597a <_printf_i+0x126>
 8005a3a:	6923      	ldr	r3, [r4, #16]
 8005a3c:	462a      	mov	r2, r5
 8005a3e:	4639      	mov	r1, r7
 8005a40:	4630      	mov	r0, r6
 8005a42:	47c0      	blx	r8
 8005a44:	3001      	adds	r0, #1
 8005a46:	d0a2      	beq.n	800598e <_printf_i+0x13a>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	079b      	lsls	r3, r3, #30
 8005a4c:	d507      	bpl.n	8005a5e <_printf_i+0x20a>
 8005a4e:	2500      	movs	r5, #0
 8005a50:	f104 0919 	add.w	r9, r4, #25
 8005a54:	68e3      	ldr	r3, [r4, #12]
 8005a56:	9a03      	ldr	r2, [sp, #12]
 8005a58:	1a9b      	subs	r3, r3, r2
 8005a5a:	429d      	cmp	r5, r3
 8005a5c:	db05      	blt.n	8005a6a <_printf_i+0x216>
 8005a5e:	68e0      	ldr	r0, [r4, #12]
 8005a60:	9b03      	ldr	r3, [sp, #12]
 8005a62:	4298      	cmp	r0, r3
 8005a64:	bfb8      	it	lt
 8005a66:	4618      	movlt	r0, r3
 8005a68:	e793      	b.n	8005992 <_printf_i+0x13e>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	464a      	mov	r2, r9
 8005a6e:	4639      	mov	r1, r7
 8005a70:	4630      	mov	r0, r6
 8005a72:	47c0      	blx	r8
 8005a74:	3001      	adds	r0, #1
 8005a76:	d08a      	beq.n	800598e <_printf_i+0x13a>
 8005a78:	3501      	adds	r5, #1
 8005a7a:	e7eb      	b.n	8005a54 <_printf_i+0x200>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1a7      	bne.n	80059d0 <_printf_i+0x17c>
 8005a80:	780b      	ldrb	r3, [r1, #0]
 8005a82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a8a:	e765      	b.n	8005958 <_printf_i+0x104>
 8005a8c:	08006450 	.word	0x08006450
 8005a90:	0800643f 	.word	0x0800643f

08005a94 <__ascii_wctomb>:
 8005a94:	b149      	cbz	r1, 8005aaa <__ascii_wctomb+0x16>
 8005a96:	2aff      	cmp	r2, #255	; 0xff
 8005a98:	bf8b      	itete	hi
 8005a9a:	238a      	movhi	r3, #138	; 0x8a
 8005a9c:	700a      	strbls	r2, [r1, #0]
 8005a9e:	6003      	strhi	r3, [r0, #0]
 8005aa0:	2001      	movls	r0, #1
 8005aa2:	bf88      	it	hi
 8005aa4:	f04f 30ff 	movhi.w	r0, #4294967295
 8005aa8:	4770      	bx	lr
 8005aaa:	4608      	mov	r0, r1
 8005aac:	4770      	bx	lr

08005aae <memchr>:
 8005aae:	b510      	push	{r4, lr}
 8005ab0:	b2c9      	uxtb	r1, r1
 8005ab2:	4402      	add	r2, r0
 8005ab4:	4290      	cmp	r0, r2
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	d101      	bne.n	8005abe <memchr+0x10>
 8005aba:	2000      	movs	r0, #0
 8005abc:	bd10      	pop	{r4, pc}
 8005abe:	781c      	ldrb	r4, [r3, #0]
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	428c      	cmp	r4, r1
 8005ac4:	d1f6      	bne.n	8005ab4 <memchr+0x6>
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	bd10      	pop	{r4, pc}

08005aca <memcpy>:
 8005aca:	b510      	push	{r4, lr}
 8005acc:	1e43      	subs	r3, r0, #1
 8005ace:	440a      	add	r2, r1
 8005ad0:	4291      	cmp	r1, r2
 8005ad2:	d100      	bne.n	8005ad6 <memcpy+0xc>
 8005ad4:	bd10      	pop	{r4, pc}
 8005ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ade:	e7f7      	b.n	8005ad0 <memcpy+0x6>

08005ae0 <memmove>:
 8005ae0:	4288      	cmp	r0, r1
 8005ae2:	b510      	push	{r4, lr}
 8005ae4:	eb01 0302 	add.w	r3, r1, r2
 8005ae8:	d803      	bhi.n	8005af2 <memmove+0x12>
 8005aea:	1e42      	subs	r2, r0, #1
 8005aec:	4299      	cmp	r1, r3
 8005aee:	d10c      	bne.n	8005b0a <memmove+0x2a>
 8005af0:	bd10      	pop	{r4, pc}
 8005af2:	4298      	cmp	r0, r3
 8005af4:	d2f9      	bcs.n	8005aea <memmove+0xa>
 8005af6:	1881      	adds	r1, r0, r2
 8005af8:	1ad2      	subs	r2, r2, r3
 8005afa:	42d3      	cmn	r3, r2
 8005afc:	d100      	bne.n	8005b00 <memmove+0x20>
 8005afe:	bd10      	pop	{r4, pc}
 8005b00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b04:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005b08:	e7f7      	b.n	8005afa <memmove+0x1a>
 8005b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b0e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b12:	e7eb      	b.n	8005aec <memmove+0xc>

08005b14 <_realloc_r>:
 8005b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b16:	4607      	mov	r7, r0
 8005b18:	4614      	mov	r4, r2
 8005b1a:	460e      	mov	r6, r1
 8005b1c:	b921      	cbnz	r1, 8005b28 <_realloc_r+0x14>
 8005b1e:	4611      	mov	r1, r2
 8005b20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b24:	f7ff baf0 	b.w	8005108 <_malloc_r>
 8005b28:	b922      	cbnz	r2, 8005b34 <_realloc_r+0x20>
 8005b2a:	f7ff faa1 	bl	8005070 <_free_r>
 8005b2e:	4625      	mov	r5, r4
 8005b30:	4628      	mov	r0, r5
 8005b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b34:	f000 f814 	bl	8005b60 <_malloc_usable_size_r>
 8005b38:	4284      	cmp	r4, r0
 8005b3a:	d90f      	bls.n	8005b5c <_realloc_r+0x48>
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	4638      	mov	r0, r7
 8005b40:	f7ff fae2 	bl	8005108 <_malloc_r>
 8005b44:	4605      	mov	r5, r0
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d0f2      	beq.n	8005b30 <_realloc_r+0x1c>
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	f7ff ffbc 	bl	8005aca <memcpy>
 8005b52:	4631      	mov	r1, r6
 8005b54:	4638      	mov	r0, r7
 8005b56:	f7ff fa8b 	bl	8005070 <_free_r>
 8005b5a:	e7e9      	b.n	8005b30 <_realloc_r+0x1c>
 8005b5c:	4635      	mov	r5, r6
 8005b5e:	e7e7      	b.n	8005b30 <_realloc_r+0x1c>

08005b60 <_malloc_usable_size_r>:
 8005b60:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005b64:	2800      	cmp	r0, #0
 8005b66:	f1a0 0004 	sub.w	r0, r0, #4
 8005b6a:	bfbc      	itt	lt
 8005b6c:	580b      	ldrlt	r3, [r1, r0]
 8005b6e:	18c0      	addlt	r0, r0, r3
 8005b70:	4770      	bx	lr
	...

08005b74 <_init>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	bf00      	nop
 8005b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7a:	bc08      	pop	{r3}
 8005b7c:	469e      	mov	lr, r3
 8005b7e:	4770      	bx	lr

08005b80 <_fini>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	bf00      	nop
 8005b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b86:	bc08      	pop	{r3}
 8005b88:	469e      	mov	lr, r3
 8005b8a:	4770      	bx	lr
